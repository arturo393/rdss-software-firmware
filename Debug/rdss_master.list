
rdss_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000778c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c1c  08007c1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c24  08007c24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08007c9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08007c9c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f4c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  00032fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00035f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a020  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e96  00000000  00000000  00051f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eacc  00000000  00000000  00066e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f58ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  000f593c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007880 	.word	0x08007880

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007880 	.word	0x08007880

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2uiz>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	d20e      	bcs.n	80009aa <__aeabi_f2uiz+0x22>
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30b      	bcc.n	80009aa <__aeabi_f2uiz+0x22>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d409      	bmi.n	80009b0 <__aeabi_f2uiz+0x28>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	fa23 f002 	lsr.w	r0, r3, r2
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr
 80009b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b4:	d101      	bne.n	80009ba <__aeabi_f2uiz+0x32>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d102      	bne.n	80009c0 <__aeabi_f2uiz+0x38>
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	4770      	bx	lr
 80009c0:	f04f 0000 	mov.w	r0, #0
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <__aeabi_uldivmod>:
 80009c8:	b953      	cbnz	r3, 80009e0 <__aeabi_uldivmod+0x18>
 80009ca:	b94a      	cbnz	r2, 80009e0 <__aeabi_uldivmod+0x18>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	bf08      	it	eq
 80009d0:	2800      	cmpeq	r0, #0
 80009d2:	bf1c      	itt	ne
 80009d4:	f04f 31ff 	movne.w	r1, #4294967295
 80009d8:	f04f 30ff 	movne.w	r0, #4294967295
 80009dc:	f000 b976 	b.w	8000ccc <__aeabi_idiv0>
 80009e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e8:	f000 f806 	bl	80009f8 <__udivmoddi4>
 80009ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr

080009f8 <__udivmoddi4>:
 80009f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009fc:	9e08      	ldr	r6, [sp, #32]
 80009fe:	460d      	mov	r5, r1
 8000a00:	4604      	mov	r4, r0
 8000a02:	4688      	mov	r8, r1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d14d      	bne.n	8000aa4 <__udivmoddi4+0xac>
 8000a08:	428a      	cmp	r2, r1
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	d968      	bls.n	8000ae0 <__udivmoddi4+0xe8>
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	b152      	cbz	r2, 8000a2a <__udivmoddi4+0x32>
 8000a14:	fa01 f302 	lsl.w	r3, r1, r2
 8000a18:	f1c2 0120 	rsb	r1, r2, #32
 8000a1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000a20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a24:	ea41 0803 	orr.w	r8, r1, r3
 8000a28:	4094      	lsls	r4, r2
 8000a2a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a2e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	fb01 8817 	mls	r8, r1, r7, r8
 8000a3a:	fb07 f00e 	mul.w	r0, r7, lr
 8000a3e:	0c23      	lsrs	r3, r4, #16
 8000a40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a44:	4298      	cmp	r0, r3
 8000a46:	d90a      	bls.n	8000a5e <__udivmoddi4+0x66>
 8000a48:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000a50:	f080 811e 	bcs.w	8000c90 <__udivmoddi4+0x298>
 8000a54:	4298      	cmp	r0, r3
 8000a56:	f240 811b 	bls.w	8000c90 <__udivmoddi4+0x298>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4463      	add	r3, ip
 8000a5e:	1a1b      	subs	r3, r3, r0
 8000a60:	fbb3 f0f1 	udiv	r0, r3, r1
 8000a64:	fb01 3310 	mls	r3, r1, r0, r3
 8000a68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a6c:	b2a4      	uxth	r4, r4
 8000a6e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	d90a      	bls.n	8000a8c <__udivmoddi4+0x94>
 8000a76:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7e:	f080 8109 	bcs.w	8000c94 <__udivmoddi4+0x29c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f240 8106 	bls.w	8000c94 <__udivmoddi4+0x29c>
 8000a88:	4464      	add	r4, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a96:	b11e      	cbz	r6, 8000aa0 <__udivmoddi4+0xa8>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	40d4      	lsrs	r4, r2
 8000a9c:	e9c6 4300 	strd	r4, r3, [r6]
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0xc2>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	f000 80ee 	beq.w	8000c8a <__udivmoddi4+0x292>
 8000aae:	2100      	movs	r1, #0
 8000ab0:	e9c6 0500 	strd	r0, r5, [r6]
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	fab3 f183 	clz	r1, r3
 8000abe:	2900      	cmp	r1, #0
 8000ac0:	d14a      	bne.n	8000b58 <__udivmoddi4+0x160>
 8000ac2:	42ab      	cmp	r3, r5
 8000ac4:	d302      	bcc.n	8000acc <__udivmoddi4+0xd4>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f200 80fc 	bhi.w	8000cc4 <__udivmoddi4+0x2cc>
 8000acc:	1a84      	subs	r4, r0, r2
 8000ace:	eb65 0303 	sbc.w	r3, r5, r3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	4698      	mov	r8, r3
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d0e2      	beq.n	8000aa0 <__udivmoddi4+0xa8>
 8000ada:	e9c6 4800 	strd	r4, r8, [r6]
 8000ade:	e7df      	b.n	8000aa0 <__udivmoddi4+0xa8>
 8000ae0:	b902      	cbnz	r2, 8000ae4 <__udivmoddi4+0xec>
 8000ae2:	deff      	udf	#255	; 0xff
 8000ae4:	fab2 f282 	clz	r2, r2
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	f040 8091 	bne.w	8000c10 <__udivmoddi4+0x218>
 8000aee:	eba1 000c 	sub.w	r0, r1, ip
 8000af2:	2101      	movs	r1, #1
 8000af4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af8:	fa1f fe8c 	uxth.w	lr, ip
 8000afc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000b00:	fb07 0013 	mls	r0, r7, r3, r0
 8000b04:	0c25      	lsrs	r5, r4, #16
 8000b06:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000b0a:	fb0e f003 	mul.w	r0, lr, r3
 8000b0e:	42a8      	cmp	r0, r5
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x12c>
 8000b12:	eb1c 0505 	adds.w	r5, ip, r5
 8000b16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x12a>
 8000b1c:	42a8      	cmp	r0, r5
 8000b1e:	f200 80ce 	bhi.w	8000cbe <__udivmoddi4+0x2c6>
 8000b22:	4643      	mov	r3, r8
 8000b24:	1a2d      	subs	r5, r5, r0
 8000b26:	fbb5 f0f7 	udiv	r0, r5, r7
 8000b2a:	fb07 5510 	mls	r5, r7, r0, r5
 8000b2e:	fb0e fe00 	mul.w	lr, lr, r0
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b38:	45a6      	cmp	lr, r4
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x156>
 8000b3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000b44:	d202      	bcs.n	8000b4c <__udivmoddi4+0x154>
 8000b46:	45a6      	cmp	lr, r4
 8000b48:	f200 80b6 	bhi.w	8000cb8 <__udivmoddi4+0x2c0>
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b56:	e79e      	b.n	8000a96 <__udivmoddi4+0x9e>
 8000b58:	f1c1 0720 	rsb	r7, r1, #32
 8000b5c:	408b      	lsls	r3, r1
 8000b5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b66:	fa25 fa07 	lsr.w	sl, r5, r7
 8000b6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6e:	fbba f8f9 	udiv	r8, sl, r9
 8000b72:	fa20 f307 	lsr.w	r3, r0, r7
 8000b76:	fb09 aa18 	mls	sl, r9, r8, sl
 8000b7a:	408d      	lsls	r5, r1
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	431d      	orrs	r5, r3
 8000b82:	fa00 f301 	lsl.w	r3, r0, r1
 8000b86:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8a:	0c2c      	lsrs	r4, r5, #16
 8000b8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000b90:	42a0      	cmp	r0, r4
 8000b92:	fa02 f201 	lsl.w	r2, r2, r1
 8000b96:	d90b      	bls.n	8000bb0 <__udivmoddi4+0x1b8>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba0:	f080 8088 	bcs.w	8000cb4 <__udivmoddi4+0x2bc>
 8000ba4:	42a0      	cmp	r0, r4
 8000ba6:	f240 8085 	bls.w	8000cb4 <__udivmoddi4+0x2bc>
 8000baa:	f1a8 0802 	sub.w	r8, r8, #2
 8000bae:	4464      	add	r4, ip
 8000bb0:	1a24      	subs	r4, r4, r0
 8000bb2:	fbb4 f0f9 	udiv	r0, r4, r9
 8000bb6:	fb09 4410 	mls	r4, r9, r0, r4
 8000bba:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bbe:	b2ad      	uxth	r5, r5
 8000bc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x1e2>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000bd0:	d26c      	bcs.n	8000cac <__udivmoddi4+0x2b4>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	d96a      	bls.n	8000cac <__udivmoddi4+0x2b4>
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	4464      	add	r4, ip
 8000bda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bde:	fba0 9502 	umull	r9, r5, r0, r2
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	42ac      	cmp	r4, r5
 8000be8:	46c8      	mov	r8, r9
 8000bea:	46ae      	mov	lr, r5
 8000bec:	d356      	bcc.n	8000c9c <__udivmoddi4+0x2a4>
 8000bee:	d053      	beq.n	8000c98 <__udivmoddi4+0x2a0>
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d069      	beq.n	8000cc8 <__udivmoddi4+0x2d0>
 8000bf4:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf8:	eb64 040e 	sbc.w	r4, r4, lr
 8000bfc:	fa22 f301 	lsr.w	r3, r2, r1
 8000c00:	fa04 f707 	lsl.w	r7, r4, r7
 8000c04:	431f      	orrs	r7, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c6 7400 	strd	r7, r4, [r6]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e747      	b.n	8000aa0 <__udivmoddi4+0xa8>
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	f1c2 0120 	rsb	r1, r2, #32
 8000c18:	fa25 f301 	lsr.w	r3, r5, r1
 8000c1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c20:	fa20 f101 	lsr.w	r1, r0, r1
 8000c24:	4095      	lsls	r5, r2
 8000c26:	430d      	orrs	r5, r1
 8000c28:	fbb3 f1f7 	udiv	r1, r3, r7
 8000c2c:	fb07 3311 	mls	r3, r7, r1, r3
 8000c30:	fa1f fe8c 	uxth.w	lr, ip
 8000c34:	0c28      	lsrs	r0, r5, #16
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	fb01 f30e 	mul.w	r3, r1, lr
 8000c3e:	4283      	cmp	r3, r0
 8000c40:	fa04 f402 	lsl.w	r4, r4, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x260>
 8000c46:	eb1c 0000 	adds.w	r0, ip, r0
 8000c4a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c4e:	d22f      	bcs.n	8000cb0 <__udivmoddi4+0x2b8>
 8000c50:	4283      	cmp	r3, r0
 8000c52:	d92d      	bls.n	8000cb0 <__udivmoddi4+0x2b8>
 8000c54:	3902      	subs	r1, #2
 8000c56:	4460      	add	r0, ip
 8000c58:	1ac0      	subs	r0, r0, r3
 8000c5a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c5e:	fb07 0013 	mls	r0, r7, r3, r0
 8000c62:	b2ad      	uxth	r5, r5
 8000c64:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c68:	fb03 f00e 	mul.w	r0, r3, lr
 8000c6c:	42a8      	cmp	r0, r5
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x28a>
 8000c70:	eb1c 0505 	adds.w	r5, ip, r5
 8000c74:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c78:	d216      	bcs.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c7a:	42a8      	cmp	r0, r5
 8000c7c:	d914      	bls.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c7e:	3b02      	subs	r3, #2
 8000c80:	4465      	add	r5, ip
 8000c82:	1a28      	subs	r0, r5, r0
 8000c84:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c88:	e738      	b.n	8000afc <__udivmoddi4+0x104>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e707      	b.n	8000aa0 <__udivmoddi4+0xa8>
 8000c90:	462f      	mov	r7, r5
 8000c92:	e6e4      	b.n	8000a5e <__udivmoddi4+0x66>
 8000c94:	4618      	mov	r0, r3
 8000c96:	e6f9      	b.n	8000a8c <__udivmoddi4+0x94>
 8000c98:	454b      	cmp	r3, r9
 8000c9a:	d2a9      	bcs.n	8000bf0 <__udivmoddi4+0x1f8>
 8000c9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	e7a3      	b.n	8000bf0 <__udivmoddi4+0x1f8>
 8000ca8:	4643      	mov	r3, r8
 8000caa:	e7ea      	b.n	8000c82 <__udivmoddi4+0x28a>
 8000cac:	4628      	mov	r0, r5
 8000cae:	e794      	b.n	8000bda <__udivmoddi4+0x1e2>
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	e7d1      	b.n	8000c58 <__udivmoddi4+0x260>
 8000cb4:	46d0      	mov	r8, sl
 8000cb6:	e77b      	b.n	8000bb0 <__udivmoddi4+0x1b8>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	e747      	b.n	8000b4e <__udivmoddi4+0x156>
 8000cbe:	3b02      	subs	r3, #2
 8000cc0:	4465      	add	r5, ip
 8000cc2:	e72f      	b.n	8000b24 <__udivmoddi4+0x12c>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e706      	b.n	8000ad6 <__udivmoddi4+0xde>
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e6e9      	b.n	8000aa0 <__udivmoddi4+0xa8>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include "SX1278.h"

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
	uint8_t rec = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	480f      	ldr	r0, [pc, #60]	; (8000d24 <readRegister+0x54>)
 8000ce6:	f003 f8f4 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f002 fb44 	bl	8003378 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000cf0:	1cf9      	adds	r1, r7, #3
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f004 fe82 	bl	8005a00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000cfc:	f107 010f 	add.w	r1, r7, #15
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2201      	movs	r2, #1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f004 ffbe 	bl	8005c86 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f002 fb34 	bl	8003378 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <readRegister+0x54>)
 8000d16:	f003 f8dc 	bl	8003ed2 <HAL_GPIO_WritePin>
	return rec;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40010c00 	.word	0x40010c00

08000d28 <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	460b      	mov	r3, r1
 8000d36:	72fb      	strb	r3, [r7, #11]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	72bb      	strb	r3, [r7, #10]
	if (lenght > 4)
 8000d3c:	7abb      	ldrb	r3, [r7, #10]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d83a      	bhi.n	8000db8 <writeRegister+0x90>
		return;
	uint8_t tx_data[5] = { 0 };
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	2300      	movs	r3, #0
 8000d48:	753b      	strb	r3, [r7, #20]
	tx_data[0] = address | 0x80;
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	e00f      	b.n	8000d7e <writeRegister+0x56>
		tx_data[i] = cmd[j++];
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	61fa      	str	r2, [r7, #28]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	7819      	ldrb	r1, [r3, #0]
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4413      	add	r3, r2
 8000d74:	460a      	mov	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	7abb      	ldrb	r3, [r7, #10]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	ddeb      	ble.n	8000d5e <writeRegister+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000d86:	2200      	movs	r2, #0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <writeRegister+0x98>)
 8000d8c:	f003 f8a1 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000d90:	7abb      	ldrb	r3, [r7, #10]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f107 0110 	add.w	r1, r7, #16
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f004 fe2d 	bl	8005a00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000da6:	2201      	movs	r2, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <writeRegister+0x98>)
 8000dac:	f003 f891 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000db0:	200a      	movs	r0, #10
 8000db2:	f002 fae1 	bl	8003378 <HAL_Delay>
 8000db6:	e000      	b.n	8000dba <writeRegister+0x92>
		return;
 8000db8:	bf00      	nop
}
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <setRFFrequencyReg>:
    rec =  spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
    return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	6809      	ldr	r1, [r1, #0]
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	0b55      	lsrs	r5, r2, #13
 8000dd8:	04d4      	lsls	r4, r2, #19
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <setRFFrequencyReg+0x7c>)
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	4620      	mov	r0, r4
 8000de2:	4629      	mov	r1, r5
 8000de4:	f7ff fdf0 	bl	80009c8 <__aeabi_uldivmod>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000df0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	0c02      	lsrs	r2, r0, #16
 8000dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e02:	0c0b      	lsrs	r3, r1, #16
 8000e04:	b2d3      	uxtb	r3, r2
 8000e06:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000e08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	0a02      	lsrs	r2, r0, #8
 8000e16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1a:	0a0b      	lsrs	r3, r1, #8
 8000e1c:	b2d3      	uxtb	r3, r2
 8000e1e:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000e20:	7c3b      	ldrb	r3, [r7, #16]
 8000e22:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000e2a:	f107 020c 	add.w	r2, r7, #12
 8000e2e:	2303      	movs	r3, #3
 8000e30:	2106      	movs	r1, #6
 8000e32:	f7ff ff79 	bl	8000d28 <writeRegister>

}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	01e84800 	.word	0x01e84800

08000e44 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 020c 	add.w	r2, r3, #12
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2109      	movs	r1, #9
 8000e5c:	f7ff ff64 	bl	8000d28 <writeRegister>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 0213 	add.w	r2, r3, #19
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	210b      	movs	r1, #11
 8000e80:	f7ff ff52 	bl	8000d28 <writeRegister>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f103 0216 	add.w	r2, r3, #22
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	211f      	movs	r1, #31
 8000ea4:	f7ff ff40 	bl	8000d28 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f103 0218 	add.w	r2, r3, #24
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	f7ff ff36 	bl	8000d28 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f103 0219 	add.w	r2, r3, #25
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2121      	movs	r1, #33	; 0x21
 8000ecc:	f7ff ff2c 	bl	8000d28 <writeRegister>
			1);
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
	cmd = module->bandwidth << 4;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b9b      	ldrb	r3, [r3, #14]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
	cmd += module->codingRate << 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7bdb      	ldrb	r3, [r3, #15]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f5a      	ldrb	r2, [r3, #29]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4413      	add	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000f10:	f107 020f 	add.w	r2, r7, #15
 8000f14:	2301      	movs	r3, #1
 8000f16:	211d      	movs	r1, #29
 8000f18:	f7ff ff06 	bl	8000d28 <writeRegister>

	cmd = module->spreadFactor << 4;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b5b      	ldrb	r3, [r3, #13]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7c1b      	ldrb	r3, [r3, #16]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7dda      	ldrb	r2, [r3, #23]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000f48:	f107 020f 	add.w	r2, r7, #15
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	211e      	movs	r1, #30
 8000f50:	f7ff feea 	bl	8000d28 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f103 0215 	add.w	r2, r3, #21
 8000f60:	2301      	movs	r3, #1
 8000f62:	2126      	movs	r1, #38	; 0x26
 8000f64:	f7ff fee0 	bl	8000d28 <writeRegister>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f7e:	2131      	movs	r1, #49	; 0x31
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fea5 	bl	8000cd0 <readRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f023 0307 	bic.w	r3, r3, #7
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f043 0305 	orr.w	r3, r3, #5
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000fa4:	f107 020f 	add.w	r2, r7, #15
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2131      	movs	r1, #49	; 0x31
 8000fac:	f7ff febc 	bl	8000d28 <writeRegister>
	tmp = 0x0C;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000fba:	f107 020f 	add.w	r2, r7, #15
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2137      	movs	r1, #55	; 0x37
 8000fc2:	f7ff feb1 	bl	8000d28 <writeRegister>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <setLoraLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoraLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8000fea:	f107 020f 	add.w	r2, r7, #15
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	f7ff fe99 	bl	8000d28 <writeRegister>
	module->operatingMode = mode;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 800100e:	23ff      	movs	r3, #255	; 0xff
 8001010:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001018:	f107 020f 	add.w	r2, r7, #15
 800101c:	2301      	movs	r3, #1
 800101e:	2112      	movs	r1, #18
 8001020:	f7ff fe82 	bl	8000d28 <writeRegister>
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	setLoraLowFreqModeReg(module, SLEEP);
 8001034:	2100      	movs	r1, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffc9 	bl	8000fce <setLoraLowFreqModeReg>
	HAL_Delay(15);
 800103c:	200f      	movs	r0, #15
 800103e:	f002 f99b 	bl	8003378 <HAL_Delay>
	setRFFrequencyReg(module);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff febe 	bl	8000dc4 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0212 	add.w	r2, r3, #18
 8001054:	2301      	movs	r3, #1
 8001056:	2139      	movs	r1, #57	; 0x39
 8001058:	f7ff fe66 	bl	8000d28 <writeRegister>
	setOutputPower(module);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fef1 	bl	8000e44 <setOutputPower>
	setOvercurrentProtect(module);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff00 	bl	8000e68 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f103 0214 	add.w	r2, r3, #20
 8001074:	2301      	movs	r3, #1
 8001076:	210c      	movs	r1, #12
 8001078:	f7ff fe56 	bl	8000d28 <writeRegister>
	if (module->spreadFactor == SF_6) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7b5b      	ldrb	r3, [r3, #13]
 8001080:	2b06      	cmp	r3, #6
 8001082:	d109      	bne.n	8001098 <writeLoRaParametersReg+0x6c>
		module->headerMode = IMPLICIT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x03;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	75da      	strb	r2, [r3, #23]
		setDetectionParametersReg(module);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff6d 	bl	8000f70 <setDetectionParametersReg>
 8001096:	e005      	b.n	80010a4 <writeLoRaParametersReg+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x00;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	75da      	strb	r2, [r3, #23]
	}

	setReModemConfig(module);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff17 	bl	8000ed8 <setReModemConfig>
	setPreambleParameters(module);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff feee 	bl	8000e8c <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f103 021a 	add.w	r2, r3, #26
 80010bc:	2301      	movs	r3, #1
 80010be:	2124      	movs	r1, #36	; 0x24
 80010c0:	f7ff fe32 	bl	8000d28 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f103 021b 	add.w	r2, r3, #27
 80010d0:	2301      	movs	r3, #1
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	f7ff fe28 	bl	8000d28 <writeRegister>
	clearIrqFlagsReg(module);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff94 	bl	8001006 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 021c 	add.w	r2, r3, #28
 80010ea:	2301      	movs	r3, #1
 80010ec:	2111      	movs	r1, #17
 80010ee:	f7ff fe1b 	bl	8000d28 <writeRegister>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <updateMode>:

void updateMode(SX1278_t *module, Lora_Mode_t mode) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	70fb      	strb	r3, [r7, #3]

	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <updateMode+0x18>
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d11f      	bne.n	8001152 <updateMode+0x58>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <updateMode+0x24>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	e001      	b.n	8001122 <updateMode+0x28>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
		module->frequency =
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2241      	movs	r2, #65	; 0x41
 800112a:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f1b      	ldrb	r3, [r3, #28]
 8001136:	f023 0308 	bic.w	r3, r3, #8
 800113a:	b2da      	uxtb	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		module->status = TX_MODE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001150:	e02b      	b.n	80011aa <updateMode+0xb0>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d002      	beq.n	800115e <updateMode+0x64>
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d125      	bne.n	80011aa <updateMode+0xb0>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <updateMode+0x70>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	e001      	b.n	800116e <updateMode+0x74>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
		module->frequency =
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, RX_DONE_MASK);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7f1b      	ldrb	r3, [r3, #28]
 8001182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001186:	b2da      	uxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7f1b      	ldrb	r3, [r3, #28]
 8001190:	f023 0320 	bic.w	r3, r3, #32
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	78fa      	ldrb	r2, [r7, #3]
 800119e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		module->status = RX_MODE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2202      	movs	r2, #2
 80011a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}
	setLoraLowFreqModeReg(module, STANDBY);
 80011aa:	2101      	movs	r1, #1
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff0e 	bl	8000fce <setLoraLowFreqModeReg>
	HAL_Delay(15);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f002 f8e0 	bl	8003378 <HAL_Delay>
	setRFFrequencyReg(module);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fe03 	bl	8000dc4 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 021b 	add.w	r2, r3, #27
 80011ca:	2301      	movs	r3, #1
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	f7ff fdab 	bl	8000d28 <writeRegister>
	clearIrqFlagsReg(module);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff17 	bl	8001006 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f103 021c 	add.w	r2, r3, #28
 80011e4:	2301      	movs	r3, #1
 80011e6:	2111      	movs	r1, #17
 80011e8:	f7ff fd9e 	bl	8000d28 <writeRegister>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <sx1278Reset>:
	module->preambleLengthLsb = 12; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
	module->len = 9;
}

void sx1278Reset() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <sx1278Reset+0x34>)
 80011fe:	f002 fe68 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <sx1278Reset+0x34>)
 8001208:	f002 fe63 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f002 f8b3 	bl	8003378 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2101      	movs	r1, #1
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <sx1278Reset+0x34>)
 8001218:	f002 fe5b 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f002 f8ab 	bl	8003378 <HAL_Delay>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40010c00 	.word	0x40010c00

0800122c <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8001234:	f002 f896 	bl	8003364 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 800123c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001240:	481a      	ldr	r0, [pc, #104]	; (80012ac <waitForTxEnd+0x80>)
 8001242:	f002 fe2f 	bl	8003ea4 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d018      	beq.n	800127e <waitForTxEnd+0x52>
			int timeEnd = HAL_GetTick();
 800124c:	f002 f88a 	bl	8003364 <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]
			loRa->lastTxTime = timeEnd - timeStart;
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	621a      	str	r2, [r3, #32]
			readRegister(loRa->spi, LR_RegIrqFlags);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001266:	2112      	movs	r1, #18
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd31 	bl	8000cd0 <readRegister>
			clearIrqFlagsReg(loRa);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fec9 	bl	8001006 <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			return;
 800127c:	e012      	b.n	80012a4 <waitForTxEnd+0x78>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 800127e:	f002 f871 	bl	8003364 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800128c:	d906      	bls.n	800129c <waitForTxEnd+0x70>
			sx1278Reset();
 800128e:	f7ff ffb1 	bl	80011f4 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			return;
 800129a:	e003      	b.n	80012a4 <waitForTxEnd+0x78>
		}
		HAL_Delay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f002 f86b 	bl	8003378 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 80012a2:	e7cb      	b.n	800123c <waitForTxEnd+0x10>
	}
}
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40010c00 	.word	0x40010c00

080012b0 <setRxFifoAddr>:
    }
    return 0;
}


void setRxFifoAddr(SX1278_t *module) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	setLoraLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fe87 	bl	8000fce <setLoraLowFreqModeReg>
	uint8_t cmd = module->len;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7c5b      	ldrb	r3, [r3, #17]
 80012c4:	73fb      	strb	r3, [r7, #15]
	//cmd = 9;
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80012cc:	f107 020f 	add.w	r2, r7, #15
 80012d0:	2301      	movs	r3, #1
 80012d2:	2122      	movs	r1, #34	; 0x22
 80012d4:	f7ff fd28 	bl	8000d28 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012de:	210f      	movs	r1, #15
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fcf5 	bl	8000cd0 <readRegister>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73bb      	strb	r3, [r7, #14]
	addr = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80012f4:	f107 020e 	add.w	r2, r7, #14
 80012f8:	2301      	movs	r3, #1
 80012fa:	210d      	movs	r1, #13
 80012fc:	f7ff fd14 	bl	8000d28 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	2122      	movs	r1, #34	; 0x22
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fce1 	bl	8000cd0 <readRegister>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	745a      	strb	r2, [r3, #17]
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <crcErrorActivation>:

int crcErrorActivation(SX1278_t *module) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	uint8_t flags;
	flags = readRegister(module->spi, LR_RegIrqFlags);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	2112      	movs	r1, #18
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fcce 	bl	8000cd0 <readRegister>
 8001334:	4603      	mov	r3, r0
 8001336:	73bb      	strb	r3, [r7, #14]
	SET_BIT(flags, RX_DONE_MASK);
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133e:	b2db      	uxtb	r3, r3
 8001340:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegIrqFlags, &flags, 1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001348:	f107 020e 	add.w	r2, r7, #14
 800134c:	2301      	movs	r3, #1
 800134e:	2112      	movs	r1, #18
 8001350:	f7ff fcea 	bl	8000d28 <writeRegister>
	flags = readRegister(module->spi, LR_RegIrqFlags);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135a:	2112      	movs	r1, #18
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fcb7 	bl	8000cd0 <readRegister>
 8001362:	4603      	mov	r3, r0
 8001364:	73bb      	strb	r3, [r7, #14]
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	73fb      	strb	r3, [r7, #15]
	return errorActivation;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <getRxFifoData>:

void getRxFifoData(SX1278_t *module) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	module->len = readRegister(module->spi, LR_RegRxNbBytes); //Number for received bytes
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	2113      	movs	r1, #19
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fca1 	bl	8000cd0 <readRegister>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	745a      	strb	r2, [r3, #17]
	uint8_t addr = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <getRxFifoData+0x7c>)
 80013a0:	f002 fd97 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f001 ffe7 	bl	8003378 <HAL_Delay>
	HAL_SPI_Transmit(module->spi, &addr, 1, 100); // send address
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80013b0:	f107 010f 	add.w	r1, r7, #15
 80013b4:	2364      	movs	r3, #100	; 0x64
 80013b6:	2201      	movs	r2, #1
 80013b8:	f004 fb22 	bl	8005a00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(module->spi, module->buffer, module->len, 100); // receive 6 bytes data
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7c5b      	ldrb	r3, [r3, #17]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	f004 fc59 	bl	8005c86 <HAL_SPI_Receive>
	HAL_Delay(1);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 ffcf 	bl	8003378 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 80013da:	2201      	movs	r2, #1
 80013dc:	2101      	movs	r1, #1
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <getRxFifoData+0x7c>)
 80013e0:	f002 fd77 	bl	8003ed2 <HAL_GPIO_WritePin>
	module->status = RX_DONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <setTxFifoAddr>:

void setTxFifoAddr(SX1278_t *module) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7c5b      	ldrb	r3, [r3, #17]
 8001404:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800140c:	f107 020f 	add.w	r2, r7, #15
 8001410:	2301      	movs	r3, #1
 8001412:	2122      	movs	r1, #34	; 0x22
 8001414:	f7ff fc88 	bl	8000d28 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141e:	210e      	movs	r1, #14
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc55 	bl	8000cd0 <readRegister>
 8001426:	4603      	mov	r3, r0
 8001428:	73bb      	strb	r3, [r7, #14]
	addr = 0x80;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001434:	f107 020e 	add.w	r2, r7, #14
 8001438:	2301      	movs	r3, #1
 800143a:	210d      	movs	r1, #13
 800143c:	f7ff fc74 	bl	8000d28 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	2122      	movs	r1, #34	; 0x22
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fc41 	bl	8000cd0 <readRegister>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	745a      	strb	r2, [r3, #17]
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <setTxFifoData>:

void setTxFifoData(SX1278_t *module) {
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	setTxFifoAddr(module);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffc6 	bl	80013f8 <setTxFifoAddr>
	for (int i = 0; i < module->len; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e011      	b.n	8001496 <setTxFifoData+0x38>
		uint8_t data = module->buffer[i];
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	332b      	adds	r3, #43	; 0x2b
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	72fb      	strb	r3, [r7, #11]
		writeRegister(module->spi, 0x00, &data, 1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8001484:	f107 020b 	add.w	r2, r7, #11
 8001488:	2301      	movs	r3, #1
 800148a:	2100      	movs	r1, #0
 800148c:	f7ff fc4c 	bl	8000d28 <writeRegister>
	for (int i = 0; i < module->len; i++) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7c5b      	ldrb	r3, [r3, #17]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4293      	cmp	r3, r2
 80014a0:	dbe7      	blt.n	8001472 <setTxFifoData+0x14>
	}
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <clearMemForRx>:

void clearMemForRx(SX1278_t *module) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if (module->status == RX_MODE) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d106      	bne.n	80014cc <clearMemForRx+0x20>
		memset(module->buffer, 0, SX1278_MAX_PACKET);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	332b      	adds	r3, #43	; 0x2b
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fd66 	bl	8006f98 <memset>
	}
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <transmit>:
	clearMemForRx(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffbe 	bl	800145e <setTxFifoData>
	setLoraLowFreqModeReg(loRa, TX);
 80014e2:	2103      	movs	r1, #3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fd72 	bl	8000fce <setLoraLowFreqModeReg>
	waitForTxEnd(loRa);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe9e 	bl	800122c <waitForTxEnd>
	memset(loRa->buffer, 0, sizeof(loRa->buffer));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	332b      	adds	r3, #43	; 0x2b
 80014f4:	2264      	movs	r2, #100	; 0x64
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 fd4d 	bl	8006f98 <memset>
	loRa->len = 0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	745a      	strb	r2, [r3, #17]
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_readLoRaSettings>:

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
		loRa->dlFreq = DOWNLINK_FREQ;
}

void HAL_readLoRaSettings(SX1278_t *loRa) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->spreadFactor), 0, 1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f103 010d 	add.w	r1, r3, #13
 800151a:	2301      	movs	r3, #1
 800151c:	2200      	movs	r2, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f8c6 	bl	80016b0 <HAL_readPage>
	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->bandwidth), 1, 1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f103 010e 	add.w	r1, r3, #14
 800152a:	2301      	movs	r3, #1
 800152c:	2201      	movs	r2, #1
 800152e:	2000      	movs	r0, #0
 8001530:	f000 f8be 	bl	80016b0 <HAL_readPage>
	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f103 010f 	add.w	r1, r3, #15
 800153a:	2301      	movs	r3, #1
 800153c:	2202      	movs	r2, #2
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f8b6 	bl	80016b0 <HAL_readPage>
	HAL_readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->upFreq), 0, 4);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f103 0108 	add.w	r1, r3, #8
 800154a:	2304      	movs	r3, #4
 800154c:	2200      	movs	r2, #0
 800154e:	2010      	movs	r0, #16
 8001550:	f000 f8ae 	bl	80016b0 <HAL_readPage>
	HAL_readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->dlFreq), 4, 4);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1d19      	adds	r1, r3, #4
 8001558:	2304      	movs	r3, #4
 800155a:	2204      	movs	r2, #4
 800155c:	2010      	movs	r0, #16
 800155e:	f000 f8a7 	bl	80016b0 <HAL_readPage>
	if (loRa->spreadFactor < SF_9 || loRa->spreadFactor > SF_12)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b5b      	ldrb	r3, [r3, #13]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d903      	bls.n	8001572 <HAL_readLoRaSettings+0x66>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b5b      	ldrb	r3, [r3, #13]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d902      	bls.n	8001578 <HAL_readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	220a      	movs	r2, #10
 8001576:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7b9b      	ldrb	r3, [r3, #14]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d902      	bls.n	8001586 <HAL_readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2206      	movs	r2, #6
 8001584:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7bdb      	ldrb	r3, [r3, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_readLoRaSettings+0x8a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7bdb      	ldrb	r3, [r3, #15]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d902      	bls.n	800159c <HAL_readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2202      	movs	r2, #2
 800159a:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_readLoRaSettings+0xcc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d904      	bls.n	80015b0 <HAL_readLoRaSettings+0xa4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_readLoRaSettings+0xd0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d902      	bls.n	80015b6 <HAL_readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_readLoRaSettings+0xd4>)
 80015b4:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_readLoRaSettings+0xd8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d904      	bls.n	80015ca <HAL_readLoRaSettings+0xbe>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_readLoRaSettings+0xdc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d902      	bls.n	80015d0 <HAL_readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_readLoRaSettings+0xe0>)
 80015ce:	605a      	str	r2, [r3, #4]
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	09c670ff 	.word	0x09c670ff
 80015dc:	0a5f0780 	.word	0x0a5f0780
 80015e0:	0a408300 	.word	0x0a408300
 80015e4:	08d24cff 	.word	0x08d24cff
 80015e8:	095ba140 	.word	0x095ba140
 80015ec:	093d1cc0 	.word	0x093d1cc0

080015f0 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1,Lora_Mode_t loRaMode) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	SX1278_t * loRa;
	loRa = malloc(sizeof(SX1278_t));
 80015fc:	2094      	movs	r0, #148	; 0x94
 80015fe:	f005 fcb5 	bl	8006f6c <malloc>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	2101      	movs	r1, #1
 800160a:	4828      	ldr	r0, [pc, #160]	; (80016ac <loRaInit+0xbc>)
 800160c:	f002 fc61 	bl	8003ed2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4825      	ldr	r0, [pc, #148]	; (80016ac <loRaInit+0xbc>)
 8001616:	f002 fc5c 	bl	8003ed2 <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001628:	2101      	movs	r1, #1
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb50 	bl	8000cd0 <readRegister>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	loRa->mode = -1;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	loRa->power = SX1278_POWER_17DBM;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	22fc      	movs	r2, #252	; 0xfc
 8001646:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	220b      	movs	r2, #11
 8001652:	74da      	strb	r2, [r3, #19]
	loRa->lnaGain = LNAGAIN;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2223      	movs	r2, #35	; 0x23
 8001658:	751a      	strb	r2, [r3, #20]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	220c      	movs	r2, #12
 800165e:	755a      	strb	r2, [r3, #21]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2212      	movs	r2, #18
 8001664:	749a      	strb	r2, [r3, #18]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2208      	movs	r2, #8
 800166a:	759a      	strb	r2, [r3, #22]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2208      	movs	r2, #8
 8001676:	765a      	strb	r2, [r3, #25]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	220c      	movs	r2, #12
 800167c:	765a      	strb	r2, [r3, #25]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2207      	movs	r2, #7
 8001682:	769a      	strb	r2, [r3, #26]
	loRa->len = 9;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2209      	movs	r2, #9
 8001688:	745a      	strb	r2, [r3, #17]
	HAL_readLoRaSettings(loRa);
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ff3e 	bl	800150c <HAL_readLoRaSettings>
	 savePage(CAT24C02_PAGE0_START_ADDR, &(loRa.bandwidth),1, 1);
	 savePage(CAT24C02_PAGE0_START_ADDR, &(loRa.codingRate),2, 1);
	 savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*)&(loRa.upFreq),0, 4);
	 savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*)&(loRa.dlFreq),4, 4);
	 */
	updateMode(loRa, loRaMode);
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff fd30 	bl	80010fa <updateMode>
	writeLoRaParametersReg(loRa);
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff fcc6 	bl	800102c <writeLoRaParametersReg>
	return loRa;
 80016a0:	68fb      	ldr	r3, [r7, #12]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010c00 	.word	0x40010c00

080016b0 <HAL_readPage>:
		i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
	}
	HAL_Delay(6);
}

bool HAL_readPage(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6039      	str	r1, [r7, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	460b      	mov	r3, r1
 80016c2:	71bb      	strb	r3, [r7, #6]
 80016c4:	4613      	mov	r3, r2
 80016c6:	717b      	strb	r3, [r7, #5]
    uint8_t buff[1] = { 0 };
 80016c8:	2300      	movs	r3, #0
 80016ca:	733b      	strb	r3, [r7, #12]
    uint16_t MemAddress = page << PADDRPOSITION | offset;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	79bb      	ldrb	r3, [r7, #6]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	81fb      	strh	r3, [r7, #14]
    buff[0] = (uint8_t) MemAddress & 0xff;
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	733b      	strb	r3, [r7, #12]

    if (HAL_I2C_Master_Transmit(&hi2c1, CHIP_ADDR << 1, buff, 1, 1000) != HAL_OK)
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	21a0      	movs	r1, #160	; 0xa0
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <HAL_readPage+0x80>)
 80016f2:	f002 fd4b 	bl	800418c <HAL_I2C_Master_Transmit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_readPage+0x50>
        return false;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e012      	b.n	8001726 <HAL_readPage+0x76>
    HAL_Delay(5);
 8001700:	2005      	movs	r0, #5
 8001702:	f001 fe39 	bl	8003378 <HAL_Delay>
    if (HAL_I2C_Master_Receive(&hi2c1, CHIP_ADDR << 1, data, size, 1000) != HAL_OK)
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	b29b      	uxth	r3, r3
 800170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170e:	9200      	str	r2, [sp, #0]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	21a0      	movs	r1, #160	; 0xa0
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <HAL_readPage+0x80>)
 8001716:	f002 fe37 	bl	8004388 <HAL_I2C_Master_Receive>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_readPage+0x74>
        return false;
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <HAL_readPage+0x76>
    return true;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000c4 	.word	0x200000c4

08001734 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <ledInit+0x60>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <ledInit+0x60>)
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <ledInit+0x60>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <ledInit+0x60>)
 800174e:	f023 0320 	bic.w	r3, r3, #32
 8001752:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <ledInit+0x60>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <ledInit+0x60>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <ledInit+0x60>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <ledInit+0x60>)
 8001766:	f023 0310 	bic.w	r3, r3, #16
 800176a:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <ledInit+0x60>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <ledInit+0x60>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <ledInit+0x60>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <ledInit+0x60>)
 800177e:	f023 0308 	bic.w	r3, r3, #8
 8001782:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f835 	bl	80017f4 <led_reset>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40010c00 	.word	0x40010c00

08001798 <enableLedKeepAlive>:
void led_off(void) {

}

void enableLedKeepAlive(LED_t *l) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 80017a0:	f001 fde0 	bl	8003364 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b0:	d90b      	bls.n	80017ca <enableLedKeepAlive+0x32>
		l->kaCounter = HAL_GetTick();
 80017b2:	f001 fdd7 	bl	8003364 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <enableLedKeepAlive+0x58>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <enableLedKeepAlive+0x58>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 80017c8:	e00d      	b.n	80017e6 <enableLedKeepAlive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 80017ca:	f001 fdcb 	bl	8003364 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b32      	cmp	r3, #50	; 0x32
 80017d8:	d905      	bls.n	80017e6 <enableLedKeepAlive+0x4e>
		SYS_RP_LED_OFF();
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <enableLedKeepAlive+0x58>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <enableLedKeepAlive+0x58>)
 80017e0:	f023 0320 	bic.w	r3, r3, #32
 80017e4:	60d3      	str	r3, [r2, #12]
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010c00 	.word	0x40010c00

080017f4 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 800180e:	f001 fda9 	bl	8003364 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b0c0      	sub	sp, #256	; 0x100
 8001838:	af00      	add	r7, sp, #0
	LED_t led;
	RDSS_t *rdss;
	UART1_t u1;
	Vlad_t *vlad;
	SX1278_t *loRa;
	uart1_ptr = &u1;
 800183a:	4a50      	ldr	r2, [pc, #320]	; (800197c <main+0x148>)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001840:	f001 fd38 	bl	80032b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001844:	f000 f8a4 	bl	8001990 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001848:	f000 fa30 	bl	8001cac <MX_GPIO_Init>
	MX_I2C1_Init();
 800184c:	f000 f94c 	bl	8001ae8 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001850:	f000 f978 	bl	8001b44 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001854:	f000 f9ac 	bl	8001bb0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001858:	f000 f9d4 	bl	8001c04 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800185c:	f000 f9fc 	bl	8001c58 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001860:	f000 f8f0 	bl	8001a44 <MX_ADC1_Init>
	MX_CRC_Init();
 8001864:	f000 f92c 	bl	8001ac0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vlad = vladInit(0);
 8001868:	2000      	movs	r0, #0
 800186a:	f001 f856 	bl	800291a <vladInit>
 800186e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	ledInit(&led);
 8001872:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff5c 	bl	8001734 <ledInit>
	rdss = rdssInit(0);
 800187c:	2000      	movs	r0, #0
 800187e:	f001 f8d9 	bl	8002a34 <rdssInit>
 8001882:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	loRa = loRaInit(&hspi1, MASTER_RECEIVER);
 8001886:	2103      	movs	r1, #3
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <main+0x14c>)
 800188a:	f7ff feb1 	bl	80015f0 <loRaInit>
 800188e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	printStatus(&u1, rdss);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fbf1 	bl	8002080 <printStatus>
	printLoRaStatus(&u1, loRa);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fda7 	bl	80023f8 <printLoRaStatus>

	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2025      	movs	r0, #37	; 0x25
 80018b0:	f002 f86f 	bl	8003992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b4:	2025      	movs	r0, #37	; 0x25
 80018b6:	f002 f888 	bl	80039ca <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	4931      	ldr	r1, [pc, #196]	; (8001984 <main+0x150>)
 80018be:	4832      	ldr	r0, [pc, #200]	; (8001988 <main+0x154>)
 80018c0:	f004 fdf2 	bl	80064a8 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (rdss->status == LORA_RECEIVE) {
 80018c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018c8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d109      	bne.n	80018e4 <main+0xb0>
			processLoraReceiveState(&u1, rdss, vlad, loRa);
 80018d0:	1d38      	adds	r0, r7, #4
 80018d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018d6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80018da:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80018de:	f000 ff4c 	bl	800277a <processLoraReceiveState>
 80018e2:	e044      	b.n	800196e <main+0x13a>
		} else if (rdss->status == LORA_SEND) {
 80018e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018e8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d108      	bne.n	8001902 <main+0xce>
			processLoraSendState(&u1, rdss, loRa);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80018f6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 ff88 	bl	8002810 <processLoraSendState>
 8001900:	e035      	b.n	800196e <main+0x13a>
		} else if (u1.isReady) {
 8001902:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <main+0xe4>
			parseUartMaster(&u1, rdss);
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001910:	4618      	mov	r0, r3
 8001912:	f000 feca 	bl	80026aa <parseUartMaster>
 8001916:	e02a      	b.n	800196e <main+0x13a>
		} else if (loRa->len > 0) {
 8001918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800191c:	7c5b      	ldrb	r3, [r3, #17]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <main+0xfc>
			parseLoRaMaster(rdss, loRa);
 8001922:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001926:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800192a:	f000 fe7f 	bl	800262c <parseLoRaMaster>
 800192e:	e01e      	b.n	800196e <main+0x13a>
		} else if (loRa->mode == MASTER_RECEIVER) {
 8001930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001934:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001938:	2b03      	cmp	r3, #3
 800193a:	d106      	bne.n	800194a <main+0x116>
			processMasterReceiverMode(&u1, loRa);
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001942:	4618      	mov	r0, r3
 8001944:	f000 ff8a 	bl	800285c <processMasterReceiverMode>
 8001948:	e011      	b.n	800196e <main+0x13a>
		} else if (loRa->mode == MASTER_SENDER) {
 800194a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800194e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001952:	2b02      	cmp	r3, #2
 8001954:	d10b      	bne.n	800196e <main+0x13a>
			RX_MODE_OFF_LED();
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <main+0x158>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <main+0x158>)
 800195c:	f023 0308 	bic.w	r3, r3, #8
 8001960:	60d3      	str	r3, [r2, #12]
			TX_MODE_ON_LED();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <main+0x158>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <main+0x158>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	60d3      	str	r3, [r2, #12]
		}
		enableLedKeepAlive(&led);
 800196e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff10 	bl	8001798 <enableLedKeepAlive>
		if (rdss->status == LORA_RECEIVE) {
 8001978:	e7a4      	b.n	80018c4 <main+0x90>
 800197a:	bf00      	nop
 800197c:	20000248 	.word	0x20000248
 8001980:	20000118 	.word	0x20000118
 8001984:	2000024c 	.word	0x2000024c
 8001988:	20000170 	.word	0x20000170
 800198c:	40010c00 	.word	0x40010c00

08001990 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	2228      	movs	r2, #40	; 0x28
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 fafa 	bl	8006f98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ce:	2301      	movs	r3, #1
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d2:	2302      	movs	r3, #2
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80019dc:	2300      	movs	r3, #0
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fac1 	bl	8004f6c <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x64>
		Error_Handler();
 80019f0:	f000 ff8e 	bl	8002910 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a04:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fd2d 	bl	8005470 <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x90>
		Error_Handler();
 8001a1c:	f000 ff78 	bl	8002910 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a20:	2302      	movs	r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 feae 	bl	800578c <HAL_RCCEx_PeriphCLKConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xaa>
		Error_Handler();
 8001a36:	f000 ff6b 	bl	8002910 <Error_Handler>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3750      	adds	r7, #80	; 0x50
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <MX_ADC1_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a72:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001a82:	f001 fc9d 	bl	80033c0 <HAL_ADC_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001a8c:	f000 ff40 	bl	8002910 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_ADC1_Init+0x74>)
 8001aa2:	f001 fd65 	bl	8003570 <HAL_ADC_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001aac:	f000 ff30 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000008c 	.word	0x2000008c
 8001abc:	40012400 	.word	0x40012400

08001ac0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_CRC_Init+0x20>)
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <MX_CRC_Init+0x24>)
 8001ac8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_CRC_Init+0x20>)
 8001acc:	f001 ff97 	bl	80039fe <HAL_CRC_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_CRC_Init+0x1a>
		Error_Handler();
 8001ad6:	f000 ff1b 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200000bc 	.word	0x200000bc
 8001ae4:	40023000 	.word	0x40023000

08001ae8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <MX_I2C1_Init+0x54>)
 8001af0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x58>)
 8001af6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b0a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_I2C1_Init+0x50>)
 8001b26:	f002 f9ed 	bl	8003f04 <HAL_I2C_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b30:	f000 feee 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200000c4 	.word	0x200000c4
 8001b3c:	40005400 	.word	0x40005400
 8001b40:	000186a0 	.word	0x000186a0

08001b44 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <MX_SPI1_Init+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b54:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b74:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b78:	2218      	movs	r2, #24
 8001b7a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b90:	220a      	movs	r2, #10
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <MX_SPI1_Init+0x64>)
 8001b96:	f003 feaf 	bl	80058f8 <HAL_SPI_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001ba0:	f000 feb6 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000118 	.word	0x20000118
 8001bac:	40013000 	.word	0x40013000

08001bb0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <MX_USART1_UART_Init+0x50>)
 8001bb8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 19200;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bbc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001bc0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_USART1_UART_Init+0x4c>)
 8001be8:	f004 fc0e 	bl	8006408 <HAL_UART_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001bf2:	f000 fe8d 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000170 	.word	0x20000170
 8001c00:	40013800 	.word	0x40013800

08001c04 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <MX_USART2_UART_Init+0x50>)
 8001c0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f004 fbe4 	bl	8006408 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001c46:	f000 fe63 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001b8 	.word	0x200001b8
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_USART3_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USART3_UART_Init+0x4c>)
 8001c90:	f004 fbba 	bl	8006408 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001c9a:	f000 fe39 	bl	8002910 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000200 	.word	0x20000200
 8001ca8:	40004800 	.word	0x40004800

08001cac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_GPIO_Init+0xa8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f247 3133 	movw	r1, #29491	; 0x7333
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <MX_GPIO_Init+0xac>)
 8001d10:	f002 f8df 	bl	8003ed2 <HAL_GPIO_WritePin>
					| BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED2_Pin LED1_Pin RS485_DE_Pin
	 BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 8001d14:	f247 3333 	movw	r3, #29491	; 0x7333
 8001d18:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480a      	ldr	r0, [pc, #40]	; (8001d58 <MX_GPIO_Init+0xac>)
 8001d2e:	f001 ff35 	bl	8003b9c <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_Pin */
	GPIO_InitStruct.Pin = MODE_Pin;
 8001d32:	2308      	movs	r3, #8
 8001d34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4619      	mov	r1, r3
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_GPIO_Init+0xac>)
 8001d46:	f001 ff29 	bl	8003b9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010c00 	.word	0x40010c00

08001d5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */
	if (uart1_ptr->rxLen >= RX_BUFFLEN) {
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001d6c:	2b63      	cmp	r3, #99	; 0x63
 8001d6e:	d909      	bls.n	8001d84 <HAL_UART_RxCpltCallback+0x28>
		cleanRx(uart1_ptr);
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fa4e 	bl	8003216 <cleanRx>
		uart1_ptr->rxLen = 0;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <HAL_UART_RxCpltCallback+0x6c>)
 8001d88:	4810      	ldr	r0, [pc, #64]	; (8001dcc <HAL_UART_RxCpltCallback+0x70>)
 8001d8a:	f004 fb8d 	bl	80064a8 <HAL_UART_Receive_IT>
	uart1_ptr->rx[uart1_ptr->rxLen++] = rxData;
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 8001d9a:	1c50      	adds	r0, r2, #1
 8001d9c:	b2c0      	uxtb	r0, r0
 8001d9e:	f883 00c9 	strb.w	r0, [r3, #201]	; 0xc9
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_UART_RxCpltCallback+0x6c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	548b      	strb	r3, [r1, r2]
	if (rxData == LTEL_END_MARK)
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_UART_RxCpltCallback+0x6c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b7f      	cmp	r3, #127	; 0x7f
 8001dae:	d104      	bne.n	8001dba <HAL_UART_RxCpltCallback+0x5e>
		uart1_ptr->isReady = true;
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_UART_RxCpltCallback+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000248 	.word	0x20000248
 8001dc8:	2000024c 	.word	0x2000024c
 8001dcc:	20000170 	.word	0x20000170

08001dd0 <decodeVLAD>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}

uint8_t decodeVLAD(Vlad_t *vlad, uint8_t *frame) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	uint8_t index = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
	uint8_t vladRev23Id = frame[index++];
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	73fa      	strb	r2, [r7, #15]
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	73bb      	strb	r3, [r7, #14]
	vlad->state = frame[index++];
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	73fa      	strb	r2, [r7, #15]
 8001df4:	461a      	mov	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	vlad->lineVoltagereal = (((uint16_t) frame[index++])
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	73fa      	strb	r2, [r7, #15]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
			| ((uint16_t) (frame[index++] << 8))) / 10.0;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	73f9      	strb	r1, [r7, #15]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fae1 	bl	80003f0 <__aeabi_i2d>
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <decodeVLAD+0x15c>)
 8001e34:	f7fe fc70 	bl	8000718 <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fd52 	bl	80008e8 <__aeabi_d2f>
 8001e44:	4602      	mov	r2, r0
	vlad->lineVoltagereal = (((uint16_t) frame[index++])
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	61da      	str	r2, [r3, #28]
	vlad->lineCurrentReal = (((uint16_t) frame[index++])
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	73fa      	strb	r2, [r7, #15]
 8001e50:	461a      	mov	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
			| ((uint16_t) (frame[index++] << 8))) / 1000.0;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	1c59      	adds	r1, r3, #1
 8001e5e:	73f9      	strb	r1, [r7, #15]
 8001e60:	4619      	mov	r1, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fabd 	bl	80003f0 <__aeabi_i2d>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <decodeVLAD+0x160>)
 8001e7c:	f7fe fc4c 	bl	8000718 <__aeabi_ddiv>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fd2e 	bl	80008e8 <__aeabi_d2f>
 8001e8c:	4602      	mov	r2, r0
	vlad->lineCurrentReal = (((uint16_t) frame[index++])
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	621a      	str	r2, [r3, #32]
	vlad->tone_level = (((uint16_t) frame[index++])
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	73fa      	strb	r2, [r7, #15]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b29a      	uxth	r2, r3
			| ((uint16_t) (frame[index++] << 8)));
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	73f9      	strb	r1, [r7, #15]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	440b      	add	r3, r1
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	b29a      	uxth	r2, r3
	vlad->tone_level = (((uint16_t) frame[index++])
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	815a      	strh	r2, [r3, #10]
	vlad->level152m_real = frame[index++] / 10;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	73fa      	strb	r2, [r7, #15]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <decodeVLAD+0x164>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	b25a      	sxtb	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	751a      	strb	r2, [r3, #20]
	vlad->level152m_real = frame[index++];
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	73fa      	strb	r2, [r7, #15]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	751a      	strb	r2, [r3, #20]
	vlad->agc172m_real = frame[index++] / 10;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	73fa      	strb	r2, [r7, #15]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <decodeVLAD+0x164>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	74da      	strb	r2, [r3, #19]
	vlad->level172m_real = frame[index++];
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	73fa      	strb	r2, [r7, #15]
 8001f14:	461a      	mov	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b25a      	sxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	755a      	strb	r2, [r3, #21]

	return index;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40240000 	.word	0x40240000
 8001f30:	408f4000 	.word	0x408f4000
 8001f34:	cccccccd 	.word	0xcccccccd

08001f38 <print_parameters>:

void print_parameters(UART1_t *u1, Vlad_t vlad) {
 8001f38:	b084      	sub	sp, #16
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	f107 001c 	add.w	r0, r7, #28
 8001f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!u1->debug)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8001f50:	f083 0301 	eor.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d17b      	bne.n	8002052 <print_parameters+0x11a>
		return;

	char *buff = (char*) u1->tx;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3364      	adds	r3, #100	; 0x64
 8001f5e:	60fb      	str	r3, [r7, #12]
	u1->tx_len = (uint8_t) sprintf(buff, "vin %d [V]\r\n", vlad.vin);
 8001f60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f62:	461a      	mov	r2, r3
 8001f64:	493e      	ldr	r1, [pc, #248]	; (8002060 <print_parameters+0x128>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f005 f90a 	bl	8007180 <siprintf>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f001 f93b 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "current real %d [A]\r\n",
			(uint8_t) vlad.lineCurrentReal);
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fd02 	bl	8000988 <__aeabi_f2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b2db      	uxtb	r3, r3
	u1->tx_len = (uint8_t) sprintf(buff, "current real %d [A]\r\n",
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4936      	ldr	r1, [pc, #216]	; (8002064 <print_parameters+0x12c>)
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f005 f8f7 	bl	8007180 <siprintf>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f001 f928 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "tone level %d[dBm]\r\n",
			vlad.tone_level);
 8001fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
	u1->tx_len = (uint8_t) sprintf(buff, "tone level %d[dBm]\r\n",
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4930      	ldr	r1, [pc, #192]	; (8002068 <print_parameters+0x130>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f005 f8e9 	bl	8007180 <siprintf>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f001 f91a 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "current %d[A]\r\n", vlad.current);
 8001fbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	492a      	ldr	r1, [pc, #168]	; (800206c <print_parameters+0x134>)
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f005 f8db 	bl	8007180 <siprintf>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f001 f90c 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "agc150m %d[dBm]\r\n", vlad.agc152m);
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4924      	ldr	r1, [pc, #144]	; (8002070 <print_parameters+0x138>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f005 f8cd 	bl	8007180 <siprintf>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f001 f8fe 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "level150m %d[dBm]\r\n",
			vlad.level152m);
 8001ff6:	8c3b      	ldrh	r3, [r7, #32]
	u1->tx_len = (uint8_t) sprintf(buff, "level150m %d[dBm]\r\n",
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	491e      	ldr	r1, [pc, #120]	; (8002074 <print_parameters+0x13c>)
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f005 f8bf 	bl	8007180 <siprintf>
 8002002:	4603      	mov	r3, r0
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 f8f0 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "agc170m %d[dBm]\r\n", vlad.agc172m);
 8002012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002014:	461a      	mov	r2, r3
 8002016:	4918      	ldr	r1, [pc, #96]	; (8002078 <print_parameters+0x140>)
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f005 f8b1 	bl	8007180 <siprintf>
 800201e:	4603      	mov	r3, r0
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f001 f8e2 	bl	80031f2 <writeTx>
	u1->tx_len = (uint8_t) sprintf(buff, "level170m %d[dBm]\r\n",
			vlad.level172m);
 800202e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
	u1->tx_len = (uint8_t) sprintf(buff, "level170m %d[dBm]\r\n",
 8002030:	461a      	mov	r2, r3
 8002032:	4912      	ldr	r1, [pc, #72]	; (800207c <print_parameters+0x144>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f005 f8a3 	bl	8007180 <siprintf>
 800203a:	4603      	mov	r3, r0
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	writeTx(u1);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 f8d4 	bl	80031f2 <writeTx>
	cleanTx(u1);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 f8f9 	bl	8003242 <cleanTx>
 8002050:	e000      	b.n	8002054 <print_parameters+0x11c>
		return;
 8002052:	bf00      	nop
}
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800205c:	b004      	add	sp, #16
 800205e:	4770      	bx	lr
 8002060:	080078d8 	.word	0x080078d8
 8002064:	080078e8 	.word	0x080078e8
 8002068:	08007900 	.word	0x08007900
 800206c:	08007918 	.word	0x08007918
 8002070:	08007928 	.word	0x08007928
 8002074:	0800793c 	.word	0x0800793c
 8002078:	08007950 	.word	0x08007950
 800207c:	08007964 	.word	0x08007964

08002080 <printStatus>:

void printStatus(UART1_t *u1, RDSS_t *rdss) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]

	if (!u1->debug)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 81a8 	bne.w	80023ec <printStatus+0x36c>
		return;

	char *str = (char*) u1->tx;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3364      	adds	r3, #100	; 0x64
 80020a0:	60bb      	str	r3, [r7, #8]
	uint8_t i = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
	switch (rdss->status) {
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80020ac:	2b0e      	cmp	r3, #14
 80020ae:	f200 8198 	bhi.w	80023e2 <printStatus+0x362>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <printStatus+0x38>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002179 	.word	0x08002179
 80020bc:	080023e3 	.word	0x080023e3
 80020c0:	080023e3 	.word	0x080023e3
 80020c4:	08002157 	.word	0x08002157
 80020c8:	080023e3 	.word	0x080023e3
 80020cc:	08002127 	.word	0x08002127
 80020d0:	080020f5 	.word	0x080020f5
 80020d4:	080023e3 	.word	0x080023e3
 80020d8:	080021f3 	.word	0x080021f3
 80020dc:	080023e3 	.word	0x080023e3
 80020e0:	080023e3 	.word	0x080023e3
 80020e4:	0800223f 	.word	0x0800223f
 80020e8:	08002215 	.word	0x08002215
 80020ec:	080022c3 	.word	0x080022c3
 80020f0:	0800233b 	.word	0x0800233b
	case CRC_ERROR:
		checkValidCrc(rdss->buffer, rdss->len);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	1c9a      	adds	r2, r3, #2
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	4619      	mov	r1, r3
 80020fe:	4610      	mov	r0, r2
 8002100:	f000 fd03 	bl	8002b0a <checkValidCrc>
		u1->tx_len = (uint8_t) sprintf(str, "CRC mismatch:\r\n");
 8002104:	4999      	ldr	r1, [pc, #612]	; (800236c <printStatus+0x2ec>)
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f005 f83a 	bl	8007180 <siprintf>
 800210c:	4603      	mov	r3, r0
 800210e:	b2da      	uxtb	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f001 f86b 	bl	80031f2 <writeTx>
		u1->tx_len = 0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 8002124:	e15e      	b.n	80023e4 <printStatus+0x364>
	case WRONG_MODULE_ID:
		u1->tx_len = (uint8_t) sprintf(str,
				"ID mismatch - ID %d and ID received %d \r\n", rdss->id,
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
		u1->tx_len = (uint8_t) sprintf(str,
 800212c:	461a      	mov	r2, r3
				rdss->idReceived);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
		u1->tx_len = (uint8_t) sprintf(str,
 8002134:	498e      	ldr	r1, [pc, #568]	; (8002370 <printStatus+0x2f0>)
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f005 f822 	bl	8007180 <siprintf>
 800213c:	4603      	mov	r3, r0
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f001 f853 	bl	80031f2 <writeTx>
		u1->tx_len = 0;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 8002154:	e146      	b.n	80023e4 <printStatus+0x364>
	case NOT_VALID_FRAME:
		u1->tx_len = (uint8_t) sprintf(str, "Not valid start byte \r\n");
 8002156:	4987      	ldr	r1, [pc, #540]	; (8002374 <printStatus+0x2f4>)
 8002158:	68b8      	ldr	r0, [r7, #8]
 800215a:	f005 f811 	bl	8007180 <siprintf>
 800215e:	4603      	mov	r3, r0
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f001 f842 	bl	80031f2 <writeTx>
		u1->tx_len = 0;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 8002176:	e135      	b.n	80023e4 <printStatus+0x364>
	case DATA_OK:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 800217c:	461a      	mov	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 8002182:	4619      	mov	r1, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	497a      	ldr	r1, [pc, #488]	; (8002378 <printStatus+0x2f8>)
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f004 fff6 	bl	8007180 <siprintf>
 8002194:	4603      	mov	r3, r0
 8002196:	b2da      	uxtb	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f001 f827 	bl	80031f2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 80021a4:	2306      	movs	r3, #6
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e017      	b.n	80021da <printStatus+0x15a>
			if (i > 250)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2bfa      	cmp	r3, #250	; 0xfa
 80021ae:	dc1b      	bgt.n	80021e8 <printStatus+0x168>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	3302      	adds	r3, #2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	496f      	ldr	r1, [pc, #444]	; (800237c <printStatus+0x2fc>)
 80021be:	68b8      	ldr	r0, [r7, #8]
 80021c0:	f004 ffde 	bl	8007180 <siprintf>
 80021c4:	4603      	mov	r3, r0
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f001 f80f 	bl	80031f2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	3301      	adds	r3, #1
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	79db      	ldrb	r3, [r3, #7]
 80021de:	461a      	mov	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	dbe1      	blt.n	80021aa <printStatus+0x12a>
 80021e6:	e000      	b.n	80021ea <printStatus+0x16a>
				break;
 80021e8:	bf00      	nop
		}
		writeTxReg('\n');
 80021ea:	200a      	movs	r0, #10
 80021ec:	f000 ffb4 	bl	8003158 <writeTxReg>
		break;
 80021f0:	e0f8      	b.n	80023e4 <printStatus+0x364>
	case WAITING:
		u1->tx_len = (uint8_t) sprintf(str, "Waiting for new data\r\n");
 80021f2:	4963      	ldr	r1, [pc, #396]	; (8002380 <printStatus+0x300>)
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f004 ffc3 	bl	8007180 <siprintf>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fff4 	bl	80031f2 <writeTx>
		u1->tx_len = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 8002212:	e0e7      	b.n	80023e4 <printStatus+0x364>
	case LORA_SEND:
		u1->tx_len = (uint8_t) sprintf(str, "Send uart data to loRa ID: %d\r\n",
				rdss->idReceived);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
		u1->tx_len = (uint8_t) sprintf(str, "Send uart data to loRa ID: %d\r\n",
 800221a:	461a      	mov	r2, r3
 800221c:	4959      	ldr	r1, [pc, #356]	; (8002384 <printStatus+0x304>)
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	f004 ffae 	bl	8007180 <siprintf>
 8002224:	4603      	mov	r3, r0
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 ffdf 	bl	80031f2 <writeTx>
		u1->tx_len = 0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 800223c:	e0d2      	b.n	80023e4 <printStatus+0x364>
	case LORA_RECEIVE:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 8002242:	461a      	mov	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 8002248:	4619      	mov	r1, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	4949      	ldr	r1, [pc, #292]	; (8002378 <printStatus+0x2f8>)
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f004 ff93 	bl	8007180 <siprintf>
 800225a:	4603      	mov	r3, r0
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 ffc4 	bl	80031f2 <writeTx>
		for (i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 800226a:	2306      	movs	r3, #6
 800226c:	75fb      	strb	r3, [r7, #23]
 800226e:	e016      	b.n	800229e <printStatus+0x21e>
			if (i > 250)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2bfa      	cmp	r3, #250	; 0xfa
 8002274:	d819      	bhi.n	80022aa <printStatus+0x22a>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	789b      	ldrb	r3, [r3, #2]
 800227e:	461a      	mov	r2, r3
 8002280:	493e      	ldr	r1, [pc, #248]	; (800237c <printStatus+0x2fc>)
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f004 ff7c 	bl	8007180 <siprintf>
 8002288:	4603      	mov	r3, r0
 800228a:	b2da      	uxtb	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 ffad 	bl	80031f2 <writeTx>
		for (i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	3301      	adds	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	79db      	ldrb	r3, [r3, #7]
 80022a2:	7dfa      	ldrb	r2, [r7, #23]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d3e3      	bcc.n	8002270 <printStatus+0x1f0>
 80022a8:	e000      	b.n	80022ac <printStatus+0x22c>
				break;
 80022aa:	bf00      	nop
		}
		if (i > DATA_START_INDEX)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <printStatus+0x238>
			writeTxReg('\n');
 80022b2:	200a      	movs	r0, #10
 80022b4:	f000 ff50 	bl	8003158 <writeTxReg>
		u1->tx_len = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 80022c0:	e090      	b.n	80023e4 <printStatus+0x364>
	case UART_SEND:
		u1->tx_len = (uint8_t) sprintf(str, "Reply vlad data: %d\r\n",
				rdss->idReceived);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
		u1->tx_len = (uint8_t) sprintf(str, "Reply vlad data: %d\r\n",
 80022c8:	461a      	mov	r2, r3
 80022ca:	492f      	ldr	r1, [pc, #188]	; (8002388 <printStatus+0x308>)
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f004 ff57 	bl	8007180 <siprintf>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 ff88 	bl	80031f2 <writeTx>
		for (i = 0; i < rdss->len; i++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
 80022e6:	e016      	b.n	8002316 <printStatus+0x296>
			if (i > 250)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2bfa      	cmp	r3, #250	; 0xfa
 80022ec:	d819      	bhi.n	8002322 <printStatus+0x2a2>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	789b      	ldrb	r3, [r3, #2]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4920      	ldr	r1, [pc, #128]	; (800237c <printStatus+0x2fc>)
 80022fa:	68b8      	ldr	r0, [r7, #8]
 80022fc:	f004 ff40 	bl	8007180 <siprintf>
 8002300:	4603      	mov	r3, r0
 8002302:	b2da      	uxtb	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 ff71 	bl	80031f2 <writeTx>
		for (i = 0; i < rdss->len; i++) {
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	3301      	adds	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	7dfa      	ldrb	r2, [r7, #23]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3e3      	bcc.n	80022e8 <printStatus+0x268>
 8002320:	e000      	b.n	8002324 <printStatus+0x2a4>
				break;
 8002322:	bf00      	nop
		}
		if (i > 0)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <printStatus+0x2b0>
			writeTxReg('\n');
 800232a:	200a      	movs	r0, #10
 800232c:	f000 ff14 	bl	8003158 <writeTxReg>
		u1->tx_len = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 8002338:	e054      	b.n	80023e4 <printStatus+0x364>
	case UART_VALID:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 800233e:	461a      	mov	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 8002344:	4619      	mov	r1, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	460b      	mov	r3, r1
 800234e:	490a      	ldr	r1, [pc, #40]	; (8002378 <printStatus+0x2f8>)
 8002350:	68b8      	ldr	r0, [r7, #8]
 8002352:	f004 ff15 	bl	8007180 <siprintf>
 8002356:	4603      	mov	r3, r0
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 ff46 	bl	80031f2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 8002366:	2306      	movs	r3, #6
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e027      	b.n	80023bc <printStatus+0x33c>
 800236c:	08007978 	.word	0x08007978
 8002370:	08007988 	.word	0x08007988
 8002374:	080079b4 	.word	0x080079b4
 8002378:	080079cc 	.word	0x080079cc
 800237c:	08007a00 	.word	0x08007a00
 8002380:	08007a08 	.word	0x08007a08
 8002384:	08007a20 	.word	0x08007a20
 8002388:	08007a40 	.word	0x08007a40
			if (i > 250)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2bfa      	cmp	r3, #250	; 0xfa
 8002390:	dc1b      	bgt.n	80023ca <printStatus+0x34a>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	3302      	adds	r3, #2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4915      	ldr	r1, [pc, #84]	; (80023f4 <printStatus+0x374>)
 80023a0:	68b8      	ldr	r0, [r7, #8]
 80023a2:	f004 feed 	bl	8007180 <siprintf>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 ff1e 	bl	80031f2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	79db      	ldrb	r3, [r3, #7]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	dbe1      	blt.n	800238c <printStatus+0x30c>
 80023c8:	e000      	b.n	80023cc <printStatus+0x34c>
				break;
 80023ca:	bf00      	nop
		}
		if (i > DATA_START_INDEX)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <printStatus+0x358>
			writeTxReg('\n');
 80023d2:	200a      	movs	r0, #10
 80023d4:	f000 fec0 	bl	8003158 <writeTxReg>
		u1->tx_len = 0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		break;
 80023e0:	e000      	b.n	80023e4 <printStatus+0x364>
	default:
		break;
 80023e2:	bf00      	nop

	}
	cleanTx(u1);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 ff2c 	bl	8003242 <cleanTx>
 80023ea:	e000      	b.n	80023ee <printStatus+0x36e>
		return;
 80023ec:	bf00      	nop

}
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08007a00 	.word	0x08007a00

080023f8 <printLoRaStatus>:
void printLoRaStatus(UART1_t *u1, SX1278_t *loRa) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	if (!u1->debug) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80f0 	bne.w	80025f4 <printLoRaStatus+0x1fc>
		return;
	}

	char *str = (char*) u1->tx;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3364      	adds	r3, #100	; 0x64
 8002418:	60fb      	str	r3, [r7, #12]

	switch (loRa->status) {
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002420:	3b01      	subs	r3, #1
 8002422:	2b07      	cmp	r3, #7
 8002424:	f200 80df 	bhi.w	80025e6 <printLoRaStatus+0x1ee>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <printLoRaStatus+0x38>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	080024ef 	.word	0x080024ef
 8002434:	08002593 	.word	0x08002593
 8002438:	0800246d 	.word	0x0800246d
 800243c:	08002529 	.word	0x08002529
 8002440:	08002451 	.word	0x08002451
 8002444:	080025e7 	.word	0x080025e7
 8002448:	080025cd 	.word	0x080025cd
 800244c:	0800248d 	.word	0x0800248d
	case TX_TIMEOUT:
		u1->tx_len = (uint8_t) sprintf(str,
 8002450:	2200      	movs	r2, #0
 8002452:	496a      	ldr	r1, [pc, #424]	; (80025fc <printLoRaStatus+0x204>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f004 fe93 	bl	8007180 <siprintf>
 800245a:	4603      	mov	r3, r0
 800245c:	b2da      	uxtb	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				"Transmission Fail: %d seconds Timeout\r\n", TX_TIMEOUT / 1000);
		writeTx(u1);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fec4 	bl	80031f2 <writeTx>
		break;
 800246a:	e0bf      	b.n	80025ec <printLoRaStatus+0x1f4>
	case TX_DONE:
		u1->tx_len = (uint8_t) sprintf(str, "Transmission Done: %lu ms\r\n",
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	461a      	mov	r2, r3
 8002472:	4963      	ldr	r1, [pc, #396]	; (8002600 <printLoRaStatus+0x208>)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f004 fe83 	bl	8007180 <siprintf>
 800247a:	4603      	mov	r3, r0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				loRa->lastTxTime);
		writeTx(u1);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 feb4 	bl	80031f2 <writeTx>
		break;
 800248a:	e0af      	b.n	80025ec <printLoRaStatus+0x1f4>
	case TX_BUFFER_READY:
		u1->tx_len = (uint8_t) sprintf(str,
				"Transmission Buffer: %d bytes data \r\n", loRa->len);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7c5b      	ldrb	r3, [r3, #17]
		u1->tx_len = (uint8_t) sprintf(str,
 8002490:	461a      	mov	r2, r3
 8002492:	495c      	ldr	r1, [pc, #368]	; (8002604 <printLoRaStatus+0x20c>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f004 fe73 	bl	8007180 <siprintf>
 800249a:	4603      	mov	r3, r0
 800249c:	b2da      	uxtb	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fea4 	bl	80031f2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e014      	b.n	80024da <printLoRaStatus+0xe2>
			u1->tx_len = (uint8_t) sprintf(str, "%02X", loRa->buffer[i]);
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4413      	add	r3, r2
 80024b6:	332b      	adds	r3, #43	; 0x2b
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4952      	ldr	r1, [pc, #328]	; (8002608 <printLoRaStatus+0x210>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f004 fe5e 	bl	8007180 <siprintf>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fe8f 	bl	80031f2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7c5b      	ldrb	r3, [r3, #17]
 80024de:	461a      	mov	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	dbe4      	blt.n	80024b0 <printLoRaStatus+0xb8>
		}
		writeTxReg('\n');
 80024e6:	200a      	movs	r0, #10
 80024e8:	f000 fe36 	bl	8003158 <writeTxReg>
		break;
 80024ec:	e07e      	b.n	80025ec <printLoRaStatus+0x1f4>
	case TX_MODE:
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
				(loRa->mode == MASTER_SENDER) ? "Master Sender" :
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d008      	beq.n	800250a <printLoRaStatus+0x112>
				(loRa->mode == SLAVE_SENDER) ? "Slave Sender" : "Unknown");
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <printLoRaStatus+0x10e>
 8002502:	4b42      	ldr	r3, [pc, #264]	; (800260c <printLoRaStatus+0x214>)
 8002504:	e002      	b.n	800250c <printLoRaStatus+0x114>
 8002506:	4b42      	ldr	r3, [pc, #264]	; (8002610 <printLoRaStatus+0x218>)
 8002508:	e000      	b.n	800250c <printLoRaStatus+0x114>
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 800250a:	4b42      	ldr	r3, [pc, #264]	; (8002614 <printLoRaStatus+0x21c>)
 800250c:	461a      	mov	r2, r3
 800250e:	4942      	ldr	r1, [pc, #264]	; (8002618 <printLoRaStatus+0x220>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f004 fe35 	bl	8007180 <siprintf>
 8002516:	4603      	mov	r3, r0
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fe66 	bl	80031f2 <writeTx>
		break;
 8002526:	e061      	b.n	80025ec <printLoRaStatus+0x1f4>
	case RX_DONE:
		u1->tx_len = (uint8_t) sprintf(str, "Reception Done: %d bytes\r\n",
				loRa->len);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	7c5b      	ldrb	r3, [r3, #17]
		u1->tx_len = (uint8_t) sprintf(str, "Reception Done: %d bytes\r\n",
 800252c:	461a      	mov	r2, r3
 800252e:	493b      	ldr	r1, [pc, #236]	; (800261c <printLoRaStatus+0x224>)
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f004 fe25 	bl	8007180 <siprintf>
 8002536:	4603      	mov	r3, r0
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fe56 	bl	80031f2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e014      	b.n	8002576 <printLoRaStatus+0x17e>
			u1->tx_len = (uint8_t) sprintf(str, "%02X", loRa->buffer[i]);
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	332b      	adds	r3, #43	; 0x2b
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	492b      	ldr	r1, [pc, #172]	; (8002608 <printLoRaStatus+0x210>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f004 fe10 	bl	8007180 <siprintf>
 8002560:	4603      	mov	r3, r0
 8002562:	b2da      	uxtb	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			writeTx(u1);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fe41 	bl	80031f2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	3301      	adds	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7c5b      	ldrb	r3, [r3, #17]
 800257a:	461a      	mov	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4293      	cmp	r3, r2
 8002580:	dbe4      	blt.n	800254c <printLoRaStatus+0x154>
		}
		if (loRa->len > 0) {
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7c5b      	ldrb	r3, [r3, #17]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d02f      	beq.n	80025ea <printLoRaStatus+0x1f2>
			writeTxReg('\n');
 800258a:	200a      	movs	r0, #10
 800258c:	f000 fde4 	bl	8003158 <writeTxReg>
		}
		break;
 8002590:	e02b      	b.n	80025ea <printLoRaStatus+0x1f2>
	case RX_MODE:
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
				(loRa->mode == MASTER_RECEIVER) ? "Master Receiver" :
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 8002598:	2b03      	cmp	r3, #3
 800259a:	d008      	beq.n	80025ae <printLoRaStatus+0x1b6>
				(loRa->mode == SLAVE_RECEIVER) ? "Slave Receiver" : "Unknown");
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <printLoRaStatus+0x1b2>
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <printLoRaStatus+0x228>)
 80025a8:	e002      	b.n	80025b0 <printLoRaStatus+0x1b8>
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <printLoRaStatus+0x218>)
 80025ac:	e000      	b.n	80025b0 <printLoRaStatus+0x1b8>
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <printLoRaStatus+0x22c>)
 80025b0:	461a      	mov	r2, r3
 80025b2:	4919      	ldr	r1, [pc, #100]	; (8002618 <printLoRaStatus+0x220>)
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f004 fde3 	bl	8007180 <siprintf>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(u1);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fe14 	bl	80031f2 <writeTx>
		break;
 80025ca:	e00f      	b.n	80025ec <printLoRaStatus+0x1f4>
	case CRC_ERROR_ACTIVATION:
		u1->tx_len = (uint8_t) sprintf(str,
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <printLoRaStatus+0x230>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f004 fdd6 	bl	8007180 <siprintf>
 80025d4:	4603      	mov	r3, r0
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				"Reception Fail: CRC error activation\r\n");
		writeTx(u1);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fe07 	bl	80031f2 <writeTx>
		break;
 80025e4:	e002      	b.n	80025ec <printLoRaStatus+0x1f4>
	default:
		break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <printLoRaStatus+0x1f4>
		break;
 80025ea:	bf00      	nop
	}
	cleanTx(u1);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fe28 	bl	8003242 <cleanTx>
 80025f2:	e000      	b.n	80025f6 <printLoRaStatus+0x1fe>
		return;
 80025f4:	bf00      	nop
}
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08007a58 	.word	0x08007a58
 8002600:	08007a80 	.word	0x08007a80
 8002604:	08007a9c 	.word	0x08007a9c
 8002608:	08007a00 	.word	0x08007a00
 800260c:	08007ac4 	.word	0x08007ac4
 8002610:	08007ad4 	.word	0x08007ad4
 8002614:	08007adc 	.word	0x08007adc
 8002618:	08007aec 	.word	0x08007aec
 800261c:	08007af8 	.word	0x08007af8
 8002620:	08007b14 	.word	0x08007b14
 8002624:	08007b24 	.word	0x08007b24
 8002628:	08007b34 	.word	0x08007b34

0800262c <parseLoRaMaster>:

void parseLoRaMaster(RDSS_t *rs485, SX1278_t *loRa) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
	fillValidBuffer(&*rs485, loRa->buffer, loRa->len);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	7c5b      	ldrb	r3, [r3, #17]
 8002640:	461a      	mov	r2, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fafb 	bl	8002c3e <fillValidBuffer>
	memset(loRa->buffer, 0, sizeof(loRa->buffer));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	332b      	adds	r3, #43	; 0x2b
 800264c:	2264      	movs	r2, #100	; 0x64
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f004 fca1 	bl	8006f98 <memset>
	loRa->len = 0;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	745a      	strb	r2, [r3, #17]
	if (rs485->status == DATA_OK) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11d      	bne.n	80026a2 <parseLoRaMaster+0x76>
		rs485->cmd = rs485->buffer[CMD_INDEX];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	795a      	ldrb	r2, [r3, #5]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	701a      	strb	r2, [r3, #0]
		rs485->idReceived = rs485->buffer[MODULE_ID_INDEX];
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	791a      	ldrb	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
		if (rs485->idReceived == rs485->idQuery)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8002684:	429a      	cmp	r2, r3
 8002686:	d104      	bne.n	8002692 <parseLoRaMaster+0x66>
			rs485->status = LORA_RECEIVE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	220b      	movs	r2, #11
 800268c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
 8002690:	e003      	b.n	800269a <parseLoRaMaster+0x6e>
		else
			rs485->status = WRONG_MODULE_ID;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2205      	movs	r2, #5
 8002696:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

		rs485->idQuery = 0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <parseUartMaster>:

void parseUartMaster(UART1_t *u1, RDSS_t *rs485) {
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
	u1->isReady = false;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	fillValidBuffer(&*rs485, u1->rx, u1->rxLen);
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80026c4:	461a      	mov	r2, r3
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	f000 fab9 	bl	8002c3e <fillValidBuffer>
	memset(u1->rx, 0, sizeof(u1->rx));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2264      	movs	r2, #100	; 0x64
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f004 fc60 	bl	8006f98 <memset>
	u1->rxLen = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	if (rs485->status == DATA_OK) {
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d112      	bne.n	8002710 <parseUartMaster+0x66>
		rs485->cmd = rs485->buffer[CMD_INDEX];
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	795a      	ldrb	r2, [r3, #5]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
		rs485->idReceived = rs485->buffer[MODULE_ID_INDEX];
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	791a      	ldrb	r2, [r3, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
		rs485->idQuery = rs485->idReceived;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		rs485->status = LORA_SEND;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	220c      	movs	r2, #12
 800270c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	}
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <sendQuery>:

void sendQuery(RDSS_t *rs485, SX1278_t *loRa, UART1_t *u1) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
	if (rs485->len != 9)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	2b09      	cmp	r3, #9
 800272a:	d122      	bne.n	8002772 <sendQuery+0x5a>
		return;
	rs485->idQuery = rs485->buffer[MODULE_ID_INDEX];
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	791a      	ldrb	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	loRa->len = rs485->len;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	785a      	ldrb	r2, [r3, #1]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	745a      	strb	r2, [r3, #17]
	updateMode(loRa, MASTER_SENDER);
 800273e:	2102      	movs	r1, #2
 8002740:	68b8      	ldr	r0, [r7, #8]
 8002742:	f7fe fcda 	bl	80010fa <updateMode>
	memcpy(loRa->buffer, rs485->buffer, rs485->len);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1c99      	adds	r1, r3, #2
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	461a      	mov	r2, r3
 8002756:	f004 fc11 	bl	8006f7c <memcpy>
	loRa->status = TX_BUFFER_READY;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2208      	movs	r2, #8
 800275e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	printLoRaStatus(u1, loRa);
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fe47 	bl	80023f8 <printLoRaStatus>
	transmit(loRa);
 800276a:	68b8      	ldr	r0, [r7, #8]
 800276c:	f7fe feb2 	bl	80014d4 <transmit>
 8002770:	e000      	b.n	8002774 <sendQuery+0x5c>
		return;
 8002772:	bf00      	nop
}
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <processLoraReceiveState>:
	return bussy;
}

// Function to process LORA receive state
void processLoraReceiveState(UART1_t *uartHandle, RDSS_t *rdssHandle,
		Vlad_t *vladHandle, SX1278_t *loRaHandle) {
 800277a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277c:	b091      	sub	sp, #68	; 0x44
 800277e:	af0c      	add	r7, sp, #48	; 0x30
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
	printStatus(uartHandle, rdssHandle);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff fc78 	bl	8002080 <printStatus>
	if (rdssHandle->cmd == QUERY_STATUS && rdssHandle->len == 21) {
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b11      	cmp	r3, #17
 8002796:	d130      	bne.n	80027fa <processLoraReceiveState+0x80>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b15      	cmp	r3, #21
 800279e:	d12c      	bne.n	80027fa <processLoraReceiveState+0x80>
		decodeVLAD(vladHandle, rdssHandle->buffer);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3302      	adds	r3, #2
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fb12 	bl	8001dd0 <decodeVLAD>
		memcpy(uartHandle->tx, rdssHandle->buffer, rdssHandle->len);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1c99      	adds	r1, r3, #2
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f004 fbde 	bl	8006f7c <memcpy>
		uartHandle->tx_len = rdssHandle->len;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785a      	ldrb	r2, [r3, #1]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		writeTx(uartHandle);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fd11 	bl	80031f2 <writeTx>
		uartHandle->tx_len = 0;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		print_parameters(uartHandle, *vladHandle);
 80027d8:	687e      	ldr	r6, [r7, #4]
 80027da:	466d      	mov	r5, sp
 80027dc:	f106 040c 	add.w	r4, r6, #12
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff fb9f 	bl	8001f38 <print_parameters>
	}
	printLoRaStatus(uartHandle, loRaHandle);
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fdfb 	bl	80023f8 <printLoRaStatus>
	reinit(rdssHandle);
 8002802:	68b8      	ldr	r0, [r7, #8]
 8002804:	f000 fa3f 	bl	8002c86 <reinit>
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002810 <processLoraSendState>:

// Function to process LORA send state
void processLoraSendState(UART1_t *uartHandle, RDSS_t *rdssHandle,
		SX1278_t *loRaHandle) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
	printStatus(uartHandle, rdssHandle);
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff fc2e 	bl	8002080 <printStatus>
	if (rdssHandle->cmd != 0) {
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <processLoraSendState+0x26>
		sendQuery(rdssHandle, loRaHandle, uartHandle);
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7ff ff71 	bl	8002718 <sendQuery>
	}
	printLoRaStatus(uartHandle, loRaHandle);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fddd 	bl	80023f8 <printLoRaStatus>
	reinit(rdssHandle);
 800283e:	68b8      	ldr	r0, [r7, #8]
 8002840:	f000 fa21 	bl	8002c86 <reinit>
	updateMode(loRaHandle, MASTER_RECEIVER);
 8002844:	2103      	movs	r1, #3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fc57 	bl	80010fa <updateMode>
	printLoRaStatus(uartHandle, loRaHandle);
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fdd2 	bl	80023f8 <printLoRaStatus>
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <processMasterReceiverMode>:

// Function to process LORA master receive mode
void processMasterReceiverMode(UART1_t *uartHandle, SX1278_t *loRaHandle) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	RX_MODE_ON_LED();
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <processMasterReceiverMode+0xb0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a28      	ldr	r2, [pc, #160]	; (800290c <processMasterReceiverMode+0xb0>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	60d3      	str	r3, [r2, #12]
	TX_MODE_OFF_LED();
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <processMasterReceiverMode+0xb0>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	4a25      	ldr	r2, [pc, #148]	; (800290c <processMasterReceiverMode+0xb0>)
 8002878:	f023 0310 	bic.w	r3, r3, #16
 800287c:	60d3      	str	r3, [r2, #12]
	if (loRaHandle->operatingMode != RX_CONTINUOUS) {
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002884:	2b05      	cmp	r3, #5
 8002886:	d00e      	beq.n	80028a6 <processMasterReceiverMode+0x4a>
		updateMode(loRaHandle, MASTER_RECEIVER);
 8002888:	2103      	movs	r1, #3
 800288a:	6838      	ldr	r0, [r7, #0]
 800288c:	f7fe fc35 	bl	80010fa <updateMode>
		setRxFifoAddr(loRaHandle);
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	f7fe fd0d 	bl	80012b0 <setRxFifoAddr>
		setLoraLowFreqModeReg(loRaHandle, RX_CONTINUOUS);
 8002896:	2105      	movs	r1, #5
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	f7fe fb98 	bl	8000fce <setLoraLowFreqModeReg>
		printLoRaStatus(uartHandle, loRaHandle);
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fda9 	bl	80023f8 <printLoRaStatus>
	}
	clearMemForRx(loRaHandle);
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f7fe fe00 	bl	80014ac <clearMemForRx>
	GPIO_PinState bussy = HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 80028ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028b0:	4816      	ldr	r0, [pc, #88]	; (800290c <processMasterReceiverMode+0xb0>)
 80028b2:	f001 faf7 	bl	8003ea4 <HAL_GPIO_ReadPin>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
			LORA_BUSSY_Pin);
	if (bussy == GPIO_PIN_SET && crcErrorActivation(loRaHandle) != 1) {
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10c      	bne.n	80028da <processMasterReceiverMode+0x7e>
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	f7fe fd2c 	bl	800131e <crcErrorActivation>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d006      	beq.n	80028da <processMasterReceiverMode+0x7e>
		getRxFifoData(loRaHandle);
 80028cc:	6838      	ldr	r0, [r7, #0]
 80028ce:	f7fe fd53 	bl	8001378 <getRxFifoData>
		printLoRaStatus(uartHandle, loRaHandle);
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fd8f 	bl	80023f8 <printLoRaStatus>
	}
	if (loRaHandle->status == RX_DONE) {
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d10e      	bne.n	8002902 <processMasterReceiverMode+0xa6>
		setRxFifoAddr(loRaHandle);
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f7fe fce3 	bl	80012b0 <setRxFifoAddr>
		setLoraLowFreqModeReg(loRaHandle, RX_CONTINUOUS);
 80028ea:	2105      	movs	r1, #5
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f7fe fb6e 	bl	8000fce <setLoraLowFreqModeReg>
		loRaHandle->status = RX_MODE;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		printLoRaStatus(uartHandle, loRaHandle);
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fd7b 	bl	80023f8 <printLoRaStatus>
	}
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40010c00 	.word	0x40010c00

08002910 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002914:	b672      	cpsid	i
}
 8002916:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002918:	e7fe      	b.n	8002918 <Error_Handler+0x8>

0800291a <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

Vlad_t* vladInit(uint8_t id) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 8002924:	203c      	movs	r0, #60	; 0x3c
 8002926:	f004 fb21 	bl	8006f6c <malloc>
 800292a:	4603      	mov	r3, r0
 800292c:	60fb      	str	r3, [r7, #12]
	vlad->agc152m = 0;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
	vlad->ref152m = 0;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	805a      	strh	r2, [r3, #2]
	vlad->level152m = 0;  // downlink 150 mhz
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	809a      	strh	r2, [r3, #4]
	vlad->agc172m = 0;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	80da      	strh	r2, [r3, #6]
	vlad->level172m = 0; //uplink 170 mhz
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	811a      	strh	r2, [r3, #8]
	vlad->tone_level = 0;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	815a      	strh	r2, [r3, #10]
	vlad->v_5v = 0;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	819a      	strh	r2, [r3, #12]
	vlad->vin = 0;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	81da      	strh	r2, [r3, #14]
	vlad->current = 0;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	821a      	strh	r2, [r3, #16]
	vlad->v_5v_real = 0;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
	vlad->lineVoltagereal = 0;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
	vlad->lineCurrentReal = 0;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
	vlad->ucTemperature.i = 0;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->lineCurrent.i = 0;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->remoteAttenuation = 0;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	vlad->v_5v_real = 0;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
	vlad->lineVoltagereal = 0;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
	vlad->lineCurrentReal = 0;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
	vlad->agc152m_real = 0;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	755a      	strb	r2, [r3, #21]
	vlad->remoteAttenuation = 0;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	vlad->rotarySwitchAttenuation = 0;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	vlad->isRemoteAttenuation = false;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	vlad->is_attenuation_updated = false;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	vlad->state = 0;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	vlad->calc_en = false;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	vlad->function = VLADR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2205      	movs	r2, #5
 80029f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	vlad->id = id;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	79fa      	ldrb	r2, [r7, #7]
 80029fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	vlad->lastUpdateTicks = HAL_GetTick();
 8002a00:	f000 fcb0 	bl	8003364 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8002a10:	2301      	movs	r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fe4b 	bl	80016b0 <HAL_readPage>
	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002a20:	2301      	movs	r3, #1
 8002a22:	2204      	movs	r2, #4
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe fe43 	bl	80016b0 <HAL_readPage>
	return vlad;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include <rs485.h>

RDSS_t* rdssInit(uint8_t id) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 8002a3e:	f44f 709c 	mov.w	r0, #312	; 0x138
 8002a42:	f004 fa93 	bl	8006f6c <malloc>
 8002a46:	4603      	mov	r3, r0
 8002a48:	60fb      	str	r3, [r7, #12]
	r->len = 0;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	705a      	strb	r2, [r3, #1]
	r->status = WAITING;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2208      	movs	r2, #8
 8002a54:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	r->cmd = NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
	r->id = id;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	79fa      	ldrb	r2, [r7, #7]
 8002a62:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	memset(r->buffer, 0, RDSS_BUFFER_SIZE);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3302      	adds	r3, #2
 8002a6a:	2232      	movs	r2, #50	; 0x32
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fa92 	bl	8006f98 <memset>
	/* PB9 DE485 as output  */
//	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
//	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
	return r;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <isValidModule>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t isValidModule(uint8_t *frame, uint8_t lenght) {
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
	if (frame[1] == VLADR) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d112      	bne.n	8002aba <isValidModule+0x3c>
		for (int i = 3; i < lenght; i++)
 8002a94:	2303      	movs	r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e00a      	b.n	8002ab0 <isValidModule+0x32>
			if (frame[i] == LTEL_END_MARK)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa4:	d101      	bne.n	8002aaa <isValidModule+0x2c>
				return VALID_MODULE;
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	e00a      	b.n	8002ac0 <isValidModule+0x42>
		for (int i = 3; i < lenght; i++)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3301      	adds	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	dbf0      	blt.n	8002a9a <isValidModule+0x1c>
 8002ab8:	e001      	b.n	8002abe <isValidModule+0x40>
	} else
		return WRONG_MODULE_FUNCTION;
 8002aba:	2304      	movs	r3, #4
 8002abc:	e000      	b.n	8002ac0 <isValidModule+0x42>
	return WRONG_MODULE_FUNCTION;
 8002abe:	2304      	movs	r3, #4
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <isValidFrame>:

RDSS_status_t isValidFrame(uint8_t *frame, uint8_t lenght) {
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d910      	bls.n	8002afe <isValidFrame+0x34>
		if (frame[0] == LTEL_START_MARK) {
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b7e      	cmp	r3, #126	; 0x7e
 8002ae2:	d10a      	bne.n	8002afa <isValidFrame+0x30>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b7f      	cmp	r3, #127	; 0x7f
 8002af0:	d101      	bne.n	8002af6 <isValidFrame+0x2c>
				return VALID_FRAME;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e004      	b.n	8002b00 <isValidFrame+0x36>
			else
				return START_READING;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e002      	b.n	8002b00 <isValidFrame+0x36>
		} else
			return NOT_VALID_FRAME;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e000      	b.n	8002b00 <isValidFrame+0x36>
	} else

		return WAITING;
 8002afe:	2308      	movs	r3, #8
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <checkValidCrc>:

RDSS_status_t checkValidCrc(uint8_t *frame, uint8_t len) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
	uint16_t calculatedCrc, savedCrc;
	savedCrc = ((uint16_t) frame[len - 2] << 8);
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	3b02      	subs	r3, #2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	81fb      	strh	r3, [r7, #14]
	savedCrc |= (uint16_t) frame[len - 3];
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	89fb      	ldrh	r3, [r7, #14]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	81fb      	strh	r3, [r7, #14]
	calculatedCrc = crc_get(&frame[1], len - 4);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f000 f80d 	bl	8002b64 <crc_get>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	81bb      	strh	r3, [r7, #12]

	return (calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR;
 8002b4e:	89ba      	ldrh	r2, [r7, #12]
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d101      	bne.n	8002b5a <checkValidCrc+0x50>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <checkValidCrc+0x52>
 8002b5a:	2306      	movs	r3, #6
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <crc_get>:

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 8002b70:	f241 0321 	movw	r3, #4129	; 0x1021
 8002b74:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;            // 16-bit CRC value
 8002b76:	2300      	movs	r3, #0
 8002b78:	81bb      	strh	r3, [r7, #12]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e025      	b.n	8002bcc <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	89bb      	ldrh	r3, [r7, #12]
 8002b90:	4053      	eors	r3, r2
 8002b92:	81bb      	strh	r3, [r7, #12]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002b94:	2300      	movs	r3, #0
 8002b96:	73bb      	strb	r3, [r7, #14]
 8002b98:	e012      	b.n	8002bc0 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8002b9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	da08      	bge.n	8002bb4 <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002ba2:	89bb      	ldrh	r3, [r7, #12]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bac:	4053      	eors	r3, r2
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <crc_get+0x56>
			} else {
				crc <<= 1;
 8002bb4:	89bb      	ldrh	r3, [r7, #12]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	81bb      	strh	r3, [r7, #12]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002bba:	7bbb      	ldrb	r3, [r7, #14]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	73bb      	strb	r3, [r7, #14]
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	2b07      	cmp	r3, #7
 8002bc4:	d9e9      	bls.n	8002b9a <crc_get+0x36>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3d5      	bcc.n	8002b80 <crc_get+0x1c>
			}
		}
	}

	return crc;
 8002bd4:	89bb      	ldrh	r3, [r7, #12]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <isValid>:
	else if (r->id == ID0)
		return LORA_SEND;
	return WRONG_MODULE_ID;
}

RDSS_status_t isValid(uint8_t *buff,uint8_t len) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
	RDSS_status_t status;
	status = isValidFrame(buff,len);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff6a 	bl	8002aca <isValidFrame>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
	if (!(status == VALID_FRAME))
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d001      	beq.n	8002c04 <isValid+0x24>
		return status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	e018      	b.n	8002c36 <isValid+0x56>
	status = isValidModule(buff,len);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff38 	bl	8002a7e <isValidModule>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]
	if (!(status == VALID_MODULE))
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	d001      	beq.n	8002c1c <isValid+0x3c>
		return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	e00c      	b.n	8002c36 <isValid+0x56>
	status = checkValidCrc(buff,len);
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff72 	bl	8002b0a <checkValidCrc>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
	if (!(status == DATA_OK))
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <isValid+0x54>
		return status;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	e000      	b.n	8002c36 <isValid+0x56>
	return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <fillValidBuffer>:

void fillValidBuffer(RDSS_t *r, uint8_t *buff, uint8_t len) {
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
	r->status = isValid(buff, len);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	68b8      	ldr	r0, [r7, #8]
 8002c52:	f7ff ffc5 	bl	8002be0 <isValid>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	if (r->status == DATA_OK) {
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <fillValidBuffer+0x40>
		r->len = len;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	79fa      	ldrb	r2, [r7, #7]
 8002c6e:	705a      	strb	r2, [r3, #1]
		memcpy(r->buffer, buff, len);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3302      	adds	r3, #2
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f97f 	bl	8006f7c <memcpy>
	}
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <reinit>:
	if (!(rs485->status == WRONG_MODULE_ID))
		return rs485->status;
	return rs485->status;
}

void reinit(RDSS_t *rs485) {
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	rs485->cmd = NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
	rs485->status = WAITING;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2208      	movs	r2, #8
 8002c98:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	if (rs485->buffer[0] == '\0')
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	789b      	ldrb	r3, [r3, #2]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <reinit+0x36>
		return;
	memset(rs485->buffer, 0, sizeof(rs485->buffer));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 f972 	bl	8006f98 <memset>
	rs485->len = 0;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	705a      	strb	r2, [r3, #1]
 8002cba:	e000      	b.n	8002cbe <reinit+0x38>
		return;
 8002cbc:	bf00      	nop
}
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_MspInit+0x5c>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_MspInit+0x5c>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6193      	str	r3, [r2, #24]
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_MspInit+0x5c>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_MspInit+0x5c>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_MspInit+0x5c>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_MspInit+0x5c>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_MspInit+0x60>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_MspInit+0x60>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40010000 	.word	0x40010000

08002d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_ADC_MspInit+0x6c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d121      	bne.n	8002d8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_ADC_MspInit+0x70>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002d78:	2313      	movs	r3, #19
 8002d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4619      	mov	r1, r3
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_ADC_MspInit+0x74>)
 8002d88:	f000 ff08 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012400 	.word	0x40012400
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010800 	.word	0x40010800

08002da0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_CRC_MspInit+0x34>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10b      	bne.n	8002dca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_CRC_MspInit+0x38>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_CRC_MspInit+0x38>)
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	6153      	str	r3, [r2, #20]
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_CRC_MspInit+0x38>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40023000 	.word	0x40023000
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_I2C_MspInit+0x70>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d123      	bne.n	8002e44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	6193      	str	r3, [r2, #24]
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e14:	23c0      	movs	r3, #192	; 0xc0
 8002e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e18:	2312      	movs	r3, #18
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0310 	add.w	r3, r7, #16
 8002e24:	4619      	mov	r1, r3
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <HAL_I2C_MspInit+0x78>)
 8002e28:	f000 feb8 	bl	8003b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e36:	61d3      	str	r3, [r2, #28]
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_I2C_MspInit+0x74>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010c00 	.word	0x40010c00

08002e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_SPI_MspInit+0x88>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d12f      	bne.n	8002ed8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_SPI_MspInit+0x8c>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	4619      	mov	r1, r3
 8002eba:	480b      	ldr	r0, [pc, #44]	; (8002ee8 <HAL_SPI_MspInit+0x90>)
 8002ebc:	f000 fe6e 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <HAL_SPI_MspInit+0x90>)
 8002ed4:	f000 fe62 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ed8:	bf00      	nop
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013000 	.word	0x40013000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010800 	.word	0x40010800

08002eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0320 	add.w	r3, r7, #32
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a57      	ldr	r2, [pc, #348]	; (8003064 <HAL_UART_MspInit+0x178>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d13a      	bne.n	8002f82 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a55      	ldr	r2, [pc, #340]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 0320 	add.w	r3, r7, #32
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4846      	ldr	r0, [pc, #280]	; (800306c <HAL_UART_MspInit+0x180>)
 8002f52:	f000 fe23 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8002f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 0320 	add.w	r3, r7, #32
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4840      	ldr	r0, [pc, #256]	; (800306c <HAL_UART_MspInit+0x180>)
 8002f6c:	f000 fe16 	bl	8003b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2100      	movs	r1, #0
 8002f74:	2025      	movs	r0, #37	; 0x25
 8002f76:	f000 fd0c 	bl	8003992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f7a:	2025      	movs	r0, #37	; 0x25
 8002f7c:	f000 fd25 	bl	80039ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f80:	e06c      	b.n	800305c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_UART_MspInit+0x184>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d130      	bne.n	8002fee <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4a35      	ldr	r2, [pc, #212]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	61d3      	str	r3, [r2, #28]
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	f107 0320 	add.w	r3, r7, #32
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4827      	ldr	r0, [pc, #156]	; (800306c <HAL_UART_MspInit+0x180>)
 8002fd0:	f000 fde4 	bl	8003b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0320 	add.w	r3, r7, #32
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4821      	ldr	r0, [pc, #132]	; (800306c <HAL_UART_MspInit+0x180>)
 8002fe8:	f000 fdd8 	bl	8003b9c <HAL_GPIO_Init>
}
 8002fec:	e036      	b.n	800305c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_UART_MspInit+0x188>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d131      	bne.n	800305c <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8002ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003002:	61d3      	str	r3, [r2, #28]
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_UART_MspInit+0x17c>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6193      	str	r3, [r2, #24]
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_UART_MspInit+0x17c>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8003028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003032:	2303      	movs	r3, #3
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 0320 	add.w	r3, r7, #32
 800303a:	4619      	mov	r1, r3
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <HAL_UART_MspInit+0x18c>)
 800303e:	f000 fdad 	bl	8003b9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8003042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8003050:	f107 0320 	add.w	r3, r7, #32
 8003054:	4619      	mov	r1, r3
 8003056:	4808      	ldr	r0, [pc, #32]	; (8003078 <HAL_UART_MspInit+0x18c>)
 8003058:	f000 fda0 	bl	8003b9c <HAL_GPIO_Init>
}
 800305c:	bf00      	nop
 800305e:	3730      	adds	r7, #48	; 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40010800 	.word	0x40010800
 8003070:	40004400 	.word	0x40004400
 8003074:	40004800 	.word	0x40004800
 8003078:	40010c00 	.word	0x40010c00

0800307c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <NMI_Handler+0x4>

08003082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <HardFault_Handler+0x4>

08003088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <MemManage_Handler+0x4>

0800308e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003092:	e7fe      	b.n	8003092 <BusFault_Handler+0x4>

08003094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003098:	e7fe      	b.n	8003098 <UsageFault_Handler+0x4>

0800309a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c2:	f000 f93d 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <USART1_IRQHandler+0x10>)
 80030d2:	f003 fa0f 	bl	80064f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000170 	.word	0x20000170

080030e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <_sbrk+0x5c>)
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <_sbrk+0x60>)
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030f4:	4b13      	ldr	r3, [pc, #76]	; (8003144 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <_sbrk+0x64>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <_sbrk+0x68>)
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d207      	bcs.n	8003120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003110:	f003 ff02 	bl	8006f18 <__errno>
 8003114:	4603      	mov	r3, r0
 8003116:	220c      	movs	r2, #12
 8003118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e009      	b.n	8003134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <_sbrk+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <_sbrk+0x64>)
 8003130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20005000 	.word	0x20005000
 8003140:	00000400 	.word	0x00000400
 8003144:	20000250 	.word	0x20000250
 8003148:	20000268 	.word	0x20000268

0800314c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <writeTxReg>:
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
	NVIC_EnableIRQ(USART1_IRQn);
	SET_BIT(USART1->CR1, USART_CR1_UE);
}

void writeTxReg(char ch) {
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <writeTxReg+0x50>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <writeTxReg+0x50>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 800316e:	bf00      	nop
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <writeTxReg+0x54>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f9      	beq.n	8003170 <writeTxReg+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <writeTxReg+0x54>)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 8003182:	bf00      	nop
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <writeTxReg+0x54>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f9      	beq.n	8003184 <writeTxReg+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <writeTxReg+0x50>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <writeTxReg+0x50>)
 8003196:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010c00 	.word	0x40010c00
 80031ac:	40013800 	.word	0x40013800

080031b0 <writeTxBuffer>:
void writeTxStr(char *str) {
	for (uint8_t i = 0; str[i] != '\0'; i++)
		writeTxReg(str[i]);
}

void writeTxBuffer(uint8_t str[], uint8_t len) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < len; i++) {
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e00e      	b.n	80031e0 <writeTxBuffer+0x30>
		writeTxReg(str[i]);
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ffc4 	bl	8003158 <writeTxReg>
		str[i] = (char) '\0';
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3301      	adds	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d3ec      	bcc.n	80031c2 <writeTxBuffer+0x12>
	}
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <writeTx>:

void writeTx(UART1_t *uart1) {
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
	writeTxBuffer(uart1->tx, uart1->tx_len);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7ff ffd1 	bl	80031b0 <writeTxBuffer>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <cleanRx>:

void cleanRx(UART1_t *u) {
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
	memset(u->rx, 0, sizeof(u->rx));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f003 feb7 	bl	8006f98 <memset>
	u->rxLen = 0;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	u->isReady = false;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <cleanTx>:

void cleanTx(UART1_t *u) {
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
	memset(u->tx, 0, sizeof(u->tx));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3364      	adds	r3, #100	; 0x64
 800324e:	2264      	movs	r2, #100	; 0x64
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f003 fea0 	bl	8006f98 <memset>
	u->tx_len = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800326a:	490d      	ldr	r1, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003280:	4c0a      	ldr	r4, [pc, #40]	; (80032ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800328e:	f7ff ff5d 	bl	800314c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f003 fe47 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003296:	f7fe facd 	bl	8001834 <main>
  bx lr
 800329a:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800329c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80032a4:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 80032a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032ac:	20000268 	.word	0x20000268

080032b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032b0:	e7fe      	b.n	80032b0 <ADC1_2_IRQHandler>
	...

080032b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_Init+0x28>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_Init+0x28>)
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 fb59 	bl	800397c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	200f      	movs	r0, #15
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fcf8 	bl	8002cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb71 	bl	80039e6 <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 fb39 	bl	8003992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000000 	.word	0x20000000
 8003338:	20000008 	.word	0x20000008
 800333c:	20000004 	.word	0x20000004

08003340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_IncTick+0x1c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_IncTick+0x20>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a03      	ldr	r2, [pc, #12]	; (8003360 <HAL_IncTick+0x20>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	20000008 	.word	0x20000008
 8003360:	20000254 	.word	0x20000254

08003364 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b02      	ldr	r3, [pc, #8]	; (8003374 <HAL_GetTick+0x10>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000254 	.word	0x20000254

08003378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff fff0 	bl	8003364 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d005      	beq.n	800339e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_Delay+0x44>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800339e:	bf00      	nop
 80033a0:	f7ff ffe0 	bl	8003364 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d8f7      	bhi.n	80033a0 <HAL_Delay+0x28>
  {
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000008 	.word	0x20000008

080033c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0be      	b.n	8003560 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fc92 	bl	8002d28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9ab 	bl	8003760 <ADC_ConversionStop_Disable>
 800340a:	4603      	mov	r3, r0
 800340c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 8099 	bne.w	800354e <HAL_ADC_Init+0x18e>
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8095 	bne.w	800354e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800342c:	f023 0302 	bic.w	r3, r3, #2
 8003430:	f043 0202 	orr.w	r2, r3, #2
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003440:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7b1b      	ldrb	r3, [r3, #12]
 8003446:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003448:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003458:	d003      	beq.n	8003462 <HAL_ADC_Init+0xa2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_ADC_Init+0xa8>
 8003462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003466:	e000      	b.n	800346a <HAL_ADC_Init+0xaa>
 8003468:	2300      	movs	r3, #0
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7d1b      	ldrb	r3, [r3, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d119      	bne.n	80034ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7b1b      	ldrb	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	3b01      	subs	r3, #1
 8003486:	035a      	lsls	r2, r3, #13
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e00b      	b.n	80034ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_ADC_Init+0x1a8>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d003      	beq.n	80034e6 <HAL_ADC_Init+0x126>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d104      	bne.n	80034f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	051b      	lsls	r3, r3, #20
 80034ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	430a      	orrs	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	4b18      	ldr	r3, [pc, #96]	; (800356c <HAL_ADC_Init+0x1ac>)
 800350c:	4013      	ands	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d10b      	bne.n	800352c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800352a:	e018      	b.n	800355e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f023 0312 	bic.w	r3, r3, #18
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800354c:	e007      	b.n	800355e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800355e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	ffe1f7fd 	.word	0xffe1f7fd
 800356c:	ff1f0efe 	.word	0xff1f0efe

08003570 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e0dc      	b.n	800374a <HAL_ADC_ConfigChannel+0x1da>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d81c      	bhi.n	80035da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b05      	subs	r3, #5
 80035b2:	221f      	movs	r2, #31
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	4019      	ands	r1, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	3b05      	subs	r3, #5
 80035cc:	fa00 f203 	lsl.w	r2, r0, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34
 80035d8:	e03c      	b.n	8003654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d81c      	bhi.n	800361c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	3b23      	subs	r3, #35	; 0x23
 80035f4:	221f      	movs	r2, #31
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4019      	ands	r1, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	3b23      	subs	r3, #35	; 0x23
 800360e:	fa00 f203 	lsl.w	r2, r0, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	e01b      	b.n	8003654 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b41      	subs	r3, #65	; 0x41
 800362e:	221f      	movs	r2, #31
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	4019      	ands	r1, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	3b41      	subs	r3, #65	; 0x41
 8003648:	fa00 f203 	lsl.w	r2, r0, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b09      	cmp	r3, #9
 800365a:	d91c      	bls.n	8003696 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68d9      	ldr	r1, [r3, #12]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	3b1e      	subs	r3, #30
 800366e:	2207      	movs	r2, #7
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	4019      	ands	r1, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6898      	ldr	r0, [r3, #8]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	3b1e      	subs	r3, #30
 8003688:	fa00 f203 	lsl.w	r2, r0, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	e019      	b.n	80036ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6919      	ldr	r1, [r3, #16]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4019      	ands	r1, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6898      	ldr	r0, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	fa00 f203 	lsl.w	r2, r0, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d003      	beq.n	80036da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80036d6:	2b11      	cmp	r3, #17
 80036d8:	d132      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_ADC_ConfigChannel+0x1e4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d125      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d126      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003700:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d11a      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <HAL_ADC_ConfigChannel+0x1e8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_ADC_ConfigChannel+0x1ec>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	0c9a      	lsrs	r2, r3, #18
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003720:	e002      	b.n	8003728 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3b01      	subs	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x1b2>
 800372e:	e007      	b.n	8003740 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012400 	.word	0x40012400
 8003758:	20000000 	.word	0x20000000
 800375c:	431bde83 	.word	0x431bde83

08003760 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d12e      	bne.n	80037d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800378a:	f7ff fdeb 	bl	8003364 <HAL_GetTick>
 800378e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003790:	e01b      	b.n	80037ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003792:	f7ff fde7 	bl	8003364 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d914      	bls.n	80037ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10d      	bne.n	80037ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f043 0210 	orr.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e007      	b.n	80037da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d0dc      	beq.n	8003792 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800380c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60d3      	str	r3, [r2, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <__NVIC_GetPriorityGrouping+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0307 	and.w	r3, r3, #7
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0b      	blt.n	8003872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	4906      	ldr	r1, [pc, #24]	; (800387c <__NVIC_EnableIRQ+0x34>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2001      	movs	r0, #1
 800386a:	fa00 f202 	lsl.w	r2, r0, r2
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100

08003880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	; (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
         );
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d301      	bcc.n	800394e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394a:	2301      	movs	r3, #1
 800394c:	e00f      	b.n	800396e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <SysTick_Config+0x40>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003956:	210f      	movs	r1, #15
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	f7ff ff90 	bl	8003880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <SysTick_Config+0x40>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <SysTick_Config+0x40>)
 8003968:	2207      	movs	r2, #7
 800396a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	e000e010 	.word	0xe000e010

0800397c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff2d 	bl	80037e4 <__NVIC_SetPriorityGrouping>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a4:	f7ff ff42 	bl	800382c <__NVIC_GetPriorityGrouping>
 80039a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff ff90 	bl	80038d4 <NVIC_EncodePriority>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff5f 	bl	8003880 <__NVIC_SetPriority>
}
 80039c2:	bf00      	nop
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff35 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ffa2 	bl	8003938 <SysTick_Config>
 80039f4:	4603      	mov	r3, r0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e00e      	b.n	8003a2e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	795b      	ldrb	r3, [r3, #5]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff f9bd 	bl	8002da0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d008      	beq.n	8003a60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e020      	b.n	8003aa2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 020e 	bic.w	r2, r2, #14
 8003a6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e051      	b.n	8003b74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_DMA_Abort_IT+0xd4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d029      	beq.n	8003b4e <HAL_DMA_Abort_IT+0xa2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_DMA_Abort_IT+0xd8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Abort_IT+0x9e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_DMA_Abort_IT+0xdc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01a      	beq.n	8003b44 <HAL_DMA_Abort_IT+0x98>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_DMA_Abort_IT+0xe0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d012      	beq.n	8003b3e <HAL_DMA_Abort_IT+0x92>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_DMA_Abort_IT+0xe4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00a      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x8c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_DMA_Abort_IT+0xe8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <HAL_DMA_Abort_IT+0x86>
 8003b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b30:	e00e      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b36:	e00b      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3c:	e008      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b42:	e005      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b48:	e002      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	e000      	b.n	8003b50 <HAL_DMA_Abort_IT+0xa4>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_DMA_Abort_IT+0xec>)
 8003b52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
    } 
  }
  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40020008 	.word	0x40020008
 8003b84:	4002001c 	.word	0x4002001c
 8003b88:	40020030 	.word	0x40020030
 8003b8c:	40020044 	.word	0x40020044
 8003b90:	40020058 	.word	0x40020058
 8003b94:	4002006c 	.word	0x4002006c
 8003b98:	40020000 	.word	0x40020000

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b08b      	sub	sp, #44	; 0x2c
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bae:	e169      	b.n	8003e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f040 8158 	bne.w	8003e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a9a      	ldr	r2, [pc, #616]	; (8003e3c <HAL_GPIO_Init+0x2a0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d05e      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
 8003bd8:	4a98      	ldr	r2, [pc, #608]	; (8003e3c <HAL_GPIO_Init+0x2a0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d875      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003bde:	4a98      	ldr	r2, [pc, #608]	; (8003e40 <HAL_GPIO_Init+0x2a4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d058      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
 8003be4:	4a96      	ldr	r2, [pc, #600]	; (8003e40 <HAL_GPIO_Init+0x2a4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d86f      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003bea:	4a96      	ldr	r2, [pc, #600]	; (8003e44 <HAL_GPIO_Init+0x2a8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d052      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
 8003bf0:	4a94      	ldr	r2, [pc, #592]	; (8003e44 <HAL_GPIO_Init+0x2a8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d869      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003bf6:	4a94      	ldr	r2, [pc, #592]	; (8003e48 <HAL_GPIO_Init+0x2ac>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d04c      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
 8003bfc:	4a92      	ldr	r2, [pc, #584]	; (8003e48 <HAL_GPIO_Init+0x2ac>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d863      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003c02:	4a92      	ldr	r2, [pc, #584]	; (8003e4c <HAL_GPIO_Init+0x2b0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d046      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
 8003c08:	4a90      	ldr	r2, [pc, #576]	; (8003e4c <HAL_GPIO_Init+0x2b0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d85d      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003c0e:	2b12      	cmp	r3, #18
 8003c10:	d82a      	bhi.n	8003c68 <HAL_GPIO_Init+0xcc>
 8003c12:	2b12      	cmp	r3, #18
 8003c14:	d859      	bhi.n	8003cca <HAL_GPIO_Init+0x12e>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_GPIO_Init+0x80>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c97 	.word	0x08003c97
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c83 	.word	0x08003c83
 8003c28:	08003cc5 	.word	0x08003cc5
 8003c2c:	08003ccb 	.word	0x08003ccb
 8003c30:	08003ccb 	.word	0x08003ccb
 8003c34:	08003ccb 	.word	0x08003ccb
 8003c38:	08003ccb 	.word	0x08003ccb
 8003c3c:	08003ccb 	.word	0x08003ccb
 8003c40:	08003ccb 	.word	0x08003ccb
 8003c44:	08003ccb 	.word	0x08003ccb
 8003c48:	08003ccb 	.word	0x08003ccb
 8003c4c:	08003ccb 	.word	0x08003ccb
 8003c50:	08003ccb 	.word	0x08003ccb
 8003c54:	08003ccb 	.word	0x08003ccb
 8003c58:	08003ccb 	.word	0x08003ccb
 8003c5c:	08003ccb 	.word	0x08003ccb
 8003c60:	08003c79 	.word	0x08003c79
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <HAL_GPIO_Init+0x2b4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c6e:	e02c      	b.n	8003cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	623b      	str	r3, [r7, #32]
          break;
 8003c76:	e029      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	623b      	str	r3, [r7, #32]
          break;
 8003c80:	e024      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	3308      	adds	r3, #8
 8003c88:	623b      	str	r3, [r7, #32]
          break;
 8003c8a:	e01f      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	330c      	adds	r3, #12
 8003c92:	623b      	str	r3, [r7, #32]
          break;
 8003c94:	e01a      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	623b      	str	r3, [r7, #32]
          break;
 8003ca2:	e013      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cac:	2308      	movs	r3, #8
 8003cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	611a      	str	r2, [r3, #16]
          break;
 8003cb6:	e009      	b.n	8003ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cb8:	2308      	movs	r3, #8
 8003cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	615a      	str	r2, [r3, #20]
          break;
 8003cc2:	e003      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
          break;
 8003cc8:	e000      	b.n	8003ccc <HAL_GPIO_Init+0x130>
          break;
 8003cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2bff      	cmp	r3, #255	; 0xff
 8003cd0:	d801      	bhi.n	8003cd6 <HAL_GPIO_Init+0x13a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	e001      	b.n	8003cda <HAL_GPIO_Init+0x13e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2bff      	cmp	r3, #255	; 0xff
 8003ce0:	d802      	bhi.n	8003ce8 <HAL_GPIO_Init+0x14c>
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	e002      	b.n	8003cee <HAL_GPIO_Init+0x152>
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	3b08      	subs	r3, #8
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	210f      	movs	r1, #15
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	6a39      	ldr	r1, [r7, #32]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b1 	beq.w	8003e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d1c:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <HAL_GPIO_Init+0x2b8>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <HAL_GPIO_Init+0x2b8>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6193      	str	r3, [r2, #24]
 8003d28:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <HAL_GPIO_Init+0x2b8>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d34:	4a48      	ldr	r2, [pc, #288]	; (8003e58 <HAL_GPIO_Init+0x2bc>)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a40      	ldr	r2, [pc, #256]	; (8003e5c <HAL_GPIO_Init+0x2c0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_GPIO_Init+0x1ec>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <HAL_GPIO_Init+0x2c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00d      	beq.n	8003d84 <HAL_GPIO_Init+0x1e8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <HAL_GPIO_Init+0x2c8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <HAL_GPIO_Init+0x1e4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_GPIO_Init+0x1e0>
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x1ee>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	e004      	b.n	8003d8a <HAL_GPIO_Init+0x1ee>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e002      	b.n	8003d8a <HAL_GPIO_Init+0x1ee>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_GPIO_Init+0x1ee>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	f002 0203 	and.w	r2, r2, #3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4093      	lsls	r3, r2
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d9a:	492f      	ldr	r1, [pc, #188]	; (8003e58 <HAL_GPIO_Init+0x2bc>)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	492c      	ldr	r1, [pc, #176]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
 8003dc0:	e006      	b.n	8003dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	4928      	ldr	r1, [pc, #160]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ddc:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4922      	ldr	r1, [pc, #136]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60cb      	str	r3, [r1, #12]
 8003de8:	e006      	b.n	8003df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	491e      	ldr	r1, [pc, #120]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d006      	beq.n	8003e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4918      	ldr	r1, [pc, #96]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e12:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	4914      	ldr	r1, [pc, #80]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d021      	beq.n	8003e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e021      	b.n	8003e7e <HAL_GPIO_Init+0x2e2>
 8003e3a:	bf00      	nop
 8003e3c:	10320000 	.word	0x10320000
 8003e40:	10310000 	.word	0x10310000
 8003e44:	10220000 	.word	0x10220000
 8003e48:	10210000 	.word	0x10210000
 8003e4c:	10120000 	.word	0x10120000
 8003e50:	10110000 	.word	0x10110000
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40010800 	.word	0x40010800
 8003e60:	40010c00 	.word	0x40010c00
 8003e64:	40011000 	.word	0x40011000
 8003e68:	40011400 	.word	0x40011400
 8003e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <HAL_GPIO_Init+0x304>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	3301      	adds	r3, #1
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f47f ae8e 	bne.w	8003bb0 <HAL_GPIO_Init+0x14>
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	372c      	adds	r7, #44	; 0x2c
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40010400 	.word	0x40010400

08003ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e001      	b.n	8003ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	807b      	strh	r3, [r7, #2]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee2:	787b      	ldrb	r3, [r7, #1]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee8:	887a      	ldrh	r2, [r7, #2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003eee:	e003      	b.n	8003ef8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12b      	b.n	800416e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe ff56 	bl	8002ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f68:	f001 fbca 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a81      	ldr	r2, [pc, #516]	; (8004178 <HAL_I2C_Init+0x274>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d807      	bhi.n	8003f88 <HAL_I2C_Init+0x84>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a80      	ldr	r2, [pc, #512]	; (800417c <HAL_I2C_Init+0x278>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e006      	b.n	8003f96 <HAL_I2C_Init+0x92>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a7d      	ldr	r2, [pc, #500]	; (8004180 <HAL_I2C_Init+0x27c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0e7      	b.n	800416e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a78      	ldr	r2, [pc, #480]	; (8004184 <HAL_I2C_Init+0x280>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0c9b      	lsrs	r3, r3, #18
 8003fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	; (8004178 <HAL_I2C_Init+0x274>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d802      	bhi.n	8003fd8 <HAL_I2C_Init+0xd4>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	e009      	b.n	8003fec <HAL_I2C_Init+0xe8>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	4a69      	ldr	r2, [pc, #420]	; (8004188 <HAL_I2C_Init+0x284>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	3301      	adds	r3, #1
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ffe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	495c      	ldr	r1, [pc, #368]	; (8004178 <HAL_I2C_Init+0x274>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d819      	bhi.n	8004040 <HAL_I2C_Init+0x13c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e59      	subs	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fbb1 f3f3 	udiv	r3, r1, r3
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004020:	400b      	ands	r3, r1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_I2C_Init+0x138>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e59      	subs	r1, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fbb1 f3f3 	udiv	r3, r1, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	e051      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800403c:	2304      	movs	r3, #4
 800403e:	e04f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d111      	bne.n	800406c <HAL_I2C_Init+0x168>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e012      	b.n	8004092 <HAL_I2C_Init+0x18e>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x196>
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_I2C_Init+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1e58      	subs	r0, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	440b      	add	r3, r1
 80040b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	e00f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	6809      	ldr	r1, [r1, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800410e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6911      	ldr	r1, [r2, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	000186a0 	.word	0x000186a0
 800417c:	001e847f 	.word	0x001e847f
 8004180:	003d08ff 	.word	0x003d08ff
 8004184:	431bde83 	.word	0x431bde83
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
 800419c:	4613      	mov	r3, r2
 800419e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7ff f8e0 	bl	8003364 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 80e0 	bne.w	8004374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2319      	movs	r3, #25
 80041ba:	2201      	movs	r2, #1
 80041bc:	4970      	ldr	r1, [pc, #448]	; (8004380 <HAL_I2C_Master_Transmit+0x1f4>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fc9e 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0d3      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x50>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0cc      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d007      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	; 0x21
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2210      	movs	r2, #16
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_I2C_Master_Transmit+0x1f8>)
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fb08 	bl	8004860 <I2C_MasterRequestWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004270:	e066      	b.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fd5c 	bl	8004d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06b      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d11b      	bne.n	8004314 <HAL_I2C_Master_Transmit+0x188>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fd53 	bl	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01a      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d194      	bne.n	8004272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	; 0x30
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7fe ffe0 	bl	8003364 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f040 824b 	bne.w	800484a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2319      	movs	r3, #25
 80043ba:	2201      	movs	r2, #1
 80043bc:	497f      	ldr	r1, [pc, #508]	; (80045bc <HAL_I2C_Master_Receive+0x234>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fb9e 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
 80043cc:	e23e      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_I2C_Master_Receive+0x54>
 80043d8:	2302      	movs	r3, #2
 80043da:	e237      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d007      	beq.n	8004402 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2222      	movs	r2, #34	; 0x22
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2210      	movs	r2, #16
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	893a      	ldrh	r2, [r7, #8]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a5f      	ldr	r2, [pc, #380]	; (80045c0 <HAL_I2C_Master_Receive+0x238>)
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004444:	8979      	ldrh	r1, [r7, #10]
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa8a 	bl	8004964 <I2C_MasterRequestRead>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1f8      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d113      	bne.n	800448a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e1cc      	b.n	8004824 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b01      	cmp	r3, #1
 8004490:	d11e      	bne.n	80044d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044a2:	b672      	cpsid	i
}
 80044a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044cc:	b662      	cpsie	i
}
 80044ce:	e035      	b.n	800453c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d11e      	bne.n	8004516 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044e8:	b672      	cpsid	i
}
 80044ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004512:	b662      	cpsie	i
}
 8004514:	e012      	b.n	800453c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800453c:	e172      	b.n	8004824 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b03      	cmp	r3, #3
 8004544:	f200 811f 	bhi.w	8004786 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	2b01      	cmp	r3, #1
 800454e:	d123      	bne.n	8004598 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fc7d 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e173      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004596:	e145      	b.n	8004824 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	2b02      	cmp	r3, #2
 800459e:	d152      	bne.n	8004646 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	4906      	ldr	r1, [pc, #24]	; (80045c4 <HAL_I2C_Master_Receive+0x23c>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 faa8 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e148      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
 80045ba:	bf00      	nop
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000
 80045c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045c8:	b672      	cpsid	i
}
 80045ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800460e:	b662      	cpsie	i
}
 8004610:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004644:	e0ee      	b.n	8004824 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	4981      	ldr	r1, [pc, #516]	; (8004854 <HAL_I2C_Master_Receive+0x4cc>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fa55 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0f5      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004670:	b672      	cpsid	i
}
 8004672:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <HAL_I2C_Master_Receive+0x4d0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	4a6b      	ldr	r2, [pc, #428]	; (800485c <HAL_I2C_Master_Receive+0x4d4>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a1a      	lsrs	r2, r3, #8
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	00da      	lsls	r2, r3, #3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d118      	bne.n	80046fe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046ee:	b662      	cpsie	i
}
 80046f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0a6      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b04      	cmp	r3, #4
 800470a:	d1d9      	bne.n	80046c0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800474e:	b662      	cpsie	i
}
 8004750:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004784:	e04e      	b.n	8004824 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb62 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e058      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d124      	bne.n	8004824 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f ae88 	bne.w	800453e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	00010004 	.word	0x00010004
 8004858:	20000000 	.word	0x20000000
 800485c:	14f8b589 	.word	0x14f8b589

08004860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	460b      	mov	r3, r1
 800486e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d006      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e00b      	b.n	80048b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b12      	cmp	r3, #18
 80048a2:	d107      	bne.n	80048b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f91d 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e035      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f0:	d108      	bne.n	8004904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	e01b      	b.n	800493c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030f 	orn	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <I2C_MasterRequestWrite+0xfc>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f966 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e010      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <I2C_MasterRequestWrite+0x100>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f956 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010008 	.word	0x00010008
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	460b      	mov	r3, r1
 8004972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004988:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d006      	beq.n	800499e <I2C_MasterRequestRead+0x3a>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d003      	beq.n	800499e <I2C_MasterRequestRead+0x3a>
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800499c:	d108      	bne.n	80049b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00b      	b.n	80049c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	2b11      	cmp	r3, #17
 80049b6:	d107      	bne.n	80049c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f893 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ee:	d103      	bne.n	80049f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e079      	b.n	8004af0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a04:	d108      	bne.n	8004a18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a06:	897b      	ldrh	r3, [r7, #10]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e05f      	b.n	8004ad8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	11db      	asrs	r3, r3, #7
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f063 030f 	orn	r3, r3, #15
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4930      	ldr	r1, [pc, #192]	; (8004af8 <I2C_MasterRequestRead+0x194>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f8dc 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e054      	b.n	8004af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a46:	897b      	ldrh	r3, [r7, #10]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4929      	ldr	r1, [pc, #164]	; (8004afc <I2C_MasterRequestRead+0x198>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8cc 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e044      	b.n	8004af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f831 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab2:	d103      	bne.n	8004abc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e017      	b.n	8004af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	11db      	asrs	r3, r3, #7
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0306 	and.w	r3, r3, #6
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f063 030e 	orn	r3, r3, #14
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4907      	ldr	r1, [pc, #28]	; (8004afc <I2C_MasterRequestRead+0x198>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f888 	bl	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010008 	.word	0x00010008
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b10:	e048      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d044      	beq.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fe fc23 	bl	8003364 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d139      	bne.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d10d      	bne.n	8004b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	e00c      	b.n	8004b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d116      	bne.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e023      	b.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	e00c      	b.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	43da      	mvns	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d093      	beq.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c02:	e071      	b.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d123      	bne.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0204 	orr.w	r2, r3, #4
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e067      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d041      	beq.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fe fb7e 	bl	8003364 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d136      	bne.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10c      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	e00b      	b.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	43da      	mvns	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e021      	b.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10c      	bne.n	8004d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e00b      	b.n	8004d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f47f af6d 	bne.w	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d40:	e034      	b.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f8e3 	bl	8004f0e <I2C_IsAcknowledgeFailed>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e034      	b.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d028      	beq.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fe fb03 	bl	8003364 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11d      	bne.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d016      	beq.n	8004dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e007      	b.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d1c3      	bne.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd0:	e034      	b.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f89b 	bl	8004f0e <I2C_IsAcknowledgeFailed>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e034      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d028      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dea:	f7fe fabb 	bl	8003364 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d302      	bcc.n	8004e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11d      	bne.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d016      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d1c3      	bne.n	8004dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e60:	e049      	b.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d119      	bne.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e030      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe fa5e 	bl	8003364 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11d      	bne.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d016      	beq.n	8004ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e007      	b.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d1ae      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d11b      	bne.n	8004f5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0204 	orr.w	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e272      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8087 	beq.w	800509a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f8c:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d00c      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f98:	4b8f      	ldr	r3, [pc, #572]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d112      	bne.n	8004fca <HAL_RCC_OscConfig+0x5e>
 8004fa4:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d10b      	bne.n	8004fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb2:	4b89      	ldr	r3, [pc, #548]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d06c      	beq.n	8005098 <HAL_RCC_OscConfig+0x12c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d168      	bne.n	8005098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e24c      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x76>
 8004fd4:	4b80      	ldr	r3, [pc, #512]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a7f      	ldr	r2, [pc, #508]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e02e      	b.n	8005040 <HAL_RCC_OscConfig+0xd4>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10c      	bne.n	8005004 <HAL_RCC_OscConfig+0x98>
 8004fea:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7a      	ldr	r2, [pc, #488]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b78      	ldr	r3, [pc, #480]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a77      	ldr	r2, [pc, #476]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e01d      	b.n	8005040 <HAL_RCC_OscConfig+0xd4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0xbc>
 800500e:	4b72      	ldr	r3, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a71      	ldr	r2, [pc, #452]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6e      	ldr	r2, [pc, #440]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0xd4>
 8005028:	4b6b      	ldr	r3, [pc, #428]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6a      	ldr	r2, [pc, #424]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b68      	ldr	r3, [pc, #416]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a67      	ldr	r2, [pc, #412]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fe f98c 	bl	8003364 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005050:	f7fe f988 	bl	8003364 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e200      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0xe4>
 800506e:	e014      	b.n	800509a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fe f978 	bl	8003364 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7fe f974 	bl	8003364 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e1ec      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x10c>
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d063      	beq.n	800516e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a6:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050b2:	4b49      	ldr	r3, [pc, #292]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d11c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x18c>
 80050be:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d116      	bne.n	80050f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x176>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1c0      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4939      	ldr	r1, [pc, #228]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	e03a      	b.n	800516e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d020      	beq.n	8005142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005100:	4b36      	ldr	r3, [pc, #216]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005106:	f7fe f92d 	bl	8003364 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510e:	f7fe f929 	bl	8003364 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1a1      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4927      	ldr	r1, [pc, #156]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]
 8005140:	e015      	b.n	800516e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005142:	4b26      	ldr	r3, [pc, #152]	; (80051dc <HAL_RCC_OscConfig+0x270>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fe f90c 	bl	8003364 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005150:	f7fe f908 	bl	8003364 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e180      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d03a      	beq.n	80051f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d019      	beq.n	80051b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005188:	f7fe f8ec 	bl	8003364 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005190:	f7fe f8e8 	bl	8003364 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e160      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <HAL_RCC_OscConfig+0x26c>)
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051ae:	2001      	movs	r0, #1
 80051b0:	f000 face 	bl	8005750 <RCC_Delay>
 80051b4:	e01c      	b.n	80051f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <HAL_RCC_OscConfig+0x274>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051bc:	f7fe f8d2 	bl	8003364 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c2:	e00f      	b.n	80051e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c4:	f7fe f8ce 	bl	8003364 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d908      	bls.n	80051e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e146      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	42420000 	.word	0x42420000
 80051e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e4:	4b92      	ldr	r3, [pc, #584]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e9      	bne.n	80051c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a6 	beq.w	800534a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	4a87      	ldr	r2, [pc, #540]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	61d3      	str	r3, [r2, #28]
 800521a:	4b85      	ldr	r3, [pc, #532]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b82      	ldr	r3, [pc, #520]	; (8005434 <HAL_RCC_OscConfig+0x4c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b7f      	ldr	r3, [pc, #508]	; (8005434 <HAL_RCC_OscConfig+0x4c8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a7e      	ldr	r2, [pc, #504]	; (8005434 <HAL_RCC_OscConfig+0x4c8>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fe f88f 	bl	8003364 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fe f88b 	bl	8003364 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e103      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b75      	ldr	r3, [pc, #468]	; (8005434 <HAL_RCC_OscConfig+0x4c8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x312>
 8005270:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	4a6e      	ldr	r2, [pc, #440]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6213      	str	r3, [r2, #32]
 800527c:	e02d      	b.n	80052da <HAL_RCC_OscConfig+0x36e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x334>
 8005286:	4b6a      	ldr	r3, [pc, #424]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4a69      	ldr	r2, [pc, #420]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	6213      	str	r3, [r2, #32]
 8005292:	4b67      	ldr	r3, [pc, #412]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a66      	ldr	r2, [pc, #408]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	6213      	str	r3, [r2, #32]
 800529e:	e01c      	b.n	80052da <HAL_RCC_OscConfig+0x36e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d10c      	bne.n	80052c2 <HAL_RCC_OscConfig+0x356>
 80052a8:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4a60      	ldr	r2, [pc, #384]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	6213      	str	r3, [r2, #32]
 80052b4:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a5d      	ldr	r2, [pc, #372]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6213      	str	r3, [r2, #32]
 80052c0:	e00b      	b.n	80052da <HAL_RCC_OscConfig+0x36e>
 80052c2:	4b5b      	ldr	r3, [pc, #364]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	4a5a      	ldr	r2, [pc, #360]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	6213      	str	r3, [r2, #32]
 80052ce:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a57      	ldr	r2, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d015      	beq.n	800530e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e2:	f7fe f83f 	bl	8003364 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e8:	e00a      	b.n	8005300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fe f83b 	bl	8003364 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e0b1      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005300:	4b4b      	ldr	r3, [pc, #300]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ee      	beq.n	80052ea <HAL_RCC_OscConfig+0x37e>
 800530c:	e014      	b.n	8005338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fe f829 	bl	8003364 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fe f825 	bl	8003364 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e09b      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532c:	4b40      	ldr	r3, [pc, #256]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ee      	bne.n	8005316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533e:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	4a3b      	ldr	r2, [pc, #236]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8087 	beq.w	8005462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	d061      	beq.n	8005424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d146      	bne.n	80053f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005368:	4b33      	ldr	r3, [pc, #204]	; (8005438 <HAL_RCC_OscConfig+0x4cc>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fd fff9 	bl	8003364 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005376:	f7fd fff5 	bl	8003364 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e06d      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005388:	4b29      	ldr	r3, [pc, #164]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d108      	bne.n	80053b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4921      	ldr	r1, [pc, #132]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a19      	ldr	r1, [r3, #32]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	430b      	orrs	r3, r1
 80053c2:	491b      	ldr	r1, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fd ffc9 	bl	8003364 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd ffc5 	bl	8003364 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e03d      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x46a>
 80053f4:	e035      	b.n	8005462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <HAL_RCC_OscConfig+0x4cc>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fd ffb2 	bl	8003364 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005404:	f7fd ffae 	bl	8003364 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e026      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCC_OscConfig+0x4c4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x498>
 8005422:	e01e      	b.n	8005462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e019      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
 8005430:	40021000 	.word	0x40021000
 8005434:	40007000 	.word	0x40007000
 8005438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCC_OscConfig+0x500>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	429a      	cmp	r2, r3
 800544e:	d106      	bne.n	800545e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0d0      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005484:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d910      	bls.n	80054b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b67      	ldr	r3, [pc, #412]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 0207 	bic.w	r2, r3, #7
 800549a:	4965      	ldr	r1, [pc, #404]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b63      	ldr	r3, [pc, #396]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0b8      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d020      	beq.n	8005502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054cc:	4b59      	ldr	r3, [pc, #356]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a58      	ldr	r2, [pc, #352]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e4:	4b53      	ldr	r3, [pc, #332]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4a52      	ldr	r2, [pc, #328]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f0:	4b50      	ldr	r3, [pc, #320]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	494d      	ldr	r1, [pc, #308]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d040      	beq.n	8005590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d107      	bne.n	8005526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d115      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e07f      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d107      	bne.n	800553e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552e:	4b41      	ldr	r3, [pc, #260]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e073      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553e:	4b3d      	ldr	r3, [pc, #244]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e06b      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554e:	4b39      	ldr	r3, [pc, #228]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4936      	ldr	r1, [pc, #216]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005560:	f7fd ff00 	bl	8003364 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	e00a      	b.n	800557e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005568:	f7fd fefc 	bl	8003364 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e053      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 020c 	and.w	r2, r3, #12
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	429a      	cmp	r2, r3
 800558e:	d1eb      	bne.n	8005568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005590:	4b27      	ldr	r3, [pc, #156]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d210      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 0207 	bic.w	r2, r3, #7
 80055a6:	4922      	ldr	r1, [pc, #136]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b20      	ldr	r3, [pc, #128]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e032      	b.n	8005626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4916      	ldr	r1, [pc, #88]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	490e      	ldr	r1, [pc, #56]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055fe:	f000 f821 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8005602:	4602      	mov	r2, r0
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	490a      	ldr	r1, [pc, #40]	; (8005638 <HAL_RCC_ClockConfig+0x1c8>)
 8005610:	5ccb      	ldrb	r3, [r1, r3]
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <HAL_RCC_ClockConfig+0x1cc>)
 8005618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800561a:	4b09      	ldr	r3, [pc, #36]	; (8005640 <HAL_RCC_ClockConfig+0x1d0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fd fe5e 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40022000 	.word	0x40022000
 8005634:	40021000 	.word	0x40021000
 8005638:	08007b5c 	.word	0x08007b5c
 800563c:	20000000 	.word	0x20000000
 8005640:	20000004 	.word	0x20000004

08005644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800565e:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	2b04      	cmp	r3, #4
 800566c:	d002      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x30>
 800566e:	2b08      	cmp	r3, #8
 8005670:	d003      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x36>
 8005672:	e027      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <HAL_RCC_GetSysClockFreq+0x98>)
 8005676:	613b      	str	r3, [r7, #16]
      break;
 8005678:	e027      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	0c9b      	lsrs	r3, r3, #18
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	0c5b      	lsrs	r3, r3, #17
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800569e:	5cd3      	ldrb	r3, [r2, r3]
 80056a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <HAL_RCC_GetSysClockFreq+0x98>)
 80056a6:	fb03 f202 	mul.w	r2, r3, r2
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e004      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	613b      	str	r3, [r7, #16]
      break;
 80056c2:	e002      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_GetSysClockFreq+0x98>)
 80056c6:	613b      	str	r3, [r7, #16]
      break;
 80056c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ca:	693b      	ldr	r3, [r7, #16]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	08007b74 	.word	0x08007b74
 80056e4:	08007b84 	.word	0x08007b84
 80056e8:	003d0900 	.word	0x003d0900

080056ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <HAL_RCC_GetHCLKFreq+0x10>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	20000000 	.word	0x20000000

08005700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005704:	f7ff fff2 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000
 8005724:	08007b6c 	.word	0x08007b6c

08005728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800572c:	f7ff ffde 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	0adb      	lsrs	r3, r3, #11
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK2Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	08007b6c 	.word	0x08007b6c

08005750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <RCC_Delay+0x34>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <RCC_Delay+0x38>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0a5b      	lsrs	r3, r3, #9
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800576c:	bf00      	nop
  }
  while (Delay --);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1e5a      	subs	r2, r3, #1
 8005772:	60fa      	str	r2, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f9      	bne.n	800576c <RCC_Delay+0x1c>
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	20000000 	.word	0x20000000
 8005788:	10624dd3 	.word	0x10624dd3

0800578c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d07d      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ac:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10d      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b8:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c2:	61d3      	str	r3, [r2, #28]
 80057c4:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	4b46      	ldr	r3, [pc, #280]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d118      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e0:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a42      	ldr	r2, [pc, #264]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ec:	f7fd fdba 	bl	8003364 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f2:	e008      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f4:	f7fd fdb6 	bl	8003364 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e06d      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02e      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	429a      	cmp	r2, r3
 800582e:	d027      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005830:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005846:	4a29      	ldr	r2, [pc, #164]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d014      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005856:	f7fd fd85 	bl	8003364 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585c:	e00a      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f7fd fd81 	bl	8003364 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 3288 	movw	r2, #5000	; 0x1388
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e036      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0ee      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4917      	ldr	r1, [pc, #92]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	4313      	orrs	r3, r2
 8005890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4a13      	ldr	r2, [pc, #76]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058b0:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	490b      	ldr	r1, [pc, #44]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4904      	ldr	r1, [pc, #16]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40007000 	.word	0x40007000
 80058f4:	42420440 	.word	0x42420440

080058f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e076      	b.n	80059f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591a:	d009      	beq.n	8005930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	61da      	str	r2, [r3, #28]
 8005922:	e005      	b.n	8005930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fd fa84 	bl	8002e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	ea42 0103 	orr.w	r1, r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	0c1a      	lsrs	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f002 0204 	and.w	r2, r2, #4
 80059d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_SPI_Transmit+0x22>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e12d      	b.n	8005c7e <HAL_SPI_Transmit+0x27e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a2a:	f7fd fc9b 	bl	8003364 <HAL_GetTick>
 8005a2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
 8005a42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a44:	e116      	b.n	8005c74 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_SPI_Transmit+0x52>
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a56:	e10d      	b.n	8005c74 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005abe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d007      	beq.n	8005ade <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d14f      	bne.n	8005b88 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0xf6>
 8005af0:	8afb      	ldrh	r3, [r7, #22]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d142      	bne.n	8005b7c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	1c9a      	adds	r2, r3, #2
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b1a:	e02f      	b.n	8005b7c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d112      	bne.n	8005b50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	1c9a      	adds	r2, r3, #2
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b4e:	e015      	b.n	8005b7c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b50:	f7fd fc08 	bl	8003364 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d803      	bhi.n	8005b68 <HAL_SPI_Transmit+0x168>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Transmit+0x16e>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b7a:	e07b      	b.n	8005c74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ca      	bne.n	8005b1c <HAL_SPI_Transmit+0x11c>
 8005b86:	e050      	b.n	8005c2a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_SPI_Transmit+0x196>
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d144      	bne.n	8005c20 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bbc:	e030      	b.n	8005c20 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d113      	bne.n	8005bf4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bf2:	e015      	b.n	8005c20 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf4:	f7fd fbb6 	bl	8003364 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d803      	bhi.n	8005c0c <HAL_SPI_Transmit+0x20c>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d102      	bne.n	8005c12 <HAL_SPI_Transmit+0x212>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c1e:	e029      	b.n	8005c74 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1c9      	bne.n	8005bbe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fbcc 	bl	80063cc <SPI_EndRxTxTransaction>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e003      	b.n	8005c74 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b088      	sub	sp, #32
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005caa:	e0fb      	b.n	8005ea4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb4:	d112      	bne.n	8005cdc <HAL_SPI_Receive+0x56>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10e      	bne.n	8005cdc <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f8ef 	bl	8005eb6 <HAL_SPI_TransmitReceive>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e0e8      	b.n	8005eae <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Receive+0x64>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e0e1      	b.n	8005eae <HAL_SPI_Receive+0x228>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf2:	f7fd fb37 	bl	8003364 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_SPI_Receive+0x7e>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d08:	e0cc      	b.n	8005ea4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d50:	d10f      	bne.n	8005d72 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d007      	beq.n	8005d90 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d16a      	bne.n	8005e6e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d98:	e032      	b.n	8005e00 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d115      	bne.n	8005dd4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f103 020c 	add.w	r2, r3, #12
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	7812      	ldrb	r2, [r2, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dd2:	e015      	b.n	8005e00 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd4:	f7fd fac6 	bl	8003364 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d803      	bhi.n	8005dec <HAL_SPI_Receive+0x166>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d102      	bne.n	8005df2 <HAL_SPI_Receive+0x16c>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005dfe:	e051      	b.n	8005ea4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1c7      	bne.n	8005d9a <HAL_SPI_Receive+0x114>
 8005e0a:	e035      	b.n	8005e78 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d113      	bne.n	8005e42 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	b292      	uxth	r2, r2
 8005e26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e40:	e015      	b.n	8005e6e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e42:	f7fd fa8f 	bl	8003364 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d803      	bhi.n	8005e5a <HAL_SPI_Receive+0x1d4>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d102      	bne.n	8005e60 <HAL_SPI_Receive+0x1da>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e6c:	e01a      	b.n	8005ea4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1c9      	bne.n	8005e0c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa53 	bl	8006328 <SPI_EndRxTransaction>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
 8005e9a:	e003      	b.n	8005ea4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b08c      	sub	sp, #48	; 0x30
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x26>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e198      	b.n	800620e <HAL_SPI_TransmitReceive+0x358>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee4:	f7fd fa3e 	bl	8003364 <HAL_GetTick>
 8005ee8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d00f      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x70>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0c:	d107      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x68>
 8005f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d003      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f24:	e16d      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x82>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x82>
 8005f32:	887b      	ldrh	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d103      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f3e:	e160      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d003      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	887a      	ldrh	r2, [r7, #2]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	887a      	ldrh	r2, [r7, #2]
 8005f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	887a      	ldrh	r2, [r7, #2]
 8005f76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d007      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb0:	d17c      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x10a>
 8005fba:	8b7b      	ldrh	r3, [r7, #26]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d16a      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	1c9a      	adds	r2, r3, #2
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe4:	e057      	b.n	8006096 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d11b      	bne.n	800602c <HAL_SPI_TransmitReceive+0x176>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_SPI_TransmitReceive+0x176>
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d113      	bne.n	800602c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d119      	bne.n	800606e <HAL_SPI_TransmitReceive+0x1b8>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	b292      	uxth	r2, r2
 8006050:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	1c9a      	adds	r2, r3, #2
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800606a:	2301      	movs	r3, #1
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800606e:	f7fd f979 	bl	8003364 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607a:	429a      	cmp	r2, r3
 800607c:	d80b      	bhi.n	8006096 <HAL_SPI_TransmitReceive+0x1e0>
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d007      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006094:	e0b5      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1a2      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x130>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d19d      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x130>
 80060aa:	e080      	b.n	80061ae <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x204>
 80060b4:	8b7b      	ldrh	r3, [r7, #26]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d16f      	bne.n	800619a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060e0:	e05b      	b.n	800619a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d11c      	bne.n	800612a <HAL_SPI_TransmitReceive+0x274>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d017      	beq.n	800612a <HAL_SPI_TransmitReceive+0x274>
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d114      	bne.n	800612a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d119      	bne.n	800616c <HAL_SPI_TransmitReceive+0x2b6>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d014      	beq.n	800616c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006168:	2301      	movs	r3, #1
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800616c:	f7fd f8fa 	bl	8003364 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_TransmitReceive+0x2ce>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <HAL_SPI_TransmitReceive+0x2d4>
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b00      	cmp	r3, #0
 8006188:	d107      	bne.n	800619a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006198:	e033      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d19e      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x22c>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d199      	bne.n	80060e2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 f90a 	bl	80063cc <SPI_EndRxTxTransaction>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d006      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80061ca:	e01a      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f8:	e003      	b.n	8006202 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800620a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800620e:	4618      	mov	r0, r3
 8006210:	3730      	adds	r7, #48	; 0x30
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006228:	f7fd f89c 	bl	8003364 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	4413      	add	r3, r2
 8006236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006238:	f7fd f894 	bl	8003364 <HAL_GetTick>
 800623c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800623e:	4b39      	ldr	r3, [pc, #228]	; (8006324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	015b      	lsls	r3, r3, #5
 8006244:	0d1b      	lsrs	r3, r3, #20
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624e:	e054      	b.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d050      	beq.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006258:	f7fd f884 	bl	8003364 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	429a      	cmp	r2, r3
 8006266:	d902      	bls.n	800626e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d13d      	bne.n	80062ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800627c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006286:	d111      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006290:	d004      	beq.n	800629c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d107      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b4:	d10f      	bne.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e017      	b.n	800631a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	429a      	cmp	r2, r3
 8006308:	bf0c      	ite	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	2300      	movne	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	429a      	cmp	r2, r3
 8006316:	d19b      	bne.n	8006250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000000 	.word	0x20000000

08006328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633c:	d111      	bne.n	8006362 <SPI_EndRxTransaction+0x3a>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006346:	d004      	beq.n	8006352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d107      	bne.n	8006362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006360:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636a:	d117      	bne.n	800639c <SPI_EndRxTransaction+0x74>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006374:	d112      	bne.n	800639c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	2101      	movs	r1, #1
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff ff49 	bl	8006218 <SPI_WaitFlagStateUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e013      	b.n	80063c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2180      	movs	r1, #128	; 0x80
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ff36 	bl	8006218 <SPI_WaitFlagStateUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e000      	b.n	80063c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff ff18 	bl	8006218 <SPI_WaitFlagStateUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e000      	b.n	8006400 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e042      	b.n	80064a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fc fd5c 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800644a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fcd5 	bl	8006dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d112      	bne.n	80064e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_Receive_IT+0x26>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e00b      	b.n	80064ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	461a      	mov	r2, r3
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fab7 	bl	8006a52 <UART_Start_Receive_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b0ba      	sub	sp, #232	; 0xe8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800651a:	2300      	movs	r3, #0
 800651c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb93 	bl	8006c7e <UART_Receive_IT>
      return;
 8006558:	e25b      	b.n	8006a12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800655a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80de 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80d1 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	f043 0201 	orr.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
 80065ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f043 0202 	orr.w	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	f043 0204 	orr.w	r2, r3, #4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 81f2 	beq.w	8006a08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb1e 	bl	8006c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_UART_IRQHandler+0x17a>
 8006666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d04f      	beq.n	800670e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa28 	bl	8006ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d041      	beq.n	8006706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800669c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d9      	bne.n	8006682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	4a7e      	ldr	r2, [pc, #504]	; (80068d4 <HAL_UART_IRQHandler+0x3e0>)
 80066dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd f9e2 	bl	8003aac <HAL_DMA_Abort_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e00e      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f993 	bl	8006a2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00a      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f98f 	bl	8006a2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e006      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f98b 	bl	8006a2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800671a:	e175      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	bf00      	nop
    return;
 800671e:	e173      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	f040 814f 	bne.w	80069c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8148 	beq.w	80069c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8141 	beq.w	80069c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80b6 	beq.w	80068d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8145 	beq.w	8006a0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800678a:	429a      	cmp	r2, r3
 800678c:	f080 813e 	bcs.w	8006a0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b20      	cmp	r3, #32
 80067a0:	f000 8088 	beq.w	80068b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1d9      	bne.n	80067a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3314      	adds	r3, #20
 8006810:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006814:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006818:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800681c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e1      	bne.n	80067f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800683c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800683e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006850:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006852:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006856:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800685e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e3      	bne.n	800682c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	f023 0310 	bic.w	r3, r3, #16
 8006888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006896:	65ba      	str	r2, [r7, #88]	; 0x58
 8006898:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800689c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e3      	bne.n	8006872 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fd f8c1 	bl	8003a36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f8b6 	bl	8006a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d0:	e09c      	b.n	8006a0c <HAL_UART_IRQHandler+0x518>
 80068d2:	bf00      	nop
 80068d4:	08006b89 	.word	0x08006b89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 808e 	beq.w	8006a10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8089 	beq.w	8006a10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006922:	647a      	str	r2, [r7, #68]	; 0x44
 8006924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e3      	bne.n	80068fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3314      	adds	r3, #20
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	623b      	str	r3, [r7, #32]
   return(result);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3314      	adds	r3, #20
 8006956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800695a:	633a      	str	r2, [r7, #48]	; 0x30
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e3      	bne.n	8006936 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	60fb      	str	r3, [r7, #12]
   return(result);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069a0:	61fa      	str	r2, [r7, #28]
 80069a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	617b      	str	r3, [r7, #20]
   return(result);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e3      	bne.n	800697c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f83b 	bl	8006a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069c6:	e023      	b.n	8006a10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <HAL_UART_IRQHandler+0x4f4>
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f8e5 	bl	8006bb0 <UART_Transmit_IT>
    return;
 80069e6:	e014      	b.n	8006a12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <HAL_UART_IRQHandler+0x51e>
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f924 	bl	8006c4e <UART_EndTransmit_IT>
    return;
 8006a06:	e004      	b.n	8006a12 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a08:	bf00      	nop
 8006a0a:	e002      	b.n	8006a12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a10:	bf00      	nop
  }
}
 8006a12:	37e8      	adds	r7, #232	; 0xe8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	88fa      	ldrh	r2, [r7, #6]
 8006a6a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2222      	movs	r2, #34	; 0x22
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a96:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0220 	orr.w	r2, r2, #32
 8006ab6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b095      	sub	sp, #84	; 0x54
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aec:	643a      	str	r2, [r7, #64]	; 0x40
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e5      	bne.n	8006acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3314      	adds	r3, #20
 8006b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e5      	bne.n	8006b00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d119      	bne.n	8006b70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f023 0310 	bic.w	r3, r3, #16
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b5c:	61ba      	str	r2, [r7, #24]
 8006b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6979      	ldr	r1, [r7, #20]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b7e:	bf00      	nop
 8006b80:	3754      	adds	r7, #84	; 0x54
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7ff ff41 	bl	8006a2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b21      	cmp	r3, #33	; 0x21
 8006bc2:	d13e      	bne.n	8006c42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bcc:	d114      	bne.n	8006bf8 <UART_Transmit_IT+0x48>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d110      	bne.n	8006bf8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	621a      	str	r2, [r3, #32]
 8006bf6:	e008      	b.n	8006c0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	1c59      	adds	r1, r3, #1
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6211      	str	r1, [r2, #32]
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4619      	mov	r1, r3
 8006c18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fed2 	bl	8006a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b08c      	sub	sp, #48	; 0x30
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b22      	cmp	r3, #34	; 0x22
 8006c90:	f040 80ae 	bne.w	8006df0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9c:	d117      	bne.n	8006cce <UART_Receive_IT+0x50>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
 8006ccc:	e026      	b.n	8006d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	d007      	beq.n	8006cf2 <UART_Receive_IT+0x74>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <UART_Receive_IT+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e008      	b.n	8006d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d15d      	bne.n	8006dec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0220 	bic.w	r2, r2, #32
 8006d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d135      	bne.n	8006de2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9c:	623a      	str	r2, [r7, #32]
 8006d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e5      	bne.n	8006d7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d10a      	bne.n	8006dd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fe2e 	bl	8006a3c <HAL_UARTEx_RxEventCallback>
 8006de0:	e002      	b.n	8006de8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa ffba 	bl	8001d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e002      	b.n	8006df2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	; 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006e36:	f023 030c 	bic.w	r3, r3, #12
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6812      	ldr	r2, [r2, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	430b      	orrs	r3, r1
 8006e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <UART_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d103      	bne.n	8006e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe fc60 	bl	8005728 <HAL_RCC_GetPCLK2Freq>
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	e002      	b.n	8006e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe fc48 	bl	8005700 <HAL_RCC_GetPCLK1Freq>
 8006e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009a      	lsls	r2, r3, #2
 8006e7c:	441a      	add	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <UART_SetConfig+0x118>)
 8006e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	0119      	lsls	r1, r3, #4
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009a      	lsls	r2, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <UART_SetConfig+0x118>)
 8006eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2064      	movs	r0, #100	; 0x64
 8006eb2:	fb00 f303 	mul.w	r3, r0, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	3332      	adds	r3, #50	; 0x32
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <UART_SetConfig+0x118>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec8:	4419      	add	r1, r3
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009a      	lsls	r2, r3, #2
 8006ed4:	441a      	add	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ee0:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <UART_SetConfig+0x118>)
 8006ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	2064      	movs	r0, #100	; 0x64
 8006eea:	fb00 f303 	mul.w	r3, r0, r3
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	3332      	adds	r3, #50	; 0x32
 8006ef4:	4a07      	ldr	r2, [pc, #28]	; (8006f14 <UART_SetConfig+0x118>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	440a      	add	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40013800 	.word	0x40013800
 8006f14:	51eb851f 	.word	0x51eb851f

08006f18 <__errno>:
 8006f18:	4b01      	ldr	r3, [pc, #4]	; (8006f20 <__errno+0x8>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	2000000c 	.word	0x2000000c

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	2600      	movs	r6, #0
 8006f28:	4d0c      	ldr	r5, [pc, #48]	; (8006f5c <__libc_init_array+0x38>)
 8006f2a:	4c0d      	ldr	r4, [pc, #52]	; (8006f60 <__libc_init_array+0x3c>)
 8006f2c:	1b64      	subs	r4, r4, r5
 8006f2e:	10a4      	asrs	r4, r4, #2
 8006f30:	42a6      	cmp	r6, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	f000 fca4 	bl	8007880 <_init>
 8006f38:	2600      	movs	r6, #0
 8006f3a:	4d0a      	ldr	r5, [pc, #40]	; (8006f64 <__libc_init_array+0x40>)
 8006f3c:	4c0a      	ldr	r4, [pc, #40]	; (8006f68 <__libc_init_array+0x44>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4c:	4798      	blx	r3
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f56:	4798      	blx	r3
 8006f58:	3601      	adds	r6, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08007c24 	.word	0x08007c24
 8006f60:	08007c24 	.word	0x08007c24
 8006f64:	08007c24 	.word	0x08007c24
 8006f68:	08007c28 	.word	0x08007c28

08006f6c <malloc>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <malloc+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f000 b881 	b.w	8007078 <_malloc_r>
 8006f76:	bf00      	nop
 8006f78:	2000000c 	.word	0x2000000c

08006f7c <memcpy>:
 8006f7c:	440a      	add	r2, r1
 8006f7e:	4291      	cmp	r1, r2
 8006f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f84:	d100      	bne.n	8006f88 <memcpy+0xc>
 8006f86:	4770      	bx	lr
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f8e:	4291      	cmp	r1, r2
 8006f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f94:	d1f9      	bne.n	8006f8a <memcpy+0xe>
 8006f96:	bd10      	pop	{r4, pc}

08006f98 <memset>:
 8006f98:	4603      	mov	r3, r0
 8006f9a:	4402      	add	r2, r0
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d100      	bne.n	8006fa2 <memset+0xa>
 8006fa0:	4770      	bx	lr
 8006fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa6:	e7f9      	b.n	8006f9c <memset+0x4>

08006fa8 <_free_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4605      	mov	r5, r0
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d040      	beq.n	8007032 <_free_r+0x8a>
 8006fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb4:	1f0c      	subs	r4, r1, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bfb8      	it	lt
 8006fba:	18e4      	addlt	r4, r4, r3
 8006fbc:	f000 f902 	bl	80071c4 <__malloc_lock>
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <_free_r+0x8c>)
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	b933      	cbnz	r3, 8006fd4 <_free_r+0x2c>
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	4628      	mov	r0, r5
 8006fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd0:	f000 b8fe 	b.w	80071d0 <__malloc_unlock>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d908      	bls.n	8006fea <_free_r+0x42>
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	1821      	adds	r1, r4, r0
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf01      	itttt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	1809      	addeq	r1, r1, r0
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	e7ed      	b.n	8006fc6 <_free_r+0x1e>
 8006fea:	461a      	mov	r2, r3
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b10b      	cbz	r3, 8006ff4 <_free_r+0x4c>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d9fa      	bls.n	8006fea <_free_r+0x42>
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	1850      	adds	r0, r2, r1
 8006ff8:	42a0      	cmp	r0, r4
 8006ffa:	d10b      	bne.n	8007014 <_free_r+0x6c>
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	4401      	add	r1, r0
 8007000:	1850      	adds	r0, r2, r1
 8007002:	4283      	cmp	r3, r0
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	d1e0      	bne.n	8006fca <_free_r+0x22>
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4401      	add	r1, r0
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	6053      	str	r3, [r2, #4]
 8007012:	e7da      	b.n	8006fca <_free_r+0x22>
 8007014:	d902      	bls.n	800701c <_free_r+0x74>
 8007016:	230c      	movs	r3, #12
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	e7d6      	b.n	8006fca <_free_r+0x22>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	1821      	adds	r1, r4, r0
 8007020:	428b      	cmp	r3, r1
 8007022:	bf01      	itttt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	1809      	addeq	r1, r1, r0
 800702a:	6021      	streq	r1, [r4, #0]
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	6054      	str	r4, [r2, #4]
 8007030:	e7cb      	b.n	8006fca <_free_r+0x22>
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000258 	.word	0x20000258

08007038 <sbrk_aligned>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	4e0e      	ldr	r6, [pc, #56]	; (8007074 <sbrk_aligned+0x3c>)
 800703c:	460c      	mov	r4, r1
 800703e:	6831      	ldr	r1, [r6, #0]
 8007040:	4605      	mov	r5, r0
 8007042:	b911      	cbnz	r1, 800704a <sbrk_aligned+0x12>
 8007044:	f000 f88c 	bl	8007160 <_sbrk_r>
 8007048:	6030      	str	r0, [r6, #0]
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f000 f887 	bl	8007160 <_sbrk_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d00a      	beq.n	800706c <sbrk_aligned+0x34>
 8007056:	1cc4      	adds	r4, r0, #3
 8007058:	f024 0403 	bic.w	r4, r4, #3
 800705c:	42a0      	cmp	r0, r4
 800705e:	d007      	beq.n	8007070 <sbrk_aligned+0x38>
 8007060:	1a21      	subs	r1, r4, r0
 8007062:	4628      	mov	r0, r5
 8007064:	f000 f87c 	bl	8007160 <_sbrk_r>
 8007068:	3001      	adds	r0, #1
 800706a:	d101      	bne.n	8007070 <sbrk_aligned+0x38>
 800706c:	f04f 34ff 	mov.w	r4, #4294967295
 8007070:	4620      	mov	r0, r4
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	2000025c 	.word	0x2000025c

08007078 <_malloc_r>:
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	1ccd      	adds	r5, r1, #3
 800707e:	f025 0503 	bic.w	r5, r5, #3
 8007082:	3508      	adds	r5, #8
 8007084:	2d0c      	cmp	r5, #12
 8007086:	bf38      	it	cc
 8007088:	250c      	movcc	r5, #12
 800708a:	2d00      	cmp	r5, #0
 800708c:	4607      	mov	r7, r0
 800708e:	db01      	blt.n	8007094 <_malloc_r+0x1c>
 8007090:	42a9      	cmp	r1, r5
 8007092:	d905      	bls.n	80070a0 <_malloc_r+0x28>
 8007094:	230c      	movs	r3, #12
 8007096:	2600      	movs	r6, #0
 8007098:	603b      	str	r3, [r7, #0]
 800709a:	4630      	mov	r0, r6
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a0:	4e2e      	ldr	r6, [pc, #184]	; (800715c <_malloc_r+0xe4>)
 80070a2:	f000 f88f 	bl	80071c4 <__malloc_lock>
 80070a6:	6833      	ldr	r3, [r6, #0]
 80070a8:	461c      	mov	r4, r3
 80070aa:	bb34      	cbnz	r4, 80070fa <_malloc_r+0x82>
 80070ac:	4629      	mov	r1, r5
 80070ae:	4638      	mov	r0, r7
 80070b0:	f7ff ffc2 	bl	8007038 <sbrk_aligned>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	4604      	mov	r4, r0
 80070b8:	d14d      	bne.n	8007156 <_malloc_r+0xde>
 80070ba:	6834      	ldr	r4, [r6, #0]
 80070bc:	4626      	mov	r6, r4
 80070be:	2e00      	cmp	r6, #0
 80070c0:	d140      	bne.n	8007144 <_malloc_r+0xcc>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	4631      	mov	r1, r6
 80070c6:	4638      	mov	r0, r7
 80070c8:	eb04 0803 	add.w	r8, r4, r3
 80070cc:	f000 f848 	bl	8007160 <_sbrk_r>
 80070d0:	4580      	cmp	r8, r0
 80070d2:	d13a      	bne.n	800714a <_malloc_r+0xd2>
 80070d4:	6821      	ldr	r1, [r4, #0]
 80070d6:	3503      	adds	r5, #3
 80070d8:	1a6d      	subs	r5, r5, r1
 80070da:	f025 0503 	bic.w	r5, r5, #3
 80070de:	3508      	adds	r5, #8
 80070e0:	2d0c      	cmp	r5, #12
 80070e2:	bf38      	it	cc
 80070e4:	250c      	movcc	r5, #12
 80070e6:	4638      	mov	r0, r7
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7ff ffa5 	bl	8007038 <sbrk_aligned>
 80070ee:	3001      	adds	r0, #1
 80070f0:	d02b      	beq.n	800714a <_malloc_r+0xd2>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	442b      	add	r3, r5
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	e00e      	b.n	8007118 <_malloc_r+0xa0>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	d41e      	bmi.n	800713e <_malloc_r+0xc6>
 8007100:	2a0b      	cmp	r2, #11
 8007102:	d916      	bls.n	8007132 <_malloc_r+0xba>
 8007104:	1961      	adds	r1, r4, r5
 8007106:	42a3      	cmp	r3, r4
 8007108:	6025      	str	r5, [r4, #0]
 800710a:	bf18      	it	ne
 800710c:	6059      	strne	r1, [r3, #4]
 800710e:	6863      	ldr	r3, [r4, #4]
 8007110:	bf08      	it	eq
 8007112:	6031      	streq	r1, [r6, #0]
 8007114:	5162      	str	r2, [r4, r5]
 8007116:	604b      	str	r3, [r1, #4]
 8007118:	4638      	mov	r0, r7
 800711a:	f104 060b 	add.w	r6, r4, #11
 800711e:	f000 f857 	bl	80071d0 <__malloc_unlock>
 8007122:	f026 0607 	bic.w	r6, r6, #7
 8007126:	1d23      	adds	r3, r4, #4
 8007128:	1af2      	subs	r2, r6, r3
 800712a:	d0b6      	beq.n	800709a <_malloc_r+0x22>
 800712c:	1b9b      	subs	r3, r3, r6
 800712e:	50a3      	str	r3, [r4, r2]
 8007130:	e7b3      	b.n	800709a <_malloc_r+0x22>
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	42a3      	cmp	r3, r4
 8007136:	bf0c      	ite	eq
 8007138:	6032      	streq	r2, [r6, #0]
 800713a:	605a      	strne	r2, [r3, #4]
 800713c:	e7ec      	b.n	8007118 <_malloc_r+0xa0>
 800713e:	4623      	mov	r3, r4
 8007140:	6864      	ldr	r4, [r4, #4]
 8007142:	e7b2      	b.n	80070aa <_malloc_r+0x32>
 8007144:	4634      	mov	r4, r6
 8007146:	6876      	ldr	r6, [r6, #4]
 8007148:	e7b9      	b.n	80070be <_malloc_r+0x46>
 800714a:	230c      	movs	r3, #12
 800714c:	4638      	mov	r0, r7
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	f000 f83e 	bl	80071d0 <__malloc_unlock>
 8007154:	e7a1      	b.n	800709a <_malloc_r+0x22>
 8007156:	6025      	str	r5, [r4, #0]
 8007158:	e7de      	b.n	8007118 <_malloc_r+0xa0>
 800715a:	bf00      	nop
 800715c:	20000258 	.word	0x20000258

08007160 <_sbrk_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	2300      	movs	r3, #0
 8007164:	4d05      	ldr	r5, [pc, #20]	; (800717c <_sbrk_r+0x1c>)
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7fb ffb8 	bl	80030e0 <_sbrk>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_sbrk_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_sbrk_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000264 	.word	0x20000264

08007180 <siprintf>:
 8007180:	b40e      	push	{r1, r2, r3}
 8007182:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007186:	b500      	push	{lr}
 8007188:	b09c      	sub	sp, #112	; 0x70
 800718a:	ab1d      	add	r3, sp, #116	; 0x74
 800718c:	9002      	str	r0, [sp, #8]
 800718e:	9006      	str	r0, [sp, #24]
 8007190:	9107      	str	r1, [sp, #28]
 8007192:	9104      	str	r1, [sp, #16]
 8007194:	4808      	ldr	r0, [pc, #32]	; (80071b8 <siprintf+0x38>)
 8007196:	4909      	ldr	r1, [pc, #36]	; (80071bc <siprintf+0x3c>)
 8007198:	f853 2b04 	ldr.w	r2, [r3], #4
 800719c:	9105      	str	r1, [sp, #20]
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	a902      	add	r1, sp, #8
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	f000 f876 	bl	8007294 <_svfiprintf_r>
 80071a8:	2200      	movs	r2, #0
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	b01c      	add	sp, #112	; 0x70
 80071b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b4:	b003      	add	sp, #12
 80071b6:	4770      	bx	lr
 80071b8:	2000000c 	.word	0x2000000c
 80071bc:	ffff0208 	.word	0xffff0208

080071c0 <__retarget_lock_acquire_recursive>:
 80071c0:	4770      	bx	lr

080071c2 <__retarget_lock_release_recursive>:
 80071c2:	4770      	bx	lr

080071c4 <__malloc_lock>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__malloc_lock+0x8>)
 80071c6:	f7ff bffb 	b.w	80071c0 <__retarget_lock_acquire_recursive>
 80071ca:	bf00      	nop
 80071cc:	20000260 	.word	0x20000260

080071d0 <__malloc_unlock>:
 80071d0:	4801      	ldr	r0, [pc, #4]	; (80071d8 <__malloc_unlock+0x8>)
 80071d2:	f7ff bff6 	b.w	80071c2 <__retarget_lock_release_recursive>
 80071d6:	bf00      	nop
 80071d8:	20000260 	.word	0x20000260

080071dc <__ssputs_r>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	688e      	ldr	r6, [r1, #8]
 80071e2:	4682      	mov	sl, r0
 80071e4:	429e      	cmp	r6, r3
 80071e6:	460c      	mov	r4, r1
 80071e8:	4690      	mov	r8, r2
 80071ea:	461f      	mov	r7, r3
 80071ec:	d838      	bhi.n	8007260 <__ssputs_r+0x84>
 80071ee:	898a      	ldrh	r2, [r1, #12]
 80071f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071f4:	d032      	beq.n	800725c <__ssputs_r+0x80>
 80071f6:	6825      	ldr	r5, [r4, #0]
 80071f8:	6909      	ldr	r1, [r1, #16]
 80071fa:	3301      	adds	r3, #1
 80071fc:	eba5 0901 	sub.w	r9, r5, r1
 8007200:	6965      	ldr	r5, [r4, #20]
 8007202:	444b      	add	r3, r9
 8007204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800720c:	106d      	asrs	r5, r5, #1
 800720e:	429d      	cmp	r5, r3
 8007210:	bf38      	it	cc
 8007212:	461d      	movcc	r5, r3
 8007214:	0553      	lsls	r3, r2, #21
 8007216:	d531      	bpl.n	800727c <__ssputs_r+0xa0>
 8007218:	4629      	mov	r1, r5
 800721a:	f7ff ff2d 	bl	8007078 <_malloc_r>
 800721e:	4606      	mov	r6, r0
 8007220:	b950      	cbnz	r0, 8007238 <__ssputs_r+0x5c>
 8007222:	230c      	movs	r3, #12
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	f8ca 3000 	str.w	r3, [sl]
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	464a      	mov	r2, r9
 800723a:	6921      	ldr	r1, [r4, #16]
 800723c:	f7ff fe9e 	bl	8006f7c <memcpy>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	6126      	str	r6, [r4, #16]
 800724e:	444e      	add	r6, r9
 8007250:	6026      	str	r6, [r4, #0]
 8007252:	463e      	mov	r6, r7
 8007254:	6165      	str	r5, [r4, #20]
 8007256:	eba5 0509 	sub.w	r5, r5, r9
 800725a:	60a5      	str	r5, [r4, #8]
 800725c:	42be      	cmp	r6, r7
 800725e:	d900      	bls.n	8007262 <__ssputs_r+0x86>
 8007260:	463e      	mov	r6, r7
 8007262:	4632      	mov	r2, r6
 8007264:	4641      	mov	r1, r8
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	f000 fab8 	bl	80077dc <memmove>
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	2000      	movs	r0, #0
 8007270:	1b9b      	subs	r3, r3, r6
 8007272:	60a3      	str	r3, [r4, #8]
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	4433      	add	r3, r6
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	e7db      	b.n	8007234 <__ssputs_r+0x58>
 800727c:	462a      	mov	r2, r5
 800727e:	f000 fac7 	bl	8007810 <_realloc_r>
 8007282:	4606      	mov	r6, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	d1e1      	bne.n	800724c <__ssputs_r+0x70>
 8007288:	4650      	mov	r0, sl
 800728a:	6921      	ldr	r1, [r4, #16]
 800728c:	f7ff fe8c 	bl	8006fa8 <_free_r>
 8007290:	e7c7      	b.n	8007222 <__ssputs_r+0x46>
	...

08007294 <_svfiprintf_r>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	4698      	mov	r8, r3
 800729a:	898b      	ldrh	r3, [r1, #12]
 800729c:	4607      	mov	r7, r0
 800729e:	061b      	lsls	r3, r3, #24
 80072a0:	460d      	mov	r5, r1
 80072a2:	4614      	mov	r4, r2
 80072a4:	b09d      	sub	sp, #116	; 0x74
 80072a6:	d50e      	bpl.n	80072c6 <_svfiprintf_r+0x32>
 80072a8:	690b      	ldr	r3, [r1, #16]
 80072aa:	b963      	cbnz	r3, 80072c6 <_svfiprintf_r+0x32>
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	f7ff fee3 	bl	8007078 <_malloc_r>
 80072b2:	6028      	str	r0, [r5, #0]
 80072b4:	6128      	str	r0, [r5, #16]
 80072b6:	b920      	cbnz	r0, 80072c2 <_svfiprintf_r+0x2e>
 80072b8:	230c      	movs	r3, #12
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	e0d1      	b.n	8007466 <_svfiprintf_r+0x1d2>
 80072c2:	2340      	movs	r3, #64	; 0x40
 80072c4:	616b      	str	r3, [r5, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	2320      	movs	r3, #32
 80072cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d0:	2330      	movs	r3, #48	; 0x30
 80072d2:	f04f 0901 	mov.w	r9, #1
 80072d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007480 <_svfiprintf_r+0x1ec>
 80072de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e2:	4623      	mov	r3, r4
 80072e4:	469a      	mov	sl, r3
 80072e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ea:	b10a      	cbz	r2, 80072f0 <_svfiprintf_r+0x5c>
 80072ec:	2a25      	cmp	r2, #37	; 0x25
 80072ee:	d1f9      	bne.n	80072e4 <_svfiprintf_r+0x50>
 80072f0:	ebba 0b04 	subs.w	fp, sl, r4
 80072f4:	d00b      	beq.n	800730e <_svfiprintf_r+0x7a>
 80072f6:	465b      	mov	r3, fp
 80072f8:	4622      	mov	r2, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ff6d 	bl	80071dc <__ssputs_r>
 8007302:	3001      	adds	r0, #1
 8007304:	f000 80aa 	beq.w	800745c <_svfiprintf_r+0x1c8>
 8007308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800730a:	445a      	add	r2, fp
 800730c:	9209      	str	r2, [sp, #36]	; 0x24
 800730e:	f89a 3000 	ldrb.w	r3, [sl]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80a2 	beq.w	800745c <_svfiprintf_r+0x1c8>
 8007318:	2300      	movs	r3, #0
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
 800731e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007322:	f10a 0a01 	add.w	sl, sl, #1
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	9307      	str	r3, [sp, #28]
 800732a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800732e:	931a      	str	r3, [sp, #104]	; 0x68
 8007330:	4654      	mov	r4, sl
 8007332:	2205      	movs	r2, #5
 8007334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007338:	4851      	ldr	r0, [pc, #324]	; (8007480 <_svfiprintf_r+0x1ec>)
 800733a:	f000 fa41 	bl	80077c0 <memchr>
 800733e:	9a04      	ldr	r2, [sp, #16]
 8007340:	b9d8      	cbnz	r0, 800737a <_svfiprintf_r+0xe6>
 8007342:	06d0      	lsls	r0, r2, #27
 8007344:	bf44      	itt	mi
 8007346:	2320      	movmi	r3, #32
 8007348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734c:	0711      	lsls	r1, r2, #28
 800734e:	bf44      	itt	mi
 8007350:	232b      	movmi	r3, #43	; 0x2b
 8007352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007356:	f89a 3000 	ldrb.w	r3, [sl]
 800735a:	2b2a      	cmp	r3, #42	; 0x2a
 800735c:	d015      	beq.n	800738a <_svfiprintf_r+0xf6>
 800735e:	4654      	mov	r4, sl
 8007360:	2000      	movs	r0, #0
 8007362:	f04f 0c0a 	mov.w	ip, #10
 8007366:	9a07      	ldr	r2, [sp, #28]
 8007368:	4621      	mov	r1, r4
 800736a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736e:	3b30      	subs	r3, #48	; 0x30
 8007370:	2b09      	cmp	r3, #9
 8007372:	d94e      	bls.n	8007412 <_svfiprintf_r+0x17e>
 8007374:	b1b0      	cbz	r0, 80073a4 <_svfiprintf_r+0x110>
 8007376:	9207      	str	r2, [sp, #28]
 8007378:	e014      	b.n	80073a4 <_svfiprintf_r+0x110>
 800737a:	eba0 0308 	sub.w	r3, r0, r8
 800737e:	fa09 f303 	lsl.w	r3, r9, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	46a2      	mov	sl, r4
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	e7d2      	b.n	8007330 <_svfiprintf_r+0x9c>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	1d19      	adds	r1, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9103      	str	r1, [sp, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfbb      	ittet	lt
 8007396:	425b      	neglt	r3, r3
 8007398:	f042 0202 	orrlt.w	r2, r2, #2
 800739c:	9307      	strge	r3, [sp, #28]
 800739e:	9307      	strlt	r3, [sp, #28]
 80073a0:	bfb8      	it	lt
 80073a2:	9204      	strlt	r2, [sp, #16]
 80073a4:	7823      	ldrb	r3, [r4, #0]
 80073a6:	2b2e      	cmp	r3, #46	; 0x2e
 80073a8:	d10c      	bne.n	80073c4 <_svfiprintf_r+0x130>
 80073aa:	7863      	ldrb	r3, [r4, #1]
 80073ac:	2b2a      	cmp	r3, #42	; 0x2a
 80073ae:	d135      	bne.n	800741c <_svfiprintf_r+0x188>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	3402      	adds	r4, #2
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	9203      	str	r2, [sp, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfb8      	it	lt
 80073be:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007484 <_svfiprintf_r+0x1f0>
 80073c8:	2203      	movs	r2, #3
 80073ca:	4650      	mov	r0, sl
 80073cc:	7821      	ldrb	r1, [r4, #0]
 80073ce:	f000 f9f7 	bl	80077c0 <memchr>
 80073d2:	b140      	cbz	r0, 80073e6 <_svfiprintf_r+0x152>
 80073d4:	2340      	movs	r3, #64	; 0x40
 80073d6:	eba0 000a 	sub.w	r0, r0, sl
 80073da:	fa03 f000 	lsl.w	r0, r3, r0
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	3401      	adds	r4, #1
 80073e2:	4303      	orrs	r3, r0
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	2206      	movs	r2, #6
 80073ec:	4826      	ldr	r0, [pc, #152]	; (8007488 <_svfiprintf_r+0x1f4>)
 80073ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f2:	f000 f9e5 	bl	80077c0 <memchr>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d038      	beq.n	800746c <_svfiprintf_r+0x1d8>
 80073fa:	4b24      	ldr	r3, [pc, #144]	; (800748c <_svfiprintf_r+0x1f8>)
 80073fc:	bb1b      	cbnz	r3, 8007446 <_svfiprintf_r+0x1b2>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	3307      	adds	r3, #7
 8007402:	f023 0307 	bic.w	r3, r3, #7
 8007406:	3308      	adds	r3, #8
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740c:	4433      	add	r3, r6
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	e767      	b.n	80072e2 <_svfiprintf_r+0x4e>
 8007412:	460c      	mov	r4, r1
 8007414:	2001      	movs	r0, #1
 8007416:	fb0c 3202 	mla	r2, ip, r2, r3
 800741a:	e7a5      	b.n	8007368 <_svfiprintf_r+0xd4>
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4619      	mov	r1, r3
 8007424:	3401      	adds	r4, #1
 8007426:	9305      	str	r3, [sp, #20]
 8007428:	4620      	mov	r0, r4
 800742a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800742e:	3a30      	subs	r2, #48	; 0x30
 8007430:	2a09      	cmp	r2, #9
 8007432:	d903      	bls.n	800743c <_svfiprintf_r+0x1a8>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0c5      	beq.n	80073c4 <_svfiprintf_r+0x130>
 8007438:	9105      	str	r1, [sp, #20]
 800743a:	e7c3      	b.n	80073c4 <_svfiprintf_r+0x130>
 800743c:	4604      	mov	r4, r0
 800743e:	2301      	movs	r3, #1
 8007440:	fb0c 2101 	mla	r1, ip, r1, r2
 8007444:	e7f0      	b.n	8007428 <_svfiprintf_r+0x194>
 8007446:	ab03      	add	r3, sp, #12
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	462a      	mov	r2, r5
 800744c:	4638      	mov	r0, r7
 800744e:	4b10      	ldr	r3, [pc, #64]	; (8007490 <_svfiprintf_r+0x1fc>)
 8007450:	a904      	add	r1, sp, #16
 8007452:	f3af 8000 	nop.w
 8007456:	1c42      	adds	r2, r0, #1
 8007458:	4606      	mov	r6, r0
 800745a:	d1d6      	bne.n	800740a <_svfiprintf_r+0x176>
 800745c:	89ab      	ldrh	r3, [r5, #12]
 800745e:	065b      	lsls	r3, r3, #25
 8007460:	f53f af2c 	bmi.w	80072bc <_svfiprintf_r+0x28>
 8007464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007466:	b01d      	add	sp, #116	; 0x74
 8007468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746c:	ab03      	add	r3, sp, #12
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	462a      	mov	r2, r5
 8007472:	4638      	mov	r0, r7
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <_svfiprintf_r+0x1fc>)
 8007476:	a904      	add	r1, sp, #16
 8007478:	f000 f87c 	bl	8007574 <_printf_i>
 800747c:	e7eb      	b.n	8007456 <_svfiprintf_r+0x1c2>
 800747e:	bf00      	nop
 8007480:	08007be8 	.word	0x08007be8
 8007484:	08007bee 	.word	0x08007bee
 8007488:	08007bf2 	.word	0x08007bf2
 800748c:	00000000 	.word	0x00000000
 8007490:	080071dd 	.word	0x080071dd

08007494 <_printf_common>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	4616      	mov	r6, r2
 800749a:	4699      	mov	r9, r3
 800749c:	688a      	ldr	r2, [r1, #8]
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	4607      	mov	r7, r0
 80074a2:	4293      	cmp	r3, r2
 80074a4:	bfb8      	it	lt
 80074a6:	4613      	movlt	r3, r2
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ae:	460c      	mov	r4, r1
 80074b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074b4:	b10a      	cbz	r2, 80074ba <_printf_common+0x26>
 80074b6:	3301      	adds	r3, #1
 80074b8:	6033      	str	r3, [r6, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	0699      	lsls	r1, r3, #26
 80074be:	bf42      	ittt	mi
 80074c0:	6833      	ldrmi	r3, [r6, #0]
 80074c2:	3302      	addmi	r3, #2
 80074c4:	6033      	strmi	r3, [r6, #0]
 80074c6:	6825      	ldr	r5, [r4, #0]
 80074c8:	f015 0506 	ands.w	r5, r5, #6
 80074cc:	d106      	bne.n	80074dc <_printf_common+0x48>
 80074ce:	f104 0a19 	add.w	sl, r4, #25
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	6832      	ldr	r2, [r6, #0]
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	42ab      	cmp	r3, r5
 80074da:	dc28      	bgt.n	800752e <_printf_common+0x9a>
 80074dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074e0:	1e13      	subs	r3, r2, #0
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	bf18      	it	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	0692      	lsls	r2, r2, #26
 80074ea:	d42d      	bmi.n	8007548 <_printf_common+0xb4>
 80074ec:	4649      	mov	r1, r9
 80074ee:	4638      	mov	r0, r7
 80074f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074f4:	47c0      	blx	r8
 80074f6:	3001      	adds	r0, #1
 80074f8:	d020      	beq.n	800753c <_printf_common+0xa8>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	68e5      	ldr	r5, [r4, #12]
 80074fe:	f003 0306 	and.w	r3, r3, #6
 8007502:	2b04      	cmp	r3, #4
 8007504:	bf18      	it	ne
 8007506:	2500      	movne	r5, #0
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	f04f 0600 	mov.w	r6, #0
 800750e:	68a3      	ldr	r3, [r4, #8]
 8007510:	bf08      	it	eq
 8007512:	1aad      	subeq	r5, r5, r2
 8007514:	6922      	ldr	r2, [r4, #16]
 8007516:	bf08      	it	eq
 8007518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800751c:	4293      	cmp	r3, r2
 800751e:	bfc4      	itt	gt
 8007520:	1a9b      	subgt	r3, r3, r2
 8007522:	18ed      	addgt	r5, r5, r3
 8007524:	341a      	adds	r4, #26
 8007526:	42b5      	cmp	r5, r6
 8007528:	d11a      	bne.n	8007560 <_printf_common+0xcc>
 800752a:	2000      	movs	r0, #0
 800752c:	e008      	b.n	8007540 <_printf_common+0xac>
 800752e:	2301      	movs	r3, #1
 8007530:	4652      	mov	r2, sl
 8007532:	4649      	mov	r1, r9
 8007534:	4638      	mov	r0, r7
 8007536:	47c0      	blx	r8
 8007538:	3001      	adds	r0, #1
 800753a:	d103      	bne.n	8007544 <_printf_common+0xb0>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007544:	3501      	adds	r5, #1
 8007546:	e7c4      	b.n	80074d2 <_printf_common+0x3e>
 8007548:	2030      	movs	r0, #48	; 0x30
 800754a:	18e1      	adds	r1, r4, r3
 800754c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007556:	4422      	add	r2, r4
 8007558:	3302      	adds	r3, #2
 800755a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800755e:	e7c5      	b.n	80074ec <_printf_common+0x58>
 8007560:	2301      	movs	r3, #1
 8007562:	4622      	mov	r2, r4
 8007564:	4649      	mov	r1, r9
 8007566:	4638      	mov	r0, r7
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d0e6      	beq.n	800753c <_printf_common+0xa8>
 800756e:	3601      	adds	r6, #1
 8007570:	e7d9      	b.n	8007526 <_printf_common+0x92>
	...

08007574 <_printf_i>:
 8007574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	7e0f      	ldrb	r7, [r1, #24]
 800757a:	4691      	mov	r9, r2
 800757c:	2f78      	cmp	r7, #120	; 0x78
 800757e:	4680      	mov	r8, r0
 8007580:	460c      	mov	r4, r1
 8007582:	469a      	mov	sl, r3
 8007584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800758a:	d807      	bhi.n	800759c <_printf_i+0x28>
 800758c:	2f62      	cmp	r7, #98	; 0x62
 800758e:	d80a      	bhi.n	80075a6 <_printf_i+0x32>
 8007590:	2f00      	cmp	r7, #0
 8007592:	f000 80d9 	beq.w	8007748 <_printf_i+0x1d4>
 8007596:	2f58      	cmp	r7, #88	; 0x58
 8007598:	f000 80a4 	beq.w	80076e4 <_printf_i+0x170>
 800759c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075a4:	e03a      	b.n	800761c <_printf_i+0xa8>
 80075a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075aa:	2b15      	cmp	r3, #21
 80075ac:	d8f6      	bhi.n	800759c <_printf_i+0x28>
 80075ae:	a101      	add	r1, pc, #4	; (adr r1, 80075b4 <_printf_i+0x40>)
 80075b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b4:	0800760d 	.word	0x0800760d
 80075b8:	08007621 	.word	0x08007621
 80075bc:	0800759d 	.word	0x0800759d
 80075c0:	0800759d 	.word	0x0800759d
 80075c4:	0800759d 	.word	0x0800759d
 80075c8:	0800759d 	.word	0x0800759d
 80075cc:	08007621 	.word	0x08007621
 80075d0:	0800759d 	.word	0x0800759d
 80075d4:	0800759d 	.word	0x0800759d
 80075d8:	0800759d 	.word	0x0800759d
 80075dc:	0800759d 	.word	0x0800759d
 80075e0:	0800772f 	.word	0x0800772f
 80075e4:	08007651 	.word	0x08007651
 80075e8:	08007711 	.word	0x08007711
 80075ec:	0800759d 	.word	0x0800759d
 80075f0:	0800759d 	.word	0x0800759d
 80075f4:	08007751 	.word	0x08007751
 80075f8:	0800759d 	.word	0x0800759d
 80075fc:	08007651 	.word	0x08007651
 8007600:	0800759d 	.word	0x0800759d
 8007604:	0800759d 	.word	0x0800759d
 8007608:	08007719 	.word	0x08007719
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	602a      	str	r2, [r5, #0]
 8007614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800761c:	2301      	movs	r3, #1
 800761e:	e0a4      	b.n	800776a <_printf_i+0x1f6>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	6829      	ldr	r1, [r5, #0]
 8007624:	0606      	lsls	r6, r0, #24
 8007626:	f101 0304 	add.w	r3, r1, #4
 800762a:	d50a      	bpl.n	8007642 <_printf_i+0xce>
 800762c:	680e      	ldr	r6, [r1, #0]
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	2e00      	cmp	r6, #0
 8007632:	da03      	bge.n	800763c <_printf_i+0xc8>
 8007634:	232d      	movs	r3, #45	; 0x2d
 8007636:	4276      	negs	r6, r6
 8007638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800763c:	230a      	movs	r3, #10
 800763e:	485e      	ldr	r0, [pc, #376]	; (80077b8 <_printf_i+0x244>)
 8007640:	e019      	b.n	8007676 <_printf_i+0x102>
 8007642:	680e      	ldr	r6, [r1, #0]
 8007644:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	bf18      	it	ne
 800764c:	b236      	sxthne	r6, r6
 800764e:	e7ef      	b.n	8007630 <_printf_i+0xbc>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	1d19      	adds	r1, r3, #4
 8007656:	6029      	str	r1, [r5, #0]
 8007658:	0601      	lsls	r1, r0, #24
 800765a:	d501      	bpl.n	8007660 <_printf_i+0xec>
 800765c:	681e      	ldr	r6, [r3, #0]
 800765e:	e002      	b.n	8007666 <_printf_i+0xf2>
 8007660:	0646      	lsls	r6, r0, #25
 8007662:	d5fb      	bpl.n	800765c <_printf_i+0xe8>
 8007664:	881e      	ldrh	r6, [r3, #0]
 8007666:	2f6f      	cmp	r7, #111	; 0x6f
 8007668:	bf0c      	ite	eq
 800766a:	2308      	moveq	r3, #8
 800766c:	230a      	movne	r3, #10
 800766e:	4852      	ldr	r0, [pc, #328]	; (80077b8 <_printf_i+0x244>)
 8007670:	2100      	movs	r1, #0
 8007672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007676:	6865      	ldr	r5, [r4, #4]
 8007678:	2d00      	cmp	r5, #0
 800767a:	bfa8      	it	ge
 800767c:	6821      	ldrge	r1, [r4, #0]
 800767e:	60a5      	str	r5, [r4, #8]
 8007680:	bfa4      	itt	ge
 8007682:	f021 0104 	bicge.w	r1, r1, #4
 8007686:	6021      	strge	r1, [r4, #0]
 8007688:	b90e      	cbnz	r6, 800768e <_printf_i+0x11a>
 800768a:	2d00      	cmp	r5, #0
 800768c:	d04d      	beq.n	800772a <_printf_i+0x1b6>
 800768e:	4615      	mov	r5, r2
 8007690:	fbb6 f1f3 	udiv	r1, r6, r3
 8007694:	fb03 6711 	mls	r7, r3, r1, r6
 8007698:	5dc7      	ldrb	r7, [r0, r7]
 800769a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800769e:	4637      	mov	r7, r6
 80076a0:	42bb      	cmp	r3, r7
 80076a2:	460e      	mov	r6, r1
 80076a4:	d9f4      	bls.n	8007690 <_printf_i+0x11c>
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d10b      	bne.n	80076c2 <_printf_i+0x14e>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	07de      	lsls	r6, r3, #31
 80076ae:	d508      	bpl.n	80076c2 <_printf_i+0x14e>
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	6861      	ldr	r1, [r4, #4]
 80076b4:	4299      	cmp	r1, r3
 80076b6:	bfde      	ittt	le
 80076b8:	2330      	movle	r3, #48	; 0x30
 80076ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076c2:	1b52      	subs	r2, r2, r5
 80076c4:	6122      	str	r2, [r4, #16]
 80076c6:	464b      	mov	r3, r9
 80076c8:	4621      	mov	r1, r4
 80076ca:	4640      	mov	r0, r8
 80076cc:	f8cd a000 	str.w	sl, [sp]
 80076d0:	aa03      	add	r2, sp, #12
 80076d2:	f7ff fedf 	bl	8007494 <_printf_common>
 80076d6:	3001      	adds	r0, #1
 80076d8:	d14c      	bne.n	8007774 <_printf_i+0x200>
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	b004      	add	sp, #16
 80076e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e4:	4834      	ldr	r0, [pc, #208]	; (80077b8 <_printf_i+0x244>)
 80076e6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076ea:	6829      	ldr	r1, [r5, #0]
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80076f2:	6029      	str	r1, [r5, #0]
 80076f4:	061d      	lsls	r5, r3, #24
 80076f6:	d514      	bpl.n	8007722 <_printf_i+0x1ae>
 80076f8:	07df      	lsls	r7, r3, #31
 80076fa:	bf44      	itt	mi
 80076fc:	f043 0320 	orrmi.w	r3, r3, #32
 8007700:	6023      	strmi	r3, [r4, #0]
 8007702:	b91e      	cbnz	r6, 800770c <_printf_i+0x198>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	f023 0320 	bic.w	r3, r3, #32
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	2310      	movs	r3, #16
 800770e:	e7af      	b.n	8007670 <_printf_i+0xfc>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	f043 0320 	orr.w	r3, r3, #32
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	2378      	movs	r3, #120	; 0x78
 800771a:	4828      	ldr	r0, [pc, #160]	; (80077bc <_printf_i+0x248>)
 800771c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007720:	e7e3      	b.n	80076ea <_printf_i+0x176>
 8007722:	0659      	lsls	r1, r3, #25
 8007724:	bf48      	it	mi
 8007726:	b2b6      	uxthmi	r6, r6
 8007728:	e7e6      	b.n	80076f8 <_printf_i+0x184>
 800772a:	4615      	mov	r5, r2
 800772c:	e7bb      	b.n	80076a6 <_printf_i+0x132>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	6826      	ldr	r6, [r4, #0]
 8007732:	1d18      	adds	r0, r3, #4
 8007734:	6961      	ldr	r1, [r4, #20]
 8007736:	6028      	str	r0, [r5, #0]
 8007738:	0635      	lsls	r5, r6, #24
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	d501      	bpl.n	8007742 <_printf_i+0x1ce>
 800773e:	6019      	str	r1, [r3, #0]
 8007740:	e002      	b.n	8007748 <_printf_i+0x1d4>
 8007742:	0670      	lsls	r0, r6, #25
 8007744:	d5fb      	bpl.n	800773e <_printf_i+0x1ca>
 8007746:	8019      	strh	r1, [r3, #0]
 8007748:	2300      	movs	r3, #0
 800774a:	4615      	mov	r5, r2
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	e7ba      	b.n	80076c6 <_printf_i+0x152>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	2100      	movs	r1, #0
 8007754:	1d1a      	adds	r2, r3, #4
 8007756:	602a      	str	r2, [r5, #0]
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	4628      	mov	r0, r5
 800775e:	f000 f82f 	bl	80077c0 <memchr>
 8007762:	b108      	cbz	r0, 8007768 <_printf_i+0x1f4>
 8007764:	1b40      	subs	r0, r0, r5
 8007766:	6060      	str	r0, [r4, #4]
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	2300      	movs	r3, #0
 800776e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007772:	e7a8      	b.n	80076c6 <_printf_i+0x152>
 8007774:	462a      	mov	r2, r5
 8007776:	4649      	mov	r1, r9
 8007778:	4640      	mov	r0, r8
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	47d0      	blx	sl
 800777e:	3001      	adds	r0, #1
 8007780:	d0ab      	beq.n	80076da <_printf_i+0x166>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	079b      	lsls	r3, r3, #30
 8007786:	d413      	bmi.n	80077b0 <_printf_i+0x23c>
 8007788:	68e0      	ldr	r0, [r4, #12]
 800778a:	9b03      	ldr	r3, [sp, #12]
 800778c:	4298      	cmp	r0, r3
 800778e:	bfb8      	it	lt
 8007790:	4618      	movlt	r0, r3
 8007792:	e7a4      	b.n	80076de <_printf_i+0x16a>
 8007794:	2301      	movs	r3, #1
 8007796:	4632      	mov	r2, r6
 8007798:	4649      	mov	r1, r9
 800779a:	4640      	mov	r0, r8
 800779c:	47d0      	blx	sl
 800779e:	3001      	adds	r0, #1
 80077a0:	d09b      	beq.n	80076da <_printf_i+0x166>
 80077a2:	3501      	adds	r5, #1
 80077a4:	68e3      	ldr	r3, [r4, #12]
 80077a6:	9903      	ldr	r1, [sp, #12]
 80077a8:	1a5b      	subs	r3, r3, r1
 80077aa:	42ab      	cmp	r3, r5
 80077ac:	dcf2      	bgt.n	8007794 <_printf_i+0x220>
 80077ae:	e7eb      	b.n	8007788 <_printf_i+0x214>
 80077b0:	2500      	movs	r5, #0
 80077b2:	f104 0619 	add.w	r6, r4, #25
 80077b6:	e7f5      	b.n	80077a4 <_printf_i+0x230>
 80077b8:	08007bf9 	.word	0x08007bf9
 80077bc:	08007c0a 	.word	0x08007c0a

080077c0 <memchr>:
 80077c0:	4603      	mov	r3, r0
 80077c2:	b510      	push	{r4, lr}
 80077c4:	b2c9      	uxtb	r1, r1
 80077c6:	4402      	add	r2, r0
 80077c8:	4293      	cmp	r3, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	d101      	bne.n	80077d2 <memchr+0x12>
 80077ce:	2000      	movs	r0, #0
 80077d0:	e003      	b.n	80077da <memchr+0x1a>
 80077d2:	7804      	ldrb	r4, [r0, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	428c      	cmp	r4, r1
 80077d8:	d1f6      	bne.n	80077c8 <memchr+0x8>
 80077da:	bd10      	pop	{r4, pc}

080077dc <memmove>:
 80077dc:	4288      	cmp	r0, r1
 80077de:	b510      	push	{r4, lr}
 80077e0:	eb01 0402 	add.w	r4, r1, r2
 80077e4:	d902      	bls.n	80077ec <memmove+0x10>
 80077e6:	4284      	cmp	r4, r0
 80077e8:	4623      	mov	r3, r4
 80077ea:	d807      	bhi.n	80077fc <memmove+0x20>
 80077ec:	1e43      	subs	r3, r0, #1
 80077ee:	42a1      	cmp	r1, r4
 80077f0:	d008      	beq.n	8007804 <memmove+0x28>
 80077f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077fa:	e7f8      	b.n	80077ee <memmove+0x12>
 80077fc:	4601      	mov	r1, r0
 80077fe:	4402      	add	r2, r0
 8007800:	428a      	cmp	r2, r1
 8007802:	d100      	bne.n	8007806 <memmove+0x2a>
 8007804:	bd10      	pop	{r4, pc}
 8007806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800780a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800780e:	e7f7      	b.n	8007800 <memmove+0x24>

08007810 <_realloc_r>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4680      	mov	r8, r0
 8007816:	4614      	mov	r4, r2
 8007818:	460e      	mov	r6, r1
 800781a:	b921      	cbnz	r1, 8007826 <_realloc_r+0x16>
 800781c:	4611      	mov	r1, r2
 800781e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	f7ff bc29 	b.w	8007078 <_malloc_r>
 8007826:	b92a      	cbnz	r2, 8007834 <_realloc_r+0x24>
 8007828:	f7ff fbbe 	bl	8006fa8 <_free_r>
 800782c:	4625      	mov	r5, r4
 800782e:	4628      	mov	r0, r5
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	f000 f81b 	bl	800786e <_malloc_usable_size_r>
 8007838:	4284      	cmp	r4, r0
 800783a:	4607      	mov	r7, r0
 800783c:	d802      	bhi.n	8007844 <_realloc_r+0x34>
 800783e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007842:	d812      	bhi.n	800786a <_realloc_r+0x5a>
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fc16 	bl	8007078 <_malloc_r>
 800784c:	4605      	mov	r5, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	d0ed      	beq.n	800782e <_realloc_r+0x1e>
 8007852:	42bc      	cmp	r4, r7
 8007854:	4622      	mov	r2, r4
 8007856:	4631      	mov	r1, r6
 8007858:	bf28      	it	cs
 800785a:	463a      	movcs	r2, r7
 800785c:	f7ff fb8e 	bl	8006f7c <memcpy>
 8007860:	4631      	mov	r1, r6
 8007862:	4640      	mov	r0, r8
 8007864:	f7ff fba0 	bl	8006fa8 <_free_r>
 8007868:	e7e1      	b.n	800782e <_realloc_r+0x1e>
 800786a:	4635      	mov	r5, r6
 800786c:	e7df      	b.n	800782e <_realloc_r+0x1e>

0800786e <_malloc_usable_size_r>:
 800786e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007872:	1f18      	subs	r0, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	bfbc      	itt	lt
 8007878:	580b      	ldrlt	r3, [r1, r0]
 800787a:	18c0      	addlt	r0, r0, r3
 800787c:	4770      	bx	lr
	...

08007880 <_init>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr

0800788c <_fini>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr
