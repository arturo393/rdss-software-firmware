
VLADR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f4  080052f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052fc  080052fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08005374  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005374  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011095  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002770  00000000  00000000  0003112d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ca  00000000  00000000  000352a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010972  00000000  00000000  0004cc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0b0  00000000  00000000  0005d5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  000eb6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080051e0 	.word	0x080051e0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080051e0 	.word	0x080051e0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_uldivmod>:
 8000218:	2b00      	cmp	r3, #0
 800021a:	d111      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 800021c:	2a00      	cmp	r2, #0
 800021e:	d10f      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 8000220:	2900      	cmp	r1, #0
 8000222:	d100      	bne.n	8000226 <__aeabi_uldivmod+0xe>
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <__aeabi_uldivmod+0x16>
 8000228:	2100      	movs	r1, #0
 800022a:	43c9      	mvns	r1, r1
 800022c:	0008      	movs	r0, r1
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <__aeabi_uldivmod+0x24>)
 8000232:	a102      	add	r1, pc, #8	; (adr r1, 800023c <__aeabi_uldivmod+0x24>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	ffffffd9 	.word	0xffffffd9
 8000240:	b403      	push	{r0, r1}
 8000242:	4668      	mov	r0, sp
 8000244:	b501      	push	{r0, lr}
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	469e      	mov	lr, r3
 8000250:	b002      	add	sp, #8
 8000252:	bc0c      	pop	{r2, r3}
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__udivmoddi4>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	0004      	movs	r4, r0
 8000266:	000d      	movs	r5, r1
 8000268:	4692      	mov	sl, r2
 800026a:	4699      	mov	r9, r3
 800026c:	b083      	sub	sp, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d830      	bhi.n	80002d4 <__udivmoddi4+0x7c>
 8000272:	d02d      	beq.n	80002d0 <__udivmoddi4+0x78>
 8000274:	4649      	mov	r1, r9
 8000276:	4650      	mov	r0, sl
 8000278:	f000 f8ba 	bl	80003f0 <__clzdi2>
 800027c:	0029      	movs	r1, r5
 800027e:	0006      	movs	r6, r0
 8000280:	0020      	movs	r0, r4
 8000282:	f000 f8b5 	bl	80003f0 <__clzdi2>
 8000286:	1a33      	subs	r3, r6, r0
 8000288:	4698      	mov	r8, r3
 800028a:	3b20      	subs	r3, #32
 800028c:	469b      	mov	fp, r3
 800028e:	d433      	bmi.n	80002f8 <__udivmoddi4+0xa0>
 8000290:	465a      	mov	r2, fp
 8000292:	4653      	mov	r3, sl
 8000294:	4093      	lsls	r3, r2
 8000296:	4642      	mov	r2, r8
 8000298:	001f      	movs	r7, r3
 800029a:	4653      	mov	r3, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001e      	movs	r6, r3
 80002a0:	42af      	cmp	r7, r5
 80002a2:	d83a      	bhi.n	800031a <__udivmoddi4+0xc2>
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d100      	bne.n	80002aa <__udivmoddi4+0x52>
 80002a8:	e078      	b.n	800039c <__udivmoddi4+0x144>
 80002aa:	465b      	mov	r3, fp
 80002ac:	1ba4      	subs	r4, r4, r6
 80002ae:	41bd      	sbcs	r5, r7
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da00      	bge.n	80002b6 <__udivmoddi4+0x5e>
 80002b4:	e075      	b.n	80003a2 <__udivmoddi4+0x14a>
 80002b6:	2200      	movs	r2, #0
 80002b8:	2300      	movs	r3, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2301      	movs	r3, #1
 80002c0:	465a      	mov	r2, fp
 80002c2:	4093      	lsls	r3, r2
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4642      	mov	r2, r8
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	e028      	b.n	8000322 <__udivmoddi4+0xca>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	d9cf      	bls.n	8000274 <__udivmoddi4+0x1c>
 80002d4:	2200      	movs	r2, #0
 80002d6:	2300      	movs	r3, #0
 80002d8:	9200      	str	r2, [sp, #0]
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <__udivmoddi4+0x8e>
 80002e2:	601c      	str	r4, [r3, #0]
 80002e4:	605d      	str	r5, [r3, #4]
 80002e6:	9800      	ldr	r0, [sp, #0]
 80002e8:	9901      	ldr	r1, [sp, #4]
 80002ea:	b003      	add	sp, #12
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4642      	mov	r2, r8
 80002fa:	2320      	movs	r3, #32
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	4652      	mov	r2, sl
 8000300:	40da      	lsrs	r2, r3
 8000302:	4641      	mov	r1, r8
 8000304:	0013      	movs	r3, r2
 8000306:	464a      	mov	r2, r9
 8000308:	408a      	lsls	r2, r1
 800030a:	0017      	movs	r7, r2
 800030c:	4642      	mov	r2, r8
 800030e:	431f      	orrs	r7, r3
 8000310:	4653      	mov	r3, sl
 8000312:	4093      	lsls	r3, r2
 8000314:	001e      	movs	r6, r3
 8000316:	42af      	cmp	r7, r5
 8000318:	d9c4      	bls.n	80002a4 <__udivmoddi4+0x4c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	4643      	mov	r3, r8
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0d9      	beq.n	80002dc <__udivmoddi4+0x84>
 8000328:	07fb      	lsls	r3, r7, #31
 800032a:	0872      	lsrs	r2, r6, #1
 800032c:	431a      	orrs	r2, r3
 800032e:	4646      	mov	r6, r8
 8000330:	087b      	lsrs	r3, r7, #1
 8000332:	e00e      	b.n	8000352 <__udivmoddi4+0xfa>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d101      	bne.n	800033c <__udivmoddi4+0xe4>
 8000338:	42a2      	cmp	r2, r4
 800033a:	d80c      	bhi.n	8000356 <__udivmoddi4+0xfe>
 800033c:	1aa4      	subs	r4, r4, r2
 800033e:	419d      	sbcs	r5, r3
 8000340:	2001      	movs	r0, #1
 8000342:	1924      	adds	r4, r4, r4
 8000344:	416d      	adcs	r5, r5
 8000346:	2100      	movs	r1, #0
 8000348:	3e01      	subs	r6, #1
 800034a:	1824      	adds	r4, r4, r0
 800034c:	414d      	adcs	r5, r1
 800034e:	2e00      	cmp	r6, #0
 8000350:	d006      	beq.n	8000360 <__udivmoddi4+0x108>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d9ee      	bls.n	8000334 <__udivmoddi4+0xdc>
 8000356:	3e01      	subs	r6, #1
 8000358:	1924      	adds	r4, r4, r4
 800035a:	416d      	adcs	r5, r5
 800035c:	2e00      	cmp	r6, #0
 800035e:	d1f8      	bne.n	8000352 <__udivmoddi4+0xfa>
 8000360:	9800      	ldr	r0, [sp, #0]
 8000362:	9901      	ldr	r1, [sp, #4]
 8000364:	465b      	mov	r3, fp
 8000366:	1900      	adds	r0, r0, r4
 8000368:	4169      	adcs	r1, r5
 800036a:	2b00      	cmp	r3, #0
 800036c:	db24      	blt.n	80003b8 <__udivmoddi4+0x160>
 800036e:	002b      	movs	r3, r5
 8000370:	465a      	mov	r2, fp
 8000372:	4644      	mov	r4, r8
 8000374:	40d3      	lsrs	r3, r2
 8000376:	002a      	movs	r2, r5
 8000378:	40e2      	lsrs	r2, r4
 800037a:	001c      	movs	r4, r3
 800037c:	465b      	mov	r3, fp
 800037e:	0015      	movs	r5, r2
 8000380:	2b00      	cmp	r3, #0
 8000382:	db2a      	blt.n	80003da <__udivmoddi4+0x182>
 8000384:	0026      	movs	r6, r4
 8000386:	409e      	lsls	r6, r3
 8000388:	0033      	movs	r3, r6
 800038a:	0026      	movs	r6, r4
 800038c:	4647      	mov	r7, r8
 800038e:	40be      	lsls	r6, r7
 8000390:	0032      	movs	r2, r6
 8000392:	1a80      	subs	r0, r0, r2
 8000394:	4199      	sbcs	r1, r3
 8000396:	9000      	str	r0, [sp, #0]
 8000398:	9101      	str	r1, [sp, #4]
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x84>
 800039c:	42a3      	cmp	r3, r4
 800039e:	d8bc      	bhi.n	800031a <__udivmoddi4+0xc2>
 80003a0:	e783      	b.n	80002aa <__udivmoddi4+0x52>
 80003a2:	4642      	mov	r2, r8
 80003a4:	2320      	movs	r3, #32
 80003a6:	2100      	movs	r1, #0
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	2200      	movs	r2, #0
 80003ac:	9100      	str	r1, [sp, #0]
 80003ae:	9201      	str	r2, [sp, #4]
 80003b0:	2201      	movs	r2, #1
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	e786      	b.n	80002c6 <__udivmoddi4+0x6e>
 80003b8:	4642      	mov	r2, r8
 80003ba:	2320      	movs	r3, #32
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	002a      	movs	r2, r5
 80003c0:	4646      	mov	r6, r8
 80003c2:	409a      	lsls	r2, r3
 80003c4:	0023      	movs	r3, r4
 80003c6:	40f3      	lsrs	r3, r6
 80003c8:	4644      	mov	r4, r8
 80003ca:	4313      	orrs	r3, r2
 80003cc:	002a      	movs	r2, r5
 80003ce:	40e2      	lsrs	r2, r4
 80003d0:	001c      	movs	r4, r3
 80003d2:	465b      	mov	r3, fp
 80003d4:	0015      	movs	r5, r2
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	dad4      	bge.n	8000384 <__udivmoddi4+0x12c>
 80003da:	4642      	mov	r2, r8
 80003dc:	002f      	movs	r7, r5
 80003de:	2320      	movs	r3, #32
 80003e0:	0026      	movs	r6, r4
 80003e2:	4097      	lsls	r7, r2
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	40de      	lsrs	r6, r3
 80003e8:	003b      	movs	r3, r7
 80003ea:	4333      	orrs	r3, r6
 80003ec:	e7cd      	b.n	800038a <__udivmoddi4+0x132>
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__clzdi2>:
 80003f0:	b510      	push	{r4, lr}
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d103      	bne.n	80003fe <__clzdi2+0xe>
 80003f6:	f000 f807 	bl	8000408 <__clzsi2>
 80003fa:	3020      	adds	r0, #32
 80003fc:	e002      	b.n	8000404 <__clzdi2+0x14>
 80003fe:	0008      	movs	r0, r1
 8000400:	f000 f802 	bl	8000408 <__clzsi2>
 8000404:	bd10      	pop	{r4, pc}
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzsi2>:
 8000408:	211c      	movs	r1, #28
 800040a:	2301      	movs	r3, #1
 800040c:	041b      	lsls	r3, r3, #16
 800040e:	4298      	cmp	r0, r3
 8000410:	d301      	bcc.n	8000416 <__clzsi2+0xe>
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	3910      	subs	r1, #16
 8000416:	0a1b      	lsrs	r3, r3, #8
 8000418:	4298      	cmp	r0, r3
 800041a:	d301      	bcc.n	8000420 <__clzsi2+0x18>
 800041c:	0a00      	lsrs	r0, r0, #8
 800041e:	3908      	subs	r1, #8
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	4298      	cmp	r0, r3
 8000424:	d301      	bcc.n	800042a <__clzsi2+0x22>
 8000426:	0900      	lsrs	r0, r0, #4
 8000428:	3904      	subs	r1, #4
 800042a:	a202      	add	r2, pc, #8	; (adr r2, 8000434 <__clzsi2+0x2c>)
 800042c:	5c10      	ldrb	r0, [r2, r0]
 800042e:	1840      	adds	r0, r0, r1
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	02020304 	.word	0x02020304
 8000438:	01010101 	.word	0x01010101
	...

08000444 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000444:	b5b0      	push	{r4, r5, r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	000a      	movs	r2, r1
 800044e:	1cfb      	adds	r3, r7, #3
 8000450:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;

	SX1278_hw_SPICommand(module->hw, addr);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	1cfb      	adds	r3, r7, #3
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f000 fa56 	bl	800090e <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	250f      	movs	r5, #15
 8000468:	197c      	adds	r4, r7, r5
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fa71 	bl	8000952 <SX1278_hw_SPIReadByte>
 8000470:	0003      	movs	r3, r0
 8000472:	7023      	strb	r3, [r4, #0]
	SX1278_hw_SetNSS(module->hw, 1);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2101      	movs	r1, #1
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fa31 	bl	80008e2 <SX1278_hw_SetNSS>

	return tmp;
 8000480:	197b      	adds	r3, r7, r5
 8000482:	781b      	ldrb	r3, [r3, #0]
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b004      	add	sp, #16
 800048a:	bdb0      	pop	{r4, r5, r7, pc}

0800048c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	0008      	movs	r0, r1
 8000496:	0011      	movs	r1, r2
 8000498:	1cfb      	adds	r3, r7, #3
 800049a:	1c02      	adds	r2, r0, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	1cbb      	adds	r3, r7, #2
 80004a0:	1c0a      	adds	r2, r1, #0
 80004a2:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(module->hw, 0);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fa19 	bl	80008e2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	1cfb      	adds	r3, r7, #3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	4252      	negs	r2, r2
 80004bc:	4313      	orrs	r3, r2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	0019      	movs	r1, r3
 80004c2:	f000 fa24 	bl	800090e <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	1cbb      	adds	r3, r7, #2
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	0019      	movs	r1, r3
 80004d0:	0010      	movs	r0, r2
 80004d2:	f000 fa1c 	bl	800090e <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2101      	movs	r1, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fa00 	bl	80008e2 <SX1278_hw_SetNSS>
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b002      	add	sp, #8
 80004e8:	bd80      	pop	{r7, pc}

080004ea <SX1278_clearLoRaIrq>:

void sx1278_entry_LoRA_mode(SX1278_t *module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
}

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	22ff      	movs	r2, #255	; 0xff
 80004f6:	2112      	movs	r1, #18
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff ffc7 	bl	800048c <SX1278_SPIWrite>
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <readRegister>:
	temp = 127 - (temp >> 1);	//127:Max RSSI
	return temp;
}
////////////////////////////////////////////FUNCIONES NUEVAS

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	000a      	movs	r2, r1
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <readRegister+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f002 f806 	bl	800252e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f001 f92c 	bl	8001780 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000528:	1cf9      	adds	r1, r7, #3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	2201      	movs	r2, #1
 8000530:	f002 fefe 	bl	8003330 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000534:	240f      	movs	r4, #15
 8000536:	1939      	adds	r1, r7, r4
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	2201      	movs	r2, #1
 800053e:	f003 f84f 	bl	80035e0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 f91c 	bl	8001780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <readRegister+0x58>)
 800054a:	2201      	movs	r2, #1
 800054c:	2101      	movs	r1, #1
 800054e:	0018      	movs	r0, r3
 8000550:	f001 ffed 	bl	800252e <HAL_GPIO_WritePin>
	return rec;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	781b      	ldrb	r3, [r3, #0]
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b005      	add	sp, #20
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	50000400 	.word	0x50000400

08000564 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b08e      	sub	sp, #56	; 0x38
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	0008      	movs	r0, r1
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	0019      	movs	r1, r3
 8000572:	240b      	movs	r4, #11
 8000574:	193b      	adds	r3, r7, r4
 8000576:	1c02      	adds	r2, r0, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	230a      	movs	r3, #10
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	1c0a      	adds	r2, r1, #0
 8000580:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 8000582:	2510      	movs	r5, #16
 8000584:	197b      	adds	r3, r7, r5
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	3304      	adds	r3, #4
 800058c:	221a      	movs	r2, #26
 800058e:	2100      	movs	r1, #0
 8000590:	0018      	movs	r0, r3
 8000592:	f004 f8d3 	bl	800473c <memset>
	tx_data[0] = address | 0x00;
 8000596:	197b      	adds	r3, r7, r5
 8000598:	193a      	adds	r2, r7, r4
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	701a      	strb	r2, [r3, #0]
	int j = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80005a2:	2301      	movs	r3, #1
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
 80005a6:	e00f      	b.n	80005c8 <writeRegister+0x64>
		tx_data[i] = cmd[j++];
 80005a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	637a      	str	r2, [r7, #52]	; 0x34
 80005ae:	001a      	movs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	2310      	movs	r3, #16
 80005b8:	18fa      	adds	r2, r7, r3
 80005ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	1c0a      	adds	r2, r1, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 80005c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c4:	3301      	adds	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
 80005c8:	240a      	movs	r4, #10
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dde9      	ble.n	80005a8 <writeRegister+0x44>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <writeRegister+0xb4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 ffa7 	bl	800252e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	23fa      	movs	r3, #250	; 0xfa
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	2110      	movs	r1, #16
 80005f0:	1879      	adds	r1, r7, r1
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f002 fe9c 	bl	8003330 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <writeRegister+0xb4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 ff95 	bl	800252e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f001 f8bb 	bl	8001780 <HAL_Delay>
	return cmd;  // pull the pin high
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	0018      	movs	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	b00e      	add	sp, #56	; 0x38
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	50000400 	.word	0x50000400

0800061c <setRFFrequency>:
void setRFFrequency(SX1278_t *module) {
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	0b51      	lsrs	r1, r2, #13
 800062c:	04dd      	lsls	r5, r3, #19
 800062e:	430d      	orrs	r5, r1
 8000630:	04d4      	lsls	r4, r2, #19
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <setRFFrequency+0x94>)
 8000634:	2300      	movs	r3, #0
 8000636:	0020      	movs	r0, r4
 8000638:	0029      	movs	r1, r5
 800063a:	f7ff fded 	bl	8000218 <__aeabi_uldivmod>
 800063e:	0002      	movs	r2, r0
 8000640:	000b      	movs	r3, r1
 8000642:	623a      	str	r2, [r7, #32]
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	6a3a      	ldr	r2, [r7, #32]
 800064c:	0c12      	lsrs	r2, r2, #16
 800064e:	60ba      	str	r2, [r7, #8]
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	431a      	orrs	r2, r3
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	0c1b      	lsrs	r3, r3, #16
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	7a3a      	ldrb	r2, [r7, #8]
 800065e:	210c      	movs	r1, #12
 8000660:	2010      	movs	r0, #16
 8000662:	180b      	adds	r3, r1, r0
 8000664:	19db      	adds	r3, r3, r7
 8000666:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	061b      	lsls	r3, r3, #24
 800066c:	6a3a      	ldr	r2, [r7, #32]
 800066e:	0a12      	lsrs	r2, r2, #8
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	603a      	str	r2, [r7, #0]
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	783a      	ldrb	r2, [r7, #0]
 8000680:	180b      	adds	r3, r1, r0
 8000682:	19db      	adds	r3, r3, r7
 8000684:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000686:	6a3a      	ldr	r2, [r7, #32]
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	1c13      	adds	r3, r2, #0
 800068c:	b2da      	uxtb	r2, r3
 800068e:	0004      	movs	r4, r0
 8000690:	180b      	adds	r3, r1, r0
 8000692:	19db      	adds	r3, r3, r7
 8000694:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800069a:	190b      	adds	r3, r1, r4
 800069c:	19da      	adds	r2, r3, r7
 800069e:	2303      	movs	r3, #3
 80006a0:	2106      	movs	r1, #6
 80006a2:	f7ff ff5f 	bl	8000564 <writeRegister>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b00a      	add	sp, #40	; 0x28
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	01e84800 	.word	0x01e84800

080006b4 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3310      	adds	r3, #16
 80006c4:	001a      	movs	r2, r3
 80006c6:	2301      	movs	r3, #1
 80006c8:	2109      	movs	r1, #9
 80006ca:	f7ff ff4b 	bl	8000564 <writeRegister>
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3316      	adds	r3, #22
 80006e6:	001a      	movs	r2, r3
 80006e8:	2301      	movs	r3, #1
 80006ea:	2139      	movs	r1, #57	; 0x39
 80006ec:	f7ff ff3a 	bl	8000564 <writeRegister>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3317      	adds	r3, #23
 8000708:	001a      	movs	r2, r3
 800070a:	2301      	movs	r3, #1
 800070c:	210b      	movs	r1, #11
 800070e:	f7ff ff29 	bl	8000564 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}

0800071a <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	331a      	adds	r3, #26
 800072a:	001a      	movs	r2, r3
 800072c:	2301      	movs	r3, #1
 800072e:	211f      	movs	r1, #31
 8000730:	f7ff ff18 	bl	8000564 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->PreambleLengthMsb),
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	331c      	adds	r3, #28
 800073c:	001a      	movs	r2, r3
 800073e:	2301      	movs	r3, #1
 8000740:	2120      	movs	r1, #32
 8000742:	f7ff ff0f 	bl	8000564 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->PreambleLengthLsb),
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	331d      	adds	r3, #29
 800074e:	001a      	movs	r2, r3
 8000750:	2301      	movs	r3, #1
 8000752:	2121      	movs	r1, #33	; 0x21
 8000754:	f7ff ff06 	bl	8000564 <writeRegister>
			1);
	module->readBytes = 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	224d      	movs	r2, #77	; 0x4d
 800075c:	2100      	movs	r1, #0
 800075e:	5499      	strb	r1, [r3, r2]
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <updateLoraLowFreq>:
void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	000a      	movs	r2, r1
 8000772:	1cfb      	adds	r3, r7, #3
 8000774:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000776:	1cfb      	adds	r3, r7, #3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2278      	movs	r2, #120	; 0x78
 800077c:	4252      	negs	r2, r2
 800077e:	4313      	orrs	r3, r2
 8000780:	b2da      	uxtb	r2, r3
 8000782:	210f      	movs	r1, #15
 8000784:	187b      	adds	r3, r7, r1
 8000786:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800078c:	187a      	adds	r2, r7, r1
 800078e:	2301      	movs	r3, #1
 8000790:	2101      	movs	r1, #1
 8000792:	f7ff fee7 	bl	8000564 <writeRegister>
	module->operatingMode = mode;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	1cfa      	adds	r2, r7, #3
 800079a:	2123      	movs	r1, #35	; 0x23
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	545a      	strb	r2, [r3, r1]
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b004      	add	sp, #16
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007b4:	2131      	movs	r1, #49	; 0x31
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fea6 	bl	8000508 <readRegister>
 80007bc:	0003      	movs	r3, r0
 80007be:	001a      	movs	r2, r3
 80007c0:	210f      	movs	r1, #15
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2207      	movs	r2, #7
 80007cc:	4393      	bics	r3, r2
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2205      	movs	r2, #5
 80007da:	4313      	orrs	r3, r2
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80007e6:	000c      	movs	r4, r1
 80007e8:	187a      	adds	r2, r7, r1
 80007ea:	2301      	movs	r3, #1
 80007ec:	2131      	movs	r1, #49	; 0x31
 80007ee:	f7ff feb9 	bl	8000564 <writeRegister>
	tmp = 0x0C;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	220c      	movs	r2, #12
 80007f8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80007fe:	187a      	adds	r2, r7, r1
 8000800:	2301      	movs	r3, #1
 8000802:	2137      	movs	r1, #55	; 0x37
 8000804:	f7ff feae 	bl	8000564 <writeRegister>
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b005      	add	sp, #20
 800080e:	bd90      	pop	{r4, r7, pc}

08000810 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 8000818:	210f      	movs	r1, #15
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	b2da      	uxtb	r2, r3
 8000828:	187b      	adds	r3, r7, r1
 800082a:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7cdb      	ldrb	r3, [r3, #19]
 8000830:	18db      	adds	r3, r3, r3
 8000832:	b2da      	uxtb	r2, r3
 8000834:	000c      	movs	r4, r1
 8000836:	193b      	adds	r3, r7, r4
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	18d3      	adds	r3, r2, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	193b      	adds	r3, r7, r4
 8000840:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	5c9a      	ldrb	r2, [r3, r2]
 8000848:	193b      	adds	r3, r7, r4
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	193b      	adds	r3, r7, r4
 8000852:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000858:	193a      	adds	r2, r7, r4
 800085a:	2301      	movs	r3, #1
 800085c:	211d      	movs	r1, #29
 800085e:	f7ff fe81 	bl	8000564 <writeRegister>

	cmd = module->LoRa_SF << 4;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7c5b      	ldrb	r3, [r3, #17]
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	b2da      	uxtb	r2, r3
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7d1b      	ldrb	r3, [r3, #20]
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	b2da      	uxtb	r2, r3
 8000878:	187b      	adds	r3, r7, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	187b      	adds	r3, r7, r1
 8000882:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7eda      	ldrb	r2, [r3, #27]
 8000888:	187b      	adds	r3, r7, r1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	b2da      	uxtb	r2, r3
 8000890:	187b      	adds	r3, r7, r1
 8000892:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000898:	187a      	adds	r2, r7, r1
 800089a:	2301      	movs	r3, #1
 800089c:	211e      	movs	r1, #30
 800089e:	f7ff fe61 	bl	8000564 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3319      	adds	r3, #25
 80008aa:	001a      	movs	r2, r3
 80008ac:	2301      	movs	r3, #1
 80008ae:	2126      	movs	r1, #38	; 0x26
 80008b0:	f7ff fe58 	bl	8000564 <writeRegister>
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b005      	add	sp, #20
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <clearIrqFlags>:

void clearIrqFlags(SX1278_t *module) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 80008c4:	210f      	movs	r1, #15
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	22ff      	movs	r2, #255	; 0xff
 80008ca:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80008d0:	187a      	adds	r2, r7, r1
 80008d2:	2301      	movs	r3, #1
 80008d4:	2112      	movs	r1, #18
 80008d6:	f7ff fe45 	bl	8000564 <writeRegister>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <SX1278_hw_SetNSS>:
__weak void SX1278_hw_init(SX1278_hw_t *hw) {
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69d8      	ldr	r0, [r3, #28]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	b299      	uxth	r1, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	425a      	negs	r2, r3
 80008fc:	4153      	adcs	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	001a      	movs	r2, r3
 8000902:	f001 fe14 	bl	800252e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}

0800090e <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	000a      	movs	r2, r1
 8000918:	1cfb      	adds	r3, r7, #3
 800091a:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(hw, 0);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2100      	movs	r1, #0
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ffde 	bl	80008e2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a18      	ldr	r0, [r3, #32]
 800092a:	23fa      	movs	r3, #250	; 0xfa
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	1cf9      	adds	r1, r7, #3
 8000930:	2201      	movs	r2, #1
 8000932:	f002 fcfd 	bl	8003330 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a1b      	ldr	r3, [r3, #32]
 800093c:	0018      	movs	r0, r3
 800093e:	f003 f96d 	bl	8003c1c <HAL_SPI_GetState>
 8000942:	0003      	movs	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d1f7      	bne.n	8000938 <SX1278_hw_SPICommand+0x2a>
		;
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}

08000952 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000952:	b5b0      	push	{r4, r5, r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af02      	add	r7, sp, #8
 8000958:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800095a:	240f      	movs	r4, #15
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8000962:	250e      	movs	r5, #14
 8000964:	197b      	adds	r3, r7, r5
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(hw, 0);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ffb7 	bl	80008e2 <SX1278_hw_SetNSS>
	//HAL_SPI_Transmit (hw->spi, &address, 1, 100);  // send address
//	HAL_SPI_Receive (hw->spi, &rxByte, 1, 100);  // receive 1 bytes data
	// TODO Agregar timeout!
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6a18      	ldr	r0, [r3, #32]
 8000978:	197a      	adds	r2, r7, r5
 800097a:	1939      	adds	r1, r7, r4
 800097c:	23fa      	movs	r3, #250	; 0xfa
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	f002 ff78 	bl	8003878 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	0018      	movs	r0, r3
 8000990:	f003 f944 	bl	8003c1c <HAL_SPI_GetState>
 8000994:	0003      	movs	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d1f7      	bne.n	800098a <SX1278_hw_SPIReadByte+0x38>
		;
	return rxByte;
 800099a:	230e      	movs	r3, #14
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	781b      	ldrb	r3, [r3, #0]
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bdb0      	pop	{r4, r5, r7, pc}

080009a8 <SX1278_hw_GetDIO0>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	0019      	movs	r1, r3
 80009bc:	0010      	movs	r0, r2
 80009be:	f001 fd99 	bl	80024f4 <HAL_GPIO_ReadPin>
 80009c2:	0003      	movs	r3, r0
 80009c4:	3b01      	subs	r3, #1
 80009c6:	425a      	negs	r2, r3
 80009c8:	4153      	adcs	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <setBaseParameters>:
	return rec;
}

SX1278_t *lora_ptr;

void setBaseParameters(SX1278_t *loraRx) {
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 80009dc:	2017      	movs	r0, #23
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 80009e4:	2416      	movs	r4, #22
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 80009ec:	2515      	movs	r5, #21
 80009ee:	197b      	adds	r3, r7, r5
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 80009f4:	2614      	movs	r6, #20
 80009f6:	19bb      	adds	r3, r7, r6
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
	////////////////////////////////////////
	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 80009fc:	2313      	movs	r3, #19
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	701a      	strb	r2, [r3, #0]
	uint8_t rxDoneMask = 0x00 | (MASK_ENABLE << 6);
 8000a04:	2212      	movs	r2, #18
 8000a06:	18bb      	adds	r3, r7, r2
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000a0c:	2111      	movs	r1, #17
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2220      	movs	r2, #32
 8000a12:	701a      	strb	r2, [r3, #0]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000a14:	2210      	movs	r2, #16
 8000a16:	18bb      	adds	r3, r7, r2
 8000a18:	2210      	movs	r2, #16
 8000a1a:	701a      	strb	r2, [r3, #0]
	uint8_t txDoneMask = 0x00 | (MASK_DISABLE << 3);
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	18bb      	adds	r3, r7, r2
 8000a20:	2208      	movs	r2, #8
 8000a22:	701a      	strb	r2, [r3, #0]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000a24:	210e      	movs	r1, #14
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2204      	movs	r2, #4
 8000a2a:	701a      	strb	r2, [r3, #0]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000a2c:	220d      	movs	r2, #13
 8000a2e:	18bb      	adds	r3, r7, r2
 8000a30:	2202      	movs	r2, #2
 8000a32:	701a      	strb	r2, [r3, #0]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000a34:	210c      	movs	r1, #12
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]

	loraRx->frequency = DOWNLINK_FREQ;
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <setBaseParameters+0x154>)
 8000a40:	2300      	movs	r3, #0
 8000a42:	608a      	str	r2, [r1, #8]
 8000a44:	60cb      	str	r3, [r1, #12]
	loraRx->power = SX1278_POWER_17DBM;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	22fc      	movs	r2, #252	; 0xfc
 8000a4a:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	220a      	movs	r2, #10
 8000a50:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2206      	movs	r2, #6
 8000a56:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2201      	movs	r2, #1
 8000a62:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2234      	movs	r2, #52	; 0x34
 8000a68:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	220b      	movs	r2, #11
 8000a6e:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2223      	movs	r2, #35	; 0x23
 8000a74:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2204      	movs	r2, #4
 8000a7a:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2208      	movs	r2, #8
 8000a80:	769a      	strb	r2, [r3, #26]
	loraRx->PreambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	771a      	strb	r2, [r3, #28]
	loraRx->PreambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000a8e:	183a      	adds	r2, r7, r0
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	197b      	adds	r3, r7, r5
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	19bb      	adds	r3, r7, r6
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	77da      	strb	r2, [r3, #31]
	loraRx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000aae:	2313      	movs	r3, #19
 8000ab0:	18fa      	adds	r2, r7, r3
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	2111      	movs	r1, #17
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b2d9      	uxtb	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2220      	movs	r2, #32
 8000acc:	5499      	strb	r1, [r3, r2]
	loraRx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	5c9a      	ldrb	r2, [r3, r2]
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	18f9      	adds	r1, r7, r3
 8000ad8:	230f      	movs	r3, #15
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	7809      	ldrb	r1, [r1, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	b2d9      	uxtb	r1, r3
 8000ae4:	230e      	movs	r3, #14
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	430b      	orrs	r3, r1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2220      	movs	r2, #32
 8000af6:	5499      	strb	r1, [r3, r2]
	loraRx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2220      	movs	r2, #32
 8000afc:	5c9a      	ldrb	r2, [r3, r2]
 8000afe:	230d      	movs	r3, #13
 8000b00:	18f9      	adds	r1, r7, r3
 8000b02:	230c      	movs	r3, #12
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	7809      	ldrb	r1, [r1, #0]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b2d9      	uxtb	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2220      	movs	r2, #32
 8000b16:	5499      	strb	r1, [r3, r2]
	loraRx->fhssValue = HOPS_PERIOD;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	779a      	strb	r2, [r3, #30]
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b007      	add	sp, #28
 8000b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	08f0d180 	.word	0x08f0d180

08000b2c <save>:

void save(SX1278_t *module) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fe15 	bl	8000768 <updateLoraLowFreq>
	HAL_Delay(15);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 fe1e 	bl	8001780 <HAL_Delay>
	//updateLoraLowFreq(module, STANDBY);
	setRFFrequency(module);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fd68 	bl	800061c <setRFFrequency>
	setLORAWAN(module);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fdc1 	bl	80006d6 <setLORAWAN>
	setOutputPower(module);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fdac 	bl	80006b4 <setOutputPower>
	setOvercurrentProtect(module);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fdca 	bl	80006f8 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2301      	movs	r3, #1
 8000b70:	210c      	movs	r1, #12
 8000b72:	f7ff fcf7 	bl	8000564 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7c5b      	ldrb	r3, [r3, #17]
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d10b      	bne.n	8000b96 <save+0x6a>
		//SFactor=6
		module->headerMode = IMPLICIT;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2221      	movs	r2, #33	; 0x21
 8000b82:	2101      	movs	r1, #1
 8000b84:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fe0a 	bl	80007a8 <setDetectionParameters>
 8000b94:	e006      	b.n	8000ba4 <save+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2221      	movs	r2, #33	; 0x21
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff fe32 	bl	8000810 <setReModemConfig>
	setPreambleParameters(module);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fdb3 	bl	800071a <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	331e      	adds	r3, #30
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2124      	movs	r1, #36	; 0x24
 8000bc2:	f7ff fccf 	bl	8000564 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	331f      	adds	r3, #31
 8000bce:	001a      	movs	r2, r3
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	f7ff fcc6 	bl	8000564 <writeRegister>
	clearIrqFlags(module);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fe6e 	bl	80008bc <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3320      	adds	r3, #32
 8000be8:	001a      	movs	r2, r3
 8000bea:	2301      	movs	r3, #1
 8000bec:	2111      	movs	r1, #17
 8000bee:	f7ff fcb9 	bl	8000564 <writeRegister>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000bfa:	b590      	push	{r4, r7, lr}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
//	writeRegister(module->spi, LR_RegFifoTxBaseAddr, 0x80, 1);///
	uint8_t cmd = module->packetLength;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7d5a      	ldrb	r2, [r3, #21]
 8000c06:	210d      	movs	r1, #13
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000c10:	187a      	adds	r2, r7, r1
 8000c12:	2301      	movs	r3, #1
 8000c14:	2122      	movs	r1, #34	; 0x22
 8000c16:	f7ff fca5 	bl	8000564 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c1e:	210f      	movs	r1, #15
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff fc71 	bl	8000508 <readRegister>
 8000c26:	0003      	movs	r3, r0
 8000c28:	001a      	movs	r2, r3
 8000c2a:	210c      	movs	r1, #12
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	2301      	movs	r3, #1
 8000c38:	210d      	movs	r1, #13
 8000c3a:	f7ff fc93 	bl	8000564 <writeRegister>
	uint8_t DireccionBaseTx = readRegister(module->spi, LR_RegFifoRxBaseAddr);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c42:	220f      	movs	r2, #15
 8000c44:	18bc      	adds	r4, r7, r2
 8000c46:	210f      	movs	r1, #15
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fc5d 	bl	8000508 <readRegister>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	7023      	strb	r3, [r4, #0]
	uint8_t DireccionPtr = readRegister(module->spi, LR_RegFifoAddrPtr);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c56:	220e      	movs	r2, #14
 8000c58:	18bc      	adds	r4, r7, r2
 8000c5a:	210d      	movs	r1, #13
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fc53 	bl	8000508 <readRegister>
 8000c62:	0003      	movs	r3, r0
 8000c64:	7023      	strb	r3, [r4, #0]
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c6a:	2122      	movs	r1, #34	; 0x22
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fc4b 	bl	8000508 <readRegister>
 8000c72:	0003      	movs	r3, r0
 8000c74:	001a      	movs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	755a      	strb	r2, [r3, #21]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b005      	add	sp, #20
 8000c80:	bd90      	pop	{r4, r7, pc}
	...

08000c84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b0c1      	sub	sp, #260	; 0x104
 8000c88:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c8a:	f000 fcf3 	bl	8001674 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c8e:	f000 f90b 	bl	8000ea8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c92:	f000 f9b7 	bl	8001004 <MX_GPIO_Init>
	//MX_I2C1_Init();
	MX_SPI1_Init();
 8000c96:	f000 fa53 	bl	8001140 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000c9a:	f000 fc97 	bl	80015cc <MX_USART1_UART_Init>
	//MX_USART2_UART_Init();
	//MX_USART3_UART_Init();
	MX_ADC1_Init();
 8000c9e:	f000 f94b 	bl	8000f38 <MX_ADC1_Init>
	 HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	 }
	 */
	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraRx;
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <main+0x20c>)
 8000ca4:	2018      	movs	r0, #24
 8000ca6:	183a      	adds	r2, r7, r0
 8000ca8:	601a      	str	r2, [r3, #0]

	int messageCounter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	22f4      	movs	r2, #244	; 0xf4
 8000cae:	18ba      	adds	r2, r7, r2
 8000cb0:	6013      	str	r3, [r2, #0]

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 8000cb2:	21cc      	movs	r1, #204	; 0xcc
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a77      	ldr	r2, [pc, #476]	; (8000e94 <main+0x210>)
 8000cb8:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	4a75      	ldr	r2, [pc, #468]	; (8000e98 <main+0x214>)
 8000cc4:	61da      	str	r2, [r3, #28]
	lora_hw.nss.pin = LORA_NSS_Pin;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	619a      	str	r2, [r3, #24]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	4a72      	ldr	r2, [pc, #456]	; (8000e98 <main+0x214>)
 8000cd0:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	187a      	adds	r2, r7, r1
 8000cdc:	601a      	str	r2, [r3, #0]
	loraRx.spi = &hspi1;
 8000cde:	0004      	movs	r4, r0
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	4a6e      	ldr	r2, [pc, #440]	; (8000e9c <main+0x218>)
 8000ce4:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <main+0x214>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2101      	movs	r1, #1
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fc1e 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <main+0x214>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f001 fc18 	bl	800252e <HAL_GPIO_WritePin>
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <main+0x218>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fc00 	bl	8000508 <readRegister>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2223      	movs	r2, #35	; 0x23
 8000d10:	5499      	strb	r1, [r3, r2]
	loraRx.status = UNKNOW;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2224      	movs	r2, #36	; 0x24
 8000d16:	2100      	movs	r1, #0
 8000d18:	5499      	strb	r1, [r3, r2]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (loraRx.status == UNKNOW) {
 8000d1a:	2418      	movs	r4, #24
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2224      	movs	r2, #36	; 0x24
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <main+0xc2>
			printf("Configuring Master LoRa module\r\n");
 8000d26:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <main+0x21c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f003 fd81 	bl	8004830 <puts>
			setBaseParameters(&loraRx);
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fe4f 	bl	80009d4 <setBaseParameters>
			save(&loraRx);
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fef7 	bl	8000b2c <save>
			loraRx.status = RX_READY;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2224      	movs	r2, #36	; 0x24
 8000d42:	2102      	movs	r1, #2
 8000d44:	5499      	strb	r1, [r3, r2]
		}
		SX1278_t *module;
		module = &loraRx;
 8000d46:	2418      	movs	r4, #24
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	22f0      	movs	r2, #240	; 0xf0
 8000d4c:	18ba      	adds	r2, r7, r2
 8000d4e:	6013      	str	r3, [r2, #0]
		if (loraRx.status == RX_READY) {
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2224      	movs	r2, #36	; 0x24
 8000d54:	5c9b      	ldrb	r3, [r3, r2]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d10a      	bne.n	8000d70 <main+0xec>

			memset(loraRx.rxBuffer, 0, SX1278_MAX_PACKET);
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	3325      	adds	r3, #37	; 0x25
 8000d5e:	2214      	movs	r2, #20
 8000d60:	2100      	movs	r1, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f003 fcea 	bl	800473c <memset>
			setRxParameters(&loraRx);
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff45 	bl	8000bfa <setRxParameters>
		}
		updateLoraLowFreq(module, RX_SINGLE);
 8000d70:	24f0      	movs	r4, #240	; 0xf0
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2106      	movs	r1, #6
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fcf5 	bl	8000768 <updateLoraLowFreq>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fe0f 	bl	80009a8 <SX1278_hw_GetDIO0>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d076      	beq.n	8000e7c <main+0x1f8>
			unsigned char addr;
			unsigned char packet_size;

			memset(loraRx.rxBuffer, 0, SX1278_MAX_PACKET);
 8000d8e:	2318      	movs	r3, #24
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	3325      	adds	r3, #37	; 0x25
 8000d94:	2214      	movs	r2, #20
 8000d96:	2100      	movs	r1, #0
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f003 fccf 	bl	800473c <memset>

			addr = readRegister(module->spi, LR_RegFifoRxCurrentaddr); //last packet addr
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000da4:	2110      	movs	r1, #16
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff fbae 	bl	8000508 <readRegister>
 8000dac:	0003      	movs	r3, r0
 8000dae:	001a      	movs	r2, r3
 8000db0:	2117      	movs	r1, #23
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	701a      	strb	r2, [r3, #0]
			writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RxBaseAddr -> FiFoAddrPtr
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000dbc:	187a      	adds	r2, r7, r1
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	210d      	movs	r1, #13
 8000dc2:	f7ff fbcf 	bl	8000564 <writeRegister>

			if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	7c5b      	ldrb	r3, [r3, #17]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d106      	bne.n	8000dde <main+0x15a>
				packet_size = module->packetLength;
 8000dd0:	23ff      	movs	r3, #255	; 0xff
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	7d52      	ldrb	r2, [r2, #21]
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e00a      	b.n	8000df4 <main+0x170>
			} else {
				packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000dde:	23ff      	movs	r3, #255	; 0xff
 8000de0:	18fc      	adds	r4, r7, r3
 8000de2:	23f0      	movs	r3, #240	; 0xf0
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2113      	movs	r1, #19
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fb2a 	bl	8000444 <SX1278_SPIRead>
 8000df0:	0003      	movs	r3, r0
 8000df2:	7023      	strb	r3, [r4, #0]
			}
			uint8_t buff[20] = { 0 };
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <main+0x220>)
 8000df6:	3301      	adds	r3, #1
 8000df8:	33ff      	adds	r3, #255	; 0xff
 8000dfa:	19db      	adds	r3, r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2210      	movs	r2, #16
 8000e04:	2100      	movs	r1, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 fc98 	bl	800473c <memset>
			for (int i = 0; i < packet_size; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	22f8      	movs	r2, #248	; 0xf8
 8000e10:	18ba      	adds	r2, r7, r2
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e018      	b.n	8000e48 <main+0x1c4>

				buff[i] = readRegister(module->spi, LR_RegFifoRxBaseAddr);
 8000e16:	23f0      	movs	r3, #240	; 0xf0
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e1e:	210f      	movs	r1, #15
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fb71 	bl	8000508 <readRegister>
 8000e26:	0003      	movs	r3, r0
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <main+0x220>)
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	33ff      	adds	r3, #255	; 0xff
 8000e30:	19da      	adds	r2, r3, r7
 8000e32:	20f8      	movs	r0, #248	; 0xf8
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	1c0a      	adds	r2, r1, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < packet_size; i++) {
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	183a      	adds	r2, r7, r0
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	21ff      	movs	r1, #255	; 0xff
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	22f8      	movs	r2, #248	; 0xf8
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbde      	blt.n	8000e16 <main+0x192>
			}

			module->readBytes = packet_size;
 8000e58:	20f0      	movs	r0, #240	; 0xf0
 8000e5a:	183b      	adds	r3, r7, r0
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	187a      	adds	r2, r7, r1
 8000e60:	214d      	movs	r1, #77	; 0x4d
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	545a      	strb	r2, [r3, r1]
			SX1278_clearLoRaIrq(module);
 8000e66:	0004      	movs	r4, r0
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fb3c 	bl	80004ea <SX1278_clearLoRaIrq>

			return module->readBytes;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	224d      	movs	r2, #77	; 0x4d
 8000e78:	5c9b      	ldrb	r3, [r3, r2]
 8000e7a:	e005      	b.n	8000e88 <main+0x204>
			printf("Transmission: OK\r\n");
			break;
		}
		//module->operatingMode = readMode(module);

		HAL_Delay(500);
 8000e7c:	23fa      	movs	r3, #250	; 0xfa
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fc7d 	bl	8001780 <HAL_Delay>
	while (1) {
 8000e86:	e748      	b.n	8000d1a <main+0x96>
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b041      	add	sp, #260	; 0x104
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	200000f0 	.word	0x200000f0
 8000e94:	50000800 	.word	0x50000800
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	200000f4 	.word	0x200000f4
 8000ea0:	080051f8 	.word	0x080051f8
 8000ea4:	ffffff00 	.word	0xffffff00

08000ea8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b093      	sub	sp, #76	; 0x4c
 8000eac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000eae:	2414      	movs	r4, #20
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2334      	movs	r3, #52	; 0x34
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f003 fc3f 	bl	800473c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f003 fc38 	bl	800473c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fb49 	bl	8002568 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fb81 	bl	8002600 <HAL_RCC_OscConfig>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x5e>
		Error_Handler();
 8000f02:	f000 f917 	bl	8001134 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2100      	movs	r1, #0
 8000f22:	0018      	movs	r0, r3
 8000f24:	f001 fe7c 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x88>
		Error_Handler();
 8000f2c:	f000 f902 	bl	8001134 <Error_Handler>
	}
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b013      	add	sp, #76	; 0x4c
 8000f36:	bd90      	pop	{r4, r7, pc}

08000f38 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	0018      	movs	r0, r3
 8000f42:	230c      	movs	r3, #12
 8000f44:	001a      	movs	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	f003 fbf8 	bl	800473c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <MX_ADC1_Init+0xc8>)
 8000f50:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	05d2      	lsls	r2, r2, #23
 8000f58:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000f98:	222c      	movs	r2, #44	; 0x2c
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fb2:	223c      	movs	r2, #60	; 0x3c
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fcff 	bl	80019c4 <HAL_ADC_Init>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x96>
		Error_Handler();
 8000fca:	f000 f8b3 	bl	8001134 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fe0:	1d3a      	adds	r2, r7, #4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_ADC1_Init+0xc4>)
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fe94 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xbc>
		Error_Handler();
 8000ff0:	f000 f8a0 	bl	8001134 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b004      	add	sp, #16
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	40012400 	.word	0x40012400

08001004 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800100a:	240c      	movs	r4, #12
 800100c:	193b      	adds	r3, r7, r4
 800100e:	0018      	movs	r0, r3
 8001010:	2314      	movs	r3, #20
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f003 fb91 	bl	800473c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <MX_GPIO_Init+0x124>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MX_GPIO_Init+0x124>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <MX_GPIO_Init+0x124>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <MX_GPIO_Init+0x124>)
 8001034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_GPIO_Init+0x124>)
 8001038:	2102      	movs	r1, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_GPIO_Init+0x124>)
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <MX_GPIO_Init+0x124>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b36      	ldr	r3, [pc, #216]	; (8001128 <MX_GPIO_Init+0x124>)
 8001050:	2104      	movs	r1, #4
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <MX_GPIO_Init+0x124>)
 8001058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105a:	2204      	movs	r2, #4
 800105c:	4013      	ands	r3, r2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_GPIO_Init+0x128>)
 8001064:	2200      	movs	r2, #0
 8001066:	2103      	movs	r1, #3
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa60 	bl	800252e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	0059      	lsls	r1, r3, #1
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	2200      	movs	r2, #0
 8001078:	0018      	movs	r0, r3
 800107a:	f001 fa58 	bl	800252e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	0018      	movs	r0, r3
 8001086:	f001 fa52 	bl	800252e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2203      	movs	r2, #3
 800108e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2201      	movs	r2, #1
 8001094:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <MX_GPIO_Init+0x128>)
 80010a6:	0019      	movs	r1, r3
 80010a8:	0010      	movs	r0, r2
 80010aa:	f001 f8bf 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2204      	movs	r2, #4
 80010b2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <MX_GPIO_Init+0x128>)
 80010c4:	0019      	movs	r1, r3
 80010c6:	0010      	movs	r0, r2
 80010c8:	f001 f8b0 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 80010cc:	0021      	movs	r1, r4
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0052      	lsls	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	000c      	movs	r4, r1
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2201      	movs	r2, #1
 80010dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	193a      	adds	r2, r7, r4
 80010ec:	23a0      	movs	r3, #160	; 0xa0
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	0011      	movs	r1, r2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 f89a 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 80010f8:	0021      	movs	r1, r4
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2240      	movs	r2, #64	; 0x40
 80010fe:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2201      	movs	r2, #1
 8001104:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001112:	187b      	adds	r3, r7, r1
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <MX_GPIO_Init+0x12c>)
 8001116:	0019      	movs	r1, r3
 8001118:	0010      	movs	r0, r2
 800111a:	f001 f887 	bl	800222c <HAL_GPIO_Init>

}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b009      	add	sp, #36	; 0x24
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40021000 	.word	0x40021000
 800112c:	50000400 	.word	0x50000400
 8001130:	50000800 	.word	0x50000800

08001134 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN SPI1_Init 1 */

	  /* USER CODE END SPI1_Init 1 */
	  /* SPI1 parameter configuration*/
	  hspi1.Instance = SPI1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_SPI1_Init+0x74>)
 800114c:	2282      	movs	r2, #130	; 0x82
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_SPI1_Init+0x74>)
 800115a:	22e0      	movs	r2, #224	; 0xe0
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_SPI1_Init+0x74>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001176:	2218      	movs	r2, #24
 8001178:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 7;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_SPI1_Init+0x74>)
 800118e:	2207      	movs	r2, #7
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_SPI1_Init+0x74>)
 800119a:	2208      	movs	r2, #8
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <MX_SPI1_Init+0x74>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f002 f80d 	bl	80031c0 <HAL_SPI_Init>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f7ff ffc3 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000f4 	.word	0x200000f4
 80011b8:	40013000 	.word	0x40013000

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x44>)
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_MspInit+0x44>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x44>)
 80011dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_MspInit+0x44>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0549      	lsls	r1, r1, #21
 80011e4:	430a      	orrs	r2, r1
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_MspInit+0x44>)
 80011ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	055b      	lsls	r3, r3, #21
 80011f0:	4013      	ands	r3, r2
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b091      	sub	sp, #68	; 0x44
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	232c      	movs	r3, #44	; 0x2c
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	0018      	movs	r0, r3
 8001212:	2314      	movs	r3, #20
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f003 fa90 	bl	800473c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	2414      	movs	r4, #20
 800121e:	193b      	adds	r3, r7, r4
 8001220:	0018      	movs	r0, r3
 8001222:	2318      	movs	r3, #24
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f003 fa88 	bl	800473c <memset>
  if(hadc->Instance==ADC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <HAL_ADC_MspInit+0xb0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d139      	bne.n	80012aa <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001236:	193b      	adds	r3, r7, r4
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	01d2      	lsls	r2, r2, #7
 800123c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800123e:	193b      	adds	r3, r7, r4
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	193b      	adds	r3, r7, r4
 8001246:	0018      	movs	r0, r3
 8001248:	f001 fe94 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001250:	f7ff ff70 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 8001256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	0349      	lsls	r1, r1, #13
 800125e:	430a      	orrs	r2, r1
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	035b      	lsls	r3, r3, #13
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 8001272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	; 0x34
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_ADC_MspInit+0xb4>)
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001288:	212c      	movs	r1, #44	; 0x2c
 800128a:	187b      	adds	r3, r7, r1
 800128c:	22ff      	movs	r2, #255	; 0xff
 800128e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2203      	movs	r2, #3
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	187a      	adds	r2, r7, r1
 800129e:	23a0      	movs	r3, #160	; 0xa0
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 ffc1 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b011      	add	sp, #68	; 0x44
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40012400 	.word	0x40012400
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08b      	sub	sp, #44	; 0x2c
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	2414      	movs	r4, #20
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f003 fa34 	bl	800473c <memset>
  if(hspi->Instance==SPI1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2c      	ldr	r2, [pc, #176]	; (800138c <HAL_SPI_MspInit+0xd0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d152      	bne.n	8001384 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 80012e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0149      	lsls	r1, r1, #5
 80012e8:	430a      	orrs	r2, r1
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 80012ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	015b      	lsls	r3, r3, #5
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 8001318:	2102      	movs	r1, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_SPI_MspInit+0xd4>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800132a:	193b      	adds	r3, r7, r4
 800132c:	22c0      	movs	r2, #192	; 0xc0
 800132e:	0152      	lsls	r2, r2, #5
 8001330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	193b      	adds	r3, r7, r4
 8001334:	2202      	movs	r2, #2
 8001336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	193b      	adds	r3, r7, r4
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	193a      	adds	r2, r7, r4
 800134c:	23a0      	movs	r3, #160	; 0xa0
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f000 ff6a 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 8001358:	0021      	movs	r1, r4
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2208      	movs	r2, #8
 800135e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2202      	movs	r2, #2
 8001364:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8001378:	187b      	adds	r3, r7, r1
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_SPI_MspInit+0xd8>)
 800137c:	0019      	movs	r1, r3
 800137e:	0010      	movs	r0, r2
 8001380:	f000 ff54 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b00b      	add	sp, #44	; 0x2c
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	40013000 	.word	0x40013000
 8001390:	40021000 	.word	0x40021000
 8001394:	50000400 	.word	0x50000400

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b091      	sub	sp, #68	; 0x44
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	232c      	movs	r3, #44	; 0x2c
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	0018      	movs	r0, r3
 80013a6:	2314      	movs	r3, #20
 80013a8:	001a      	movs	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	f003 f9c6 	bl	800473c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b0:	2414      	movs	r4, #20
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	0018      	movs	r0, r3
 80013b6:	2318      	movs	r3, #24
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f003 f9be 	bl	800473c <memset>
  if(huart->Instance==USART1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_UART_MspInit+0xbc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d13f      	bne.n	800144a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013d0:	193b      	adds	r3, r7, r4
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fdcb 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013e2:	f7ff fea7 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_UART_MspInit+0xc0>)
 80013e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_UART_MspInit+0xc0>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	01c9      	lsls	r1, r1, #7
 80013f0:	430a      	orrs	r2, r1
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0xc0>)
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0xc0>)
 8001404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_UART_MspInit+0xc0>)
 8001408:	2101      	movs	r1, #1
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_UART_MspInit+0xc0>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2201      	movs	r2, #1
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 800141a:	212c      	movs	r1, #44	; 0x2c
 800141c:	187b      	adds	r3, r7, r1
 800141e:	22c0      	movs	r2, #192	; 0xc0
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2202      	movs	r2, #2
 8001428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2201      	movs	r2, #1
 800143a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	187a      	adds	r2, r7, r1
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f000 fef1 	bl	800222c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b011      	add	sp, #68	; 0x44
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f962 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e00a      	b.n	80014b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800149c:	e000      	b.n	80014a0 <_read+0x16>
 800149e:	bf00      	nop
 80014a0:	0001      	movs	r1, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	60ba      	str	r2, [r7, #8]
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbf0      	blt.n	800149c <_read+0x12>
	}

return len;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b006      	add	sp, #24
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e009      	b.n	80014ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	e000      	b.n	80014e4 <_write+0x20>
 80014e2:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbf1      	blt.n	80014d6 <_write+0x12>
	}
	return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b006      	add	sp, #24
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_close>:

int _close(int file)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	return -1;
 8001504:	2301      	movs	r3, #1
 8001506:	425b      	negs	r3, r3
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	0192      	lsls	r2, r2, #6
 8001520:	605a      	str	r2, [r3, #4]
	return 0;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <_isatty>:

int _isatty(int file)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
	return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	18d3      	adds	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f003 f8b0 	bl	80046e8 <__errno>
 8001588:	0003      	movs	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	2301      	movs	r3, #1
 8001590:	425b      	negs	r3, r3
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	18d2      	adds	r2, r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b006      	add	sp, #24
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20002000 	.word	0x20002000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20000158 	.word	0x20000158
 80015bc:	20000200 	.word	0x20000200

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;


void MX_USART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART1_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d8:	22e1      	movs	r2, #225	; 0xe1
 80015da:	0252      	lsls	r2, r2, #9
 80015dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 8001604:	0018      	movs	r0, r3
 8001606:	f002 fce9 	bl	8003fdc <HAL_UART_Init>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f7ff fd91 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000015c 	.word	0x2000015c
 800161c:	40013800 	.word	0x40013800

08001620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001622:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001624:	f7ff ffcc 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 800162a:	490d      	ldr	r1, [pc, #52]	; (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001640:	4c0a      	ldr	r4, [pc, #40]	; (800166c <LoopForever+0x16>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800164e:	f003 f851 	bl	80046f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001652:	f7ff fb17 	bl	8000c84 <main>

08001656 <LoopForever>:

LoopForever:
  b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   r0, =_estack
 8001658:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001664:	08005304 	.word	0x08005304
  ldr r2, =_sbss
 8001668:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800166c:	20000200 	.word	0x20000200

08001670 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_IRQHandler>
	...

08001674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x3c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Init+0x3c>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0049      	lsls	r1, r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168e:	2003      	movs	r0, #3
 8001690:	f000 f810 	bl	80016b4 <HAL_InitTick>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d003      	beq.n	80016a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e001      	b.n	80016a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fd8c 	bl	80011bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40022000 	.word	0x40022000

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_InitTick+0x88>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d02b      	beq.n	8001724 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_InitTick+0x8c>)
 80016ce:	681c      	ldr	r4, [r3, #0]
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_InitTick+0x88>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	0019      	movs	r1, r3
 80016d6:	23fa      	movs	r3, #250	; 0xfa
 80016d8:	0098      	lsls	r0, r3, #2
 80016da:	f7fe fd11 	bl	8000100 <__udivsi3>
 80016de:	0003      	movs	r3, r0
 80016e0:	0019      	movs	r1, r3
 80016e2:	0020      	movs	r0, r4
 80016e4:	f7fe fd0c 	bl	8000100 <__udivsi3>
 80016e8:	0003      	movs	r3, r0
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 fd91 	bl	8002212 <HAL_SYSTICK_Config>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d112      	bne.n	800171a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d80a      	bhi.n	8001710 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2301      	movs	r3, #1
 80016fe:	425b      	negs	r3, r3
 8001700:	2200      	movs	r2, #0
 8001702:	0018      	movs	r0, r3
 8001704:	f000 fd70 	bl	80021e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_InitTick+0x90>)
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e00d      	b.n	800172c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001710:	230f      	movs	r3, #15
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e008      	b.n	800172c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800171a:	230f      	movs	r3, #15
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e003      	b.n	800172c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b005      	add	sp, #20
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	20000008 	.word	0x20000008
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	001a      	movs	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	18d2      	adds	r2, r2, r3
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_IncTick+0x20>)
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	20000008 	.word	0x20000008
 8001768:	200001ec 	.word	0x200001ec

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	200001ec 	.word	0x200001ec

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff fff0 	bl	800176c <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	001a      	movs	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	189b      	adds	r3, r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	f7ff ffe0 	bl	800176c <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b004      	add	sp, #16
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000008 	.word	0x20000008

080017c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80017d8:	401a      	ands	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	fe3fffff 	.word	0xfe3fffff

080017f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	23e0      	movs	r3, #224	; 0xe0
 80017fe:	045b      	lsls	r3, r3, #17
 8001800:	4013      	ands	r3, r2
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}

0800180a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	2104      	movs	r1, #4
 800181e:	400a      	ands	r2, r1
 8001820:	2107      	movs	r1, #7
 8001822:	4091      	lsls	r1, r2
 8001824:	000a      	movs	r2, r1
 8001826:	43d2      	mvns	r2, r2
 8001828:	401a      	ands	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2104      	movs	r1, #4
 800182e:	400b      	ands	r3, r1
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4099      	lsls	r1, r3
 8001834:	000b      	movs	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bd80      	pop	{r7, pc}

08001844 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	2104      	movs	r1, #4
 8001856:	400a      	ands	r2, r1
 8001858:	2107      	movs	r1, #7
 800185a:	4091      	lsls	r1, r2
 800185c:	000a      	movs	r2, r1
 800185e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2104      	movs	r1, #4
 8001864:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001866:	40da      	lsrs	r2, r3
 8001868:	0013      	movs	r3, r2
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	211f      	movs	r1, #31
 8001886:	400a      	ands	r2, r1
 8001888:	210f      	movs	r1, #15
 800188a:	4091      	lsls	r1, r2
 800188c:	000a      	movs	r2, r1
 800188e:	43d2      	mvns	r2, r2
 8001890:	401a      	ands	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	210f      	movs	r1, #15
 8001898:	4019      	ands	r1, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	201f      	movs	r0, #31
 800189e:	4003      	ands	r3, r0
 80018a0:	4099      	lsls	r1, r3
 80018a2:	000b      	movs	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	035b      	lsls	r3, r3, #13
 80018c4:	0b5b      	lsrs	r3, r3, #13
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	0352      	lsls	r2, r2, #13
 80018e6:	0b52      	lsrs	r2, r2, #13
 80018e8:	43d2      	mvns	r2, r2
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b002      	add	sp, #8
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	0212      	lsls	r2, r2, #8
 800190c:	43d2      	mvns	r2, r2
 800190e:	401a      	ands	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	400b      	ands	r3, r1
 8001918:	4904      	ldr	r1, [pc, #16]	; (800192c <LL_ADC_SetChannelSamplingTime+0x34>)
 800191a:	400b      	ands	r3, r1
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b004      	add	sp, #16
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	07ffff00 	.word	0x07ffff00

08001930 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <LL_ADC_EnableInternalRegulator+0x24>)
 800193e:	4013      	ands	r3, r2
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0552      	lsls	r2, r2, #21
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	6fffffe8 	.word	0x6fffffe8

08001958 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	401a      	ands	r2, r3
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	429a      	cmp	r2, r3
 8001970:	d101      	bne.n	8001976 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}

08001980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <LL_ADC_IsEnabled+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_ADC_IsEnabled+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d101      	bne.n	80019ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	231f      	movs	r3, #31
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e17f      	b.n	8001cea <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fc05 	bl	8001204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2254      	movs	r2, #84	; 0x54
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ffa3 	bl	8001958 <LL_ADC_IsInternalRegulatorEnabled>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff ff88 	bl	8001930 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a20:	4bb4      	ldr	r3, [pc, #720]	; (8001cf4 <HAL_ADC_Init+0x330>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	49b4      	ldr	r1, [pc, #720]	; (8001cf8 <HAL_ADC_Init+0x334>)
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7fe fb6a 	bl	8000100 <__udivsi3>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff ff86 	bl	8001958 <LL_ADC_IsInternalRegulatorEnabled>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d10f      	bne.n	8001a70 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	2210      	movs	r2, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2201      	movs	r2, #1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff94 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	2210      	movs	r2, #16
 8001a84:	4013      	ands	r3, r2
 8001a86:	d000      	beq.n	8001a8a <HAL_ADC_Init+0xc6>
 8001a88:	e122      	b.n	8001cd0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d000      	beq.n	8001a92 <HAL_ADC_Init+0xce>
 8001a90:	e11e      	b.n	8001cd0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a99      	ldr	r2, [pc, #612]	; (8001cfc <HAL_ADC_Init+0x338>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff ff6a 	bl	8001980 <LL_ADC_IsEnabled>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d000      	beq.n	8001ab2 <HAL_ADC_Init+0xee>
 8001ab0:	e0ad      	b.n	8001c0e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7e1b      	ldrb	r3, [r3, #24]
 8001aba:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001abc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7e5b      	ldrb	r3, [r3, #25]
 8001ac2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ac4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7e9b      	ldrb	r3, [r3, #26]
 8001aca:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001acc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_ADC_Init+0x118>
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	e000      	b.n	8001ade <HAL_ADC_Init+0x11a>
 8001adc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ade:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ae4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da04      	bge.n	8001af8 <HAL_ADC_Init+0x134>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	e001      	b.n	8001afc <HAL_ADC_Init+0x138>
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001afc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	5c5b      	ldrb	r3, [r3, r1]
 8001b04:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b06:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d115      	bne.n	8001b44 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e9b      	ldrb	r3, [r3, #26]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	0252      	lsls	r2, r2, #9
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
 8001b2a:	e00b      	b.n	8001b44 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	2220      	movs	r2, #32
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b50:	23e0      	movs	r3, #224	; 0xe0
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_ADC_Init+0x33c>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	0f9b      	lsrs	r3, r3, #30
 8001b7e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b84:	4313      	orrs	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	223c      	movs	r2, #60	; 0x3c
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d111      	bne.n	8001bba <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0f9b      	lsrs	r3, r3, #30
 8001b9c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ba2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001ba8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001bae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <HAL_ADC_Init+0x340>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	061b      	lsls	r3, r3, #24
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d018      	beq.n	8001c0e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	05db      	lsls	r3, r3, #23
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d012      	beq.n	8001c0e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d00c      	beq.n	8001c0e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001bf4:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_ADC_Init+0x344>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_ADC_Init+0x348>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	23f0      	movs	r3, #240	; 0xf0
 8001c04:	039b      	lsls	r3, r3, #14
 8001c06:	401a      	ands	r2, r3
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_ADC_Init+0x344>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	001a      	movs	r2, r3
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f7ff fdf6 	bl	800180a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	493a      	ldr	r1, [pc, #232]	; (8001d10 <HAL_ADC_Init+0x34c>)
 8001c28:	001a      	movs	r2, r3
 8001c2a:	f7ff fdee 	bl	800180a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2110      	movs	r1, #16
 8001c42:	4249      	negs	r1, r1
 8001c44:	430a      	orrs	r2, r1
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
 8001c48:	e018      	b.n	8001c7c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	039b      	lsls	r3, r3, #14
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d112      	bne.n	8001c7c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	221c      	movs	r2, #28
 8001c66:	4013      	ands	r3, r2
 8001c68:	2210      	movs	r2, #16
 8001c6a:	4252      	negs	r2, r2
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	0011      	movs	r1, r2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2100      	movs	r1, #0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff fdde 	bl	8001844 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c88:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d10b      	bne.n	8001caa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ca8:	e01c      	b.n	8001ce4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	2212      	movs	r2, #18
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cc6:	231f      	movs	r3, #31
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cce:	e009      	b.n	8001ce4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ce4:	231f      	movs	r3, #31
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b008      	add	sp, #32
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	00030d40 	.word	0x00030d40
 8001cfc:	fffffefd 	.word	0xfffffefd
 8001d00:	fffe0201 	.word	0xfffe0201
 8001d04:	1ffffc02 	.word	0x1ffffc02
 8001d08:	40012708 	.word	0x40012708
 8001d0c:	ffc3ffff 	.word	0xffc3ffff
 8001d10:	07ffff04 	.word	0x07ffff04

08001d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1e:	2317      	movs	r3, #23
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2254      	movs	r2, #84	; 0x54
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x24>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e1c0      	b.n	80020ba <HAL_ADC_ConfigChannel+0x3a6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2254      	movs	r2, #84	; 0x54
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fe2c 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d000      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x3c>
 8001d4e:	e1a3      	b.n	8002098 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d100      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x46>
 8001d58:	e143      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d004      	beq.n	8001d70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d6a:	4ac1      	ldr	r2, [pc, #772]	; (8002070 <HAL_ADC_ConfigChannel+0x35c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0019      	movs	r1, r3
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	f7ff fd99 	bl	80018b2 <LL_ADC_REG_SetSequencerChAdd>
 8001d80:	e0c9      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	211f      	movs	r1, #31
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	210f      	movs	r1, #15
 8001d90:	4099      	lsls	r1, r3
 8001d92:	000b      	movs	r3, r1
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	035b      	lsls	r3, r3, #13
 8001da0:	0b5b      	lsrs	r3, r3, #13
 8001da2:	d105      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x9c>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	221f      	movs	r2, #31
 8001dac:	4013      	ands	r3, r2
 8001dae:	e098      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	d000      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0xa8>
 8001dba:	e091      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d000      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0xb4>
 8001dc6:	e089      	b.n	8001edc <HAL_ADC_ConfigChannel+0x1c8>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d000      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0xc0>
 8001dd2:	e081      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x1c4>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d000      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0xcc>
 8001dde:	e079      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x1c0>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2210      	movs	r2, #16
 8001de6:	4013      	ands	r3, r2
 8001de8:	d000      	beq.n	8001dec <HAL_ADC_ConfigChannel+0xd8>
 8001dea:	e071      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1bc>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d000      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0xe4>
 8001df6:	e069      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1b8>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d000      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0xf0>
 8001e02:	e061      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1b4>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d000      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0xfc>
 8001e0e:	e059      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1b0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d151      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1ac>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d149      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1a8>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	d141      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d139      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1a0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	015b      	lsls	r3, r3, #5
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d131      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x19c>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	4013      	ands	r3, r2
 8001e56:	d129      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x198>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	01db      	lsls	r3, r3, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	d121      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x194>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d119      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x190>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x18c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	4013      	ands	r3, r2
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x188>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	02db      	lsls	r3, r3, #11
 8001e90:	4013      	ands	r3, r2
 8001e92:	d001      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0x184>
 8001e94:	2312      	movs	r3, #18
 8001e96:	e024      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e022      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	e020      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	e01e      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	e01c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea8:	230e      	movs	r3, #14
 8001eaa:	e01a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001eac:	230d      	movs	r3, #13
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	e016      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	e014      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb8:	230a      	movs	r3, #10
 8001eba:	e012      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2309      	movs	r3, #9
 8001ebe:	e010      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	e00e      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	e00c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec8:	2306      	movs	r3, #6
 8001eca:	e00a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6852      	ldr	r2, [r2, #4]
 8001ee6:	201f      	movs	r0, #31
 8001ee8:	4002      	ands	r2, r0
 8001eea:	4093      	lsls	r3, r2
 8001eec:	000a      	movs	r2, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d808      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	f7ff fcae 	bl	8001872 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	001a      	movs	r2, r3
 8001f24:	f7ff fce8 	bl	80018f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db00      	blt.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
 8001f30:	e0bc      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff fc5b 	bl	80017f0 <LL_ADC_GetCommonPathInternalCh>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4d      	ldr	r2, [pc, #308]	; (8002078 <HAL_ADC_ConfigChannel+0x364>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d122      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f50:	d11d      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	0412      	lsls	r2, r2, #16
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	4a46      	ldr	r2, [pc, #280]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	0010      	movs	r0, r2
 8001f60:	f7ff fc32 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_ADC_ConfigChannel+0x368>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4945      	ldr	r1, [pc, #276]	; (8002080 <HAL_ADC_ConfigChannel+0x36c>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe f8c8 	bl	8000100 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	0013      	movs	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f9      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f8c:	e08e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_ADC_ConfigChannel+0x370>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10e      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x2a2>
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	045b      	lsls	r3, r3, #17
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	0452      	lsls	r2, r2, #17
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	4a32      	ldr	r2, [pc, #200]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8001fac:	0019      	movs	r1, r3
 8001fae:	0010      	movs	r0, r2
 8001fb0:	f7ff fc0a 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
 8001fb4:	e07a      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_ADC_ConfigChannel+0x374>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d000      	beq.n	8001fc2 <HAL_ADC_ConfigChannel+0x2ae>
 8001fc0:	e074      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	03db      	lsls	r3, r3, #15
 8001fc8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fca:	d000      	beq.n	8001fce <HAL_ADC_ConfigChannel+0x2ba>
 8001fcc:	e06e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	03d2      	lsls	r2, r2, #15
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	4a27      	ldr	r2, [pc, #156]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8001fd8:	0019      	movs	r1, r3
 8001fda:	0010      	movs	r0, r2
 8001fdc:	f7ff fbf4 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
 8001fe0:	e064      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_ADC_ConfigChannel+0x35c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d107      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f7ff fc66 	bl	80018d4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da4d      	bge.n	80020ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff fbec 	bl	80017f0 <LL_ADC_GetCommonPathInternalCh>
 8002018:	0003      	movs	r3, r0
 800201a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_ADC_ConfigChannel+0x364>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d108      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_ADC_ConfigChannel+0x378>)
 800202a:	4013      	ands	r3, r2
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f7ff fbc9 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
 8002036:	e039      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_ADC_ConfigChannel+0x370>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_ADC_ConfigChannel+0x37c>)
 8002046:	4013      	ands	r3, r2
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f7ff fbbb 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
 8002052:	e02b      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_ADC_ConfigChannel+0x374>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d126      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_ADC_ConfigChannel+0x380>)
 8002062:	4013      	ands	r3, r2
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_ADC_ConfigChannel+0x360>)
 8002066:	0019      	movs	r1, r3
 8002068:	0010      	movs	r0, r2
 800206a:	f7ff fbad 	bl	80017c8 <LL_ADC_SetCommonPathInternalCh>
 800206e:	e01d      	b.n	80020ac <HAL_ADC_ConfigChannel+0x398>
 8002070:	80000004 	.word	0x80000004
 8002074:	40012708 	.word	0x40012708
 8002078:	b0001000 	.word	0xb0001000
 800207c:	20000000 	.word	0x20000000
 8002080:	00030d40 	.word	0x00030d40
 8002084:	b8004000 	.word	0xb8004000
 8002088:	b4002000 	.word	0xb4002000
 800208c:	ff7fffff 	.word	0xff7fffff
 8002090:	feffffff 	.word	0xfeffffff
 8002094:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	2220      	movs	r2, #32
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020a4:	2317      	movs	r3, #23
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2254      	movs	r2, #84	; 0x54
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020b4:	2317      	movs	r3, #23
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b006      	add	sp, #24
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	0002      	movs	r2, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b7f      	cmp	r3, #127	; 0x7f
 80020d8:	d828      	bhi.n	800212c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <__NVIC_SetPriority+0xd4>)
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	33c0      	adds	r3, #192	; 0xc0
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	589b      	ldr	r3, [r3, r2]
 80020ea:	1dfa      	adds	r2, r7, #7
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	0011      	movs	r1, r2
 80020f0:	2203      	movs	r2, #3
 80020f2:	400a      	ands	r2, r1
 80020f4:	00d2      	lsls	r2, r2, #3
 80020f6:	21ff      	movs	r1, #255	; 0xff
 80020f8:	4091      	lsls	r1, r2
 80020fa:	000a      	movs	r2, r1
 80020fc:	43d2      	mvns	r2, r2
 80020fe:	401a      	ands	r2, r3
 8002100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	22ff      	movs	r2, #255	; 0xff
 8002108:	401a      	ands	r2, r3
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	0018      	movs	r0, r3
 8002110:	2303      	movs	r3, #3
 8002112:	4003      	ands	r3, r0
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002118:	481f      	ldr	r0, [pc, #124]	; (8002198 <__NVIC_SetPriority+0xd4>)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b25b      	sxtb	r3, r3
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	430a      	orrs	r2, r1
 8002124:	33c0      	adds	r3, #192	; 0xc0
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800212a:	e031      	b.n	8002190 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <__NVIC_SetPriority+0xd8>)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	0019      	movs	r1, r3
 8002134:	230f      	movs	r3, #15
 8002136:	400b      	ands	r3, r1
 8002138:	3b08      	subs	r3, #8
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3306      	adds	r3, #6
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	18d3      	adds	r3, r2, r3
 8002142:	3304      	adds	r3, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1dfa      	adds	r2, r7, #7
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	0011      	movs	r1, r2
 800214c:	2203      	movs	r2, #3
 800214e:	400a      	ands	r2, r1
 8002150:	00d2      	lsls	r2, r2, #3
 8002152:	21ff      	movs	r1, #255	; 0xff
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	43d2      	mvns	r2, r2
 800215a:	401a      	ands	r2, r3
 800215c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	401a      	ands	r2, r3
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	0018      	movs	r0, r3
 800216c:	2303      	movs	r3, #3
 800216e:	4003      	ands	r3, r0
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4809      	ldr	r0, [pc, #36]	; (800219c <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	001c      	movs	r4, r3
 800217c:	230f      	movs	r3, #15
 800217e:	4023      	ands	r3, r4
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	430a      	orrs	r2, r1
 8002186:	3306      	adds	r3, #6
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	18c3      	adds	r3, r0, r3
 800218c:	3304      	adds	r3, #4
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b003      	add	sp, #12
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	045b      	lsls	r3, r3, #17
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d301      	bcc.n	80021b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b4:	2301      	movs	r3, #1
 80021b6:	e010      	b.n	80021da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <SysTick_Config+0x44>)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	3a01      	subs	r2, #1
 80021be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c0:	2301      	movs	r3, #1
 80021c2:	425b      	negs	r3, r3
 80021c4:	2103      	movs	r1, #3
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff ff7c 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x44>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x44>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	210f      	movs	r1, #15
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	1c02      	adds	r2, r0, #0
 80021f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b25b      	sxtb	r3, r3
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f7ff ff5d 	bl	80020c4 <__NVIC_SetPriority>
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff ffbf 	bl	80021a0 <SysTick_Config>
 8002222:	0003      	movs	r3, r0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	e147      	b.n	80024cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4091      	lsls	r1, r2
 8002246:	000a      	movs	r2, r1
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d100      	bne.n	8002254 <HAL_GPIO_Init+0x28>
 8002252:	e138      	b.n	80024c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	4013      	ands	r3, r2
 800225c:	2b01      	cmp	r3, #1
 800225e:	d005      	beq.n	800226c <HAL_GPIO_Init+0x40>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	4013      	ands	r3, r2
 8002268:	2b02      	cmp	r3, #2
 800226a:	d130      	bne.n	80022ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	409a      	lsls	r2, r3
 800227a:	0013      	movs	r3, r2
 800227c:	43da      	mvns	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	0013      	movs	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022a2:	2201      	movs	r2, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	2201      	movs	r2, #1
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d017      	beq.n	800230a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	4013      	ands	r3, r2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d123      	bne.n	800235e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	58d3      	ldr	r3, [r2, r3]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2207      	movs	r2, #7
 8002328:	4013      	ands	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	43da      	mvns	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2107      	movs	r1, #7
 8002342:	400b      	ands	r3, r1
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	6939      	ldr	r1, [r7, #16]
 800235c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2203      	movs	r2, #3
 800237c:	401a      	ands	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	23c0      	movs	r3, #192	; 0xc0
 8002398:	029b      	lsls	r3, r3, #10
 800239a:	4013      	ands	r3, r2
 800239c:	d100      	bne.n	80023a0 <HAL_GPIO_Init+0x174>
 800239e:	e092      	b.n	80024c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023a0:	4a50      	ldr	r2, [pc, #320]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3318      	adds	r3, #24
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	589b      	ldr	r3, [r3, r2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4013      	ands	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	220f      	movs	r2, #15
 80023b8:	409a      	lsls	r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	43da      	mvns	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	23a0      	movs	r3, #160	; 0xa0
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x1ca>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <HAL_GPIO_Init+0x2bc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x1c6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a44      	ldr	r2, [pc, #272]	; (80024ec <HAL_GPIO_Init+0x2c0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x1c2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a43      	ldr	r2, [pc, #268]	; (80024f0 <HAL_GPIO_Init+0x2c4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x1be>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x1cc>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x1cc>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x1cc>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x1cc>
 80023f6:	2300      	movs	r3, #0
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	2103      	movs	r1, #3
 80023fc:	400a      	ands	r2, r1
 80023fe:	00d2      	lsls	r2, r2, #3
 8002400:	4093      	lsls	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002408:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3318      	adds	r3, #24
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	035b      	lsls	r3, r3, #13
 800242e:	4013      	ands	r3, r2
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43da      	mvns	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	039b      	lsls	r3, r3, #14
 8002458:	4013      	ands	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 800246c:	2384      	movs	r3, #132	; 0x84
 800246e:	58d3      	ldr	r3, [r2, r3]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	4013      	ands	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002490:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	58d3      	ldr	r3, [r2, r3]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4013      	ands	r3, r2
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024be:	4909      	ldr	r1, [pc, #36]	; (80024e4 <HAL_GPIO_Init+0x2b8>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	1e13      	subs	r3, r2, #0
 80024d6:	d000      	beq.n	80024da <HAL_GPIO_Init+0x2ae>
 80024d8:	e6b0      	b.n	800223c <HAL_GPIO_Init+0x10>
  }
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	b006      	add	sp, #24
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021800 	.word	0x40021800
 80024e8:	50000400 	.word	0x50000400
 80024ec:	50000800 	.word	0x50000800
 80024f0:	50000c00 	.word	0x50000c00

080024f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	000a      	movs	r2, r1
 80024fe:	1cbb      	adds	r3, r7, #2
 8002500:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	1cba      	adds	r2, r7, #2
 8002508:	8812      	ldrh	r2, [r2, #0]
 800250a:	4013      	ands	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e003      	b.n	8002520 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002518:	230f      	movs	r3, #15
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	781b      	ldrb	r3, [r3, #0]
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	0008      	movs	r0, r1
 8002538:	0011      	movs	r1, r2
 800253a:	1cbb      	adds	r3, r7, #2
 800253c:	1c02      	adds	r2, r0, #0
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	1c7b      	adds	r3, r7, #1
 8002542:	1c0a      	adds	r2, r1, #0
 8002544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002546:	1c7b      	adds	r3, r7, #1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800254e:	1cbb      	adds	r3, r7, #2
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002556:	e003      	b.n	8002560 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002558:	1cbb      	adds	r3, r7, #2
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d11f      	bne.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	0013      	movs	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	189b      	adds	r3, r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4912      	ldr	r1, [pc, #72]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800259a:	0018      	movs	r0, r3
 800259c:	f7fd fdb0 	bl	8000100 <__udivsi3>
 80025a0:	0003      	movs	r3, r0
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a6:	e008      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e001      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e009      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	401a      	ands	r2, r3
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d0ed      	beq.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40007000 	.word	0x40007000
 80025dc:	fffff9ff 	.word	0xfffff9ff
 80025e0:	20000000 	.word	0x20000000
 80025e4:	000f4240 	.word	0x000f4240

080025e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	23e0      	movs	r3, #224	; 0xe0
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	4013      	ands	r3, r2
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e2f3      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d100      	bne.n	800261e <HAL_RCC_OscConfig+0x1e>
 800261c:	e07c      	b.n	8002718 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4bc3      	ldr	r3, [pc, #780]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2238      	movs	r2, #56	; 0x38
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	4bc0      	ldr	r3, [pc, #768]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2203      	movs	r2, #3
 800262e:	4013      	ands	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b10      	cmp	r3, #16
 8002636:	d102      	bne.n	800263e <HAL_RCC_OscConfig+0x3e>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d002      	beq.n	8002644 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4bb9      	ldr	r3, [pc, #740]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	029b      	lsls	r3, r3, #10
 800264c:	4013      	ands	r3, r2
 800264e:	d062      	beq.n	8002716 <HAL_RCC_OscConfig+0x116>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d15e      	bne.n	8002716 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e2ce      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	025b      	lsls	r3, r3, #9
 8002664:	429a      	cmp	r2, r3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x78>
 8002668:	4bb0      	ldr	r3, [pc, #704]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4baf      	ldr	r3, [pc, #700]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	0249      	lsls	r1, r1, #9
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e020      	b.n	80026ba <HAL_RCC_OscConfig+0xba>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	02db      	lsls	r3, r3, #11
 8002680:	429a      	cmp	r2, r3
 8002682:	d10e      	bne.n	80026a2 <HAL_RCC_OscConfig+0xa2>
 8002684:	4ba9      	ldr	r3, [pc, #676]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4ba8      	ldr	r3, [pc, #672]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	02c9      	lsls	r1, r1, #11
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	4ba6      	ldr	r3, [pc, #664]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4ba5      	ldr	r3, [pc, #660]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0249      	lsls	r1, r1, #9
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0xba>
 80026a2:	4ba2      	ldr	r3, [pc, #648]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4ba1      	ldr	r3, [pc, #644]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80026a8:	49a1      	ldr	r1, [pc, #644]	; (8002930 <HAL_RCC_OscConfig+0x330>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	4b9f      	ldr	r3, [pc, #636]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b9e      	ldr	r3, [pc, #632]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80026b4:	499f      	ldr	r1, [pc, #636]	; (8002934 <HAL_RCC_OscConfig+0x334>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f853 	bl	800176c <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f84e 	bl	800176c <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e28d      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	4b93      	ldr	r3, [pc, #588]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	4013      	ands	r3, r2
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xcc>
 80026ea:	e015      	b.n	8002718 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff f83e 	bl	800176c <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f6:	f7ff f839 	bl	800176c <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e278      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002708:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	4013      	ands	r3, r2
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0xf6>
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002716:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d100      	bne.n	8002724 <HAL_RCC_OscConfig+0x124>
 8002722:	e099      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002724:	4b81      	ldr	r3, [pc, #516]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2238      	movs	r2, #56	; 0x38
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272e:	4b7f      	ldr	r3, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2203      	movs	r2, #3
 8002734:	4013      	ands	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x144>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d002      	beq.n	800274a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d135      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274a:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4013      	ands	r3, r2
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x162>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e24b      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a74      	ldr	r2, [pc, #464]	; (8002938 <HAL_RCC_OscConfig+0x338>)
 8002768:	4013      	ands	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d112      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800277e:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x33c>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	2207      	movs	r2, #7
 800279a:	4013      	ands	r3, r2
 800279c:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x340>)
 800279e:	40da      	lsrs	r2, r3
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x344>)
 80027a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a4:	4b68      	ldr	r3, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x348>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7fe ff83 	bl	80016b4 <HAL_InitTick>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d051      	beq.n	8002856 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e221      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d030      	beq.n	8002820 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x33c>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b55      	ldr	r3, [pc, #340]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0049      	lsls	r1, r1, #1
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe ffc4 	bl	800176c <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe ffbf 	bl	800176c <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1fe      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fc:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4013      	ands	r3, r2
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b48      	ldr	r3, [pc, #288]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_RCC_OscConfig+0x338>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	4b44      	ldr	r3, [pc, #272]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002820:	4b42      	ldr	r3, [pc, #264]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002826:	4949      	ldr	r1, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x34c>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe ff9e 	bl	800176c <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe ff99 	bl	800176c <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1d8      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002848:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4013      	ands	r3, r2
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x236>
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002856:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2208      	movs	r2, #8
 800285e:	4013      	ands	r3, r2
 8002860:	d047      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2238      	movs	r2, #56	; 0x38
 8002868:	4013      	ands	r3, r2
 800286a:	2b18      	cmp	r3, #24
 800286c:	d10a      	bne.n	8002884 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d03c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d138      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e1ba      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d019      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 800288e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002892:	2101      	movs	r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ff68 	bl	800176c <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe ff63 	bl	800176c <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1a2      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d0f1      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2a2>
 80028be:	e018      	b.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80028c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	438a      	bics	r2, r1
 80028ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff4e 	bl	800176c <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe ff49 	bl	800176c <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e188      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d1f1      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	d100      	bne.n	80028fe <HAL_RCC_OscConfig+0x2fe>
 80028fc:	e0c6      	b.n	8002a8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2238      	movs	r2, #56	; 0x38
 800290c:	4013      	ands	r3, r2
 800290e:	2b20      	cmp	r3, #32
 8002910:	d11e      	bne.n	8002950 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x32c>)
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d100      	bne.n	800291e <HAL_RCC_OscConfig+0x31e>
 800291c:	e0b6      	b.n	8002a8c <HAL_RCC_OscConfig+0x48c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d000      	beq.n	8002928 <HAL_RCC_OscConfig+0x328>
 8002926:	e0b1      	b.n	8002a8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e166      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
 800292c:	40021000 	.word	0x40021000
 8002930:	fffeffff 	.word	0xfffeffff
 8002934:	fffbffff 	.word	0xfffbffff
 8002938:	ffff80ff 	.word	0xffff80ff
 800293c:	ffffc7ff 	.word	0xffffc7ff
 8002940:	00f42400 	.word	0x00f42400
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004
 800294c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002950:	4bac      	ldr	r3, [pc, #688]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	055b      	lsls	r3, r3, #21
 8002958:	4013      	ands	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x360>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x362>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d011      	beq.n	800298a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296a:	4ba6      	ldr	r3, [pc, #664]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	0549      	lsls	r1, r1, #21
 8002970:	430a      	orrs	r2, r1
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
 8002974:	4ba3      	ldr	r3, [pc, #652]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	055b      	lsls	r3, r3, #21
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002982:	231f      	movs	r3, #31
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	4b9f      	ldr	r3, [pc, #636]	; (8002c08 <HAL_RCC_OscConfig+0x608>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4013      	ands	r3, r2
 8002994:	d11a      	bne.n	80029cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002996:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <HAL_RCC_OscConfig+0x608>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b9b      	ldr	r3, [pc, #620]	; (8002c08 <HAL_RCC_OscConfig+0x608>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0049      	lsls	r1, r1, #1
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fee2 	bl	800176c <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7fe fedd 	bl	800176c <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e11c      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c0:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x608>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3e2>
 80029d4:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d8:	4b8a      	ldr	r3, [pc, #552]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029da:	2101      	movs	r1, #1
 80029dc:	430a      	orrs	r2, r1
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
 80029e0:	e01c      	b.n	8002a1c <HAL_RCC_OscConfig+0x41c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x404>
 80029ea:	4b86      	ldr	r3, [pc, #536]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ee:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029f0:	2104      	movs	r1, #4
 80029f2:	430a      	orrs	r2, r1
 80029f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f6:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fa:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0x41c>
 8002a04:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a08:	4b7e      	ldr	r3, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a10:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a14:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a16:	2104      	movs	r1, #4
 8002a18:	438a      	bics	r2, r1
 8002a1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d014      	beq.n	8002a4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fea2 	bl	800176c <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fe9d 	bl	800176c <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	4a74      	ldr	r2, [pc, #464]	; (8002c0c <HAL_RCC_OscConfig+0x60c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0db      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a42:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x42e>
 8002a4c:	e013      	b.n	8002a76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fe8d 	bl	800176c <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a56:	e009      	b.n	8002a6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fe88 	bl	800176c <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	4a6a      	ldr	r2, [pc, #424]	; (8002c0c <HAL_RCC_OscConfig+0x60c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e0c6      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6c:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2202      	movs	r2, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a76:	231f      	movs	r3, #31
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a80:	4b60      	ldr	r3, [pc, #384]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a84:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a86:	4962      	ldr	r1, [pc, #392]	; (8002c10 <HAL_RCC_OscConfig+0x610>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d100      	bne.n	8002a96 <HAL_RCC_OscConfig+0x496>
 8002a94:	e0b0      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2238      	movs	r2, #56	; 0x38
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d100      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4a4>
 8002aa2:	e078      	b.n	8002b96 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d153      	bne.n	8002b54 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002ab2:	4958      	ldr	r1, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x614>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe58 	bl	800176c <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fe53 	bl	800176c <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e092      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	049b      	lsls	r3, r3, #18
 8002adc:	4013      	ands	r3, r2
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x618>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	431a      	orrs	r2, r3
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0449      	lsls	r1, r1, #17
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0549      	lsls	r1, r1, #21
 8002b26:	430a      	orrs	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fe1f 	bl	800176c <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fe1a 	bl	800176c <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e059      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	049b      	lsls	r3, r3, #18
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x534>
 8002b52:	e051      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b5a:	492e      	ldr	r1, [pc, #184]	; (8002c14 <HAL_RCC_OscConfig+0x614>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fe04 	bl	800176c <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fdff 	bl	800176c <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e03e      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	049b      	lsls	r3, r3, #18
 8002b84:	4013      	ands	r3, r2
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002b8e:	4923      	ldr	r1, [pc, #140]	; (8002c1c <HAL_RCC_OscConfig+0x61c>)
 8002b90:	400a      	ands	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	e030      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02b      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_RCC_OscConfig+0x604>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2203      	movs	r2, #3
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d11e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2270      	movs	r2, #112	; 0x70
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d117      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	23fe      	movs	r3, #254	; 0xfe
 8002bc8:	01db      	lsls	r3, r3, #7
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	23f8      	movs	r3, #248	; 0xf8
 8002bda:	039b      	lsls	r3, r3, #14
 8002bdc:	401a      	ands	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	0f5b      	lsrs	r3, r3, #29
 8002bea:	075a      	lsls	r2, r3, #29
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b008      	add	sp, #32
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	efffffff 	.word	0xefffffff
 8002c14:	feffffff 	.word	0xfeffffff
 8002c18:	1fc1808c 	.word	0x1fc1808c
 8002c1c:	effefffc 	.word	0xeffefffc

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0e9      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2207      	movs	r2, #7
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d91e      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2207      	movs	r2, #7
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fd8a 	bl	800176c <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7fe fd85 	bl	800176c <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_RCC_ClockConfig+0x1f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0ca      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c72:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4013      	ands	r3, r2
 8002c92:	d006      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c94:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002c9a:	21e0      	movs	r1, #224	; 0xe0
 8002c9c:	01c9      	lsls	r1, r1, #7
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <HAL_RCC_ClockConfig+0x1fc>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d057      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d12b      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e097      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	049b      	lsls	r3, r3, #18
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d11f      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e08b      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4013      	ands	r3, r2
 8002d02:	d113      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e07f      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d108      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e074      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2202      	movs	r2, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e06d      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2207      	movs	r2, #7
 8002d32:	4393      	bics	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d40:	f7fe fd14 	bl	800176c <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d48:	e009      	b.n	8002d5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	f7fe fd0f 	bl	800176c <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <HAL_RCC_ClockConfig+0x1f4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e054      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2238      	movs	r2, #56	; 0x38
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1ec      	bne.n	8002d4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2207      	movs	r2, #7
 8002d76:	4013      	ands	r3, r2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d21e      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2207      	movs	r2, #7
 8002d84:	4393      	bics	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fcec 	bl	800176c <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d98:	e009      	b.n	8002dae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe fce7 	bl	800176c <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <HAL_RCC_ClockConfig+0x1f4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e02c      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2207      	movs	r2, #7
 8002db4:	4013      	ands	r3, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_RCC_ClockConfig+0x200>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002dda:	f000 f829 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dde:	0001      	movs	r1, r0
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_ClockConfig+0x1f8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	220f      	movs	r2, #15
 8002de8:	401a      	ands	r2, r3
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x204>)
 8002dec:	0092      	lsls	r2, r2, #2
 8002dee:	58d3      	ldr	r3, [r2, r3]
 8002df0:	221f      	movs	r2, #31
 8002df2:	4013      	ands	r3, r2
 8002df4:	000a      	movs	r2, r1
 8002df6:	40da      	lsrs	r2, r3
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x208>)
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x20c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe fc57 	bl	80016b4 <HAL_InitTick>
 8002e06:	0003      	movs	r3, r0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40022000 	.word	0x40022000
 8002e14:	00001388 	.word	0x00001388
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	fffff0ff 	.word	0xfffff0ff
 8002e20:	ffff8fff 	.word	0xffff8fff
 8002e24:	08005218 	.word	0x08005218
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e36:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2238      	movs	r2, #56	; 0x38
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d10f      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e40:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0adb      	lsrs	r3, r3, #11
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	0013      	movs	r3, r2
 8002e50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	4835      	ldr	r0, [pc, #212]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e56:	f7fd f953 	bl	8000100 <__udivsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	e05d      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e60:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2238      	movs	r2, #56	; 0x38
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	e054      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2238      	movs	r2, #56	; 0x38
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d138      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2203      	movs	r2, #3
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	2207      	movs	r2, #7
 8002e90:	4013      	ands	r3, r2
 8002e92:	3301      	adds	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4824      	ldr	r0, [pc, #144]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ea0:	f7fd f92e 	bl	8000100 <__udivsi3>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	227f      	movs	r2, #127	; 0x7f
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	434b      	muls	r3, r1
 8002eb4:	617b      	str	r3, [r7, #20]
        break;
 8002eb6:	e00d      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	481c      	ldr	r0, [pc, #112]	; (8002f2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ebc:	f7fd f920 	bl	8000100 <__udivsi3>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	227f      	movs	r2, #127	; 0x7f
 8002ecc:	4013      	ands	r3, r2
 8002ece:	434b      	muls	r3, r1
 8002ed0:	617b      	str	r3, [r7, #20]
        break;
 8002ed2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0f5b      	lsrs	r3, r3, #29
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	6978      	ldr	r0, [r7, #20]
 8002ee6:	f7fd f90b 	bl	8000100 <__udivsi3>
 8002eea:	0003      	movs	r3, r0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e015      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2238      	movs	r2, #56	; 0x38
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d103      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2238      	movs	r2, #56	; 0x38
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b18      	cmp	r3, #24
 8002f0e:	d103      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f10:	23fa      	movs	r3, #250	; 0xfa
 8002f12:	01db      	lsls	r3, r3, #7
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e001      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f1c:	693b      	ldr	r3, [r7, #16]
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b006      	add	sp, #24
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200

08002f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	20000000 	.word	0x20000000

08002f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f4c:	f7ff fff2 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f50:	0004      	movs	r4, r0
 8002f52:	f7ff fb49 	bl	80025e8 <LL_RCC_GetAPB1Prescaler>
 8002f56:	0003      	movs	r3, r0
 8002f58:	0b1a      	lsrs	r2, r3, #12
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	58d3      	ldr	r3, [r2, r3]
 8002f60:	221f      	movs	r2, #31
 8002f62:	4013      	ands	r3, r2
 8002f64:	40dc      	lsrs	r4, r3
 8002f66:	0023      	movs	r3, r4
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	08005258 	.word	0x08005258

08002f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f7c:	2313      	movs	r3, #19
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f84:	2312      	movs	r3, #18
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	029b      	lsls	r3, r3, #10
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f98:	e0a3      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2011      	movs	r0, #17
 8002f9c:	183b      	adds	r3, r7, r0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	055b      	lsls	r3, r3, #21
 8002faa:	4013      	ands	r3, r2
 8002fac:	d110      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb2:	4b7b      	ldr	r3, [pc, #492]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0549      	lsls	r1, r1, #21
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fbc:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	055b      	lsls	r3, r3, #21
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fca:	183b      	adds	r3, r7, r0
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fd0:	4b74      	ldr	r3, [pc, #464]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	0049      	lsls	r1, r1, #1
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fde:	f7fe fbc5 	bl	800176c <HAL_GetTick>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7fe fbc0 	bl	800176c <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d904      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ff6:	2313      	movs	r3, #19
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	701a      	strb	r2, [r3, #0]
        break;
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d0ed      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800300c:	2313      	movs	r3, #19
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d154      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800301a:	23c0      	movs	r3, #192	; 0xc0
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4013      	ands	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d019      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	429a      	cmp	r2, r3
 8003030:	d014      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003032:	4b5b      	ldr	r3, [pc, #364]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800303e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003040:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	0249      	lsls	r1, r1, #9
 8003046:	430a      	orrs	r2, r1
 8003048:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800304c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304e:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003050:	4956      	ldr	r1, [pc, #344]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003052:	400a      	ands	r2, r1
 8003054:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003056:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2201      	movs	r2, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d016      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fb82 	bl	800176c <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306c:	e00c      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fb7d 	bl	800176c <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d904      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800307e:	2313      	movs	r3, #19
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	2203      	movs	r2, #3
 8003084:	701a      	strb	r2, [r3, #0]
            break;
 8003086:	e004      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003088:	4b45      	ldr	r3, [pc, #276]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2202      	movs	r2, #2
 800308e:	4013      	ands	r3, r2
 8003090:	d0ed      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003092:	2313      	movs	r3, #19
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	4a41      	ldr	r2, [pc, #260]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80030b0:	e00c      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030b2:	2312      	movs	r3, #18
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2213      	movs	r2, #19
 80030b8:	18ba      	adds	r2, r7, r2
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e005      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	2312      	movs	r3, #18
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2213      	movs	r2, #19
 80030c6:	18ba      	adds	r2, r7, r2
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030cc:	2311      	movs	r3, #17
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030dc:	4935      	ldr	r1, [pc, #212]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030de:	400a      	ands	r2, r1
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	2203      	movs	r2, #3
 80030f2:	4393      	bics	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2220      	movs	r2, #32
 8003106:	4013      	ands	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800311a:	430a      	orrs	r2, r1
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	01db      	lsls	r3, r3, #7
 8003126:	4013      	ands	r3, r2
 8003128:	d015      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	0899      	lsrs	r1, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003138:	430a      	orrs	r2, r1
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	429a      	cmp	r2, r3
 8003146:	d106      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0249      	lsls	r1, r1, #9
 8003152:	430a      	orrs	r2, r1
 8003154:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	4013      	ands	r3, r2
 8003160:	d016      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003172:	430a      	orrs	r2, r1
 8003174:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	429a      	cmp	r2, r3
 8003180:	d106      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0249      	lsls	r1, r1, #9
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003190:	2312      	movs	r3, #18
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	781b      	ldrb	r3, [r3, #0]
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	b006      	add	sp, #24
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	fffffcff 	.word	0xfffffcff
 80031ac:	fffeffff 	.word	0xfffeffff
 80031b0:	00001388 	.word	0x00001388
 80031b4:	efffffff 	.word	0xefffffff
 80031b8:	ffffcfff 	.word	0xffffcfff
 80031bc:	ffff3fff 	.word	0xffff3fff

080031c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0a8      	b.n	8003324 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	2382      	movs	r3, #130	; 0x82
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d009      	beq.n	80031fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	61da      	str	r2, [r3, #28]
 80031ec:	e005      	b.n	80031fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	225d      	movs	r2, #93	; 0x5d
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	225c      	movs	r2, #92	; 0x5c
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f7fe f850 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	225d      	movs	r2, #93	; 0x5d
 8003220:	2102      	movs	r1, #2
 8003222:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2140      	movs	r1, #64	; 0x40
 8003230:	438a      	bics	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	23e0      	movs	r3, #224	; 0xe0
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	429a      	cmp	r2, r3
 800323e:	d902      	bls.n	8003246 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e002      	b.n	800324c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	23f0      	movs	r3, #240	; 0xf0
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	429a      	cmp	r2, r3
 8003256:	d008      	beq.n	800326a <HAL_SPI_Init+0xaa>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	23e0      	movs	r3, #224	; 0xe0
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	429a      	cmp	r2, r3
 8003262:	d002      	beq.n	800326a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	2382      	movs	r3, #130	; 0x82
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	2384      	movs	r3, #132	; 0x84
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	400b      	ands	r3, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2102      	movs	r1, #2
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2101      	movs	r1, #1
 8003290:	400b      	ands	r3, r1
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6999      	ldr	r1, [r3, #24]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	400b      	ands	r3, r1
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2138      	movs	r1, #56	; 0x38
 80032a6:	400b      	ands	r3, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	400b      	ands	r3, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	0011      	movs	r1, r2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	2204      	movs	r2, #4
 80032d0:	401a      	ands	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2110      	movs	r1, #16
 80032d8:	400b      	ands	r3, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	2108      	movs	r1, #8
 80032e2:	400b      	ands	r3, r1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	23f0      	movs	r3, #240	; 0xf0
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	400b      	ands	r3, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	0011      	movs	r1, r2
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4907      	ldr	r1, [pc, #28]	; (800332c <HAL_SPI_Init+0x16c>)
 8003310:	400a      	ands	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	225d      	movs	r2, #93	; 0x5d
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b004      	add	sp, #16
 800332a:	bd80      	pop	{r7, pc}
 800332c:	fffff7ff 	.word	0xfffff7ff

08003330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	1dbb      	adds	r3, r7, #6
 800333e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003340:	231f      	movs	r3, #31
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	225c      	movs	r2, #92	; 0x5c
 800334c:	5c9b      	ldrb	r3, [r3, r2]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_SPI_Transmit+0x26>
 8003352:	2302      	movs	r3, #2
 8003354:	e140      	b.n	80035d8 <HAL_SPI_Transmit+0x2a8>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	225c      	movs	r2, #92	; 0x5c
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335e:	f7fe fa05 	bl	800176c <HAL_GetTick>
 8003362:	0003      	movs	r3, r0
 8003364:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003366:	2316      	movs	r3, #22
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	1dba      	adds	r2, r7, #6
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	225d      	movs	r2, #93	; 0x5d
 8003374:	5c9b      	ldrb	r3, [r3, r2]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d004      	beq.n	8003386 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800337c:	231f      	movs	r3, #31
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2202      	movs	r2, #2
 8003382:	701a      	strb	r2, [r3, #0]
    goto error;
 8003384:	e11d      	b.n	80035c2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_SPI_Transmit+0x64>
 800338c:	1dbb      	adds	r3, r7, #6
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003394:	231f      	movs	r3, #31
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    goto error;
 800339c:	e111      	b.n	80035c2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	225d      	movs	r2, #93	; 0x5d
 80033a2:	2103      	movs	r1, #3
 80033a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1dba      	adds	r2, r7, #6
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1dba      	adds	r2, r7, #6
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2244      	movs	r2, #68	; 0x44
 80033cc:	2100      	movs	r1, #0
 80033ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2246      	movs	r2, #70	; 0x46
 80033d4:	2100      	movs	r1, #0
 80033d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d110      	bne.n	8003412 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2140      	movs	r1, #64	; 0x40
 80033fc:	438a      	bics	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	01c9      	lsls	r1, r1, #7
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	4013      	ands	r3, r2
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d007      	beq.n	8003430 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2140      	movs	r1, #64	; 0x40
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	23e0      	movs	r3, #224	; 0xe0
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	429a      	cmp	r2, r3
 800343a:	d94e      	bls.n	80034da <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_SPI_Transmit+0x11e>
 8003444:	2316      	movs	r3, #22
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d13f      	bne.n	80034ce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003472:	e02c      	b.n	80034ce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2202      	movs	r2, #2
 800347c:	4013      	ands	r3, r2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d112      	bne.n	80034a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a6:	e012      	b.n	80034ce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fe f960 	bl	800176c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d802      	bhi.n	80034be <HAL_SPI_Transmit+0x18e>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_Transmit+0x194>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80034c4:	231f      	movs	r3, #31
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2203      	movs	r2, #3
 80034ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80034cc:	e079      	b.n	80035c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1cd      	bne.n	8003474 <HAL_SPI_Transmit+0x144>
 80034d8:	e04f      	b.n	800357a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <HAL_SPI_Transmit+0x1bc>
 80034e2:	2316      	movs	r3, #22
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d141      	bne.n	8003570 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003512:	e02d      	b.n	8003570 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d113      	bne.n	800354a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003548:	e012      	b.n	8003570 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354a:	f7fe f90f 	bl	800176c <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d802      	bhi.n	8003560 <HAL_SPI_Transmit+0x230>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_SPI_Transmit+0x236>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003566:	231f      	movs	r3, #31
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	2203      	movs	r2, #3
 800356c:	701a      	strb	r2, [r3, #0]
          goto error;
 800356e:	e028      	b.n	80035c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1cc      	bne.n	8003514 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 fce5 	bl	8003f50 <SPI_EndRxTxTransaction>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d002      	beq.n	8003590 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80035b6:	231f      	movs	r3, #31
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e000      	b.n	80035c2 <HAL_SPI_Transmit+0x292>
  }

error:
 80035c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	225d      	movs	r2, #93	; 0x5d
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	225c      	movs	r2, #92	; 0x5c
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80035d2:	231f      	movs	r3, #31
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	781b      	ldrb	r3, [r3, #0]
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b008      	add	sp, #32
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f0:	2317      	movs	r3, #23
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	2382      	movs	r3, #130	; 0x82
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	429a      	cmp	r2, r3
 8003602:	d113      	bne.n	800362c <HAL_SPI_Receive+0x4c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	225d      	movs	r2, #93	; 0x5d
 8003610:	2104      	movs	r1, #4
 8003612:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003614:	1dbb      	adds	r3, r7, #6
 8003616:	881c      	ldrh	r4, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	0023      	movs	r3, r4
 8003624:	f000 f928 	bl	8003878 <HAL_SPI_TransmitReceive>
 8003628:	0003      	movs	r3, r0
 800362a:	e11c      	b.n	8003866 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	225c      	movs	r2, #92	; 0x5c
 8003630:	5c9b      	ldrb	r3, [r3, r2]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_SPI_Receive+0x5a>
 8003636:	2302      	movs	r3, #2
 8003638:	e115      	b.n	8003866 <HAL_SPI_Receive+0x286>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	225c      	movs	r2, #92	; 0x5c
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003642:	f7fe f893 	bl	800176c <HAL_GetTick>
 8003646:	0003      	movs	r3, r0
 8003648:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	225d      	movs	r2, #93	; 0x5d
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d004      	beq.n	8003660 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003656:	2317      	movs	r3, #23
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
    goto error;
 800365e:	e0f7      	b.n	8003850 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_SPI_Receive+0x8e>
 8003666:	1dbb      	adds	r3, r7, #6
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800366e:	2317      	movs	r3, #23
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
    goto error;
 8003676:	e0eb      	b.n	8003850 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	225d      	movs	r2, #93	; 0x5d
 800367c:	2104      	movs	r1, #4
 800367e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1dba      	adds	r2, r7, #6
 8003690:	2144      	movs	r1, #68	; 0x44
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1dba      	adds	r2, r7, #6
 800369a:	2146      	movs	r1, #70	; 0x46
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	23e0      	movs	r3, #224	; 0xe0
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d908      	bls.n	80036dc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4966      	ldr	r1, [pc, #408]	; (8003870 <HAL_SPI_Receive+0x290>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e008      	b.n	80036ee <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	0149      	lsls	r1, r1, #5
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d10f      	bne.n	800371a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2140      	movs	r1, #64	; 0x40
 8003706:	438a      	bics	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4957      	ldr	r1, [pc, #348]	; (8003874 <HAL_SPI_Receive+0x294>)
 8003716:	400a      	ands	r2, r1
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	4013      	ands	r3, r2
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d007      	beq.n	8003738 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	23e0      	movs	r3, #224	; 0xe0
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	429a      	cmp	r2, r3
 8003742:	d900      	bls.n	8003746 <HAL_SPI_Receive+0x166>
 8003744:	e069      	b.n	800381a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003746:	e031      	b.n	80037ac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2201      	movs	r2, #1
 8003750:	4013      	ands	r3, r2
 8003752:	2b01      	cmp	r3, #1
 8003754:	d117      	bne.n	8003786 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	001a      	movs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2246      	movs	r2, #70	; 0x46
 8003776:	5a9b      	ldrh	r3, [r3, r2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b299      	uxth	r1, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2246      	movs	r2, #70	; 0x46
 8003782:	5299      	strh	r1, [r3, r2]
 8003784:	e012      	b.n	80037ac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fd fff1 	bl	800176c <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d802      	bhi.n	800379c <HAL_SPI_Receive+0x1bc>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Receive+0x1c2>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80037a2:	2317      	movs	r3, #23
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2203      	movs	r2, #3
 80037a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80037aa:	e051      	b.n	8003850 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2246      	movs	r2, #70	; 0x46
 80037b0:	5a9b      	ldrh	r3, [r3, r2]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1c7      	bne.n	8003748 <HAL_SPI_Receive+0x168>
 80037b8:	e035      	b.n	8003826 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d115      	bne.n	80037f4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	b292      	uxth	r2, r2
 80037d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2246      	movs	r2, #70	; 0x46
 80037e4:	5a9b      	ldrh	r3, [r3, r2]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b299      	uxth	r1, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2246      	movs	r2, #70	; 0x46
 80037f0:	5299      	strh	r1, [r3, r2]
 80037f2:	e012      	b.n	800381a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f4:	f7fd ffba 	bl	800176c <HAL_GetTick>
 80037f8:	0002      	movs	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d802      	bhi.n	800380a <HAL_SPI_Receive+0x22a>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	d102      	bne.n	8003810 <HAL_SPI_Receive+0x230>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003810:	2317      	movs	r3, #23
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2203      	movs	r2, #3
 8003816:	701a      	strb	r2, [r3, #0]
          goto error;
 8003818:	e01a      	b.n	8003850 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2246      	movs	r2, #70	; 0x46
 800381e:	5a9b      	ldrh	r3, [r3, r2]
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1c9      	bne.n	80037ba <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 fb31 	bl	8003e94 <SPI_EndRxTransaction>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003844:	2317      	movs	r3, #23
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e000      	b.n	8003850 <HAL_SPI_Receive+0x270>
  }

error :
 800384e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	225d      	movs	r2, #93	; 0x5d
 8003854:	2101      	movs	r1, #1
 8003856:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	225c      	movs	r2, #92	; 0x5c
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003860:	2317      	movs	r3, #23
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	781b      	ldrb	r3, [r3, #0]
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b007      	add	sp, #28
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	ffffefff 	.word	0xffffefff
 8003874:	ffffbfff 	.word	0xffffbfff

08003878 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	001a      	movs	r2, r3
 8003886:	1cbb      	adds	r3, r7, #2
 8003888:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800388a:	2301      	movs	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800388e:	2323      	movs	r3, #35	; 0x23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	225c      	movs	r2, #92	; 0x5c
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x2c>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e1b5      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x398>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	225c      	movs	r2, #92	; 0x5c
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ac:	f7fd ff5e 	bl	800176c <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038b4:	201b      	movs	r0, #27
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	215d      	movs	r1, #93	; 0x5d
 80038bc:	5c52      	ldrb	r2, [r2, r1]
 80038be:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038c6:	2312      	movs	r3, #18
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	1cba      	adds	r2, r7, #2
 80038cc:	8812      	ldrh	r2, [r2, #0]
 80038ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038d0:	183b      	adds	r3, r7, r0
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d011      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x84>
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	2382      	movs	r3, #130	; 0x82
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	429a      	cmp	r2, r3
 80038e0:	d107      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x7a>
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d004      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80038f2:	2323      	movs	r3, #35	; 0x23
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80038fa:	e17e      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d006      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x98>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x98>
 8003908:	1cbb      	adds	r3, r7, #2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003910:	2323      	movs	r3, #35	; 0x23
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
    goto error;
 8003918:	e16f      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	225d      	movs	r2, #93	; 0x5d
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b04      	cmp	r3, #4
 8003924:	d003      	beq.n	800392e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	225d      	movs	r2, #93	; 0x5d
 800392a:	2105      	movs	r1, #5
 800392c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1cba      	adds	r2, r7, #2
 800393e:	2146      	movs	r1, #70	; 0x46
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1cba      	adds	r2, r7, #2
 8003948:	2144      	movs	r1, #68	; 0x44
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1cba      	adds	r2, r7, #2
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1cba      	adds	r2, r7, #2
 8003960:	8812      	ldrh	r2, [r2, #0]
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	23e0      	movs	r3, #224	; 0xe0
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	429a      	cmp	r2, r3
 800397a:	d908      	bls.n	800398e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	49a4      	ldr	r1, [pc, #656]	; (8003c18 <HAL_SPI_TransmitReceive+0x3a0>)
 8003988:	400a      	ands	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	e008      	b.n	80039a0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	0149      	lsls	r1, r1, #5
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2240      	movs	r2, #64	; 0x40
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d007      	beq.n	80039be <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	23e0      	movs	r3, #224	; 0xe0
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d800      	bhi.n	80039cc <HAL_SPI_TransmitReceive+0x154>
 80039ca:	e07f      	b.n	8003acc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x168>
 80039d4:	2312      	movs	r3, #18
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d000      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x168>
 80039de:	e069      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a04:	e056      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11b      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x1d4>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x1d4>
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d113      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d11c      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x21c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2246      	movs	r2, #70	; 0x46
 8003a5e:	5a9b      	ldrh	r3, [r3, r2]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	b292      	uxth	r2, r2
 8003a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2246      	movs	r2, #70	; 0x46
 8003a82:	5a9b      	ldrh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2246      	movs	r2, #70	; 0x46
 8003a8e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a94:	f7fd fe6a 	bl	800176c <HAL_GetTick>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_SPI_TransmitReceive+0x23c>
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	d004      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003aaa:	2323      	movs	r3, #35	; 0x23
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	2203      	movs	r2, #3
 8003ab0:	701a      	strb	r2, [r3, #0]
        goto error;
 8003ab2:	e0a2      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1a3      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x18e>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2246      	movs	r2, #70	; 0x46
 8003ac2:	5a9b      	ldrh	r3, [r3, r2]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d19d      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x18e>
 8003aca:	e085      	b.n	8003bd8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x268>
 8003ad4:	2312      	movs	r3, #18
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d000      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x268>
 8003ade:	e070      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	7812      	ldrb	r2, [r2, #0]
 8003aec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b06:	e05c      	b.n	8003bc2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d11c      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x2d8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x2d8>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d114      	bne.n	8003b50 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d11e      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x324>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2246      	movs	r2, #70	; 0x46
 8003b62:	5a9b      	ldrh	r3, [r3, r2]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	001a      	movs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2246      	movs	r2, #70	; 0x46
 8003b8a:	5a9b      	ldrh	r3, [r3, r2]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b299      	uxth	r1, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2246      	movs	r2, #70	; 0x46
 8003b96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b9c:	f7fd fde6 	bl	800176c <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d802      	bhi.n	8003bb2 <HAL_SPI_TransmitReceive+0x33a>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	3301      	adds	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x340>
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003bb8:	2323      	movs	r3, #35	; 0x23
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	701a      	strb	r2, [r3, #0]
        goto error;
 8003bc0:	e01b      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d19d      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x290>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2246      	movs	r2, #70	; 0x46
 8003bd0:	5a9b      	ldrh	r3, [r3, r2]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d197      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f9b6 	bl	8003f50 <SPI_EndRxTxTransaction>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003be8:	2323      	movs	r3, #35	; 0x23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	661a      	str	r2, [r3, #96]	; 0x60
 8003bf6:	e000      	b.n	8003bfa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003bf8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	225d      	movs	r2, #93	; 0x5d
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	225c      	movs	r2, #92	; 0x5c
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c0a:	2323      	movs	r3, #35	; 0x23
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b00a      	add	sp, #40	; 0x28
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	ffffefff 	.word	0xffffefff

08003c1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	225d      	movs	r2, #93	; 0x5d
 8003c28:	5c9b      	ldrb	r3, [r3, r2]
 8003c2a:	b2db      	uxtb	r3, r3
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c44:	f7fd fd92 	bl	800176c <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	18d3      	adds	r3, r2, r3
 8003c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c54:	f7fd fd8a 	bl	800176c <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c5c:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	015b      	lsls	r3, r3, #5
 8003c62:	0d1b      	lsrs	r3, r3, #20
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	4353      	muls	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c6a:	e058      	b.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	d055      	beq.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c72:	f7fd fd7b 	bl	800176c <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d902      	bls.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d142      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	21e0      	movs	r1, #224	; 0xe0
 8003c94:	438a      	bics	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	2382      	movs	r3, #130	; 0x82
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d113      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d005      	beq.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	438a      	bics	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	019b      	lsls	r3, r3, #6
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d110      	bne.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	491a      	ldr	r1, [pc, #104]	; (8003d4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	0189      	lsls	r1, r1, #6
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	225d      	movs	r2, #93	; 0x5d
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	225c      	movs	r2, #92	; 0x5c
 8003d06:	2100      	movs	r1, #0
 8003d08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e017      	b.n	8003d3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	4153      	adcs	r3, r2
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	001a      	movs	r2, r3
 8003d34:	1dfb      	adds	r3, r7, #7
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d197      	bne.n	8003c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b008      	add	sp, #32
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	ffffdfff 	.word	0xffffdfff

08003d50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d5e:	2317      	movs	r3, #23
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d66:	f7fd fd01 	bl	800176c <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d76:	f7fd fcf9 	bl	800176c <HAL_GetTick>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	00da      	lsls	r2, r3, #3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	0d1b      	lsrs	r3, r3, #20
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	4353      	muls	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d9c:	e068      	b.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	23c0      	movs	r3, #192	; 0xc0
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d10a      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	2117      	movs	r1, #23
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	d055      	beq.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc4:	f7fd fcd2 	bl	800176c <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d902      	bls.n	8003dda <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d142      	bne.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	21e0      	movs	r1, #224	; 0xe0
 8003de6:	438a      	bics	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	2382      	movs	r3, #130	; 0x82
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d113      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d005      	beq.n	8003e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d107      	bne.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d110      	bne.n	8003e4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4916      	ldr	r1, [pc, #88]	; (8003e90 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	0189      	lsls	r1, r1, #6
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	225d      	movs	r2, #93	; 0x5d
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225c      	movs	r2, #92	; 0x5c
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e010      	b.n	8003e82 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d18e      	bne.n	8003d9e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b00a      	add	sp, #40	; 0x28
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	ffffdfff 	.word	0xffffdfff

08003e94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	2382      	movs	r3, #130	; 0x82
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d113      	bne.n	8003ed4 <SPI_EndRxTransaction+0x40>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d005      	beq.n	8003ec4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d107      	bne.n	8003ed4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0013      	movs	r3, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	f7ff fea7 	bl	8003c34 <SPI_WaitFlagStateUntilTimeout>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d007      	beq.n	8003efa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	2220      	movs	r2, #32
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e026      	b.n	8003f48 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2382      	movs	r3, #130	; 0x82
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d11f      	bne.n	8003f46 <SPI_EndRxTransaction+0xb2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d005      	beq.n	8003f1e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d113      	bne.n	8003f46 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	23c0      	movs	r3, #192	; 0xc0
 8003f22:	00d9      	lsls	r1, r3, #3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f7ff ff0f 	bl	8003d50 <SPI_WaitFifoStateUntilTimeout>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d007      	beq.n	8003f46 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e000      	b.n	8003f48 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b004      	add	sp, #16
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	23c0      	movs	r3, #192	; 0xc0
 8003f60:	0159      	lsls	r1, r3, #5
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	0013      	movs	r3, r2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f7ff fef0 	bl	8003d50 <SPI_WaitFifoStateUntilTimeout>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d007      	beq.n	8003f84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	2220      	movs	r2, #32
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e027      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	f7ff fe4f 	bl	8003c34 <SPI_WaitFlagStateUntilTimeout>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d007      	beq.n	8003faa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e014      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	23c0      	movs	r3, #192	; 0xc0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	0013      	movs	r3, r2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f7ff fec9 	bl	8003d50 <SPI_WaitFifoStateUntilTimeout>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d007      	beq.n	8003fd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e000      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e046      	b.n	800407c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2284      	movs	r2, #132	; 0x84
 8003ff2:	589b      	ldr	r3, [r3, r2]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f7fd f9c8 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2284      	movs	r2, #132	; 0x84
 800400c:	2124      	movs	r1, #36	; 0x24
 800400e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0018      	movs	r0, r3
 8004024:	f000 f830 	bl	8004088 <UART_SetConfig>
 8004028:	0003      	movs	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e024      	b.n	800407c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 f98d 	bl	800435c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	490d      	ldr	r1, [pc, #52]	; (8004084 <HAL_UART_Init+0xa8>)
 800404e:	400a      	ands	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	212a      	movs	r1, #42	; 0x2a
 800405e:	438a      	bics	r2, r1
 8004060:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 fa25 	bl	80044c4 <UART_CheckIdleState>
 800407a:	0003      	movs	r3, r0
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}
 8004084:	ffffb7ff 	.word	0xffffb7ff

08004088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004090:	231a      	movs	r3, #26
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4aa1      	ldr	r2, [pc, #644]	; (800433c <UART_SetConfig+0x2b4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a9c      	ldr	r2, [pc, #624]	; (8004340 <UART_SetConfig+0x2b8>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a93      	ldr	r2, [pc, #588]	; (8004344 <UART_SetConfig+0x2bc>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	220f      	movs	r2, #15
 800410c:	4393      	bics	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a89      	ldr	r2, [pc, #548]	; (8004348 <UART_SetConfig+0x2c0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d127      	bne.n	8004176 <UART_SetConfig+0xee>
 8004126:	4b89      	ldr	r3, [pc, #548]	; (800434c <UART_SetConfig+0x2c4>)
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	2203      	movs	r2, #3
 800412c:	4013      	ands	r3, r2
 800412e:	2b03      	cmp	r3, #3
 8004130:	d017      	beq.n	8004162 <UART_SetConfig+0xda>
 8004132:	d81b      	bhi.n	800416c <UART_SetConfig+0xe4>
 8004134:	2b02      	cmp	r3, #2
 8004136:	d00a      	beq.n	800414e <UART_SetConfig+0xc6>
 8004138:	d818      	bhi.n	800416c <UART_SetConfig+0xe4>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <UART_SetConfig+0xbc>
 800413e:	2b01      	cmp	r3, #1
 8004140:	d00a      	beq.n	8004158 <UART_SetConfig+0xd0>
 8004142:	e013      	b.n	800416c <UART_SetConfig+0xe4>
 8004144:	231b      	movs	r3, #27
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e021      	b.n	8004192 <UART_SetConfig+0x10a>
 800414e:	231b      	movs	r3, #27
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2202      	movs	r2, #2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e01c      	b.n	8004192 <UART_SetConfig+0x10a>
 8004158:	231b      	movs	r3, #27
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2204      	movs	r2, #4
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e017      	b.n	8004192 <UART_SetConfig+0x10a>
 8004162:	231b      	movs	r3, #27
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2208      	movs	r2, #8
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e012      	b.n	8004192 <UART_SetConfig+0x10a>
 800416c:	231b      	movs	r3, #27
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2210      	movs	r2, #16
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e00d      	b.n	8004192 <UART_SetConfig+0x10a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a75      	ldr	r2, [pc, #468]	; (8004350 <UART_SetConfig+0x2c8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d104      	bne.n	800418a <UART_SetConfig+0x102>
 8004180:	231b      	movs	r3, #27
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e003      	b.n	8004192 <UART_SetConfig+0x10a>
 800418a:	231b      	movs	r3, #27
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2210      	movs	r2, #16
 8004190:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	429a      	cmp	r2, r3
 800419c:	d000      	beq.n	80041a0 <UART_SetConfig+0x118>
 800419e:	e065      	b.n	800426c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80041a0:	231b      	movs	r3, #27
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d015      	beq.n	80041d6 <UART_SetConfig+0x14e>
 80041aa:	dc18      	bgt.n	80041de <UART_SetConfig+0x156>
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d00d      	beq.n	80041cc <UART_SetConfig+0x144>
 80041b0:	dc15      	bgt.n	80041de <UART_SetConfig+0x156>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <UART_SetConfig+0x134>
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d005      	beq.n	80041c6 <UART_SetConfig+0x13e>
 80041ba:	e010      	b.n	80041de <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fe fec4 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 80041c0:	0003      	movs	r3, r0
 80041c2:	617b      	str	r3, [r7, #20]
        break;
 80041c4:	e012      	b.n	80041ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c6:	4b63      	ldr	r3, [pc, #396]	; (8004354 <UART_SetConfig+0x2cc>)
 80041c8:	617b      	str	r3, [r7, #20]
        break;
 80041ca:	e00f      	b.n	80041ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041cc:	f7fe fe30 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80041d0:	0003      	movs	r3, r0
 80041d2:	617b      	str	r3, [r7, #20]
        break;
 80041d4:	e00a      	b.n	80041ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
        break;
 80041dc:	e006      	b.n	80041ec <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041e2:	231a      	movs	r3, #26
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
        break;
 80041ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d100      	bne.n	80041f4 <UART_SetConfig+0x16c>
 80041f2:	e08d      	b.n	8004310 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f8:	4b57      	ldr	r3, [pc, #348]	; (8004358 <UART_SetConfig+0x2d0>)
 80041fa:	0052      	lsls	r2, r2, #1
 80041fc:	5ad3      	ldrh	r3, [r2, r3]
 80041fe:	0019      	movs	r1, r3
 8004200:	6978      	ldr	r0, [r7, #20]
 8004202:	f7fb ff7d 	bl	8000100 <__udivsi3>
 8004206:	0003      	movs	r3, r0
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f7fb ff71 	bl	8000100 <__udivsi3>
 800421e:	0003      	movs	r3, r0
 8004220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d91c      	bls.n	8004262 <UART_SetConfig+0x1da>
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	429a      	cmp	r2, r3
 8004230:	d217      	bcs.n	8004262 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	b29a      	uxth	r2, r3
 8004236:	200e      	movs	r0, #14
 8004238:	183b      	adds	r3, r7, r0
 800423a:	210f      	movs	r1, #15
 800423c:	438a      	bics	r2, r1
 800423e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	2207      	movs	r2, #7
 8004248:	4013      	ands	r3, r2
 800424a:	b299      	uxth	r1, r3
 800424c:	183b      	adds	r3, r7, r0
 800424e:	183a      	adds	r2, r7, r0
 8004250:	8812      	ldrh	r2, [r2, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	183a      	adds	r2, r7, r0
 800425c:	8812      	ldrh	r2, [r2, #0]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e056      	b.n	8004310 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004262:	231a      	movs	r3, #26
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e051      	b.n	8004310 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800426c:	231b      	movs	r3, #27
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d015      	beq.n	80042a2 <UART_SetConfig+0x21a>
 8004276:	dc18      	bgt.n	80042aa <UART_SetConfig+0x222>
 8004278:	2b04      	cmp	r3, #4
 800427a:	d00d      	beq.n	8004298 <UART_SetConfig+0x210>
 800427c:	dc15      	bgt.n	80042aa <UART_SetConfig+0x222>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0x200>
 8004282:	2b02      	cmp	r3, #2
 8004284:	d005      	beq.n	8004292 <UART_SetConfig+0x20a>
 8004286:	e010      	b.n	80042aa <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7fe fe5e 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 800428c:	0003      	movs	r3, r0
 800428e:	617b      	str	r3, [r7, #20]
        break;
 8004290:	e012      	b.n	80042b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <UART_SetConfig+0x2cc>)
 8004294:	617b      	str	r3, [r7, #20]
        break;
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004298:	f7fe fdca 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 800429c:	0003      	movs	r3, r0
 800429e:	617b      	str	r3, [r7, #20]
        break;
 80042a0:	e00a      	b.n	80042b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	617b      	str	r3, [r7, #20]
        break;
 80042a8:	e006      	b.n	80042b8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042ae:	231a      	movs	r3, #26
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
        break;
 80042b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	4b25      	ldr	r3, [pc, #148]	; (8004358 <UART_SetConfig+0x2d0>)
 80042c4:	0052      	lsls	r2, r2, #1
 80042c6:	5ad3      	ldrh	r3, [r2, r3]
 80042c8:	0019      	movs	r1, r3
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7fb ff18 	bl	8000100 <__udivsi3>
 80042d0:	0003      	movs	r3, r0
 80042d2:	001a      	movs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	18d2      	adds	r2, r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0019      	movs	r1, r3
 80042e2:	0010      	movs	r0, r2
 80042e4:	f7fb ff0c 	bl	8000100 <__udivsi3>
 80042e8:	0003      	movs	r3, r0
 80042ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d90a      	bls.n	8004308 <UART_SetConfig+0x280>
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d205      	bcs.n	8004308 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60da      	str	r2, [r3, #12]
 8004306:	e003      	b.n	8004310 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004308:	231a      	movs	r3, #26
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	226a      	movs	r2, #106	; 0x6a
 8004314:	2101      	movs	r1, #1
 8004316:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2268      	movs	r2, #104	; 0x68
 800431c:	2101      	movs	r1, #1
 800431e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800432c:	231a      	movs	r3, #26
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	781b      	ldrb	r3, [r3, #0]
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	b008      	add	sp, #32
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	cfff69f3 	.word	0xcfff69f3
 8004340:	ffffcfff 	.word	0xffffcfff
 8004344:	11fff4ff 	.word	0x11fff4ff
 8004348:	40013800 	.word	0x40013800
 800434c:	40021000 	.word	0x40021000
 8004350:	40004400 	.word	0x40004400
 8004354:	00f42400 	.word	0x00f42400
 8004358:	08005278 	.word	0x08005278

0800435c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2201      	movs	r2, #1
 800436a:	4013      	ands	r3, r2
 800436c:	d00b      	beq.n	8004386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a4a      	ldr	r2, [pc, #296]	; (80044a0 <UART_AdvFeatureConfig+0x144>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	2202      	movs	r2, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d00b      	beq.n	80043a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a43      	ldr	r2, [pc, #268]	; (80044a4 <UART_AdvFeatureConfig+0x148>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2204      	movs	r2, #4
 80043ae:	4013      	ands	r3, r2
 80043b0:	d00b      	beq.n	80043ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a3b      	ldr	r2, [pc, #236]	; (80044a8 <UART_AdvFeatureConfig+0x14c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	2208      	movs	r2, #8
 80043d0:	4013      	ands	r3, r2
 80043d2:	d00b      	beq.n	80043ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4a34      	ldr	r2, [pc, #208]	; (80044ac <UART_AdvFeatureConfig+0x150>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	2210      	movs	r2, #16
 80043f2:	4013      	ands	r3, r2
 80043f4:	d00b      	beq.n	800440e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4a2c      	ldr	r2, [pc, #176]	; (80044b0 <UART_AdvFeatureConfig+0x154>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	2220      	movs	r2, #32
 8004414:	4013      	ands	r3, r2
 8004416:	d00b      	beq.n	8004430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4a25      	ldr	r2, [pc, #148]	; (80044b4 <UART_AdvFeatureConfig+0x158>)
 8004420:	4013      	ands	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	4013      	ands	r3, r2
 8004438:	d01d      	beq.n	8004476 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <UART_AdvFeatureConfig+0x15c>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	035b      	lsls	r3, r3, #13
 800445a:	429a      	cmp	r2, r3
 800445c:	d10b      	bne.n	8004476 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <UART_AdvFeatureConfig+0x160>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	4013      	ands	r3, r2
 800447e:	d00b      	beq.n	8004498 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <UART_AdvFeatureConfig+0x164>)
 8004488:	4013      	ands	r3, r2
 800448a:	0019      	movs	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	b002      	add	sp, #8
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	fffdffff 	.word	0xfffdffff
 80044a4:	fffeffff 	.word	0xfffeffff
 80044a8:	fffbffff 	.word	0xfffbffff
 80044ac:	ffff7fff 	.word	0xffff7fff
 80044b0:	ffffefff 	.word	0xffffefff
 80044b4:	ffffdfff 	.word	0xffffdfff
 80044b8:	ffefffff 	.word	0xffefffff
 80044bc:	ff9fffff 	.word	0xff9fffff
 80044c0:	fff7ffff 	.word	0xfff7ffff

080044c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	228c      	movs	r2, #140	; 0x8c
 80044d0:	2100      	movs	r1, #0
 80044d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d4:	f7fd f94a 	bl	800176c <HAL_GetTick>
 80044d8:	0003      	movs	r3, r0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2208      	movs	r2, #8
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d10c      	bne.n	8004504 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	0391      	lsls	r1, r2, #14
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4a18      	ldr	r2, [pc, #96]	; (8004554 <UART_CheckIdleState+0x90>)
 80044f4:	9200      	str	r2, [sp, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f000 f82e 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 80044fc:	1e03      	subs	r3, r0, #0
 80044fe:	d001      	beq.n	8004504 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e023      	b.n	800454c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2204      	movs	r2, #4
 800450c:	4013      	ands	r3, r2
 800450e:	2b04      	cmp	r3, #4
 8004510:	d10c      	bne.n	800452c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	03d1      	lsls	r1, r2, #15
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <UART_CheckIdleState+0x90>)
 800451c:	9200      	str	r2, [sp, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	f000 f81a 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e00f      	b.n	800454c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2284      	movs	r2, #132	; 0x84
 8004530:	2120      	movs	r1, #32
 8004532:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2288      	movs	r2, #136	; 0x88
 8004538:	2120      	movs	r1, #32
 800453a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b004      	add	sp, #16
 8004552:	bd80      	pop	{r7, pc}
 8004554:	01ffffff 	.word	0x01ffffff

08004558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b094      	sub	sp, #80	; 0x50
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	e0a7      	b.n	80046ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800456c:	3301      	adds	r3, #1
 800456e:	d100      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004570:	e0a3      	b.n	80046ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fd f8fb 	bl	800176c <HAL_GetTick>
 8004576:	0002      	movs	r2, r0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
 8004582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004584:	2b00      	cmp	r3, #0
 8004586:	d13f      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004588:	f3ef 8310 	mrs	r3, PRIMASK
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
 8004592:	2301      	movs	r3, #1
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	494e      	ldr	r1, [pc, #312]	; (80046e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	f383 8810 	msr	PRIMASK, r3
}
 80045b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ba:	f3ef 8310 	mrs	r3, PRIMASK
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40
 80045c4:	2301      	movs	r3, #1
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2101      	movs	r1, #1
 80045dc:	438a      	bics	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2284      	movs	r2, #132	; 0x84
 80045f0:	2120      	movs	r1, #32
 80045f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2288      	movs	r2, #136	; 0x88
 80045f8:	2120      	movs	r1, #32
 80045fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	2100      	movs	r1, #0
 8004602:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e069      	b.n	80046dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2204      	movs	r2, #4
 8004610:	4013      	ands	r3, r2
 8004612:	d052      	beq.n	80046ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	401a      	ands	r2, r3
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	429a      	cmp	r2, r3
 8004626:	d148      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	0112      	lsls	r2, r2, #4
 8004630:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004632:	f3ef 8310 	mrs	r3, PRIMASK
 8004636:	613b      	str	r3, [r7, #16]
  return(result);
 8004638:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f383 8810 	msr	PRIMASK, r3
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4924      	ldr	r1, [pc, #144]	; (80046e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004664:	f3ef 8310 	mrs	r3, PRIMASK
 8004668:	61fb      	str	r3, [r7, #28]
  return(result);
 800466a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
 800466e:	2301      	movs	r3, #1
 8004670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f383 8810 	msr	PRIMASK, r3
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	438a      	bics	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f383 8810 	msr	PRIMASK, r3
}
 8004694:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2284      	movs	r2, #132	; 0x84
 800469a:	2120      	movs	r1, #32
 800469c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2288      	movs	r2, #136	; 0x88
 80046a2:	2120      	movs	r1, #32
 80046a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	228c      	movs	r2, #140	; 0x8c
 80046aa:	2120      	movs	r1, #32
 80046ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e010      	b.n	80046dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	425a      	negs	r2, r3
 80046ca:	4153      	adcs	r3, r2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	001a      	movs	r2, r3
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d100      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x182>
 80046d8:	e747      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b014      	add	sp, #80	; 0x50
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	fffffe5f 	.word	0xfffffe5f

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	2000000c 	.word	0x2000000c

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	2600      	movs	r6, #0
 80046f8:	4d0c      	ldr	r5, [pc, #48]	; (800472c <__libc_init_array+0x38>)
 80046fa:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fc:	1b64      	subs	r4, r4, r5
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	2600      	movs	r6, #0
 8004706:	f000 fd6b 	bl	80051e0 <_init>
 800470a:	4d0a      	ldr	r5, [pc, #40]	; (8004734 <__libc_init_array+0x40>)
 800470c:	4c0a      	ldr	r4, [pc, #40]	; (8004738 <__libc_init_array+0x44>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	00b3      	lsls	r3, r6, #2
 800471a:	58eb      	ldr	r3, [r5, r3]
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	00b3      	lsls	r3, r6, #2
 8004724:	58eb      	ldr	r3, [r5, r3]
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	080052fc 	.word	0x080052fc
 8004730:	080052fc 	.word	0x080052fc
 8004734:	080052fc 	.word	0x080052fc
 8004738:	08005300 	.word	0x08005300

0800473c <memset>:
 800473c:	0003      	movs	r3, r0
 800473e:	1882      	adds	r2, r0, r2
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	7019      	strb	r1, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <_puts_r>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	0005      	movs	r5, r0
 8004750:	000e      	movs	r6, r1
 8004752:	2800      	cmp	r0, #0
 8004754:	d004      	beq.n	8004760 <_puts_r+0x14>
 8004756:	6983      	ldr	r3, [r0, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <_puts_r+0x14>
 800475c:	f000 fa6e 	bl	8004c3c <__sinit>
 8004760:	69ab      	ldr	r3, [r5, #24]
 8004762:	68ac      	ldr	r4, [r5, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <_puts_r+0x22>
 8004768:	0028      	movs	r0, r5
 800476a:	f000 fa67 	bl	8004c3c <__sinit>
 800476e:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <_puts_r+0xd8>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d122      	bne.n	80047ba <_puts_r+0x6e>
 8004774:	686c      	ldr	r4, [r5, #4]
 8004776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004778:	07db      	lsls	r3, r3, #31
 800477a:	d405      	bmi.n	8004788 <_puts_r+0x3c>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	059b      	lsls	r3, r3, #22
 8004780:	d402      	bmi.n	8004788 <_puts_r+0x3c>
 8004782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004784:	f000 fafb 	bl	8004d7e <__retarget_lock_acquire_recursive>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	071b      	lsls	r3, r3, #28
 800478c:	d502      	bpl.n	8004794 <_puts_r+0x48>
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d129      	bne.n	80047e8 <_puts_r+0x9c>
 8004794:	0021      	movs	r1, r4
 8004796:	0028      	movs	r0, r5
 8004798:	f000 f8aa 	bl	80048f0 <__swsetup_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	d023      	beq.n	80047e8 <_puts_r+0x9c>
 80047a0:	2501      	movs	r5, #1
 80047a2:	426d      	negs	r5, r5
 80047a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a6:	07db      	lsls	r3, r3, #31
 80047a8:	d405      	bmi.n	80047b6 <_puts_r+0x6a>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d402      	bmi.n	80047b6 <_puts_r+0x6a>
 80047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b2:	f000 fae5 	bl	8004d80 <__retarget_lock_release_recursive>
 80047b6:	0028      	movs	r0, r5
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <_puts_r+0xdc>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d101      	bne.n	80047c4 <_puts_r+0x78>
 80047c0:	68ac      	ldr	r4, [r5, #8]
 80047c2:	e7d8      	b.n	8004776 <_puts_r+0x2a>
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <_puts_r+0xe0>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d1d5      	bne.n	8004776 <_puts_r+0x2a>
 80047ca:	68ec      	ldr	r4, [r5, #12]
 80047cc:	e7d3      	b.n	8004776 <_puts_r+0x2a>
 80047ce:	3601      	adds	r6, #1
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da04      	bge.n	80047e0 <_puts_r+0x94>
 80047d6:	69a2      	ldr	r2, [r4, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	dc16      	bgt.n	800480a <_puts_r+0xbe>
 80047dc:	290a      	cmp	r1, #10
 80047de:	d014      	beq.n	800480a <_puts_r+0xbe>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	7019      	strb	r1, [r3, #0]
 80047e8:	68a3      	ldr	r3, [r4, #8]
 80047ea:	7831      	ldrb	r1, [r6, #0]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	2900      	cmp	r1, #0
 80047f0:	d1ed      	bne.n	80047ce <_puts_r+0x82>
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da0f      	bge.n	8004818 <_puts_r+0xcc>
 80047f8:	0028      	movs	r0, r5
 80047fa:	0022      	movs	r2, r4
 80047fc:	310a      	adds	r1, #10
 80047fe:	f000 f821 	bl	8004844 <__swbuf_r>
 8004802:	250a      	movs	r5, #10
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d1cd      	bne.n	80047a4 <_puts_r+0x58>
 8004808:	e7ca      	b.n	80047a0 <_puts_r+0x54>
 800480a:	0022      	movs	r2, r4
 800480c:	0028      	movs	r0, r5
 800480e:	f000 f819 	bl	8004844 <__swbuf_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d1e8      	bne.n	80047e8 <_puts_r+0x9c>
 8004816:	e7c3      	b.n	80047a0 <_puts_r+0x54>
 8004818:	250a      	movs	r5, #10
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	701d      	strb	r5, [r3, #0]
 8004822:	e7bf      	b.n	80047a4 <_puts_r+0x58>
 8004824:	080052b4 	.word	0x080052b4
 8004828:	080052d4 	.word	0x080052d4
 800482c:	08005294 	.word	0x08005294

08004830 <puts>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4b03      	ldr	r3, [pc, #12]	; (8004840 <puts+0x10>)
 8004834:	0001      	movs	r1, r0
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f7ff ff88 	bl	800474c <_puts_r>
 800483c:	bd10      	pop	{r4, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	2000000c 	.word	0x2000000c

08004844 <__swbuf_r>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	0005      	movs	r5, r0
 8004848:	000e      	movs	r6, r1
 800484a:	0014      	movs	r4, r2
 800484c:	2800      	cmp	r0, #0
 800484e:	d004      	beq.n	800485a <__swbuf_r+0x16>
 8004850:	6983      	ldr	r3, [r0, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <__swbuf_r+0x16>
 8004856:	f000 f9f1 	bl	8004c3c <__sinit>
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <__swbuf_r+0xa0>)
 800485c:	429c      	cmp	r4, r3
 800485e:	d12e      	bne.n	80048be <__swbuf_r+0x7a>
 8004860:	686c      	ldr	r4, [r5, #4]
 8004862:	69a3      	ldr	r3, [r4, #24]
 8004864:	60a3      	str	r3, [r4, #8]
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	071b      	lsls	r3, r3, #28
 800486a:	d532      	bpl.n	80048d2 <__swbuf_r+0x8e>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02f      	beq.n	80048d2 <__swbuf_r+0x8e>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	6922      	ldr	r2, [r4, #16]
 8004876:	b2f7      	uxtb	r7, r6
 8004878:	1a98      	subs	r0, r3, r2
 800487a:	6963      	ldr	r3, [r4, #20]
 800487c:	b2f6      	uxtb	r6, r6
 800487e:	4283      	cmp	r3, r0
 8004880:	dc05      	bgt.n	800488e <__swbuf_r+0x4a>
 8004882:	0021      	movs	r1, r4
 8004884:	0028      	movs	r0, r5
 8004886:	f000 f937 	bl	8004af8 <_fflush_r>
 800488a:	2800      	cmp	r0, #0
 800488c:	d127      	bne.n	80048de <__swbuf_r+0x9a>
 800488e:	68a3      	ldr	r3, [r4, #8]
 8004890:	3001      	adds	r0, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	60a3      	str	r3, [r4, #8]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	701f      	strb	r7, [r3, #0]
 800489e:	6963      	ldr	r3, [r4, #20]
 80048a0:	4283      	cmp	r3, r0
 80048a2:	d004      	beq.n	80048ae <__swbuf_r+0x6a>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	07db      	lsls	r3, r3, #31
 80048a8:	d507      	bpl.n	80048ba <__swbuf_r+0x76>
 80048aa:	2e0a      	cmp	r6, #10
 80048ac:	d105      	bne.n	80048ba <__swbuf_r+0x76>
 80048ae:	0021      	movs	r1, r4
 80048b0:	0028      	movs	r0, r5
 80048b2:	f000 f921 	bl	8004af8 <_fflush_r>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d111      	bne.n	80048de <__swbuf_r+0x9a>
 80048ba:	0030      	movs	r0, r6
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <__swbuf_r+0xa4>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d101      	bne.n	80048c8 <__swbuf_r+0x84>
 80048c4:	68ac      	ldr	r4, [r5, #8]
 80048c6:	e7cc      	b.n	8004862 <__swbuf_r+0x1e>
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <__swbuf_r+0xa8>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d1c9      	bne.n	8004862 <__swbuf_r+0x1e>
 80048ce:	68ec      	ldr	r4, [r5, #12]
 80048d0:	e7c7      	b.n	8004862 <__swbuf_r+0x1e>
 80048d2:	0021      	movs	r1, r4
 80048d4:	0028      	movs	r0, r5
 80048d6:	f000 f80b 	bl	80048f0 <__swsetup_r>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d0c9      	beq.n	8004872 <__swbuf_r+0x2e>
 80048de:	2601      	movs	r6, #1
 80048e0:	4276      	negs	r6, r6
 80048e2:	e7ea      	b.n	80048ba <__swbuf_r+0x76>
 80048e4:	080052b4 	.word	0x080052b4
 80048e8:	080052d4 	.word	0x080052d4
 80048ec:	08005294 	.word	0x08005294

080048f0 <__swsetup_r>:
 80048f0:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <__swsetup_r+0xe0>)
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	681d      	ldr	r5, [r3, #0]
 80048f6:	0006      	movs	r6, r0
 80048f8:	000c      	movs	r4, r1
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	d005      	beq.n	800490a <__swsetup_r+0x1a>
 80048fe:	69ab      	ldr	r3, [r5, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <__swsetup_r+0x1a>
 8004904:	0028      	movs	r0, r5
 8004906:	f000 f999 	bl	8004c3c <__sinit>
 800490a:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <__swsetup_r+0xe4>)
 800490c:	429c      	cmp	r4, r3
 800490e:	d10f      	bne.n	8004930 <__swsetup_r+0x40>
 8004910:	686c      	ldr	r4, [r5, #4]
 8004912:	230c      	movs	r3, #12
 8004914:	5ee2      	ldrsh	r2, [r4, r3]
 8004916:	b293      	uxth	r3, r2
 8004918:	0711      	lsls	r1, r2, #28
 800491a:	d42d      	bmi.n	8004978 <__swsetup_r+0x88>
 800491c:	06d9      	lsls	r1, r3, #27
 800491e:	d411      	bmi.n	8004944 <__swsetup_r+0x54>
 8004920:	2309      	movs	r3, #9
 8004922:	2001      	movs	r0, #1
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	3337      	adds	r3, #55	; 0x37
 8004928:	4313      	orrs	r3, r2
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	4240      	negs	r0, r0
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <__swsetup_r+0xe8>)
 8004932:	429c      	cmp	r4, r3
 8004934:	d101      	bne.n	800493a <__swsetup_r+0x4a>
 8004936:	68ac      	ldr	r4, [r5, #8]
 8004938:	e7eb      	b.n	8004912 <__swsetup_r+0x22>
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <__swsetup_r+0xec>)
 800493c:	429c      	cmp	r4, r3
 800493e:	d1e8      	bne.n	8004912 <__swsetup_r+0x22>
 8004940:	68ec      	ldr	r4, [r5, #12]
 8004942:	e7e6      	b.n	8004912 <__swsetup_r+0x22>
 8004944:	075b      	lsls	r3, r3, #29
 8004946:	d513      	bpl.n	8004970 <__swsetup_r+0x80>
 8004948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800494a:	2900      	cmp	r1, #0
 800494c:	d008      	beq.n	8004960 <__swsetup_r+0x70>
 800494e:	0023      	movs	r3, r4
 8004950:	3344      	adds	r3, #68	; 0x44
 8004952:	4299      	cmp	r1, r3
 8004954:	d002      	beq.n	800495c <__swsetup_r+0x6c>
 8004956:	0030      	movs	r0, r6
 8004958:	f000 fa80 	bl	8004e5c <_free_r>
 800495c:	2300      	movs	r3, #0
 800495e:	6363      	str	r3, [r4, #52]	; 0x34
 8004960:	2224      	movs	r2, #36	; 0x24
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	4393      	bics	r3, r2
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	2300      	movs	r3, #0
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	2308      	movs	r3, #8
 8004972:	89a2      	ldrh	r2, [r4, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <__swsetup_r+0xa6>
 800497e:	21a0      	movs	r1, #160	; 0xa0
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	0089      	lsls	r1, r1, #2
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	400b      	ands	r3, r1
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <__swsetup_r+0xa6>
 800498e:	0021      	movs	r1, r4
 8004990:	0030      	movs	r0, r6
 8004992:	f000 fa1f 	bl	8004dd4 <__smakebuf_r>
 8004996:	220c      	movs	r2, #12
 8004998:	5ea3      	ldrsh	r3, [r4, r2]
 800499a:	2001      	movs	r0, #1
 800499c:	001a      	movs	r2, r3
 800499e:	b299      	uxth	r1, r3
 80049a0:	4002      	ands	r2, r0
 80049a2:	4203      	tst	r3, r0
 80049a4:	d00f      	beq.n	80049c6 <__swsetup_r+0xd6>
 80049a6:	2200      	movs	r2, #0
 80049a8:	60a2      	str	r2, [r4, #8]
 80049aa:	6962      	ldr	r2, [r4, #20]
 80049ac:	4252      	negs	r2, r2
 80049ae:	61a2      	str	r2, [r4, #24]
 80049b0:	2000      	movs	r0, #0
 80049b2:	6922      	ldr	r2, [r4, #16]
 80049b4:	4282      	cmp	r2, r0
 80049b6:	d1ba      	bne.n	800492e <__swsetup_r+0x3e>
 80049b8:	060a      	lsls	r2, r1, #24
 80049ba:	d5b8      	bpl.n	800492e <__swsetup_r+0x3e>
 80049bc:	2240      	movs	r2, #64	; 0x40
 80049be:	4313      	orrs	r3, r2
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	3801      	subs	r0, #1
 80049c4:	e7b3      	b.n	800492e <__swsetup_r+0x3e>
 80049c6:	0788      	lsls	r0, r1, #30
 80049c8:	d400      	bmi.n	80049cc <__swsetup_r+0xdc>
 80049ca:	6962      	ldr	r2, [r4, #20]
 80049cc:	60a2      	str	r2, [r4, #8]
 80049ce:	e7ef      	b.n	80049b0 <__swsetup_r+0xc0>
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	080052b4 	.word	0x080052b4
 80049d8:	080052d4 	.word	0x080052d4
 80049dc:	08005294 	.word	0x08005294

080049e0 <__sflush_r>:
 80049e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e2:	898b      	ldrh	r3, [r1, #12]
 80049e4:	0005      	movs	r5, r0
 80049e6:	000c      	movs	r4, r1
 80049e8:	071a      	lsls	r2, r3, #28
 80049ea:	d45f      	bmi.n	8004aac <__sflush_r+0xcc>
 80049ec:	684a      	ldr	r2, [r1, #4]
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	dc04      	bgt.n	80049fc <__sflush_r+0x1c>
 80049f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	dc01      	bgt.n	80049fc <__sflush_r+0x1c>
 80049f8:	2000      	movs	r0, #0
 80049fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d0fa      	beq.n	80049f8 <__sflush_r+0x18>
 8004a02:	2200      	movs	r2, #0
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	682e      	ldr	r6, [r5, #0]
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	0149      	lsls	r1, r1, #5
 8004a0e:	400a      	ands	r2, r1
 8004a10:	420b      	tst	r3, r1
 8004a12:	d034      	beq.n	8004a7e <__sflush_r+0x9e>
 8004a14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	075b      	lsls	r3, r3, #29
 8004a1a:	d506      	bpl.n	8004a2a <__sflush_r+0x4a>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	1ac0      	subs	r0, r0, r3
 8004a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <__sflush_r+0x4a>
 8004a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a28:	1ac0      	subs	r0, r0, r3
 8004a2a:	0002      	movs	r2, r0
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	0028      	movs	r0, r5
 8004a32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a34:	47b8      	blx	r7
 8004a36:	89a1      	ldrh	r1, [r4, #12]
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d106      	bne.n	8004a4a <__sflush_r+0x6a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	2b1d      	cmp	r3, #29
 8004a40:	d831      	bhi.n	8004aa6 <__sflush_r+0xc6>
 8004a42:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <__sflush_r+0x114>)
 8004a44:	40da      	lsrs	r2, r3
 8004a46:	07d3      	lsls	r3, r2, #31
 8004a48:	d52d      	bpl.n	8004aa6 <__sflush_r+0xc6>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	04cb      	lsls	r3, r1, #19
 8004a54:	d505      	bpl.n	8004a62 <__sflush_r+0x82>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	d102      	bne.n	8004a60 <__sflush_r+0x80>
 8004a5a:	682b      	ldr	r3, [r5, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d100      	bne.n	8004a62 <__sflush_r+0x82>
 8004a60:	6560      	str	r0, [r4, #84]	; 0x54
 8004a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a64:	602e      	str	r6, [r5, #0]
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d0c6      	beq.n	80049f8 <__sflush_r+0x18>
 8004a6a:	0023      	movs	r3, r4
 8004a6c:	3344      	adds	r3, #68	; 0x44
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	d002      	beq.n	8004a78 <__sflush_r+0x98>
 8004a72:	0028      	movs	r0, r5
 8004a74:	f000 f9f2 	bl	8004e5c <_free_r>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	6360      	str	r0, [r4, #52]	; 0x34
 8004a7c:	e7bd      	b.n	80049fa <__sflush_r+0x1a>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	0028      	movs	r0, r5
 8004a82:	6a21      	ldr	r1, [r4, #32]
 8004a84:	47b8      	blx	r7
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d1c5      	bne.n	8004a16 <__sflush_r+0x36>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0c2      	beq.n	8004a16 <__sflush_r+0x36>
 8004a90:	2b1d      	cmp	r3, #29
 8004a92:	d001      	beq.n	8004a98 <__sflush_r+0xb8>
 8004a94:	2b16      	cmp	r3, #22
 8004a96:	d101      	bne.n	8004a9c <__sflush_r+0xbc>
 8004a98:	602e      	str	r6, [r5, #0]
 8004a9a:	e7ad      	b.n	80049f8 <__sflush_r+0x18>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	89a2      	ldrh	r2, [r4, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	e7a9      	b.n	80049fa <__sflush_r+0x1a>
 8004aa6:	2340      	movs	r3, #64	; 0x40
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	e7fa      	b.n	8004aa2 <__sflush_r+0xc2>
 8004aac:	690f      	ldr	r7, [r1, #16]
 8004aae:	2f00      	cmp	r7, #0
 8004ab0:	d0a2      	beq.n	80049f8 <__sflush_r+0x18>
 8004ab2:	680a      	ldr	r2, [r1, #0]
 8004ab4:	600f      	str	r7, [r1, #0]
 8004ab6:	1bd2      	subs	r2, r2, r7
 8004ab8:	9201      	str	r2, [sp, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	079b      	lsls	r3, r3, #30
 8004abe:	d100      	bne.n	8004ac2 <__sflush_r+0xe2>
 8004ac0:	694a      	ldr	r2, [r1, #20]
 8004ac2:	60a2      	str	r2, [r4, #8]
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc00      	bgt.n	8004acc <__sflush_r+0xec>
 8004aca:	e795      	b.n	80049f8 <__sflush_r+0x18>
 8004acc:	003a      	movs	r2, r7
 8004ace:	0028      	movs	r0, r5
 8004ad0:	9b01      	ldr	r3, [sp, #4]
 8004ad2:	6a21      	ldr	r1, [r4, #32]
 8004ad4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad6:	47b0      	blx	r6
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	dc06      	bgt.n	8004aea <__sflush_r+0x10a>
 8004adc:	2340      	movs	r3, #64	; 0x40
 8004ade:	2001      	movs	r0, #1
 8004ae0:	89a2      	ldrh	r2, [r4, #12]
 8004ae2:	4240      	negs	r0, r0
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	e787      	b.n	80049fa <__sflush_r+0x1a>
 8004aea:	9b01      	ldr	r3, [sp, #4]
 8004aec:	183f      	adds	r7, r7, r0
 8004aee:	1a1b      	subs	r3, r3, r0
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	e7e7      	b.n	8004ac4 <__sflush_r+0xe4>
 8004af4:	20400001 	.word	0x20400001

08004af8 <_fflush_r>:
 8004af8:	690b      	ldr	r3, [r1, #16]
 8004afa:	b570      	push	{r4, r5, r6, lr}
 8004afc:	0005      	movs	r5, r0
 8004afe:	000c      	movs	r4, r1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <_fflush_r+0x12>
 8004b04:	2500      	movs	r5, #0
 8004b06:	0028      	movs	r0, r5
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d004      	beq.n	8004b18 <_fflush_r+0x20>
 8004b0e:	6983      	ldr	r3, [r0, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <_fflush_r+0x20>
 8004b14:	f000 f892 	bl	8004c3c <__sinit>
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <_fflush_r+0x74>)
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d11b      	bne.n	8004b56 <_fflush_r+0x5e>
 8004b1e:	686c      	ldr	r4, [r5, #4]
 8004b20:	220c      	movs	r2, #12
 8004b22:	5ea3      	ldrsh	r3, [r4, r2]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ed      	beq.n	8004b04 <_fflush_r+0xc>
 8004b28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b2a:	07d2      	lsls	r2, r2, #31
 8004b2c:	d404      	bmi.n	8004b38 <_fflush_r+0x40>
 8004b2e:	059b      	lsls	r3, r3, #22
 8004b30:	d402      	bmi.n	8004b38 <_fflush_r+0x40>
 8004b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b34:	f000 f923 	bl	8004d7e <__retarget_lock_acquire_recursive>
 8004b38:	0028      	movs	r0, r5
 8004b3a:	0021      	movs	r1, r4
 8004b3c:	f7ff ff50 	bl	80049e0 <__sflush_r>
 8004b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b42:	0005      	movs	r5, r0
 8004b44:	07db      	lsls	r3, r3, #31
 8004b46:	d4de      	bmi.n	8004b06 <_fflush_r+0xe>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	059b      	lsls	r3, r3, #22
 8004b4c:	d4db      	bmi.n	8004b06 <_fflush_r+0xe>
 8004b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b50:	f000 f916 	bl	8004d80 <__retarget_lock_release_recursive>
 8004b54:	e7d7      	b.n	8004b06 <_fflush_r+0xe>
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <_fflush_r+0x78>)
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	d101      	bne.n	8004b60 <_fflush_r+0x68>
 8004b5c:	68ac      	ldr	r4, [r5, #8]
 8004b5e:	e7df      	b.n	8004b20 <_fflush_r+0x28>
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <_fflush_r+0x7c>)
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d1dc      	bne.n	8004b20 <_fflush_r+0x28>
 8004b66:	68ec      	ldr	r4, [r5, #12]
 8004b68:	e7da      	b.n	8004b20 <_fflush_r+0x28>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	080052b4 	.word	0x080052b4
 8004b70:	080052d4 	.word	0x080052d4
 8004b74:	08005294 	.word	0x08005294

08004b78 <std>:
 8004b78:	2300      	movs	r3, #0
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	0004      	movs	r4, r0
 8004b7e:	6003      	str	r3, [r0, #0]
 8004b80:	6043      	str	r3, [r0, #4]
 8004b82:	6083      	str	r3, [r0, #8]
 8004b84:	8181      	strh	r1, [r0, #12]
 8004b86:	6643      	str	r3, [r0, #100]	; 0x64
 8004b88:	0019      	movs	r1, r3
 8004b8a:	81c2      	strh	r2, [r0, #14]
 8004b8c:	6103      	str	r3, [r0, #16]
 8004b8e:	6143      	str	r3, [r0, #20]
 8004b90:	6183      	str	r3, [r0, #24]
 8004b92:	2208      	movs	r2, #8
 8004b94:	305c      	adds	r0, #92	; 0x5c
 8004b96:	f7ff fdd1 	bl	800473c <memset>
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <std+0x38>)
 8004b9c:	6224      	str	r4, [r4, #32]
 8004b9e:	6263      	str	r3, [r4, #36]	; 0x24
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <std+0x3c>)
 8004ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <std+0x40>)
 8004ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <std+0x44>)
 8004baa:	6323      	str	r3, [r4, #48]	; 0x30
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	08005045 	.word	0x08005045
 8004bb4:	0800506d 	.word	0x0800506d
 8004bb8:	080050a5 	.word	0x080050a5
 8004bbc:	080050d1 	.word	0x080050d1

08004bc0 <_cleanup_r>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4902      	ldr	r1, [pc, #8]	; (8004bcc <_cleanup_r+0xc>)
 8004bc4:	f000 f8ba 	bl	8004d3c <_fwalk_reent>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	08004af9 	.word	0x08004af9

08004bd0 <__sfmoreglue>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	2568      	movs	r5, #104	; 0x68
 8004bd4:	1e4a      	subs	r2, r1, #1
 8004bd6:	4355      	muls	r5, r2
 8004bd8:	000e      	movs	r6, r1
 8004bda:	0029      	movs	r1, r5
 8004bdc:	3174      	adds	r1, #116	; 0x74
 8004bde:	f000 f9a9 	bl	8004f34 <_malloc_r>
 8004be2:	1e04      	subs	r4, r0, #0
 8004be4:	d008      	beq.n	8004bf8 <__sfmoreglue+0x28>
 8004be6:	2100      	movs	r1, #0
 8004be8:	002a      	movs	r2, r5
 8004bea:	6001      	str	r1, [r0, #0]
 8004bec:	6046      	str	r6, [r0, #4]
 8004bee:	300c      	adds	r0, #12
 8004bf0:	60a0      	str	r0, [r4, #8]
 8004bf2:	3268      	adds	r2, #104	; 0x68
 8004bf4:	f7ff fda2 	bl	800473c <memset>
 8004bf8:	0020      	movs	r0, r4
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}

08004bfc <__sfp_lock_acquire>:
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	4802      	ldr	r0, [pc, #8]	; (8004c08 <__sfp_lock_acquire+0xc>)
 8004c00:	f000 f8bd 	bl	8004d7e <__retarget_lock_acquire_recursive>
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	200001f1 	.word	0x200001f1

08004c0c <__sfp_lock_release>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	4802      	ldr	r0, [pc, #8]	; (8004c18 <__sfp_lock_release+0xc>)
 8004c10:	f000 f8b6 	bl	8004d80 <__retarget_lock_release_recursive>
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	200001f1 	.word	0x200001f1

08004c1c <__sinit_lock_acquire>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4802      	ldr	r0, [pc, #8]	; (8004c28 <__sinit_lock_acquire+0xc>)
 8004c20:	f000 f8ad 	bl	8004d7e <__retarget_lock_acquire_recursive>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	200001f2 	.word	0x200001f2

08004c2c <__sinit_lock_release>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4802      	ldr	r0, [pc, #8]	; (8004c38 <__sinit_lock_release+0xc>)
 8004c30:	f000 f8a6 	bl	8004d80 <__retarget_lock_release_recursive>
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	200001f2 	.word	0x200001f2

08004c3c <__sinit>:
 8004c3c:	b513      	push	{r0, r1, r4, lr}
 8004c3e:	0004      	movs	r4, r0
 8004c40:	f7ff ffec 	bl	8004c1c <__sinit_lock_acquire>
 8004c44:	69a3      	ldr	r3, [r4, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <__sinit+0x14>
 8004c4a:	f7ff ffef 	bl	8004c2c <__sinit_lock_release>
 8004c4e:	bd13      	pop	{r0, r1, r4, pc}
 8004c50:	64a3      	str	r3, [r4, #72]	; 0x48
 8004c52:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004c54:	6523      	str	r3, [r4, #80]	; 0x50
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <__sinit+0x68>)
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <__sinit+0x6c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	d101      	bne.n	8004c68 <__sinit+0x2c>
 8004c64:	2301      	movs	r3, #1
 8004c66:	61a3      	str	r3, [r4, #24]
 8004c68:	0020      	movs	r0, r4
 8004c6a:	f000 f81f 	bl	8004cac <__sfp>
 8004c6e:	6060      	str	r0, [r4, #4]
 8004c70:	0020      	movs	r0, r4
 8004c72:	f000 f81b 	bl	8004cac <__sfp>
 8004c76:	60a0      	str	r0, [r4, #8]
 8004c78:	0020      	movs	r0, r4
 8004c7a:	f000 f817 	bl	8004cac <__sfp>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2104      	movs	r1, #4
 8004c82:	60e0      	str	r0, [r4, #12]
 8004c84:	6860      	ldr	r0, [r4, #4]
 8004c86:	f7ff ff77 	bl	8004b78 <std>
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	2109      	movs	r1, #9
 8004c8e:	68a0      	ldr	r0, [r4, #8]
 8004c90:	f7ff ff72 	bl	8004b78 <std>
 8004c94:	2202      	movs	r2, #2
 8004c96:	2112      	movs	r1, #18
 8004c98:	68e0      	ldr	r0, [r4, #12]
 8004c9a:	f7ff ff6d 	bl	8004b78 <std>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61a3      	str	r3, [r4, #24]
 8004ca2:	e7d2      	b.n	8004c4a <__sinit+0xe>
 8004ca4:	08005290 	.word	0x08005290
 8004ca8:	08004bc1 	.word	0x08004bc1

08004cac <__sfp>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	0007      	movs	r7, r0
 8004cb0:	f7ff ffa4 	bl	8004bfc <__sfp_lock_acquire>
 8004cb4:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <__sfp+0x88>)
 8004cb6:	681e      	ldr	r6, [r3, #0]
 8004cb8:	69b3      	ldr	r3, [r6, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <__sfp+0x18>
 8004cbe:	0030      	movs	r0, r6
 8004cc0:	f7ff ffbc 	bl	8004c3c <__sinit>
 8004cc4:	3648      	adds	r6, #72	; 0x48
 8004cc6:	68b4      	ldr	r4, [r6, #8]
 8004cc8:	6873      	ldr	r3, [r6, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	d504      	bpl.n	8004cd8 <__sfp+0x2c>
 8004cce:	6833      	ldr	r3, [r6, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d022      	beq.n	8004d1a <__sfp+0x6e>
 8004cd4:	6836      	ldr	r6, [r6, #0]
 8004cd6:	e7f6      	b.n	8004cc6 <__sfp+0x1a>
 8004cd8:	220c      	movs	r2, #12
 8004cda:	5ea5      	ldrsh	r5, [r4, r2]
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	d11a      	bne.n	8004d16 <__sfp+0x6a>
 8004ce0:	0020      	movs	r0, r4
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <__sfp+0x8c>)
 8004ce4:	3058      	adds	r0, #88	; 0x58
 8004ce6:	60e3      	str	r3, [r4, #12]
 8004ce8:	6665      	str	r5, [r4, #100]	; 0x64
 8004cea:	f000 f847 	bl	8004d7c <__retarget_lock_init_recursive>
 8004cee:	f7ff ff8d 	bl	8004c0c <__sfp_lock_release>
 8004cf2:	0020      	movs	r0, r4
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	0029      	movs	r1, r5
 8004cf8:	6025      	str	r5, [r4, #0]
 8004cfa:	60a5      	str	r5, [r4, #8]
 8004cfc:	6065      	str	r5, [r4, #4]
 8004cfe:	6125      	str	r5, [r4, #16]
 8004d00:	6165      	str	r5, [r4, #20]
 8004d02:	61a5      	str	r5, [r4, #24]
 8004d04:	305c      	adds	r0, #92	; 0x5c
 8004d06:	f7ff fd19 	bl	800473c <memset>
 8004d0a:	6365      	str	r5, [r4, #52]	; 0x34
 8004d0c:	63a5      	str	r5, [r4, #56]	; 0x38
 8004d0e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004d10:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004d12:	0020      	movs	r0, r4
 8004d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d16:	3468      	adds	r4, #104	; 0x68
 8004d18:	e7d7      	b.n	8004cca <__sfp+0x1e>
 8004d1a:	2104      	movs	r1, #4
 8004d1c:	0038      	movs	r0, r7
 8004d1e:	f7ff ff57 	bl	8004bd0 <__sfmoreglue>
 8004d22:	1e04      	subs	r4, r0, #0
 8004d24:	6030      	str	r0, [r6, #0]
 8004d26:	d1d5      	bne.n	8004cd4 <__sfp+0x28>
 8004d28:	f7ff ff70 	bl	8004c0c <__sfp_lock_release>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	e7ef      	b.n	8004d12 <__sfp+0x66>
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	08005290 	.word	0x08005290
 8004d38:	ffff0001 	.word	0xffff0001

08004d3c <_fwalk_reent>:
 8004d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d3e:	0004      	movs	r4, r0
 8004d40:	0006      	movs	r6, r0
 8004d42:	2700      	movs	r7, #0
 8004d44:	9101      	str	r1, [sp, #4]
 8004d46:	3448      	adds	r4, #72	; 0x48
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	68a5      	ldr	r5, [r4, #8]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	d504      	bpl.n	8004d60 <_fwalk_reent+0x24>
 8004d56:	6824      	ldr	r4, [r4, #0]
 8004d58:	2c00      	cmp	r4, #0
 8004d5a:	d1f5      	bne.n	8004d48 <_fwalk_reent+0xc>
 8004d5c:	0038      	movs	r0, r7
 8004d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d60:	89ab      	ldrh	r3, [r5, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d908      	bls.n	8004d78 <_fwalk_reent+0x3c>
 8004d66:	220e      	movs	r2, #14
 8004d68:	5eab      	ldrsh	r3, [r5, r2]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	d004      	beq.n	8004d78 <_fwalk_reent+0x3c>
 8004d6e:	0029      	movs	r1, r5
 8004d70:	0030      	movs	r0, r6
 8004d72:	9b01      	ldr	r3, [sp, #4]
 8004d74:	4798      	blx	r3
 8004d76:	4307      	orrs	r7, r0
 8004d78:	3568      	adds	r5, #104	; 0x68
 8004d7a:	e7e8      	b.n	8004d4e <_fwalk_reent+0x12>

08004d7c <__retarget_lock_init_recursive>:
 8004d7c:	4770      	bx	lr

08004d7e <__retarget_lock_acquire_recursive>:
 8004d7e:	4770      	bx	lr

08004d80 <__retarget_lock_release_recursive>:
 8004d80:	4770      	bx	lr
	...

08004d84 <__swhatbuf_r>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	000e      	movs	r6, r1
 8004d88:	001d      	movs	r5, r3
 8004d8a:	230e      	movs	r3, #14
 8004d8c:	5ec9      	ldrsh	r1, [r1, r3]
 8004d8e:	0014      	movs	r4, r2
 8004d90:	b096      	sub	sp, #88	; 0x58
 8004d92:	2900      	cmp	r1, #0
 8004d94:	da08      	bge.n	8004da8 <__swhatbuf_r+0x24>
 8004d96:	220c      	movs	r2, #12
 8004d98:	5eb3      	ldrsh	r3, [r6, r2]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	602a      	str	r2, [r5, #0]
 8004d9e:	061b      	lsls	r3, r3, #24
 8004da0:	d411      	bmi.n	8004dc6 <__swhatbuf_r+0x42>
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	e00f      	b.n	8004dc8 <__swhatbuf_r+0x44>
 8004da8:	466a      	mov	r2, sp
 8004daa:	f000 f9bd 	bl	8005128 <_fstat_r>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	dbf1      	blt.n	8004d96 <__swhatbuf_r+0x12>
 8004db2:	23f0      	movs	r3, #240	; 0xf0
 8004db4:	9901      	ldr	r1, [sp, #4]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	4019      	ands	r1, r3
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <__swhatbuf_r+0x4c>)
 8004dbc:	18c9      	adds	r1, r1, r3
 8004dbe:	424b      	negs	r3, r1
 8004dc0:	4159      	adcs	r1, r3
 8004dc2:	6029      	str	r1, [r5, #0]
 8004dc4:	e7ed      	b.n	8004da2 <__swhatbuf_r+0x1e>
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	2000      	movs	r0, #0
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	b016      	add	sp, #88	; 0x58
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	ffffe000 	.word	0xffffe000

08004dd4 <__smakebuf_r>:
 8004dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd6:	2602      	movs	r6, #2
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	0005      	movs	r5, r0
 8004ddc:	000c      	movs	r4, r1
 8004dde:	4233      	tst	r3, r6
 8004de0:	d006      	beq.n	8004df0 <__smakebuf_r+0x1c>
 8004de2:	0023      	movs	r3, r4
 8004de4:	3347      	adds	r3, #71	; 0x47
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	2301      	movs	r3, #1
 8004dec:	6163      	str	r3, [r4, #20]
 8004dee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004df0:	466a      	mov	r2, sp
 8004df2:	ab01      	add	r3, sp, #4
 8004df4:	f7ff ffc6 	bl	8004d84 <__swhatbuf_r>
 8004df8:	9900      	ldr	r1, [sp, #0]
 8004dfa:	0007      	movs	r7, r0
 8004dfc:	0028      	movs	r0, r5
 8004dfe:	f000 f899 	bl	8004f34 <_malloc_r>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d108      	bne.n	8004e18 <__smakebuf_r+0x44>
 8004e06:	220c      	movs	r2, #12
 8004e08:	5ea3      	ldrsh	r3, [r4, r2]
 8004e0a:	059a      	lsls	r2, r3, #22
 8004e0c:	d4ef      	bmi.n	8004dee <__smakebuf_r+0x1a>
 8004e0e:	2203      	movs	r2, #3
 8004e10:	4393      	bics	r3, r2
 8004e12:	431e      	orrs	r6, r3
 8004e14:	81a6      	strh	r6, [r4, #12]
 8004e16:	e7e4      	b.n	8004de2 <__smakebuf_r+0xe>
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <__smakebuf_r+0x84>)
 8004e1a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	89a2      	ldrh	r2, [r4, #12]
 8004e20:	6020      	str	r0, [r4, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	9b00      	ldr	r3, [sp, #0]
 8004e28:	6120      	str	r0, [r4, #16]
 8004e2a:	6163      	str	r3, [r4, #20]
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <__smakebuf_r+0x7a>
 8004e32:	0028      	movs	r0, r5
 8004e34:	230e      	movs	r3, #14
 8004e36:	5ee1      	ldrsh	r1, [r4, r3]
 8004e38:	f000 f988 	bl	800514c <_isatty_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d006      	beq.n	8004e4e <__smakebuf_r+0x7a>
 8004e40:	2203      	movs	r2, #3
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	4393      	bics	r3, r2
 8004e46:	001a      	movs	r2, r3
 8004e48:	2301      	movs	r3, #1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	89a0      	ldrh	r0, [r4, #12]
 8004e50:	4307      	orrs	r7, r0
 8004e52:	81a7      	strh	r7, [r4, #12]
 8004e54:	e7cb      	b.n	8004dee <__smakebuf_r+0x1a>
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	08004bc1 	.word	0x08004bc1

08004e5c <_free_r>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	0005      	movs	r5, r0
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d010      	beq.n	8004e86 <_free_r+0x2a>
 8004e64:	1f0c      	subs	r4, r1, #4
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da00      	bge.n	8004e6e <_free_r+0x12>
 8004e6c:	18e4      	adds	r4, r4, r3
 8004e6e:	0028      	movs	r0, r5
 8004e70:	f000 f992 	bl	8005198 <__malloc_lock>
 8004e74:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <_free_r+0x90>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <_free_r+0x2c>
 8004e7c:	6063      	str	r3, [r4, #4]
 8004e7e:	6014      	str	r4, [r2, #0]
 8004e80:	0028      	movs	r0, r5
 8004e82:	f000 f991 	bl	80051a8 <__malloc_unlock>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x42>
 8004e8c:	6821      	ldr	r1, [r4, #0]
 8004e8e:	1860      	adds	r0, r4, r1
 8004e90:	4283      	cmp	r3, r0
 8004e92:	d1f3      	bne.n	8004e7c <_free_r+0x20>
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	1841      	adds	r1, r0, r1
 8004e9a:	6021      	str	r1, [r4, #0]
 8004e9c:	e7ee      	b.n	8004e7c <_free_r+0x20>
 8004e9e:	001a      	movs	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <_free_r+0x4e>
 8004ea6:	42a3      	cmp	r3, r4
 8004ea8:	d9f9      	bls.n	8004e9e <_free_r+0x42>
 8004eaa:	6811      	ldr	r1, [r2, #0]
 8004eac:	1850      	adds	r0, r2, r1
 8004eae:	42a0      	cmp	r0, r4
 8004eb0:	d10b      	bne.n	8004eca <_free_r+0x6e>
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	1809      	adds	r1, r1, r0
 8004eb6:	1850      	adds	r0, r2, r1
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	4283      	cmp	r3, r0
 8004ebc:	d1e0      	bne.n	8004e80 <_free_r+0x24>
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	1841      	adds	r1, r0, r1
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	6053      	str	r3, [r2, #4]
 8004ec8:	e7da      	b.n	8004e80 <_free_r+0x24>
 8004eca:	42a0      	cmp	r0, r4
 8004ecc:	d902      	bls.n	8004ed4 <_free_r+0x78>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	e7d5      	b.n	8004e80 <_free_r+0x24>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	1860      	adds	r0, r4, r1
 8004ed8:	4283      	cmp	r3, r0
 8004eda:	d103      	bne.n	8004ee4 <_free_r+0x88>
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	1841      	adds	r1, r0, r1
 8004ee2:	6021      	str	r1, [r4, #0]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	6054      	str	r4, [r2, #4]
 8004ee8:	e7ca      	b.n	8004e80 <_free_r+0x24>
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	200001f4 	.word	0x200001f4

08004ef0 <sbrk_aligned>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4e0f      	ldr	r6, [pc, #60]	; (8004f30 <sbrk_aligned+0x40>)
 8004ef4:	000d      	movs	r5, r1
 8004ef6:	6831      	ldr	r1, [r6, #0]
 8004ef8:	0004      	movs	r4, r0
 8004efa:	2900      	cmp	r1, #0
 8004efc:	d102      	bne.n	8004f04 <sbrk_aligned+0x14>
 8004efe:	f000 f88f 	bl	8005020 <_sbrk_r>
 8004f02:	6030      	str	r0, [r6, #0]
 8004f04:	0029      	movs	r1, r5
 8004f06:	0020      	movs	r0, r4
 8004f08:	f000 f88a 	bl	8005020 <_sbrk_r>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d00a      	beq.n	8004f26 <sbrk_aligned+0x36>
 8004f10:	2303      	movs	r3, #3
 8004f12:	1cc5      	adds	r5, r0, #3
 8004f14:	439d      	bics	r5, r3
 8004f16:	42a8      	cmp	r0, r5
 8004f18:	d007      	beq.n	8004f2a <sbrk_aligned+0x3a>
 8004f1a:	1a29      	subs	r1, r5, r0
 8004f1c:	0020      	movs	r0, r4
 8004f1e:	f000 f87f 	bl	8005020 <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d101      	bne.n	8004f2a <sbrk_aligned+0x3a>
 8004f26:	2501      	movs	r5, #1
 8004f28:	426d      	negs	r5, r5
 8004f2a:	0028      	movs	r0, r5
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	200001f8 	.word	0x200001f8

08004f34 <_malloc_r>:
 8004f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f36:	2203      	movs	r2, #3
 8004f38:	1ccb      	adds	r3, r1, #3
 8004f3a:	4393      	bics	r3, r2
 8004f3c:	3308      	adds	r3, #8
 8004f3e:	0006      	movs	r6, r0
 8004f40:	001f      	movs	r7, r3
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d232      	bcs.n	8004fac <_malloc_r+0x78>
 8004f46:	270c      	movs	r7, #12
 8004f48:	42b9      	cmp	r1, r7
 8004f4a:	d831      	bhi.n	8004fb0 <_malloc_r+0x7c>
 8004f4c:	0030      	movs	r0, r6
 8004f4e:	f000 f923 	bl	8005198 <__malloc_lock>
 8004f52:	4d32      	ldr	r5, [pc, #200]	; (800501c <_malloc_r+0xe8>)
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	001c      	movs	r4, r3
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d12e      	bne.n	8004fba <_malloc_r+0x86>
 8004f5c:	0039      	movs	r1, r7
 8004f5e:	0030      	movs	r0, r6
 8004f60:	f7ff ffc6 	bl	8004ef0 <sbrk_aligned>
 8004f64:	0004      	movs	r4, r0
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	d11e      	bne.n	8004fa8 <_malloc_r+0x74>
 8004f6a:	682c      	ldr	r4, [r5, #0]
 8004f6c:	0025      	movs	r5, r4
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	d14a      	bne.n	8005008 <_malloc_r+0xd4>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0029      	movs	r1, r5
 8004f76:	18e3      	adds	r3, r4, r3
 8004f78:	0030      	movs	r0, r6
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	f000 f850 	bl	8005020 <_sbrk_r>
 8004f80:	9b01      	ldr	r3, [sp, #4]
 8004f82:	4283      	cmp	r3, r0
 8004f84:	d143      	bne.n	800500e <_malloc_r+0xda>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	3703      	adds	r7, #3
 8004f8a:	1aff      	subs	r7, r7, r3
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	439f      	bics	r7, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	2f0c      	cmp	r7, #12
 8004f94:	d200      	bcs.n	8004f98 <_malloc_r+0x64>
 8004f96:	270c      	movs	r7, #12
 8004f98:	0039      	movs	r1, r7
 8004f9a:	0030      	movs	r0, r6
 8004f9c:	f7ff ffa8 	bl	8004ef0 <sbrk_aligned>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d034      	beq.n	800500e <_malloc_r+0xda>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	19df      	adds	r7, r3, r7
 8004fa8:	6027      	str	r7, [r4, #0]
 8004faa:	e013      	b.n	8004fd4 <_malloc_r+0xa0>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dacb      	bge.n	8004f48 <_malloc_r+0x14>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	0028      	movs	r0, r5
 8004fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	1bd1      	subs	r1, r2, r7
 8004fbe:	d420      	bmi.n	8005002 <_malloc_r+0xce>
 8004fc0:	290b      	cmp	r1, #11
 8004fc2:	d917      	bls.n	8004ff4 <_malloc_r+0xc0>
 8004fc4:	19e2      	adds	r2, r4, r7
 8004fc6:	6027      	str	r7, [r4, #0]
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d111      	bne.n	8004ff0 <_malloc_r+0xbc>
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	6053      	str	r3, [r2, #4]
 8004fd4:	0030      	movs	r0, r6
 8004fd6:	0025      	movs	r5, r4
 8004fd8:	f000 f8e6 	bl	80051a8 <__malloc_unlock>
 8004fdc:	2207      	movs	r2, #7
 8004fde:	350b      	adds	r5, #11
 8004fe0:	1d23      	adds	r3, r4, #4
 8004fe2:	4395      	bics	r5, r2
 8004fe4:	1aea      	subs	r2, r5, r3
 8004fe6:	429d      	cmp	r5, r3
 8004fe8:	d0e5      	beq.n	8004fb6 <_malloc_r+0x82>
 8004fea:	1b5b      	subs	r3, r3, r5
 8004fec:	50a3      	str	r3, [r4, r2]
 8004fee:	e7e2      	b.n	8004fb6 <_malloc_r+0x82>
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e7ec      	b.n	8004fce <_malloc_r+0x9a>
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	d101      	bne.n	8004ffe <_malloc_r+0xca>
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	e7ea      	b.n	8004fd4 <_malloc_r+0xa0>
 8004ffe:	605a      	str	r2, [r3, #4]
 8005000:	e7e8      	b.n	8004fd4 <_malloc_r+0xa0>
 8005002:	0023      	movs	r3, r4
 8005004:	6864      	ldr	r4, [r4, #4]
 8005006:	e7a7      	b.n	8004f58 <_malloc_r+0x24>
 8005008:	002c      	movs	r4, r5
 800500a:	686d      	ldr	r5, [r5, #4]
 800500c:	e7af      	b.n	8004f6e <_malloc_r+0x3a>
 800500e:	230c      	movs	r3, #12
 8005010:	0030      	movs	r0, r6
 8005012:	6033      	str	r3, [r6, #0]
 8005014:	f000 f8c8 	bl	80051a8 <__malloc_unlock>
 8005018:	e7cd      	b.n	8004fb6 <_malloc_r+0x82>
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	200001f4 	.word	0x200001f4

08005020 <_sbrk_r>:
 8005020:	2300      	movs	r3, #0
 8005022:	b570      	push	{r4, r5, r6, lr}
 8005024:	4d06      	ldr	r5, [pc, #24]	; (8005040 <_sbrk_r+0x20>)
 8005026:	0004      	movs	r4, r0
 8005028:	0008      	movs	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fc fa92 	bl	8001554 <_sbrk>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d103      	bne.n	800503c <_sbrk_r+0x1c>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d000      	beq.n	800503c <_sbrk_r+0x1c>
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	bd70      	pop	{r4, r5, r6, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	200001fc 	.word	0x200001fc

08005044 <__sread>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	000c      	movs	r4, r1
 8005048:	250e      	movs	r5, #14
 800504a:	5f49      	ldrsh	r1, [r1, r5]
 800504c:	f000 f8b4 	bl	80051b8 <_read_r>
 8005050:	2800      	cmp	r0, #0
 8005052:	db03      	blt.n	800505c <__sread+0x18>
 8005054:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005056:	181b      	adds	r3, r3, r0
 8005058:	6563      	str	r3, [r4, #84]	; 0x54
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	4a02      	ldr	r2, [pc, #8]	; (8005068 <__sread+0x24>)
 8005060:	4013      	ands	r3, r2
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	e7f9      	b.n	800505a <__sread+0x16>
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	ffffefff 	.word	0xffffefff

0800506c <__swrite>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	001f      	movs	r7, r3
 8005070:	898b      	ldrh	r3, [r1, #12]
 8005072:	0005      	movs	r5, r0
 8005074:	000c      	movs	r4, r1
 8005076:	0016      	movs	r6, r2
 8005078:	05db      	lsls	r3, r3, #23
 800507a:	d505      	bpl.n	8005088 <__swrite+0x1c>
 800507c:	230e      	movs	r3, #14
 800507e:	5ec9      	ldrsh	r1, [r1, r3]
 8005080:	2200      	movs	r2, #0
 8005082:	2302      	movs	r3, #2
 8005084:	f000 f874 	bl	8005170 <_lseek_r>
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <__swrite+0x34>)
 800508c:	0028      	movs	r0, r5
 800508e:	4013      	ands	r3, r2
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	0032      	movs	r2, r6
 8005094:	230e      	movs	r3, #14
 8005096:	5ee1      	ldrsh	r1, [r4, r3]
 8005098:	003b      	movs	r3, r7
 800509a:	f000 f81f 	bl	80050dc <_write_r>
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a0:	ffffefff 	.word	0xffffefff

080050a4 <__sseek>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	000c      	movs	r4, r1
 80050a8:	250e      	movs	r5, #14
 80050aa:	5f49      	ldrsh	r1, [r1, r5]
 80050ac:	f000 f860 	bl	8005170 <_lseek_r>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	1c42      	adds	r2, r0, #1
 80050b4:	d103      	bne.n	80050be <__sseek+0x1a>
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <__sseek+0x28>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	0152      	lsls	r2, r2, #5
 80050c2:	4313      	orrs	r3, r2
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	6560      	str	r0, [r4, #84]	; 0x54
 80050c8:	e7f8      	b.n	80050bc <__sseek+0x18>
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	ffffefff 	.word	0xffffefff

080050d0 <__sclose>:
 80050d0:	b510      	push	{r4, lr}
 80050d2:	230e      	movs	r3, #14
 80050d4:	5ec9      	ldrsh	r1, [r1, r3]
 80050d6:	f000 f815 	bl	8005104 <_close_r>
 80050da:	bd10      	pop	{r4, pc}

080050dc <_write_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	0004      	movs	r4, r0
 80050e0:	0008      	movs	r0, r1
 80050e2:	0011      	movs	r1, r2
 80050e4:	001a      	movs	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d05      	ldr	r5, [pc, #20]	; (8005100 <_write_r+0x24>)
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fc f9ea 	bl	80014c4 <_write>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d103      	bne.n	80050fc <_write_r+0x20>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d000      	beq.n	80050fc <_write_r+0x20>
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	200001fc 	.word	0x200001fc

08005104 <_close_r>:
 8005104:	2300      	movs	r3, #0
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	4d06      	ldr	r5, [pc, #24]	; (8005124 <_close_r+0x20>)
 800510a:	0004      	movs	r4, r0
 800510c:	0008      	movs	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc f9f4 	bl	80014fc <_close>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d103      	bne.n	8005120 <_close_r+0x1c>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d000      	beq.n	8005120 <_close_r+0x1c>
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	bd70      	pop	{r4, r5, r6, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	200001fc 	.word	0x200001fc

08005128 <_fstat_r>:
 8005128:	2300      	movs	r3, #0
 800512a:	b570      	push	{r4, r5, r6, lr}
 800512c:	4d06      	ldr	r5, [pc, #24]	; (8005148 <_fstat_r+0x20>)
 800512e:	0004      	movs	r4, r0
 8005130:	0008      	movs	r0, r1
 8005132:	0011      	movs	r1, r2
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	f7fc f9eb 	bl	8001510 <_fstat>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d103      	bne.n	8005146 <_fstat_r+0x1e>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d000      	beq.n	8005146 <_fstat_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	200001fc 	.word	0x200001fc

0800514c <_isatty_r>:
 800514c:	2300      	movs	r3, #0
 800514e:	b570      	push	{r4, r5, r6, lr}
 8005150:	4d06      	ldr	r5, [pc, #24]	; (800516c <_isatty_r+0x20>)
 8005152:	0004      	movs	r4, r0
 8005154:	0008      	movs	r0, r1
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fc f9e8 	bl	800152c <_isatty>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d103      	bne.n	8005168 <_isatty_r+0x1c>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d000      	beq.n	8005168 <_isatty_r+0x1c>
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	bd70      	pop	{r4, r5, r6, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	200001fc 	.word	0x200001fc

08005170 <_lseek_r>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	0004      	movs	r4, r0
 8005174:	0008      	movs	r0, r1
 8005176:	0011      	movs	r1, r2
 8005178:	001a      	movs	r2, r3
 800517a:	2300      	movs	r3, #0
 800517c:	4d05      	ldr	r5, [pc, #20]	; (8005194 <_lseek_r+0x24>)
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc f9dd 	bl	800153e <_lseek>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d103      	bne.n	8005190 <_lseek_r+0x20>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d000      	beq.n	8005190 <_lseek_r+0x20>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd70      	pop	{r4, r5, r6, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	200001fc 	.word	0x200001fc

08005198 <__malloc_lock>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4802      	ldr	r0, [pc, #8]	; (80051a4 <__malloc_lock+0xc>)
 800519c:	f7ff fdef 	bl	8004d7e <__retarget_lock_acquire_recursive>
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	200001f0 	.word	0x200001f0

080051a8 <__malloc_unlock>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	4802      	ldr	r0, [pc, #8]	; (80051b4 <__malloc_unlock+0xc>)
 80051ac:	f7ff fde8 	bl	8004d80 <__retarget_lock_release_recursive>
 80051b0:	bd10      	pop	{r4, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	200001f0 	.word	0x200001f0

080051b8 <_read_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	0004      	movs	r4, r0
 80051bc:	0008      	movs	r0, r1
 80051be:	0011      	movs	r1, r2
 80051c0:	001a      	movs	r2, r3
 80051c2:	2300      	movs	r3, #0
 80051c4:	4d05      	ldr	r5, [pc, #20]	; (80051dc <_read_r+0x24>)
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	f7fc f95f 	bl	800148a <_read>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d103      	bne.n	80051d8 <_read_r+0x20>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d000      	beq.n	80051d8 <_read_r+0x20>
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	200001fc 	.word	0x200001fc

080051e0 <_init>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr

080051ec <_fini>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr
