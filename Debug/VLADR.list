
VLADR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  0800602c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800602c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012339  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fc  00000000  00000000  000323d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177db  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fae  00000000  00000000  0004e163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e22b  00000000  00000000  00060111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee33c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000ee38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005da4 	.word	0x08005da4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08005da4 	.word	0x08005da4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_uldivmod>:
 8000410:	2b00      	cmp	r3, #0
 8000412:	d111      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000414:	2a00      	cmp	r2, #0
 8000416:	d10f      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000418:	2900      	cmp	r1, #0
 800041a:	d100      	bne.n	800041e <__aeabi_uldivmod+0xe>
 800041c:	2800      	cmp	r0, #0
 800041e:	d002      	beq.n	8000426 <__aeabi_uldivmod+0x16>
 8000420:	2100      	movs	r1, #0
 8000422:	43c9      	mvns	r1, r1
 8000424:	0008      	movs	r0, r1
 8000426:	b407      	push	{r0, r1, r2}
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <__aeabi_uldivmod+0x24>)
 800042a:	a102      	add	r1, pc, #8	; (adr r1, 8000434 <__aeabi_uldivmod+0x24>)
 800042c:	1840      	adds	r0, r0, r1
 800042e:	9002      	str	r0, [sp, #8]
 8000430:	bd03      	pop	{r0, r1, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	ffffffd9 	.word	0xffffffd9
 8000438:	b403      	push	{r0, r1}
 800043a:	4668      	mov	r0, sp
 800043c:	b501      	push	{r0, lr}
 800043e:	9802      	ldr	r0, [sp, #8]
 8000440:	f000 f806 	bl	8000450 <__udivmoddi4>
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	469e      	mov	lr, r3
 8000448:	b002      	add	sp, #8
 800044a:	bc0c      	pop	{r2, r3}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__udivmoddi4>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	4657      	mov	r7, sl
 8000454:	464e      	mov	r6, r9
 8000456:	4645      	mov	r5, r8
 8000458:	46de      	mov	lr, fp
 800045a:	b5e0      	push	{r5, r6, r7, lr}
 800045c:	0004      	movs	r4, r0
 800045e:	000d      	movs	r5, r1
 8000460:	4692      	mov	sl, r2
 8000462:	4699      	mov	r9, r3
 8000464:	b083      	sub	sp, #12
 8000466:	428b      	cmp	r3, r1
 8000468:	d830      	bhi.n	80004cc <__udivmoddi4+0x7c>
 800046a:	d02d      	beq.n	80004c8 <__udivmoddi4+0x78>
 800046c:	4649      	mov	r1, r9
 800046e:	4650      	mov	r0, sl
 8000470:	f000 f8ba 	bl	80005e8 <__clzdi2>
 8000474:	0029      	movs	r1, r5
 8000476:	0006      	movs	r6, r0
 8000478:	0020      	movs	r0, r4
 800047a:	f000 f8b5 	bl	80005e8 <__clzdi2>
 800047e:	1a33      	subs	r3, r6, r0
 8000480:	4698      	mov	r8, r3
 8000482:	3b20      	subs	r3, #32
 8000484:	469b      	mov	fp, r3
 8000486:	d433      	bmi.n	80004f0 <__udivmoddi4+0xa0>
 8000488:	465a      	mov	r2, fp
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	4642      	mov	r2, r8
 8000490:	001f      	movs	r7, r3
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	001e      	movs	r6, r3
 8000498:	42af      	cmp	r7, r5
 800049a:	d83a      	bhi.n	8000512 <__udivmoddi4+0xc2>
 800049c:	42af      	cmp	r7, r5
 800049e:	d100      	bne.n	80004a2 <__udivmoddi4+0x52>
 80004a0:	e078      	b.n	8000594 <__udivmoddi4+0x144>
 80004a2:	465b      	mov	r3, fp
 80004a4:	1ba4      	subs	r4, r4, r6
 80004a6:	41bd      	sbcs	r5, r7
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da00      	bge.n	80004ae <__udivmoddi4+0x5e>
 80004ac:	e075      	b.n	800059a <__udivmoddi4+0x14a>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2300      	movs	r3, #0
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	465a      	mov	r2, fp
 80004ba:	4093      	lsls	r3, r2
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	4642      	mov	r2, r8
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	e028      	b.n	800051a <__udivmoddi4+0xca>
 80004c8:	4282      	cmp	r2, r0
 80004ca:	d9cf      	bls.n	800046c <__udivmoddi4+0x1c>
 80004cc:	2200      	movs	r2, #0
 80004ce:	2300      	movs	r3, #0
 80004d0:	9200      	str	r2, [sp, #0]
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <__udivmoddi4+0x8e>
 80004da:	601c      	str	r4, [r3, #0]
 80004dc:	605d      	str	r5, [r3, #4]
 80004de:	9800      	ldr	r0, [sp, #0]
 80004e0:	9901      	ldr	r1, [sp, #4]
 80004e2:	b003      	add	sp, #12
 80004e4:	bcf0      	pop	{r4, r5, r6, r7}
 80004e6:	46bb      	mov	fp, r7
 80004e8:	46b2      	mov	sl, r6
 80004ea:	46a9      	mov	r9, r5
 80004ec:	46a0      	mov	r8, r4
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f0:	4642      	mov	r2, r8
 80004f2:	2320      	movs	r3, #32
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	4652      	mov	r2, sl
 80004f8:	40da      	lsrs	r2, r3
 80004fa:	4641      	mov	r1, r8
 80004fc:	0013      	movs	r3, r2
 80004fe:	464a      	mov	r2, r9
 8000500:	408a      	lsls	r2, r1
 8000502:	0017      	movs	r7, r2
 8000504:	4642      	mov	r2, r8
 8000506:	431f      	orrs	r7, r3
 8000508:	4653      	mov	r3, sl
 800050a:	4093      	lsls	r3, r2
 800050c:	001e      	movs	r6, r3
 800050e:	42af      	cmp	r7, r5
 8000510:	d9c4      	bls.n	800049c <__udivmoddi4+0x4c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0d9      	beq.n	80004d4 <__udivmoddi4+0x84>
 8000520:	07fb      	lsls	r3, r7, #31
 8000522:	0872      	lsrs	r2, r6, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4646      	mov	r6, r8
 8000528:	087b      	lsrs	r3, r7, #1
 800052a:	e00e      	b.n	800054a <__udivmoddi4+0xfa>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d101      	bne.n	8000534 <__udivmoddi4+0xe4>
 8000530:	42a2      	cmp	r2, r4
 8000532:	d80c      	bhi.n	800054e <__udivmoddi4+0xfe>
 8000534:	1aa4      	subs	r4, r4, r2
 8000536:	419d      	sbcs	r5, r3
 8000538:	2001      	movs	r0, #1
 800053a:	1924      	adds	r4, r4, r4
 800053c:	416d      	adcs	r5, r5
 800053e:	2100      	movs	r1, #0
 8000540:	3e01      	subs	r6, #1
 8000542:	1824      	adds	r4, r4, r0
 8000544:	414d      	adcs	r5, r1
 8000546:	2e00      	cmp	r6, #0
 8000548:	d006      	beq.n	8000558 <__udivmoddi4+0x108>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d9ee      	bls.n	800052c <__udivmoddi4+0xdc>
 800054e:	3e01      	subs	r6, #1
 8000550:	1924      	adds	r4, r4, r4
 8000552:	416d      	adcs	r5, r5
 8000554:	2e00      	cmp	r6, #0
 8000556:	d1f8      	bne.n	800054a <__udivmoddi4+0xfa>
 8000558:	9800      	ldr	r0, [sp, #0]
 800055a:	9901      	ldr	r1, [sp, #4]
 800055c:	465b      	mov	r3, fp
 800055e:	1900      	adds	r0, r0, r4
 8000560:	4169      	adcs	r1, r5
 8000562:	2b00      	cmp	r3, #0
 8000564:	db24      	blt.n	80005b0 <__udivmoddi4+0x160>
 8000566:	002b      	movs	r3, r5
 8000568:	465a      	mov	r2, fp
 800056a:	4644      	mov	r4, r8
 800056c:	40d3      	lsrs	r3, r2
 800056e:	002a      	movs	r2, r5
 8000570:	40e2      	lsrs	r2, r4
 8000572:	001c      	movs	r4, r3
 8000574:	465b      	mov	r3, fp
 8000576:	0015      	movs	r5, r2
 8000578:	2b00      	cmp	r3, #0
 800057a:	db2a      	blt.n	80005d2 <__udivmoddi4+0x182>
 800057c:	0026      	movs	r6, r4
 800057e:	409e      	lsls	r6, r3
 8000580:	0033      	movs	r3, r6
 8000582:	0026      	movs	r6, r4
 8000584:	4647      	mov	r7, r8
 8000586:	40be      	lsls	r6, r7
 8000588:	0032      	movs	r2, r6
 800058a:	1a80      	subs	r0, r0, r2
 800058c:	4199      	sbcs	r1, r3
 800058e:	9000      	str	r0, [sp, #0]
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	e79f      	b.n	80004d4 <__udivmoddi4+0x84>
 8000594:	42a3      	cmp	r3, r4
 8000596:	d8bc      	bhi.n	8000512 <__udivmoddi4+0xc2>
 8000598:	e783      	b.n	80004a2 <__udivmoddi4+0x52>
 800059a:	4642      	mov	r2, r8
 800059c:	2320      	movs	r3, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	2200      	movs	r2, #0
 80005a4:	9100      	str	r1, [sp, #0]
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	2201      	movs	r2, #1
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	e786      	b.n	80004be <__udivmoddi4+0x6e>
 80005b0:	4642      	mov	r2, r8
 80005b2:	2320      	movs	r3, #32
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	4646      	mov	r6, r8
 80005ba:	409a      	lsls	r2, r3
 80005bc:	0023      	movs	r3, r4
 80005be:	40f3      	lsrs	r3, r6
 80005c0:	4644      	mov	r4, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dad4      	bge.n	800057c <__udivmoddi4+0x12c>
 80005d2:	4642      	mov	r2, r8
 80005d4:	002f      	movs	r7, r5
 80005d6:	2320      	movs	r3, #32
 80005d8:	0026      	movs	r6, r4
 80005da:	4097      	lsls	r7, r2
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	40de      	lsrs	r6, r3
 80005e0:	003b      	movs	r3, r7
 80005e2:	4333      	orrs	r3, r6
 80005e4:	e7cd      	b.n	8000582 <__udivmoddi4+0x132>
 80005e6:	46c0      	nop			; (mov r8, r8)

080005e8 <__clzdi2>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d103      	bne.n	80005f6 <__clzdi2+0xe>
 80005ee:	f000 f807 	bl	8000600 <__clzsi2>
 80005f2:	3020      	adds	r0, #32
 80005f4:	e002      	b.n	80005fc <__clzdi2+0x14>
 80005f6:	0008      	movs	r0, r1
 80005f8:	f000 f802 	bl	8000600 <__clzsi2>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	; (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <readRegister+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fc80 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fcd2 	bl	8002000 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 800065c:	1cf9      	adds	r1, r7, #3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	f003 fb78 	bl	8003d58 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000668:	240f      	movs	r4, #15
 800066a:	1939      	adds	r1, r7, r4
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	2201      	movs	r2, #1
 8000672:	f003 fcc9 	bl	8004008 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 fcc2 	bl	8002000 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <readRegister+0x58>)
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	0018      	movs	r0, r3
 8000684:	f002 fc67 	bl	8002f56 <HAL_GPIO_WritePin>
	return rec;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	781b      	ldrb	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b005      	add	sp, #20
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	50000400 	.word	0x50000400

08000698 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	0008      	movs	r0, r1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	0019      	movs	r1, r3
 80006a6:	240b      	movs	r4, #11
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	1c02      	adds	r2, r0, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	230a      	movs	r3, #10
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	1c0a      	adds	r2, r1, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 80006b6:	2510      	movs	r5, #16
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	3304      	adds	r3, #4
 80006c0:	221a      	movs	r2, #26
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fefb 	bl	80054c0 <memset>
	tx_data[0] = address | 0x80;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4252      	negs	r2, r2
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80006de:	2301      	movs	r3, #1
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
 80006e2:	e00f      	b.n	8000704 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 80006e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	637a      	str	r2, [r7, #52]	; 0x34
 80006ea:	001a      	movs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	189b      	adds	r3, r3, r2
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	2310      	movs	r3, #16
 80006f4:	18fa      	adds	r2, r7, r3
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3301      	adds	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
 8000704:	240a      	movs	r4, #10
 8000706:	193b      	adds	r3, r7, r4
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800070c:	429a      	cmp	r2, r3
 800070e:	dde9      	ble.n	80006e4 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <writeRegister+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f002 fc1d 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	2110      	movs	r1, #16
 800072c:	1879      	adds	r1, r7, r1
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f003 fb12 	bl	8003d58 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <writeRegister+0xbc>)
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fc0b 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f001 fc5d 	bl	8002000 <HAL_Delay>
	return cmd;  // pull the pin high
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b00e      	add	sp, #56	; 0x38
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	50000400 	.word	0x50000400

08000758 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	0b51      	lsrs	r1, r2, #13
 8000768:	04dd      	lsls	r5, r3, #19
 800076a:	430d      	orrs	r5, r1
 800076c:	04d4      	lsls	r4, r2, #19
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <setRFFrequency+0x98>)
 8000770:	2300      	movs	r3, #0
 8000772:	0020      	movs	r0, r4
 8000774:	0029      	movs	r1, r5
 8000776:	f7ff fe4b 	bl	8000410 <__aeabi_uldivmod>
 800077a:	0002      	movs	r2, r0
 800077c:	000b      	movs	r3, r1
 800077e:	623a      	str	r2, [r7, #32]
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	6a3a      	ldr	r2, [r7, #32]
 8000788:	0c12      	lsrs	r2, r2, #16
 800078a:	60ba      	str	r2, [r7, #8]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	431a      	orrs	r2, r3
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	7a3a      	ldrb	r2, [r7, #8]
 800079a:	210c      	movs	r1, #12
 800079c:	2010      	movs	r0, #16
 800079e:	180b      	adds	r3, r1, r0
 80007a0:	19db      	adds	r3, r3, r7
 80007a2:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	061b      	lsls	r3, r3, #24
 80007a8:	6a3a      	ldr	r2, [r7, #32]
 80007aa:	0a12      	lsrs	r2, r2, #8
 80007ac:	603a      	str	r2, [r7, #0]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	783a      	ldrb	r2, [r7, #0]
 80007bc:	180b      	adds	r3, r1, r0
 80007be:	19db      	adds	r3, r3, r7
 80007c0:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c2:	6a3a      	ldr	r2, [r7, #32]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	1c13      	adds	r3, r2, #0
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	0004      	movs	r4, r0
 80007cc:	180b      	adds	r3, r1, r0
 80007ce:	19db      	adds	r3, r3, r7
 80007d0:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	2394      	movs	r3, #148	; 0x94
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	58d0      	ldr	r0, [r2, r3]
 80007da:	190b      	adds	r3, r1, r4
 80007dc:	19da      	adds	r2, r3, r7
 80007de:	2303      	movs	r3, #3
 80007e0:	2106      	movs	r1, #6
 80007e2:	f7ff ff59 	bl	8000698 <writeRegister>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00a      	add	sp, #40	; 0x28
 80007ec:	bdb0      	pop	{r4, r5, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	01e84800 	.word	0x01e84800

080007f4 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	2394      	movs	r3, #148	; 0x94
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	58d0      	ldr	r0, [r2, r3]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3310      	adds	r3, #16
 8000808:	001a      	movs	r2, r3
 800080a:	2301      	movs	r3, #1
 800080c:	2109      	movs	r1, #9
 800080e:	f7ff ff43 	bl	8000698 <writeRegister>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	2394      	movs	r3, #148	; 0x94
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	58d0      	ldr	r0, [r2, r3]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3316      	adds	r3, #22
 800082e:	001a      	movs	r2, r3
 8000830:	2301      	movs	r3, #1
 8000832:	2139      	movs	r1, #57	; 0x39
 8000834:	f7ff ff30 	bl	8000698 <writeRegister>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	2394      	movs	r3, #148	; 0x94
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	58d0      	ldr	r0, [r2, r3]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3317      	adds	r3, #23
 8000854:	001a      	movs	r2, r3
 8000856:	2301      	movs	r3, #1
 8000858:	210b      	movs	r1, #11
 800085a:	f7ff ff1d 	bl	8000698 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}

08000866 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	2394      	movs	r3, #148	; 0x94
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	58d0      	ldr	r0, [r2, r3]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	331a      	adds	r3, #26
 800087a:	001a      	movs	r2, r3
 800087c:	2301      	movs	r3, #1
 800087e:	211f      	movs	r1, #31
 8000880:	f7ff ff0a 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	2394      	movs	r3, #148	; 0x94
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	58d0      	ldr	r0, [r2, r3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	331c      	adds	r3, #28
 8000890:	001a      	movs	r2, r3
 8000892:	2301      	movs	r3, #1
 8000894:	2120      	movs	r1, #32
 8000896:	f7ff feff 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	2394      	movs	r3, #148	; 0x94
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	58d0      	ldr	r0, [r2, r3]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	331d      	adds	r3, #29
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	2121      	movs	r1, #33	; 0x21
 80008ac:	f7ff fef4 	bl	8000698 <writeRegister>
			1);
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80008c0:	210f      	movs	r1, #15
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7c9b      	ldrb	r3, [r3, #18]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7cdb      	ldrb	r3, [r3, #19]
 80008d8:	18db      	adds	r3, r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	000c      	movs	r4, r1
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2221      	movs	r2, #33	; 0x21
 80008ee:	5c9a      	ldrb	r2, [r3, r2]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	2394      	movs	r3, #148	; 0x94
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	58d0      	ldr	r0, [r2, r3]
 8000904:	193a      	adds	r2, r7, r4
 8000906:	2301      	movs	r3, #1
 8000908:	211d      	movs	r1, #29
 800090a:	f7ff fec5 	bl	8000698 <writeRegister>

	cmd = module->LoRa_SF << 4;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7c5b      	ldrb	r3, [r3, #17]
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	b2da      	uxtb	r2, r3
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	b2da      	uxtb	r2, r3
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	187b      	adds	r3, r7, r1
 800092e:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7eda      	ldrb	r2, [r3, #27]
 8000934:	187b      	adds	r3, r7, r1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2394      	movs	r3, #148	; 0x94
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	58d0      	ldr	r0, [r2, r3]
 8000948:	187a      	adds	r2, r7, r1
 800094a:	2301      	movs	r3, #1
 800094c:	211e      	movs	r1, #30
 800094e:	f7ff fea3 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	2394      	movs	r3, #148	; 0x94
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	58d0      	ldr	r0, [r2, r3]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3319      	adds	r3, #25
 800095e:	001a      	movs	r2, r3
 8000960:	2301      	movs	r3, #1
 8000962:	2126      	movs	r1, #38	; 0x26
 8000964:	f7ff fe98 	bl	8000698 <writeRegister>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b005      	add	sp, #20
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	2394      	movs	r3, #148	; 0x94
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	2131      	movs	r1, #49	; 0x31
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fe5a 	bl	800063c <readRegister>
 8000988:	0003      	movs	r3, r0
 800098a:	001a      	movs	r2, r3
 800098c:	210f      	movs	r1, #15
 800098e:	187b      	adds	r3, r7, r1
 8000990:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2207      	movs	r2, #7
 8000998:	4393      	bics	r3, r2
 800099a:	b2da      	uxtb	r2, r3
 800099c:	187b      	adds	r3, r7, r1
 800099e:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2205      	movs	r2, #5
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2394      	movs	r3, #148	; 0x94
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	58d0      	ldr	r0, [r2, r3]
 80009b6:	000c      	movs	r4, r1
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	2301      	movs	r3, #1
 80009bc:	2131      	movs	r1, #49	; 0x31
 80009be:	f7ff fe6b 	bl	8000698 <writeRegister>
	tmp = 0x0C;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	220c      	movs	r2, #12
 80009c8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	2394      	movs	r3, #148	; 0x94
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	58d0      	ldr	r0, [r2, r3]
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	2301      	movs	r3, #1
 80009d6:	2137      	movs	r1, #55	; 0x37
 80009d8:	f7ff fe5e 	bl	8000698 <writeRegister>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b005      	add	sp, #20
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	2394      	movs	r3, #148	; 0x94
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	58d3      	ldr	r3, [r2, r3]
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe20 	bl	800063c <readRegister>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	2307      	movs	r3, #7
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	000a      	movs	r2, r1
 8000a18:	1cfb      	adds	r3, r7, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000a1c:	1cfb      	adds	r3, r7, #3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2278      	movs	r2, #120	; 0x78
 8000a22:	4252      	negs	r2, r2
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	210f      	movs	r1, #15
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	2394      	movs	r3, #148	; 0x94
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	58d0      	ldr	r0, [r2, r3]
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f7ff fe2c 	bl	8000698 <writeRegister>
	module->operatingMode = mode;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1cfa      	adds	r2, r7, #3
 8000a44:	2123      	movs	r1, #35	; 0x23
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	545a      	strb	r2, [r3, r1]
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	2394      	movs	r3, #148	; 0x94
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	58d0      	ldr	r0, [r2, r3]
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2112      	movs	r1, #18
 8000a70:	f7ff fe12 	bl	8000698 <writeRegister>
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f002 fa43 	bl	8002f1c <HAL_GPIO_ReadPin>
 8000a96:	0003      	movs	r3, r0
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	425a      	negs	r2, r3
 8000a9c:	4153      	adcs	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	01c9      	lsls	r1, r1, #7
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	4911      	ldr	r1, [pc, #68]	; (8000b14 <ledInit+0x6c>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <ledInit+0x70>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ledInit+0x70>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <ledInit+0x70>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <ledInit+0x70>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <ledInit+0x70>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ledInit+0x70>)
 8000af0:	2104      	movs	r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <ledInit+0x70>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ledInit+0x70>)
 8000afc:	2108      	movs	r1, #8
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f809 	bl	8000b1c <led_reset>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	ffff7fff 	.word	0xffff7fff
 8000b18:	50000400 	.word	0x50000400

08000b1c <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000b36:	f001 fa59 	bl	8001fec <HAL_GetTick>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <setTxBaseParameters>:
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000b64:	2017      	movs	r0, #23
 8000b66:	183b      	adds	r3, r7, r0
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000b6c:	2416      	movs	r4, #22
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000b74:	2515      	movs	r5, #21
 8000b76:	197b      	adds	r3, r7, r5
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000b7c:	2614      	movs	r6, #20
 8000b7e:	19bb      	adds	r3, r7, r6
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 8000b84:	2313      	movs	r3, #19
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	701a      	strb	r2, [r3, #0]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 8000b8c:	2212      	movs	r2, #18
 8000b8e:	18bb      	adds	r3, r7, r2
 8000b90:	2240      	movs	r2, #64	; 0x40
 8000b92:	701a      	strb	r2, [r3, #0]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000b94:	2111      	movs	r1, #17
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2220      	movs	r2, #32
 8000b9a:	701a      	strb	r2, [r3, #0]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	18bb      	adds	r3, r7, r2
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	701a      	strb	r2, [r3, #0]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000bac:	210e      	movs	r1, #14
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	701a      	strb	r2, [r3, #0]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	18bb      	adds	r3, r7, r2
 8000bb8:	2202      	movs	r2, #2
 8000bba:	701a      	strb	r2, [r3, #0]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000bbc:	210c      	movs	r1, #12
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]

	loraTx->frequency = UPLINK_FREQ;
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <setTxBaseParameters+0x154>)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	608a      	str	r2, [r1, #8]
 8000bcc:	60cb      	str	r3, [r1, #12]
	loraTx->power = SX1278_POWER_17DBM;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	22fc      	movs	r2, #252	; 0xfc
 8000bd2:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2206      	movs	r2, #6
 8000bde:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2234      	movs	r2, #52	; 0x34
 8000bf0:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	220b      	movs	r2, #11
 8000bf6:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2223      	movs	r2, #35	; 0x23
 8000bfc:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2208      	movs	r2, #8
 8000c08:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2208      	movs	r2, #8
 8000c14:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000c16:	183a      	adds	r2, r7, r0
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	197b      	adds	r3, r7, r5
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000c36:	2313      	movs	r3, #19
 8000c38:	18fa      	adds	r2, r7, r3
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	2111      	movs	r1, #17
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b2d9      	uxtb	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2220      	movs	r2, #32
 8000c54:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2220      	movs	r2, #32
 8000c5a:	5c9a      	ldrb	r2, [r3, r2]
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	18f9      	adds	r1, r7, r3
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	b2d9      	uxtb	r1, r3
 8000c6c:	230e      	movs	r3, #14
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	430b      	orrs	r3, r1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2220      	movs	r2, #32
 8000c84:	5c9a      	ldrb	r2, [r3, r2]
 8000c86:	230d      	movs	r3, #13
 8000c88:	18f9      	adds	r1, r7, r3
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	7809      	ldrb	r1, [r1, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	430b      	orrs	r3, r1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b2d9      	uxtb	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	5499      	strb	r1, [r3, r2]
	loraTx->fhssValue = HOPS_PERIOD;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	779a      	strb	r2, [r3, #30]
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b007      	add	sp, #28
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	0a21fe80 	.word	0x0a21fe80

08000cb4 <saveTx>:

void saveTx(SX1278_t *module) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fea4 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f001 f99a 	bl	8002000 <HAL_Delay>
	setRFFrequency(module);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fd42 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fd9f 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fd88 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fdaa 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	2394      	movs	r3, #148	; 0x94
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	58d0      	ldr	r0, [r2, r3]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3318      	adds	r3, #24
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	210c      	movs	r1, #12
 8000cfe:	f7ff fccb 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7c5b      	ldrb	r3, [r3, #17]
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d10b      	bne.n	8000d22 <saveTx+0x6e>
		module->headerMode = IMPLICIT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2221      	movs	r2, #33	; 0x21
 8000d0e:	2101      	movs	r1, #1
 8000d10:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2203      	movs	r2, #3
 8000d16:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fe28 	bl	8000970 <setDetectionParameters>
 8000d20:	e006      	b.n	8000d30 <saveTx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2221      	movs	r2, #33	; 0x21
 8000d26:	2100      	movs	r1, #0
 8000d28:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fdc0 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fd93 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	2394      	movs	r3, #148	; 0x94
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	58d0      	ldr	r0, [r2, r3]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	331e      	adds	r3, #30
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2124      	movs	r1, #36	; 0x24
 8000d52:	f7ff fca1 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	2394      	movs	r3, #148	; 0x94
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	58d0      	ldr	r0, [r2, r3]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	331f      	adds	r3, #31
 8000d62:	001a      	movs	r2, r3
 8000d64:	2301      	movs	r3, #1
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	f7ff fc96 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fe6f 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	2394      	movs	r3, #148	; 0x94
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	58d0      	ldr	r0, [r2, r3]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3320      	adds	r3, #32
 8000d80:	001a      	movs	r2, r3
 8000d82:	2301      	movs	r3, #1
 8000d84:	2111      	movs	r1, #17
 8000d86:	f7ff fc87 	bl	8000698 <writeRegister>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->packetLength;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7d5a      	ldrb	r2, [r3, #21]
 8000d9e:	210f      	movs	r1, #15
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	2394      	movs	r3, #148	; 0x94
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	58d0      	ldr	r0, [r2, r3]
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	2301      	movs	r3, #1
 8000db0:	2122      	movs	r1, #34	; 0x22
 8000db2:	f7ff fc71 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	2394      	movs	r3, #148	; 0x94
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	58d3      	ldr	r3, [r2, r3]
 8000dbe:	210e      	movs	r1, #14
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff fc3b 	bl	800063c <readRegister>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	001a      	movs	r2, r3
 8000dca:	210e      	movs	r1, #14
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	2394      	movs	r3, #148	; 0x94
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	58d0      	ldr	r0, [r2, r3]
 8000dd8:	187a      	adds	r2, r7, r1
 8000dda:	2301      	movs	r3, #1
 8000ddc:	210d      	movs	r1, #13
 8000dde:	f7ff fc5b 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	2394      	movs	r3, #148	; 0x94
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	58d3      	ldr	r3, [r2, r3]
 8000dea:	2122      	movs	r1, #34	; 0x22
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff fc25 	bl	800063c <readRegister>
 8000df2:	0003      	movs	r3, r0
 8000df4:	001a      	movs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	755a      	strb	r2, [r3, #21]
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <sx1278Reset>:

void sx1278Reset() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <sx1278Reset+0x3c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f002 f8a1 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <sx1278Reset+0x3c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	2101      	movs	r1, #1
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 f89b 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 f8ed 	bl	8002000 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <sx1278Reset+0x3c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 f892 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f001 f8e4 	bl	8002000 <HAL_Delay>
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	50000400 	.word	0x50000400

08000e44 <transmit>:

int messageCounter = 0;
void transmit(SX1278_t *loraTx) {
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b0a4      	sub	sp, #144	; 0x90
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if (loraTx->status == UNKNOW) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2224      	movs	r2, #36	; 0x24
 8000e50:	5c9b      	ldrb	r3, [r3, r2]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d128      	bne.n	8000ea8 <transmit+0x64>
		uint8_t tmp[] = "Configuring Slave LoRa module: Tx Mode\r\n";
 8000e56:	240c      	movs	r4, #12
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	4a86      	ldr	r2, [pc, #536]	; (8001074 <transmit+0x230>)
 8000e5c:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000e5e:	c323      	stmia	r3!, {r0, r1, r5}
 8000e60:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000e62:	c323      	stmia	r3!, {r0, r1, r5}
 8000e64:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000e66:	c323      	stmia	r3!, {r0, r1, r5}
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	6019      	str	r1, [r3, #0]
 8000e6c:	7912      	ldrb	r2, [r2, #4]
 8000e6e:	711a      	strb	r2, [r3, #4]
		size_t len = strlen(tmp);
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f944 	bl	8000100 <strlen>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	2288      	movs	r2, #136	; 0x88
 8000e7c:	18b9      	adds	r1, r7, r2
 8000e7e:	600b      	str	r3, [r1, #0]
		HAL_UART_Transmit(&huart1, tmp, len, 100);
 8000e80:	18bb      	adds	r3, r7, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	1939      	adds	r1, r7, r4
 8000e88:	487b      	ldr	r0, [pc, #492]	; (8001078 <transmit+0x234>)
 8000e8a:	2364      	movs	r3, #100	; 0x64
 8000e8c:	f003 fe04 	bl	8004a98 <HAL_UART_Transmit>
		setTxBaseParameters(loraTx);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fe62 	bl	8000b5c <setTxBaseParameters>
		saveTx(loraTx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff ff0a 	bl	8000cb4 <saveTx>
		loraTx->status = TX_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2224      	movs	r2, #36	; 0x24
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	5499      	strb	r1, [r3, r2]
	}
	if (loraTx->status == TX_READY) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2224      	movs	r2, #36	; 0x24
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d000      	beq.n	8000eb4 <transmit+0x70>
 8000eb2:	e0db      	b.n	800106c <transmit+0x228>
		memset(loraTx->buffer, 0, SX1278_MAX_PACKET);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3325      	adds	r3, #37	; 0x25
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0052      	lsls	r2, r2, #1
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f004 fafe 	bl	80054c0 <memset>
		loraTx->packetLength = sprintf((char*) loraTx->buffer,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3325      	adds	r3, #37	; 0x25
 8000ec8:	0018      	movs	r0, r3
 8000eca:	4b6c      	ldr	r3, [pc, #432]	; (800107c <transmit+0x238>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b6c      	ldr	r3, [pc, #432]	; (8001080 <transmit+0x23c>)
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f004 fafd 	bl	80054d0 <siprintf>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	755a      	strb	r2, [r3, #21]
				"Adios tia Paty, Adios tia Lela, "
						"saludos al loco Rene, al compadre moncho y "
						"al vendedor de leña %d", messageCounter);

		setTxParameters(loraTx);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff56 	bl	8000d92 <setTxParameters>

		if (!(loraTx->packetLength > 0))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7d5b      	ldrb	r3, [r3, #21]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d100      	bne.n	8000ef0 <transmit+0xac>
 8000eee:	e0bc      	b.n	800106a <transmit+0x226>
			return;
		uint8_t tmp1[] = "EntryTx OK!\r\n";
 8000ef0:	2464      	movs	r4, #100	; 0x64
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <transmit+0x240>)
 8000ef6:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000ef8:	c323      	stmia	r3!, {r0, r1, r5}
 8000efa:	8812      	ldrh	r2, [r2, #0]
 8000efc:	801a      	strh	r2, [r3, #0]
		size_t len1 = strlen(tmp1);
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f8fd 	bl	8000100 <strlen>
 8000f06:	0003      	movs	r3, r0
 8000f08:	2284      	movs	r2, #132	; 0x84
 8000f0a:	18b9      	adds	r1, r7, r2
 8000f0c:	600b      	str	r3, [r1, #0]
		HAL_UART_Transmit(&huart1, tmp1, len1, 100);
 8000f0e:	18bb      	adds	r3, r7, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	1939      	adds	r1, r7, r4
 8000f16:	4858      	ldr	r0, [pc, #352]	; (8001078 <transmit+0x234>)
 8000f18:	2364      	movs	r3, #100	; 0x64
 8000f1a:	f003 fdbd 	bl	8004a98 <HAL_UART_Transmit>
		uint8_t tmp2[] = "Sending message: \r\n";
 8000f1e:	2450      	movs	r4, #80	; 0x50
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	4a59      	ldr	r2, [pc, #356]	; (8001088 <transmit+0x244>)
 8000f24:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000f26:	c323      	stmia	r3!, {r0, r1, r5}
 8000f28:	ca03      	ldmia	r2!, {r0, r1}
 8000f2a:	c303      	stmia	r3!, {r0, r1}
		size_t len2 = strlen(tmp2);
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff f8e6 	bl	8000100 <strlen>
 8000f34:	0003      	movs	r3, r0
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	18b9      	adds	r1, r7, r2
 8000f3a:	600b      	str	r3, [r1, #0]
		HAL_UART_Transmit(&huart1, tmp2, len2, 100);
 8000f3c:	18bb      	adds	r3, r7, r2
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	1939      	adds	r1, r7, r4
 8000f44:	484c      	ldr	r0, [pc, #304]	; (8001078 <transmit+0x234>)
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	f003 fda6 	bl	8004a98 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, loraTx->buffer, loraTx->packetLength, 100);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3325      	adds	r3, #37	; 0x25
 8000f50:	0019      	movs	r1, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7d5b      	ldrb	r3, [r3, #21]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4847      	ldr	r0, [pc, #284]	; (8001078 <transmit+0x234>)
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	f003 fd9c 	bl	8004a98 <HAL_UART_Transmit>

		for (int i = 0; i < loraTx->packetLength; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	228c      	movs	r2, #140	; 0x8c
 8000f64:	18ba      	adds	r2, r7, r2
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e018      	b.n	8000f9c <transmit+0x158>
			char data = loraTx->buffer[i];
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	2125      	movs	r1, #37	; 0x25
 8000f6e:	248c      	movs	r4, #140	; 0x8c
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	185b      	adds	r3, r3, r1
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	214f      	movs	r1, #79	; 0x4f
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2394      	movs	r3, #148	; 0x94
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	58d0      	ldr	r0, [r2, r3]
 8000f88:	187a      	adds	r2, r7, r1
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f7ff fb83 	bl	8000698 <writeRegister>
		for (int i = 0; i < loraTx->packetLength; i++) {
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	193a      	adds	r2, r7, r4
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7d5b      	ldrb	r3, [r3, #21]
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	238c      	movs	r3, #140	; 0x8c
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	dbde      	blt.n	8000f6a <transmit+0x126>
		}
		updateLoraLowFreq(loraTx, TX);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2103      	movs	r1, #3
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fd2c 	bl	8000a0e <updateLoraLowFreq>
		uint32_t timeStart = HAL_GetTick();
 8000fb6:	f001 f819 	bl	8001fec <HAL_GetTick>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
		while (1) {
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff fd5a 	bl	8000a7c <SX1278_hw_GetDIO0>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d025      	beq.n	8001018 <transmit+0x1d4>
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	2394      	movs	r3, #148	; 0x94
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	58d3      	ldr	r3, [r2, r3]
 8000fd4:	2112      	movs	r1, #18
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff fb30 	bl	800063c <readRegister>
				clearIrqFlags(loraTx);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fd37 	bl	8000a52 <clearIrqFlags>
				uint8_t tmp3[] = "\nTransmission: OK\r\n";
 8000fe4:	2438      	movs	r4, #56	; 0x38
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <transmit+0x248>)
 8000fea:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000fec:	c323      	stmia	r3!, {r0, r1, r5}
 8000fee:	ca03      	ldmia	r2!, {r0, r1}
 8000ff0:	c303      	stmia	r3!, {r0, r1}
				size_t len3 = strlen(tmp3);
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff f883 	bl	8000100 <strlen>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	677b      	str	r3, [r7, #116]	; 0x74
				HAL_UART_Transmit(&huart1, tmp3, len3, 100);
 8000ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001000:	b29a      	uxth	r2, r3
 8001002:	1939      	adds	r1, r7, r4
 8001004:	481c      	ldr	r0, [pc, #112]	; (8001078 <transmit+0x234>)
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	f003 fd46 	bl	8004a98 <HAL_UART_Transmit>
				messageCounter += 1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <transmit+0x238>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <transmit+0x238>)
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e029      	b.n	800106c <transmit+0x228>
				return;
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8001018:	f000 ffe8 	bl	8001fec <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001020:	1ad2      	subs	r2, r2, r3
 8001022:	23fa      	movs	r3, #250	; 0xfa
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	429a      	cmp	r2, r3
 8001028:	d91b      	bls.n	8001062 <transmit+0x21e>
				sx1278Reset();
 800102a:	f7ff feeb 	bl	8000e04 <sx1278Reset>
				uint8_t tmp4[] = "EntryTx failed, timeout reset!\r\n";
 800102e:	210c      	movs	r1, #12
 8001030:	187b      	adds	r3, r7, r1
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <transmit+0x24c>)
 8001034:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001036:	c331      	stmia	r3!, {r0, r4, r5}
 8001038:	ca31      	ldmia	r2!, {r0, r4, r5}
 800103a:	c331      	stmia	r3!, {r0, r4, r5}
 800103c:	ca11      	ldmia	r2!, {r0, r4}
 800103e:	c311      	stmia	r3!, {r0, r4}
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	701a      	strb	r2, [r3, #0]
				size_t len4 = strlen(tmp4);
 8001044:	000c      	movs	r4, r1
 8001046:	187b      	adds	r3, r7, r1
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff f859 	bl	8000100 <strlen>
 800104e:	0003      	movs	r3, r0
 8001050:	67bb      	str	r3, [r7, #120]	; 0x78
				HAL_UART_Transmit(&huart1, tmp4, len4, 100);
 8001052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001054:	b29a      	uxth	r2, r3
 8001056:	1939      	adds	r1, r7, r4
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <transmit+0x234>)
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	f003 fd1c 	bl	8004a98 <HAL_UART_Transmit>
 8001060:	e004      	b.n	800106c <transmit+0x228>
				return;
			}

			HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 ffcc 	bl	8002000 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8001068:	e7a9      	b.n	8000fbe <transmit+0x17a>
			return;
 800106a:	46c0      	nop			; (mov r8, r8)
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 800106c:	46bd      	mov	sp, r7
 800106e:	b024      	add	sp, #144	; 0x90
 8001070:	bdb0      	pop	{r4, r5, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	08005e20 	.word	0x08005e20
 8001078:	20000178 	.word	0x20000178
 800107c:	20000210 	.word	0x20000210
 8001080:	08005dbc 	.word	0x08005dbc
 8001084:	08005e4c 	.word	0x08005e4c
 8001088:	08005e5c 	.word	0x08005e5c
 800108c:	08005e70 	.word	0x08005e70
 8001090:	08005e84 	.word	0x08005e84

08001094 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 800109c:	200f      	movs	r0, #15
 800109e:	183b      	adds	r3, r7, r0
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 80010a4:	240e      	movs	r4, #14
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 80010ac:	250d      	movs	r5, #13
 80010ae:	197b      	adds	r3, r7, r5
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 80010b4:	260c      	movs	r6, #12
 80010b6:	19bb      	adds	r3, r7, r6
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
	////////////////////////////////////////
	loraRx->frequency = DOWNLINK_FREQ;
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <setRxBaseParameters+0xdc>)
 80010c0:	2300      	movs	r3, #0
 80010c2:	608a      	str	r2, [r1, #8]
 80010c4:	60cb      	str	r3, [r1, #12]
	loraRx->power = SX1278_POWER_17DBM;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	22fc      	movs	r2, #252	; 0xfc
 80010ca:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	220a      	movs	r2, #10
 80010d0:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2206      	movs	r2, #6
 80010d6:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	220b      	movs	r2, #11
 80010ee:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2223      	movs	r2, #35	; 0x23
 80010f4:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2204      	movs	r2, #4
 80010fa:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2208      	movs	r2, #8
 8001100:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2208      	movs	r2, #8
 800110c:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 800110e:	183a      	adds	r2, r7, r0
 8001110:	193b      	adds	r3, r7, r4
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	197b      	adds	r3, r7, r5
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	19bb      	adds	r3, r7, r6
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	b2da      	uxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	21ff      	movs	r1, #255	; 0xff
 8001134:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2220      	movs	r2, #32
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	4393      	bics	r3, r2
 8001140:	b2d9      	uxtb	r1, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2220      	movs	r2, #32
 800114c:	5c9b      	ldrb	r3, [r3, r2]
 800114e:	2220      	movs	r2, #32
 8001150:	4393      	bics	r3, r2
 8001152:	b2d9      	uxtb	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	5499      	strb	r1, [r3, r2]

	loraRx->fhssValue = HOPS_PERIOD;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	779a      	strb	r2, [r3, #30]
	loraRx->packetLength = SX1278_MAX_PACKET;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	755a      	strb	r2, [r3, #21]
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b005      	add	sp, #20
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	08f0d180 	.word	0x08f0d180

08001174 <saveRx>:

void saveRx(SX1278_t *module) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2100      	movs	r1, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fc44 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 ff3a 	bl	8002000 <HAL_Delay>
	//updateLoraLowFreq(module, STANDBY);
	setRFFrequency(module);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fae2 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fb3f 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff fb28 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fb4a 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	2394      	movs	r3, #148	; 0x94
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	58d0      	ldr	r0, [r2, r3]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3318      	adds	r3, #24
 80011b8:	001a      	movs	r2, r3
 80011ba:	2301      	movs	r3, #1
 80011bc:	210c      	movs	r1, #12
 80011be:	f7ff fa6b 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7c5b      	ldrb	r3, [r3, #17]
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d10b      	bne.n	80011e2 <saveRx+0x6e>
		//SFactor=6
		module->headerMode = IMPLICIT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2221      	movs	r2, #33	; 0x21
 80011ce:	2101      	movs	r1, #1
 80011d0:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff fbc8 	bl	8000970 <setDetectionParameters>
 80011e0:	e006      	b.n	80011f0 <saveRx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2221      	movs	r2, #33	; 0x21
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff fb60 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fb33 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	2394      	movs	r3, #148	; 0x94
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	58d0      	ldr	r0, [r2, r3]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	331e      	adds	r3, #30
 800120c:	001a      	movs	r2, r3
 800120e:	2301      	movs	r3, #1
 8001210:	2124      	movs	r1, #36	; 0x24
 8001212:	f7ff fa41 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	2394      	movs	r3, #148	; 0x94
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	58d0      	ldr	r0, [r2, r3]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	331f      	adds	r3, #31
 8001222:	001a      	movs	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	f7ff fa36 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fc0f 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	2394      	movs	r3, #148	; 0x94
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	58d0      	ldr	r0, [r2, r3]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3320      	adds	r3, #32
 8001240:	001a      	movs	r2, r3
 8001242:	2301      	movs	r3, #1
 8001244:	2111      	movs	r1, #17
 8001246:	f7ff fa27 	bl	8000698 <writeRegister>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2100      	movs	r1, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fbd5 	bl	8000a0e <updateLoraLowFreq>
	uint8_t cmd = module->packetLength;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7d5a      	ldrb	r2, [r3, #21]
 8001268:	210f      	movs	r1, #15
 800126a:	187b      	adds	r3, r7, r1
 800126c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	2394      	movs	r3, #148	; 0x94
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	58d0      	ldr	r0, [r2, r3]
 8001276:	187a      	adds	r2, r7, r1
 8001278:	2301      	movs	r3, #1
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	f7ff fa0c 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	2394      	movs	r3, #148	; 0x94
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	58d3      	ldr	r3, [r2, r3]
 8001288:	210f      	movs	r1, #15
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff f9d6 	bl	800063c <readRegister>
 8001290:	0003      	movs	r3, r0
 8001292:	001a      	movs	r2, r3
 8001294:	210e      	movs	r1, #14
 8001296:	187b      	adds	r3, r7, r1
 8001298:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	2394      	movs	r3, #148	; 0x94
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	58d0      	ldr	r0, [r2, r3]
 80012a2:	187a      	adds	r2, r7, r1
 80012a4:	2301      	movs	r3, #1
 80012a6:	210d      	movs	r1, #13
 80012a8:	f7ff f9f6 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	2394      	movs	r3, #148	; 0x94
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	58d3      	ldr	r3, [r2, r3]
 80012b4:	2122      	movs	r1, #34	; 0x22
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff f9c0 	bl	800063c <readRegister>
 80012bc:	0003      	movs	r3, r0
 80012be:	001a      	movs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	755a      	strb	r2, [r3, #21]
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}

080012cc <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2224      	movs	r2, #36	; 0x24
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d107      	bne.n	80012ee <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, SX1278_MAX_PACKET);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3325      	adds	r3, #37	; 0x25
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	2100      	movs	r1, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f004 f8e9 	bl	80054c0 <memset>
	}
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <waitForRxDone>:

void waitForRxDone(SX1278_t *loraRx) {
 80012f6:	b5b0      	push	{r4, r5, r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 80012fe:	e02e      	b.n	800135e <waitForRxDone+0x68>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	2394      	movs	r3, #148	; 0x94
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	58d3      	ldr	r3, [r2, r3]
 8001308:	250f      	movs	r5, #15
 800130a:	197c      	adds	r4, r7, r5
 800130c:	2112      	movs	r1, #18
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff f994 	bl	800063c <readRegister>
 8001314:	0003      	movs	r3, r0
 8001316:	7023      	strb	r3, [r4, #0]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 8001318:	002c      	movs	r4, r5
 800131a:	193b      	adds	r3, r7, r4
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2220      	movs	r2, #32
 8001320:	4013      	ands	r3, r2
 8001322:	d01c      	beq.n	800135e <waitForRxDone+0x68>
			uint8_t cmd = flags | (1 << 7);
 8001324:	193b      	adds	r3, r7, r4
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	4252      	negs	r2, r2
 800132c:	4313      	orrs	r3, r2
 800132e:	b2da      	uxtb	r2, r3
 8001330:	210e      	movs	r1, #14
 8001332:	187b      	adds	r3, r7, r1
 8001334:	701a      	strb	r2, [r3, #0]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	2394      	movs	r3, #148	; 0x94
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	58d0      	ldr	r0, [r2, r3]
 800133e:	187a      	adds	r2, r7, r1
 8001340:	2301      	movs	r3, #1
 8001342:	2112      	movs	r1, #18
 8001344:	f7ff f9a8 	bl	8000698 <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	2394      	movs	r3, #148	; 0x94
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	58d3      	ldr	r3, [r2, r3]
 8001350:	193c      	adds	r4, r7, r4
 8001352:	2112      	movs	r1, #18
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff f971 	bl	800063c <readRegister>
 800135a:	0003      	movs	r3, r0
 800135c:	7023      	strb	r3, [r4, #0]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	f7ff fb8a 	bl	8000a7c <SX1278_hw_GetDIO0>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d0c9      	beq.n	8001300 <waitForRxDone+0xa>
		}
	}
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001378 <configInit>:

void configInit(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	uint8_t tmp[] = "Configuring Slave LoRa module: Rx Mode\r\n";
 8001382:	2008      	movs	r0, #8
 8001384:	183b      	adds	r3, r7, r0
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <configInit+0x68>)
 8001388:	ca32      	ldmia	r2!, {r1, r4, r5}
 800138a:	c332      	stmia	r3!, {r1, r4, r5}
 800138c:	ca32      	ldmia	r2!, {r1, r4, r5}
 800138e:	c332      	stmia	r3!, {r1, r4, r5}
 8001390:	ca32      	ldmia	r2!, {r1, r4, r5}
 8001392:	c332      	stmia	r3!, {r1, r4, r5}
 8001394:	6811      	ldr	r1, [r2, #0]
 8001396:	6019      	str	r1, [r3, #0]
 8001398:	7912      	ldrb	r2, [r2, #4]
 800139a:	711a      	strb	r2, [r3, #4]
	size_t len = strlen(tmp);
 800139c:	0004      	movs	r4, r0
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7fe fead 	bl	8000100 <strlen>
 80013a6:	0003      	movs	r3, r0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_UART_Transmit(&*huart1, tmp, len, 100);
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	1939      	adds	r1, r7, r4
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	f003 fb70 	bl	8004a98 <HAL_UART_Transmit>
	setRxBaseParameters(&*loraRx);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff fe6a 	bl	8001094 <setRxBaseParameters>
	saveRx(loraRx);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7ff fed6 	bl	8001174 <saveRx>
	loraRx->status = RX_READY;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	2102      	movs	r1, #2
 80013ce:	5499      	strb	r1, [r3, r2]
	setRxParameters(loraRx);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff ff3d 	bl	8001252 <setRxParameters>
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b00e      	add	sp, #56	; 0x38
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	08005ea8 	.word	0x08005ea8

080013e4 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	2394      	movs	r3, #148	; 0x94
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	58d3      	ldr	r3, [r2, r3]
 80013f4:	2517      	movs	r5, #23
 80013f6:	197c      	adds	r4, r7, r5
 80013f8:	2112      	movs	r1, #18
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff f91e 	bl	800063c <readRegister>
 8001400:	0003      	movs	r3, r0
 8001402:	7023      	strb	r3, [r4, #0]
	SET_BIT(flags2, RX_DONE_MASK);
 8001404:	0028      	movs	r0, r5
 8001406:	183b      	adds	r3, r7, r0
 8001408:	183a      	adds	r2, r7, r0
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	430a      	orrs	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = flags2;
 8001412:	210f      	movs	r1, #15
 8001414:	187b      	adds	r3, r7, r1
 8001416:	183a      	adds	r2, r7, r0
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	701a      	strb	r2, [r3, #0]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	2394      	movs	r3, #148	; 0x94
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	58d0      	ldr	r0, [r2, r3]
 8001424:	187a      	adds	r2, r7, r1
 8001426:	2301      	movs	r3, #1
 8001428:	2112      	movs	r1, #18
 800142a:	f7ff f935 	bl	8000698 <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	2394      	movs	r3, #148	; 0x94
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	2516      	movs	r5, #22
 8001438:	197c      	adds	r4, r7, r5
 800143a:	2112      	movs	r1, #18
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff f8fd 	bl	800063c <readRegister>
 8001442:	0003      	movs	r3, r0
 8001444:	7023      	strb	r3, [r4, #0]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8001446:	197b      	adds	r3, r7, r5
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2220      	movs	r2, #32
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
	return errorActivation;
 8001450:	693b      	ldr	r3, [r7, #16]
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b006      	add	sp, #24
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800145c <getLoraPacket>:

void getLoraPacket(SX1278_t *loraRx) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	loraRx->packetLength = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	2394      	movs	r3, #148	; 0x94
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	58d3      	ldr	r3, [r2, r3]
 800146c:	2113      	movs	r1, #19
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff f8e4 	bl	800063c <readRegister>
 8001474:	0003      	movs	r3, r0
 8001476:	001a      	movs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 800147c:	240f      	movs	r4, #15
 800147e:	193b      	adds	r3, r7, r4
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <getLoraPacket+0x80>)
 8001486:	2200      	movs	r2, #0
 8001488:	2101      	movs	r1, #1
 800148a:	0018      	movs	r0, r3
 800148c:	f001 fd63 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fdb5 	bl	8002000 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100); // send address
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	2394      	movs	r3, #148	; 0x94
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	58d0      	ldr	r0, [r2, r3]
 800149e:	1939      	adds	r1, r7, r4
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	2201      	movs	r2, #1
 80014a4:	f002 fc58 	bl	8003d58 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->packetLength, 100); // receive 6 bytes data
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	2394      	movs	r3, #148	; 0x94
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	58d0      	ldr	r0, [r2, r3]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3325      	adds	r3, #37	; 0x25
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7d5b      	ldrb	r3, [r3, #21]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	f002 fda3 	bl	8004008 <HAL_SPI_Receive>
	HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 fd9c 	bl	8002000 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <getLoraPacket+0x80>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	2101      	movs	r1, #1
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fd41 	bl	8002f56 <HAL_GPIO_WritePin>
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b005      	add	sp, #20
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	50000400 	.word	0x50000400

080014e0 <printParameters>:

void printParameters(int timeRx, UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart1, loraRx->buffer, loraRx->packetLength, 100);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3325      	adds	r3, #37	; 0x25
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7d5b      	ldrb	r3, [r3, #21]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	f003 facc 	bl	8004a98 <HAL_UART_Transmit>
	uint8_t largo = sprintf((char*) loraRx->buffer,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3325      	adds	r3, #37	; 0x25
 8001504:	0018      	movs	r0, r3
			" - Rx Ok: %d ms %d bytes\n", timeRx, loraRx->packetLength);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7d5b      	ldrb	r3, [r3, #21]
	uint8_t largo = sprintf((char*) loraRx->buffer,
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	490a      	ldr	r1, [pc, #40]	; (8001538 <printParameters+0x58>)
 800150e:	f003 ffdf 	bl	80054d0 <siprintf>
 8001512:	0002      	movs	r2, r0
 8001514:	2017      	movs	r0, #23
 8001516:	183b      	adds	r3, r7, r0
 8001518:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart1, loraRx->buffer, largo, 100);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3325      	adds	r3, #37	; 0x25
 800151e:	0019      	movs	r1, r3
 8001520:	183b      	adds	r3, r7, r0
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	2364      	movs	r3, #100	; 0x64
 800152a:	f003 fab5 	bl	8004a98 <HAL_UART_Transmit>
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b006      	add	sp, #24
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	08005ed4 	.word	0x08005ed4

0800153c <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2224      	movs	r2, #36	; 0x24
 800154a:	5c9b      	ldrb	r3, [r3, r2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10a      	bne.n	8001566 <read+0x2a>
		configInit(huart1, loraRx);
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0011      	movs	r1, r2
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff ff0e 	bl	8001378 <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2105      	movs	r1, #5
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fa54 	bl	8000a0e <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff feaf 	bl	80012cc <clearMemForRx>
	int timeStart = HAL_GetTick();
 800156e:	f000 fd3d 	bl	8001fec <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
	waitForRxDone(loraRx);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff febc 	bl	80012f6 <waitForRxDone>
	int timeEnd = HAL_GetTick();
 800157e:	f000 fd35 	bl	8001fec <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff27 	bl	80013e4 <crcErrorActivation>
 8001596:	0003      	movs	r3, r0
 8001598:	60bb      	str	r3, [r7, #8]
	if (errorActivation == 1) {
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d01c      	beq.n	80015da <read+0x9e>
		return;
	}
	getLoraPacket(loraRx);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff ff5a 	bl	800145c <getLoraPacket>
	printParameters(timeRx, huart1, loraRx);
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	0018      	movs	r0, r3
 80015b0:	f7ff ff96 	bl	80014e0 <printParameters>
	setRxParameters(loraRx);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff fe4b 	bl	8001252 <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2105      	movs	r1, #5
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff fa24 	bl	8000a0e <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fa0b 	bl	80009e4 <readMode>
 80015ce:	0003      	movs	r3, r0
 80015d0:	0019      	movs	r1, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2223      	movs	r2, #35	; 0x23
 80015d6:	5499      	strb	r1, [r3, r2]
 80015d8:	e000      	b.n	80015dc <read+0xa0>
		return;
 80015da:	46c0      	nop			; (mov r8, r8)
}
 80015dc:	46bd      	mov	sp, r7
 80015de:	b006      	add	sp, #24
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	4c4e      	ldr	r4, [pc, #312]	; (8001720 <main+0x13c>)
 80015e8:	44a5      	add	sp, r4
 80015ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015ec:	f000 fc82 	bl	8001ef4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015f0:	f000 f8aa 	bl	8001748 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015f4:	f000 fa0a 	bl	8001a0c <MX_GPIO_Init>
	MX_ADC1_Init();
 80015f8:	f000 f8ee 	bl	80017d8 <MX_ADC1_Init>
	MX_SPI1_Init();
 80015fc:	f000 f97a 	bl	80018f4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001600:	f000 f9b6 	bl	8001970 <MX_USART1_UART_Init>
	MX_CRC_Init();
 8001604:	f000 f952 	bl	80018ac <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	ledInit(&led);
 8001608:	239e      	movs	r3, #158	; 0x9e
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fa4a 	bl	8000aa8 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <main+0x140>)
 8001616:	2298      	movs	r2, #152	; 0x98
 8001618:	0052      	lsls	r2, r2, #1
 800161a:	18ba      	adds	r2, r7, r2
 800161c:	601a      	str	r2, [r3, #0]
	lora_ptr = &loraRx;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <main+0x140>)
 8001620:	003a      	movs	r2, r7
 8001622:	601a      	str	r2, [r3, #0]

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 8001624:	2198      	movs	r1, #152	; 0x98
 8001626:	0089      	lsls	r1, r1, #2
 8001628:	187b      	adds	r3, r7, r1
 800162a:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <main+0x144>)
 800162c:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	4a3d      	ldr	r2, [pc, #244]	; (800172c <main+0x148>)
 8001638:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2201      	movs	r2, #1
 800163e:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	4a3a      	ldr	r2, [pc, #232]	; (800172c <main+0x148>)
 8001644:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <main+0x14c>)
 800164e:	24a6      	movs	r4, #166	; 0xa6
 8001650:	00a4      	lsls	r4, r4, #2
 8001652:	191b      	adds	r3, r3, r4
 8001654:	19db      	adds	r3, r3, r7
 8001656:	187a      	adds	r2, r7, r1
 8001658:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <main+0x150>)
 800165c:	191b      	adds	r3, r3, r4
 800165e:	19db      	adds	r3, r3, r7
 8001660:	187a      	adds	r2, r7, r1
 8001662:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <main+0x14c>)
 8001666:	191b      	adds	r3, r3, r4
 8001668:	19da      	adds	r2, r3, r7
 800166a:	2394      	movs	r3, #148	; 0x94
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4932      	ldr	r1, [pc, #200]	; (8001738 <main+0x154>)
 8001670:	50d1      	str	r1, [r2, r3]
	loraRx.spi = &hspi1;
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <main+0x150>)
 8001674:	191b      	adds	r3, r3, r4
 8001676:	19da      	adds	r2, r3, r7
 8001678:	2394      	movs	r3, #148	; 0x94
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	492e      	ldr	r1, [pc, #184]	; (8001738 <main+0x154>)
 800167e:	50d1      	str	r1, [r2, r3]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <main+0x148>)
 8001682:	2201      	movs	r2, #1
 8001684:	2101      	movs	r1, #1
 8001686:	0018      	movs	r0, r3
 8001688:	f001 fc65 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <main+0x148>)
 800168e:	2201      	movs	r2, #1
 8001690:	2102      	movs	r1, #2
 8001692:	0018      	movs	r0, r3
 8001694:	f001 fc5f 	bl	8002f56 <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <main+0x154>)
 800169a:	2101      	movs	r1, #1
 800169c:	0018      	movs	r0, r3
 800169e:	f7fe ffcd 	bl	800063c <readRegister>
 80016a2:	0003      	movs	r3, r0
 80016a4:	0019      	movs	r1, r3
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <main+0x14c>)
 80016a8:	191b      	adds	r3, r3, r4
 80016aa:	19db      	adds	r3, r3, r7
 80016ac:	2223      	movs	r2, #35	; 0x23
 80016ae:	5499      	strb	r1, [r3, r2]
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <main+0x154>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7fe ffc1 	bl	800063c <readRegister>
 80016ba:	0003      	movs	r3, r0
 80016bc:	0019      	movs	r1, r3
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <main+0x150>)
 80016c0:	191b      	adds	r3, r3, r4
 80016c2:	19db      	adds	r3, r3, r7
 80016c4:	2223      	movs	r2, #35	; 0x23
 80016c6:	5499      	strb	r1, [r3, r2]
	loraTx.status = UNKNOW;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <main+0x14c>)
 80016ca:	191b      	adds	r3, r3, r4
 80016cc:	19db      	adds	r3, r3, r7
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]
	loraRx.status = UNKNOW;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <main+0x150>)
 80016d6:	191b      	adds	r3, r3, r4
 80016d8:	19db      	adds	r3, r3, r7
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]
	bool TX_MODE = false;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <main+0x158>)
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
	bool RX_MODE = true;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <main+0x15c>)
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (RX_MODE) {
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <main+0x15c>)
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <main+0x122>
			read(&huart1, &loraRx);
 80016fa:	003a      	movs	r2, r7
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <main+0x160>)
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff ff1b 	bl	800153c <read>
		}
		if (TX_MODE) {
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <main+0x158>)
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ef      	beq.n	80016f0 <main+0x10c>
			//if (HAL_GetTick() - counter > 700){
			//counter = HAL_GetTick();
			transmit(&loraTx);
 8001710:	2398      	movs	r3, #152	; 0x98
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fb94 	bl	8000e44 <transmit>
		if (RX_MODE) {
 800171c:	e7e8      	b.n	80016f0 <main+0x10c>
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	fffffd64 	.word	0xfffffd64
 8001724:	2000020c 	.word	0x2000020c
 8001728:	50000800 	.word	0x50000800
 800172c:	50000400 	.word	0x50000400
 8001730:	fffffe98 	.word	0xfffffe98
 8001734:	fffffd68 	.word	0xfffffd68
 8001738:	20000114 	.word	0x20000114
 800173c:	00000297 	.word	0x00000297
 8001740:	00000296 	.word	0x00000296
 8001744:	20000178 	.word	0x20000178

08001748 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b093      	sub	sp, #76	; 0x4c
 800174c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800174e:	2414      	movs	r4, #20
 8001750:	193b      	adds	r3, r7, r4
 8001752:	0018      	movs	r0, r3
 8001754:	2334      	movs	r3, #52	; 0x34
 8001756:	001a      	movs	r2, r3
 8001758:	2100      	movs	r1, #0
 800175a:	f003 feb1 	bl	80054c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	0018      	movs	r0, r3
 8001762:	2310      	movs	r3, #16
 8001764:	001a      	movs	r2, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f003 feaa 	bl	80054c0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	0018      	movs	r0, r3
 8001772:	f001 fc0d 	bl	8002f90 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2202      	movs	r2, #2
 800177a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0052      	lsls	r2, r2, #1
 8001782:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2240      	movs	r2, #64	; 0x40
 800178e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001796:	193b      	adds	r3, r7, r4
 8001798:	0018      	movs	r0, r3
 800179a:	f001 fc45 	bl	8003028 <HAL_RCC_OscConfig>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x5e>
		Error_Handler();
 80017a2:	f000 f9cb 	bl	8001b3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2100      	movs	r1, #0
 80017c2:	0018      	movs	r0, r3
 80017c4:	f001 ff40 	bl	8003648 <HAL_RCC_ClockConfig>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x88>
		Error_Handler();
 80017cc:	f000 f9b6 	bl	8001b3c <Error_Handler>
	}
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b013      	add	sp, #76	; 0x4c
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	0018      	movs	r0, r3
 80017e2:	230c      	movs	r3, #12
 80017e4:	001a      	movs	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f003 fe6a 	bl	80054c0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80017ec:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <MX_ADC1_Init+0xcc>)
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <MX_ADC1_Init+0xd0>)
 80017f0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <MX_ADC1_Init+0xcc>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	05d2      	lsls	r2, r2, #23
 80017f8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <MX_ADC1_Init+0xcc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800180e:	2204      	movs	r2, #4
 8001810:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001814:	2200      	movs	r2, #0
 8001816:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800181a:	2200      	movs	r2, #0
 800181c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001820:	2200      	movs	r2, #0
 8001822:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001826:	2201      	movs	r2, #1
 8001828:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800182c:	2220      	movs	r2, #32
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001840:	222c      	movs	r2, #44	; 0x2c
 8001842:	2100      	movs	r1, #0
 8001844:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800184e:	2200      	movs	r2, #0
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800185a:	223c      	movs	r2, #60	; 0x3c
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001862:	2200      	movs	r2, #0
 8001864:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_ADC1_Init+0xcc>)
 8001868:	0018      	movs	r0, r3
 800186a:	f000 fceb 	bl	8002244 <HAL_ADC_Init>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0x9e>
		Error_Handler();
 8001872:	f000 f963 	bl	8001b3c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001888:	1d3a      	adds	r2, r7, #4
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_ADC1_Init+0xcc>)
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fe80 	bl	8002594 <HAL_ADC_ConfigChannel>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <MX_ADC1_Init+0xc4>
		Error_Handler();
 8001898:	f000 f950 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000008c 	.word	0x2000008c
 80018a8:	40012400 	.word	0x40012400

080018ac <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_CRC_Init+0x40>)
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <MX_CRC_Init+0x44>)
 80018b4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_CRC_Init+0x40>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_CRC_Init+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_CRC_Init+0x40>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_CRC_Init+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_CRC_Init+0x40>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <MX_CRC_Init+0x40>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f001 f8e8 	bl	8002aac <HAL_CRC_Init>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <MX_CRC_Init+0x38>
		Error_Handler();
 80018e0:	f000 f92c 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	200000f0 	.word	0x200000f0
 80018f0:	40023000 	.word	0x40023000

080018f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_SPI1_Init+0x74>)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <MX_SPI1_Init+0x78>)
 80018fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_SPI1_Init+0x74>)
 8001900:	2282      	movs	r2, #130	; 0x82
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_SPI1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_SPI1_Init+0x74>)
 800190e:	22e0      	movs	r2, #224	; 0xe0
 8001910:	00d2      	lsls	r2, r2, #3
 8001912:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_SPI1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_SPI1_Init+0x74>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_SPI1_Init+0x74>)
 800192a:	2218      	movs	r2, #24
 800192c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_SPI1_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_SPI1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_SPI1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_SPI1_Init+0x74>)
 8001942:	2207      	movs	r2, #7
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_SPI1_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SPI1_Init+0x74>)
 800194e:	2208      	movs	r2, #8
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <MX_SPI1_Init+0x74>)
 8001954:	0018      	movs	r0, r3
 8001956:	f002 f947 	bl	8003be8 <HAL_SPI_Init>
 800195a:	1e03      	subs	r3, r0, #0
 800195c:	d001      	beq.n	8001962 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800195e:	f000 f8ed 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000114 	.word	0x20000114
 800196c:	40013000 	.word	0x40013000

08001970 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <MX_USART1_UART_Init+0x98>)
 8001978:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 800197c:	22e1      	movs	r2, #225	; 0xe1
 800197e:	0252      	lsls	r2, r2, #9
 8001980:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f003 f816 	bl	80049ec <HAL_UART_Init>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80019c4:	f000 f8ba 	bl	8001b3c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019ca:	2100      	movs	r1, #0
 80019cc:	0018      	movs	r0, r3
 80019ce:	f003 fc6d 	bl	80052ac <HAL_UARTEx_SetTxFifoThreshold>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80019d6:	f000 f8b1 	bl	8001b3c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019dc:	2100      	movs	r1, #0
 80019de:	0018      	movs	r0, r3
 80019e0:	f003 fca4 	bl	800532c <HAL_UARTEx_SetRxFifoThreshold>
 80019e4:	1e03      	subs	r3, r0, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80019e8:	f000 f8a8 	bl	8001b3c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <MX_USART1_UART_Init+0x94>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f003 fc22 	bl	8005238 <HAL_UARTEx_DisableFifoMode>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80019f8:	f000 f8a0 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20000178 	.word	0x20000178
 8001a08:	40013800 	.word	0x40013800

08001a0c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a12:	240c      	movs	r4, #12
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	0018      	movs	r0, r3
 8001a18:	2314      	movs	r3, #20
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f003 fd4f 	bl	80054c0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2201      	movs	r2, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a40:	2102      	movs	r1, #2
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a58:	2104      	movs	r1, #4
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <MX_GPIO_Init+0x124>)
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <MX_GPIO_Init+0x128>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2103      	movs	r1, #3
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 fa70 	bl	8002f56 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	0059      	lsls	r1, r3, #1
 8001a7a:	23a0      	movs	r3, #160	; 0xa0
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	2200      	movs	r2, #0
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 fa68 	bl	8002f56 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <MX_GPIO_Init+0x12c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2140      	movs	r1, #64	; 0x40
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 fa62 	bl	8002f56 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2203      	movs	r2, #3
 8001a96:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_GPIO_Init+0x128>)
 8001aae:	0019      	movs	r1, r3
 8001ab0:	0010      	movs	r0, r2
 8001ab2:	f001 f8cf 	bl	8002c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2204      	movs	r2, #4
 8001aba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <MX_GPIO_Init+0x128>)
 8001acc:	0019      	movs	r1, r3
 8001ace:	0010      	movs	r0, r2
 8001ad0:	f001 f8c0 	bl	8002c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8001ad4:	0021      	movs	r1, r4
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0052      	lsls	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	000c      	movs	r4, r1
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	193b      	adds	r3, r7, r4
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001af2:	193a      	adds	r2, r7, r4
 8001af4:	23a0      	movs	r3, #160	; 0xa0
 8001af6:	05db      	lsls	r3, r3, #23
 8001af8:	0011      	movs	r1, r2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f001 f8aa 	bl	8002c54 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 8001b00:	0021      	movs	r1, r4
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <MX_GPIO_Init+0x12c>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f001 f897 	bl	8002c54 <HAL_GPIO_Init>

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b009      	add	sp, #36	; 0x24
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800

08001b3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_MspInit+0x44>)
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_MspInit+0x44>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_MspInit+0x44>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x44>)
 8001b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_MspInit+0x44>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0549      	lsls	r1, r1, #21
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_MspInit+0x44>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	055b      	lsls	r3, r3, #21
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	2414      	movs	r4, #20
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f003 fc8c 	bl	80054c0 <memset>
  if(hadc->Instance==ADC1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_ADC_MspInit+0x80>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d129      	bne.n	8001c06 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	0349      	lsls	r1, r1, #13
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	035b      	lsls	r3, r3, #13
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_ADC_MspInit+0x84>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	22ff      	movs	r2, #255	; 0xff
 8001bea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	2203      	movs	r2, #3
 8001bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	193a      	adds	r2, r7, r4
 8001bfa:	23a0      	movs	r3, #160	; 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	0011      	movs	r1, r2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f001 f827 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b00b      	add	sp, #44	; 0x2c
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40012400 	.word	0x40012400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_CRC_MspInit+0x38>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10d      	bne.n	8001c46 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_CRC_MspInit+0x3c>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_CRC_MspInit+0x3c>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0149      	lsls	r1, r1, #5
 8001c34:	430a      	orrs	r2, r1
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_CRC_MspInit+0x3c>)
 8001c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40023000 	.word	0x40023000
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	2414      	movs	r4, #20
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	0018      	movs	r0, r3
 8001c66:	2314      	movs	r3, #20
 8001c68:	001a      	movs	r2, r3
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	f003 fc28 	bl	80054c0 <memset>
  if(hspi->Instance==SPI1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <HAL_SPI_MspInit+0xd0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d152      	bne.n	8001d20 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0149      	lsls	r1, r1, #5
 8001c84:	430a      	orrs	r2, r1
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	015b      	lsls	r3, r3, #5
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_SPI_MspInit+0xd4>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	22c0      	movs	r2, #192	; 0xc0
 8001cca:	0152      	lsls	r2, r2, #5
 8001ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	193a      	adds	r2, r7, r4
 8001ce8:	23a0      	movs	r3, #160	; 0xa0
 8001cea:	05db      	lsls	r3, r3, #23
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 ffb0 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2202      	movs	r2, #2
 8001d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_SPI_MspInit+0xd8>)
 8001d18:	0019      	movs	r1, r3
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	f000 ff9a 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b00b      	add	sp, #44	; 0x2c
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	50000400 	.word	0x50000400

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b091      	sub	sp, #68	; 0x44
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	232c      	movs	r3, #44	; 0x2c
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	0018      	movs	r0, r3
 8001d42:	2314      	movs	r3, #20
 8001d44:	001a      	movs	r2, r3
 8001d46:	2100      	movs	r1, #0
 8001d48:	f003 fbba 	bl	80054c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	2414      	movs	r4, #20
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	0018      	movs	r0, r3
 8001d52:	2318      	movs	r3, #24
 8001d54:	001a      	movs	r2, r3
 8001d56:	2100      	movs	r1, #0
 8001d58:	f003 fbb2 	bl	80054c0 <memset>
  if(huart->Instance==USART1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_UART_MspInit+0xbc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d13f      	bne.n	8001de6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d66:	193b      	adds	r3, r7, r4
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	0018      	movs	r0, r3
 8001d76:	f001 fe11 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d7e:	f7ff fedd 	bl	8001b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	01c9      	lsls	r1, r1, #7
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	01db      	lsls	r3, r3, #7
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_UART_MspInit+0xc0>)
 8001dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	22c0      	movs	r2, #192	; 0xc0
 8001dbc:	00d2      	lsls	r2, r2, #3
 8001dbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	187a      	adds	r2, r7, r1
 8001dda:	23a0      	movs	r3, #160	; 0xa0
 8001ddc:	05db      	lsls	r3, r3, #23
 8001dde:	0011      	movs	r1, r2
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 ff37 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b011      	add	sp, #68	; 0x44
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40021000 	.word	0x40021000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f000 f8d4 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f003 fb08 	bl	800546c <__errno>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	425b      	negs	r3, r3
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	18d2      	adds	r2, r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <_sbrk+0x64>)
 8001e78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b006      	add	sp, #24
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20002000 	.word	0x20002000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	20000214 	.word	0x20000214
 8001e90:	20000230 	.word	0x20000230

08001e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ea2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea4:	f7ff fff6 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <LoopForever+0xe>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	; (8001eec <LoopForever+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ece:	f003 fad3 	bl	8005478 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ed2:	f7ff fb87 	bl	80015e4 <main>

08001ed6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ed6:	e7fe      	b.n	8001ed6 <LoopForever>
  ldr   r0, =_estack
 8001ed8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ee4:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 8001ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eec:	2000022c 	.word	0x2000022c

08001ef0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x3c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Init+0x3c>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f000 f810 	bl	8001f34 <HAL_InitTick>
 8001f14:	1e03      	subs	r3, r0, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e001      	b.n	8001f24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fe12 	bl	8001b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_InitTick+0x88>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d02b      	beq.n	8001fa4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_InitTick+0x8c>)
 8001f4e:	681c      	ldr	r4, [r3, #0]
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_InitTick+0x88>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	0019      	movs	r1, r3
 8001f56:	23fa      	movs	r3, #250	; 0xfa
 8001f58:	0098      	lsls	r0, r3, #2
 8001f5a:	f7fe f8e3 	bl	8000124 <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	0019      	movs	r1, r3
 8001f62:	0020      	movs	r0, r4
 8001f64:	f7fe f8de 	bl	8000124 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 fd91 	bl	8002a92 <HAL_SYSTICK_Config>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d112      	bne.n	8001f9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d80a      	bhi.n	8001f90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	425b      	negs	r3, r3
 8001f80:	2200      	movs	r2, #0
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 fd70 	bl	8002a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_InitTick+0x90>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00d      	b.n	8001fac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f90:	230f      	movs	r3, #15
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e008      	b.n	8001fac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e003      	b.n	8001fac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b005      	add	sp, #20
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000218 	.word	0x20000218

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000218 	.word	0x20000218

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	001a      	movs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	189b      	adds	r3, r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	f7ff ffe0 	bl	8001fec <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	20000008 	.word	0x20000008

08002048 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002058:	401a      	ands	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	fe3fffff 	.word	0xfe3fffff

08002070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	23e0      	movs	r3, #224	; 0xe0
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	4013      	ands	r3, r2
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}

0800208a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	2104      	movs	r1, #4
 800209e:	400a      	ands	r2, r1
 80020a0:	2107      	movs	r1, #7
 80020a2:	4091      	lsls	r1, r2
 80020a4:	000a      	movs	r2, r1
 80020a6:	43d2      	mvns	r2, r2
 80020a8:	401a      	ands	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2104      	movs	r1, #4
 80020ae:	400b      	ands	r3, r1
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4099      	lsls	r1, r3
 80020b4:	000b      	movs	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	2104      	movs	r1, #4
 80020d6:	400a      	ands	r2, r1
 80020d8:	2107      	movs	r1, #7
 80020da:	4091      	lsls	r1, r2
 80020dc:	000a      	movs	r2, r1
 80020de:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2104      	movs	r1, #4
 80020e4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	0013      	movs	r3, r2
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	211f      	movs	r1, #31
 8002106:	400a      	ands	r2, r1
 8002108:	210f      	movs	r1, #15
 800210a:	4091      	lsls	r1, r2
 800210c:	000a      	movs	r2, r1
 800210e:	43d2      	mvns	r2, r2
 8002110:	401a      	ands	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	210f      	movs	r1, #15
 8002118:	4019      	ands	r1, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	201f      	movs	r0, #31
 800211e:	4003      	ands	r3, r0
 8002120:	4099      	lsls	r1, r3
 8002122:	000b      	movs	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}

08002132 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	035b      	lsls	r3, r3, #13
 8002144:	0b5b      	lsrs	r3, r3, #13
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	0352      	lsls	r2, r2, #13
 8002166:	0b52      	lsrs	r2, r2, #13
 8002168:	43d2      	mvns	r2, r2
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	0212      	lsls	r2, r2, #8
 800218c:	43d2      	mvns	r2, r2
 800218e:	401a      	ands	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	400b      	ands	r3, r1
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	07ffff00 	.word	0x07ffff00

080021b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80021be:	4013      	ands	r3, r2
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	0552      	lsls	r2, r2, #21
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	6fffffe8 	.word	0x6fffffe8

080021d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	401a      	ands	r2, r3
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	055b      	lsls	r3, r3, #21
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d101      	bne.n	80021f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <LL_ADC_IsEnabled+0x18>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <LL_ADC_IsEnabled+0x1a>
 8002218:	2300      	movs	r3, #0
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b002      	add	sp, #8
 8002220:	bd80      	pop	{r7, pc}

08002222 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2204      	movs	r2, #4
 8002230:	4013      	ands	r3, r2
 8002232:	2b04      	cmp	r3, #4
 8002234:	d101      	bne.n	800223a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	0018      	movs	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	b002      	add	sp, #8
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e17f      	b.n	800256a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff fc8b 	bl	8001b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2254      	movs	r2, #84	; 0x54
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ffa3 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d115      	bne.n	80022c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff ff88 	bl	80021b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a0:	4bb4      	ldr	r3, [pc, #720]	; (8002574 <HAL_ADC_Init+0x330>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	49b4      	ldr	r1, [pc, #720]	; (8002578 <HAL_ADC_Init+0x334>)
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7fd ff3c 	bl	8000124 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ff86 	bl	80021d8 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	2210      	movs	r2, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2201      	movs	r2, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff ff94 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	2210      	movs	r2, #16
 8002304:	4013      	ands	r3, r2
 8002306:	d000      	beq.n	800230a <HAL_ADC_Init+0xc6>
 8002308:	e122      	b.n	8002550 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d000      	beq.n	8002312 <HAL_ADC_Init+0xce>
 8002310:	e11e      	b.n	8002550 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a99      	ldr	r2, [pc, #612]	; (800257c <HAL_ADC_Init+0x338>)
 8002318:	4013      	ands	r3, r2
 800231a:	2202      	movs	r2, #2
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff ff6a 	bl	8002200 <LL_ADC_IsEnabled>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d000      	beq.n	8002332 <HAL_ADC_Init+0xee>
 8002330:	e0ad      	b.n	800248e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7e1b      	ldrb	r3, [r3, #24]
 800233a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800233c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7e5b      	ldrb	r3, [r3, #25]
 8002342:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002344:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7e9b      	ldrb	r3, [r3, #26]
 800234a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800234c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_ADC_Init+0x118>
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	015b      	lsls	r3, r3, #5
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0x11a>
 800235c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800235e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002364:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	da04      	bge.n	8002378 <HAL_ADC_Init+0x134>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	e001      	b.n	800237c <HAL_ADC_Init+0x138>
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800237c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	5c5b      	ldrb	r3, [r3, r1]
 8002384:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002386:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d115      	bne.n	80023c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e9b      	ldrb	r3, [r3, #26]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0252      	lsls	r2, r2, #9
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e00b      	b.n	80023c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	2220      	movs	r2, #32
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d0:	23e0      	movs	r3, #224	; 0xe0
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023da:	4313      	orrs	r3, r2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_ADC_Init+0x33c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	0f9b      	lsrs	r3, r3, #30
 80023fe:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	223c      	movs	r2, #60	; 0x3c
 8002410:	5c9b      	ldrb	r3, [r3, r2]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d111      	bne.n	800243a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0f9b      	lsrs	r3, r3, #30
 800241c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002422:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002428:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800242e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	2201      	movs	r2, #1
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_ADC_Init+0x340>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	430a      	orrs	r2, r1
 800244e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	429a      	cmp	r2, r3
 800245a:	d018      	beq.n	800248e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	05db      	lsls	r3, r3, #23
 8002464:	429a      	cmp	r2, r3
 8002466:	d012      	beq.n	800248e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	429a      	cmp	r2, r3
 8002472:	d00c      	beq.n	800248e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_ADC_Init+0x344>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_ADC_Init+0x348>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	23f0      	movs	r3, #240	; 0xf0
 8002484:	039b      	lsls	r3, r3, #14
 8002486:	401a      	ands	r2, r3
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_ADC_Init+0x344>)
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	001a      	movs	r2, r3
 8002498:	2100      	movs	r1, #0
 800249a:	f7ff fdf6 	bl	800208a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	493a      	ldr	r1, [pc, #232]	; (8002590 <HAL_ADC_Init+0x34c>)
 80024a8:	001a      	movs	r2, r3
 80024aa:	f7ff fdee 	bl	800208a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2110      	movs	r1, #16
 80024c2:	4249      	negs	r1, r1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
 80024c8:	e018      	b.n	80024fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	039b      	lsls	r3, r3, #14
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d112      	bne.n	80024fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	221c      	movs	r2, #28
 80024e6:	4013      	ands	r3, r2
 80024e8:	2210      	movs	r2, #16
 80024ea:	4252      	negs	r2, r2
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0011      	movs	r1, r2
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fdde 	bl	80020c4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002508:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800250e:	429a      	cmp	r2, r3
 8002510:	d10b      	bne.n	800252a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	2203      	movs	r2, #3
 800251e:	4393      	bics	r3, r2
 8002520:	2201      	movs	r2, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002528:	e01c      	b.n	8002564 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	2212      	movs	r2, #18
 8002530:	4393      	bics	r3, r2
 8002532:	2210      	movs	r2, #16
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2201      	movs	r2, #1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002546:	231f      	movs	r3, #31
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800254e:	e009      	b.n	8002564 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	2210      	movs	r2, #16
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800255c:	231f      	movs	r3, #31
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002564:	231f      	movs	r3, #31
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b008      	add	sp, #32
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	20000000 	.word	0x20000000
 8002578:	00030d40 	.word	0x00030d40
 800257c:	fffffefd 	.word	0xfffffefd
 8002580:	fffe0201 	.word	0xfffe0201
 8002584:	1ffffc02 	.word	0x1ffffc02
 8002588:	40012708 	.word	0x40012708
 800258c:	ffc3ffff 	.word	0xffc3ffff
 8002590:	07ffff04 	.word	0x07ffff04

08002594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2254      	movs	r2, #84	; 0x54
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x24>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e1c0      	b.n	800293a <HAL_ADC_ConfigChannel+0x3a6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2254      	movs	r2, #84	; 0x54
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff fe2c 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 80025ca:	1e03      	subs	r3, r0, #0
 80025cc:	d000      	beq.n	80025d0 <HAL_ADC_ConfigChannel+0x3c>
 80025ce:	e1a3      	b.n	8002918 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d100      	bne.n	80025da <HAL_ADC_ConfigChannel+0x46>
 80025d8:	e143      	b.n	8002862 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d004      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025ea:	4ac1      	ldr	r2, [pc, #772]	; (80028f0 <HAL_ADC_ConfigChannel+0x35c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0019      	movs	r1, r3
 80025fa:	0010      	movs	r0, r2
 80025fc:	f7ff fd99 	bl	8002132 <LL_ADC_REG_SetSequencerChAdd>
 8002600:	e0c9      	b.n	8002796 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	211f      	movs	r1, #31
 800260c:	400b      	ands	r3, r1
 800260e:	210f      	movs	r1, #15
 8002610:	4099      	lsls	r1, r3
 8002612:	000b      	movs	r3, r1
 8002614:	43db      	mvns	r3, r3
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	035b      	lsls	r3, r3, #13
 8002620:	0b5b      	lsrs	r3, r3, #13
 8002622:	d105      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x9c>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	221f      	movs	r2, #31
 800262c:	4013      	ands	r3, r2
 800262e:	e098      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d000      	beq.n	800263c <HAL_ADC_ConfigChannel+0xa8>
 800263a:	e091      	b.n	8002760 <HAL_ADC_ConfigChannel+0x1cc>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d000      	beq.n	8002648 <HAL_ADC_ConfigChannel+0xb4>
 8002646:	e089      	b.n	800275c <HAL_ADC_ConfigChannel+0x1c8>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2204      	movs	r2, #4
 800264e:	4013      	ands	r3, r2
 8002650:	d000      	beq.n	8002654 <HAL_ADC_ConfigChannel+0xc0>
 8002652:	e081      	b.n	8002758 <HAL_ADC_ConfigChannel+0x1c4>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2208      	movs	r2, #8
 800265a:	4013      	ands	r3, r2
 800265c:	d000      	beq.n	8002660 <HAL_ADC_ConfigChannel+0xcc>
 800265e:	e079      	b.n	8002754 <HAL_ADC_ConfigChannel+0x1c0>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d000      	beq.n	800266c <HAL_ADC_ConfigChannel+0xd8>
 800266a:	e071      	b.n	8002750 <HAL_ADC_ConfigChannel+0x1bc>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d000      	beq.n	8002678 <HAL_ADC_ConfigChannel+0xe4>
 8002676:	e069      	b.n	800274c <HAL_ADC_ConfigChannel+0x1b8>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	4013      	ands	r3, r2
 8002680:	d000      	beq.n	8002684 <HAL_ADC_ConfigChannel+0xf0>
 8002682:	e061      	b.n	8002748 <HAL_ADC_ConfigChannel+0x1b4>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	4013      	ands	r3, r2
 800268c:	d000      	beq.n	8002690 <HAL_ADC_ConfigChannel+0xfc>
 800268e:	e059      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1b0>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4013      	ands	r3, r2
 800269a:	d151      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1ac>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d149      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1a8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	d141      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1a4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d139      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1a0>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4013      	ands	r3, r2
 80026ca:	d131      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x19c>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	4013      	ands	r3, r2
 80026d6:	d129      	bne.n	800272c <HAL_ADC_ConfigChannel+0x198>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	01db      	lsls	r3, r3, #7
 80026e0:	4013      	ands	r3, r2
 80026e2:	d121      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x194>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4013      	ands	r3, r2
 80026ee:	d119      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x190>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	4013      	ands	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x18c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	4013      	ands	r3, r2
 8002706:	d109      	bne.n	800271c <HAL_ADC_ConfigChannel+0x188>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	02db      	lsls	r3, r3, #11
 8002710:	4013      	ands	r3, r2
 8002712:	d001      	beq.n	8002718 <HAL_ADC_ConfigChannel+0x184>
 8002714:	2312      	movs	r3, #18
 8002716:	e024      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002718:	2300      	movs	r3, #0
 800271a:	e022      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 800271c:	2311      	movs	r3, #17
 800271e:	e020      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002720:	2310      	movs	r3, #16
 8002722:	e01e      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002724:	230f      	movs	r3, #15
 8002726:	e01c      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002728:	230e      	movs	r3, #14
 800272a:	e01a      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 800272c:	230d      	movs	r3, #13
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002730:	230c      	movs	r3, #12
 8002732:	e016      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002734:	230b      	movs	r3, #11
 8002736:	e014      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002738:	230a      	movs	r3, #10
 800273a:	e012      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 800273c:	2309      	movs	r3, #9
 800273e:	e010      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002740:	2308      	movs	r3, #8
 8002742:	e00e      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002744:	2307      	movs	r3, #7
 8002746:	e00c      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002748:	2306      	movs	r3, #6
 800274a:	e00a      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 800274c:	2305      	movs	r3, #5
 800274e:	e008      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002750:	2304      	movs	r3, #4
 8002752:	e006      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002754:	2303      	movs	r3, #3
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002758:	2302      	movs	r3, #2
 800275a:	e002      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_ADC_ConfigChannel+0x1ce>
 8002760:	2300      	movs	r3, #0
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6852      	ldr	r2, [r2, #4]
 8002766:	201f      	movs	r0, #31
 8002768:	4002      	ands	r2, r0
 800276a:	4093      	lsls	r3, r2
 800276c:	000a      	movs	r2, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	429a      	cmp	r2, r3
 8002782:	d808      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	001a      	movs	r2, r3
 8002792:	f7ff fcae 	bl	80020f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	001a      	movs	r2, r3
 80027a4:	f7ff fce8 	bl	8002178 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db00      	blt.n	80027b2 <HAL_ADC_ConfigChannel+0x21e>
 80027b0:	e0bc      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b2:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fc5b 	bl	8002070 <LL_ADC_GetCommonPathInternalCh>
 80027ba:	0003      	movs	r3, r0
 80027bc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_ADC_ConfigChannel+0x364>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d122      	bne.n	800280e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027d0:	d11d      	bne.n	800280e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	4313      	orrs	r3, r2
 80027da:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 80027dc:	0019      	movs	r1, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	f7ff fc32 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <HAL_ADC_ConfigChannel+0x368>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4945      	ldr	r1, [pc, #276]	; (8002900 <HAL_ADC_ConfigChannel+0x36c>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fd fc9a 	bl	8000124 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	0013      	movs	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	189b      	adds	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027fe:	e002      	b.n	8002806 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3b01      	subs	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f9      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800280c:	e08e      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <HAL_ADC_ConfigChannel+0x370>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d10e      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	045b      	lsls	r3, r3, #17
 800281e:	4013      	ands	r3, r2
 8002820:	d109      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0452      	lsls	r2, r2, #17
 8002828:	4313      	orrs	r3, r2
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 800282c:	0019      	movs	r1, r3
 800282e:	0010      	movs	r0, r2
 8002830:	f7ff fc0a 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
 8002834:	e07a      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_ADC_ConfigChannel+0x374>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d000      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x2ae>
 8002840:	e074      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	03db      	lsls	r3, r3, #15
 8002848:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800284a:	d000      	beq.n	800284e <HAL_ADC_ConfigChannel+0x2ba>
 800284c:	e06e      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	03d2      	lsls	r2, r2, #15
 8002854:	4313      	orrs	r3, r2
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 8002858:	0019      	movs	r1, r3
 800285a:	0010      	movs	r0, r2
 800285c:	f7ff fbf4 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
 8002860:	e064      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	429a      	cmp	r2, r3
 800286c:	d004      	beq.n	8002878 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002872:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_ADC_ConfigChannel+0x35c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d107      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0019      	movs	r1, r3
 8002882:	0010      	movs	r0, r2
 8002884:	f7ff fc66 	bl	8002154 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da4d      	bge.n	800292c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 8002892:	0018      	movs	r0, r3
 8002894:	f7ff fbec 	bl	8002070 <LL_ADC_GetCommonPathInternalCh>
 8002898:	0003      	movs	r3, r0
 800289a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <HAL_ADC_ConfigChannel+0x364>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_ADC_ConfigChannel+0x378>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f7ff fbc9 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
 80028b6:	e039      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_ADC_ConfigChannel+0x370>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_ADC_ConfigChannel+0x37c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 80028ca:	0019      	movs	r1, r3
 80028cc:	0010      	movs	r0, r2
 80028ce:	f7ff fbbb 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
 80028d2:	e02b      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_ADC_ConfigChannel+0x374>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d126      	bne.n	800292c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_ADC_ConfigChannel+0x380>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <HAL_ADC_ConfigChannel+0x360>)
 80028e6:	0019      	movs	r1, r3
 80028e8:	0010      	movs	r0, r2
 80028ea:	f7ff fbad 	bl	8002048 <LL_ADC_SetCommonPathInternalCh>
 80028ee:	e01d      	b.n	800292c <HAL_ADC_ConfigChannel+0x398>
 80028f0:	80000004 	.word	0x80000004
 80028f4:	40012708 	.word	0x40012708
 80028f8:	b0001000 	.word	0xb0001000
 80028fc:	20000000 	.word	0x20000000
 8002900:	00030d40 	.word	0x00030d40
 8002904:	b8004000 	.word	0xb8004000
 8002908:	b4002000 	.word	0xb4002000
 800290c:	ff7fffff 	.word	0xff7fffff
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	2220      	movs	r2, #32
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2254      	movs	r2, #84	; 0x54
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002934:	2317      	movs	r3, #23
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b006      	add	sp, #24
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	0002      	movs	r2, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b7f      	cmp	r3, #127	; 0x7f
 8002958:	d828      	bhi.n	80029ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800295a:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <__NVIC_SetPriority+0xd4>)
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	33c0      	adds	r3, #192	; 0xc0
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	589b      	ldr	r3, [r3, r2]
 800296a:	1dfa      	adds	r2, r7, #7
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	0011      	movs	r1, r2
 8002970:	2203      	movs	r2, #3
 8002972:	400a      	ands	r2, r1
 8002974:	00d2      	lsls	r2, r2, #3
 8002976:	21ff      	movs	r1, #255	; 0xff
 8002978:	4091      	lsls	r1, r2
 800297a:	000a      	movs	r2, r1
 800297c:	43d2      	mvns	r2, r2
 800297e:	401a      	ands	r2, r3
 8002980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	401a      	ands	r2, r3
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	0018      	movs	r0, r3
 8002990:	2303      	movs	r3, #3
 8002992:	4003      	ands	r3, r0
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002998:	481f      	ldr	r0, [pc, #124]	; (8002a18 <__NVIC_SetPriority+0xd4>)
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	430a      	orrs	r2, r1
 80029a4:	33c0      	adds	r3, #192	; 0xc0
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029aa:	e031      	b.n	8002a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <__NVIC_SetPriority+0xd8>)
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	0019      	movs	r1, r3
 80029b4:	230f      	movs	r3, #15
 80029b6:	400b      	ands	r3, r1
 80029b8:	3b08      	subs	r3, #8
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3306      	adds	r3, #6
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1dfa      	adds	r2, r7, #7
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	0011      	movs	r1, r2
 80029cc:	2203      	movs	r2, #3
 80029ce:	400a      	ands	r2, r1
 80029d0:	00d2      	lsls	r2, r2, #3
 80029d2:	21ff      	movs	r1, #255	; 0xff
 80029d4:	4091      	lsls	r1, r2
 80029d6:	000a      	movs	r2, r1
 80029d8:	43d2      	mvns	r2, r2
 80029da:	401a      	ands	r2, r3
 80029dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	22ff      	movs	r2, #255	; 0xff
 80029e4:	401a      	ands	r2, r3
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	0018      	movs	r0, r3
 80029ec:	2303      	movs	r3, #3
 80029ee:	4003      	ands	r3, r0
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f4:	4809      	ldr	r0, [pc, #36]	; (8002a1c <__NVIC_SetPriority+0xd8>)
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	001c      	movs	r4, r3
 80029fc:	230f      	movs	r3, #15
 80029fe:	4023      	ands	r3, r4
 8002a00:	3b08      	subs	r3, #8
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	430a      	orrs	r2, r1
 8002a06:	3306      	adds	r3, #6
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18c3      	adds	r3, r0, r3
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b003      	add	sp, #12
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1e5a      	subs	r2, r3, #1
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	045b      	lsls	r3, r3, #17
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d301      	bcc.n	8002a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a34:	2301      	movs	r3, #1
 8002a36:	e010      	b.n	8002a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <SysTick_Config+0x44>)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a40:	2301      	movs	r3, #1
 8002a42:	425b      	negs	r3, r3
 8002a44:	2103      	movs	r1, #3
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ff7c 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x44>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x44>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	210f      	movs	r1, #15
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	1c02      	adds	r2, r0, #0
 8002a78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff ffbf 	bl	8002a20 <SysTick_Config>
 8002aa2:	0003      	movs	r3, r0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e056      	b.n	8002b6c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7f5b      	ldrb	r3, [r3, #29]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff f8a1 	bl	8001c18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	791b      	ldrb	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10c      	bne.n	8002afe <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <HAL_CRC_Init+0xc8>)
 8002aea:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2118      	movs	r1, #24
 8002af8:	438a      	bics	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	e00b      	b.n	8002b16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 f835 	bl	8002b78 <HAL_CRCEx_Polynomial_Set>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02a      	b.n	8002b6c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	795b      	ldrb	r3, [r3, #5]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4252      	negs	r2, r2
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	e004      	b.n	8002b34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6912      	ldr	r2, [r2, #16]
 8002b32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2260      	movs	r2, #96	; 0x60
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	04c11db7 	.word	0x04c11db7

08002b78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2317      	movs	r3, #23
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	613a      	str	r2, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_CRCEx_Polynomial_Set+0x36>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	40da      	lsrs	r2, r3
 8002ba6:	0013      	movs	r3, r2
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d0f1      	beq.n	8002b92 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b18      	cmp	r3, #24
 8002bb2:	d00f      	beq.n	8002bd4 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b18      	cmp	r3, #24
 8002bb8:	d824      	bhi.n	8002c04 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d011      	beq.n	8002be4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d81e      	bhi.n	8002c04 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_CRCEx_Polynomial_Set+0x96>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d010      	beq.n	8002bf4 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002bd2:	e017      	b.n	8002c04 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d91b      	bls.n	8002c12 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002bda:	2317      	movs	r3, #23
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002be2:	e016      	b.n	8002c12 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	d915      	bls.n	8002c16 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002bea:	2317      	movs	r3, #23
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002bf2:	e010      	b.n	8002c16 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d90f      	bls.n	8002c1a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8002bfa:	2317      	movs	r3, #23
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002c02:	e00a      	b.n	8002c1a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
      break;
 8002c0c:	e006      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	e004      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	e002      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	e000      	b.n	8002c1c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002c1a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10e      	bne.n	8002c44 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2218      	movs	r2, #24
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c44:	2317      	movs	r3, #23
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	781b      	ldrb	r3, [r3, #0]
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e147      	b.n	8002ef4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4091      	lsls	r1, r2
 8002c6e:	000a      	movs	r2, r1
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d100      	bne.n	8002c7c <HAL_GPIO_Init+0x28>
 8002c7a:	e138      	b.n	8002eee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <HAL_GPIO_Init+0x40>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	0013      	movs	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	43da      	mvns	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2203      	movs	r2, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	58d3      	ldr	r3, [r2, r3]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4013      	ands	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	409a      	lsls	r2, r3
 8002d58:	0013      	movs	r3, r2
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2107      	movs	r1, #7
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	6939      	ldr	r1, [r7, #16]
 8002d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	409a      	lsls	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	401a      	ands	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	0013      	movs	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	23c0      	movs	r3, #192	; 0xc0
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_GPIO_Init+0x174>
 8002dc6:	e092      	b.n	8002eee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002dc8:	4a50      	ldr	r2, [pc, #320]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3318      	adds	r3, #24
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	589b      	ldr	r3, [r3, r2]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	220f      	movs	r2, #15
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	43da      	mvns	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	23a0      	movs	r3, #160	; 0xa0
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x1ca>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	; (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x1c6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a44      	ldr	r2, [pc, #272]	; (8002f14 <HAL_GPIO_Init+0x2c0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x1c2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a43      	ldr	r2, [pc, #268]	; (8002f18 <HAL_GPIO_Init+0x2c4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x1be>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	2103      	movs	r1, #3
 8002e24:	400a      	ands	r2, r1
 8002e26:	00d2      	lsls	r2, r2, #3
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e30:	4936      	ldr	r1, [pc, #216]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3318      	adds	r3, #24
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	035b      	lsls	r3, r3, #13
 8002e56:	4013      	ands	r3, r2
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	039b      	lsls	r3, r3, #14
 8002e80:	4013      	ands	r3, r2
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e94:	2384      	movs	r3, #132	; 0x84
 8002e96:	58d3      	ldr	r3, [r2, r3]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb8:	4914      	ldr	r1, [pc, #80]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002eba:	2284      	movs	r2, #132	; 0x84
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	58d3      	ldr	r3, [r2, r3]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	025b      	lsls	r3, r3, #9
 8002eda:	4013      	ands	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee6:	4909      	ldr	r1, [pc, #36]	; (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	1e13      	subs	r3, r2, #0
 8002efe:	d000      	beq.n	8002f02 <HAL_GPIO_Init+0x2ae>
 8002f00:	e6b0      	b.n	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	50000400 	.word	0x50000400
 8002f14:	50000800 	.word	0x50000800
 8002f18:	50000c00 	.word	0x50000c00

08002f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	000a      	movs	r2, r1
 8002f26:	1cbb      	adds	r3, r7, #2
 8002f28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	1cba      	adds	r2, r7, #2
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	4013      	ands	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002f36:	230f      	movs	r3, #15
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e003      	b.n	8002f48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f40:	230f      	movs	r3, #15
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002f48:	230f      	movs	r3, #15
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	0008      	movs	r0, r1
 8002f60:	0011      	movs	r1, r2
 8002f62:	1cbb      	adds	r3, r7, #2
 8002f64:	1c02      	adds	r2, r0, #0
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	1c7b      	adds	r3, r7, #1
 8002f6a:	1c0a      	adds	r2, r1, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f6e:	1c7b      	adds	r3, r7, #1
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f76:	1cbb      	adds	r3, r7, #2
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f7e:	e003      	b.n	8002f88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f80:	1cbb      	adds	r3, r7, #2
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d11f      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	0013      	movs	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4912      	ldr	r1, [pc, #72]	; (800300c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fd f8ae 	bl	8000124 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fce:	e008      	b.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e001      	b.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e009      	b.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	401a      	ands	r2, r3
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d0ed      	beq.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	40007000 	.word	0x40007000
 8003004:	fffff9ff 	.word	0xfffff9ff
 8003008:	20000000 	.word	0x20000000
 800300c:	000f4240 	.word	0x000f4240

08003010 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	23e0      	movs	r3, #224	; 0xe0
 800301a:	01db      	lsls	r3, r3, #7
 800301c:	4013      	ands	r3, r2
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e2f3      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
 8003042:	d100      	bne.n	8003046 <HAL_RCC_OscConfig+0x1e>
 8003044:	e07c      	b.n	8003140 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4bc3      	ldr	r3, [pc, #780]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2238      	movs	r2, #56	; 0x38
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003050:	4bc0      	ldr	r3, [pc, #768]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2203      	movs	r2, #3
 8003056:	4013      	ands	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0x3e>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d002      	beq.n	800306c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b08      	cmp	r3, #8
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4bb9      	ldr	r3, [pc, #740]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	029b      	lsls	r3, r3, #10
 8003074:	4013      	ands	r3, r2
 8003076:	d062      	beq.n	800313e <HAL_RCC_OscConfig+0x116>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d15e      	bne.n	800313e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e2ce      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	025b      	lsls	r3, r3, #9
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x78>
 8003090:	4bb0      	ldr	r3, [pc, #704]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4baf      	ldr	r3, [pc, #700]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0249      	lsls	r1, r1, #9
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e020      	b.n	80030e2 <HAL_RCC_OscConfig+0xba>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	23a0      	movs	r3, #160	; 0xa0
 80030a6:	02db      	lsls	r3, r3, #11
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10e      	bne.n	80030ca <HAL_RCC_OscConfig+0xa2>
 80030ac:	4ba9      	ldr	r3, [pc, #676]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4ba8      	ldr	r3, [pc, #672]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	02c9      	lsls	r1, r1, #11
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	4ba6      	ldr	r3, [pc, #664]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4ba5      	ldr	r3, [pc, #660]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0249      	lsls	r1, r1, #9
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0xba>
 80030ca:	4ba2      	ldr	r3, [pc, #648]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4ba1      	ldr	r3, [pc, #644]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030d0:	49a1      	ldr	r1, [pc, #644]	; (8003358 <HAL_RCC_OscConfig+0x330>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4b9f      	ldr	r3, [pc, #636]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b9e      	ldr	r3, [pc, #632]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030dc:	499f      	ldr	r1, [pc, #636]	; (800335c <HAL_RCC_OscConfig+0x334>)
 80030de:	400a      	ands	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d014      	beq.n	8003114 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe ff7f 	bl	8001fec <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe ff7a 	bl	8001fec <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e28d      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003106:	4b93      	ldr	r3, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	029b      	lsls	r3, r3, #10
 800310e:	4013      	ands	r3, r2
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xcc>
 8003112:	e015      	b.n	8003140 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe ff6a 	bl	8001fec <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311e:	f7fe ff65 	bl	8001fec <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e278      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003130:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	4013      	ands	r3, r2
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0xf6>
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d100      	bne.n	800314c <HAL_RCC_OscConfig+0x124>
 800314a:	e099      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2238      	movs	r2, #56	; 0x38
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2203      	movs	r2, #3
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b10      	cmp	r3, #16
 8003164:	d102      	bne.n	800316c <HAL_RCC_OscConfig+0x144>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d002      	beq.n	8003172 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d135      	bne.n	80031de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003172:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4013      	ands	r3, r2
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x162>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e24b      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a74      	ldr	r2, [pc, #464]	; (8003360 <HAL_RCC_OscConfig+0x338>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	021a      	lsls	r2, r3, #8
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031a6:	4b6b      	ldr	r3, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6e      	ldr	r2, [pc, #440]	; (8003364 <HAL_RCC_OscConfig+0x33c>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80031ba:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0adb      	lsrs	r3, r3, #11
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x340>)
 80031c6:	40da      	lsrs	r2, r3
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x344>)
 80031ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031cc:	4b68      	ldr	r3, [pc, #416]	; (8003370 <HAL_RCC_OscConfig+0x348>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fe feaf 	bl	8001f34 <HAL_InitTick>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d051      	beq.n	800327e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e221      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d030      	beq.n	8003248 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5e      	ldr	r2, [pc, #376]	; (8003364 <HAL_RCC_OscConfig+0x33c>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b55      	ldr	r3, [pc, #340]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0049      	lsls	r1, r1, #1
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fef0 	bl	8001fec <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe feeb 	bl	8001fec <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1fe      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4013      	ands	r3, r2
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <HAL_RCC_OscConfig+0x338>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800324e:	4949      	ldr	r1, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x34c>)
 8003250:	400a      	ands	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe feca 	bl	8001fec <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325e:	f7fe fec5 	bl	8001fec <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1d8      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003270:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4013      	ands	r3, r2
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x236>
 800327c:	e000      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	4013      	ands	r3, r2
 8003288:	d047      	beq.n	800331a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2238      	movs	r2, #56	; 0x38
 8003290:	4013      	ands	r3, r2
 8003292:	2b18      	cmp	r3, #24
 8003294:	d10a      	bne.n	80032ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d03c      	beq.n	800331a <HAL_RCC_OscConfig+0x2f2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d138      	bne.n	800331a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e1ba      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d019      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	430a      	orrs	r2, r1
 80032be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fe94 	bl	8001fec <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe fe8f 	bl	8001fec <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1a2      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d0f1      	beq.n	80032ca <HAL_RCC_OscConfig+0x2a2>
 80032e6:	e018      	b.n	800331a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80032ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	438a      	bics	r2, r1
 80032f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fe7a 	bl	8001fec <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fe fe75 	bl	8001fec <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e188      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	2202      	movs	r2, #2
 8003316:	4013      	ands	r3, r2
 8003318:	d1f1      	bne.n	80032fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d100      	bne.n	8003326 <HAL_RCC_OscConfig+0x2fe>
 8003324:	e0c6      	b.n	80034b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	231f      	movs	r3, #31
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2238      	movs	r2, #56	; 0x38
 8003334:	4013      	ands	r3, r2
 8003336:	2b20      	cmp	r3, #32
 8003338:	d11e      	bne.n	8003378 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_OscConfig+0x32c>)
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2202      	movs	r2, #2
 8003340:	4013      	ands	r3, r2
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x31e>
 8003344:	e0b6      	b.n	80034b4 <HAL_RCC_OscConfig+0x48c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d000      	beq.n	8003350 <HAL_RCC_OscConfig+0x328>
 800334e:	e0b1      	b.n	80034b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e166      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
 8003354:	40021000 	.word	0x40021000
 8003358:	fffeffff 	.word	0xfffeffff
 800335c:	fffbffff 	.word	0xfffbffff
 8003360:	ffff80ff 	.word	0xffff80ff
 8003364:	ffffc7ff 	.word	0xffffc7ff
 8003368:	00f42400 	.word	0x00f42400
 800336c:	20000000 	.word	0x20000000
 8003370:	20000004 	.word	0x20000004
 8003374:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003378:	4bac      	ldr	r3, [pc, #688]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800337a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	055b      	lsls	r3, r3, #21
 8003380:	4013      	ands	r3, r2
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x360>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x362>
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	4ba7      	ldr	r3, [pc, #668]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003392:	4ba6      	ldr	r3, [pc, #664]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	0549      	lsls	r1, r1, #21
 8003398:	430a      	orrs	r2, r1
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
 800339c:	4ba3      	ldr	r3, [pc, #652]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800339e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	055b      	lsls	r3, r3, #21
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80033aa:	231f      	movs	r3, #31
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b2:	4b9f      	ldr	r3, [pc, #636]	; (8003630 <HAL_RCC_OscConfig+0x608>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d11a      	bne.n	80033f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033be:	4b9c      	ldr	r3, [pc, #624]	; (8003630 <HAL_RCC_OscConfig+0x608>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b9b      	ldr	r3, [pc, #620]	; (8003630 <HAL_RCC_OscConfig+0x608>)
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	0049      	lsls	r1, r1, #1
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fe0e 	bl	8001fec <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe fe09 	bl	8001fec <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e11c      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	4b91      	ldr	r3, [pc, #580]	; (8003630 <HAL_RCC_OscConfig+0x608>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x3e2>
 80033fc:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80033fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003400:	4b8a      	ldr	r3, [pc, #552]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003402:	2101      	movs	r1, #1
 8003404:	430a      	orrs	r2, r1
 8003406:	65da      	str	r2, [r3, #92]	; 0x5c
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x41c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x404>
 8003412:	4b86      	ldr	r3, [pc, #536]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003418:	2104      	movs	r1, #4
 800341a:	430a      	orrs	r2, r1
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c
 800341e:	4b83      	ldr	r3, [pc, #524]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003424:	2101      	movs	r1, #1
 8003426:	430a      	orrs	r2, r1
 8003428:	65da      	str	r2, [r3, #92]	; 0x5c
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0x41c>
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800342e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003432:	2101      	movs	r1, #1
 8003434:	438a      	bics	r2, r1
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c
 8003438:	4b7c      	ldr	r3, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800343a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800343c:	4b7b      	ldr	r3, [pc, #492]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800343e:	2104      	movs	r1, #4
 8003440:	438a      	bics	r2, r1
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d014      	beq.n	8003476 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe fdce 	bl	8001fec <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	e009      	b.n	800346a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fdc9 	bl	8001fec <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	4a74      	ldr	r2, [pc, #464]	; (8003634 <HAL_RCC_OscConfig+0x60c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0db      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4b70      	ldr	r3, [pc, #448]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x42e>
 8003474:	e013      	b.n	800349e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fdb9 	bl	8001fec <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800347e:	e009      	b.n	8003494 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fdb4 	bl	8001fec <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	4a6a      	ldr	r2, [pc, #424]	; (8003634 <HAL_RCC_OscConfig+0x60c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0c6      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003494:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2202      	movs	r2, #2
 800349a:	4013      	ands	r3, r2
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800349e:	231f      	movs	r3, #31
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b60      	ldr	r3, [pc, #384]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ac:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034ae:	4962      	ldr	r1, [pc, #392]	; (8003638 <HAL_RCC_OscConfig+0x610>)
 80034b0:	400a      	ands	r2, r1
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d100      	bne.n	80034be <HAL_RCC_OscConfig+0x496>
 80034bc:	e0b0      	b.n	8003620 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2238      	movs	r2, #56	; 0x38
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d100      	bne.n	80034cc <HAL_RCC_OscConfig+0x4a4>
 80034ca:	e078      	b.n	80035be <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d153      	bne.n	800357c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b54      	ldr	r3, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034da:	4958      	ldr	r1, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x614>)
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fd84 	bl	8001fec <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe fd7f 	bl	8001fec <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e092      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	049b      	lsls	r3, r3, #18
 8003504:	4013      	ands	r3, r2
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_RCC_OscConfig+0x618>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	431a      	orrs	r2, r3
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003532:	430a      	orrs	r2, r1
 8003534:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003536:	4b3d      	ldr	r3, [pc, #244]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0449      	lsls	r1, r1, #17
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	0549      	lsls	r1, r1, #21
 800354e:	430a      	orrs	r2, r1
 8003550:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fe fd4b 	bl	8001fec <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe fd46 	bl	8001fec <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e059      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	4b2f      	ldr	r3, [pc, #188]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	049b      	lsls	r3, r3, #18
 8003576:	4013      	ands	r3, r2
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x534>
 800357a:	e051      	b.n	8003620 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_OscConfig+0x604>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCC_OscConfig+0x604>)
 8003582:	492e      	ldr	r1, [pc, #184]	; (800363c <HAL_RCC_OscConfig+0x614>)
 8003584:	400a      	ands	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fd30 	bl	8001fec <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe fd2b 	bl	8001fec <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e03e      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	049b      	lsls	r3, r3, #18
 80035ac:	4013      	ands	r3, r2
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80035b6:	4923      	ldr	r1, [pc, #140]	; (8003644 <HAL_RCC_OscConfig+0x61c>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e030      	b.n	8003620 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e02b      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x604>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2203      	movs	r2, #3
 80035d4:	401a      	ands	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11e      	bne.n	800361c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2270      	movs	r2, #112	; 0x70
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d117      	bne.n	800361c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	23fe      	movs	r3, #254	; 0xfe
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	401a      	ands	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10e      	bne.n	800361c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	23f8      	movs	r3, #248	; 0xf8
 8003602:	039b      	lsls	r3, r3, #14
 8003604:	401a      	ands	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	0f5b      	lsrs	r3, r3, #29
 8003612:	075a      	lsls	r2, r3, #29
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b008      	add	sp, #32
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	00001388 	.word	0x00001388
 8003638:	efffffff 	.word	0xefffffff
 800363c:	feffffff 	.word	0xfeffffff
 8003640:	1fc1808c 	.word	0x1fc1808c
 8003644:	effefffc 	.word	0xeffefffc

08003648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0e9      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2207      	movs	r2, #7
 8003662:	4013      	ands	r3, r2
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d91e      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b73      	ldr	r3, [pc, #460]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2207      	movs	r2, #7
 8003670:	4393      	bics	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800367c:	f7fe fcb6 	bl	8001fec <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003684:	e009      	b.n	800369a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003686:	f7fe fcb1 	bl	8001fec <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	4a6a      	ldr	r2, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0ca      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2207      	movs	r2, #7
 80036a0:	4013      	ands	r3, r2
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2202      	movs	r2, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	d015      	beq.n	80036de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2204      	movs	r2, #4
 80036b8:	4013      	ands	r3, r2
 80036ba:	d006      	beq.n	80036ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036bc:	4b60      	ldr	r3, [pc, #384]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80036c2:	21e0      	movs	r1, #224	; 0xe0
 80036c4:	01c9      	lsls	r1, r1, #7
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <HAL_RCC_ClockConfig+0x1fc>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	4013      	ands	r3, r2
 80036e6:	d057      	beq.n	8003798 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	4013      	ands	r3, r2
 80036fa:	d12b      	bne.n	8003754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e097      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d107      	bne.n	8003718 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	049b      	lsls	r3, r3, #18
 8003710:	4013      	ands	r3, r2
 8003712:	d11f      	bne.n	8003754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e08b      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003720:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4013      	ands	r3, r2
 800372a:	d113      	bne.n	8003754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e07f      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d106      	bne.n	8003746 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e074      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2202      	movs	r2, #2
 800374c:	4013      	ands	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e06d      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003754:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2207      	movs	r2, #7
 800375a:	4393      	bics	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fe fc40 	bl	8001fec <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003770:	e009      	b.n	8003786 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003772:	f7fe fc3b 	bl	8001fec <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <HAL_RCC_ClockConfig+0x1f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e054      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2238      	movs	r2, #56	; 0x38
 800378c:	401a      	ands	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ec      	bne.n	8003772 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2207      	movs	r2, #7
 800379e:	4013      	ands	r3, r2
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d21e      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2207      	movs	r2, #7
 80037ac:	4393      	bics	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037b8:	f7fe fc18 	bl	8001fec <HAL_GetTick>
 80037bc:	0003      	movs	r3, r0
 80037be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037c0:	e009      	b.n	80037d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c2:	f7fe fc13 	bl	8001fec <HAL_GetTick>
 80037c6:	0002      	movs	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_RCC_ClockConfig+0x1f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e02c      	b.n	8003830 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037d6:	4b18      	ldr	r3, [pc, #96]	; (8003838 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2207      	movs	r2, #7
 80037dc:	4013      	ands	r3, r2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1ee      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2204      	movs	r2, #4
 80037ea:	4013      	ands	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_RCC_ClockConfig+0x200>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003802:	f000 f829 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003806:	0001      	movs	r1, r0
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_ClockConfig+0x1f8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	220f      	movs	r2, #15
 8003810:	401a      	ands	r2, r3
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x204>)
 8003814:	0092      	lsls	r2, r2, #2
 8003816:	58d3      	ldr	r3, [r2, r3]
 8003818:	221f      	movs	r2, #31
 800381a:	4013      	ands	r3, r2
 800381c:	000a      	movs	r2, r1
 800381e:	40da      	lsrs	r2, r3
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x208>)
 8003822:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x20c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0018      	movs	r0, r3
 800382a:	f7fe fb83 	bl	8001f34 <HAL_InitTick>
 800382e:	0003      	movs	r3, r0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40022000 	.word	0x40022000
 800383c:	00001388 	.word	0x00001388
 8003840:	40021000 	.word	0x40021000
 8003844:	fffff0ff 	.word	0xfffff0ff
 8003848:	ffff8fff 	.word	0xffff8fff
 800384c:	08005ef0 	.word	0x08005ef0
 8003850:	20000000 	.word	0x20000000
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2238      	movs	r2, #56	; 0x38
 8003864:	4013      	ands	r3, r2
 8003866:	d10f      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0adb      	lsrs	r3, r3, #11
 800386e:	2207      	movs	r2, #7
 8003870:	4013      	ands	r3, r2
 8003872:	2201      	movs	r2, #1
 8003874:	409a      	lsls	r2, r3
 8003876:	0013      	movs	r3, r2
 8003878:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	4835      	ldr	r0, [pc, #212]	; (8003954 <HAL_RCC_GetSysClockFreq+0xfc>)
 800387e:	f7fc fc51 	bl	8000124 <__udivsi3>
 8003882:	0003      	movs	r3, r0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	e05d      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2238      	movs	r2, #56	; 0x38
 800388e:	4013      	ands	r3, r2
 8003890:	2b08      	cmp	r3, #8
 8003892:	d102      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_RCC_GetSysClockFreq+0x100>)
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e054      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2238      	movs	r2, #56	; 0x38
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d138      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2203      	movs	r2, #3
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	2207      	movs	r2, #7
 80038b8:	4013      	ands	r3, r2
 80038ba:	3301      	adds	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4824      	ldr	r0, [pc, #144]	; (8003958 <HAL_RCC_GetSysClockFreq+0x100>)
 80038c8:	f7fc fc2c 	bl	8000124 <__udivsi3>
 80038cc:	0003      	movs	r3, r0
 80038ce:	0019      	movs	r1, r3
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	227f      	movs	r2, #127	; 0x7f
 80038d8:	4013      	ands	r3, r2
 80038da:	434b      	muls	r3, r1
 80038dc:	617b      	str	r3, [r7, #20]
        break;
 80038de:	e00d      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	481c      	ldr	r0, [pc, #112]	; (8003954 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038e4:	f7fc fc1e 	bl	8000124 <__udivsi3>
 80038e8:	0003      	movs	r3, r0
 80038ea:	0019      	movs	r1, r3
 80038ec:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	227f      	movs	r2, #127	; 0x7f
 80038f4:	4013      	ands	r3, r2
 80038f6:	434b      	muls	r3, r1
 80038f8:	617b      	str	r3, [r7, #20]
        break;
 80038fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0f5b      	lsrs	r3, r3, #29
 8003902:	2207      	movs	r2, #7
 8003904:	4013      	ands	r3, r2
 8003906:	3301      	adds	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f7fc fc09 	bl	8000124 <__udivsi3>
 8003912:	0003      	movs	r3, r0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e015      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2238      	movs	r2, #56	; 0x38
 800391e:	4013      	ands	r3, r2
 8003920:	2b20      	cmp	r3, #32
 8003922:	d103      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_GetSysClockFreq+0xf8>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2238      	movs	r2, #56	; 0x38
 8003932:	4013      	ands	r3, r2
 8003934:	2b18      	cmp	r3, #24
 8003936:	d103      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003938:	23fa      	movs	r3, #250	; 0xfa
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e001      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003944:	693b      	ldr	r3, [r7, #16]
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b006      	add	sp, #24
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	40021000 	.word	0x40021000
 8003954:	00f42400 	.word	0x00f42400
 8003958:	007a1200 	.word	0x007a1200

0800395c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <HAL_RCC_GetHCLKFreq+0x10>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003974:	f7ff fff2 	bl	800395c <HAL_RCC_GetHCLKFreq>
 8003978:	0004      	movs	r4, r0
 800397a:	f7ff fb49 	bl	8003010 <LL_RCC_GetAPB1Prescaler>
 800397e:	0003      	movs	r3, r0
 8003980:	0b1a      	lsrs	r2, r3, #12
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003984:	0092      	lsls	r2, r2, #2
 8003986:	58d3      	ldr	r3, [r2, r3]
 8003988:	221f      	movs	r2, #31
 800398a:	4013      	ands	r3, r2
 800398c:	40dc      	lsrs	r4, r3
 800398e:	0023      	movs	r3, r4
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	08005f30 	.word	0x08005f30

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039a4:	2313      	movs	r3, #19
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ac:	2312      	movs	r3, #18
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	4013      	ands	r3, r2
 80039be:	d100      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039c0:	e0a3      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c2:	2011      	movs	r0, #17
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	055b      	lsls	r3, r3, #21
 80039d2:	4013      	ands	r3, r2
 80039d4:	d110      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039da:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	0549      	lsls	r1, r1, #21
 80039e0:	430a      	orrs	r2, r1
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039e4:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	055b      	lsls	r3, r3, #21
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f8:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039fe:	2180      	movs	r1, #128	; 0x80
 8003a00:	0049      	lsls	r1, r1, #1
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a06:	f7fe faf1 	bl	8001fec <HAL_GetTick>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fe faec 	bl	8001fec <HAL_GetTick>
 8003a14:	0002      	movs	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d904      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a1e:	2313      	movs	r3, #19
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2203      	movs	r2, #3
 8003a24:	701a      	strb	r2, [r3, #0]
        break;
 8003a26:	e005      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	d0ed      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a34:	2313      	movs	r3, #19
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d154      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a3e:	4b62      	ldr	r3, [pc, #392]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a42:	23c0      	movs	r3, #192	; 0xc0
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d019      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d014      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a64:	4b58      	ldr	r3, [pc, #352]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a68:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	0249      	lsls	r1, r1, #9
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a76:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a78:	4956      	ldr	r1, [pc, #344]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a7e:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d016      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe faae 	bl	8001fec <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	e00c      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe faa9 	bl	8001fec <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	4a4d      	ldr	r2, [pc, #308]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d904      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003aa6:	2313      	movs	r3, #19
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	2203      	movs	r2, #3
 8003aac:	701a      	strb	r2, [r3, #0]
            break;
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab0:	4b45      	ldr	r3, [pc, #276]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d0ed      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003aba:	2313      	movs	r3, #19
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	4a41      	ldr	r2, [pc, #260]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ad8:	e00c      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ada:	2312      	movs	r3, #18
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	2213      	movs	r2, #19
 8003ae0:	18ba      	adds	r2, r7, r2
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	2312      	movs	r3, #18
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2213      	movs	r2, #19
 8003aee:	18ba      	adds	r2, r7, r2
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af4:	2311      	movs	r3, #17
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b02:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b04:	4935      	ldr	r1, [pc, #212]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b32:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	01db      	lsls	r3, r3, #7
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d015      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	0899      	lsrs	r1, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0249      	lsls	r1, r1, #9
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4013      	ands	r3, r2
 8003b88:	d016      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	01db      	lsls	r3, r3, #7
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	0249      	lsls	r1, r1, #9
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003bb8:	2312      	movs	r3, #18
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	fffffcff 	.word	0xfffffcff
 8003bd4:	fffeffff 	.word	0xfffeffff
 8003bd8:	00001388 	.word	0x00001388
 8003bdc:	efffffff 	.word	0xefffffff
 8003be0:	ffffcfff 	.word	0xffffcfff
 8003be4:	ffff3fff 	.word	0xffff3fff

08003be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0a8      	b.n	8003d4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	2382      	movs	r3, #130	; 0x82
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d009      	beq.n	8003c22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
 8003c14:	e005      	b.n	8003c22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	225d      	movs	r2, #93	; 0x5d
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	225c      	movs	r2, #92	; 0x5c
 8003c38:	2100      	movs	r1, #0
 8003c3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7fe f80a 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	225d      	movs	r2, #93	; 0x5d
 8003c48:	2102      	movs	r1, #2
 8003c4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	23e0      	movs	r3, #224	; 0xe0
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d902      	bls.n	8003c6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e002      	b.n	8003c74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	23f0      	movs	r3, #240	; 0xf0
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d008      	beq.n	8003c92 <HAL_SPI_Init+0xaa>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	23e0      	movs	r3, #224	; 0xe0
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	2382      	movs	r3, #130	; 0x82
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	2384      	movs	r3, #132	; 0x84
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2102      	movs	r1, #2
 8003cae:	400b      	ands	r3, r1
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	400b      	ands	r3, r1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6999      	ldr	r1, [r3, #24]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2138      	movs	r1, #56	; 0x38
 8003cce:	400b      	ands	r3, r1
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	400b      	ands	r3, r1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	0011      	movs	r1, r2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2110      	movs	r1, #16
 8003d00:	400b      	ands	r3, r1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	2108      	movs	r1, #8
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68d9      	ldr	r1, [r3, #12]
 8003d12:	23f0      	movs	r3, #240	; 0xf0
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	400b      	ands	r3, r1
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	015b      	lsls	r3, r3, #5
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4907      	ldr	r1, [pc, #28]	; (8003d54 <HAL_SPI_Init+0x16c>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	225d      	movs	r2, #93	; 0x5d
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b004      	add	sp, #16
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	fffff7ff 	.word	0xfffff7ff

08003d58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d68:	231f      	movs	r3, #31
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	225c      	movs	r2, #92	; 0x5c
 8003d74:	5c9b      	ldrb	r3, [r3, r2]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_SPI_Transmit+0x26>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e140      	b.n	8004000 <HAL_SPI_Transmit+0x2a8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	225c      	movs	r2, #92	; 0x5c
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d86:	f7fe f931 	bl	8001fec <HAL_GetTick>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d8e:	2316      	movs	r3, #22
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	1dba      	adds	r2, r7, #6
 8003d94:	8812      	ldrh	r2, [r2, #0]
 8003d96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	225d      	movs	r2, #93	; 0x5d
 8003d9c:	5c9b      	ldrb	r3, [r3, r2]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d004      	beq.n	8003dae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003da4:	231f      	movs	r3, #31
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2202      	movs	r2, #2
 8003daa:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dac:	e11d      	b.n	8003fea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_SPI_Transmit+0x64>
 8003db4:	1dbb      	adds	r3, r7, #6
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003dbc:	231f      	movs	r3, #31
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003dc4:	e111      	b.n	8003fea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	225d      	movs	r2, #93	; 0x5d
 8003dca:	2103      	movs	r1, #3
 8003dcc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1dba      	adds	r2, r7, #6
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1dba      	adds	r2, r7, #6
 8003de6:	8812      	ldrh	r2, [r2, #0]
 8003de8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2244      	movs	r2, #68	; 0x44
 8003df4:	2100      	movs	r1, #0
 8003df6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2246      	movs	r2, #70	; 0x46
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d110      	bne.n	8003e3a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	438a      	bics	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	01c9      	lsls	r1, r1, #7
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2240      	movs	r2, #64	; 0x40
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d007      	beq.n	8003e58 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2140      	movs	r1, #64	; 0x40
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	23e0      	movs	r3, #224	; 0xe0
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d94e      	bls.n	8003f02 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_SPI_Transmit+0x11e>
 8003e6c:	2316      	movs	r3, #22
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d13f      	bne.n	8003ef6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e9a:	e02c      	b.n	8003ef6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d112      	bne.n	8003ed0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ece:	e012      	b.n	8003ef6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed0:	f7fe f88c 	bl	8001fec <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d802      	bhi.n	8003ee6 <HAL_SPI_Transmit+0x18e>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_Transmit+0x194>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003eec:	231f      	movs	r3, #31
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ef4:	e079      	b.n	8003fea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1cd      	bne.n	8003e9c <HAL_SPI_Transmit+0x144>
 8003f00:	e04f      	b.n	8003fa2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_SPI_Transmit+0x1bc>
 8003f0a:	2316      	movs	r3, #22
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d141      	bne.n	8003f98 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003f3a:	e02d      	b.n	8003f98 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d113      	bne.n	8003f72 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	7812      	ldrb	r2, [r2, #0]
 8003f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f70:	e012      	b.n	8003f98 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f72:	f7fe f83b 	bl	8001fec <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d802      	bhi.n	8003f88 <HAL_SPI_Transmit+0x230>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_SPI_Transmit+0x236>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003f8e:	231f      	movs	r3, #31
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2203      	movs	r2, #3
 8003f94:	701a      	strb	r2, [r3, #0]
          goto error;
 8003f96:	e028      	b.n	8003fea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1cc      	bne.n	8003f3c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f000 fcd9 	bl	8004960 <SPI_EndRxTxTransaction>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003fde:	231f      	movs	r3, #31
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e000      	b.n	8003fea <HAL_SPI_Transmit+0x292>
  }

error:
 8003fe8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	225d      	movs	r2, #93	; 0x5d
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	225c      	movs	r2, #92	; 0x5c
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ffa:	231f      	movs	r3, #31
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b008      	add	sp, #32
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	1dbb      	adds	r3, r7, #6
 8004016:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004018:	2317      	movs	r3, #23
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	2382      	movs	r3, #130	; 0x82
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	429a      	cmp	r2, r3
 800402a:	d113      	bne.n	8004054 <HAL_SPI_Receive+0x4c>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10f      	bne.n	8004054 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	225d      	movs	r2, #93	; 0x5d
 8004038:	2104      	movs	r1, #4
 800403a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	881c      	ldrh	r4, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	0023      	movs	r3, r4
 800404c:	f000 f928 	bl	80042a0 <HAL_SPI_TransmitReceive>
 8004050:	0003      	movs	r3, r0
 8004052:	e11c      	b.n	800428e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	225c      	movs	r2, #92	; 0x5c
 8004058:	5c9b      	ldrb	r3, [r3, r2]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_SPI_Receive+0x5a>
 800405e:	2302      	movs	r3, #2
 8004060:	e115      	b.n	800428e <HAL_SPI_Receive+0x286>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	225c      	movs	r2, #92	; 0x5c
 8004066:	2101      	movs	r1, #1
 8004068:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406a:	f7fd ffbf 	bl	8001fec <HAL_GetTick>
 800406e:	0003      	movs	r3, r0
 8004070:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	225d      	movs	r2, #93	; 0x5d
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d004      	beq.n	8004088 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800407e:	2317      	movs	r3, #23
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
    goto error;
 8004086:	e0f7      	b.n	8004278 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_SPI_Receive+0x8e>
 800408e:	1dbb      	adds	r3, r7, #6
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004096:	2317      	movs	r3, #23
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
    goto error;
 800409e:	e0eb      	b.n	8004278 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225d      	movs	r2, #93	; 0x5d
 80040a4:	2104      	movs	r1, #4
 80040a6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1dba      	adds	r2, r7, #6
 80040b8:	2144      	movs	r1, #68	; 0x44
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1dba      	adds	r2, r7, #6
 80040c2:	2146      	movs	r1, #70	; 0x46
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	23e0      	movs	r3, #224	; 0xe0
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d908      	bls.n	8004104 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4966      	ldr	r1, [pc, #408]	; (8004298 <HAL_SPI_Receive+0x290>)
 80040fe:	400a      	ands	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	e008      	b.n	8004116 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	0149      	lsls	r1, r1, #5
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	429a      	cmp	r2, r3
 8004120:	d10f      	bne.n	8004142 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4957      	ldr	r1, [pc, #348]	; (800429c <HAL_SPI_Receive+0x294>)
 800413e:	400a      	ands	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	4013      	ands	r3, r2
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d007      	beq.n	8004160 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2140      	movs	r1, #64	; 0x40
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	23e0      	movs	r3, #224	; 0xe0
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	429a      	cmp	r2, r3
 800416a:	d900      	bls.n	800416e <HAL_SPI_Receive+0x166>
 800416c:	e069      	b.n	8004242 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800416e:	e031      	b.n	80041d4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2201      	movs	r2, #1
 8004178:	4013      	ands	r3, r2
 800417a:	2b01      	cmp	r3, #1
 800417c:	d117      	bne.n	80041ae <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	001a      	movs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2246      	movs	r2, #70	; 0x46
 800419e:	5a9b      	ldrh	r3, [r3, r2]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b299      	uxth	r1, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2246      	movs	r2, #70	; 0x46
 80041aa:	5299      	strh	r1, [r3, r2]
 80041ac:	e012      	b.n	80041d4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ae:	f7fd ff1d 	bl	8001fec <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d802      	bhi.n	80041c4 <HAL_SPI_Receive+0x1bc>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	d102      	bne.n	80041ca <HAL_SPI_Receive+0x1c2>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80041ca:	2317      	movs	r3, #23
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	2203      	movs	r2, #3
 80041d0:	701a      	strb	r2, [r3, #0]
          goto error;
 80041d2:	e051      	b.n	8004278 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2246      	movs	r2, #70	; 0x46
 80041d8:	5a9b      	ldrh	r3, [r3, r2]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1c7      	bne.n	8004170 <HAL_SPI_Receive+0x168>
 80041e0:	e035      	b.n	800424e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2201      	movs	r2, #1
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2246      	movs	r2, #70	; 0x46
 800420c:	5a9b      	ldrh	r3, [r3, r2]
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b299      	uxth	r1, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2246      	movs	r2, #70	; 0x46
 8004218:	5299      	strh	r1, [r3, r2]
 800421a:	e012      	b.n	8004242 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421c:	f7fd fee6 	bl	8001fec <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d802      	bhi.n	8004232 <HAL_SPI_Receive+0x22a>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_SPI_Receive+0x230>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004238:	2317      	movs	r3, #23
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2203      	movs	r2, #3
 800423e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004240:	e01a      	b.n	8004278 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2246      	movs	r2, #70	; 0x46
 8004246:	5a9b      	ldrh	r3, [r3, r2]
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1c9      	bne.n	80041e2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 fb25 	bl	80048a4 <SPI_EndRxTransaction>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800426c:	2317      	movs	r3, #23
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e000      	b.n	8004278 <HAL_SPI_Receive+0x270>
  }

error :
 8004276:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	225d      	movs	r2, #93	; 0x5d
 800427c:	2101      	movs	r1, #1
 800427e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	225c      	movs	r2, #92	; 0x5c
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004288:	2317      	movs	r3, #23
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b007      	add	sp, #28
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	ffffefff 	.word	0xffffefff
 800429c:	ffffbfff 	.word	0xffffbfff

080042a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	001a      	movs	r2, r3
 80042ae:	1cbb      	adds	r3, r7, #2
 80042b0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042b6:	2323      	movs	r3, #35	; 0x23
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	225c      	movs	r2, #92	; 0x5c
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x2c>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e1b5      	b.n	8004638 <HAL_SPI_TransmitReceive+0x398>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	225c      	movs	r2, #92	; 0x5c
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d4:	f7fd fe8a 	bl	8001fec <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042dc:	201b      	movs	r0, #27
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	215d      	movs	r1, #93	; 0x5d
 80042e4:	5c52      	ldrb	r2, [r2, r1]
 80042e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042ee:	2312      	movs	r3, #18
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	1cba      	adds	r2, r7, #2
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d011      	beq.n	8004324 <HAL_SPI_TransmitReceive+0x84>
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	2382      	movs	r3, #130	; 0x82
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	429a      	cmp	r2, r3
 8004308:	d107      	bne.n	800431a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <HAL_SPI_TransmitReceive+0x7a>
 8004312:	183b      	adds	r3, r7, r0
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d004      	beq.n	8004324 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800431a:	2323      	movs	r3, #35	; 0x23
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2202      	movs	r2, #2
 8004320:	701a      	strb	r2, [r3, #0]
    goto error;
 8004322:	e17e      	b.n	8004622 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x98>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x98>
 8004330:	1cbb      	adds	r3, r7, #2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004338:	2323      	movs	r3, #35	; 0x23
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004340:	e16f      	b.n	8004622 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	225d      	movs	r2, #93	; 0x5d
 8004346:	5c9b      	ldrb	r3, [r3, r2]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b04      	cmp	r3, #4
 800434c:	d003      	beq.n	8004356 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	225d      	movs	r2, #93	; 0x5d
 8004352:	2105      	movs	r1, #5
 8004354:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1cba      	adds	r2, r7, #2
 8004366:	2146      	movs	r1, #70	; 0x46
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1cba      	adds	r2, r7, #2
 8004370:	2144      	movs	r1, #68	; 0x44
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1cba      	adds	r2, r7, #2
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1cba      	adds	r2, r7, #2
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	23e0      	movs	r3, #224	; 0xe0
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d908      	bls.n	80043b6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	49a4      	ldr	r1, [pc, #656]	; (8004640 <HAL_SPI_TransmitReceive+0x3a0>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	e008      	b.n	80043c8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	0149      	lsls	r1, r1, #5
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	23e0      	movs	r3, #224	; 0xe0
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d800      	bhi.n	80043f4 <HAL_SPI_TransmitReceive+0x154>
 80043f2:	e07f      	b.n	80044f4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x168>
 80043fc:	2312      	movs	r3, #18
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d000      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x168>
 8004406:	e069      	b.n	80044dc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	881a      	ldrh	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442c:	e056      	b.n	80044dc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2202      	movs	r2, #2
 8004436:	4013      	ands	r3, r2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d11b      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x1d4>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x1d4>
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	2b01      	cmp	r3, #1
 800444a:	d113      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	881a      	ldrh	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	1c9a      	adds	r2, r3, #2
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2201      	movs	r2, #1
 800447c:	4013      	ands	r3, r2
 800447e:	2b01      	cmp	r3, #1
 8004480:	d11c      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x21c>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2246      	movs	r2, #70	; 0x46
 8004486:	5a9b      	ldrh	r3, [r3, r2]
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	b292      	uxth	r2, r2
 800449a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2246      	movs	r2, #70	; 0x46
 80044aa:	5a9b      	ldrh	r3, [r3, r2]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b299      	uxth	r1, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2246      	movs	r2, #70	; 0x46
 80044b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b8:	2301      	movs	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044bc:	f7fd fd96 	bl	8001fec <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d807      	bhi.n	80044dc <HAL_SPI_TransmitReceive+0x23c>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	3301      	adds	r3, #1
 80044d0:	d004      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80044d2:	2323      	movs	r3, #35	; 0x23
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2203      	movs	r2, #3
 80044d8:	701a      	strb	r2, [r3, #0]
        goto error;
 80044da:	e0a2      	b.n	8004622 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1a3      	bne.n	800442e <HAL_SPI_TransmitReceive+0x18e>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2246      	movs	r2, #70	; 0x46
 80044ea:	5a9b      	ldrh	r3, [r3, r2]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d19d      	bne.n	800442e <HAL_SPI_TransmitReceive+0x18e>
 80044f2:	e085      	b.n	8004600 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x268>
 80044fc:	2312      	movs	r3, #18
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d000      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x268>
 8004506:	e070      	b.n	80045ea <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452e:	e05c      	b.n	80045ea <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2202      	movs	r2, #2
 8004538:	4013      	ands	r3, r2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d11c      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x2d8>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x2d8>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b01      	cmp	r3, #1
 800454c:	d114      	bne.n	8004578 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2201      	movs	r2, #1
 8004580:	4013      	ands	r3, r2
 8004582:	2b01      	cmp	r3, #1
 8004584:	d11e      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x324>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2246      	movs	r2, #70	; 0x46
 800458a:	5a9b      	ldrh	r3, [r3, r2]
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	001a      	movs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2246      	movs	r2, #70	; 0x46
 80045b2:	5a9b      	ldrh	r3, [r3, r2]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b299      	uxth	r1, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2246      	movs	r2, #70	; 0x46
 80045be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045c4:	f7fd fd12 	bl	8001fec <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d802      	bhi.n	80045da <HAL_SPI_TransmitReceive+0x33a>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	3301      	adds	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x340>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80045e0:	2323      	movs	r3, #35	; 0x23
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2203      	movs	r2, #3
 80045e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80045e8:	e01b      	b.n	8004622 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d19d      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x290>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2246      	movs	r2, #70	; 0x46
 80045f8:	5a9b      	ldrh	r3, [r3, r2]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d197      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	0018      	movs	r0, r3
 8004608:	f000 f9aa 	bl	8004960 <SPI_EndRxTxTransaction>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d007      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004610:	2323      	movs	r3, #35	; 0x23
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	661a      	str	r2, [r3, #96]	; 0x60
 800461e:	e000      	b.n	8004622 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004620:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	225d      	movs	r2, #93	; 0x5d
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	225c      	movs	r2, #92	; 0x5c
 800462e:	2100      	movs	r1, #0
 8004630:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004632:	2323      	movs	r3, #35	; 0x23
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	781b      	ldrb	r3, [r3, #0]
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b00a      	add	sp, #40	; 0x28
 800463e:	bd80      	pop	{r7, pc}
 8004640:	ffffefff 	.word	0xffffefff

08004644 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004654:	f7fd fcca 	bl	8001fec <HAL_GetTick>
 8004658:	0002      	movs	r2, r0
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004664:	f7fd fcc2 	bl	8001fec <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800466c:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	015b      	lsls	r3, r3, #5
 8004672:	0d1b      	lsrs	r3, r3, #20
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	4353      	muls	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467a:	e058      	b.n	800472e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	d055      	beq.n	800472e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004682:	f7fd fcb3 	bl	8001fec <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	429a      	cmp	r2, r3
 8004690:	d902      	bls.n	8004698 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d142      	bne.n	800471e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	21e0      	movs	r1, #224	; 0xe0
 80046a4:	438a      	bics	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	2382      	movs	r3, #130	; 0x82
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d113      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	429a      	cmp	r2, r3
 80046be:	d005      	beq.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2140      	movs	r1, #64	; 0x40
 80046d8:	438a      	bics	r2, r1
 80046da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	019b      	lsls	r3, r3, #6
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d110      	bne.n	800470a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	491a      	ldr	r1, [pc, #104]	; (800475c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80046f4:	400a      	ands	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	0189      	lsls	r1, r1, #6
 8004706:	430a      	orrs	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	225d      	movs	r2, #93	; 0x5d
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	225c      	movs	r2, #92	; 0x5c
 8004716:	2100      	movs	r1, #0
 8004718:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e017      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3b01      	subs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	425a      	negs	r2, r3
 800473e:	4153      	adcs	r3, r2
 8004740:	b2db      	uxtb	r3, r3
 8004742:	001a      	movs	r2, r3
 8004744:	1dfb      	adds	r3, r7, #7
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d197      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b008      	add	sp, #32
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	20000000 	.word	0x20000000
 800475c:	ffffdfff 	.word	0xffffdfff

08004760 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800476e:	2317      	movs	r3, #23
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004776:	f7fd fc39 	bl	8001fec <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004786:	f7fd fc31 	bl	8001fec <HAL_GetTick>
 800478a:	0003      	movs	r3, r0
 800478c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	0013      	movs	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	00da      	lsls	r2, r3, #3
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	0d1b      	lsrs	r3, r3, #20
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	4353      	muls	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047ac:	e068      	b.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	23c0      	movs	r3, #192	; 0xc0
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d10a      	bne.n	80047ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d107      	bne.n	80047ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	2117      	movs	r1, #23
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	d055      	beq.n	8004880 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047d4:	f7fd fc0a 	bl	8001fec <HAL_GetTick>
 80047d8:	0002      	movs	r2, r0
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d902      	bls.n	80047ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d142      	bne.n	8004870 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	21e0      	movs	r1, #224	; 0xe0
 80047f6:	438a      	bics	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	2382      	movs	r3, #130	; 0x82
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	429a      	cmp	r2, r3
 8004804:	d113      	bne.n	800482e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	429a      	cmp	r2, r3
 8004810:	d005      	beq.n	800481e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	429a      	cmp	r2, r3
 800481c:	d107      	bne.n	800482e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	438a      	bics	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	429a      	cmp	r2, r3
 8004838:	d110      	bne.n	800485c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4916      	ldr	r1, [pc, #88]	; (80048a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004846:	400a      	ands	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0189      	lsls	r1, r1, #6
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	225d      	movs	r2, #93	; 0x5d
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	225c      	movs	r2, #92	; 0x5c
 8004868:	2100      	movs	r1, #0
 800486a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e010      	b.n	8004892 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3b01      	subs	r3, #1
 800487e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d18e      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b00a      	add	sp, #40	; 0x28
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	20000000 	.word	0x20000000
 80048a0:	ffffdfff 	.word	0xffffdfff

080048a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	2382      	movs	r3, #130	; 0x82
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d113      	bne.n	80048e4 <SPI_EndRxTransaction+0x40>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d005      	beq.n	80048d4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	438a      	bics	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	0013      	movs	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	f7ff fea7 	bl	8004644 <SPI_WaitFlagStateUntilTimeout>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d007      	beq.n	800490a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	2220      	movs	r2, #32
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e026      	b.n	8004958 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	2382      	movs	r3, #130	; 0x82
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	429a      	cmp	r2, r3
 8004914:	d11f      	bne.n	8004956 <SPI_EndRxTransaction+0xb2>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	429a      	cmp	r2, r3
 8004920:	d005      	beq.n	800492e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	429a      	cmp	r2, r3
 800492c:	d113      	bne.n	8004956 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	23c0      	movs	r3, #192	; 0xc0
 8004932:	00d9      	lsls	r1, r3, #3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	0013      	movs	r3, r2
 800493c:	2200      	movs	r2, #0
 800493e:	f7ff ff0f 	bl	8004760 <SPI_WaitFifoStateUntilTimeout>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d007      	beq.n	8004956 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	2220      	movs	r2, #32
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e000      	b.n	8004958 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b004      	add	sp, #16
 800495e:	bd80      	pop	{r7, pc}

08004960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	23c0      	movs	r3, #192	; 0xc0
 8004970:	0159      	lsls	r1, r3, #5
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	0013      	movs	r3, r2
 800497a:	2200      	movs	r2, #0
 800497c:	f7ff fef0 	bl	8004760 <SPI_WaitFifoStateUntilTimeout>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d007      	beq.n	8004994 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004988:	2220      	movs	r2, #32
 800498a:	431a      	orrs	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e027      	b.n	80049e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	0013      	movs	r3, r2
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	f7ff fe4f 	bl	8004644 <SPI_WaitFlagStateUntilTimeout>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d007      	beq.n	80049ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	2220      	movs	r2, #32
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e014      	b.n	80049e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	23c0      	movs	r3, #192	; 0xc0
 80049be:	00d9      	lsls	r1, r3, #3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	0013      	movs	r3, r2
 80049c8:	2200      	movs	r2, #0
 80049ca:	f7ff fec9 	bl	8004760 <SPI_WaitFifoStateUntilTimeout>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d007      	beq.n	80049e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	2220      	movs	r2, #32
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e000      	b.n	80049e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e046      	b.n	8004a8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2288      	movs	r2, #136	; 0x88
 8004a02:	589b      	ldr	r3, [r3, r2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fd f98e 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2288      	movs	r2, #136	; 0x88
 8004a1c:	2124      	movs	r1, #36	; 0x24
 8004a1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 f8cc 	bl	8004bd0 <UART_SetConfig>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e024      	b.n	8004a8c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fa29 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	490d      	ldr	r1, [pc, #52]	; (8004a94 <HAL_UART_Init+0xa8>)
 8004a5e:	400a      	ands	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	212a      	movs	r1, #42	; 0x2a
 8004a6e:	438a      	bics	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fac1 	bl	800500c <UART_CheckIdleState>
 8004a8a:	0003      	movs	r3, r0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	ffffb7ff 	.word	0xffffb7ff

08004a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	1dbb      	adds	r3, r7, #6
 8004aa6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2288      	movs	r2, #136	; 0x88
 8004aac:	589b      	ldr	r3, [r3, r2]
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d000      	beq.n	8004ab4 <HAL_UART_Transmit+0x1c>
 8004ab2:	e088      	b.n	8004bc6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_Transmit+0x2a>
 8004aba:	1dbb      	adds	r3, r7, #6
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e080      	b.n	8004bc8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	015b      	lsls	r3, r3, #5
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d109      	bne.n	8004ae6 <HAL_UART_Transmit+0x4e>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d001      	beq.n	8004ae6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e070      	b.n	8004bc8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2290      	movs	r2, #144	; 0x90
 8004aea:	2100      	movs	r1, #0
 8004aec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2288      	movs	r2, #136	; 0x88
 8004af2:	2121      	movs	r1, #33	; 0x21
 8004af4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af6:	f7fd fa79 	bl	8001fec <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1dba      	adds	r2, r7, #6
 8004b02:	2154      	movs	r1, #84	; 0x54
 8004b04:	8812      	ldrh	r2, [r2, #0]
 8004b06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1dba      	adds	r2, r7, #6
 8004b0c:	2156      	movs	r1, #86	; 0x56
 8004b0e:	8812      	ldrh	r2, [r2, #0]
 8004b10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	015b      	lsls	r3, r3, #5
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d108      	bne.n	8004b30 <HAL_UART_Transmit+0x98>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d104      	bne.n	8004b30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e003      	b.n	8004b38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b38:	e02c      	b.n	8004b94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	0013      	movs	r3, r2
 8004b44:	2200      	movs	r2, #0
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	f000 faae 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	1e03      	subs	r3, r0, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e039      	b.n	8004bc8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	001a      	movs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	05d2      	lsls	r2, r2, #23
 8004b66:	0dd2      	lsrs	r2, r2, #23
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e007      	b.n	8004b82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2256      	movs	r2, #86	; 0x56
 8004b86:	5a9b      	ldrh	r3, [r3, r2]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b299      	uxth	r1, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2256      	movs	r2, #86	; 0x56
 8004b92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2256      	movs	r2, #86	; 0x56
 8004b98:	5a9b      	ldrh	r3, [r3, r2]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1cc      	bne.n	8004b3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	0013      	movs	r3, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	f000 fa7b 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e006      	b.n	8004bc8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2288      	movs	r2, #136	; 0x88
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e000      	b.n	8004bc8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
  }
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b008      	add	sp, #32
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd8:	231a      	movs	r3, #26
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4aa1      	ldr	r2, [pc, #644]	; (8004e84 <UART_SetConfig+0x2b4>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a9c      	ldr	r2, [pc, #624]	; (8004e88 <UART_SetConfig+0x2b8>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a93      	ldr	r2, [pc, #588]	; (8004e8c <UART_SetConfig+0x2bc>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	220f      	movs	r2, #15
 8004c54:	4393      	bics	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a89      	ldr	r2, [pc, #548]	; (8004e90 <UART_SetConfig+0x2c0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d127      	bne.n	8004cbe <UART_SetConfig+0xee>
 8004c6e:	4b89      	ldr	r3, [pc, #548]	; (8004e94 <UART_SetConfig+0x2c4>)
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	2203      	movs	r2, #3
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d017      	beq.n	8004caa <UART_SetConfig+0xda>
 8004c7a:	d81b      	bhi.n	8004cb4 <UART_SetConfig+0xe4>
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d00a      	beq.n	8004c96 <UART_SetConfig+0xc6>
 8004c80:	d818      	bhi.n	8004cb4 <UART_SetConfig+0xe4>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <UART_SetConfig+0xbc>
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d00a      	beq.n	8004ca0 <UART_SetConfig+0xd0>
 8004c8a:	e013      	b.n	8004cb4 <UART_SetConfig+0xe4>
 8004c8c:	231b      	movs	r3, #27
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e021      	b.n	8004cda <UART_SetConfig+0x10a>
 8004c96:	231b      	movs	r3, #27
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e01c      	b.n	8004cda <UART_SetConfig+0x10a>
 8004ca0:	231b      	movs	r3, #27
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e017      	b.n	8004cda <UART_SetConfig+0x10a>
 8004caa:	231b      	movs	r3, #27
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2208      	movs	r2, #8
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e012      	b.n	8004cda <UART_SetConfig+0x10a>
 8004cb4:	231b      	movs	r3, #27
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2210      	movs	r2, #16
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x10a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a75      	ldr	r2, [pc, #468]	; (8004e98 <UART_SetConfig+0x2c8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d104      	bne.n	8004cd2 <UART_SetConfig+0x102>
 8004cc8:	231b      	movs	r3, #27
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e003      	b.n	8004cda <UART_SetConfig+0x10a>
 8004cd2:	231b      	movs	r3, #27
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d000      	beq.n	8004ce8 <UART_SetConfig+0x118>
 8004ce6:	e065      	b.n	8004db4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004ce8:	231b      	movs	r3, #27
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d015      	beq.n	8004d1e <UART_SetConfig+0x14e>
 8004cf2:	dc18      	bgt.n	8004d26 <UART_SetConfig+0x156>
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d00d      	beq.n	8004d14 <UART_SetConfig+0x144>
 8004cf8:	dc15      	bgt.n	8004d26 <UART_SetConfig+0x156>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x134>
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d005      	beq.n	8004d0e <UART_SetConfig+0x13e>
 8004d02:	e010      	b.n	8004d26 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fe fe34 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	617b      	str	r3, [r7, #20]
        break;
 8004d0c:	e012      	b.n	8004d34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <UART_SetConfig+0x2cc>)
 8004d10:	617b      	str	r3, [r7, #20]
        break;
 8004d12:	e00f      	b.n	8004d34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d14:	f7fe fda0 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	617b      	str	r3, [r7, #20]
        break;
 8004d1c:	e00a      	b.n	8004d34 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
        break;
 8004d24:	e006      	b.n	8004d34 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d2a:	231a      	movs	r3, #26
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
        break;
 8004d32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d100      	bne.n	8004d3c <UART_SetConfig+0x16c>
 8004d3a:	e08d      	b.n	8004e58 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d40:	4b57      	ldr	r3, [pc, #348]	; (8004ea0 <UART_SetConfig+0x2d0>)
 8004d42:	0052      	lsls	r2, r2, #1
 8004d44:	5ad3      	ldrh	r3, [r2, r3]
 8004d46:	0019      	movs	r1, r3
 8004d48:	6978      	ldr	r0, [r7, #20]
 8004d4a:	f7fb f9eb 	bl	8000124 <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	005a      	lsls	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	18d2      	adds	r2, r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	0010      	movs	r0, r2
 8004d62:	f7fb f9df 	bl	8000124 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b0f      	cmp	r3, #15
 8004d6e:	d91c      	bls.n	8004daa <UART_SetConfig+0x1da>
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d217      	bcs.n	8004daa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	200e      	movs	r0, #14
 8004d80:	183b      	adds	r3, r7, r0
 8004d82:	210f      	movs	r1, #15
 8004d84:	438a      	bics	r2, r1
 8004d86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	b299      	uxth	r1, r3
 8004d94:	183b      	adds	r3, r7, r0
 8004d96:	183a      	adds	r2, r7, r0
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	183a      	adds	r2, r7, r0
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	60da      	str	r2, [r3, #12]
 8004da8:	e056      	b.n	8004e58 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004daa:	231a      	movs	r3, #26
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e051      	b.n	8004e58 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db4:	231b      	movs	r3, #27
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d015      	beq.n	8004dea <UART_SetConfig+0x21a>
 8004dbe:	dc18      	bgt.n	8004df2 <UART_SetConfig+0x222>
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d00d      	beq.n	8004de0 <UART_SetConfig+0x210>
 8004dc4:	dc15      	bgt.n	8004df2 <UART_SetConfig+0x222>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <UART_SetConfig+0x200>
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d005      	beq.n	8004dda <UART_SetConfig+0x20a>
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7fe fdce 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	617b      	str	r3, [r7, #20]
        break;
 8004dd8:	e012      	b.n	8004e00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <UART_SetConfig+0x2cc>)
 8004ddc:	617b      	str	r3, [r7, #20]
        break;
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de0:	f7fe fd3a 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8004de4:	0003      	movs	r3, r0
 8004de6:	617b      	str	r3, [r7, #20]
        break;
 8004de8:	e00a      	b.n	8004e00 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	617b      	str	r3, [r7, #20]
        break;
 8004df0:	e006      	b.n	8004e00 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004df6:	231a      	movs	r3, #26
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
        break;
 8004dfe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d028      	beq.n	8004e58 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0a:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <UART_SetConfig+0x2d0>)
 8004e0c:	0052      	lsls	r2, r2, #1
 8004e0e:	5ad3      	ldrh	r3, [r2, r3]
 8004e10:	0019      	movs	r1, r3
 8004e12:	6978      	ldr	r0, [r7, #20]
 8004e14:	f7fb f986 	bl	8000124 <__udivsi3>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	18d2      	adds	r2, r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0019      	movs	r1, r3
 8004e2a:	0010      	movs	r0, r2
 8004e2c:	f7fb f97a 	bl	8000124 <__udivsi3>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d90a      	bls.n	8004e50 <UART_SetConfig+0x280>
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	025b      	lsls	r3, r3, #9
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d205      	bcs.n	8004e50 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	e003      	b.n	8004e58 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004e50:	231a      	movs	r3, #26
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	226a      	movs	r2, #106	; 0x6a
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2268      	movs	r2, #104	; 0x68
 8004e64:	2101      	movs	r1, #1
 8004e66:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e74:	231a      	movs	r3, #26
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	781b      	ldrb	r3, [r3, #0]
}
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b008      	add	sp, #32
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	cfff69f3 	.word	0xcfff69f3
 8004e88:	ffffcfff 	.word	0xffffcfff
 8004e8c:	11fff4ff 	.word	0x11fff4ff
 8004e90:	40013800 	.word	0x40013800
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40004400 	.word	0x40004400
 8004e9c:	00f42400 	.word	0x00f42400
 8004ea0:	08005f50 	.word	0x08005f50

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <UART_AdvFeatureConfig+0x144>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4a43      	ldr	r2, [pc, #268]	; (8004fec <UART_AdvFeatureConfig+0x148>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a3b      	ldr	r2, [pc, #236]	; (8004ff0 <UART_AdvFeatureConfig+0x14c>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2208      	movs	r2, #8
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <UART_AdvFeatureConfig+0x150>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	2210      	movs	r2, #16
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <UART_AdvFeatureConfig+0x154>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	0019      	movs	r1, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <UART_AdvFeatureConfig+0x158>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2240      	movs	r2, #64	; 0x40
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <UART_AdvFeatureConfig+0x15c>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	035b      	lsls	r3, r3, #13
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d10b      	bne.n	8004fbe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <UART_AdvFeatureConfig+0x160>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <UART_AdvFeatureConfig+0x164>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	fffdffff 	.word	0xfffdffff
 8004fec:	fffeffff 	.word	0xfffeffff
 8004ff0:	fffbffff 	.word	0xfffbffff
 8004ff4:	ffff7fff 	.word	0xffff7fff
 8004ff8:	ffffefff 	.word	0xffffefff
 8004ffc:	ffffdfff 	.word	0xffffdfff
 8005000:	ffefffff 	.word	0xffefffff
 8005004:	ff9fffff 	.word	0xff9fffff
 8005008:	fff7ffff 	.word	0xfff7ffff

0800500c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2290      	movs	r2, #144	; 0x90
 8005018:	2100      	movs	r1, #0
 800501a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800501c:	f7fc ffe6 	bl	8001fec <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4013      	ands	r3, r2
 800502e:	2b08      	cmp	r3, #8
 8005030:	d10c      	bne.n	800504c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	0391      	lsls	r1, r2, #14
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <UART_CheckIdleState+0x98>)
 800503c:	9200      	str	r2, [sp, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	f000 f832 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e026      	b.n	800509a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	2b04      	cmp	r3, #4
 8005058:	d10c      	bne.n	8005074 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	03d1      	lsls	r1, r2, #15
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <UART_CheckIdleState+0x98>)
 8005064:	9200      	str	r2, [sp, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f81e 	bl	80050a8 <UART_WaitOnFlagUntilTimeout>
 800506c:	1e03      	subs	r3, r0, #0
 800506e:	d001      	beq.n	8005074 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e012      	b.n	800509a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2288      	movs	r2, #136	; 0x88
 8005078:	2120      	movs	r1, #32
 800507a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	228c      	movs	r2, #140	; 0x8c
 8005080:	2120      	movs	r1, #32
 8005082:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2284      	movs	r2, #132	; 0x84
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	01ffffff 	.word	0x01ffffff

080050a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b094      	sub	sp, #80	; 0x50
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	1dfb      	adds	r3, r7, #7
 80050b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	e0a7      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050bc:	3301      	adds	r3, #1
 80050be:	d100      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80050c0:	e0a3      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc ff93 	bl	8001fec <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13f      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050e0:	647b      	str	r3, [r7, #68]	; 0x44
 80050e2:	2301      	movs	r3, #1
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	494e      	ldr	r1, [pc, #312]	; (8005234 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800510a:	f3ef 8310 	mrs	r3, PRIMASK
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
 8005114:	2301      	movs	r3, #1
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2101      	movs	r1, #1
 800512c:	438a      	bics	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2288      	movs	r2, #136	; 0x88
 8005140:	2120      	movs	r1, #32
 8005142:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	228c      	movs	r2, #140	; 0x8c
 8005148:	2120      	movs	r1, #32
 800514a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2284      	movs	r2, #132	; 0x84
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e069      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	d052      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	401a      	ands	r2, r3
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	429a      	cmp	r2, r3
 8005176:	d148      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005182:	f3ef 8310 	mrs	r3, PRIMASK
 8005186:	613b      	str	r3, [r7, #16]
  return(result);
 8005188:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4924      	ldr	r1, [pc, #144]	; (8005234 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80051ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051be:	2301      	movs	r3, #1
 80051c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2101      	movs	r1, #1
 80051d6:	438a      	bics	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2288      	movs	r2, #136	; 0x88
 80051ea:	2120      	movs	r1, #32
 80051ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	228c      	movs	r2, #140	; 0x8c
 80051f2:	2120      	movs	r1, #32
 80051f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2290      	movs	r2, #144	; 0x90
 80051fa:	2120      	movs	r1, #32
 80051fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2284      	movs	r2, #132	; 0x84
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e010      	b.n	800522c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	425a      	negs	r2, r3
 800521a:	4153      	adcs	r3, r2
 800521c:	b2db      	uxtb	r3, r3
 800521e:	001a      	movs	r2, r3
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d100      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x182>
 8005228:	e747      	b.n	80050ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b014      	add	sp, #80	; 0x50
 8005232:	bd80      	pop	{r7, pc}
 8005234:	fffffe5f 	.word	0xfffffe5f

08005238 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2284      	movs	r2, #132	; 0x84
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_UARTEx_DisableFifoMode+0x16>
 800524a:	2302      	movs	r3, #2
 800524c:	e027      	b.n	800529e <HAL_UARTEx_DisableFifoMode+0x66>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2284      	movs	r2, #132	; 0x84
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2288      	movs	r2, #136	; 0x88
 800525a:	2124      	movs	r1, #36	; 0x24
 800525c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	438a      	bics	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a0b      	ldr	r2, [pc, #44]	; (80052a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800527a:	4013      	ands	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2288      	movs	r2, #136	; 0x88
 8005290:	2120      	movs	r1, #32
 8005292:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2284      	movs	r2, #132	; 0x84
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	dfffffff 	.word	0xdfffffff

080052ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2284      	movs	r2, #132	; 0x84
 80052ba:	5c9b      	ldrb	r3, [r3, r2]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e02e      	b.n	8005322 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2284      	movs	r2, #132	; 0x84
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2288      	movs	r2, #136	; 0x88
 80052d0:	2124      	movs	r1, #36	; 0x24
 80052d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2101      	movs	r1, #1
 80052e8:	438a      	bics	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	08d9      	lsrs	r1, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	0018      	movs	r0, r3
 8005304:	f000 f854 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2288      	movs	r2, #136	; 0x88
 8005314:	2120      	movs	r1, #32
 8005316:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2284      	movs	r2, #132	; 0x84
 800531c:	2100      	movs	r1, #0
 800531e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2284      	movs	r2, #132	; 0x84
 800533a:	5c9b      	ldrb	r3, [r3, r2]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e02f      	b.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2284      	movs	r2, #132	; 0x84
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2288      	movs	r2, #136	; 0x88
 8005350:	2124      	movs	r1, #36	; 0x24
 8005352:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	438a      	bics	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4a0e      	ldr	r2, [pc, #56]	; (80053ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005374:	4013      	ands	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 f813 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2288      	movs	r2, #136	; 0x88
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2284      	movs	r2, #132	; 0x84
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b004      	add	sp, #16
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	f1ffffff 	.word	0xf1ffffff

080053b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	226a      	movs	r2, #106	; 0x6a
 80053c4:	2101      	movs	r1, #1
 80053c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2268      	movs	r2, #104	; 0x68
 80053cc:	2101      	movs	r1, #1
 80053ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053d0:	e043      	b.n	800545a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053d2:	260f      	movs	r6, #15
 80053d4:	19bb      	adds	r3, r7, r6
 80053d6:	2208      	movs	r2, #8
 80053d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053da:	200e      	movs	r0, #14
 80053dc:	183b      	adds	r3, r7, r0
 80053de:	2208      	movs	r2, #8
 80053e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	240d      	movs	r4, #13
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	2107      	movs	r1, #7
 80053f2:	400a      	ands	r2, r1
 80053f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	0f5b      	lsrs	r3, r3, #29
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	250c      	movs	r5, #12
 8005402:	197b      	adds	r3, r7, r5
 8005404:	2107      	movs	r1, #7
 8005406:	400a      	ands	r2, r1
 8005408:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800540a:	183b      	adds	r3, r7, r0
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	197a      	adds	r2, r7, r5
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	4914      	ldr	r1, [pc, #80]	; (8005464 <UARTEx_SetNbDataToProcess+0xb4>)
 8005414:	5c8a      	ldrb	r2, [r1, r2]
 8005416:	435a      	muls	r2, r3
 8005418:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800541a:	197b      	adds	r3, r7, r5
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <UARTEx_SetNbDataToProcess+0xb8>)
 8005420:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005422:	0019      	movs	r1, r3
 8005424:	f7fa ff08 	bl	8000238 <__divsi3>
 8005428:	0003      	movs	r3, r0
 800542a:	b299      	uxth	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	226a      	movs	r2, #106	; 0x6a
 8005430:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005432:	19bb      	adds	r3, r7, r6
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	193a      	adds	r2, r7, r4
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	490a      	ldr	r1, [pc, #40]	; (8005464 <UARTEx_SetNbDataToProcess+0xb4>)
 800543c:	5c8a      	ldrb	r2, [r1, r2]
 800543e:	435a      	muls	r2, r3
 8005440:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005442:	193b      	adds	r3, r7, r4
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4a08      	ldr	r2, [pc, #32]	; (8005468 <UARTEx_SetNbDataToProcess+0xb8>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800544a:	0019      	movs	r1, r3
 800544c:	f7fa fef4 	bl	8000238 <__divsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	b299      	uxth	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2268      	movs	r2, #104	; 0x68
 8005458:	5299      	strh	r1, [r3, r2]
}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b005      	add	sp, #20
 8005460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	08005f68 	.word	0x08005f68
 8005468:	08005f70 	.word	0x08005f70

0800546c <__errno>:
 800546c:	4b01      	ldr	r3, [pc, #4]	; (8005474 <__errno+0x8>)
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	4770      	bx	lr
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	2000000c 	.word	0x2000000c

08005478 <__libc_init_array>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	2600      	movs	r6, #0
 800547c:	4d0c      	ldr	r5, [pc, #48]	; (80054b0 <__libc_init_array+0x38>)
 800547e:	4c0d      	ldr	r4, [pc, #52]	; (80054b4 <__libc_init_array+0x3c>)
 8005480:	1b64      	subs	r4, r4, r5
 8005482:	10a4      	asrs	r4, r4, #2
 8005484:	42a6      	cmp	r6, r4
 8005486:	d109      	bne.n	800549c <__libc_init_array+0x24>
 8005488:	2600      	movs	r6, #0
 800548a:	f000 fc8b 	bl	8005da4 <_init>
 800548e:	4d0a      	ldr	r5, [pc, #40]	; (80054b8 <__libc_init_array+0x40>)
 8005490:	4c0a      	ldr	r4, [pc, #40]	; (80054bc <__libc_init_array+0x44>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	42a6      	cmp	r6, r4
 8005498:	d105      	bne.n	80054a6 <__libc_init_array+0x2e>
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	00b3      	lsls	r3, r6, #2
 800549e:	58eb      	ldr	r3, [r5, r3]
 80054a0:	4798      	blx	r3
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7ee      	b.n	8005484 <__libc_init_array+0xc>
 80054a6:	00b3      	lsls	r3, r6, #2
 80054a8:	58eb      	ldr	r3, [r5, r3]
 80054aa:	4798      	blx	r3
 80054ac:	3601      	adds	r6, #1
 80054ae:	e7f2      	b.n	8005496 <__libc_init_array+0x1e>
 80054b0:	08005fb4 	.word	0x08005fb4
 80054b4:	08005fb4 	.word	0x08005fb4
 80054b8:	08005fb4 	.word	0x08005fb4
 80054bc:	08005fb8 	.word	0x08005fb8

080054c0 <memset>:
 80054c0:	0003      	movs	r3, r0
 80054c2:	1882      	adds	r2, r0, r2
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d100      	bne.n	80054ca <memset+0xa>
 80054c8:	4770      	bx	lr
 80054ca:	7019      	strb	r1, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	e7f9      	b.n	80054c4 <memset+0x4>

080054d0 <siprintf>:
 80054d0:	b40e      	push	{r1, r2, r3}
 80054d2:	b500      	push	{lr}
 80054d4:	490b      	ldr	r1, [pc, #44]	; (8005504 <siprintf+0x34>)
 80054d6:	b09c      	sub	sp, #112	; 0x70
 80054d8:	ab1d      	add	r3, sp, #116	; 0x74
 80054da:	9002      	str	r0, [sp, #8]
 80054dc:	9006      	str	r0, [sp, #24]
 80054de:	9107      	str	r1, [sp, #28]
 80054e0:	9104      	str	r1, [sp, #16]
 80054e2:	4809      	ldr	r0, [pc, #36]	; (8005508 <siprintf+0x38>)
 80054e4:	4909      	ldr	r1, [pc, #36]	; (800550c <siprintf+0x3c>)
 80054e6:	cb04      	ldmia	r3!, {r2}
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	a902      	add	r1, sp, #8
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f000 f870 	bl	80055d4 <_svfiprintf_r>
 80054f4:	2300      	movs	r3, #0
 80054f6:	9a02      	ldr	r2, [sp, #8]
 80054f8:	7013      	strb	r3, [r2, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	bc08      	pop	{r3}
 80054fe:	b003      	add	sp, #12
 8005500:	4718      	bx	r3
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	7fffffff 	.word	0x7fffffff
 8005508:	2000000c 	.word	0x2000000c
 800550c:	ffff0208 	.word	0xffff0208

08005510 <__ssputs_r>:
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	688e      	ldr	r6, [r1, #8]
 8005514:	b085      	sub	sp, #20
 8005516:	0007      	movs	r7, r0
 8005518:	000c      	movs	r4, r1
 800551a:	9203      	str	r2, [sp, #12]
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	429e      	cmp	r6, r3
 8005520:	d83c      	bhi.n	800559c <__ssputs_r+0x8c>
 8005522:	2390      	movs	r3, #144	; 0x90
 8005524:	898a      	ldrh	r2, [r1, #12]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	421a      	tst	r2, r3
 800552a:	d034      	beq.n	8005596 <__ssputs_r+0x86>
 800552c:	6909      	ldr	r1, [r1, #16]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6960      	ldr	r0, [r4, #20]
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	9302      	str	r3, [sp, #8]
 8005536:	2303      	movs	r3, #3
 8005538:	4343      	muls	r3, r0
 800553a:	0fdd      	lsrs	r5, r3, #31
 800553c:	18ed      	adds	r5, r5, r3
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	9802      	ldr	r0, [sp, #8]
 8005542:	3301      	adds	r3, #1
 8005544:	181b      	adds	r3, r3, r0
 8005546:	106d      	asrs	r5, r5, #1
 8005548:	42ab      	cmp	r3, r5
 800554a:	d900      	bls.n	800554e <__ssputs_r+0x3e>
 800554c:	001d      	movs	r5, r3
 800554e:	0553      	lsls	r3, r2, #21
 8005550:	d532      	bpl.n	80055b8 <__ssputs_r+0xa8>
 8005552:	0029      	movs	r1, r5
 8005554:	0038      	movs	r0, r7
 8005556:	f000 fb53 	bl	8005c00 <_malloc_r>
 800555a:	1e06      	subs	r6, r0, #0
 800555c:	d109      	bne.n	8005572 <__ssputs_r+0x62>
 800555e:	230c      	movs	r3, #12
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	2001      	movs	r0, #1
 8005566:	89a2      	ldrh	r2, [r4, #12]
 8005568:	4240      	negs	r0, r0
 800556a:	4313      	orrs	r3, r2
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	b005      	add	sp, #20
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005572:	9a02      	ldr	r2, [sp, #8]
 8005574:	6921      	ldr	r1, [r4, #16]
 8005576:	f000 faba 	bl	8005aee <memcpy>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <__ssputs_r+0xc0>)
 800557e:	401a      	ands	r2, r3
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	4313      	orrs	r3, r2
 8005584:	81a3      	strh	r3, [r4, #12]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	6126      	str	r6, [r4, #16]
 800558a:	18f6      	adds	r6, r6, r3
 800558c:	6026      	str	r6, [r4, #0]
 800558e:	6165      	str	r5, [r4, #20]
 8005590:	9e01      	ldr	r6, [sp, #4]
 8005592:	1aed      	subs	r5, r5, r3
 8005594:	60a5      	str	r5, [r4, #8]
 8005596:	9b01      	ldr	r3, [sp, #4]
 8005598:	429e      	cmp	r6, r3
 800559a:	d900      	bls.n	800559e <__ssputs_r+0x8e>
 800559c:	9e01      	ldr	r6, [sp, #4]
 800559e:	0032      	movs	r2, r6
 80055a0:	9903      	ldr	r1, [sp, #12]
 80055a2:	6820      	ldr	r0, [r4, #0]
 80055a4:	f000 faac 	bl	8005b00 <memmove>
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	2000      	movs	r0, #0
 80055ac:	1b9b      	subs	r3, r3, r6
 80055ae:	60a3      	str	r3, [r4, #8]
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	199e      	adds	r6, r3, r6
 80055b4:	6026      	str	r6, [r4, #0]
 80055b6:	e7da      	b.n	800556e <__ssputs_r+0x5e>
 80055b8:	002a      	movs	r2, r5
 80055ba:	0038      	movs	r0, r7
 80055bc:	f000 fb96 	bl	8005cec <_realloc_r>
 80055c0:	1e06      	subs	r6, r0, #0
 80055c2:	d1e0      	bne.n	8005586 <__ssputs_r+0x76>
 80055c4:	0038      	movs	r0, r7
 80055c6:	6921      	ldr	r1, [r4, #16]
 80055c8:	f000 faae 	bl	8005b28 <_free_r>
 80055cc:	e7c7      	b.n	800555e <__ssputs_r+0x4e>
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	fffffb7f 	.word	0xfffffb7f

080055d4 <_svfiprintf_r>:
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	b0a1      	sub	sp, #132	; 0x84
 80055d8:	9003      	str	r0, [sp, #12]
 80055da:	001d      	movs	r5, r3
 80055dc:	898b      	ldrh	r3, [r1, #12]
 80055de:	000f      	movs	r7, r1
 80055e0:	0016      	movs	r6, r2
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	d511      	bpl.n	800560a <_svfiprintf_r+0x36>
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10e      	bne.n	800560a <_svfiprintf_r+0x36>
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	f000 fb07 	bl	8005c00 <_malloc_r>
 80055f2:	6038      	str	r0, [r7, #0]
 80055f4:	6138      	str	r0, [r7, #16]
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d105      	bne.n	8005606 <_svfiprintf_r+0x32>
 80055fa:	230c      	movs	r3, #12
 80055fc:	9a03      	ldr	r2, [sp, #12]
 80055fe:	3801      	subs	r0, #1
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	b021      	add	sp, #132	; 0x84
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	2300      	movs	r3, #0
 800560c:	ac08      	add	r4, sp, #32
 800560e:	6163      	str	r3, [r4, #20]
 8005610:	3320      	adds	r3, #32
 8005612:	7663      	strb	r3, [r4, #25]
 8005614:	3310      	adds	r3, #16
 8005616:	76a3      	strb	r3, [r4, #26]
 8005618:	9507      	str	r5, [sp, #28]
 800561a:	0035      	movs	r5, r6
 800561c:	782b      	ldrb	r3, [r5, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <_svfiprintf_r+0x52>
 8005622:	2b25      	cmp	r3, #37	; 0x25
 8005624:	d147      	bne.n	80056b6 <_svfiprintf_r+0xe2>
 8005626:	1bab      	subs	r3, r5, r6
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	42b5      	cmp	r5, r6
 800562c:	d00c      	beq.n	8005648 <_svfiprintf_r+0x74>
 800562e:	0032      	movs	r2, r6
 8005630:	0039      	movs	r1, r7
 8005632:	9803      	ldr	r0, [sp, #12]
 8005634:	f7ff ff6c 	bl	8005510 <__ssputs_r>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d100      	bne.n	800563e <_svfiprintf_r+0x6a>
 800563c:	e0ae      	b.n	800579c <_svfiprintf_r+0x1c8>
 800563e:	6962      	ldr	r2, [r4, #20]
 8005640:	9b05      	ldr	r3, [sp, #20]
 8005642:	4694      	mov	ip, r2
 8005644:	4463      	add	r3, ip
 8005646:	6163      	str	r3, [r4, #20]
 8005648:	782b      	ldrb	r3, [r5, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d100      	bne.n	8005650 <_svfiprintf_r+0x7c>
 800564e:	e0a5      	b.n	800579c <_svfiprintf_r+0x1c8>
 8005650:	2201      	movs	r2, #1
 8005652:	2300      	movs	r3, #0
 8005654:	4252      	negs	r2, r2
 8005656:	6062      	str	r2, [r4, #4]
 8005658:	a904      	add	r1, sp, #16
 800565a:	3254      	adds	r2, #84	; 0x54
 800565c:	1852      	adds	r2, r2, r1
 800565e:	1c6e      	adds	r6, r5, #1
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	60e3      	str	r3, [r4, #12]
 8005664:	60a3      	str	r3, [r4, #8]
 8005666:	7013      	strb	r3, [r2, #0]
 8005668:	65a3      	str	r3, [r4, #88]	; 0x58
 800566a:	2205      	movs	r2, #5
 800566c:	7831      	ldrb	r1, [r6, #0]
 800566e:	4854      	ldr	r0, [pc, #336]	; (80057c0 <_svfiprintf_r+0x1ec>)
 8005670:	f000 fa32 	bl	8005ad8 <memchr>
 8005674:	1c75      	adds	r5, r6, #1
 8005676:	2800      	cmp	r0, #0
 8005678:	d11f      	bne.n	80056ba <_svfiprintf_r+0xe6>
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	06d3      	lsls	r3, r2, #27
 800567e:	d504      	bpl.n	800568a <_svfiprintf_r+0xb6>
 8005680:	2353      	movs	r3, #83	; 0x53
 8005682:	a904      	add	r1, sp, #16
 8005684:	185b      	adds	r3, r3, r1
 8005686:	2120      	movs	r1, #32
 8005688:	7019      	strb	r1, [r3, #0]
 800568a:	0713      	lsls	r3, r2, #28
 800568c:	d504      	bpl.n	8005698 <_svfiprintf_r+0xc4>
 800568e:	2353      	movs	r3, #83	; 0x53
 8005690:	a904      	add	r1, sp, #16
 8005692:	185b      	adds	r3, r3, r1
 8005694:	212b      	movs	r1, #43	; 0x2b
 8005696:	7019      	strb	r1, [r3, #0]
 8005698:	7833      	ldrb	r3, [r6, #0]
 800569a:	2b2a      	cmp	r3, #42	; 0x2a
 800569c:	d016      	beq.n	80056cc <_svfiprintf_r+0xf8>
 800569e:	0035      	movs	r5, r6
 80056a0:	2100      	movs	r1, #0
 80056a2:	200a      	movs	r0, #10
 80056a4:	68e3      	ldr	r3, [r4, #12]
 80056a6:	782a      	ldrb	r2, [r5, #0]
 80056a8:	1c6e      	adds	r6, r5, #1
 80056aa:	3a30      	subs	r2, #48	; 0x30
 80056ac:	2a09      	cmp	r2, #9
 80056ae:	d94e      	bls.n	800574e <_svfiprintf_r+0x17a>
 80056b0:	2900      	cmp	r1, #0
 80056b2:	d111      	bne.n	80056d8 <_svfiprintf_r+0x104>
 80056b4:	e017      	b.n	80056e6 <_svfiprintf_r+0x112>
 80056b6:	3501      	adds	r5, #1
 80056b8:	e7b0      	b.n	800561c <_svfiprintf_r+0x48>
 80056ba:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <_svfiprintf_r+0x1ec>)
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	1ac0      	subs	r0, r0, r3
 80056c0:	2301      	movs	r3, #1
 80056c2:	4083      	lsls	r3, r0
 80056c4:	4313      	orrs	r3, r2
 80056c6:	002e      	movs	r6, r5
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	e7ce      	b.n	800566a <_svfiprintf_r+0x96>
 80056cc:	9b07      	ldr	r3, [sp, #28]
 80056ce:	1d19      	adds	r1, r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	9107      	str	r1, [sp, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db01      	blt.n	80056dc <_svfiprintf_r+0x108>
 80056d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80056da:	e004      	b.n	80056e6 <_svfiprintf_r+0x112>
 80056dc:	425b      	negs	r3, r3
 80056de:	60e3      	str	r3, [r4, #12]
 80056e0:	2302      	movs	r3, #2
 80056e2:	4313      	orrs	r3, r2
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	782b      	ldrb	r3, [r5, #0]
 80056e8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ea:	d10a      	bne.n	8005702 <_svfiprintf_r+0x12e>
 80056ec:	786b      	ldrb	r3, [r5, #1]
 80056ee:	2b2a      	cmp	r3, #42	; 0x2a
 80056f0:	d135      	bne.n	800575e <_svfiprintf_r+0x18a>
 80056f2:	9b07      	ldr	r3, [sp, #28]
 80056f4:	3502      	adds	r5, #2
 80056f6:	1d1a      	adds	r2, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	9207      	str	r2, [sp, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db2b      	blt.n	8005758 <_svfiprintf_r+0x184>
 8005700:	9309      	str	r3, [sp, #36]	; 0x24
 8005702:	4e30      	ldr	r6, [pc, #192]	; (80057c4 <_svfiprintf_r+0x1f0>)
 8005704:	2203      	movs	r2, #3
 8005706:	0030      	movs	r0, r6
 8005708:	7829      	ldrb	r1, [r5, #0]
 800570a:	f000 f9e5 	bl	8005ad8 <memchr>
 800570e:	2800      	cmp	r0, #0
 8005710:	d006      	beq.n	8005720 <_svfiprintf_r+0x14c>
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	1b80      	subs	r0, r0, r6
 8005716:	4083      	lsls	r3, r0
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	3501      	adds	r5, #1
 800571c:	4313      	orrs	r3, r2
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	7829      	ldrb	r1, [r5, #0]
 8005722:	2206      	movs	r2, #6
 8005724:	4828      	ldr	r0, [pc, #160]	; (80057c8 <_svfiprintf_r+0x1f4>)
 8005726:	1c6e      	adds	r6, r5, #1
 8005728:	7621      	strb	r1, [r4, #24]
 800572a:	f000 f9d5 	bl	8005ad8 <memchr>
 800572e:	2800      	cmp	r0, #0
 8005730:	d03c      	beq.n	80057ac <_svfiprintf_r+0x1d8>
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <_svfiprintf_r+0x1f8>)
 8005734:	2b00      	cmp	r3, #0
 8005736:	d125      	bne.n	8005784 <_svfiprintf_r+0x1b0>
 8005738:	2207      	movs	r2, #7
 800573a:	9b07      	ldr	r3, [sp, #28]
 800573c:	3307      	adds	r3, #7
 800573e:	4393      	bics	r3, r2
 8005740:	3308      	adds	r3, #8
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	6963      	ldr	r3, [r4, #20]
 8005746:	9a04      	ldr	r2, [sp, #16]
 8005748:	189b      	adds	r3, r3, r2
 800574a:	6163      	str	r3, [r4, #20]
 800574c:	e765      	b.n	800561a <_svfiprintf_r+0x46>
 800574e:	4343      	muls	r3, r0
 8005750:	0035      	movs	r5, r6
 8005752:	2101      	movs	r1, #1
 8005754:	189b      	adds	r3, r3, r2
 8005756:	e7a6      	b.n	80056a6 <_svfiprintf_r+0xd2>
 8005758:	2301      	movs	r3, #1
 800575a:	425b      	negs	r3, r3
 800575c:	e7d0      	b.n	8005700 <_svfiprintf_r+0x12c>
 800575e:	2300      	movs	r3, #0
 8005760:	200a      	movs	r0, #10
 8005762:	001a      	movs	r2, r3
 8005764:	3501      	adds	r5, #1
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	7829      	ldrb	r1, [r5, #0]
 800576a:	1c6e      	adds	r6, r5, #1
 800576c:	3930      	subs	r1, #48	; 0x30
 800576e:	2909      	cmp	r1, #9
 8005770:	d903      	bls.n	800577a <_svfiprintf_r+0x1a6>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0c5      	beq.n	8005702 <_svfiprintf_r+0x12e>
 8005776:	9209      	str	r2, [sp, #36]	; 0x24
 8005778:	e7c3      	b.n	8005702 <_svfiprintf_r+0x12e>
 800577a:	4342      	muls	r2, r0
 800577c:	0035      	movs	r5, r6
 800577e:	2301      	movs	r3, #1
 8005780:	1852      	adds	r2, r2, r1
 8005782:	e7f1      	b.n	8005768 <_svfiprintf_r+0x194>
 8005784:	ab07      	add	r3, sp, #28
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	003a      	movs	r2, r7
 800578a:	0021      	movs	r1, r4
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <_svfiprintf_r+0x1fc>)
 800578e:	9803      	ldr	r0, [sp, #12]
 8005790:	e000      	b.n	8005794 <_svfiprintf_r+0x1c0>
 8005792:	bf00      	nop
 8005794:	9004      	str	r0, [sp, #16]
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	d1d3      	bne.n	8005744 <_svfiprintf_r+0x170>
 800579c:	89bb      	ldrh	r3, [r7, #12]
 800579e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057a0:	065b      	lsls	r3, r3, #25
 80057a2:	d400      	bmi.n	80057a6 <_svfiprintf_r+0x1d2>
 80057a4:	e72d      	b.n	8005602 <_svfiprintf_r+0x2e>
 80057a6:	2001      	movs	r0, #1
 80057a8:	4240      	negs	r0, r0
 80057aa:	e72a      	b.n	8005602 <_svfiprintf_r+0x2e>
 80057ac:	ab07      	add	r3, sp, #28
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	003a      	movs	r2, r7
 80057b2:	0021      	movs	r1, r4
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <_svfiprintf_r+0x1fc>)
 80057b6:	9803      	ldr	r0, [sp, #12]
 80057b8:	f000 f87c 	bl	80058b4 <_printf_i>
 80057bc:	e7ea      	b.n	8005794 <_svfiprintf_r+0x1c0>
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	08005f78 	.word	0x08005f78
 80057c4:	08005f7e 	.word	0x08005f7e
 80057c8:	08005f82 	.word	0x08005f82
 80057cc:	00000000 	.word	0x00000000
 80057d0:	08005511 	.word	0x08005511

080057d4 <_printf_common>:
 80057d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057d6:	0015      	movs	r5, r2
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	688a      	ldr	r2, [r1, #8]
 80057dc:	690b      	ldr	r3, [r1, #16]
 80057de:	000c      	movs	r4, r1
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	4293      	cmp	r3, r2
 80057e4:	da00      	bge.n	80057e8 <_printf_common+0x14>
 80057e6:	0013      	movs	r3, r2
 80057e8:	0022      	movs	r2, r4
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	3243      	adds	r2, #67	; 0x43
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	d001      	beq.n	80057f8 <_printf_common+0x24>
 80057f4:	3301      	adds	r3, #1
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	069b      	lsls	r3, r3, #26
 80057fc:	d502      	bpl.n	8005804 <_printf_common+0x30>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	3302      	adds	r3, #2
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	2306      	movs	r3, #6
 8005808:	0017      	movs	r7, r2
 800580a:	401f      	ands	r7, r3
 800580c:	421a      	tst	r2, r3
 800580e:	d027      	beq.n	8005860 <_printf_common+0x8c>
 8005810:	0023      	movs	r3, r4
 8005812:	3343      	adds	r3, #67	; 0x43
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	4193      	sbcs	r3, r2
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	0692      	lsls	r2, r2, #26
 800581e:	d430      	bmi.n	8005882 <_printf_common+0xae>
 8005820:	0022      	movs	r2, r4
 8005822:	9901      	ldr	r1, [sp, #4]
 8005824:	9800      	ldr	r0, [sp, #0]
 8005826:	9e08      	ldr	r6, [sp, #32]
 8005828:	3243      	adds	r2, #67	; 0x43
 800582a:	47b0      	blx	r6
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d025      	beq.n	800587c <_printf_common+0xa8>
 8005830:	2306      	movs	r3, #6
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	682a      	ldr	r2, [r5, #0]
 8005836:	68e1      	ldr	r1, [r4, #12]
 8005838:	2500      	movs	r5, #0
 800583a:	4003      	ands	r3, r0
 800583c:	2b04      	cmp	r3, #4
 800583e:	d103      	bne.n	8005848 <_printf_common+0x74>
 8005840:	1a8d      	subs	r5, r1, r2
 8005842:	43eb      	mvns	r3, r5
 8005844:	17db      	asrs	r3, r3, #31
 8005846:	401d      	ands	r5, r3
 8005848:	68a3      	ldr	r3, [r4, #8]
 800584a:	6922      	ldr	r2, [r4, #16]
 800584c:	4293      	cmp	r3, r2
 800584e:	dd01      	ble.n	8005854 <_printf_common+0x80>
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	18ed      	adds	r5, r5, r3
 8005854:	2700      	movs	r7, #0
 8005856:	42bd      	cmp	r5, r7
 8005858:	d120      	bne.n	800589c <_printf_common+0xc8>
 800585a:	2000      	movs	r0, #0
 800585c:	e010      	b.n	8005880 <_printf_common+0xac>
 800585e:	3701      	adds	r7, #1
 8005860:	68e3      	ldr	r3, [r4, #12]
 8005862:	682a      	ldr	r2, [r5, #0]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	42bb      	cmp	r3, r7
 8005868:	ddd2      	ble.n	8005810 <_printf_common+0x3c>
 800586a:	0022      	movs	r2, r4
 800586c:	2301      	movs	r3, #1
 800586e:	9901      	ldr	r1, [sp, #4]
 8005870:	9800      	ldr	r0, [sp, #0]
 8005872:	9e08      	ldr	r6, [sp, #32]
 8005874:	3219      	adds	r2, #25
 8005876:	47b0      	blx	r6
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d1f0      	bne.n	800585e <_printf_common+0x8a>
 800587c:	2001      	movs	r0, #1
 800587e:	4240      	negs	r0, r0
 8005880:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005882:	2030      	movs	r0, #48	; 0x30
 8005884:	18e1      	adds	r1, r4, r3
 8005886:	3143      	adds	r1, #67	; 0x43
 8005888:	7008      	strb	r0, [r1, #0]
 800588a:	0021      	movs	r1, r4
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	3145      	adds	r1, #69	; 0x45
 8005890:	7809      	ldrb	r1, [r1, #0]
 8005892:	18a2      	adds	r2, r4, r2
 8005894:	3243      	adds	r2, #67	; 0x43
 8005896:	3302      	adds	r3, #2
 8005898:	7011      	strb	r1, [r2, #0]
 800589a:	e7c1      	b.n	8005820 <_printf_common+0x4c>
 800589c:	0022      	movs	r2, r4
 800589e:	2301      	movs	r3, #1
 80058a0:	9901      	ldr	r1, [sp, #4]
 80058a2:	9800      	ldr	r0, [sp, #0]
 80058a4:	9e08      	ldr	r6, [sp, #32]
 80058a6:	321a      	adds	r2, #26
 80058a8:	47b0      	blx	r6
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d0e6      	beq.n	800587c <_printf_common+0xa8>
 80058ae:	3701      	adds	r7, #1
 80058b0:	e7d1      	b.n	8005856 <_printf_common+0x82>
	...

080058b4 <_printf_i>:
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	b08b      	sub	sp, #44	; 0x2c
 80058b8:	9206      	str	r2, [sp, #24]
 80058ba:	000a      	movs	r2, r1
 80058bc:	3243      	adds	r2, #67	; 0x43
 80058be:	9307      	str	r3, [sp, #28]
 80058c0:	9005      	str	r0, [sp, #20]
 80058c2:	9204      	str	r2, [sp, #16]
 80058c4:	7e0a      	ldrb	r2, [r1, #24]
 80058c6:	000c      	movs	r4, r1
 80058c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058ca:	2a78      	cmp	r2, #120	; 0x78
 80058cc:	d807      	bhi.n	80058de <_printf_i+0x2a>
 80058ce:	2a62      	cmp	r2, #98	; 0x62
 80058d0:	d809      	bhi.n	80058e6 <_printf_i+0x32>
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	d100      	bne.n	80058d8 <_printf_i+0x24>
 80058d6:	e0c1      	b.n	8005a5c <_printf_i+0x1a8>
 80058d8:	2a58      	cmp	r2, #88	; 0x58
 80058da:	d100      	bne.n	80058de <_printf_i+0x2a>
 80058dc:	e08c      	b.n	80059f8 <_printf_i+0x144>
 80058de:	0026      	movs	r6, r4
 80058e0:	3642      	adds	r6, #66	; 0x42
 80058e2:	7032      	strb	r2, [r6, #0]
 80058e4:	e022      	b.n	800592c <_printf_i+0x78>
 80058e6:	0010      	movs	r0, r2
 80058e8:	3863      	subs	r0, #99	; 0x63
 80058ea:	2815      	cmp	r0, #21
 80058ec:	d8f7      	bhi.n	80058de <_printf_i+0x2a>
 80058ee:	f7fa fc0f 	bl	8000110 <__gnu_thumb1_case_shi>
 80058f2:	0016      	.short	0x0016
 80058f4:	fff6001f 	.word	0xfff6001f
 80058f8:	fff6fff6 	.word	0xfff6fff6
 80058fc:	001ffff6 	.word	0x001ffff6
 8005900:	fff6fff6 	.word	0xfff6fff6
 8005904:	fff6fff6 	.word	0xfff6fff6
 8005908:	003600a8 	.word	0x003600a8
 800590c:	fff6009a 	.word	0xfff6009a
 8005910:	00b9fff6 	.word	0x00b9fff6
 8005914:	0036fff6 	.word	0x0036fff6
 8005918:	fff6fff6 	.word	0xfff6fff6
 800591c:	009e      	.short	0x009e
 800591e:	0026      	movs	r6, r4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	3642      	adds	r6, #66	; 0x42
 8005924:	1d11      	adds	r1, r2, #4
 8005926:	6019      	str	r1, [r3, #0]
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	7033      	strb	r3, [r6, #0]
 800592c:	2301      	movs	r3, #1
 800592e:	e0a7      	b.n	8005a80 <_printf_i+0x1cc>
 8005930:	6808      	ldr	r0, [r1, #0]
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	1d0a      	adds	r2, r1, #4
 8005936:	0605      	lsls	r5, r0, #24
 8005938:	d50b      	bpl.n	8005952 <_printf_i+0x9e>
 800593a:	680d      	ldr	r5, [r1, #0]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	2d00      	cmp	r5, #0
 8005940:	da03      	bge.n	800594a <_printf_i+0x96>
 8005942:	232d      	movs	r3, #45	; 0x2d
 8005944:	9a04      	ldr	r2, [sp, #16]
 8005946:	426d      	negs	r5, r5
 8005948:	7013      	strb	r3, [r2, #0]
 800594a:	4b61      	ldr	r3, [pc, #388]	; (8005ad0 <_printf_i+0x21c>)
 800594c:	270a      	movs	r7, #10
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	e01b      	b.n	800598a <_printf_i+0xd6>
 8005952:	680d      	ldr	r5, [r1, #0]
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	0641      	lsls	r1, r0, #25
 8005958:	d5f1      	bpl.n	800593e <_printf_i+0x8a>
 800595a:	b22d      	sxth	r5, r5
 800595c:	e7ef      	b.n	800593e <_printf_i+0x8a>
 800595e:	680d      	ldr	r5, [r1, #0]
 8005960:	6819      	ldr	r1, [r3, #0]
 8005962:	1d08      	adds	r0, r1, #4
 8005964:	6018      	str	r0, [r3, #0]
 8005966:	062e      	lsls	r6, r5, #24
 8005968:	d501      	bpl.n	800596e <_printf_i+0xba>
 800596a:	680d      	ldr	r5, [r1, #0]
 800596c:	e003      	b.n	8005976 <_printf_i+0xc2>
 800596e:	066d      	lsls	r5, r5, #25
 8005970:	d5fb      	bpl.n	800596a <_printf_i+0xb6>
 8005972:	680d      	ldr	r5, [r1, #0]
 8005974:	b2ad      	uxth	r5, r5
 8005976:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <_printf_i+0x21c>)
 8005978:	2708      	movs	r7, #8
 800597a:	9303      	str	r3, [sp, #12]
 800597c:	2a6f      	cmp	r2, #111	; 0x6f
 800597e:	d000      	beq.n	8005982 <_printf_i+0xce>
 8005980:	3702      	adds	r7, #2
 8005982:	0023      	movs	r3, r4
 8005984:	2200      	movs	r2, #0
 8005986:	3343      	adds	r3, #67	; 0x43
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	60a3      	str	r3, [r4, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	db03      	blt.n	800599a <_printf_i+0xe6>
 8005992:	2204      	movs	r2, #4
 8005994:	6821      	ldr	r1, [r4, #0]
 8005996:	4391      	bics	r1, r2
 8005998:	6021      	str	r1, [r4, #0]
 800599a:	2d00      	cmp	r5, #0
 800599c:	d102      	bne.n	80059a4 <_printf_i+0xf0>
 800599e:	9e04      	ldr	r6, [sp, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <_printf_i+0x10a>
 80059a4:	9e04      	ldr	r6, [sp, #16]
 80059a6:	0028      	movs	r0, r5
 80059a8:	0039      	movs	r1, r7
 80059aa:	f7fa fc41 	bl	8000230 <__aeabi_uidivmod>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	3e01      	subs	r6, #1
 80059b2:	5c5b      	ldrb	r3, [r3, r1]
 80059b4:	7033      	strb	r3, [r6, #0]
 80059b6:	002b      	movs	r3, r5
 80059b8:	0005      	movs	r5, r0
 80059ba:	429f      	cmp	r7, r3
 80059bc:	d9f3      	bls.n	80059a6 <_printf_i+0xf2>
 80059be:	2f08      	cmp	r7, #8
 80059c0:	d109      	bne.n	80059d6 <_printf_i+0x122>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	07db      	lsls	r3, r3, #31
 80059c6:	d506      	bpl.n	80059d6 <_printf_i+0x122>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	dc02      	bgt.n	80059d6 <_printf_i+0x122>
 80059d0:	2330      	movs	r3, #48	; 0x30
 80059d2:	3e01      	subs	r6, #1
 80059d4:	7033      	strb	r3, [r6, #0]
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	1b9b      	subs	r3, r3, r6
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	0021      	movs	r1, r4
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	9805      	ldr	r0, [sp, #20]
 80059e4:	9b06      	ldr	r3, [sp, #24]
 80059e6:	aa09      	add	r2, sp, #36	; 0x24
 80059e8:	f7ff fef4 	bl	80057d4 <_printf_common>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d14c      	bne.n	8005a8a <_printf_i+0x1d6>
 80059f0:	2001      	movs	r0, #1
 80059f2:	4240      	negs	r0, r0
 80059f4:	b00b      	add	sp, #44	; 0x2c
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f8:	3145      	adds	r1, #69	; 0x45
 80059fa:	700a      	strb	r2, [r1, #0]
 80059fc:	4a34      	ldr	r2, [pc, #208]	; (8005ad0 <_printf_i+0x21c>)
 80059fe:	9203      	str	r2, [sp, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	ca20      	ldmia	r2!, {r5}
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	0608      	lsls	r0, r1, #24
 8005a0a:	d516      	bpl.n	8005a3a <_printf_i+0x186>
 8005a0c:	07cb      	lsls	r3, r1, #31
 8005a0e:	d502      	bpl.n	8005a16 <_printf_i+0x162>
 8005a10:	2320      	movs	r3, #32
 8005a12:	4319      	orrs	r1, r3
 8005a14:	6021      	str	r1, [r4, #0]
 8005a16:	2710      	movs	r7, #16
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	d1b2      	bne.n	8005982 <_printf_i+0xce>
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	439a      	bics	r2, r3
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	e7ad      	b.n	8005982 <_printf_i+0xce>
 8005a26:	2220      	movs	r2, #32
 8005a28:	6809      	ldr	r1, [r1, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	0022      	movs	r2, r4
 8005a30:	2178      	movs	r1, #120	; 0x78
 8005a32:	3245      	adds	r2, #69	; 0x45
 8005a34:	7011      	strb	r1, [r2, #0]
 8005a36:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <_printf_i+0x220>)
 8005a38:	e7e1      	b.n	80059fe <_printf_i+0x14a>
 8005a3a:	0648      	lsls	r0, r1, #25
 8005a3c:	d5e6      	bpl.n	8005a0c <_printf_i+0x158>
 8005a3e:	b2ad      	uxth	r5, r5
 8005a40:	e7e4      	b.n	8005a0c <_printf_i+0x158>
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	680d      	ldr	r5, [r1, #0]
 8005a46:	1d10      	adds	r0, r2, #4
 8005a48:	6949      	ldr	r1, [r1, #20]
 8005a4a:	6018      	str	r0, [r3, #0]
 8005a4c:	6813      	ldr	r3, [r2, #0]
 8005a4e:	062e      	lsls	r6, r5, #24
 8005a50:	d501      	bpl.n	8005a56 <_printf_i+0x1a2>
 8005a52:	6019      	str	r1, [r3, #0]
 8005a54:	e002      	b.n	8005a5c <_printf_i+0x1a8>
 8005a56:	066d      	lsls	r5, r5, #25
 8005a58:	d5fb      	bpl.n	8005a52 <_printf_i+0x19e>
 8005a5a:	8019      	strh	r1, [r3, #0]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9e04      	ldr	r6, [sp, #16]
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	e7bb      	b.n	80059dc <_printf_i+0x128>
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	1d11      	adds	r1, r2, #4
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	6816      	ldr	r6, [r2, #0]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	0030      	movs	r0, r6
 8005a70:	6862      	ldr	r2, [r4, #4]
 8005a72:	f000 f831 	bl	8005ad8 <memchr>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d001      	beq.n	8005a7e <_printf_i+0x1ca>
 8005a7a:	1b80      	subs	r0, r0, r6
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	7013      	strb	r3, [r2, #0]
 8005a88:	e7a8      	b.n	80059dc <_printf_i+0x128>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	0032      	movs	r2, r6
 8005a8e:	9906      	ldr	r1, [sp, #24]
 8005a90:	9805      	ldr	r0, [sp, #20]
 8005a92:	9d07      	ldr	r5, [sp, #28]
 8005a94:	47a8      	blx	r5
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d0aa      	beq.n	80059f0 <_printf_i+0x13c>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	079b      	lsls	r3, r3, #30
 8005a9e:	d415      	bmi.n	8005acc <_printf_i+0x218>
 8005aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa2:	68e0      	ldr	r0, [r4, #12]
 8005aa4:	4298      	cmp	r0, r3
 8005aa6:	daa5      	bge.n	80059f4 <_printf_i+0x140>
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	e7a3      	b.n	80059f4 <_printf_i+0x140>
 8005aac:	0022      	movs	r2, r4
 8005aae:	2301      	movs	r3, #1
 8005ab0:	9906      	ldr	r1, [sp, #24]
 8005ab2:	9805      	ldr	r0, [sp, #20]
 8005ab4:	9e07      	ldr	r6, [sp, #28]
 8005ab6:	3219      	adds	r2, #25
 8005ab8:	47b0      	blx	r6
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	d098      	beq.n	80059f0 <_printf_i+0x13c>
 8005abe:	3501      	adds	r5, #1
 8005ac0:	68e3      	ldr	r3, [r4, #12]
 8005ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	42ab      	cmp	r3, r5
 8005ac8:	dcf0      	bgt.n	8005aac <_printf_i+0x1f8>
 8005aca:	e7e9      	b.n	8005aa0 <_printf_i+0x1ec>
 8005acc:	2500      	movs	r5, #0
 8005ace:	e7f7      	b.n	8005ac0 <_printf_i+0x20c>
 8005ad0:	08005f89 	.word	0x08005f89
 8005ad4:	08005f9a 	.word	0x08005f9a

08005ad8 <memchr>:
 8005ad8:	b2c9      	uxtb	r1, r1
 8005ada:	1882      	adds	r2, r0, r2
 8005adc:	4290      	cmp	r0, r2
 8005ade:	d101      	bne.n	8005ae4 <memchr+0xc>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	4770      	bx	lr
 8005ae4:	7803      	ldrb	r3, [r0, #0]
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d0fb      	beq.n	8005ae2 <memchr+0xa>
 8005aea:	3001      	adds	r0, #1
 8005aec:	e7f6      	b.n	8005adc <memchr+0x4>

08005aee <memcpy>:
 8005aee:	2300      	movs	r3, #0
 8005af0:	b510      	push	{r4, lr}
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d100      	bne.n	8005af8 <memcpy+0xa>
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	5ccc      	ldrb	r4, [r1, r3]
 8005afa:	54c4      	strb	r4, [r0, r3]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e7f8      	b.n	8005af2 <memcpy+0x4>

08005b00 <memmove>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4288      	cmp	r0, r1
 8005b04:	d902      	bls.n	8005b0c <memmove+0xc>
 8005b06:	188b      	adds	r3, r1, r2
 8005b08:	4298      	cmp	r0, r3
 8005b0a:	d303      	bcc.n	8005b14 <memmove+0x14>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e007      	b.n	8005b20 <memmove+0x20>
 8005b10:	5c8b      	ldrb	r3, [r1, r2]
 8005b12:	5483      	strb	r3, [r0, r2]
 8005b14:	3a01      	subs	r2, #1
 8005b16:	d2fb      	bcs.n	8005b10 <memmove+0x10>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	5ccc      	ldrb	r4, [r1, r3]
 8005b1c:	54c4      	strb	r4, [r0, r3]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d1fa      	bne.n	8005b1a <memmove+0x1a>
 8005b24:	e7f8      	b.n	8005b18 <memmove+0x18>
	...

08005b28 <_free_r>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	0005      	movs	r5, r0
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d010      	beq.n	8005b52 <_free_r+0x2a>
 8005b30:	1f0c      	subs	r4, r1, #4
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da00      	bge.n	8005b3a <_free_r+0x12>
 8005b38:	18e4      	adds	r4, r4, r3
 8005b3a:	0028      	movs	r0, r5
 8005b3c:	f000 f918 	bl	8005d70 <__malloc_lock>
 8005b40:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <_free_r+0x90>)
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <_free_r+0x2c>
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6014      	str	r4, [r2, #0]
 8005b4c:	0028      	movs	r0, r5
 8005b4e:	f000 f917 	bl	8005d80 <__malloc_unlock>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d908      	bls.n	8005b6a <_free_r+0x42>
 8005b58:	6821      	ldr	r1, [r4, #0]
 8005b5a:	1860      	adds	r0, r4, r1
 8005b5c:	4283      	cmp	r3, r0
 8005b5e:	d1f3      	bne.n	8005b48 <_free_r+0x20>
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	1841      	adds	r1, r0, r1
 8005b66:	6021      	str	r1, [r4, #0]
 8005b68:	e7ee      	b.n	8005b48 <_free_r+0x20>
 8005b6a:	001a      	movs	r2, r3
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <_free_r+0x4e>
 8005b72:	42a3      	cmp	r3, r4
 8005b74:	d9f9      	bls.n	8005b6a <_free_r+0x42>
 8005b76:	6811      	ldr	r1, [r2, #0]
 8005b78:	1850      	adds	r0, r2, r1
 8005b7a:	42a0      	cmp	r0, r4
 8005b7c:	d10b      	bne.n	8005b96 <_free_r+0x6e>
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1809      	adds	r1, r1, r0
 8005b82:	1850      	adds	r0, r2, r1
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	4283      	cmp	r3, r0
 8005b88:	d1e0      	bne.n	8005b4c <_free_r+0x24>
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	1841      	adds	r1, r0, r1
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	6053      	str	r3, [r2, #4]
 8005b94:	e7da      	b.n	8005b4c <_free_r+0x24>
 8005b96:	42a0      	cmp	r0, r4
 8005b98:	d902      	bls.n	8005ba0 <_free_r+0x78>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	e7d5      	b.n	8005b4c <_free_r+0x24>
 8005ba0:	6821      	ldr	r1, [r4, #0]
 8005ba2:	1860      	adds	r0, r4, r1
 8005ba4:	4283      	cmp	r3, r0
 8005ba6:	d103      	bne.n	8005bb0 <_free_r+0x88>
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	1841      	adds	r1, r0, r1
 8005bae:	6021      	str	r1, [r4, #0]
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	6054      	str	r4, [r2, #4]
 8005bb4:	e7ca      	b.n	8005b4c <_free_r+0x24>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	2000021c 	.word	0x2000021c

08005bbc <sbrk_aligned>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	4e0f      	ldr	r6, [pc, #60]	; (8005bfc <sbrk_aligned+0x40>)
 8005bc0:	000d      	movs	r5, r1
 8005bc2:	6831      	ldr	r1, [r6, #0]
 8005bc4:	0004      	movs	r4, r0
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d102      	bne.n	8005bd0 <sbrk_aligned+0x14>
 8005bca:	f000 f8bf 	bl	8005d4c <_sbrk_r>
 8005bce:	6030      	str	r0, [r6, #0]
 8005bd0:	0029      	movs	r1, r5
 8005bd2:	0020      	movs	r0, r4
 8005bd4:	f000 f8ba 	bl	8005d4c <_sbrk_r>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d00a      	beq.n	8005bf2 <sbrk_aligned+0x36>
 8005bdc:	2303      	movs	r3, #3
 8005bde:	1cc5      	adds	r5, r0, #3
 8005be0:	439d      	bics	r5, r3
 8005be2:	42a8      	cmp	r0, r5
 8005be4:	d007      	beq.n	8005bf6 <sbrk_aligned+0x3a>
 8005be6:	1a29      	subs	r1, r5, r0
 8005be8:	0020      	movs	r0, r4
 8005bea:	f000 f8af 	bl	8005d4c <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d101      	bne.n	8005bf6 <sbrk_aligned+0x3a>
 8005bf2:	2501      	movs	r5, #1
 8005bf4:	426d      	negs	r5, r5
 8005bf6:	0028      	movs	r0, r5
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	20000220 	.word	0x20000220

08005c00 <_malloc_r>:
 8005c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c02:	2203      	movs	r2, #3
 8005c04:	1ccb      	adds	r3, r1, #3
 8005c06:	4393      	bics	r3, r2
 8005c08:	3308      	adds	r3, #8
 8005c0a:	0006      	movs	r6, r0
 8005c0c:	001f      	movs	r7, r3
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	d232      	bcs.n	8005c78 <_malloc_r+0x78>
 8005c12:	270c      	movs	r7, #12
 8005c14:	42b9      	cmp	r1, r7
 8005c16:	d831      	bhi.n	8005c7c <_malloc_r+0x7c>
 8005c18:	0030      	movs	r0, r6
 8005c1a:	f000 f8a9 	bl	8005d70 <__malloc_lock>
 8005c1e:	4d32      	ldr	r5, [pc, #200]	; (8005ce8 <_malloc_r+0xe8>)
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	001c      	movs	r4, r3
 8005c24:	2c00      	cmp	r4, #0
 8005c26:	d12e      	bne.n	8005c86 <_malloc_r+0x86>
 8005c28:	0039      	movs	r1, r7
 8005c2a:	0030      	movs	r0, r6
 8005c2c:	f7ff ffc6 	bl	8005bbc <sbrk_aligned>
 8005c30:	0004      	movs	r4, r0
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	d11e      	bne.n	8005c74 <_malloc_r+0x74>
 8005c36:	682c      	ldr	r4, [r5, #0]
 8005c38:	0025      	movs	r5, r4
 8005c3a:	2d00      	cmp	r5, #0
 8005c3c:	d14a      	bne.n	8005cd4 <_malloc_r+0xd4>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	0029      	movs	r1, r5
 8005c42:	18e3      	adds	r3, r4, r3
 8005c44:	0030      	movs	r0, r6
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	f000 f880 	bl	8005d4c <_sbrk_r>
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	d143      	bne.n	8005cda <_malloc_r+0xda>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	3703      	adds	r7, #3
 8005c56:	1aff      	subs	r7, r7, r3
 8005c58:	2303      	movs	r3, #3
 8005c5a:	439f      	bics	r7, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	2f0c      	cmp	r7, #12
 8005c60:	d200      	bcs.n	8005c64 <_malloc_r+0x64>
 8005c62:	270c      	movs	r7, #12
 8005c64:	0039      	movs	r1, r7
 8005c66:	0030      	movs	r0, r6
 8005c68:	f7ff ffa8 	bl	8005bbc <sbrk_aligned>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d034      	beq.n	8005cda <_malloc_r+0xda>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	19df      	adds	r7, r3, r7
 8005c74:	6027      	str	r7, [r4, #0]
 8005c76:	e013      	b.n	8005ca0 <_malloc_r+0xa0>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dacb      	bge.n	8005c14 <_malloc_r+0x14>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	2500      	movs	r5, #0
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	0028      	movs	r0, r5
 8005c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	1bd1      	subs	r1, r2, r7
 8005c8a:	d420      	bmi.n	8005cce <_malloc_r+0xce>
 8005c8c:	290b      	cmp	r1, #11
 8005c8e:	d917      	bls.n	8005cc0 <_malloc_r+0xc0>
 8005c90:	19e2      	adds	r2, r4, r7
 8005c92:	6027      	str	r7, [r4, #0]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d111      	bne.n	8005cbc <_malloc_r+0xbc>
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	6011      	str	r1, [r2, #0]
 8005c9e:	6053      	str	r3, [r2, #4]
 8005ca0:	0030      	movs	r0, r6
 8005ca2:	0025      	movs	r5, r4
 8005ca4:	f000 f86c 	bl	8005d80 <__malloc_unlock>
 8005ca8:	2207      	movs	r2, #7
 8005caa:	350b      	adds	r5, #11
 8005cac:	1d23      	adds	r3, r4, #4
 8005cae:	4395      	bics	r5, r2
 8005cb0:	1aea      	subs	r2, r5, r3
 8005cb2:	429d      	cmp	r5, r3
 8005cb4:	d0e5      	beq.n	8005c82 <_malloc_r+0x82>
 8005cb6:	1b5b      	subs	r3, r3, r5
 8005cb8:	50a3      	str	r3, [r4, r2]
 8005cba:	e7e2      	b.n	8005c82 <_malloc_r+0x82>
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	e7ec      	b.n	8005c9a <_malloc_r+0x9a>
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	d101      	bne.n	8005cca <_malloc_r+0xca>
 8005cc6:	602a      	str	r2, [r5, #0]
 8005cc8:	e7ea      	b.n	8005ca0 <_malloc_r+0xa0>
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	e7e8      	b.n	8005ca0 <_malloc_r+0xa0>
 8005cce:	0023      	movs	r3, r4
 8005cd0:	6864      	ldr	r4, [r4, #4]
 8005cd2:	e7a7      	b.n	8005c24 <_malloc_r+0x24>
 8005cd4:	002c      	movs	r4, r5
 8005cd6:	686d      	ldr	r5, [r5, #4]
 8005cd8:	e7af      	b.n	8005c3a <_malloc_r+0x3a>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	0030      	movs	r0, r6
 8005cde:	6033      	str	r3, [r6, #0]
 8005ce0:	f000 f84e 	bl	8005d80 <__malloc_unlock>
 8005ce4:	e7cd      	b.n	8005c82 <_malloc_r+0x82>
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	2000021c 	.word	0x2000021c

08005cec <_realloc_r>:
 8005cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cee:	0007      	movs	r7, r0
 8005cf0:	000e      	movs	r6, r1
 8005cf2:	0014      	movs	r4, r2
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d105      	bne.n	8005d04 <_realloc_r+0x18>
 8005cf8:	0011      	movs	r1, r2
 8005cfa:	f7ff ff81 	bl	8005c00 <_malloc_r>
 8005cfe:	0005      	movs	r5, r0
 8005d00:	0028      	movs	r0, r5
 8005d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	d103      	bne.n	8005d10 <_realloc_r+0x24>
 8005d08:	f7ff ff0e 	bl	8005b28 <_free_r>
 8005d0c:	0025      	movs	r5, r4
 8005d0e:	e7f7      	b.n	8005d00 <_realloc_r+0x14>
 8005d10:	f000 f83e 	bl	8005d90 <_malloc_usable_size_r>
 8005d14:	9001      	str	r0, [sp, #4]
 8005d16:	4284      	cmp	r4, r0
 8005d18:	d803      	bhi.n	8005d22 <_realloc_r+0x36>
 8005d1a:	0035      	movs	r5, r6
 8005d1c:	0843      	lsrs	r3, r0, #1
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	d3ee      	bcc.n	8005d00 <_realloc_r+0x14>
 8005d22:	0021      	movs	r1, r4
 8005d24:	0038      	movs	r0, r7
 8005d26:	f7ff ff6b 	bl	8005c00 <_malloc_r>
 8005d2a:	1e05      	subs	r5, r0, #0
 8005d2c:	d0e8      	beq.n	8005d00 <_realloc_r+0x14>
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	0022      	movs	r2, r4
 8005d32:	429c      	cmp	r4, r3
 8005d34:	d900      	bls.n	8005d38 <_realloc_r+0x4c>
 8005d36:	001a      	movs	r2, r3
 8005d38:	0031      	movs	r1, r6
 8005d3a:	0028      	movs	r0, r5
 8005d3c:	f7ff fed7 	bl	8005aee <memcpy>
 8005d40:	0031      	movs	r1, r6
 8005d42:	0038      	movs	r0, r7
 8005d44:	f7ff fef0 	bl	8005b28 <_free_r>
 8005d48:	e7da      	b.n	8005d00 <_realloc_r+0x14>
	...

08005d4c <_sbrk_r>:
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	b570      	push	{r4, r5, r6, lr}
 8005d50:	4d06      	ldr	r5, [pc, #24]	; (8005d6c <_sbrk_r+0x20>)
 8005d52:	0004      	movs	r4, r0
 8005d54:	0008      	movs	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fc f866 	bl	8001e28 <_sbrk>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d103      	bne.n	8005d68 <_sbrk_r+0x1c>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d000      	beq.n	8005d68 <_sbrk_r+0x1c>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	20000224 	.word	0x20000224

08005d70 <__malloc_lock>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	4802      	ldr	r0, [pc, #8]	; (8005d7c <__malloc_lock+0xc>)
 8005d74:	f000 f814 	bl	8005da0 <__retarget_lock_acquire_recursive>
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	20000228 	.word	0x20000228

08005d80 <__malloc_unlock>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4802      	ldr	r0, [pc, #8]	; (8005d8c <__malloc_unlock+0xc>)
 8005d84:	f000 f80d 	bl	8005da2 <__retarget_lock_release_recursive>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	20000228 	.word	0x20000228

08005d90 <_malloc_usable_size_r>:
 8005d90:	1f0b      	subs	r3, r1, #4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1f18      	subs	r0, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da01      	bge.n	8005d9e <_malloc_usable_size_r+0xe>
 8005d9a:	580b      	ldr	r3, [r1, r0]
 8005d9c:	18c0      	adds	r0, r0, r3
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_acquire_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <__retarget_lock_release_recursive>:
 8005da2:	4770      	bx	lr

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
