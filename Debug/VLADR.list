
VLADR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000088  08005370  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08005370  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010076  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ed  00000000  00000000  00030126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00032718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f8f  00000000  00000000  00033f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102a7  00000000  00000000  0004ae9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c79e  00000000  00000000  0005b146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e78e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  000e7934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000088 	.word	0x20000088
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080050d0 	.word	0x080050d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000008c 	.word	0x2000008c
 80000fc:	080050d0 	.word	0x080050d0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uldivmod>:
 800022c:	2b00      	cmp	r3, #0
 800022e:	d111      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000230:	2a00      	cmp	r2, #0
 8000232:	d10f      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000234:	2900      	cmp	r1, #0
 8000236:	d100      	bne.n	800023a <__aeabi_uldivmod+0xe>
 8000238:	2800      	cmp	r0, #0
 800023a:	d002      	beq.n	8000242 <__aeabi_uldivmod+0x16>
 800023c:	2100      	movs	r1, #0
 800023e:	43c9      	mvns	r1, r1
 8000240:	0008      	movs	r0, r1
 8000242:	b407      	push	{r0, r1, r2}
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <__aeabi_uldivmod+0x24>)
 8000246:	a102      	add	r1, pc, #8	; (adr r1, 8000250 <__aeabi_uldivmod+0x24>)
 8000248:	1840      	adds	r0, r0, r1
 800024a:	9002      	str	r0, [sp, #8]
 800024c:	bd03      	pop	{r0, r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	ffffffd9 	.word	0xffffffd9
 8000254:	b403      	push	{r0, r1}
 8000256:	4668      	mov	r0, sp
 8000258:	b501      	push	{r0, lr}
 800025a:	9802      	ldr	r0, [sp, #8]
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	9b01      	ldr	r3, [sp, #4]
 8000262:	469e      	mov	lr, r3
 8000264:	b002      	add	sp, #8
 8000266:	bc0c      	pop	{r2, r3}
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__udivmoddi4>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	0004      	movs	r4, r0
 800027a:	000d      	movs	r5, r1
 800027c:	4692      	mov	sl, r2
 800027e:	4699      	mov	r9, r3
 8000280:	b083      	sub	sp, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d830      	bhi.n	80002e8 <__udivmoddi4+0x7c>
 8000286:	d02d      	beq.n	80002e4 <__udivmoddi4+0x78>
 8000288:	4649      	mov	r1, r9
 800028a:	4650      	mov	r0, sl
 800028c:	f000 f8ba 	bl	8000404 <__clzdi2>
 8000290:	0029      	movs	r1, r5
 8000292:	0006      	movs	r6, r0
 8000294:	0020      	movs	r0, r4
 8000296:	f000 f8b5 	bl	8000404 <__clzdi2>
 800029a:	1a33      	subs	r3, r6, r0
 800029c:	4698      	mov	r8, r3
 800029e:	3b20      	subs	r3, #32
 80002a0:	469b      	mov	fp, r3
 80002a2:	d433      	bmi.n	800030c <__udivmoddi4+0xa0>
 80002a4:	465a      	mov	r2, fp
 80002a6:	4653      	mov	r3, sl
 80002a8:	4093      	lsls	r3, r2
 80002aa:	4642      	mov	r2, r8
 80002ac:	001f      	movs	r7, r3
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	001e      	movs	r6, r3
 80002b4:	42af      	cmp	r7, r5
 80002b6:	d83a      	bhi.n	800032e <__udivmoddi4+0xc2>
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d100      	bne.n	80002be <__udivmoddi4+0x52>
 80002bc:	e078      	b.n	80003b0 <__udivmoddi4+0x144>
 80002be:	465b      	mov	r3, fp
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5e>
 80002c8:	e075      	b.n	80003b6 <__udivmoddi4+0x14a>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e028      	b.n	8000336 <__udivmoddi4+0xca>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9cf      	bls.n	8000288 <__udivmoddi4+0x1c>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8e>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b003      	add	sp, #12
 8000300:	bcf0      	pop	{r4, r5, r6, r7}
 8000302:	46bb      	mov	fp, r7
 8000304:	46b2      	mov	sl, r6
 8000306:	46a9      	mov	r9, r5
 8000308:	46a0      	mov	r8, r4
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	4642      	mov	r2, r8
 800030e:	2320      	movs	r3, #32
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	4652      	mov	r2, sl
 8000314:	40da      	lsrs	r2, r3
 8000316:	4641      	mov	r1, r8
 8000318:	0013      	movs	r3, r2
 800031a:	464a      	mov	r2, r9
 800031c:	408a      	lsls	r2, r1
 800031e:	0017      	movs	r7, r2
 8000320:	4642      	mov	r2, r8
 8000322:	431f      	orrs	r7, r3
 8000324:	4653      	mov	r3, sl
 8000326:	4093      	lsls	r3, r2
 8000328:	001e      	movs	r6, r3
 800032a:	42af      	cmp	r7, r5
 800032c:	d9c4      	bls.n	80002b8 <__udivmoddi4+0x4c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0d9      	beq.n	80002f0 <__udivmoddi4+0x84>
 800033c:	07fb      	lsls	r3, r7, #31
 800033e:	0872      	lsrs	r2, r6, #1
 8000340:	431a      	orrs	r2, r3
 8000342:	4646      	mov	r6, r8
 8000344:	087b      	lsrs	r3, r7, #1
 8000346:	e00e      	b.n	8000366 <__udivmoddi4+0xfa>
 8000348:	42ab      	cmp	r3, r5
 800034a:	d101      	bne.n	8000350 <__udivmoddi4+0xe4>
 800034c:	42a2      	cmp	r2, r4
 800034e:	d80c      	bhi.n	800036a <__udivmoddi4+0xfe>
 8000350:	1aa4      	subs	r4, r4, r2
 8000352:	419d      	sbcs	r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	1924      	adds	r4, r4, r4
 8000358:	416d      	adcs	r5, r5
 800035a:	2100      	movs	r1, #0
 800035c:	3e01      	subs	r6, #1
 800035e:	1824      	adds	r4, r4, r0
 8000360:	414d      	adcs	r5, r1
 8000362:	2e00      	cmp	r6, #0
 8000364:	d006      	beq.n	8000374 <__udivmoddi4+0x108>
 8000366:	42ab      	cmp	r3, r5
 8000368:	d9ee      	bls.n	8000348 <__udivmoddi4+0xdc>
 800036a:	3e01      	subs	r6, #1
 800036c:	1924      	adds	r4, r4, r4
 800036e:	416d      	adcs	r5, r5
 8000370:	2e00      	cmp	r6, #0
 8000372:	d1f8      	bne.n	8000366 <__udivmoddi4+0xfa>
 8000374:	9800      	ldr	r0, [sp, #0]
 8000376:	9901      	ldr	r1, [sp, #4]
 8000378:	465b      	mov	r3, fp
 800037a:	1900      	adds	r0, r0, r4
 800037c:	4169      	adcs	r1, r5
 800037e:	2b00      	cmp	r3, #0
 8000380:	db24      	blt.n	80003cc <__udivmoddi4+0x160>
 8000382:	002b      	movs	r3, r5
 8000384:	465a      	mov	r2, fp
 8000386:	4644      	mov	r4, r8
 8000388:	40d3      	lsrs	r3, r2
 800038a:	002a      	movs	r2, r5
 800038c:	40e2      	lsrs	r2, r4
 800038e:	001c      	movs	r4, r3
 8000390:	465b      	mov	r3, fp
 8000392:	0015      	movs	r5, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	db2a      	blt.n	80003ee <__udivmoddi4+0x182>
 8000398:	0026      	movs	r6, r4
 800039a:	409e      	lsls	r6, r3
 800039c:	0033      	movs	r3, r6
 800039e:	0026      	movs	r6, r4
 80003a0:	4647      	mov	r7, r8
 80003a2:	40be      	lsls	r6, r7
 80003a4:	0032      	movs	r2, r6
 80003a6:	1a80      	subs	r0, r0, r2
 80003a8:	4199      	sbcs	r1, r3
 80003aa:	9000      	str	r0, [sp, #0]
 80003ac:	9101      	str	r1, [sp, #4]
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x84>
 80003b0:	42a3      	cmp	r3, r4
 80003b2:	d8bc      	bhi.n	800032e <__udivmoddi4+0xc2>
 80003b4:	e783      	b.n	80002be <__udivmoddi4+0x52>
 80003b6:	4642      	mov	r2, r8
 80003b8:	2320      	movs	r3, #32
 80003ba:	2100      	movs	r1, #0
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	2200      	movs	r2, #0
 80003c0:	9100      	str	r1, [sp, #0]
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	2201      	movs	r2, #1
 80003c6:	40da      	lsrs	r2, r3
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	e786      	b.n	80002da <__udivmoddi4+0x6e>
 80003cc:	4642      	mov	r2, r8
 80003ce:	2320      	movs	r3, #32
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	4646      	mov	r6, r8
 80003d6:	409a      	lsls	r2, r3
 80003d8:	0023      	movs	r3, r4
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	4644      	mov	r4, r8
 80003de:	4313      	orrs	r3, r2
 80003e0:	002a      	movs	r2, r5
 80003e2:	40e2      	lsrs	r2, r4
 80003e4:	001c      	movs	r4, r3
 80003e6:	465b      	mov	r3, fp
 80003e8:	0015      	movs	r5, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dad4      	bge.n	8000398 <__udivmoddi4+0x12c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	002f      	movs	r7, r5
 80003f2:	2320      	movs	r3, #32
 80003f4:	0026      	movs	r6, r4
 80003f6:	4097      	lsls	r7, r2
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	40de      	lsrs	r6, r3
 80003fc:	003b      	movs	r3, r7
 80003fe:	4333      	orrs	r3, r6
 8000400:	e7cd      	b.n	800039e <__udivmoddi4+0x132>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__clzdi2>:
 8000404:	b510      	push	{r4, lr}
 8000406:	2900      	cmp	r1, #0
 8000408:	d103      	bne.n	8000412 <__clzdi2+0xe>
 800040a:	f000 f807 	bl	800041c <__clzsi2>
 800040e:	3020      	adds	r0, #32
 8000410:	e002      	b.n	8000418 <__clzdi2+0x14>
 8000412:	0008      	movs	r0, r1
 8000414:	f000 f802 	bl	800041c <__clzsi2>
 8000418:	bd10      	pop	{r4, pc}
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__clzsi2>:
 800041c:	211c      	movs	r1, #28
 800041e:	2301      	movs	r3, #1
 8000420:	041b      	lsls	r3, r3, #16
 8000422:	4298      	cmp	r0, r3
 8000424:	d301      	bcc.n	800042a <__clzsi2+0xe>
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	3910      	subs	r1, #16
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	4298      	cmp	r0, r3
 800042e:	d301      	bcc.n	8000434 <__clzsi2+0x18>
 8000430:	0a00      	lsrs	r0, r0, #8
 8000432:	3908      	subs	r1, #8
 8000434:	091b      	lsrs	r3, r3, #4
 8000436:	4298      	cmp	r0, r3
 8000438:	d301      	bcc.n	800043e <__clzsi2+0x22>
 800043a:	0900      	lsrs	r0, r0, #4
 800043c:	3904      	subs	r1, #4
 800043e:	a202      	add	r2, pc, #8	; (adr r2, 8000448 <__clzsi2+0x2c>)
 8000440:	5c10      	ldrb	r0, [r2, r0]
 8000442:	1840      	adds	r0, r0, r1
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	02020304 	.word	0x02020304
 800044c:	01010101 	.word	0x01010101
	...

08000458 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000458:	b5b0      	push	{r4, r5, r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	000a      	movs	r2, r1
 8000462:	1cfb      	adds	r3, r7, #3
 8000464:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;

	SX1278_hw_SPICommand(module->hw, addr);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	0019      	movs	r1, r3
 8000470:	0010      	movs	r0, r2
 8000472:	f000 fc7a 	bl	8000d6a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	250f      	movs	r5, #15
 800047c:	197c      	adds	r4, r7, r5
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fc95 	bl	8000dae <SX1278_hw_SPIReadByte>
 8000484:	0003      	movs	r3, r0
 8000486:	7023      	strb	r3, [r4, #0]
	SX1278_hw_SetNSS(module->hw, 1);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fc30 	bl	8000cf4 <SX1278_hw_SetNSS>

	return tmp;
 8000494:	197b      	adds	r3, r7, r5
 8000496:	781b      	ldrb	r3, [r3, #0]
}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b004      	add	sp, #16
 800049e:	bdb0      	pop	{r4, r5, r7, pc}

080004a0 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	0008      	movs	r0, r1
 80004aa:	0011      	movs	r1, r2
 80004ac:	1cfb      	adds	r3, r7, #3
 80004ae:	1c02      	adds	r2, r0, #0
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	1cbb      	adds	r3, r7, #2
 80004b4:	1c0a      	adds	r2, r1, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(module->hw, 0);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2100      	movs	r1, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fc18 	bl	8000cf4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6818      	ldr	r0, [r3, #0]
 80004c8:	1cfb      	adds	r3, r7, #3
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	4252      	negs	r2, r2
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	0019      	movs	r1, r3
 80004d6:	f000 fc48 	bl	8000d6a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	1cbb      	adds	r3, r7, #2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f000 fc40 	bl	8000d6a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2101      	movs	r1, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fbff 	bl	8000cf4 <SX1278_hw_SetNSS>
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}

080004fe <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004fe:	b5b0      	push	{r4, r5, r7, lr}
 8000500:	b086      	sub	sp, #24
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	0008      	movs	r0, r1
 8000508:	607a      	str	r2, [r7, #4]
 800050a:	0019      	movs	r1, r3
 800050c:	240b      	movs	r4, #11
 800050e:	193b      	adds	r3, r7, r4
 8000510:	1c02      	adds	r2, r0, #0
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	200a      	movs	r0, #10
 8000516:	183b      	adds	r3, r7, r0
 8000518:	1c0a      	adds	r2, r1, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1) {
 800051c:	183b      	adds	r3, r7, r0
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d932      	bls.n	800058a <SX1278_SPIBurstRead+0x8c>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fbe2 	bl	8000cf4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	193b      	adds	r3, r7, r4
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	0019      	movs	r1, r3
 800053a:	0010      	movs	r0, r2
 800053c:	f000 fc15 	bl	8000d6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000540:	2317      	movs	r3, #23
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e010      	b.n	800056c <SX1278_SPIBurstRead+0x6e>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	2517      	movs	r5, #23
 8000550:	197b      	adds	r3, r7, r5
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	18d4      	adds	r4, r2, r3
 8000558:	0008      	movs	r0, r1
 800055a:	f000 fc28 	bl	8000dae <SX1278_hw_SPIReadByte>
 800055e:	0003      	movs	r3, r0
 8000560:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000562:	197b      	adds	r3, r7, r5
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	197b      	adds	r3, r7, r5
 8000568:	3201      	adds	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	2317      	movs	r3, #23
 800056e:	18fa      	adds	r2, r7, r3
 8000570:	230a      	movs	r3, #10
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	d3e6      	bcc.n	800054a <SX1278_SPIBurstRead+0x4c>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2101      	movs	r1, #1
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fbb6 	bl	8000cf4 <SX1278_hw_SetNSS>
 8000588:	e000      	b.n	800058c <SX1278_SPIBurstRead+0x8e>
		return;
 800058a:	46c0      	nop			; (mov r8, r8)

	}
}
 800058c:	46bd      	mov	sp, r7
 800058e:	b006      	add	sp, #24
 8000590:	bdb0      	pop	{r4, r5, r7, pc}

08000592 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

uint8_t SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000592:	b590      	push	{r4, r7, lr}
 8000594:	b087      	sub	sp, #28
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	0008      	movs	r0, r1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	0019      	movs	r1, r3
 80005a0:	230b      	movs	r3, #11
 80005a2:	18fb      	adds	r3, r7, r3
 80005a4:	1c02      	adds	r2, r0, #0
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	200a      	movs	r0, #10
 80005aa:	183b      	adds	r3, r7, r0
 80005ac:	1c0a      	adds	r2, r1, #0
 80005ae:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1) {
 80005b0:	0002      	movs	r2, r0
 80005b2:	18bb      	adds	r3, r7, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d802      	bhi.n	80005c0 <SX1278_SPIBurstWrite+0x2e>
		return length;
 80005ba:	18bb      	adds	r3, r7, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	e036      	b.n	800062e <SX1278_SPIBurstWrite+0x9c>
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2100      	movs	r1, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fb94 	bl	8000cf4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	230b      	movs	r3, #11
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	4252      	negs	r2, r2
 80005da:	4313      	orrs	r3, r2
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	0019      	movs	r1, r3
 80005e0:	f000 fbc3 	bl	8000d6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005e4:	2317      	movs	r3, #23
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e00f      	b.n	800060e <SX1278_SPIBurstWrite+0x7c>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	2417      	movs	r4, #23
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	18d3      	adds	r3, r2, r3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	0019      	movs	r1, r3
 8000600:	f000 fbb3 	bl	8000d6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000604:	193b      	adds	r3, r7, r4
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	193b      	adds	r3, r7, r4
 800060a:	3201      	adds	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	2317      	movs	r3, #23
 8000610:	18fa      	adds	r2, r7, r3
 8000612:	240a      	movs	r4, #10
 8000614:	193b      	adds	r3, r7, r4
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	d3e7      	bcc.n	80005ee <SX1278_SPIBurstWrite+0x5c>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2101      	movs	r1, #1
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fb65 	bl	8000cf4 <SX1278_hw_SetNSS>
	}

	return length;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	781b      	ldrb	r3, [r3, #0]
}
 800062e:	0018      	movs	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	b007      	add	sp, #28
 8000634:	bd90      	pop	{r4, r7, pc}
	...

08000638 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6178      	str	r0, [r7, #20]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f937 	bl	80008b6 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000648:	200f      	movs	r0, #15
 800064a:	f000 fbdb 	bl	8000e04 <SX1278_hw_DelayMs>

	sx1278_entry_LoRA_mode(module);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	0018      	movs	r0, r3
 8000652:	f000 f941 	bl	80008d8 <sx1278_entry_LoRA_mode>

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0b51      	lsrs	r1, r2, #13
 800065e:	04dd      	lsls	r5, r3, #19
 8000660:	430d      	orrs	r5, r1
 8000662:	04d4      	lsls	r4, r2, #19
 8000664:	4a84      	ldr	r2, [pc, #528]	; (8000878 <SX1278_config+0x240>)
 8000666:	2300      	movs	r3, #0
 8000668:	0020      	movs	r0, r4
 800066a:	0029      	movs	r1, r5
 800066c:	f7ff fdde 	bl	800022c <__aeabi_uldivmod>
 8000670:	0002      	movs	r2, r0
 8000672:	000b      	movs	r3, r1
 8000674:	623a      	str	r2, [r7, #32]
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	6a3a      	ldr	r2, [r7, #32]
 800067e:	0c12      	lsrs	r2, r2, #16
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	431a      	orrs	r2, r3
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	7a3a      	ldrb	r2, [r7, #8]
 8000690:	210c      	movs	r1, #12
 8000692:	2410      	movs	r4, #16
 8000694:	190b      	adds	r3, r1, r4
 8000696:	19db      	adds	r3, r3, r7
 8000698:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	061b      	lsls	r3, r3, #24
 800069e:	6a3a      	ldr	r2, [r7, #32]
 80006a0:	0a12      	lsrs	r2, r2, #8
 80006a2:	603a      	str	r2, [r7, #0]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	603a      	str	r2, [r7, #0]
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	783a      	ldrb	r2, [r7, #0]
 80006b2:	190b      	adds	r3, r1, r4
 80006b4:	19db      	adds	r3, r3, r7
 80006b6:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80006b8:	6a3a      	ldr	r2, [r7, #32]
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	1c13      	adds	r3, r2, #0
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	190b      	adds	r3, r1, r4
 80006c2:	19db      	adds	r3, r3, r7
 80006c4:	709a      	strb	r2, [r3, #2]

	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80006c6:	190b      	adds	r3, r1, r4
 80006c8:	19da      	adds	r2, r3, r7
 80006ca:	6978      	ldr	r0, [r7, #20]
 80006cc:	2303      	movs	r3, #3
 80006ce:	2106      	movs	r1, #6
 80006d0:	f7ff ff5f 	bl	8000592 <SX1278_SPIBurstWrite>
 //	SX1278_SPIWrite(module, RegSyncWord, 0x34); // 0x34 reserverd for LoRaWAN
	SX1278_SPIWrite(module, RegSyncWord, 0x12); // 0x12 reserved for LoRaWAN
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2212      	movs	r2, #18
 80006d8:	2139      	movs	r1, #57	; 0x39
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fee0 	bl	80004a0 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	7c1b      	ldrb	r3, [r3, #16]
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b65      	ldr	r3, [pc, #404]	; (800087c <SX1278_config+0x244>)
 80006e8:	5c9a      	ldrb	r2, [r3, r2]
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2109      	movs	r1, #9
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fed6 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);  //RegOcp,Close Over current protection, 0x0B default
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	220b      	movs	r2, #11
 80006f8:	210b      	movs	r1, #11
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fed0 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);//RegLNA,High & LNA Enable
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2223      	movs	r2, #35	; 0x23
 8000704:	210c      	movs	r1, #12
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff feca 	bl	80004a0 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	7c5b      	ldrb	r3, [r3, #17]
 8000710:	001a      	movs	r2, r3
 8000712:	4b5b      	ldr	r3, [pc, #364]	; (8000880 <SX1278_config+0x248>)
 8000714:	5c9b      	ldrb	r3, [r3, r2]
 8000716:	2b06      	cmp	r3, #6
 8000718:	d159      	bne.n	80007ce <SX1278_config+0x196>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	7c9b      	ldrb	r3, [r3, #18]
 800071e:	001a      	movs	r2, r3
 8000720:	4b58      	ldr	r3, [pc, #352]	; (8000884 <SX1278_config+0x24c>)
 8000722:	5c9b      	ldrb	r3, [r3, r2]
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	7cdb      	ldrb	r3, [r3, #19]
 800072c:	0019      	movs	r1, r3
 800072e:	4b56      	ldr	r3, [pc, #344]	; (8000888 <SX1278_config+0x250>)
 8000730:	5c5b      	ldrb	r3, [r3, r1]
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	211d      	movs	r1, #29
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff feac 	bl	80004a0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	7c5b      	ldrb	r3, [r3, #17]
 800074c:	001a      	movs	r2, r3
 800074e:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <SX1278_config+0x248>)
 8000750:	5c9b      	ldrb	r3, [r3, r2]
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	7d1b      	ldrb	r3, [r3, #20]
 800075a:	0019      	movs	r1, r3
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <SX1278_config+0x254>)
 800075e:	5c5b      	ldrb	r3, [r3, r1]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000768:	3303      	adds	r3, #3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	211e      	movs	r1, #30
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fe95 	bl	80004a0 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000776:	250f      	movs	r5, #15
 8000778:	0026      	movs	r6, r4
 800077a:	192b      	adds	r3, r5, r4
 800077c:	19dc      	adds	r4, r3, r7
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2131      	movs	r1, #49	; 0x31
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fe68 	bl	8000458 <SX1278_SPIRead>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]
		tmp &= 0xF8;
 800078c:	0028      	movs	r0, r5
 800078e:	0034      	movs	r4, r6
 8000790:	1903      	adds	r3, r0, r4
 8000792:	19db      	adds	r3, r3, r7
 8000794:	1902      	adds	r2, r0, r4
 8000796:	19d2      	adds	r2, r2, r7
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	2107      	movs	r1, #7
 800079c:	438a      	bics	r2, r1
 800079e:	701a      	strb	r2, [r3, #0]
		tmp |= 0x05;
 80007a0:	1903      	adds	r3, r0, r4
 80007a2:	19db      	adds	r3, r3, r7
 80007a4:	1902      	adds	r2, r0, r4
 80007a6:	19d2      	adds	r2, r2, r7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	2105      	movs	r1, #5
 80007ac:	430a      	orrs	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, 0x31, tmp);
 80007b0:	1903      	adds	r3, r0, r4
 80007b2:	19db      	adds	r3, r3, r7
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2131      	movs	r1, #49	; 0x31
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fe70 	bl	80004a0 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	220c      	movs	r2, #12
 80007c4:	2137      	movs	r1, #55	; 0x37
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fe6a 	bl	80004a0 <SX1278_SPIWrite>
 80007cc:	e029      	b.n	8000822 <SX1278_config+0x1ea>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	7c9b      	ldrb	r3, [r3, #18]
 80007d2:	001a      	movs	r2, r3
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <SX1278_config+0x24c>)
 80007d6:	5c9b      	ldrb	r3, [r3, r2]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	7cdb      	ldrb	r3, [r3, #19]
 80007e0:	0019      	movs	r1, r3
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <SX1278_config+0x250>)
 80007e4:	5c5b      	ldrb	r3, [r3, r1]
 80007e6:	18db      	adds	r3, r3, r3
 80007e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007ea:	18d3      	adds	r3, r2, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	211d      	movs	r1, #29
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff fe54 	bl	80004a0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	7c5b      	ldrb	r3, [r3, #17]
 80007fc:	001a      	movs	r2, r3
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SX1278_config+0x248>)
 8000800:	5c9b      	ldrb	r3, [r3, r2]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	7d1b      	ldrb	r3, [r3, #20]
 800080a:	0019      	movs	r1, r3
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <SX1278_config+0x254>)
 800080e:	5c5b      	ldrb	r3, [r3, r1]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	b2da      	uxtb	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	211e      	movs	r1, #30
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fe3f 	bl	80004a0 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x08);
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2208      	movs	r2, #8
 8000826:	2126      	movs	r1, #38	; 0x26
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fe39 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	2208      	movs	r2, #8
 8000832:	211f      	movs	r1, #31
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fe33 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fe2d 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 65535); //RegPreambleLsb 8+4=12byte Preamble
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	2121      	movs	r1, #33	; 0x21
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fe27 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	2201      	movs	r2, #1
 8000856:	2141      	movs	r1, #65	; 0x41
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fe21 	bl	80004a0 <SX1278_SPIWrite>
	module->readBytes = 0;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <SX1278_config+0x258>)
 8000862:	2100      	movs	r1, #0
 8000864:	5499      	strb	r1, [r3, r2]
	SX1278_standby(module); //Entry standby mode
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f813 	bl	8000894 <SX1278_standby>
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b00b      	add	sp, #44	; 0x2c
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	01e84800 	.word	0x01e84800
 800087c:	0800520c 	.word	0x0800520c
 8000880:	08005210 	.word	0x08005210
 8000884:	08005218 	.word	0x08005218
 8000888:	08005224 	.word	0x08005224
 800088c:	08005228 	.word	0x08005228
 8000890:	00000217 	.word	0x00000217

08000894 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2209      	movs	r2, #9
 80008a0:	2101      	movs	r1, #1
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fdfc 	bl	80004a0 <SX1278_SPIWrite>
	module->status = STANDBY;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	759a      	strb	r2, [r3, #22]
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2208      	movs	r2, #8
 80008c2:	2101      	movs	r1, #1
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff fdeb 	bl	80004a0 <SX1278_SPIWrite>
	module->status = SLEEP;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	759a      	strb	r2, [r3, #22]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <sx1278_entry_LoRA_mode>:

void sx1278_entry_LoRA_mode(SX1278_t *module) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2288      	movs	r2, #136	; 0x88
 80008e4:	2101      	movs	r1, #1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fdda 	bl	80004a0 <SX1278_SPIWrite>
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	2112      	movs	r1, #18
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff fdcc 	bl	80004a0 <SX1278_SPIWrite>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b002      	add	sp, #8
 800090e:	bd80      	pop	{r7, pc}

08000910 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	240b      	movs	r4, #11
 800091c:	193b      	adds	r3, r7, r4
 800091e:	1c0a      	adds	r2, r1, #0
 8000920:	701a      	strb	r2, [r3, #0]
	uint8_t addr;

	module->packetLength = length;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	193a      	adds	r2, r7, r4
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fe83 	bl	8000638 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2284      	movs	r2, #132	; 0x84
 8000936:	214d      	movs	r1, #77	; 0x4d
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff fdb1 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	2124      	movs	r1, #36	; 0x24
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fdab 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fda5 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	223f      	movs	r2, #63	; 0x3f
 800095a:	2111      	movs	r1, #17
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fd9f 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ffc5 	bl	80008f4 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800096a:	193b      	adds	r3, r7, r4
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2122      	movs	r1, #34	; 0x22
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff fd94 	bl	80004a0 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000978:	2517      	movs	r5, #23
 800097a:	197c      	adds	r4, r7, r5
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	210f      	movs	r1, #15
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff fd69 	bl	8000458 <SX1278_SPIRead>
 8000986:	0003      	movs	r3, r0
 8000988:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800098a:	197b      	adds	r3, r7, r5
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	210d      	movs	r1, #13
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fd84 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	228d      	movs	r2, #141	; 0x8d
 800099c:	2101      	movs	r1, #1
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fd7e 	bl	80004a0 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <SX1278_LoRaEntryRx+0xf0>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	5499      	strb	r1, [r3, r2]

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2118      	movs	r1, #24
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fd51 	bl	8000458 <SX1278_SPIRead>
 80009b6:	0003      	movs	r3, r0
 80009b8:	001a      	movs	r2, r3
 80009ba:	2304      	movs	r3, #4
 80009bc:	4013      	ands	r3, r2
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d104      	bne.n	80009cc <SX1278_LoRaEntryRx+0xbc>
			module->status = RX;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2203      	movs	r2, #3
 80009c6:	759a      	strb	r2, [r3, #22]
			return 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e014      	b.n	80009f6 <SX1278_LoRaEntryRx+0xe6>
		}
		if (--timeout == 0) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d10a      	bne.n	80009ee <SX1278_LoRaEntryRx+0xde>
			SX1278_hw_Reset(module->hw);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 f99f 	bl	8000d20 <SX1278_hw_Reset>
			SX1278_config(module);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff fe27 	bl	8000638 <SX1278_config>
			return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e003      	b.n	80009f6 <SX1278_LoRaEntryRx+0xe6>
		}
		SX1278_hw_DelayMs(1);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fa08 	bl	8000e04 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80009f4:	e7da      	b.n	80009ac <SX1278_LoRaEntryRx+0x9c>
	}
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b006      	add	sp, #24
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	00000217 	.word	0x00000217

08000a04 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3317      	adds	r3, #23
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	2100      	movs	r1, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f003 fef1 	bl	80047fe <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000a1c:	250e      	movs	r5, #14
 8000a1e:	197c      	adds	r4, r7, r5
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2110      	movs	r1, #16
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fd17 	bl	8000458 <SX1278_SPIRead>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	7023      	strb	r3, [r4, #0]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000a2e:	197b      	adds	r3, r7, r5
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	210d      	movs	r1, #13
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fd32 	bl	80004a0 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7c5b      	ldrb	r3, [r3, #17]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <SX1278_LoRaRxPacket+0x4c>
			packet_size = module->packetLength;
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7d52      	ldrb	r2, [r2, #21]
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e008      	b.n	8000a62 <SX1278_LoRaRxPacket+0x5e>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fc      	adds	r4, r7, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2113      	movs	r1, #19
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fcfd 	bl	8000458 <SX1278_SPIRead>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	7023      	strb	r3, [r4, #0]
		}

	//	SX1278_SPIBurstRead2(module);
		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3317      	adds	r3, #23
 8000a66:	001a      	movs	r2, r3
 8000a68:	240f      	movs	r4, #15
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	2100      	movs	r1, #0
 8000a72:	f7ff fd44 	bl	80004fe <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	193a      	adds	r2, r7, r4
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <SX1278_LoRaRxPacket+0x94>)
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	545a      	strb	r2, [r3, r1]
		SX1278_clearLoRaIrq(module);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff ff36 	bl	80008f4 <SX1278_clearLoRaIrq>

	return module->readBytes;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <SX1278_LoRaRxPacket+0x94>)
 8000a8c:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bdb0      	pop	{r4, r5, r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	00000217 	.word	0x00000217

08000a9c <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	240b      	movs	r4, #11
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	1c0a      	adds	r2, r1, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	193a      	adds	r2, r7, r4
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fdbd 	bl	8000638 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2287      	movs	r2, #135	; 0x87
 8000ac2:	214d      	movs	r1, #77	; 0x4d
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fceb 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	2124      	movs	r1, #36	; 0x24
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fce5 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2241      	movs	r2, #65	; 0x41
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fcdf 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff ff05 	bl	80008f4 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	22f7      	movs	r2, #247	; 0xf7
 8000aee:	2111      	movs	r1, #17
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fcd5 	bl	80004a0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2122      	movs	r1, #34	; 0x22
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fcce 	bl	80004a0 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000b04:	2517      	movs	r5, #23
 8000b06:	197c      	adds	r4, r7, r5
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	210e      	movs	r1, #14
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fca3 	bl	8000458 <SX1278_SPIRead>
 8000b12:	0003      	movs	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	210d      	movs	r1, #13
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fcbe 	bl	80004a0 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000b24:	2516      	movs	r5, #22
 8000b26:	197c      	adds	r4, r7, r5
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2122      	movs	r1, #34	; 0x22
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fc93 	bl	8000458 <SX1278_SPIRead>
 8000b32:	0003      	movs	r3, r0
 8000b34:	7023      	strb	r3, [r4, #0]
		if (temp == length) {
 8000b36:	197a      	adds	r2, r7, r5
 8000b38:	230b      	movs	r3, #11
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d104      	bne.n	8000b4e <SX1278_LoRaEntryTx+0xb2>
			module->status = TX;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2202      	movs	r2, #2
 8000b48:	759a      	strb	r2, [r3, #22]
			return 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SX1278_LoRaEntryTx+0xd2>
		}

		if (--timeout == 0) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e4      	bne.n	8000b24 <SX1278_LoRaEntryTx+0x88>
			SX1278_hw_Reset(module->hw);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f8de 	bl	8000d20 <SX1278_hw_Reset>
			SX1278_config(module);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff fd66 	bl	8000638 <SX1278_config>
			return 0;
 8000b6c:	2300      	movs	r3, #0
		}
	}
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b006      	add	sp, #24
 8000b74:	bdb0      	pop	{r4, r5, r7, pc}

08000b76 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	701a      	strb	r2, [r3, #0]


	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff fcff 	bl	8000592 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	228b      	movs	r2, #139	; 0x8b
 8000b98:	2101      	movs	r1, #1
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fc80 	bl	80004a0 <SX1278_SPIWrite>

	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 f939 	bl	8000e1c <SX1278_hw_GetDIO0>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d00e      	beq.n	8000bcc <SX1278_LoRaTxPacket+0x56>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2112      	movs	r1, #18
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fc50 	bl	8000458 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fe9a 	bl	80008f4 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fe66 	bl	8000894 <SX1278_standby>
			return 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e014      	b.n	8000bf6 <SX1278_LoRaTxPacket+0x80>
		}

		if (--timeout == 0) {
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10a      	bne.n	8000bee <SX1278_LoRaTxPacket+0x78>
			SX1278_hw_Reset(module->hw);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 f89f 	bl	8000d20 <SX1278_hw_Reset>
			SX1278_config(module);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fd27 	bl	8000638 <SX1278_config>
			return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e003      	b.n	8000bf6 <SX1278_LoRaTxPacket+0x80>
		}
		SX1278_hw_DelayMs(10);
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f000 f908 	bl	8000e04 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000bf4:	e7d4      	b.n	8000ba0 <SX1278_LoRaTxPacket+0x2a>
	}
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	603a      	str	r2, [r7, #0]
 8000c08:	607b      	str	r3, [r7, #4]
	SX1278_hw_init(module->hw);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f85a 	bl	8000cc8 <SX1278_hw_init>
	module->frequency = frequency;
 8000c14:	68f9      	ldr	r1, [r7, #12]
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	608a      	str	r2, [r1, #8]
 8000c1c:	60cb      	str	r3, [r1, #12]
	module->power = power;
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	2318      	movs	r3, #24
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	7413      	strb	r3, [r2, #16]
	module->LoRa_SF = LoRa_SF;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	221c      	movs	r2, #28
 8000c2c:	18ba      	adds	r2, r7, r2
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2220      	movs	r2, #32
 8000c36:	18ba      	adds	r2, r7, r2
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2224      	movs	r2, #36	; 0x24
 8000c40:	18ba      	adds	r2, r7, r2
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2228      	movs	r2, #40	; 0x28
 8000c4a:	18ba      	adds	r2, r7, r2
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	222c      	movs	r2, #44	; 0x2c
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fceb 	bl	8000638 <SX1278_config>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
	if (length != module->readBytes)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <SX1278_read+0x58>)
 8000c7e:	5c9b      	ldrb	r3, [r3, r2]
 8000c80:	1dfa      	adds	r2, r7, #7
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d004      	beq.n	8000c92 <SX1278_read+0x26>
		length = module->readBytes;
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <SX1278_read+0x58>)
 8000c8e:	5c52      	ldrb	r2, [r2, r1]
 8000c90:	701a      	strb	r2, [r3, #0]
	memcpy(rxBuf, module->rxBuffer, length);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3317      	adds	r3, #23
 8000c96:	0019      	movs	r1, r3
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f003 fda4 	bl	80047ec <memcpy>
	rxBuf[length] = '\0';
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <SX1278_read+0x58>)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]
	return length;
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b004      	add	sp, #16
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	00000217 	.word	0x00000217

08000cc8 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 f80d 	bl	8000cf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6858      	ldr	r0, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	f001 fd77 	bl	80027da <HAL_GPIO_WritePin>
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6958      	ldr	r0, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	b299      	uxth	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	425a      	negs	r2, r3
 8000d0e:	4153      	adcs	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	001a      	movs	r2, r3
 8000d14:	f001 fd61 	bl	80027da <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ffe1 	bl	8000cf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6858      	ldr	r0, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f001 fd4b 	bl	80027da <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 f85d 	bl	8000e04 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6858      	ldr	r0, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	0019      	movs	r1, r3
 8000d58:	f001 fd3f 	bl	80027da <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000d5c:	2064      	movs	r0, #100	; 0x64
 8000d5e:	f000 f851 	bl	8000e04 <SX1278_hw_DelayMs>
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	000a      	movs	r2, r1
 8000d74:	1cfb      	adds	r3, r7, #3
 8000d76:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(hw, 0);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ffb9 	bl	8000cf4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6998      	ldr	r0, [r3, #24]
 8000d86:	23fa      	movs	r3, #250	; 0xfa
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	1cf9      	adds	r1, r7, #3
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f002 fc25 	bl	80035dc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 ff49 	bl	8003c30 <HAL_SPI_GetState>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d1f7      	bne.n	8000d94 <SX1278_hw_SPICommand+0x2a>
		;
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}

08000dae <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000dae:	b5b0      	push	{r4, r5, r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af02      	add	r7, sp, #8
 8000db4:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000db6:	240f      	movs	r4, #15
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8000dbe:	250e      	movs	r5, #14
 8000dc0:	197b      	adds	r3, r7, r5
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(hw, 0);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff92 	bl	8000cf4 <SX1278_hw_SetNSS>
	//HAL_SPI_Transmit (hw->spi, &address, 1, 100);  // send address
//	HAL_SPI_Receive (hw->spi, &rxByte, 1, 100);  // receive 1 bytes data

	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6998      	ldr	r0, [r3, #24]
 8000dd4:	197a      	adds	r2, r7, r5
 8000dd6:	1939      	adds	r1, r7, r4
 8000dd8:	23fa      	movs	r3, #250	; 0xfa
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2301      	movs	r3, #1
 8000de0:	f002 fd54 	bl	800388c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f002 ff20 	bl	8003c30 <HAL_SPI_GetState>
 8000df0:	0003      	movs	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d1f7      	bne.n	8000de6 <SX1278_hw_SPIReadByte+0x38>
		;
	return rxByte;
 8000df6:	230e      	movs	r3, #14
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bdb0      	pop	{r4, r5, r7, pc}

08000e04 <SX1278_hw_DelayMs>:
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
		;
	SX1278_hw_SetNSS(hw, 1);
}

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fe0c 	bl	8001a2c <HAL_Delay>
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	0019      	movs	r1, r3
 8000e30:	0010      	movs	r0, r2
 8000e32:	f001 fcb5 	bl	80027a0 <HAL_GPIO_ReadPin>
 8000e36:	0003      	movs	r3, r0
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	425a      	negs	r2, r3
 8000e3c:	4153      	adcs	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <MX_GPIO_Init>:
#include "gpio.h"


void MX_GPIO_Init(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	240c      	movs	r4, #12
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	2314      	movs	r3, #20
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f003 fcd0 	bl	80047fe <memset>
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e62:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e94:	2104      	movs	r1, #4
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <MX_GPIO_Init+0x104>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|DIO3_Pin, GPIO_PIN_RESET);
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <MX_GPIO_Init+0x108>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2107      	movs	r1, #7
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fc94 	bl	80027da <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	0059      	lsls	r1, r3, #1
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	2200      	movs	r2, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fc8c 	bl	80027da <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_GPIO_Init+0x10c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f001 fc86 	bl	80027da <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin DIO3_Pin */
	  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|DIO3_Pin;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <MX_GPIO_Init+0x108>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f001 faf3 	bl	80024d8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DIO1_Pin */
	  GPIO_InitStruct.Pin = DIO1_Pin;
 8000ef2:	0021      	movs	r1, r4
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	000c      	movs	r4, r1
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2201      	movs	r2, #1
 8000f02:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8000f10:	193a      	adds	r2, r7, r4
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 fadd 	bl	80024d8 <HAL_GPIO_Init>

	  /*Configure GPIO pin : BUSSY_Pin */
	  GPIO_InitStruct.Pin = BUSSY_Pin;
 8000f1e:	0021      	movs	r1, r4
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <MX_GPIO_Init+0x10c>)
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	0010      	movs	r0, r2
 8000f40:	f001 faca 	bl	80024d8 <HAL_GPIO_Init>

}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b009      	add	sp, #36	; 0x24
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	50000400 	.word	0x50000400
 8000f54:	50000800 	.word	0x50000800

08000f58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b08b      	sub	sp, #44	; 0x2c
 8000f5c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f5e:	f000 fcdf 	bl	8001920 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f62:	f000 f9d9 	bl	8001318 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f66:	f7ff ff6f 	bl	8000e48 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f6a:	f000 fa1d 	bl	80013a8 <MX_ADC1_Init>
	MX_SPI1_Init();
 8000f6e:	f000 fa87 	bl	8001480 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000f72:	f000 fc67 	bl	8001844 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	master = 0;
 8000f76:	4bca      	ldr	r3, [pc, #808]	; (80012a0 <main+0x348>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	word = 0;
 8000f7c:	4bc9      	ldr	r3, [pc, #804]	; (80012a4 <main+0x34c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
	VLAD_ID = 0x04;
 8000f82:	4bc9      	ldr	r3, [pc, #804]	; (80012a8 <main+0x350>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_mode = 0x00;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
	//initialize LoRa module
	SX1278_hw.dio0.port = BUSSY_GPIO_Port;
 8000f90:	4bc6      	ldr	r3, [pc, #792]	; (80012ac <main+0x354>)
 8000f92:	4ac7      	ldr	r2, [pc, #796]	; (80012b0 <main+0x358>)
 8000f94:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = BUSSY_Pin;
 8000f96:	4bc5      	ldr	r3, [pc, #788]	; (80012ac <main+0x354>)
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8000f9c:	4bc3      	ldr	r3, [pc, #780]	; (80012ac <main+0x354>)
 8000f9e:	4ac5      	ldr	r2, [pc, #788]	; (80012b4 <main+0x35c>)
 8000fa0:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = LORA_NSS_Pin;
 8000fa2:	4bc2      	ldr	r3, [pc, #776]	; (80012ac <main+0x354>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8000fa8:	4bc0      	ldr	r3, [pc, #768]	; (80012ac <main+0x354>)
 8000faa:	4ac2      	ldr	r2, [pc, #776]	; (80012b4 <main+0x35c>)
 8000fac:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = LORA_RST_Pin;
 8000fae:	4bbf      	ldr	r3, [pc, #764]	; (80012ac <main+0x354>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000fb4:	4bbd      	ldr	r3, [pc, #756]	; (80012ac <main+0x354>)
 8000fb6:	4ac0      	ldr	r2, [pc, #768]	; (80012b8 <main+0x360>)
 8000fb8:	619a      	str	r2, [r3, #24]
	SX1278.hw = &SX1278_hw;
 8000fba:	4bc0      	ldr	r3, [pc, #768]	; (80012bc <main+0x364>)
 8000fbc:	4abb      	ldr	r2, [pc, #748]	; (80012ac <main+0x354>)
 8000fbe:	601a      	str	r2, [r3, #0]

	uart_send("Configuring LoRa module\r\n");
 8000fc0:	4bbf      	ldr	r3, [pc, #764]	; (80012c0 <main+0x368>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 fc68 	bl	8001898 <uart_send>
	SX1278_init(&SX1278, 150000000, SX1278_POWER_17DBM, SX1278_LORA_SF_10,
 8000fc8:	4abe      	ldr	r2, [pc, #760]	; (80012c4 <main+0x36c>)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	49bb      	ldr	r1, [pc, #748]	; (80012bc <main+0x364>)
 8000fce:	200a      	movs	r0, #10
 8000fd0:	9005      	str	r0, [sp, #20]
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	9004      	str	r0, [sp, #16]
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	9003      	str	r0, [sp, #12]
 8000fda:	2006      	movs	r0, #6
 8000fdc:	9002      	str	r0, [sp, #8]
 8000fde:	2004      	movs	r0, #4
 8000fe0:	9001      	str	r0, [sp, #4]
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	9000      	str	r0, [sp, #0]
 8000fe6:	0008      	movs	r0, r1
 8000fe8:	f7ff fe09 	bl	8000bfe <SX1278_init>
	SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_6, SX1278_LORA_CRC_DIS, 10);
	uart_send("Done configuring LoRaModule\r\n");
 8000fec:	4bb6      	ldr	r3, [pc, #728]	; (80012c8 <main+0x370>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fc52 	bl	8001898 <uart_send>

	if (master == 1) {
 8000ff4:	4baa      	ldr	r3, [pc, #680]	; (80012a0 <main+0x348>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d113      	bne.n	8001024 <main+0xcc>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000ffc:	23fa      	movs	r3, #250	; 0xfa
 8000ffe:	00da      	lsls	r2, r3, #3
 8001000:	4bae      	ldr	r3, [pc, #696]	; (80012bc <main+0x364>)
 8001002:	2110      	movs	r1, #16
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fd49 	bl	8000a9c <SX1278_LoRaEntryTx>
 800100a:	0003      	movs	r3, r0
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4baf      	ldr	r3, [pc, #700]	; (80012cc <main+0x374>)
 8001010:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_SET);
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	0059      	lsls	r1, r3, #1
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	2201      	movs	r2, #1
 800101c:	0018      	movs	r0, r3
 800101e:	f001 fbdc 	bl	80027da <HAL_GPIO_WritePin>
 8001022:	e017      	b.n	8001054 <main+0xfc>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 9, 2000);
 8001024:	23fa      	movs	r3, #250	; 0xfa
 8001026:	00da      	lsls	r2, r3, #3
 8001028:	4ba4      	ldr	r3, [pc, #656]	; (80012bc <main+0x364>)
 800102a:	2109      	movs	r1, #9
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fc6f 	bl	8000910 <SX1278_LoRaEntryRx>
 8001032:	0003      	movs	r3, r0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <main+0x374>)
 8001038:	701a      	strb	r2, [r3, #0]
		if (ret == 1)
 800103a:	4ba4      	ldr	r3, [pc, #656]	; (80012cc <main+0x374>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d104      	bne.n	800104c <main+0xf4>
			uart_send("Rx Mode\r\n");
 8001042:	4ba3      	ldr	r3, [pc, #652]	; (80012d0 <main+0x378>)
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fc27 	bl	8001898 <uart_send>
 800104a:	e003      	b.n	8001054 <main+0xfc>
		else
			uart_send("TimeOut!\r\n");
 800104c:	4ba1      	ldr	r3, [pc, #644]	; (80012d4 <main+0x37c>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fc22 	bl	8001898 <uart_send>
	}

	int rssi_lora = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
	int rssi = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (master == 1) {
 800105c:	4b90      	ldr	r3, [pc, #576]	; (80012a0 <main+0x348>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d000      	beq.n	8001066 <main+0x10e>
 8001064:	e077      	b.n	8001156 <main+0x1fe>

			uart_send("Sending package...");
 8001066:	4b9c      	ldr	r3, [pc, #624]	; (80012d8 <main+0x380>)
 8001068:	0018      	movs	r0, r3
 800106a:	f000 fc15 	bl	8001898 <uart_send>

			SX1278_init(&SX1278, 170000000, SX1278_POWER_17DBM,
 800106e:	4a9b      	ldr	r2, [pc, #620]	; (80012dc <main+0x384>)
 8001070:	2300      	movs	r3, #0
 8001072:	4992      	ldr	r1, [pc, #584]	; (80012bc <main+0x364>)
 8001074:	200a      	movs	r0, #10
 8001076:	9005      	str	r0, [sp, #20]
 8001078:	2001      	movs	r0, #1
 800107a:	9004      	str	r0, [sp, #16]
 800107c:	2001      	movs	r0, #1
 800107e:	9003      	str	r0, [sp, #12]
 8001080:	2006      	movs	r0, #6
 8001082:	9002      	str	r0, [sp, #8]
 8001084:	2004      	movs	r0, #4
 8001086:	9001      	str	r0, [sp, #4]
 8001088:	2001      	movs	r0, #1
 800108a:	9000      	str	r0, [sp, #0]
 800108c:	0008      	movs	r0, r1
 800108e:	f7ff fdb6 	bl	8000bfe <SX1278_init>
					SX1278_LORA_SF_10,
					SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_6,
					SX1278_LORA_CRC_DIS,10);

			ret = SX1278_LoRaEntryTx(&SX1278, sizeof(response), 2000);
 8001092:	23fa      	movs	r3, #250	; 0xfa
 8001094:	00da      	lsls	r2, r3, #3
 8001096:	4b89      	ldr	r3, [pc, #548]	; (80012bc <main+0x364>)
 8001098:	2115      	movs	r1, #21
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff fcfe 	bl	8000a9c <SX1278_LoRaEntryTx>
 80010a0:	0003      	movs	r3, r0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b89      	ldr	r3, [pc, #548]	; (80012cc <main+0x374>)
 80010a6:	701a      	strb	r2, [r3, #0]
			if (ret == 1) {
 80010a8:	4b88      	ldr	r3, [pc, #544]	; (80012cc <main+0x374>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d104      	bne.n	80010ba <main+0x162>
				uart_send("EntryTx Ok!... \r\n");
 80010b0:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <main+0x388>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 fbf0 	bl	8001898 <uart_send>
 80010b8:	e003      	b.n	80010c2 <main+0x16a>
			} else {
				uart_send("EntryTx failed, timeout reset!\r\n");
 80010ba:	4b8a      	ldr	r3, [pc, #552]	; (80012e4 <main+0x38c>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 fbeb 	bl	8001898 <uart_send>
			}

			for (uint8_t i = 0; i < sizeof(response); i++) {
 80010c2:	230e      	movs	r3, #14
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e015      	b.n	80010f8 <main+0x1a0>
				sprintf(str, "%02x", response[i]);
 80010cc:	240e      	movs	r4, #14
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4a85      	ldr	r2, [pc, #532]	; (80012e8 <main+0x390>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	001a      	movs	r2, r3
 80010d8:	4984      	ldr	r1, [pc, #528]	; (80012ec <main+0x394>)
 80010da:	4b85      	ldr	r3, [pc, #532]	; (80012f0 <main+0x398>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f003 fb97 	bl	8004810 <siprintf>
				HAL_UART_Transmit(&huart1, str, 2, 50);
 80010e2:	4983      	ldr	r1, [pc, #524]	; (80012f0 <main+0x398>)
 80010e4:	4883      	ldr	r0, [pc, #524]	; (80012f4 <main+0x39c>)
 80010e6:	2332      	movs	r3, #50	; 0x32
 80010e8:	2202      	movs	r2, #2
 80010ea:	f002 ff79 	bl	8003fe0 <HAL_UART_Transmit>
			for (uint8_t i = 0; i < sizeof(response); i++) {
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	3201      	adds	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	230e      	movs	r3, #14
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b14      	cmp	r3, #20
 8001100:	d9e4      	bls.n	80010cc <main+0x174>
			}
			HAL_UART_Transmit(&huart1,"\r\n", 2, 50);
 8001102:	497d      	ldr	r1, [pc, #500]	; (80012f8 <main+0x3a0>)
 8001104:	487b      	ldr	r0, [pc, #492]	; (80012f4 <main+0x39c>)
 8001106:	2332      	movs	r3, #50	; 0x32
 8001108:	2202      	movs	r2, #2
 800110a:	f002 ff69 	bl	8003fe0 <HAL_UART_Transmit>


			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) response,
 800110e:	23fa      	movs	r3, #250	; 0xfa
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4975      	ldr	r1, [pc, #468]	; (80012e8 <main+0x390>)
 8001114:	4869      	ldr	r0, [pc, #420]	; (80012bc <main+0x364>)
 8001116:	2215      	movs	r2, #21
 8001118:	f7ff fd2d 	bl	8000b76 <SX1278_LoRaTxPacket>
 800111c:	0003      	movs	r3, r0
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <main+0x374>)
 8001122:	701a      	strb	r2, [r3, #0]
					sizeof(response), 1000);

			if (ret >= 1) {
 8001124:	4b69      	ldr	r3, [pc, #420]	; (80012cc <main+0x374>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00c      	beq.n	8001146 <main+0x1ee>
				sprintf(str, "%d bytes sent... \r\n", ret);
 800112c:	4b67      	ldr	r3, [pc, #412]	; (80012cc <main+0x374>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	4972      	ldr	r1, [pc, #456]	; (80012fc <main+0x3a4>)
 8001134:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <main+0x398>)
 8001136:	0018      	movs	r0, r3
 8001138:	f003 fb6a 	bl	8004810 <siprintf>
				uart_send(str);
 800113c:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <main+0x398>)
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fbaa 	bl	8001898 <uart_send>
 8001144:	e003      	b.n	800114e <main+0x1f6>
			} else {
				uart_send("Sent Fail, timeout reset!\r\n");
 8001146:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <main+0x3a8>)
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fba5 	bl	8001898 <uart_send>
			}
			master = 0;
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <main+0x348>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e782      	b.n	800105c <main+0x104>

		} else {

			if (!is_rx_mode) {
 8001156:	240f      	movs	r4, #15
 8001158:	193b      	adds	r3, r7, r4
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12c      	bne.n	80011ba <main+0x262>
				SX1278_init(&SX1278, 150000000, SX1278_POWER_17DBM,
 8001160:	4a58      	ldr	r2, [pc, #352]	; (80012c4 <main+0x36c>)
 8001162:	2300      	movs	r3, #0
 8001164:	4955      	ldr	r1, [pc, #340]	; (80012bc <main+0x364>)
 8001166:	200a      	movs	r0, #10
 8001168:	9005      	str	r0, [sp, #20]
 800116a:	2001      	movs	r0, #1
 800116c:	9004      	str	r0, [sp, #16]
 800116e:	2001      	movs	r0, #1
 8001170:	9003      	str	r0, [sp, #12]
 8001172:	2006      	movs	r0, #6
 8001174:	9002      	str	r0, [sp, #8]
 8001176:	2004      	movs	r0, #4
 8001178:	9001      	str	r0, [sp, #4]
 800117a:	2001      	movs	r0, #1
 800117c:	9000      	str	r0, [sp, #0]
 800117e:	0008      	movs	r0, r1
 8001180:	f7ff fd3d 	bl	8000bfe <SX1278_init>
						SX1278_LORA_SF_10,
						SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_6,
						SX1278_LORA_CRC_DIS, 10);
				ret = SX1278_LoRaEntryRx(&SX1278, 9, 2000);
 8001184:	23fa      	movs	r3, #250	; 0xfa
 8001186:	00da      	lsls	r2, r3, #3
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <main+0x364>)
 800118a:	2109      	movs	r1, #9
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fbbf 	bl	8000910 <SX1278_LoRaEntryRx>
 8001192:	0003      	movs	r3, r0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <main+0x374>)
 8001198:	701a      	strb	r2, [r3, #0]
				if (ret == 1) {
 800119a:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <main+0x374>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <main+0x25a>
					uart_send("Rx Mode\r\n");
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <main+0x378>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 fb77 	bl	8001898 <uart_send>
					is_rx_mode = 0x01;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e003      	b.n	80011ba <main+0x262>
				} else
					uart_send("TimeOut!\r\n");
 80011b2:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <main+0x37c>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fb6f 	bl	8001898 <uart_send>
			}

			if (SX1278_hw_GetDIO0(SX1278.hw)) {
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <main+0x364>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fe2c 	bl	8000e1c <SX1278_hw_GetDIO0>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d100      	bne.n	80011ca <main+0x272>
 80011c8:	e748      	b.n	800105c <main+0x104>
				uart_send("Slave Receiving package...");
 80011ca:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <main+0x3ac>)
 80011cc:	0018      	movs	r0, r3
 80011ce:	f000 fb63 	bl	8001898 <uart_send>
				ret = SX1278_LoRaRxPacket(&SX1278);
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <main+0x364>)
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fc15 	bl	8000a04 <SX1278_LoRaRxPacket>
 80011da:	0003      	movs	r3, r0
 80011dc:	001a      	movs	r2, r3
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <main+0x374>)
 80011e0:	701a      	strb	r2, [r3, #0]
				sprintf(str, "Received: %d bytes...", ret);
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <main+0x374>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	001a      	movs	r2, r3
 80011e8:	4947      	ldr	r1, [pc, #284]	; (8001308 <main+0x3b0>)
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <main+0x398>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f003 fb0f 	bl	8004810 <siprintf>
				uart_send(str);
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <main+0x398>)
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 fb4f 	bl	8001898 <uart_send>
				if (ret > 0) {
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <main+0x374>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d049      	beq.n	8001296 <main+0x33e>
					SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <main+0x374>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4941      	ldr	r1, [pc, #260]	; (800130c <main+0x3b4>)
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <main+0x364>)
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff fd2e 	bl	8000c6c <SX1278_read>
					sprintf(str, "Content: ", ret);
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <main+0x374>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	493e      	ldr	r1, [pc, #248]	; (8001310 <main+0x3b8>)
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <main+0x398>)
 800121a:	0018      	movs	r0, r3
 800121c:	f003 faf8 	bl	8004810 <siprintf>
					uart_send(str);
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <main+0x398>)
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fb38 	bl	8001898 <uart_send>
					uart_send("\r\n");
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <main+0x3a0>)
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fb34 	bl	8001898 <uart_send>
					for (uint8_t i = 0; i < ret; i++) {
 8001230:	230d      	movs	r3, #13
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e015      	b.n	8001266 <main+0x30e>
						sprintf(str, "%02x ", buffer[i]);
 800123a:	240d      	movs	r4, #13
 800123c:	193b      	adds	r3, r7, r4
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <main+0x3b4>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	001a      	movs	r2, r3
 8001246:	4933      	ldr	r1, [pc, #204]	; (8001314 <main+0x3bc>)
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <main+0x398>)
 800124a:	0018      	movs	r0, r3
 800124c:	f003 fae0 	bl	8004810 <siprintf>
						HAL_UART_Transmit(&huart1, str, 2, 50);
 8001250:	4927      	ldr	r1, [pc, #156]	; (80012f0 <main+0x398>)
 8001252:	4828      	ldr	r0, [pc, #160]	; (80012f4 <main+0x39c>)
 8001254:	2332      	movs	r3, #50	; 0x32
 8001256:	2202      	movs	r2, #2
 8001258:	f002 fec2 	bl	8003fe0 <HAL_UART_Transmit>
					for (uint8_t i = 0; i < ret; i++) {
 800125c:	193b      	adds	r3, r7, r4
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	193b      	adds	r3, r7, r4
 8001262:	3201      	adds	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <main+0x374>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	220d      	movs	r2, #13
 800126c:	18ba      	adds	r2, r7, r2
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3e2      	bcc.n	800123a <main+0x2e2>

					}

					if (buffer[0] == 0x7e && buffer[2] == VLAD_ID) {
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <main+0x3b4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b7e      	cmp	r3, #126	; 0x7e
 800127a:	d10c      	bne.n	8001296 <main+0x33e>
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <main+0x3b4>)
 800127e:	789a      	ldrb	r2, [r3, #2]
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <main+0x350>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d106      	bne.n	8001296 <main+0x33e>
						master = 1;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <main+0x348>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
						is_rx_mode = 0x00;
 800128e:	230f      	movs	r3, #15
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
					}
				}

				uart_send("\r\n");
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <main+0x3a0>)
 8001298:	0018      	movs	r0, r3
 800129a:	f000 fafd 	bl	8001898 <uart_send>
		if (master == 1) {
 800129e:	e6dd      	b.n	800105c <main+0x104>
 80012a0:	20000340 	.word	0x20000340
 80012a4:	20000570 	.word	0x20000570
 80012a8:	20000574 	.word	0x20000574
 80012ac:	20000108 	.word	0x20000108
 80012b0:	50000800 	.word	0x50000800
 80012b4:	50000400 	.word	0x50000400
 80012b8:	20000578 	.word	0x20000578
 80012bc:	20000128 	.word	0x20000128
 80012c0:	080050e8 	.word	0x080050e8
 80012c4:	08f0d180 	.word	0x08f0d180
 80012c8:	08005104 	.word	0x08005104
 80012cc:	20000341 	.word	0x20000341
 80012d0:	08005124 	.word	0x08005124
 80012d4:	08005130 	.word	0x08005130
 80012d8:	0800513c 	.word	0x0800513c
 80012dc:	0a21fe80 	.word	0x0a21fe80
 80012e0:	08005150 	.word	0x08005150
 80012e4:	08005164 	.word	0x08005164
 80012e8:	20000000 	.word	0x20000000
 80012ec:	08005188 	.word	0x08005188
 80012f0:	20000444 	.word	0x20000444
 80012f4:	200005e0 	.word	0x200005e0
 80012f8:	08005190 	.word	0x08005190
 80012fc:	08005194 	.word	0x08005194
 8001300:	080051a8 	.word	0x080051a8
 8001304:	080051c4 	.word	0x080051c4
 8001308:	080051e0 	.word	0x080051e0
 800130c:	20000344 	.word	0x20000344
 8001310:	080051f8 	.word	0x080051f8
 8001314:	08005204 	.word	0x08005204

08001318 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b093      	sub	sp, #76	; 0x4c
 800131c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800131e:	2414      	movs	r4, #20
 8001320:	193b      	adds	r3, r7, r4
 8001322:	0018      	movs	r0, r3
 8001324:	2334      	movs	r3, #52	; 0x34
 8001326:	001a      	movs	r2, r3
 8001328:	2100      	movs	r1, #0
 800132a:	f003 fa68 	bl	80047fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	0018      	movs	r0, r3
 8001332:	2310      	movs	r3, #16
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f003 fa61 	bl	80047fe <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	0018      	movs	r0, r3
 8001342:	f001 fa67 	bl	8002814 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	2202      	movs	r2, #2
 800134a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	193b      	adds	r3, r7, r4
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001366:	193b      	adds	r3, r7, r4
 8001368:	0018      	movs	r0, r3
 800136a:	f001 fa9f 	bl	80028ac <HAL_RCC_OscConfig>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x5e>
		Error_Handler();
 8001372:	f000 f87f 	bl	8001474 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2100      	movs	r1, #0
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fd9a 	bl	8002ecc <HAL_RCC_ClockConfig>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x88>
		Error_Handler();
 800139c:	f000 f86a 	bl	8001474 <Error_Handler>
	}
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b013      	add	sp, #76	; 0x4c
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	0018      	movs	r0, r3
 80013b2:	230c      	movs	r3, #12
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f003 fa21 	bl	80047fe <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_ADC1_Init+0xc4>)
 80013be:	4a2c      	ldr	r2, [pc, #176]	; (8001470 <MX_ADC1_Init+0xc8>)
 80013c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <MX_ADC1_Init+0xc4>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	05d2      	lsls	r2, r2, #23
 80013c8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <MX_ADC1_Init+0xc4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_ADC1_Init+0xc4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_ADC1_Init+0xc4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <MX_ADC1_Init+0xc4>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_ADC1_Init+0xc4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_ADC1_Init+0xc4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC1_Init+0xc4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC1_Init+0xc4>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	61da      	str	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC1_Init+0xc4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_ADC1_Init+0xc4>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC1_Init+0xc4>)
 8001408:	222c      	movs	r2, #44	; 0x2c
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_ADC1_Init+0xc4>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_ADC1_Init+0xc4>)
 8001416:	2200      	movs	r2, #0
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC1_Init+0xc4>)
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_ADC1_Init+0xc4>)
 8001422:	223c      	movs	r2, #60	; 0x3c
 8001424:	2100      	movs	r1, #0
 8001426:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <MX_ADC1_Init+0xc4>)
 800142a:	2200      	movs	r2, #0
 800142c:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC1_Init+0xc4>)
 8001430:	0018      	movs	r0, r3
 8001432:	f000 fc1d 	bl	8001c70 <HAL_ADC_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x96>
		Error_Handler();
 800143a:	f000 f81b 	bl	8001474 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001450:	1d3a      	adds	r2, r7, #4
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_ADC1_Init+0xc4>)
 8001454:	0011      	movs	r1, r2
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fdb2 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0xbc>
		Error_Handler();
 8001460:	f000 f808 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000a4 	.word	0x200000a4
 8001470:	40012400 	.word	0x40012400

08001474 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN SPI1_Init 1 */

	  /* USER CODE END SPI1_Init 1 */
	  /* SPI1 parameter configuration*/
	  hspi1.Instance = SPI1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_SPI1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_SPI1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_SPI1_Init+0x74>)
 800148c:	2282      	movs	r2, #130	; 0x82
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_SPI1_Init+0x74>)
 800149a:	22e0      	movs	r2, #224	; 0xe0
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014b6:	2218      	movs	r2, #24
 80014b8:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 7;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014da:	2208      	movs	r2, #8
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f001 ffc3 	bl	800346c <HAL_SPI_Init>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f7ff ffc3 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000578 	.word	0x20000578
 80014f8:	40013000 	.word	0x40013000

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_MspInit+0x44>)
 8001504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_MspInit+0x44>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_MspInit+0x44>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	2201      	movs	r2, #1
 8001514:	4013      	ands	r3, r2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x44>)
 800151c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_MspInit+0x44>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0549      	lsls	r1, r1, #21
 8001524:	430a      	orrs	r2, r1
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_MspInit+0x44>)
 800152a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	055b      	lsls	r3, r3, #21
 8001530:	4013      	ands	r3, r2
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b091      	sub	sp, #68	; 0x44
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	232c      	movs	r3, #44	; 0x2c
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	0018      	movs	r0, r3
 8001552:	2314      	movs	r3, #20
 8001554:	001a      	movs	r2, r3
 8001556:	2100      	movs	r1, #0
 8001558:	f003 f951 	bl	80047fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	2414      	movs	r4, #20
 800155e:	193b      	adds	r3, r7, r4
 8001560:	0018      	movs	r0, r3
 8001562:	2318      	movs	r3, #24
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f003 f949 	bl	80047fe <memset>
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <HAL_ADC_MspInit+0xb0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d139      	bne.n	80015ea <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001576:	193b      	adds	r3, r7, r4
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	01d2      	lsls	r2, r2, #7
 800157c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	193b      	adds	r3, r7, r4
 8001586:	0018      	movs	r0, r3
 8001588:	f001 fe4a 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001590:	f7ff ff70 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	0349      	lsls	r1, r1, #13
 800159e:	430a      	orrs	r2, r1
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 80015a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	035b      	lsls	r3, r3, #13
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 80015b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_ADC_MspInit+0xb4>)
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2203      	movs	r2, #3
 80015d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	187a      	adds	r2, r7, r1
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 ff77 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b011      	add	sp, #68	; 0x44
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40012400 	.word	0x40012400
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	2414      	movs	r4, #20
 8001606:	193b      	adds	r3, r7, r4
 8001608:	0018      	movs	r0, r3
 800160a:	2314      	movs	r3, #20
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f003 f8f5 	bl	80047fe <memset>
  if(hspi->Instance==SPI1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <HAL_SPI_MspInit+0xd0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d152      	bne.n	80016c4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0149      	lsls	r1, r1, #5
 8001628:	430a      	orrs	r2, r1
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 800162e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001658:	2102      	movs	r1, #2
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_SPI_MspInit+0xd4>)
 8001660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800166a:	193b      	adds	r3, r7, r4
 800166c:	22c0      	movs	r2, #192	; 0xc0
 800166e:	0152      	lsls	r2, r2, #5
 8001670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2202      	movs	r2, #2
 8001676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	193a      	adds	r2, r7, r4
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f000 ff20 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 8001698:	0021      	movs	r1, r4
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2208      	movs	r2, #8
 800169e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2202      	movs	r2, #2
 80016a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_SPI_MspInit+0xd8>)
 80016bc:	0019      	movs	r1, r3
 80016be:	0010      	movs	r0, r2
 80016c0:	f000 ff0a 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b00b      	add	sp, #44	; 0x2c
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	50000400 	.word	0x50000400

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b091      	sub	sp, #68	; 0x44
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	232c      	movs	r3, #44	; 0x2c
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f003 f887 	bl	80047fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	2414      	movs	r4, #20
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	2318      	movs	r3, #24
 80016f8:	001a      	movs	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	f003 f87f 	bl	80047fe <memset>
  if(huart->Instance==USART1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_UART_MspInit+0xbc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d13f      	bne.n	800178a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170a:	193b      	adds	r3, r7, r4
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001716:	193b      	adds	r3, r7, r4
 8001718:	0018      	movs	r0, r3
 800171a:	f001 fd81 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001722:	f7ff fea7 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_UART_MspInit+0xc0>)
 8001728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_UART_MspInit+0xc0>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	01c9      	lsls	r1, r1, #7
 8001730:	430a      	orrs	r2, r1
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_MspInit+0xc0>)
 8001736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	01db      	lsls	r3, r3, #7
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_UART_MspInit+0xc0>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_MspInit+0xc0>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_UART_MspInit+0xc0>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	187b      	adds	r3, r7, r1
 800175e:	22c0      	movs	r2, #192	; 0xc0
 8001760:	00d2      	lsls	r2, r2, #3
 8001762:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2202      	movs	r2, #2
 8001768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2201      	movs	r2, #1
 800177a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	187a      	adds	r2, r7, r1
 800177e:	23a0      	movs	r3, #160	; 0xa0
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fea7 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b011      	add	sp, #68	; 0x44
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40013800 	.word	0x40013800
 8001798:	40021000 	.word	0x40021000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c0:	f000 f918 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f002 ffcc 	bl	8004798 <__errno>
 8001800:	0003      	movs	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	2301      	movs	r3, #1
 8001808:	425b      	negs	r3, r3
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	18d2      	adds	r2, r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b006      	add	sp, #24
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20002000 	.word	0x20002000
 800182c:	00000400 	.word	0x00000400
 8001830:	200005dc 	.word	0x200005dc
 8001834:	20000688 	.word	0x20000688

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;


void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	22e1      	movs	r2, #225	; 0xe1
 8001852:	0252      	lsls	r2, r2, #9
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	0018      	movs	r0, r3
 800187e:	f002 fb59 	bl	8003f34 <HAL_UART_Init>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f7ff fdf5 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200005e0 	.word	0x200005e0
 8001894:	40013800 	.word	0x40013800

08001898 <uart_send>:

void uart_send(uint8_t *str){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	while(*str != NULL){
 80018a0:	e008      	b.n	80018b4 <uart_send+0x1c>
		HAL_UART_Transmit(&huart1,str, 1, 50);
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <uart_send+0x30>)
 80018a6:	2332      	movs	r3, #50	; 0x32
 80018a8:	2201      	movs	r2, #1
 80018aa:	f002 fb99 	bl	8003fe0 <HAL_UART_Transmit>
		*str++;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3301      	adds	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
	while(*str != NULL){
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f2      	bne.n	80018a2 <uart_send+0xa>
	}
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	200005e0 	.word	0x200005e0

080018cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018d0:	f7ff ffb2 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <LoopForever+0xe>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	; (8001918 <LoopForever+0x16>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018fa:	f002 ff53 	bl	80047a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018fe:	f7ff fb2b 	bl	8000f58 <main>

08001902 <LoopForever>:

LoopForever:
  b LoopForever
 8001902:	e7fe      	b.n	8001902 <LoopForever>
  ldr   r0, =_estack
 8001904:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001910:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 8001914:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001918:	20000684 	.word	0x20000684

0800191c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC1_IRQHandler>
	...

08001920 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_Init+0x3c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Init+0x3c>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193a:	2003      	movs	r0, #3
 800193c:	f000 f810 	bl	8001960 <HAL_InitTick>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d003      	beq.n	800194c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e001      	b.n	8001950 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fdd6 	bl	80014fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	781b      	ldrb	r3, [r3, #0]
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	230f      	movs	r3, #15
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_InitTick+0x88>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02b      	beq.n	80019d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_InitTick+0x8c>)
 800197a:	681c      	ldr	r4, [r3, #0]
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_InitTick+0x88>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	0019      	movs	r1, r3
 8001982:	23fa      	movs	r3, #250	; 0xfa
 8001984:	0098      	lsls	r0, r3, #2
 8001986:	f7fe fbc5 	bl	8000114 <__udivsi3>
 800198a:	0003      	movs	r3, r0
 800198c:	0019      	movs	r1, r3
 800198e:	0020      	movs	r0, r4
 8001990:	f7fe fbc0 	bl	8000114 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	0018      	movs	r0, r3
 8001998:	f000 fd91 	bl	80024be <HAL_SYSTICK_Config>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d112      	bne.n	80019c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d80a      	bhi.n	80019bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2301      	movs	r3, #1
 80019aa:	425b      	negs	r3, r3
 80019ac:	2200      	movs	r2, #0
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fd70 	bl	8002494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_InitTick+0x90>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e00d      	b.n	80019d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e008      	b.n	80019d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e003      	b.n	80019d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d0:	230f      	movs	r3, #15
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019d8:	230f      	movs	r3, #15
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b005      	add	sp, #20
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	20000020 	.word	0x20000020
 80019ec:	20000018 	.word	0x20000018
 80019f0:	2000001c 	.word	0x2000001c

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x1c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	001a      	movs	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x20>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	18d2      	adds	r2, r2, r3
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_IncTick+0x20>)
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	20000020 	.word	0x20000020
 8001a14:	20000670 	.word	0x20000670

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_GetTick+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000670 	.word	0x20000670

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	f7ff ffe0 	bl	8001a18 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	20000020 	.word	0x20000020

08001a74 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001a84:	401a      	ands	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	fe3fffff 	.word	0xfe3fffff

08001a9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	23e0      	movs	r3, #224	; 0xe0
 8001aaa:	045b      	lsls	r3, r3, #17
 8001aac:	4013      	ands	r3, r2
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	2104      	movs	r1, #4
 8001aca:	400a      	ands	r2, r1
 8001acc:	2107      	movs	r1, #7
 8001ace:	4091      	lsls	r1, r2
 8001ad0:	000a      	movs	r2, r1
 8001ad2:	43d2      	mvns	r2, r2
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2104      	movs	r1, #4
 8001ada:	400b      	ands	r3, r1
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4099      	lsls	r1, r3
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b004      	add	sp, #16
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	2104      	movs	r1, #4
 8001b02:	400a      	ands	r2, r1
 8001b04:	2107      	movs	r1, #7
 8001b06:	4091      	lsls	r1, r2
 8001b08:	000a      	movs	r2, r1
 8001b0a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2104      	movs	r1, #4
 8001b10:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b12:	40da      	lsrs	r2, r3
 8001b14:	0013      	movs	r3, r2
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	211f      	movs	r1, #31
 8001b32:	400a      	ands	r2, r1
 8001b34:	210f      	movs	r1, #15
 8001b36:	4091      	lsls	r1, r2
 8001b38:	000a      	movs	r2, r1
 8001b3a:	43d2      	mvns	r2, r2
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	210f      	movs	r1, #15
 8001b44:	4019      	ands	r1, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	201f      	movs	r0, #31
 8001b4a:	4003      	ands	r3, r0
 8001b4c:	4099      	lsls	r1, r3
 8001b4e:	000b      	movs	r3, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	035b      	lsls	r3, r3, #13
 8001b70:	0b5b      	lsrs	r3, r3, #13
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	0352      	lsls	r2, r2, #13
 8001b92:	0b52      	lsrs	r2, r2, #13
 8001b94:	43d2      	mvns	r2, r2
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	0212      	lsls	r2, r2, #8
 8001bb8:	43d2      	mvns	r2, r2
 8001bba:	401a      	ands	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	4904      	ldr	r1, [pc, #16]	; (8001bd8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	07ffff00 	.word	0x07ffff00

08001bdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	0552      	lsls	r2, r2, #21
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	6fffffe8 	.word	0x6fffffe8

08001c04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	401a      	ands	r2, r3
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	055b      	lsls	r3, r3, #21
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <LL_ADC_IsEnabled+0x18>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_ADC_IsEnabled+0x1a>
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c78:	231f      	movs	r3, #31
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e17f      	b.n	8001f96 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff fc4f 	bl	8001544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2254      	movs	r2, #84	; 0x54
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff ffa3 	bl	8001c04 <LL_ADC_IsInternalRegulatorEnabled>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff ff88 	bl	8001bdc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4bb4      	ldr	r3, [pc, #720]	; (8001fa0 <HAL_ADC_Init+0x330>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	49b4      	ldr	r1, [pc, #720]	; (8001fa4 <HAL_ADC_Init+0x334>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe fa1e 	bl	8000114 <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ff86 	bl	8001c04 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	1e03      	subs	r3, r0, #0
 8001cfa:	d10f      	bne.n	8001d1c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	2210      	movs	r2, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff ff94 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001d26:	0003      	movs	r3, r0
 8001d28:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	2210      	movs	r2, #16
 8001d30:	4013      	ands	r3, r2
 8001d32:	d000      	beq.n	8001d36 <HAL_ADC_Init+0xc6>
 8001d34:	e122      	b.n	8001f7c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d000      	beq.n	8001d3e <HAL_ADC_Init+0xce>
 8001d3c:	e11e      	b.n	8001f7c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a99      	ldr	r2, [pc, #612]	; (8001fa8 <HAL_ADC_Init+0x338>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	2202      	movs	r2, #2
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff ff6a 	bl	8001c2c <LL_ADC_IsEnabled>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d000      	beq.n	8001d5e <HAL_ADC_Init+0xee>
 8001d5c:	e0ad      	b.n	8001eba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e1b      	ldrb	r3, [r3, #24]
 8001d66:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d68:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e5b      	ldrb	r3, [r3, #25]
 8001d6e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d70:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e9b      	ldrb	r3, [r3, #26]
 8001d76:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d78:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_ADC_Init+0x118>
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	015b      	lsls	r3, r3, #5
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Init+0x11a>
 8001d88:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d8a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d90:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da04      	bge.n	8001da4 <HAL_ADC_Init+0x134>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	e001      	b.n	8001da8 <HAL_ADC_Init+0x138>
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001da8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	5c5b      	ldrb	r3, [r3, r1]
 8001db0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001db2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d115      	bne.n	8001df0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e9b      	ldrb	r3, [r3, #26]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	0252      	lsls	r2, r2, #9
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	e00b      	b.n	8001df0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	2220      	movs	r2, #32
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dfc:	23e0      	movs	r3, #224	; 0xe0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e06:	4313      	orrs	r3, r2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_ADC_Init+0x33c>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0f9b      	lsrs	r3, r3, #30
 8001e2a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e30:	4313      	orrs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	223c      	movs	r2, #60	; 0x3c
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d111      	bne.n	8001e66 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0f9b      	lsrs	r3, r3, #30
 8001e48:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e4e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001e54:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001e5a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	2201      	movs	r2, #1
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_ADC_Init+0x340>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d018      	beq.n	8001eba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d012      	beq.n	8001eba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	061b      	lsls	r3, r3, #24
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d00c      	beq.n	8001eba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_ADC_Init+0x344>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <HAL_ADC_Init+0x348>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	23f0      	movs	r3, #240	; 0xf0
 8001eb0:	039b      	lsls	r3, r3, #14
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_ADC_Init+0x344>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	f7ff fdf6 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	493a      	ldr	r1, [pc, #232]	; (8001fbc <HAL_ADC_Init+0x34c>)
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	f7ff fdee 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2110      	movs	r1, #16
 8001eee:	4249      	negs	r1, r1
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ef4:	e018      	b.n	8001f28 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	039b      	lsls	r3, r3, #14
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d112      	bne.n	8001f28 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	221c      	movs	r2, #28
 8001f12:	4013      	ands	r3, r2
 8001f14:	2210      	movs	r2, #16
 8001f16:	4252      	negs	r2, r2
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fdde 	bl	8001af0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001f34:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d10b      	bne.n	8001f56 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f54:	e01c      	b.n	8001f90 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	2212      	movs	r2, #18
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	2210      	movs	r2, #16
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f72:	231f      	movs	r3, #31
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f7a:	e009      	b.n	8001f90 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	2210      	movs	r2, #16
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f88:	231f      	movs	r3, #31
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f90:	231f      	movs	r3, #31
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	781b      	ldrb	r3, [r3, #0]
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	20000018 	.word	0x20000018
 8001fa4:	00030d40 	.word	0x00030d40
 8001fa8:	fffffefd 	.word	0xfffffefd
 8001fac:	fffe0201 	.word	0xfffe0201
 8001fb0:	1ffffc02 	.word	0x1ffffc02
 8001fb4:	40012708 	.word	0x40012708
 8001fb8:	ffc3ffff 	.word	0xffc3ffff
 8001fbc:	07ffff04 	.word	0x07ffff04

08001fc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	2317      	movs	r3, #23
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2254      	movs	r2, #84	; 0x54
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x24>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e1c0      	b.n	8002366 <HAL_ADC_ConfigChannel+0x3a6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2254      	movs	r2, #84	; 0x54
 8001fe8:	2101      	movs	r1, #1
 8001fea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fe2c 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d000      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x3c>
 8001ffa:	e1a3      	b.n	8002344 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d100      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8002004:	e143      	b.n	800228e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	429a      	cmp	r2, r3
 8002010:	d004      	beq.n	800201c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002016:	4ac1      	ldr	r2, [pc, #772]	; (800231c <HAL_ADC_ConfigChannel+0x35c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0019      	movs	r1, r3
 8002026:	0010      	movs	r0, r2
 8002028:	f7ff fd99 	bl	8001b5e <LL_ADC_REG_SetSequencerChAdd>
 800202c:	e0c9      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	211f      	movs	r1, #31
 8002038:	400b      	ands	r3, r1
 800203a:	210f      	movs	r1, #15
 800203c:	4099      	lsls	r1, r3
 800203e:	000b      	movs	r3, r1
 8002040:	43db      	mvns	r3, r3
 8002042:	4013      	ands	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	035b      	lsls	r3, r3, #13
 800204c:	0b5b      	lsrs	r3, r3, #13
 800204e:	d105      	bne.n	800205c <HAL_ADC_ConfigChannel+0x9c>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	221f      	movs	r2, #31
 8002058:	4013      	ands	r3, r2
 800205a:	e098      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d000      	beq.n	8002068 <HAL_ADC_ConfigChannel+0xa8>
 8002066:	e091      	b.n	800218c <HAL_ADC_ConfigChannel+0x1cc>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d000      	beq.n	8002074 <HAL_ADC_ConfigChannel+0xb4>
 8002072:	e089      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1c8>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2204      	movs	r2, #4
 800207a:	4013      	ands	r3, r2
 800207c:	d000      	beq.n	8002080 <HAL_ADC_ConfigChannel+0xc0>
 800207e:	e081      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1c4>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d000      	beq.n	800208c <HAL_ADC_ConfigChannel+0xcc>
 800208a:	e079      	b.n	8002180 <HAL_ADC_ConfigChannel+0x1c0>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	4013      	ands	r3, r2
 8002094:	d000      	beq.n	8002098 <HAL_ADC_ConfigChannel+0xd8>
 8002096:	e071      	b.n	800217c <HAL_ADC_ConfigChannel+0x1bc>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	4013      	ands	r3, r2
 80020a0:	d000      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0xe4>
 80020a2:	e069      	b.n	8002178 <HAL_ADC_ConfigChannel+0x1b8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	4013      	ands	r3, r2
 80020ac:	d000      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0xf0>
 80020ae:	e061      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1b4>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	4013      	ands	r3, r2
 80020b8:	d000      	beq.n	80020bc <HAL_ADC_ConfigChannel+0xfc>
 80020ba:	e059      	b.n	8002170 <HAL_ADC_ConfigChannel+0x1b0>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d151      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1ac>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d149      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1a8>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	d141      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1a4>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d139      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1a0>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	4013      	ands	r3, r2
 80020f6:	d131      	bne.n	800215c <HAL_ADC_ConfigChannel+0x19c>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	019b      	lsls	r3, r3, #6
 8002100:	4013      	ands	r3, r2
 8002102:	d129      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x198>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	01db      	lsls	r3, r3, #7
 800210c:	4013      	ands	r3, r2
 800210e:	d121      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x194>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	4013      	ands	r3, r2
 800211a:	d119      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x190>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	4013      	ands	r3, r2
 8002126:	d111      	bne.n	800214c <HAL_ADC_ConfigChannel+0x18c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4013      	ands	r3, r2
 8002132:	d109      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x188>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	02db      	lsls	r3, r3, #11
 800213c:	4013      	ands	r3, r2
 800213e:	d001      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x184>
 8002140:	2312      	movs	r3, #18
 8002142:	e024      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002144:	2300      	movs	r3, #0
 8002146:	e022      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002148:	2311      	movs	r3, #17
 800214a:	e020      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800214c:	2310      	movs	r3, #16
 800214e:	e01e      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002150:	230f      	movs	r3, #15
 8002152:	e01c      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002154:	230e      	movs	r3, #14
 8002156:	e01a      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002158:	230d      	movs	r3, #13
 800215a:	e018      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800215c:	230c      	movs	r3, #12
 800215e:	e016      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	230b      	movs	r3, #11
 8002162:	e014      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	230a      	movs	r3, #10
 8002166:	e012      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2309      	movs	r3, #9
 800216a:	e010      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2308      	movs	r3, #8
 800216e:	e00e      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	2307      	movs	r3, #7
 8002172:	e00c      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	2306      	movs	r3, #6
 8002176:	e00a      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	2305      	movs	r3, #5
 800217a:	e008      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	2304      	movs	r3, #4
 800217e:	e006      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	2303      	movs	r3, #3
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	2302      	movs	r3, #2
 8002186:	e002      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_ADC_ConfigChannel+0x1ce>
 800218c:	2300      	movs	r3, #0
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	6852      	ldr	r2, [r2, #4]
 8002192:	201f      	movs	r0, #31
 8002194:	4002      	ands	r2, r0
 8002196:	4093      	lsls	r3, r2
 8002198:	000a      	movs	r2, r1
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d808      	bhi.n	80021c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	001a      	movs	r2, r3
 80021be:	f7ff fcae 	bl	8001b1e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	001a      	movs	r2, r3
 80021d0:	f7ff fce8 	bl	8001ba4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db00      	blt.n	80021de <HAL_ADC_ConfigChannel+0x21e>
 80021dc:	e0bc      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021de:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff fc5b 	bl	8001a9c <LL_ADC_GetCommonPathInternalCh>
 80021e6:	0003      	movs	r3, r0
 80021e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_ADC_ConfigChannel+0x364>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d122      	bne.n	800223a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021fc:	d11d      	bne.n	800223a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	0412      	lsls	r2, r2, #16
 8002204:	4313      	orrs	r3, r2
 8002206:	4a46      	ldr	r2, [pc, #280]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	f7ff fc32 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002210:	4b45      	ldr	r3, [pc, #276]	; (8002328 <HAL_ADC_ConfigChannel+0x368>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4945      	ldr	r1, [pc, #276]	; (800232c <HAL_ADC_ConfigChannel+0x36c>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7fd ff7c 	bl	8000114 <__udivsi3>
 800221c:	0003      	movs	r3, r0
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	0013      	movs	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	189b      	adds	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222a:	e002      	b.n	8002232 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3b01      	subs	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002238:	e08e      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <HAL_ADC_ConfigChannel+0x370>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10e      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x2a2>
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	045b      	lsls	r3, r3, #17
 800224a:	4013      	ands	r3, r2
 800224c:	d109      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	0452      	lsls	r2, r2, #17
 8002254:	4313      	orrs	r3, r2
 8002256:	4a32      	ldr	r2, [pc, #200]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 8002258:	0019      	movs	r1, r3
 800225a:	0010      	movs	r0, r2
 800225c:	f7ff fc0a 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
 8002260:	e07a      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <HAL_ADC_ConfigChannel+0x374>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d000      	beq.n	800226e <HAL_ADC_ConfigChannel+0x2ae>
 800226c:	e074      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	03db      	lsls	r3, r3, #15
 8002274:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002276:	d000      	beq.n	800227a <HAL_ADC_ConfigChannel+0x2ba>
 8002278:	e06e      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	03d2      	lsls	r2, r2, #15
 8002280:	4313      	orrs	r3, r2
 8002282:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 8002284:	0019      	movs	r1, r3
 8002286:	0010      	movs	r0, r2
 8002288:	f7ff fbf4 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
 800228c:	e064      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	429a      	cmp	r2, r3
 8002298:	d004      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800229e:	4a1f      	ldr	r2, [pc, #124]	; (800231c <HAL_ADC_ConfigChannel+0x35c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f7ff fc66 	bl	8001b80 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da4d      	bge.n	8002358 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fbec 	bl	8001a9c <LL_ADC_GetCommonPathInternalCh>
 80022c4:	0003      	movs	r3, r0
 80022c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_ADC_ConfigChannel+0x364>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d108      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_ADC_ConfigChannel+0x378>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 80022da:	0019      	movs	r1, r3
 80022dc:	0010      	movs	r0, r2
 80022de:	f7ff fbc9 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
 80022e2:	e039      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_ADC_ConfigChannel+0x370>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_ADC_ConfigChannel+0x37c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f7ff fbbb 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
 80022fe:	e02b      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_ADC_ConfigChannel+0x374>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d126      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_ADC_ConfigChannel+0x380>)
 800230e:	4013      	ands	r3, r2
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <HAL_ADC_ConfigChannel+0x360>)
 8002312:	0019      	movs	r1, r3
 8002314:	0010      	movs	r0, r2
 8002316:	f7ff fbad 	bl	8001a74 <LL_ADC_SetCommonPathInternalCh>
 800231a:	e01d      	b.n	8002358 <HAL_ADC_ConfigChannel+0x398>
 800231c:	80000004 	.word	0x80000004
 8002320:	40012708 	.word	0x40012708
 8002324:	b0001000 	.word	0xb0001000
 8002328:	20000018 	.word	0x20000018
 800232c:	00030d40 	.word	0x00030d40
 8002330:	b8004000 	.word	0xb8004000
 8002334:	b4002000 	.word	0xb4002000
 8002338:	ff7fffff 	.word	0xff7fffff
 800233c:	feffffff 	.word	0xfeffffff
 8002340:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	2220      	movs	r2, #32
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002350:	2317      	movs	r3, #23
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2254      	movs	r2, #84	; 0x54
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002360:	2317      	movs	r3, #23
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b006      	add	sp, #24
 800236c:	bd80      	pop	{r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	0002      	movs	r2, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b7f      	cmp	r3, #127	; 0x7f
 8002384:	d828      	bhi.n	80023d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <__NVIC_SetPriority+0xd4>)
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b25b      	sxtb	r3, r3
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	33c0      	adds	r3, #192	; 0xc0
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	589b      	ldr	r3, [r3, r2]
 8002396:	1dfa      	adds	r2, r7, #7
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	0011      	movs	r1, r2
 800239c:	2203      	movs	r2, #3
 800239e:	400a      	ands	r2, r1
 80023a0:	00d2      	lsls	r2, r2, #3
 80023a2:	21ff      	movs	r1, #255	; 0xff
 80023a4:	4091      	lsls	r1, r2
 80023a6:	000a      	movs	r2, r1
 80023a8:	43d2      	mvns	r2, r2
 80023aa:	401a      	ands	r2, r3
 80023ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	401a      	ands	r2, r3
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0018      	movs	r0, r3
 80023bc:	2303      	movs	r3, #3
 80023be:	4003      	ands	r3, r0
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c4:	481f      	ldr	r0, [pc, #124]	; (8002444 <__NVIC_SetPriority+0xd4>)
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	430a      	orrs	r2, r1
 80023d0:	33c0      	adds	r3, #192	; 0xc0
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023d6:	e031      	b.n	800243c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <__NVIC_SetPriority+0xd8>)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0019      	movs	r1, r3
 80023e0:	230f      	movs	r3, #15
 80023e2:	400b      	ands	r3, r1
 80023e4:	3b08      	subs	r3, #8
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3306      	adds	r3, #6
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	18d3      	adds	r3, r2, r3
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1dfa      	adds	r2, r7, #7
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	0011      	movs	r1, r2
 80023f8:	2203      	movs	r2, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	21ff      	movs	r1, #255	; 0xff
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	43d2      	mvns	r2, r2
 8002406:	401a      	ands	r2, r3
 8002408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	401a      	ands	r2, r3
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	2303      	movs	r3, #3
 800241a:	4003      	ands	r3, r0
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <__NVIC_SetPriority+0xd8>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	001c      	movs	r4, r3
 8002428:	230f      	movs	r3, #15
 800242a:	4023      	ands	r3, r4
 800242c:	3b08      	subs	r3, #8
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	430a      	orrs	r2, r1
 8002432:	3306      	adds	r3, #6
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	18c3      	adds	r3, r0, r3
 8002438:	3304      	adds	r3, #4
 800243a:	601a      	str	r2, [r3, #0]
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b003      	add	sp, #12
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	045b      	lsls	r3, r3, #17
 800245c:	429a      	cmp	r2, r3
 800245e:	d301      	bcc.n	8002464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002460:	2301      	movs	r3, #1
 8002462:	e010      	b.n	8002486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <SysTick_Config+0x44>)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	3a01      	subs	r2, #1
 800246a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246c:	2301      	movs	r3, #1
 800246e:	425b      	negs	r3, r3
 8002470:	2103      	movs	r1, #3
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff ff7c 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x44>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x44>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	210f      	movs	r1, #15
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ffbf 	bl	800244c <SysTick_Config>
 80024ce:	0003      	movs	r3, r0
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e6:	e147      	b.n	8002778 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4091      	lsls	r1, r2
 80024f2:	000a      	movs	r2, r1
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d100      	bne.n	8002500 <HAL_GPIO_Init+0x28>
 80024fe:	e138      	b.n	8002772 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	2b01      	cmp	r3, #1
 800250a:	d005      	beq.n	8002518 <HAL_GPIO_Init+0x40>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	4013      	ands	r3, r2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d130      	bne.n	800257a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	43da      	mvns	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	0013      	movs	r3, r2
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800254e:	2201      	movs	r2, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	43da      	mvns	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	2201      	movs	r2, #1
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	4013      	ands	r3, r2
 8002582:	2b03      	cmp	r3, #3
 8002584:	d017      	beq.n	80025b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	4013      	ands	r3, r2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d123      	bne.n	800260a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	58d3      	ldr	r3, [r2, r3]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	409a      	lsls	r2, r3
 80025dc:	0013      	movs	r3, r2
 80025de:	43da      	mvns	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2107      	movs	r1, #7
 80025ee:	400b      	ands	r3, r1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	409a      	lsls	r2, r3
 80025f4:	0013      	movs	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	401a      	ands	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	23c0      	movs	r3, #192	; 0xc0
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d100      	bne.n	800264c <HAL_GPIO_Init+0x174>
 800264a:	e092      	b.n	8002772 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800264c:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3318      	adds	r3, #24
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	589b      	ldr	r3, [r3, r2]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2203      	movs	r2, #3
 800265e:	4013      	ands	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	220f      	movs	r2, #15
 8002664:	409a      	lsls	r2, r3
 8002666:	0013      	movs	r3, r2
 8002668:	43da      	mvns	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	23a0      	movs	r3, #160	; 0xa0
 8002674:	05db      	lsls	r3, r3, #23
 8002676:	429a      	cmp	r2, r3
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x1ca>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x1c6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_GPIO_Init+0x2c0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x1c2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_GPIO_Init+0x2c4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x1be>
 8002692:	2303      	movs	r3, #3
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x1cc>
 8002696:	2305      	movs	r3, #5
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x1cc>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x1cc>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x1cc>
 80026a2:	2300      	movs	r3, #0
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	2103      	movs	r1, #3
 80026a8:	400a      	ands	r2, r1
 80026aa:	00d2      	lsls	r2, r2, #3
 80026ac:	4093      	lsls	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026b4:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3318      	adds	r3, #24
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	035b      	lsls	r3, r3, #13
 80026da:	4013      	ands	r3, r2
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	4013      	ands	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002710:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002716:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002718:	2384      	movs	r3, #132	; 0x84
 800271a:	58d3      	ldr	r3, [r2, r3]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800273c:	4914      	ldr	r1, [pc, #80]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800273e:	2284      	movs	r2, #132	; 0x84
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	58d3      	ldr	r3, [r2, r3]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	025b      	lsls	r3, r3, #9
 800275e:	4013      	ands	r3, r2
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276a:	4909      	ldr	r1, [pc, #36]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	40da      	lsrs	r2, r3
 8002780:	1e13      	subs	r3, r2, #0
 8002782:	d000      	beq.n	8002786 <HAL_GPIO_Init+0x2ae>
 8002784:	e6b0      	b.n	80024e8 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b006      	add	sp, #24
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021800 	.word	0x40021800
 8002794:	50000400 	.word	0x50000400
 8002798:	50000800 	.word	0x50000800
 800279c:	50000c00 	.word	0x50000c00

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	000a      	movs	r2, r1
 80027aa:	1cbb      	adds	r3, r7, #2
 80027ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	1cba      	adds	r2, r7, #2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	0008      	movs	r0, r1
 80027e4:	0011      	movs	r1, r2
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	1c02      	adds	r2, r0, #0
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	1c7b      	adds	r3, r7, #1
 80027ee:	1c0a      	adds	r2, r1, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f2:	1c7b      	adds	r3, r7, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	1cbb      	adds	r3, r7, #2
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002802:	e003      	b.n	800280c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002822:	4013      	ands	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d11f      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	0013      	movs	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	189b      	adds	r3, r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4912      	ldr	r1, [pc, #72]	; (8002890 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002846:	0018      	movs	r0, r3
 8002848:	f7fd fc64 	bl	8000114 <__udivsi3>
 800284c:	0003      	movs	r3, r0
 800284e:	3301      	adds	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002852:	e008      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e001      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e009      	b.n	800287a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	401a      	ands	r2, r3
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	429a      	cmp	r2, r3
 8002876:	d0ed      	beq.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40007000 	.word	0x40007000
 8002888:	fffff9ff 	.word	0xfffff9ff
 800288c:	20000018 	.word	0x20000018
 8002890:	000f4240 	.word	0x000f4240

08002894 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	23e0      	movs	r3, #224	; 0xe0
 800289e:	01db      	lsls	r3, r3, #7
 80028a0:	4013      	ands	r3, r2
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e2f3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	d100      	bne.n	80028ca <HAL_RCC_OscConfig+0x1e>
 80028c8:	e07c      	b.n	80029c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ca:	4bc3      	ldr	r3, [pc, #780]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2238      	movs	r2, #56	; 0x38
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d4:	4bc0      	ldr	r3, [pc, #768]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2203      	movs	r2, #3
 80028da:	4013      	ands	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_OscConfig+0x3e>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d10b      	bne.n	8002908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	4bb9      	ldr	r3, [pc, #740]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d062      	beq.n	80029c2 <HAL_RCC_OscConfig+0x116>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d15e      	bne.n	80029c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e2ce      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	025b      	lsls	r3, r3, #9
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x78>
 8002914:	4bb0      	ldr	r3, [pc, #704]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4baf      	ldr	r3, [pc, #700]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0249      	lsls	r1, r1, #9
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e020      	b.n	8002966 <HAL_RCC_OscConfig+0xba>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	23a0      	movs	r3, #160	; 0xa0
 800292a:	02db      	lsls	r3, r3, #11
 800292c:	429a      	cmp	r2, r3
 800292e:	d10e      	bne.n	800294e <HAL_RCC_OscConfig+0xa2>
 8002930:	4ba9      	ldr	r3, [pc, #676]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4ba8      	ldr	r3, [pc, #672]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	02c9      	lsls	r1, r1, #11
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	4ba6      	ldr	r3, [pc, #664]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4ba5      	ldr	r3, [pc, #660]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0249      	lsls	r1, r1, #9
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0xba>
 800294e:	4ba2      	ldr	r3, [pc, #648]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4ba1      	ldr	r3, [pc, #644]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002954:	49a1      	ldr	r1, [pc, #644]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4b9f      	ldr	r3, [pc, #636]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b9e      	ldr	r3, [pc, #632]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002960:	499f      	ldr	r1, [pc, #636]	; (8002be0 <HAL_RCC_OscConfig+0x334>)
 8002962:	400a      	ands	r2, r1
 8002964:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d014      	beq.n	8002998 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7ff f853 	bl	8001a18 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff f84e 	bl	8001a18 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e28d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4013      	ands	r3, r2
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xcc>
 8002996:	e015      	b.n	80029c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff f83e 	bl	8001a18 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a2:	f7ff f839 	bl	8001a18 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e278      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b4:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0xf6>
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d100      	bne.n	80029d0 <HAL_RCC_OscConfig+0x124>
 80029ce:	e099      	b.n	8002b04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d0:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2238      	movs	r2, #56	; 0x38
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2203      	movs	r2, #3
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d102      	bne.n	80029f0 <HAL_RCC_OscConfig+0x144>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d002      	beq.n	80029f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d135      	bne.n	8002a62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f6:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4013      	ands	r3, r2
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x162>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e24b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b72      	ldr	r3, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x338>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	0019      	movs	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a2a:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6e      	ldr	r2, [pc, #440]	; (8002be8 <HAL_RCC_OscConfig+0x33c>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a3e:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0adb      	lsrs	r3, r3, #11
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x340>)
 8002a4a:	40da      	lsrs	r2, r3
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x344>)
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x348>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7fe ff83 	bl	8001960 <HAL_InitTick>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d051      	beq.n	8002b02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e221      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d030      	beq.n	8002acc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5e      	ldr	r2, [pc, #376]	; (8002be8 <HAL_RCC_OscConfig+0x33c>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a7e:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	0049      	lsls	r1, r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ffc4 	bl	8001a18 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe ffbf 	bl	8001a18 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1fe      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <HAL_RCC_OscConfig+0x338>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e01b      	b.n	8002b04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002acc:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002ad2:	4949      	ldr	r1, [pc, #292]	; (8002bf8 <HAL_RCC_OscConfig+0x34c>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe ff9e 	bl	8001a18 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe ff99 	bl	8001a18 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e1d8      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af4:	4b38      	ldr	r3, [pc, #224]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4013      	ands	r3, r2
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x236>
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d047      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b0e:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2238      	movs	r2, #56	; 0x38
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b18      	cmp	r3, #24
 8002b18:	d10a      	bne.n	8002b30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	2202      	movs	r2, #2
 8002b20:	4013      	ands	r3, r2
 8002b22:	d03c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d138      	bne.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e1ba      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d019      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	430a      	orrs	r2, r1
 8002b42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe ff68 	bl	8001a18 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe ff63 	bl	8001a18 <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a2      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0f1      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2a2>
 8002b6a:	e018      	b.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	438a      	bics	r2, r1
 8002b76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe ff4e 	bl	8001a18 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe ff49 	bl	8001a18 <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e188      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1f1      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_RCC_OscConfig+0x2fe>
 8002ba8:	e0c6      	b.n	8002d38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	231f      	movs	r3, #31
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2238      	movs	r2, #56	; 0x38
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d11e      	bne.n	8002bfc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x32c>)
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d100      	bne.n	8002bca <HAL_RCC_OscConfig+0x31e>
 8002bc8:	e0b6      	b.n	8002d38 <HAL_RCC_OscConfig+0x48c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d000      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x328>
 8002bd2:	e0b1      	b.n	8002d38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e166      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	fffeffff 	.word	0xfffeffff
 8002be0:	fffbffff 	.word	0xfffbffff
 8002be4:	ffff80ff 	.word	0xffff80ff
 8002be8:	ffffc7ff 	.word	0xffffc7ff
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	2000001c 	.word	0x2000001c
 8002bf8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfc:	4bac      	ldr	r3, [pc, #688]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	055b      	lsls	r3, r3, #21
 8002c04:	4013      	ands	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x360>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x362>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d011      	beq.n	8002c36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4ba7      	ldr	r3, [pc, #668]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c16:	4ba6      	ldr	r3, [pc, #664]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	0549      	lsls	r1, r1, #21
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c20:	4ba3      	ldr	r3, [pc, #652]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	055b      	lsls	r3, r3, #21
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c2e:	231f      	movs	r3, #31
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c36:	4b9f      	ldr	r3, [pc, #636]	; (8002eb4 <HAL_RCC_OscConfig+0x608>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d11a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c42:	4b9c      	ldr	r3, [pc, #624]	; (8002eb4 <HAL_RCC_OscConfig+0x608>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b9b      	ldr	r3, [pc, #620]	; (8002eb4 <HAL_RCC_OscConfig+0x608>)
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	0049      	lsls	r1, r1, #1
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fee2 	bl	8001a18 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fe fedd 	bl	8001a18 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e11c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c6c:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x608>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3e2>
 8002c80:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c84:	4b8a      	ldr	r3, [pc, #552]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x41c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x404>
 8002c96:	4b86      	ldr	r3, [pc, #536]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca2:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ca6:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x41c>
 8002cb0:	4b7f      	ldr	r3, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cbc:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d014      	beq.n	8002cfa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fea2 	bl	8001a18 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	e009      	b.n	8002cee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe fe9d 	bl	8001a18 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_RCC_OscConfig+0x60c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x42e>
 8002cf8:	e013      	b.n	8002d22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fe8d 	bl	8001a18 <HAL_GetTick>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d02:	e009      	b.n	8002d18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fe88 	bl	8001a18 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_RCC_OscConfig+0x60c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0c6      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d18:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d22:	231f      	movs	r3, #31
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d30:	4b5f      	ldr	r3, [pc, #380]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d32:	4962      	ldr	r1, [pc, #392]	; (8002ebc <HAL_RCC_OscConfig+0x610>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <HAL_RCC_OscConfig+0x496>
 8002d40:	e0b0      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d42:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2238      	movs	r2, #56	; 0x38
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d100      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4a4>
 8002d4e:	e078      	b.n	8002e42 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d153      	bne.n	8002e00 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d5e:	4958      	ldr	r1, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x614>)
 8002d60:	400a      	ands	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fe58 	bl	8001a18 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe fe53 	bl	8001a18 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e092      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	049b      	lsls	r3, r3, #18
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a4c      	ldr	r2, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x618>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	431a      	orrs	r2, r3
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002db6:	430a      	orrs	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0449      	lsls	r1, r1, #17
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	0549      	lsls	r1, r1, #21
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fe1f 	bl	8001a18 <HAL_GetTick>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fe1a 	bl	8001a18 <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e059      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	049b      	lsls	r3, r3, #18
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x534>
 8002dfe:	e051      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e06:	492e      	ldr	r1, [pc, #184]	; (8002ec0 <HAL_RCC_OscConfig+0x614>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fe04 	bl	8001a18 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fdff 	bl	8001a18 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	049b      	lsls	r3, r3, #18
 8002e30:	4013      	ands	r3, r2
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e3a:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <HAL_RCC_OscConfig+0x61c>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	e030      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e02b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_RCC_OscConfig+0x604>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2203      	movs	r2, #3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11e      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2270      	movs	r2, #112	; 0x70
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d117      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	23fe      	movs	r3, #254	; 0xfe
 8002e74:	01db      	lsls	r3, r3, #7
 8002e76:	401a      	ands	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10e      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	23f8      	movs	r3, #248	; 0xf8
 8002e86:	039b      	lsls	r3, r3, #14
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	0f5b      	lsrs	r3, r3, #29
 8002e96:	075a      	lsls	r2, r3, #29
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	00001388 	.word	0x00001388
 8002ebc:	efffffff 	.word	0xefffffff
 8002ec0:	feffffff 	.word	0xfeffffff
 8002ec4:	1fc1808c 	.word	0x1fc1808c
 8002ec8:	effefffc 	.word	0xeffefffc

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0e9      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d91e      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f00:	f7fe fd8a 	bl	8001a18 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fe fd85 	bl	8001a18 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0ca      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f40:	4b60      	ldr	r3, [pc, #384]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f46:	21e0      	movs	r1, #224	; 0xe0
 8002f48:	01c9      	lsls	r1, r1, #7
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <HAL_RCC_ClockConfig+0x1fc>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d057      	beq.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e097      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	049b      	lsls	r3, r3, #18
 8002f94:	4013      	ands	r3, r2
 8002f96:	d11f      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e08b      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4013      	ands	r3, r2
 8002fae:	d113      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e07f      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e074      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fca:	4b3e      	ldr	r3, [pc, #248]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e06d      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4393      	bics	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fe fd14 	bl	8001a18 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	e009      	b.n	800300a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe fd0f 	bl	8001a18 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e054      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2238      	movs	r2, #56	; 0x38
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	429a      	cmp	r2, r3
 800301a:	d1ec      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2207      	movs	r2, #7
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d21e      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2207      	movs	r2, #7
 8003030:	4393      	bics	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800303c:	f7fe fcec 	bl	8001a18 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003044:	e009      	b.n	800305a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe fce7 	bl	8001a18 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e02c      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2204      	movs	r2, #4
 800306e:	4013      	ands	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_RCC_ClockConfig+0x200>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003086:	f000 f829 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800308a:	0001      	movs	r1, r0
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	220f      	movs	r2, #15
 8003094:	401a      	ands	r2, r3
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x204>)
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	58d3      	ldr	r3, [r2, r3]
 800309c:	221f      	movs	r2, #31
 800309e:	4013      	ands	r3, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	40da      	lsrs	r2, r3
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x208>)
 80030a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x20c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fe fc57 	bl	8001960 <HAL_InitTick>
 80030b2:	0003      	movs	r3, r0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40022000 	.word	0x40022000
 80030c0:	00001388 	.word	0x00001388
 80030c4:	40021000 	.word	0x40021000
 80030c8:	fffff0ff 	.word	0xfffff0ff
 80030cc:	ffff8fff 	.word	0xffff8fff
 80030d0:	0800522c 	.word	0x0800522c
 80030d4:	20000018 	.word	0x20000018
 80030d8:	2000001c 	.word	0x2000001c

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2238      	movs	r2, #56	; 0x38
 80030e8:	4013      	ands	r3, r2
 80030ea:	d10f      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0adb      	lsrs	r3, r3, #11
 80030f2:	2207      	movs	r2, #7
 80030f4:	4013      	ands	r3, r2
 80030f6:	2201      	movs	r2, #1
 80030f8:	409a      	lsls	r2, r3
 80030fa:	0013      	movs	r3, r2
 80030fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	4835      	ldr	r0, [pc, #212]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003102:	f7fd f807 	bl	8000114 <__udivsi3>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e05d      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2238      	movs	r2, #56	; 0x38
 8003112:	4013      	ands	r3, r2
 8003114:	2b08      	cmp	r3, #8
 8003116:	d102      	bne.n	800311e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCC_GetSysClockFreq+0x100>)
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e054      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2238      	movs	r2, #56	; 0x38
 8003124:	4013      	ands	r3, r2
 8003126:	2b10      	cmp	r3, #16
 8003128:	d138      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2203      	movs	r2, #3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	3301      	adds	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	4824      	ldr	r0, [pc, #144]	; (80031dc <HAL_RCC_GetSysClockFreq+0x100>)
 800314c:	f7fc ffe2 	bl	8000114 <__udivsi3>
 8003150:	0003      	movs	r3, r0
 8003152:	0019      	movs	r1, r3
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	227f      	movs	r2, #127	; 0x7f
 800315c:	4013      	ands	r3, r2
 800315e:	434b      	muls	r3, r1
 8003160:	617b      	str	r3, [r7, #20]
        break;
 8003162:	e00d      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	481c      	ldr	r0, [pc, #112]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003168:	f7fc ffd4 	bl	8000114 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	0019      	movs	r1, r3
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	227f      	movs	r2, #127	; 0x7f
 8003178:	4013      	ands	r3, r2
 800317a:	434b      	muls	r3, r1
 800317c:	617b      	str	r3, [r7, #20]
        break;
 800317e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0f5b      	lsrs	r3, r3, #29
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	3301      	adds	r3, #1
 800318c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7fc ffbf 	bl	8000114 <__udivsi3>
 8003196:	0003      	movs	r3, r0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e015      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2238      	movs	r2, #56	; 0x38
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d103      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2238      	movs	r2, #56	; 0x38
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b18      	cmp	r3, #24
 80031ba:	d103      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031bc:	23fa      	movs	r3, #250	; 0xfa
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e001      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031c8:	693b      	ldr	r3, [r7, #16]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b006      	add	sp, #24
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000018 	.word	0x20000018

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031f8:	f7ff fff2 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 80031fc:	0004      	movs	r4, r0
 80031fe:	f7ff fb49 	bl	8002894 <LL_RCC_GetAPB1Prescaler>
 8003202:	0003      	movs	r3, r0
 8003204:	0b1a      	lsrs	r2, r3, #12
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	58d3      	ldr	r3, [r2, r3]
 800320c:	221f      	movs	r2, #31
 800320e:	4013      	ands	r3, r2
 8003210:	40dc      	lsrs	r4, r3
 8003212:	0023      	movs	r3, r4
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	0800526c 	.word	0x0800526c

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003228:	2313      	movs	r3, #19
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003230:	2312      	movs	r3, #18
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	4013      	ands	r3, r2
 8003242:	d100      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003244:	e0a3      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2011      	movs	r0, #17
 8003248:	183b      	adds	r3, r7, r0
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b7f      	ldr	r3, [pc, #508]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	055b      	lsls	r3, r3, #21
 8003256:	4013      	ands	r3, r2
 8003258:	d110      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b7c      	ldr	r3, [pc, #496]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0549      	lsls	r1, r1, #21
 8003264:	430a      	orrs	r2, r1
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
 8003268:	4b78      	ldr	r3, [pc, #480]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800326a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	055b      	lsls	r3, r3, #21
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	183b      	adds	r3, r7, r0
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b74      	ldr	r3, [pc, #464]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0049      	lsls	r1, r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328a:	f7fe fbc5 	bl	8001a18 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003292:	e00b      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fe fbc0 	bl	8001a18 <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d904      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032a2:	2313      	movs	r3, #19
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2203      	movs	r2, #3
 80032a8:	701a      	strb	r2, [r3, #0]
        break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ac:	4b68      	ldr	r3, [pc, #416]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d0ed      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80032b8:	2313      	movs	r3, #19
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d154      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c2:	4b62      	ldr	r3, [pc, #392]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c6:	23c0      	movs	r3, #192	; 0xc0
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d014      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	4a5c      	ldr	r2, [pc, #368]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ec:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	0249      	lsls	r1, r1, #9
 80032f2:	430a      	orrs	r2, r1
 80032f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f6:	4b55      	ldr	r3, [pc, #340]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fa:	4b54      	ldr	r3, [pc, #336]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032fc:	4956      	ldr	r1, [pc, #344]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80032fe:	400a      	ands	r2, r1
 8003300:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fb82 	bl	8001a18 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003318:	e00c      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fb7d 	bl	8001a18 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a4d      	ldr	r2, [pc, #308]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d904      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800332a:	2313      	movs	r3, #19
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2203      	movs	r2, #3
 8003330:	701a      	strb	r2, [r3, #0]
            break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	4b45      	ldr	r3, [pc, #276]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d0ed      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800333e:	2313      	movs	r3, #19
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003348:	4b40      	ldr	r3, [pc, #256]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4a41      	ldr	r2, [pc, #260]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003358:	430a      	orrs	r2, r1
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c
 800335c:	e00c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335e:	2312      	movs	r3, #18
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2213      	movs	r2, #19
 8003364:	18ba      	adds	r2, r7, r2
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e005      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	2312      	movs	r3, #18
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2213      	movs	r2, #19
 8003372:	18ba      	adds	r2, r7, r2
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003378:	2311      	movs	r3, #17
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b32      	ldr	r3, [pc, #200]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003386:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800338a:	400a      	ands	r2, r1
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	4013      	ands	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	2203      	movs	r2, #3
 800339e:	4393      	bics	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033a8:	430a      	orrs	r2, r1
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4013      	ands	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033bc:	4013      	ands	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033c6:	430a      	orrs	r2, r1
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	01db      	lsls	r3, r3, #7
 80033d2:	4013      	ands	r3, r2
 80033d4:	d015      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	0899      	lsrs	r1, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	0249      	lsls	r1, r1, #9
 80033fe:	430a      	orrs	r2, r1
 8003400:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d016      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800341e:	430a      	orrs	r2, r1
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	01db      	lsls	r3, r3, #7
 800342a:	429a      	cmp	r2, r3
 800342c:	d106      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0249      	lsls	r1, r1, #9
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800343c:	2312      	movs	r3, #18
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b006      	add	sp, #24
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
 8003454:	fffffcff 	.word	0xfffffcff
 8003458:	fffeffff 	.word	0xfffeffff
 800345c:	00001388 	.word	0x00001388
 8003460:	efffffff 	.word	0xefffffff
 8003464:	ffffcfff 	.word	0xffffcfff
 8003468:	ffff3fff 	.word	0xffff3fff

0800346c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0a8      	b.n	80035d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	2382      	movs	r3, #130	; 0x82
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	429a      	cmp	r2, r3
 8003490:	d009      	beq.n	80034a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
 8003498:	e005      	b.n	80034a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	225d      	movs	r2, #93	; 0x5d
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	225c      	movs	r2, #92	; 0x5c
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fe f89a 	bl	80015fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225d      	movs	r2, #93	; 0x5d
 80034cc:	2102      	movs	r1, #2
 80034ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	438a      	bics	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	23e0      	movs	r3, #224	; 0xe0
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d902      	bls.n	80034f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	015b      	lsls	r3, r3, #5
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	23f0      	movs	r3, #240	; 0xf0
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	429a      	cmp	r2, r3
 8003502:	d008      	beq.n	8003516 <HAL_SPI_Init+0xaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	23e0      	movs	r3, #224	; 0xe0
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	429a      	cmp	r2, r3
 800350e:	d002      	beq.n	8003516 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	2382      	movs	r3, #130	; 0x82
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	2384      	movs	r3, #132	; 0x84
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	400b      	ands	r3, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2102      	movs	r1, #2
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2101      	movs	r1, #1
 800353c:	400b      	ands	r3, r1
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	400b      	ands	r3, r1
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2138      	movs	r1, #56	; 0x38
 8003552:	400b      	ands	r3, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	400b      	ands	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	0011      	movs	r1, r2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	2204      	movs	r2, #4
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2110      	movs	r1, #16
 8003584:	400b      	ands	r3, r1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2108      	movs	r1, #8
 800358e:	400b      	ands	r3, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68d9      	ldr	r1, [r3, #12]
 8003596:	23f0      	movs	r3, #240	; 0xf0
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	400b      	ands	r3, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	0011      	movs	r1, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	401a      	ands	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4907      	ldr	r1, [pc, #28]	; (80035d8 <HAL_SPI_Init+0x16c>)
 80035bc:	400a      	ands	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	225d      	movs	r2, #93	; 0x5d
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	fffff7ff 	.word	0xfffff7ff

080035dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	1dbb      	adds	r3, r7, #6
 80035ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	225c      	movs	r2, #92	; 0x5c
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_SPI_Transmit+0x26>
 80035fe:	2302      	movs	r3, #2
 8003600:	e140      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	225c      	movs	r2, #92	; 0x5c
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360a:	f7fe fa05 	bl	8001a18 <HAL_GetTick>
 800360e:	0003      	movs	r3, r0
 8003610:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003612:	2316      	movs	r3, #22
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	1dba      	adds	r2, r7, #6
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	225d      	movs	r2, #93	; 0x5d
 8003620:	5c9b      	ldrb	r3, [r3, r2]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d004      	beq.n	8003632 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2202      	movs	r2, #2
 800362e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003630:	e11d      	b.n	800386e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_SPI_Transmit+0x64>
 8003638:	1dbb      	adds	r3, r7, #6
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003640:	231f      	movs	r3, #31
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
    goto error;
 8003648:	e111      	b.n	800386e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	225d      	movs	r2, #93	; 0x5d
 800364e:	2103      	movs	r1, #3
 8003650:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1dba      	adds	r2, r7, #6
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1dba      	adds	r2, r7, #6
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2244      	movs	r2, #68	; 0x44
 8003678:	2100      	movs	r1, #0
 800367a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2246      	movs	r2, #70	; 0x46
 8003680:	2100      	movs	r1, #0
 8003682:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	429a      	cmp	r2, r3
 800369a:	d110      	bne.n	80036be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	438a      	bics	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	01c9      	lsls	r1, r1, #7
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d007      	beq.n	80036dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	23e0      	movs	r3, #224	; 0xe0
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d94e      	bls.n	8003786 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_SPI_Transmit+0x11e>
 80036f0:	2316      	movs	r3, #22
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d13f      	bne.n	800377a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800371e:	e02c      	b.n	800377a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d112      	bne.n	8003754 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003752:	e012      	b.n	800377a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003754:	f7fe f960 	bl	8001a18 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d802      	bhi.n	800376a <HAL_SPI_Transmit+0x18e>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x194>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2203      	movs	r2, #3
 8003776:	701a      	strb	r2, [r3, #0]
          goto error;
 8003778:	e079      	b.n	800386e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1cd      	bne.n	8003720 <HAL_SPI_Transmit+0x144>
 8003784:	e04f      	b.n	8003826 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <HAL_SPI_Transmit+0x1bc>
 800378e:	2316      	movs	r3, #22
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d141      	bne.n	800381c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80037be:	e02d      	b.n	800381c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2202      	movs	r2, #2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d113      	bne.n	80037f6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037f4:	e012      	b.n	800381c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f6:	f7fe f90f 	bl	8001a18 <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d802      	bhi.n	800380c <HAL_SPI_Transmit+0x230>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_SPI_Transmit+0x236>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2203      	movs	r2, #3
 8003818:	701a      	strb	r2, [r3, #0]
          goto error;
 800381a:	e028      	b.n	800386e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1cc      	bne.n	80037c0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 fb3b 	bl	8003ea8 <SPI_EndRxTxTransaction>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003862:	231f      	movs	r3, #31
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e000      	b.n	800386e <HAL_SPI_Transmit+0x292>
  }

error:
 800386c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	225d      	movs	r2, #93	; 0x5d
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	225c      	movs	r2, #92	; 0x5c
 800387a:	2100      	movs	r1, #0
 800387c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800387e:	231f      	movs	r3, #31
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781b      	ldrb	r3, [r3, #0]
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b008      	add	sp, #32
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	001a      	movs	r2, r3
 800389a:	1cbb      	adds	r3, r7, #2
 800389c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a2:	2323      	movs	r3, #35	; 0x23
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	225c      	movs	r2, #92	; 0x5c
 80038ae:	5c9b      	ldrb	r3, [r3, r2]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x2c>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e1b5      	b.n	8003c24 <HAL_SPI_TransmitReceive+0x398>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	225c      	movs	r2, #92	; 0x5c
 80038bc:	2101      	movs	r1, #1
 80038be:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c0:	f7fe f8aa 	bl	8001a18 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c8:	201b      	movs	r0, #27
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	215d      	movs	r1, #93	; 0x5d
 80038d0:	5c52      	ldrb	r2, [r2, r1]
 80038d2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038da:	2312      	movs	r3, #18
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	1cba      	adds	r2, r7, #2
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d011      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x84>
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	2382      	movs	r3, #130	; 0x82
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d107      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_SPI_TransmitReceive+0x7a>
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d004      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003906:	2323      	movs	r3, #35	; 0x23
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
    goto error;
 800390e:	e17e      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x98>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x98>
 800391c:	1cbb      	adds	r3, r7, #2
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003924:	2323      	movs	r3, #35	; 0x23
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    goto error;
 800392c:	e16f      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	225d      	movs	r2, #93	; 0x5d
 8003932:	5c9b      	ldrb	r3, [r3, r2]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b04      	cmp	r3, #4
 8003938:	d003      	beq.n	8003942 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	225d      	movs	r2, #93	; 0x5d
 800393e:	2105      	movs	r1, #5
 8003940:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1cba      	adds	r2, r7, #2
 8003952:	2146      	movs	r1, #70	; 0x46
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1cba      	adds	r2, r7, #2
 800395c:	2144      	movs	r1, #68	; 0x44
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1cba      	adds	r2, r7, #2
 800396c:	8812      	ldrh	r2, [r2, #0]
 800396e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1cba      	adds	r2, r7, #2
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	23e0      	movs	r3, #224	; 0xe0
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	429a      	cmp	r2, r3
 800398e:	d908      	bls.n	80039a2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	49a4      	ldr	r1, [pc, #656]	; (8003c2c <HAL_SPI_TransmitReceive+0x3a0>)
 800399c:	400a      	ands	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	e008      	b.n	80039b4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0149      	lsls	r1, r1, #5
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	4013      	ands	r3, r2
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d007      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	430a      	orrs	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	23e0      	movs	r3, #224	; 0xe0
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	429a      	cmp	r2, r3
 80039dc:	d800      	bhi.n	80039e0 <HAL_SPI_TransmitReceive+0x154>
 80039de:	e07f      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x168>
 80039e8:	2312      	movs	r3, #18
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d000      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x168>
 80039f2:	e069      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a18:	e056      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2202      	movs	r2, #2
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d11b      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x1d4>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x1d4>
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d113      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x21c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2246      	movs	r2, #70	; 0x46
 8003a72:	5a9b      	ldrh	r3, [r3, r2]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	b292      	uxth	r2, r2
 8003a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2246      	movs	r2, #70	; 0x46
 8003a96:	5a9b      	ldrh	r3, [r3, r2]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b299      	uxth	r1, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2246      	movs	r2, #70	; 0x46
 8003aa2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aa8:	f7fd ffb6 	bl	8001a18 <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d807      	bhi.n	8003ac8 <HAL_SPI_TransmitReceive+0x23c>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	3301      	adds	r3, #1
 8003abc:	d004      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003abe:	2323      	movs	r3, #35	; 0x23
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	701a      	strb	r2, [r3, #0]
        goto error;
 8003ac6:	e0a2      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1a3      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x18e>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2246      	movs	r2, #70	; 0x46
 8003ad6:	5a9b      	ldrh	r3, [r3, r2]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d19d      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x18e>
 8003ade:	e085      	b.n	8003bec <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x268>
 8003ae8:	2312      	movs	r3, #18
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d000      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x268>
 8003af2:	e070      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b1a:	e05c      	b.n	8003bd6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2202      	movs	r2, #2
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d11c      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x2d8>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d017      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x2d8>
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d114      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d11e      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x324>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2246      	movs	r2, #70	; 0x46
 8003b76:	5a9b      	ldrh	r3, [r3, r2]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	001a      	movs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2246      	movs	r2, #70	; 0x46
 8003b9e:	5a9b      	ldrh	r3, [r3, r2]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b299      	uxth	r1, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2246      	movs	r2, #70	; 0x46
 8003baa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bac:	2301      	movs	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bb0:	f7fd ff32 	bl	8001a18 <HAL_GetTick>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d802      	bhi.n	8003bc6 <HAL_SPI_TransmitReceive+0x33a>
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x340>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003bcc:	2323      	movs	r3, #35	; 0x23
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	701a      	strb	r2, [r3, #0]
        goto error;
 8003bd4:	e01b      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d19d      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x290>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2246      	movs	r2, #70	; 0x46
 8003be4:	5a9b      	ldrh	r3, [r3, r2]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d197      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f958 	bl	8003ea8 <SPI_EndRxTxTransaction>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003bfc:	2323      	movs	r3, #35	; 0x23
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60
 8003c0a:	e000      	b.n	8003c0e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003c0c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	225d      	movs	r2, #93	; 0x5d
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	225c      	movs	r2, #92	; 0x5c
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c1e:	2323      	movs	r3, #35	; 0x23
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	781b      	ldrb	r3, [r3, #0]
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b00a      	add	sp, #40	; 0x28
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	ffffefff 	.word	0xffffefff

08003c30 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	225d      	movs	r2, #93	; 0x5d
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	b2db      	uxtb	r3, r3
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c58:	f7fd fede 	bl	8001a18 <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c68:	f7fd fed6 	bl	8001a18 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	0d1b      	lsrs	r3, r3, #20
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	4353      	muls	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7e:	e058      	b.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	d055      	beq.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c86:	f7fd fec7 	bl	8001a18 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d902      	bls.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d142      	bne.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	21e0      	movs	r1, #224	; 0xe0
 8003ca8:	438a      	bics	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	2382      	movs	r3, #130	; 0x82
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d113      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d005      	beq.n	8003cd0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	438a      	bics	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	019b      	lsls	r3, r3, #6
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d110      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	491a      	ldr	r1, [pc, #104]	; (8003d60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	0189      	lsls	r1, r1, #6
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	225d      	movs	r2, #93	; 0x5d
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	225c      	movs	r2, #92	; 0x5c
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e017      	b.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	425a      	negs	r2, r3
 8003d42:	4153      	adcs	r3, r2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	001a      	movs	r2, r3
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d197      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b008      	add	sp, #32
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	20000018 	.word	0x20000018
 8003d60:	ffffdfff 	.word	0xffffdfff

08003d64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d72:	2317      	movs	r3, #23
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d7a:	f7fd fe4d 	bl	8001a18 <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	18d3      	adds	r3, r2, r3
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d8a:	f7fd fe45 	bl	8001a18 <HAL_GetTick>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	0013      	movs	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	00da      	lsls	r2, r3, #3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	0d1b      	lsrs	r3, r3, #20
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	4353      	muls	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003db0:	e068      	b.n	8003e84 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	23c0      	movs	r3, #192	; 0xc0
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d10a      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	2117      	movs	r1, #23
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d055      	beq.n	8003e84 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd8:	f7fd fe1e 	bl	8001a18 <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d902      	bls.n	8003dee <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d142      	bne.n	8003e74 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	21e0      	movs	r1, #224	; 0xe0
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	2382      	movs	r3, #130	; 0x82
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d113      	bne.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d005      	beq.n	8003e22 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d107      	bne.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	438a      	bics	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d110      	bne.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0189      	lsls	r1, r1, #6
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	225d      	movs	r2, #93	; 0x5d
 8003e64:	2101      	movs	r1, #1
 8003e66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	225c      	movs	r2, #92	; 0x5c
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e010      	b.n	8003e96 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d18e      	bne.n	8003db2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b00a      	add	sp, #40	; 0x28
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000018 	.word	0x20000018
 8003ea4:	ffffdfff 	.word	0xffffdfff

08003ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	23c0      	movs	r3, #192	; 0xc0
 8003eb8:	0159      	lsls	r1, r3, #5
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	0013      	movs	r3, r2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f7ff ff4e 	bl	8003d64 <SPI_WaitFifoStateUntilTimeout>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d007      	beq.n	8003edc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e027      	b.n	8003f2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	f7ff fead 	bl	8003c48 <SPI_WaitFlagStateUntilTimeout>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d007      	beq.n	8003f02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e014      	b.n	8003f2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	23c0      	movs	r3, #192	; 0xc0
 8003f06:	00d9      	lsls	r1, r3, #3
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0013      	movs	r3, r2
 8003f10:	2200      	movs	r2, #0
 8003f12:	f7ff ff27 	bl	8003d64 <SPI_WaitFifoStateUntilTimeout>
 8003f16:	1e03      	subs	r3, r0, #0
 8003f18:	d007      	beq.n	8003f2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	2220      	movs	r2, #32
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e000      	b.n	8003f2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b004      	add	sp, #16
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e046      	b.n	8003fd4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2284      	movs	r2, #132	; 0x84
 8003f4a:	589b      	ldr	r3, [r3, r2]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fd fbbc 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2284      	movs	r2, #132	; 0x84
 8003f64:	2124      	movs	r1, #36	; 0x24
 8003f66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	438a      	bics	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f8dc 	bl	8004138 <UART_SetConfig>
 8003f80:	0003      	movs	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e024      	b.n	8003fd4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f000 fa39 	bl	800440c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	490d      	ldr	r1, [pc, #52]	; (8003fdc <HAL_UART_Init+0xa8>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	212a      	movs	r1, #42	; 0x2a
 8003fb6:	438a      	bics	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 fad1 	bl	8004574 <UART_CheckIdleState>
 8003fd2:	0003      	movs	r3, r0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	ffffb7ff 	.word	0xffffb7ff

08003fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	1dbb      	adds	r3, r7, #6
 8003fee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2284      	movs	r2, #132	; 0x84
 8003ff4:	589b      	ldr	r3, [r3, r2]
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d000      	beq.n	8003ffc <HAL_UART_Transmit+0x1c>
 8003ffa:	e097      	b.n	800412c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_UART_Transmit+0x2a>
 8004002:	1dbb      	adds	r3, r7, #6
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e08f      	b.n	800412e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	429a      	cmp	r2, r3
 8004018:	d109      	bne.n	800402e <HAL_UART_Transmit+0x4e>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2201      	movs	r2, #1
 8004026:	4013      	ands	r3, r2
 8004028:	d001      	beq.n	800402e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07f      	b.n	800412e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	5c9b      	ldrb	r3, [r3, r2]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Transmit+0x5c>
 8004038:	2302      	movs	r3, #2
 800403a:	e078      	b.n	800412e <HAL_UART_Transmit+0x14e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	2101      	movs	r1, #1
 8004042:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	228c      	movs	r2, #140	; 0x8c
 8004048:	2100      	movs	r1, #0
 800404a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2284      	movs	r2, #132	; 0x84
 8004050:	2121      	movs	r1, #33	; 0x21
 8004052:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004054:	f7fd fce0 	bl	8001a18 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1dba      	adds	r2, r7, #6
 8004060:	2154      	movs	r1, #84	; 0x54
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1dba      	adds	r2, r7, #6
 800406a:	2156      	movs	r1, #86	; 0x56
 800406c:	8812      	ldrh	r2, [r2, #0]
 800406e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	015b      	lsls	r3, r3, #5
 8004078:	429a      	cmp	r2, r3
 800407a:	d108      	bne.n	800408e <HAL_UART_Transmit+0xae>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e003      	b.n	8004096 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800409e:	e02c      	b.n	80040fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	0013      	movs	r3, r2
 80040aa:	2200      	movs	r2, #0
 80040ac:	2180      	movs	r1, #128	; 0x80
 80040ae:	f000 faab 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d001      	beq.n	80040ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e039      	b.n	800412e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	001a      	movs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	05d2      	lsls	r2, r2, #23
 80040cc:	0dd2      	lsrs	r2, r2, #23
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	3302      	adds	r3, #2
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	e007      	b.n	80040e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2256      	movs	r2, #86	; 0x56
 80040ec:	5a9b      	ldrh	r3, [r3, r2]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b299      	uxth	r1, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2256      	movs	r2, #86	; 0x56
 80040f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2256      	movs	r2, #86	; 0x56
 80040fe:	5a9b      	ldrh	r3, [r3, r2]
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1cc      	bne.n	80040a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	0013      	movs	r3, r2
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	; 0x40
 8004114:	f000 fa78 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e006      	b.n	800412e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2284      	movs	r2, #132	; 0x84
 8004124:	2120      	movs	r1, #32
 8004126:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b008      	add	sp, #32
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004140:	231a      	movs	r3, #26
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	4313      	orrs	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4aa1      	ldr	r2, [pc, #644]	; (80043ec <UART_SetConfig+0x2b4>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a9c      	ldr	r2, [pc, #624]	; (80043f0 <UART_SetConfig+0x2b8>)
 800417e:	4013      	ands	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	4313      	orrs	r3, r2
 800419c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a93      	ldr	r2, [pc, #588]	; (80043f4 <UART_SetConfig+0x2bc>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	220f      	movs	r2, #15
 80041bc:	4393      	bics	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a89      	ldr	r2, [pc, #548]	; (80043f8 <UART_SetConfig+0x2c0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d127      	bne.n	8004226 <UART_SetConfig+0xee>
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <UART_SetConfig+0x2c4>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	2203      	movs	r2, #3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d017      	beq.n	8004212 <UART_SetConfig+0xda>
 80041e2:	d81b      	bhi.n	800421c <UART_SetConfig+0xe4>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d00a      	beq.n	80041fe <UART_SetConfig+0xc6>
 80041e8:	d818      	bhi.n	800421c <UART_SetConfig+0xe4>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0xbc>
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d00a      	beq.n	8004208 <UART_SetConfig+0xd0>
 80041f2:	e013      	b.n	800421c <UART_SetConfig+0xe4>
 80041f4:	231b      	movs	r3, #27
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e021      	b.n	8004242 <UART_SetConfig+0x10a>
 80041fe:	231b      	movs	r3, #27
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e01c      	b.n	8004242 <UART_SetConfig+0x10a>
 8004208:	231b      	movs	r3, #27
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2204      	movs	r2, #4
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e017      	b.n	8004242 <UART_SetConfig+0x10a>
 8004212:	231b      	movs	r3, #27
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2208      	movs	r2, #8
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e012      	b.n	8004242 <UART_SetConfig+0x10a>
 800421c:	231b      	movs	r3, #27
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2210      	movs	r2, #16
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x10a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <UART_SetConfig+0x2c8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d104      	bne.n	800423a <UART_SetConfig+0x102>
 8004230:	231b      	movs	r3, #27
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e003      	b.n	8004242 <UART_SetConfig+0x10a>
 800423a:	231b      	movs	r3, #27
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2210      	movs	r2, #16
 8004240:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	429a      	cmp	r2, r3
 800424c:	d000      	beq.n	8004250 <UART_SetConfig+0x118>
 800424e:	e065      	b.n	800431c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004250:	231b      	movs	r3, #27
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b08      	cmp	r3, #8
 8004258:	d015      	beq.n	8004286 <UART_SetConfig+0x14e>
 800425a:	dc18      	bgt.n	800428e <UART_SetConfig+0x156>
 800425c:	2b04      	cmp	r3, #4
 800425e:	d00d      	beq.n	800427c <UART_SetConfig+0x144>
 8004260:	dc15      	bgt.n	800428e <UART_SetConfig+0x156>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <UART_SetConfig+0x134>
 8004266:	2b02      	cmp	r3, #2
 8004268:	d005      	beq.n	8004276 <UART_SetConfig+0x13e>
 800426a:	e010      	b.n	800428e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426c:	f7fe ffc2 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8004270:	0003      	movs	r3, r0
 8004272:	617b      	str	r3, [r7, #20]
        break;
 8004274:	e012      	b.n	800429c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004276:	4b63      	ldr	r3, [pc, #396]	; (8004404 <UART_SetConfig+0x2cc>)
 8004278:	617b      	str	r3, [r7, #20]
        break;
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427c:	f7fe ff2e 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8004280:	0003      	movs	r3, r0
 8004282:	617b      	str	r3, [r7, #20]
        break;
 8004284:	e00a      	b.n	800429c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	617b      	str	r3, [r7, #20]
        break;
 800428c:	e006      	b.n	800429c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004292:	231a      	movs	r3, #26
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
        break;
 800429a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d100      	bne.n	80042a4 <UART_SetConfig+0x16c>
 80042a2:	e08d      	b.n	80043c0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <UART_SetConfig+0x2d0>)
 80042aa:	0052      	lsls	r2, r2, #1
 80042ac:	5ad3      	ldrh	r3, [r2, r3]
 80042ae:	0019      	movs	r1, r3
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f7fb ff2f 	bl	8000114 <__udivsi3>
 80042b6:	0003      	movs	r3, r0
 80042b8:	005a      	lsls	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	18d2      	adds	r2, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0019      	movs	r1, r3
 80042c8:	0010      	movs	r0, r2
 80042ca:	f7fb ff23 	bl	8000114 <__udivsi3>
 80042ce:	0003      	movs	r3, r0
 80042d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d91c      	bls.n	8004312 <UART_SetConfig+0x1da>
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	025b      	lsls	r3, r3, #9
 80042de:	429a      	cmp	r2, r3
 80042e0:	d217      	bcs.n	8004312 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	200e      	movs	r0, #14
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	210f      	movs	r1, #15
 80042ec:	438a      	bics	r2, r1
 80042ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2207      	movs	r2, #7
 80042f8:	4013      	ands	r3, r2
 80042fa:	b299      	uxth	r1, r3
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	183a      	adds	r2, r7, r0
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	183a      	adds	r2, r7, r0
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	60da      	str	r2, [r3, #12]
 8004310:	e056      	b.n	80043c0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004312:	231a      	movs	r3, #26
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e051      	b.n	80043c0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800431c:	231b      	movs	r3, #27
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b08      	cmp	r3, #8
 8004324:	d015      	beq.n	8004352 <UART_SetConfig+0x21a>
 8004326:	dc18      	bgt.n	800435a <UART_SetConfig+0x222>
 8004328:	2b04      	cmp	r3, #4
 800432a:	d00d      	beq.n	8004348 <UART_SetConfig+0x210>
 800432c:	dc15      	bgt.n	800435a <UART_SetConfig+0x222>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x200>
 8004332:	2b02      	cmp	r3, #2
 8004334:	d005      	beq.n	8004342 <UART_SetConfig+0x20a>
 8004336:	e010      	b.n	800435a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fe ff5c 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 800433c:	0003      	movs	r3, r0
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e012      	b.n	8004368 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004342:	4b30      	ldr	r3, [pc, #192]	; (8004404 <UART_SetConfig+0x2cc>)
 8004344:	617b      	str	r3, [r7, #20]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004348:	f7fe fec8 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800434c:	0003      	movs	r3, r0
 800434e:	617b      	str	r3, [r7, #20]
        break;
 8004350:	e00a      	b.n	8004368 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	617b      	str	r3, [r7, #20]
        break;
 8004358:	e006      	b.n	8004368 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800435e:	231a      	movs	r3, #26
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
        break;
 8004366:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d028      	beq.n	80043c0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <UART_SetConfig+0x2d0>)
 8004374:	0052      	lsls	r2, r2, #1
 8004376:	5ad3      	ldrh	r3, [r2, r3]
 8004378:	0019      	movs	r1, r3
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7fb feca 	bl	8000114 <__udivsi3>
 8004380:	0003      	movs	r3, r0
 8004382:	001a      	movs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	18d2      	adds	r2, r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0019      	movs	r1, r3
 8004392:	0010      	movs	r0, r2
 8004394:	f7fb febe 	bl	8000114 <__udivsi3>
 8004398:	0003      	movs	r3, r0
 800439a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b0f      	cmp	r3, #15
 80043a0:	d90a      	bls.n	80043b8 <UART_SetConfig+0x280>
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d205      	bcs.n	80043b8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e003      	b.n	80043c0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80043b8:	231a      	movs	r3, #26
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	226a      	movs	r2, #106	; 0x6a
 80043c4:	2101      	movs	r1, #1
 80043c6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2268      	movs	r2, #104	; 0x68
 80043cc:	2101      	movs	r1, #1
 80043ce:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043dc:	231a      	movs	r3, #26
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b008      	add	sp, #32
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	cfff69f3 	.word	0xcfff69f3
 80043f0:	ffffcfff 	.word	0xffffcfff
 80043f4:	11fff4ff 	.word	0x11fff4ff
 80043f8:	40013800 	.word	0x40013800
 80043fc:	40021000 	.word	0x40021000
 8004400:	40004400 	.word	0x40004400
 8004404:	00f42400 	.word	0x00f42400
 8004408:	0800528c 	.word	0x0800528c

0800440c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	2201      	movs	r2, #1
 800441a:	4013      	ands	r3, r2
 800441c:	d00b      	beq.n	8004436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <UART_AdvFeatureConfig+0x144>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2202      	movs	r2, #2
 800443c:	4013      	ands	r3, r2
 800443e:	d00b      	beq.n	8004458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4a43      	ldr	r2, [pc, #268]	; (8004554 <UART_AdvFeatureConfig+0x148>)
 8004448:	4013      	ands	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	2204      	movs	r2, #4
 800445e:	4013      	ands	r3, r2
 8004460:	d00b      	beq.n	800447a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <UART_AdvFeatureConfig+0x14c>)
 800446a:	4013      	ands	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	2208      	movs	r2, #8
 8004480:	4013      	ands	r3, r2
 8004482:	d00b      	beq.n	800449c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a34      	ldr	r2, [pc, #208]	; (800455c <UART_AdvFeatureConfig+0x150>)
 800448c:	4013      	ands	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	2210      	movs	r2, #16
 80044a2:	4013      	ands	r3, r2
 80044a4:	d00b      	beq.n	80044be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <UART_AdvFeatureConfig+0x154>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2220      	movs	r2, #32
 80044c4:	4013      	ands	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	4a25      	ldr	r2, [pc, #148]	; (8004564 <UART_AdvFeatureConfig+0x158>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	4013      	ands	r3, r2
 80044e8:	d01d      	beq.n	8004526 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <UART_AdvFeatureConfig+0x15c>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	035b      	lsls	r3, r3, #13
 800450a:	429a      	cmp	r2, r3
 800450c:	d10b      	bne.n	8004526 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <UART_AdvFeatureConfig+0x160>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	4013      	ands	r3, r2
 800452e:	d00b      	beq.n	8004548 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <UART_AdvFeatureConfig+0x164>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }
}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b002      	add	sp, #8
 800454e:	bd80      	pop	{r7, pc}
 8004550:	fffdffff 	.word	0xfffdffff
 8004554:	fffeffff 	.word	0xfffeffff
 8004558:	fffbffff 	.word	0xfffbffff
 800455c:	ffff7fff 	.word	0xffff7fff
 8004560:	ffffefff 	.word	0xffffefff
 8004564:	ffffdfff 	.word	0xffffdfff
 8004568:	ffefffff 	.word	0xffefffff
 800456c:	ff9fffff 	.word	0xff9fffff
 8004570:	fff7ffff 	.word	0xfff7ffff

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	228c      	movs	r2, #140	; 0x8c
 8004580:	2100      	movs	r1, #0
 8004582:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004584:	f7fd fa48 	bl	8001a18 <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2208      	movs	r2, #8
 8004594:	4013      	ands	r3, r2
 8004596:	2b08      	cmp	r3, #8
 8004598:	d10c      	bne.n	80045b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	0391      	lsls	r1, r2, #14
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <UART_CheckIdleState+0x90>)
 80045a4:	9200      	str	r2, [sp, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f000 f82e 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045ac:	1e03      	subs	r3, r0, #0
 80045ae:	d001      	beq.n	80045b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e023      	b.n	80045fc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2204      	movs	r2, #4
 80045bc:	4013      	ands	r3, r2
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d10c      	bne.n	80045dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	03d1      	lsls	r1, r2, #15
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <UART_CheckIdleState+0x90>)
 80045cc:	9200      	str	r2, [sp, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f000 f81a 	bl	8004608 <UART_WaitOnFlagUntilTimeout>
 80045d4:	1e03      	subs	r3, r0, #0
 80045d6:	d001      	beq.n	80045dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e00f      	b.n	80045fc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2284      	movs	r2, #132	; 0x84
 80045e0:	2120      	movs	r1, #32
 80045e2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2288      	movs	r2, #136	; 0x88
 80045e8:	2120      	movs	r1, #32
 80045ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b004      	add	sp, #16
 8004602:	bd80      	pop	{r7, pc}
 8004604:	01ffffff 	.word	0x01ffffff

08004608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b094      	sub	sp, #80	; 0x50
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004618:	e0a7      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461c:	3301      	adds	r3, #1
 800461e:	d100      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004620:	e0a3      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd f9f9 	bl	8001a18 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <UART_WaitOnFlagUntilTimeout+0x30>
 8004632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13f      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004638:	f3ef 8310 	mrs	r3, PRIMASK
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
 8004642:	2301      	movs	r3, #1
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	f383 8810 	msr	PRIMASK, r3
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	494e      	ldr	r1, [pc, #312]	; (8004794 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466a:	f3ef 8310 	mrs	r3, PRIMASK
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
 8004674:	2301      	movs	r3, #1
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f383 8810 	msr	PRIMASK, r3
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2101      	movs	r1, #1
 800468c:	438a      	bics	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2284      	movs	r2, #132	; 0x84
 80046a0:	2120      	movs	r1, #32
 80046a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2288      	movs	r2, #136	; 0x88
 80046a8:	2120      	movs	r1, #32
 80046aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e069      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	d052      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	401a      	ands	r2, r3
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d148      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e2:	f3ef 8310 	mrs	r3, PRIMASK
 80046e6:	613b      	str	r3, [r7, #16]
  return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4924      	ldr	r1, [pc, #144]	; (8004794 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f383 8810 	msr	PRIMASK, r3
}
 8004712:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	61fb      	str	r3, [r7, #28]
  return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	64bb      	str	r3, [r7, #72]	; 0x48
 800471e:	2301      	movs	r3, #1
 8004720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	438a      	bics	r2, r1
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2284      	movs	r2, #132	; 0x84
 800474a:	2120      	movs	r1, #32
 800474c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2288      	movs	r2, #136	; 0x88
 8004752:	2120      	movs	r1, #32
 8004754:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	228c      	movs	r2, #140	; 0x8c
 800475a:	2120      	movs	r1, #32
 800475c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2280      	movs	r2, #128	; 0x80
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e010      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	425a      	negs	r2, r3
 800477a:	4153      	adcs	r3, r2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	001a      	movs	r2, r3
 8004780:	1dfb      	adds	r3, r7, #7
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d100      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x182>
 8004788:	e747      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b014      	add	sp, #80	; 0x50
 8004792:	bd80      	pop	{r7, pc}
 8004794:	fffffe5f 	.word	0xfffffe5f

08004798 <__errno>:
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <__errno+0x8>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	4770      	bx	lr
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000024 	.word	0x20000024

080047a4 <__libc_init_array>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	2600      	movs	r6, #0
 80047a8:	4d0c      	ldr	r5, [pc, #48]	; (80047dc <__libc_init_array+0x38>)
 80047aa:	4c0d      	ldr	r4, [pc, #52]	; (80047e0 <__libc_init_array+0x3c>)
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	42a6      	cmp	r6, r4
 80047b2:	d109      	bne.n	80047c8 <__libc_init_array+0x24>
 80047b4:	2600      	movs	r6, #0
 80047b6:	f000 fc8b 	bl	80050d0 <_init>
 80047ba:	4d0a      	ldr	r5, [pc, #40]	; (80047e4 <__libc_init_array+0x40>)
 80047bc:	4c0a      	ldr	r4, [pc, #40]	; (80047e8 <__libc_init_array+0x44>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	42a6      	cmp	r6, r4
 80047c4:	d105      	bne.n	80047d2 <__libc_init_array+0x2e>
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	00b3      	lsls	r3, r6, #2
 80047ca:	58eb      	ldr	r3, [r5, r3]
 80047cc:	4798      	blx	r3
 80047ce:	3601      	adds	r6, #1
 80047d0:	e7ee      	b.n	80047b0 <__libc_init_array+0xc>
 80047d2:	00b3      	lsls	r3, r6, #2
 80047d4:	58eb      	ldr	r3, [r5, r3]
 80047d6:	4798      	blx	r3
 80047d8:	3601      	adds	r6, #1
 80047da:	e7f2      	b.n	80047c2 <__libc_init_array+0x1e>
 80047dc:	080052e0 	.word	0x080052e0
 80047e0:	080052e0 	.word	0x080052e0
 80047e4:	080052e0 	.word	0x080052e0
 80047e8:	080052e4 	.word	0x080052e4

080047ec <memcpy>:
 80047ec:	2300      	movs	r3, #0
 80047ee:	b510      	push	{r4, lr}
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d100      	bne.n	80047f6 <memcpy+0xa>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	5ccc      	ldrb	r4, [r1, r3]
 80047f8:	54c4      	strb	r4, [r0, r3]
 80047fa:	3301      	adds	r3, #1
 80047fc:	e7f8      	b.n	80047f0 <memcpy+0x4>

080047fe <memset>:
 80047fe:	0003      	movs	r3, r0
 8004800:	1882      	adds	r2, r0, r2
 8004802:	4293      	cmp	r3, r2
 8004804:	d100      	bne.n	8004808 <memset+0xa>
 8004806:	4770      	bx	lr
 8004808:	7019      	strb	r1, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	e7f9      	b.n	8004802 <memset+0x4>
	...

08004810 <siprintf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	b500      	push	{lr}
 8004814:	490b      	ldr	r1, [pc, #44]	; (8004844 <siprintf+0x34>)
 8004816:	b09c      	sub	sp, #112	; 0x70
 8004818:	ab1d      	add	r3, sp, #116	; 0x74
 800481a:	9002      	str	r0, [sp, #8]
 800481c:	9006      	str	r0, [sp, #24]
 800481e:	9107      	str	r1, [sp, #28]
 8004820:	9104      	str	r1, [sp, #16]
 8004822:	4809      	ldr	r0, [pc, #36]	; (8004848 <siprintf+0x38>)
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <siprintf+0x3c>)
 8004826:	cb04      	ldmia	r3!, {r2}
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	6800      	ldr	r0, [r0, #0]
 800482c:	a902      	add	r1, sp, #8
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	f000 f870 	bl	8004914 <_svfiprintf_r>
 8004834:	2300      	movs	r3, #0
 8004836:	9a02      	ldr	r2, [sp, #8]
 8004838:	7013      	strb	r3, [r2, #0]
 800483a:	b01c      	add	sp, #112	; 0x70
 800483c:	bc08      	pop	{r3}
 800483e:	b003      	add	sp, #12
 8004840:	4718      	bx	r3
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	7fffffff 	.word	0x7fffffff
 8004848:	20000024 	.word	0x20000024
 800484c:	ffff0208 	.word	0xffff0208

08004850 <__ssputs_r>:
 8004850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004852:	688e      	ldr	r6, [r1, #8]
 8004854:	b085      	sub	sp, #20
 8004856:	0007      	movs	r7, r0
 8004858:	000c      	movs	r4, r1
 800485a:	9203      	str	r2, [sp, #12]
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	429e      	cmp	r6, r3
 8004860:	d83c      	bhi.n	80048dc <__ssputs_r+0x8c>
 8004862:	2390      	movs	r3, #144	; 0x90
 8004864:	898a      	ldrh	r2, [r1, #12]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	421a      	tst	r2, r3
 800486a:	d034      	beq.n	80048d6 <__ssputs_r+0x86>
 800486c:	6909      	ldr	r1, [r1, #16]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6960      	ldr	r0, [r4, #20]
 8004872:	1a5b      	subs	r3, r3, r1
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	2303      	movs	r3, #3
 8004878:	4343      	muls	r3, r0
 800487a:	0fdd      	lsrs	r5, r3, #31
 800487c:	18ed      	adds	r5, r5, r3
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	9802      	ldr	r0, [sp, #8]
 8004882:	3301      	adds	r3, #1
 8004884:	181b      	adds	r3, r3, r0
 8004886:	106d      	asrs	r5, r5, #1
 8004888:	42ab      	cmp	r3, r5
 800488a:	d900      	bls.n	800488e <__ssputs_r+0x3e>
 800488c:	001d      	movs	r5, r3
 800488e:	0553      	lsls	r3, r2, #21
 8004890:	d532      	bpl.n	80048f8 <__ssputs_r+0xa8>
 8004892:	0029      	movs	r1, r5
 8004894:	0038      	movs	r0, r7
 8004896:	f000 fb49 	bl	8004f2c <_malloc_r>
 800489a:	1e06      	subs	r6, r0, #0
 800489c:	d109      	bne.n	80048b2 <__ssputs_r+0x62>
 800489e:	230c      	movs	r3, #12
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	2340      	movs	r3, #64	; 0x40
 80048a4:	2001      	movs	r0, #1
 80048a6:	89a2      	ldrh	r2, [r4, #12]
 80048a8:	4240      	negs	r0, r0
 80048aa:	4313      	orrs	r3, r2
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	b005      	add	sp, #20
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	9a02      	ldr	r2, [sp, #8]
 80048b4:	6921      	ldr	r1, [r4, #16]
 80048b6:	f7ff ff99 	bl	80047ec <memcpy>
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <__ssputs_r+0xc0>)
 80048be:	401a      	ands	r2, r3
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	4313      	orrs	r3, r2
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	9b02      	ldr	r3, [sp, #8]
 80048c8:	6126      	str	r6, [r4, #16]
 80048ca:	18f6      	adds	r6, r6, r3
 80048cc:	6026      	str	r6, [r4, #0]
 80048ce:	6165      	str	r5, [r4, #20]
 80048d0:	9e01      	ldr	r6, [sp, #4]
 80048d2:	1aed      	subs	r5, r5, r3
 80048d4:	60a5      	str	r5, [r4, #8]
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	429e      	cmp	r6, r3
 80048da:	d900      	bls.n	80048de <__ssputs_r+0x8e>
 80048dc:	9e01      	ldr	r6, [sp, #4]
 80048de:	0032      	movs	r2, r6
 80048e0:	9903      	ldr	r1, [sp, #12]
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	f000 faa3 	bl	8004e2e <memmove>
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	2000      	movs	r0, #0
 80048ec:	1b9b      	subs	r3, r3, r6
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	199e      	adds	r6, r3, r6
 80048f4:	6026      	str	r6, [r4, #0]
 80048f6:	e7da      	b.n	80048ae <__ssputs_r+0x5e>
 80048f8:	002a      	movs	r2, r5
 80048fa:	0038      	movs	r0, r7
 80048fc:	f000 fb8c 	bl	8005018 <_realloc_r>
 8004900:	1e06      	subs	r6, r0, #0
 8004902:	d1e0      	bne.n	80048c6 <__ssputs_r+0x76>
 8004904:	0038      	movs	r0, r7
 8004906:	6921      	ldr	r1, [r4, #16]
 8004908:	f000 faa4 	bl	8004e54 <_free_r>
 800490c:	e7c7      	b.n	800489e <__ssputs_r+0x4e>
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	fffffb7f 	.word	0xfffffb7f

08004914 <_svfiprintf_r>:
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	b0a1      	sub	sp, #132	; 0x84
 8004918:	9003      	str	r0, [sp, #12]
 800491a:	001d      	movs	r5, r3
 800491c:	898b      	ldrh	r3, [r1, #12]
 800491e:	000f      	movs	r7, r1
 8004920:	0016      	movs	r6, r2
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	d511      	bpl.n	800494a <_svfiprintf_r+0x36>
 8004926:	690b      	ldr	r3, [r1, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10e      	bne.n	800494a <_svfiprintf_r+0x36>
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	f000 fafd 	bl	8004f2c <_malloc_r>
 8004932:	6038      	str	r0, [r7, #0]
 8004934:	6138      	str	r0, [r7, #16]
 8004936:	2800      	cmp	r0, #0
 8004938:	d105      	bne.n	8004946 <_svfiprintf_r+0x32>
 800493a:	230c      	movs	r3, #12
 800493c:	9a03      	ldr	r2, [sp, #12]
 800493e:	3801      	subs	r0, #1
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	b021      	add	sp, #132	; 0x84
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	ac08      	add	r4, sp, #32
 800494e:	6163      	str	r3, [r4, #20]
 8004950:	3320      	adds	r3, #32
 8004952:	7663      	strb	r3, [r4, #25]
 8004954:	3310      	adds	r3, #16
 8004956:	76a3      	strb	r3, [r4, #26]
 8004958:	9507      	str	r5, [sp, #28]
 800495a:	0035      	movs	r5, r6
 800495c:	782b      	ldrb	r3, [r5, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <_svfiprintf_r+0x52>
 8004962:	2b25      	cmp	r3, #37	; 0x25
 8004964:	d147      	bne.n	80049f6 <_svfiprintf_r+0xe2>
 8004966:	1bab      	subs	r3, r5, r6
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	42b5      	cmp	r5, r6
 800496c:	d00c      	beq.n	8004988 <_svfiprintf_r+0x74>
 800496e:	0032      	movs	r2, r6
 8004970:	0039      	movs	r1, r7
 8004972:	9803      	ldr	r0, [sp, #12]
 8004974:	f7ff ff6c 	bl	8004850 <__ssputs_r>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d100      	bne.n	800497e <_svfiprintf_r+0x6a>
 800497c:	e0ae      	b.n	8004adc <_svfiprintf_r+0x1c8>
 800497e:	6962      	ldr	r2, [r4, #20]
 8004980:	9b05      	ldr	r3, [sp, #20]
 8004982:	4694      	mov	ip, r2
 8004984:	4463      	add	r3, ip
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	782b      	ldrb	r3, [r5, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d100      	bne.n	8004990 <_svfiprintf_r+0x7c>
 800498e:	e0a5      	b.n	8004adc <_svfiprintf_r+0x1c8>
 8004990:	2201      	movs	r2, #1
 8004992:	2300      	movs	r3, #0
 8004994:	4252      	negs	r2, r2
 8004996:	6062      	str	r2, [r4, #4]
 8004998:	a904      	add	r1, sp, #16
 800499a:	3254      	adds	r2, #84	; 0x54
 800499c:	1852      	adds	r2, r2, r1
 800499e:	1c6e      	adds	r6, r5, #1
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	60e3      	str	r3, [r4, #12]
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	7013      	strb	r3, [r2, #0]
 80049a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80049aa:	2205      	movs	r2, #5
 80049ac:	7831      	ldrb	r1, [r6, #0]
 80049ae:	4854      	ldr	r0, [pc, #336]	; (8004b00 <_svfiprintf_r+0x1ec>)
 80049b0:	f000 fa32 	bl	8004e18 <memchr>
 80049b4:	1c75      	adds	r5, r6, #1
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d11f      	bne.n	80049fa <_svfiprintf_r+0xe6>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	06d3      	lsls	r3, r2, #27
 80049be:	d504      	bpl.n	80049ca <_svfiprintf_r+0xb6>
 80049c0:	2353      	movs	r3, #83	; 0x53
 80049c2:	a904      	add	r1, sp, #16
 80049c4:	185b      	adds	r3, r3, r1
 80049c6:	2120      	movs	r1, #32
 80049c8:	7019      	strb	r1, [r3, #0]
 80049ca:	0713      	lsls	r3, r2, #28
 80049cc:	d504      	bpl.n	80049d8 <_svfiprintf_r+0xc4>
 80049ce:	2353      	movs	r3, #83	; 0x53
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	185b      	adds	r3, r3, r1
 80049d4:	212b      	movs	r1, #43	; 0x2b
 80049d6:	7019      	strb	r1, [r3, #0]
 80049d8:	7833      	ldrb	r3, [r6, #0]
 80049da:	2b2a      	cmp	r3, #42	; 0x2a
 80049dc:	d016      	beq.n	8004a0c <_svfiprintf_r+0xf8>
 80049de:	0035      	movs	r5, r6
 80049e0:	2100      	movs	r1, #0
 80049e2:	200a      	movs	r0, #10
 80049e4:	68e3      	ldr	r3, [r4, #12]
 80049e6:	782a      	ldrb	r2, [r5, #0]
 80049e8:	1c6e      	adds	r6, r5, #1
 80049ea:	3a30      	subs	r2, #48	; 0x30
 80049ec:	2a09      	cmp	r2, #9
 80049ee:	d94e      	bls.n	8004a8e <_svfiprintf_r+0x17a>
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d111      	bne.n	8004a18 <_svfiprintf_r+0x104>
 80049f4:	e017      	b.n	8004a26 <_svfiprintf_r+0x112>
 80049f6:	3501      	adds	r5, #1
 80049f8:	e7b0      	b.n	800495c <_svfiprintf_r+0x48>
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <_svfiprintf_r+0x1ec>)
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	1ac0      	subs	r0, r0, r3
 8004a00:	2301      	movs	r3, #1
 8004a02:	4083      	lsls	r3, r0
 8004a04:	4313      	orrs	r3, r2
 8004a06:	002e      	movs	r6, r5
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	e7ce      	b.n	80049aa <_svfiprintf_r+0x96>
 8004a0c:	9b07      	ldr	r3, [sp, #28]
 8004a0e:	1d19      	adds	r1, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	9107      	str	r1, [sp, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db01      	blt.n	8004a1c <_svfiprintf_r+0x108>
 8004a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1a:	e004      	b.n	8004a26 <_svfiprintf_r+0x112>
 8004a1c:	425b      	negs	r3, r3
 8004a1e:	60e3      	str	r3, [r4, #12]
 8004a20:	2302      	movs	r3, #2
 8004a22:	4313      	orrs	r3, r2
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	782b      	ldrb	r3, [r5, #0]
 8004a28:	2b2e      	cmp	r3, #46	; 0x2e
 8004a2a:	d10a      	bne.n	8004a42 <_svfiprintf_r+0x12e>
 8004a2c:	786b      	ldrb	r3, [r5, #1]
 8004a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a30:	d135      	bne.n	8004a9e <_svfiprintf_r+0x18a>
 8004a32:	9b07      	ldr	r3, [sp, #28]
 8004a34:	3502      	adds	r5, #2
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9207      	str	r2, [sp, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db2b      	blt.n	8004a98 <_svfiprintf_r+0x184>
 8004a40:	9309      	str	r3, [sp, #36]	; 0x24
 8004a42:	4e30      	ldr	r6, [pc, #192]	; (8004b04 <_svfiprintf_r+0x1f0>)
 8004a44:	2203      	movs	r2, #3
 8004a46:	0030      	movs	r0, r6
 8004a48:	7829      	ldrb	r1, [r5, #0]
 8004a4a:	f000 f9e5 	bl	8004e18 <memchr>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d006      	beq.n	8004a60 <_svfiprintf_r+0x14c>
 8004a52:	2340      	movs	r3, #64	; 0x40
 8004a54:	1b80      	subs	r0, r0, r6
 8004a56:	4083      	lsls	r3, r0
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	7829      	ldrb	r1, [r5, #0]
 8004a62:	2206      	movs	r2, #6
 8004a64:	4828      	ldr	r0, [pc, #160]	; (8004b08 <_svfiprintf_r+0x1f4>)
 8004a66:	1c6e      	adds	r6, r5, #1
 8004a68:	7621      	strb	r1, [r4, #24]
 8004a6a:	f000 f9d5 	bl	8004e18 <memchr>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d03c      	beq.n	8004aec <_svfiprintf_r+0x1d8>
 8004a72:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <_svfiprintf_r+0x1f8>)
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d125      	bne.n	8004ac4 <_svfiprintf_r+0x1b0>
 8004a78:	2207      	movs	r2, #7
 8004a7a:	9b07      	ldr	r3, [sp, #28]
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	4393      	bics	r3, r2
 8004a80:	3308      	adds	r3, #8
 8004a82:	9307      	str	r3, [sp, #28]
 8004a84:	6963      	ldr	r3, [r4, #20]
 8004a86:	9a04      	ldr	r2, [sp, #16]
 8004a88:	189b      	adds	r3, r3, r2
 8004a8a:	6163      	str	r3, [r4, #20]
 8004a8c:	e765      	b.n	800495a <_svfiprintf_r+0x46>
 8004a8e:	4343      	muls	r3, r0
 8004a90:	0035      	movs	r5, r6
 8004a92:	2101      	movs	r1, #1
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	e7a6      	b.n	80049e6 <_svfiprintf_r+0xd2>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	425b      	negs	r3, r3
 8004a9c:	e7d0      	b.n	8004a40 <_svfiprintf_r+0x12c>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	200a      	movs	r0, #10
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	3501      	adds	r5, #1
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	7829      	ldrb	r1, [r5, #0]
 8004aaa:	1c6e      	adds	r6, r5, #1
 8004aac:	3930      	subs	r1, #48	; 0x30
 8004aae:	2909      	cmp	r1, #9
 8004ab0:	d903      	bls.n	8004aba <_svfiprintf_r+0x1a6>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0c5      	beq.n	8004a42 <_svfiprintf_r+0x12e>
 8004ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab8:	e7c3      	b.n	8004a42 <_svfiprintf_r+0x12e>
 8004aba:	4342      	muls	r2, r0
 8004abc:	0035      	movs	r5, r6
 8004abe:	2301      	movs	r3, #1
 8004ac0:	1852      	adds	r2, r2, r1
 8004ac2:	e7f1      	b.n	8004aa8 <_svfiprintf_r+0x194>
 8004ac4:	ab07      	add	r3, sp, #28
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	003a      	movs	r2, r7
 8004aca:	0021      	movs	r1, r4
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_svfiprintf_r+0x1fc>)
 8004ace:	9803      	ldr	r0, [sp, #12]
 8004ad0:	e000      	b.n	8004ad4 <_svfiprintf_r+0x1c0>
 8004ad2:	bf00      	nop
 8004ad4:	9004      	str	r0, [sp, #16]
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	d1d3      	bne.n	8004a84 <_svfiprintf_r+0x170>
 8004adc:	89bb      	ldrh	r3, [r7, #12]
 8004ade:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ae0:	065b      	lsls	r3, r3, #25
 8004ae2:	d400      	bmi.n	8004ae6 <_svfiprintf_r+0x1d2>
 8004ae4:	e72d      	b.n	8004942 <_svfiprintf_r+0x2e>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	4240      	negs	r0, r0
 8004aea:	e72a      	b.n	8004942 <_svfiprintf_r+0x2e>
 8004aec:	ab07      	add	r3, sp, #28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	003a      	movs	r2, r7
 8004af2:	0021      	movs	r1, r4
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <_svfiprintf_r+0x1fc>)
 8004af6:	9803      	ldr	r0, [sp, #12]
 8004af8:	f000 f87c 	bl	8004bf4 <_printf_i>
 8004afc:	e7ea      	b.n	8004ad4 <_svfiprintf_r+0x1c0>
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	080052a4 	.word	0x080052a4
 8004b04:	080052aa 	.word	0x080052aa
 8004b08:	080052ae 	.word	0x080052ae
 8004b0c:	00000000 	.word	0x00000000
 8004b10:	08004851 	.word	0x08004851

08004b14 <_printf_common>:
 8004b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b16:	0015      	movs	r5, r2
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	688a      	ldr	r2, [r1, #8]
 8004b1c:	690b      	ldr	r3, [r1, #16]
 8004b1e:	000c      	movs	r4, r1
 8004b20:	9000      	str	r0, [sp, #0]
 8004b22:	4293      	cmp	r3, r2
 8004b24:	da00      	bge.n	8004b28 <_printf_common+0x14>
 8004b26:	0013      	movs	r3, r2
 8004b28:	0022      	movs	r2, r4
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	3243      	adds	r2, #67	; 0x43
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d001      	beq.n	8004b38 <_printf_common+0x24>
 8004b34:	3301      	adds	r3, #1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	069b      	lsls	r3, r3, #26
 8004b3c:	d502      	bpl.n	8004b44 <_printf_common+0x30>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	3302      	adds	r3, #2
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	2306      	movs	r3, #6
 8004b48:	0017      	movs	r7, r2
 8004b4a:	401f      	ands	r7, r3
 8004b4c:	421a      	tst	r2, r3
 8004b4e:	d027      	beq.n	8004ba0 <_printf_common+0x8c>
 8004b50:	0023      	movs	r3, r4
 8004b52:	3343      	adds	r3, #67	; 0x43
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	4193      	sbcs	r3, r2
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d430      	bmi.n	8004bc2 <_printf_common+0xae>
 8004b60:	0022      	movs	r2, r4
 8004b62:	9901      	ldr	r1, [sp, #4]
 8004b64:	9800      	ldr	r0, [sp, #0]
 8004b66:	9e08      	ldr	r6, [sp, #32]
 8004b68:	3243      	adds	r2, #67	; 0x43
 8004b6a:	47b0      	blx	r6
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d025      	beq.n	8004bbc <_printf_common+0xa8>
 8004b70:	2306      	movs	r3, #6
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	682a      	ldr	r2, [r5, #0]
 8004b76:	68e1      	ldr	r1, [r4, #12]
 8004b78:	2500      	movs	r5, #0
 8004b7a:	4003      	ands	r3, r0
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0x74>
 8004b80:	1a8d      	subs	r5, r1, r2
 8004b82:	43eb      	mvns	r3, r5
 8004b84:	17db      	asrs	r3, r3, #31
 8004b86:	401d      	ands	r5, r3
 8004b88:	68a3      	ldr	r3, [r4, #8]
 8004b8a:	6922      	ldr	r2, [r4, #16]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	dd01      	ble.n	8004b94 <_printf_common+0x80>
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	18ed      	adds	r5, r5, r3
 8004b94:	2700      	movs	r7, #0
 8004b96:	42bd      	cmp	r5, r7
 8004b98:	d120      	bne.n	8004bdc <_printf_common+0xc8>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e010      	b.n	8004bc0 <_printf_common+0xac>
 8004b9e:	3701      	adds	r7, #1
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	682a      	ldr	r2, [r5, #0]
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	ddd2      	ble.n	8004b50 <_printf_common+0x3c>
 8004baa:	0022      	movs	r2, r4
 8004bac:	2301      	movs	r3, #1
 8004bae:	9901      	ldr	r1, [sp, #4]
 8004bb0:	9800      	ldr	r0, [sp, #0]
 8004bb2:	9e08      	ldr	r6, [sp, #32]
 8004bb4:	3219      	adds	r2, #25
 8004bb6:	47b0      	blx	r6
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d1f0      	bne.n	8004b9e <_printf_common+0x8a>
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	4240      	negs	r0, r0
 8004bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bc2:	2030      	movs	r0, #48	; 0x30
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	3143      	adds	r1, #67	; 0x43
 8004bc8:	7008      	strb	r0, [r1, #0]
 8004bca:	0021      	movs	r1, r4
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	3145      	adds	r1, #69	; 0x45
 8004bd0:	7809      	ldrb	r1, [r1, #0]
 8004bd2:	18a2      	adds	r2, r4, r2
 8004bd4:	3243      	adds	r2, #67	; 0x43
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	7011      	strb	r1, [r2, #0]
 8004bda:	e7c1      	b.n	8004b60 <_printf_common+0x4c>
 8004bdc:	0022      	movs	r2, r4
 8004bde:	2301      	movs	r3, #1
 8004be0:	9901      	ldr	r1, [sp, #4]
 8004be2:	9800      	ldr	r0, [sp, #0]
 8004be4:	9e08      	ldr	r6, [sp, #32]
 8004be6:	321a      	adds	r2, #26
 8004be8:	47b0      	blx	r6
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	d0e6      	beq.n	8004bbc <_printf_common+0xa8>
 8004bee:	3701      	adds	r7, #1
 8004bf0:	e7d1      	b.n	8004b96 <_printf_common+0x82>
	...

08004bf4 <_printf_i>:
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	b08b      	sub	sp, #44	; 0x2c
 8004bf8:	9206      	str	r2, [sp, #24]
 8004bfa:	000a      	movs	r2, r1
 8004bfc:	3243      	adds	r2, #67	; 0x43
 8004bfe:	9307      	str	r3, [sp, #28]
 8004c00:	9005      	str	r0, [sp, #20]
 8004c02:	9204      	str	r2, [sp, #16]
 8004c04:	7e0a      	ldrb	r2, [r1, #24]
 8004c06:	000c      	movs	r4, r1
 8004c08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c0a:	2a78      	cmp	r2, #120	; 0x78
 8004c0c:	d807      	bhi.n	8004c1e <_printf_i+0x2a>
 8004c0e:	2a62      	cmp	r2, #98	; 0x62
 8004c10:	d809      	bhi.n	8004c26 <_printf_i+0x32>
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	d100      	bne.n	8004c18 <_printf_i+0x24>
 8004c16:	e0c1      	b.n	8004d9c <_printf_i+0x1a8>
 8004c18:	2a58      	cmp	r2, #88	; 0x58
 8004c1a:	d100      	bne.n	8004c1e <_printf_i+0x2a>
 8004c1c:	e08c      	b.n	8004d38 <_printf_i+0x144>
 8004c1e:	0026      	movs	r6, r4
 8004c20:	3642      	adds	r6, #66	; 0x42
 8004c22:	7032      	strb	r2, [r6, #0]
 8004c24:	e022      	b.n	8004c6c <_printf_i+0x78>
 8004c26:	0010      	movs	r0, r2
 8004c28:	3863      	subs	r0, #99	; 0x63
 8004c2a:	2815      	cmp	r0, #21
 8004c2c:	d8f7      	bhi.n	8004c1e <_printf_i+0x2a>
 8004c2e:	f7fb fa67 	bl	8000100 <__gnu_thumb1_case_shi>
 8004c32:	0016      	.short	0x0016
 8004c34:	fff6001f 	.word	0xfff6001f
 8004c38:	fff6fff6 	.word	0xfff6fff6
 8004c3c:	001ffff6 	.word	0x001ffff6
 8004c40:	fff6fff6 	.word	0xfff6fff6
 8004c44:	fff6fff6 	.word	0xfff6fff6
 8004c48:	003600a8 	.word	0x003600a8
 8004c4c:	fff6009a 	.word	0xfff6009a
 8004c50:	00b9fff6 	.word	0x00b9fff6
 8004c54:	0036fff6 	.word	0x0036fff6
 8004c58:	fff6fff6 	.word	0xfff6fff6
 8004c5c:	009e      	.short	0x009e
 8004c5e:	0026      	movs	r6, r4
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	3642      	adds	r6, #66	; 0x42
 8004c64:	1d11      	adds	r1, r2, #4
 8004c66:	6019      	str	r1, [r3, #0]
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	7033      	strb	r3, [r6, #0]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0a7      	b.n	8004dc0 <_printf_i+0x1cc>
 8004c70:	6808      	ldr	r0, [r1, #0]
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	1d0a      	adds	r2, r1, #4
 8004c76:	0605      	lsls	r5, r0, #24
 8004c78:	d50b      	bpl.n	8004c92 <_printf_i+0x9e>
 8004c7a:	680d      	ldr	r5, [r1, #0]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	da03      	bge.n	8004c8a <_printf_i+0x96>
 8004c82:	232d      	movs	r3, #45	; 0x2d
 8004c84:	9a04      	ldr	r2, [sp, #16]
 8004c86:	426d      	negs	r5, r5
 8004c88:	7013      	strb	r3, [r2, #0]
 8004c8a:	4b61      	ldr	r3, [pc, #388]	; (8004e10 <_printf_i+0x21c>)
 8004c8c:	270a      	movs	r7, #10
 8004c8e:	9303      	str	r3, [sp, #12]
 8004c90:	e01b      	b.n	8004cca <_printf_i+0xd6>
 8004c92:	680d      	ldr	r5, [r1, #0]
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	0641      	lsls	r1, r0, #25
 8004c98:	d5f1      	bpl.n	8004c7e <_printf_i+0x8a>
 8004c9a:	b22d      	sxth	r5, r5
 8004c9c:	e7ef      	b.n	8004c7e <_printf_i+0x8a>
 8004c9e:	680d      	ldr	r5, [r1, #0]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	1d08      	adds	r0, r1, #4
 8004ca4:	6018      	str	r0, [r3, #0]
 8004ca6:	062e      	lsls	r6, r5, #24
 8004ca8:	d501      	bpl.n	8004cae <_printf_i+0xba>
 8004caa:	680d      	ldr	r5, [r1, #0]
 8004cac:	e003      	b.n	8004cb6 <_printf_i+0xc2>
 8004cae:	066d      	lsls	r5, r5, #25
 8004cb0:	d5fb      	bpl.n	8004caa <_printf_i+0xb6>
 8004cb2:	680d      	ldr	r5, [r1, #0]
 8004cb4:	b2ad      	uxth	r5, r5
 8004cb6:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <_printf_i+0x21c>)
 8004cb8:	2708      	movs	r7, #8
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	2a6f      	cmp	r2, #111	; 0x6f
 8004cbe:	d000      	beq.n	8004cc2 <_printf_i+0xce>
 8004cc0:	3702      	adds	r7, #2
 8004cc2:	0023      	movs	r3, r4
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	3343      	adds	r3, #67	; 0x43
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	60a3      	str	r3, [r4, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	db03      	blt.n	8004cda <_printf_i+0xe6>
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	4391      	bics	r1, r2
 8004cd8:	6021      	str	r1, [r4, #0]
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	d102      	bne.n	8004ce4 <_printf_i+0xf0>
 8004cde:	9e04      	ldr	r6, [sp, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <_printf_i+0x10a>
 8004ce4:	9e04      	ldr	r6, [sp, #16]
 8004ce6:	0028      	movs	r0, r5
 8004ce8:	0039      	movs	r1, r7
 8004cea:	f7fb fa99 	bl	8000220 <__aeabi_uidivmod>
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	3e01      	subs	r6, #1
 8004cf2:	5c5b      	ldrb	r3, [r3, r1]
 8004cf4:	7033      	strb	r3, [r6, #0]
 8004cf6:	002b      	movs	r3, r5
 8004cf8:	0005      	movs	r5, r0
 8004cfa:	429f      	cmp	r7, r3
 8004cfc:	d9f3      	bls.n	8004ce6 <_printf_i+0xf2>
 8004cfe:	2f08      	cmp	r7, #8
 8004d00:	d109      	bne.n	8004d16 <_printf_i+0x122>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07db      	lsls	r3, r3, #31
 8004d06:	d506      	bpl.n	8004d16 <_printf_i+0x122>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	dc02      	bgt.n	8004d16 <_printf_i+0x122>
 8004d10:	2330      	movs	r3, #48	; 0x30
 8004d12:	3e01      	subs	r6, #1
 8004d14:	7033      	strb	r3, [r6, #0]
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	1b9b      	subs	r3, r3, r6
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	0021      	movs	r1, r4
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	9805      	ldr	r0, [sp, #20]
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	aa09      	add	r2, sp, #36	; 0x24
 8004d28:	f7ff fef4 	bl	8004b14 <_printf_common>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d14c      	bne.n	8004dca <_printf_i+0x1d6>
 8004d30:	2001      	movs	r0, #1
 8004d32:	4240      	negs	r0, r0
 8004d34:	b00b      	add	sp, #44	; 0x2c
 8004d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d38:	3145      	adds	r1, #69	; 0x45
 8004d3a:	700a      	strb	r2, [r1, #0]
 8004d3c:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <_printf_i+0x21c>)
 8004d3e:	9203      	str	r2, [sp, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	ca20      	ldmia	r2!, {r5}
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	0608      	lsls	r0, r1, #24
 8004d4a:	d516      	bpl.n	8004d7a <_printf_i+0x186>
 8004d4c:	07cb      	lsls	r3, r1, #31
 8004d4e:	d502      	bpl.n	8004d56 <_printf_i+0x162>
 8004d50:	2320      	movs	r3, #32
 8004d52:	4319      	orrs	r1, r3
 8004d54:	6021      	str	r1, [r4, #0]
 8004d56:	2710      	movs	r7, #16
 8004d58:	2d00      	cmp	r5, #0
 8004d5a:	d1b2      	bne.n	8004cc2 <_printf_i+0xce>
 8004d5c:	2320      	movs	r3, #32
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	439a      	bics	r2, r3
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	e7ad      	b.n	8004cc2 <_printf_i+0xce>
 8004d66:	2220      	movs	r2, #32
 8004d68:	6809      	ldr	r1, [r1, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	0022      	movs	r2, r4
 8004d70:	2178      	movs	r1, #120	; 0x78
 8004d72:	3245      	adds	r2, #69	; 0x45
 8004d74:	7011      	strb	r1, [r2, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <_printf_i+0x220>)
 8004d78:	e7e1      	b.n	8004d3e <_printf_i+0x14a>
 8004d7a:	0648      	lsls	r0, r1, #25
 8004d7c:	d5e6      	bpl.n	8004d4c <_printf_i+0x158>
 8004d7e:	b2ad      	uxth	r5, r5
 8004d80:	e7e4      	b.n	8004d4c <_printf_i+0x158>
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	680d      	ldr	r5, [r1, #0]
 8004d86:	1d10      	adds	r0, r2, #4
 8004d88:	6949      	ldr	r1, [r1, #20]
 8004d8a:	6018      	str	r0, [r3, #0]
 8004d8c:	6813      	ldr	r3, [r2, #0]
 8004d8e:	062e      	lsls	r6, r5, #24
 8004d90:	d501      	bpl.n	8004d96 <_printf_i+0x1a2>
 8004d92:	6019      	str	r1, [r3, #0]
 8004d94:	e002      	b.n	8004d9c <_printf_i+0x1a8>
 8004d96:	066d      	lsls	r5, r5, #25
 8004d98:	d5fb      	bpl.n	8004d92 <_printf_i+0x19e>
 8004d9a:	8019      	strh	r1, [r3, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9e04      	ldr	r6, [sp, #16]
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	e7bb      	b.n	8004d1c <_printf_i+0x128>
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	1d11      	adds	r1, r2, #4
 8004da8:	6019      	str	r1, [r3, #0]
 8004daa:	6816      	ldr	r6, [r2, #0]
 8004dac:	2100      	movs	r1, #0
 8004dae:	0030      	movs	r0, r6
 8004db0:	6862      	ldr	r2, [r4, #4]
 8004db2:	f000 f831 	bl	8004e18 <memchr>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d001      	beq.n	8004dbe <_printf_i+0x1ca>
 8004dba:	1b80      	subs	r0, r0, r6
 8004dbc:	6060      	str	r0, [r4, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9a04      	ldr	r2, [sp, #16]
 8004dc6:	7013      	strb	r3, [r2, #0]
 8004dc8:	e7a8      	b.n	8004d1c <_printf_i+0x128>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	0032      	movs	r2, r6
 8004dce:	9906      	ldr	r1, [sp, #24]
 8004dd0:	9805      	ldr	r0, [sp, #20]
 8004dd2:	9d07      	ldr	r5, [sp, #28]
 8004dd4:	47a8      	blx	r5
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d0aa      	beq.n	8004d30 <_printf_i+0x13c>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	079b      	lsls	r3, r3, #30
 8004dde:	d415      	bmi.n	8004e0c <_printf_i+0x218>
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de2:	68e0      	ldr	r0, [r4, #12]
 8004de4:	4298      	cmp	r0, r3
 8004de6:	daa5      	bge.n	8004d34 <_printf_i+0x140>
 8004de8:	0018      	movs	r0, r3
 8004dea:	e7a3      	b.n	8004d34 <_printf_i+0x140>
 8004dec:	0022      	movs	r2, r4
 8004dee:	2301      	movs	r3, #1
 8004df0:	9906      	ldr	r1, [sp, #24]
 8004df2:	9805      	ldr	r0, [sp, #20]
 8004df4:	9e07      	ldr	r6, [sp, #28]
 8004df6:	3219      	adds	r2, #25
 8004df8:	47b0      	blx	r6
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	d098      	beq.n	8004d30 <_printf_i+0x13c>
 8004dfe:	3501      	adds	r5, #1
 8004e00:	68e3      	ldr	r3, [r4, #12]
 8004e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	42ab      	cmp	r3, r5
 8004e08:	dcf0      	bgt.n	8004dec <_printf_i+0x1f8>
 8004e0a:	e7e9      	b.n	8004de0 <_printf_i+0x1ec>
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	e7f7      	b.n	8004e00 <_printf_i+0x20c>
 8004e10:	080052b5 	.word	0x080052b5
 8004e14:	080052c6 	.word	0x080052c6

08004e18 <memchr>:
 8004e18:	b2c9      	uxtb	r1, r1
 8004e1a:	1882      	adds	r2, r0, r2
 8004e1c:	4290      	cmp	r0, r2
 8004e1e:	d101      	bne.n	8004e24 <memchr+0xc>
 8004e20:	2000      	movs	r0, #0
 8004e22:	4770      	bx	lr
 8004e24:	7803      	ldrb	r3, [r0, #0]
 8004e26:	428b      	cmp	r3, r1
 8004e28:	d0fb      	beq.n	8004e22 <memchr+0xa>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	e7f6      	b.n	8004e1c <memchr+0x4>

08004e2e <memmove>:
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	4288      	cmp	r0, r1
 8004e32:	d902      	bls.n	8004e3a <memmove+0xc>
 8004e34:	188b      	adds	r3, r1, r2
 8004e36:	4298      	cmp	r0, r3
 8004e38:	d303      	bcc.n	8004e42 <memmove+0x14>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e007      	b.n	8004e4e <memmove+0x20>
 8004e3e:	5c8b      	ldrb	r3, [r1, r2]
 8004e40:	5483      	strb	r3, [r0, r2]
 8004e42:	3a01      	subs	r2, #1
 8004e44:	d2fb      	bcs.n	8004e3e <memmove+0x10>
 8004e46:	bd10      	pop	{r4, pc}
 8004e48:	5ccc      	ldrb	r4, [r1, r3]
 8004e4a:	54c4      	strb	r4, [r0, r3]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d1fa      	bne.n	8004e48 <memmove+0x1a>
 8004e52:	e7f8      	b.n	8004e46 <memmove+0x18>

08004e54 <_free_r>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	0005      	movs	r5, r0
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	d010      	beq.n	8004e7e <_free_r+0x2a>
 8004e5c:	1f0c      	subs	r4, r1, #4
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da00      	bge.n	8004e66 <_free_r+0x12>
 8004e64:	18e4      	adds	r4, r4, r3
 8004e66:	0028      	movs	r0, r5
 8004e68:	f000 f918 	bl	800509c <__malloc_lock>
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <_free_r+0x90>)
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <_free_r+0x2c>
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	6014      	str	r4, [r2, #0]
 8004e78:	0028      	movs	r0, r5
 8004e7a:	f000 f917 	bl	80050ac <__malloc_unlock>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d908      	bls.n	8004e96 <_free_r+0x42>
 8004e84:	6821      	ldr	r1, [r4, #0]
 8004e86:	1860      	adds	r0, r4, r1
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d1f3      	bne.n	8004e74 <_free_r+0x20>
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	1841      	adds	r1, r0, r1
 8004e92:	6021      	str	r1, [r4, #0]
 8004e94:	e7ee      	b.n	8004e74 <_free_r+0x20>
 8004e96:	001a      	movs	r2, r3
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <_free_r+0x4e>
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	d9f9      	bls.n	8004e96 <_free_r+0x42>
 8004ea2:	6811      	ldr	r1, [r2, #0]
 8004ea4:	1850      	adds	r0, r2, r1
 8004ea6:	42a0      	cmp	r0, r4
 8004ea8:	d10b      	bne.n	8004ec2 <_free_r+0x6e>
 8004eaa:	6820      	ldr	r0, [r4, #0]
 8004eac:	1809      	adds	r1, r1, r0
 8004eae:	1850      	adds	r0, r2, r1
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	d1e0      	bne.n	8004e78 <_free_r+0x24>
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	1841      	adds	r1, r0, r1
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	6053      	str	r3, [r2, #4]
 8004ec0:	e7da      	b.n	8004e78 <_free_r+0x24>
 8004ec2:	42a0      	cmp	r0, r4
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x78>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	e7d5      	b.n	8004e78 <_free_r+0x24>
 8004ecc:	6821      	ldr	r1, [r4, #0]
 8004ece:	1860      	adds	r0, r4, r1
 8004ed0:	4283      	cmp	r3, r0
 8004ed2:	d103      	bne.n	8004edc <_free_r+0x88>
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	1841      	adds	r1, r0, r1
 8004eda:	6021      	str	r1, [r4, #0]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	6054      	str	r4, [r2, #4]
 8004ee0:	e7ca      	b.n	8004e78 <_free_r+0x24>
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	20000674 	.word	0x20000674

08004ee8 <sbrk_aligned>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0f      	ldr	r6, [pc, #60]	; (8004f28 <sbrk_aligned+0x40>)
 8004eec:	000d      	movs	r5, r1
 8004eee:	6831      	ldr	r1, [r6, #0]
 8004ef0:	0004      	movs	r4, r0
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d102      	bne.n	8004efc <sbrk_aligned+0x14>
 8004ef6:	f000 f8bf 	bl	8005078 <_sbrk_r>
 8004efa:	6030      	str	r0, [r6, #0]
 8004efc:	0029      	movs	r1, r5
 8004efe:	0020      	movs	r0, r4
 8004f00:	f000 f8ba 	bl	8005078 <_sbrk_r>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d00a      	beq.n	8004f1e <sbrk_aligned+0x36>
 8004f08:	2303      	movs	r3, #3
 8004f0a:	1cc5      	adds	r5, r0, #3
 8004f0c:	439d      	bics	r5, r3
 8004f0e:	42a8      	cmp	r0, r5
 8004f10:	d007      	beq.n	8004f22 <sbrk_aligned+0x3a>
 8004f12:	1a29      	subs	r1, r5, r0
 8004f14:	0020      	movs	r0, r4
 8004f16:	f000 f8af 	bl	8005078 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d101      	bne.n	8004f22 <sbrk_aligned+0x3a>
 8004f1e:	2501      	movs	r5, #1
 8004f20:	426d      	negs	r5, r5
 8004f22:	0028      	movs	r0, r5
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000678 	.word	0x20000678

08004f2c <_malloc_r>:
 8004f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2e:	2203      	movs	r2, #3
 8004f30:	1ccb      	adds	r3, r1, #3
 8004f32:	4393      	bics	r3, r2
 8004f34:	3308      	adds	r3, #8
 8004f36:	0006      	movs	r6, r0
 8004f38:	001f      	movs	r7, r3
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d232      	bcs.n	8004fa4 <_malloc_r+0x78>
 8004f3e:	270c      	movs	r7, #12
 8004f40:	42b9      	cmp	r1, r7
 8004f42:	d831      	bhi.n	8004fa8 <_malloc_r+0x7c>
 8004f44:	0030      	movs	r0, r6
 8004f46:	f000 f8a9 	bl	800509c <__malloc_lock>
 8004f4a:	4d32      	ldr	r5, [pc, #200]	; (8005014 <_malloc_r+0xe8>)
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	001c      	movs	r4, r3
 8004f50:	2c00      	cmp	r4, #0
 8004f52:	d12e      	bne.n	8004fb2 <_malloc_r+0x86>
 8004f54:	0039      	movs	r1, r7
 8004f56:	0030      	movs	r0, r6
 8004f58:	f7ff ffc6 	bl	8004ee8 <sbrk_aligned>
 8004f5c:	0004      	movs	r4, r0
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d11e      	bne.n	8004fa0 <_malloc_r+0x74>
 8004f62:	682c      	ldr	r4, [r5, #0]
 8004f64:	0025      	movs	r5, r4
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	d14a      	bne.n	8005000 <_malloc_r+0xd4>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	0029      	movs	r1, r5
 8004f6e:	18e3      	adds	r3, r4, r3
 8004f70:	0030      	movs	r0, r6
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	f000 f880 	bl	8005078 <_sbrk_r>
 8004f78:	9b01      	ldr	r3, [sp, #4]
 8004f7a:	4283      	cmp	r3, r0
 8004f7c:	d143      	bne.n	8005006 <_malloc_r+0xda>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	3703      	adds	r7, #3
 8004f82:	1aff      	subs	r7, r7, r3
 8004f84:	2303      	movs	r3, #3
 8004f86:	439f      	bics	r7, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	2f0c      	cmp	r7, #12
 8004f8c:	d200      	bcs.n	8004f90 <_malloc_r+0x64>
 8004f8e:	270c      	movs	r7, #12
 8004f90:	0039      	movs	r1, r7
 8004f92:	0030      	movs	r0, r6
 8004f94:	f7ff ffa8 	bl	8004ee8 <sbrk_aligned>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d034      	beq.n	8005006 <_malloc_r+0xda>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	19df      	adds	r7, r3, r7
 8004fa0:	6027      	str	r7, [r4, #0]
 8004fa2:	e013      	b.n	8004fcc <_malloc_r+0xa0>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dacb      	bge.n	8004f40 <_malloc_r+0x14>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	2500      	movs	r5, #0
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	0028      	movs	r0, r5
 8004fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	1bd1      	subs	r1, r2, r7
 8004fb6:	d420      	bmi.n	8004ffa <_malloc_r+0xce>
 8004fb8:	290b      	cmp	r1, #11
 8004fba:	d917      	bls.n	8004fec <_malloc_r+0xc0>
 8004fbc:	19e2      	adds	r2, r4, r7
 8004fbe:	6027      	str	r7, [r4, #0]
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d111      	bne.n	8004fe8 <_malloc_r+0xbc>
 8004fc4:	602a      	str	r2, [r5, #0]
 8004fc6:	6863      	ldr	r3, [r4, #4]
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	6053      	str	r3, [r2, #4]
 8004fcc:	0030      	movs	r0, r6
 8004fce:	0025      	movs	r5, r4
 8004fd0:	f000 f86c 	bl	80050ac <__malloc_unlock>
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	350b      	adds	r5, #11
 8004fd8:	1d23      	adds	r3, r4, #4
 8004fda:	4395      	bics	r5, r2
 8004fdc:	1aea      	subs	r2, r5, r3
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	d0e5      	beq.n	8004fae <_malloc_r+0x82>
 8004fe2:	1b5b      	subs	r3, r3, r5
 8004fe4:	50a3      	str	r3, [r4, r2]
 8004fe6:	e7e2      	b.n	8004fae <_malloc_r+0x82>
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e7ec      	b.n	8004fc6 <_malloc_r+0x9a>
 8004fec:	6862      	ldr	r2, [r4, #4]
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d101      	bne.n	8004ff6 <_malloc_r+0xca>
 8004ff2:	602a      	str	r2, [r5, #0]
 8004ff4:	e7ea      	b.n	8004fcc <_malloc_r+0xa0>
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	e7e8      	b.n	8004fcc <_malloc_r+0xa0>
 8004ffa:	0023      	movs	r3, r4
 8004ffc:	6864      	ldr	r4, [r4, #4]
 8004ffe:	e7a7      	b.n	8004f50 <_malloc_r+0x24>
 8005000:	002c      	movs	r4, r5
 8005002:	686d      	ldr	r5, [r5, #4]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x3a>
 8005006:	230c      	movs	r3, #12
 8005008:	0030      	movs	r0, r6
 800500a:	6033      	str	r3, [r6, #0]
 800500c:	f000 f84e 	bl	80050ac <__malloc_unlock>
 8005010:	e7cd      	b.n	8004fae <_malloc_r+0x82>
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	20000674 	.word	0x20000674

08005018 <_realloc_r>:
 8005018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800501a:	0007      	movs	r7, r0
 800501c:	000e      	movs	r6, r1
 800501e:	0014      	movs	r4, r2
 8005020:	2900      	cmp	r1, #0
 8005022:	d105      	bne.n	8005030 <_realloc_r+0x18>
 8005024:	0011      	movs	r1, r2
 8005026:	f7ff ff81 	bl	8004f2c <_malloc_r>
 800502a:	0005      	movs	r5, r0
 800502c:	0028      	movs	r0, r5
 800502e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005030:	2a00      	cmp	r2, #0
 8005032:	d103      	bne.n	800503c <_realloc_r+0x24>
 8005034:	f7ff ff0e 	bl	8004e54 <_free_r>
 8005038:	0025      	movs	r5, r4
 800503a:	e7f7      	b.n	800502c <_realloc_r+0x14>
 800503c:	f000 f83e 	bl	80050bc <_malloc_usable_size_r>
 8005040:	9001      	str	r0, [sp, #4]
 8005042:	4284      	cmp	r4, r0
 8005044:	d803      	bhi.n	800504e <_realloc_r+0x36>
 8005046:	0035      	movs	r5, r6
 8005048:	0843      	lsrs	r3, r0, #1
 800504a:	42a3      	cmp	r3, r4
 800504c:	d3ee      	bcc.n	800502c <_realloc_r+0x14>
 800504e:	0021      	movs	r1, r4
 8005050:	0038      	movs	r0, r7
 8005052:	f7ff ff6b 	bl	8004f2c <_malloc_r>
 8005056:	1e05      	subs	r5, r0, #0
 8005058:	d0e8      	beq.n	800502c <_realloc_r+0x14>
 800505a:	9b01      	ldr	r3, [sp, #4]
 800505c:	0022      	movs	r2, r4
 800505e:	429c      	cmp	r4, r3
 8005060:	d900      	bls.n	8005064 <_realloc_r+0x4c>
 8005062:	001a      	movs	r2, r3
 8005064:	0031      	movs	r1, r6
 8005066:	0028      	movs	r0, r5
 8005068:	f7ff fbc0 	bl	80047ec <memcpy>
 800506c:	0031      	movs	r1, r6
 800506e:	0038      	movs	r0, r7
 8005070:	f7ff fef0 	bl	8004e54 <_free_r>
 8005074:	e7da      	b.n	800502c <_realloc_r+0x14>
	...

08005078 <_sbrk_r>:
 8005078:	2300      	movs	r3, #0
 800507a:	b570      	push	{r4, r5, r6, lr}
 800507c:	4d06      	ldr	r5, [pc, #24]	; (8005098 <_sbrk_r+0x20>)
 800507e:	0004      	movs	r4, r0
 8005080:	0008      	movs	r0, r1
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	f7fc fba2 	bl	80017cc <_sbrk>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d103      	bne.n	8005094 <_sbrk_r+0x1c>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d000      	beq.n	8005094 <_sbrk_r+0x1c>
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	2000067c 	.word	0x2000067c

0800509c <__malloc_lock>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4802      	ldr	r0, [pc, #8]	; (80050a8 <__malloc_lock+0xc>)
 80050a0:	f000 f814 	bl	80050cc <__retarget_lock_acquire_recursive>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	20000680 	.word	0x20000680

080050ac <__malloc_unlock>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4802      	ldr	r0, [pc, #8]	; (80050b8 <__malloc_unlock+0xc>)
 80050b0:	f000 f80d 	bl	80050ce <__retarget_lock_release_recursive>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	20000680 	.word	0x20000680

080050bc <_malloc_usable_size_r>:
 80050bc:	1f0b      	subs	r3, r1, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1f18      	subs	r0, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da01      	bge.n	80050ca <_malloc_usable_size_r+0xe>
 80050c6:	580b      	ldr	r3, [r1, r0]
 80050c8:	18c0      	adds	r0, r0, r3
 80050ca:	4770      	bx	lr

080050cc <__retarget_lock_acquire_recursive>:
 80050cc:	4770      	bx	lr

080050ce <__retarget_lock_release_recursive>:
 80050ce:	4770      	bx	lr

080050d0 <_init>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr

080050dc <_fini>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr
