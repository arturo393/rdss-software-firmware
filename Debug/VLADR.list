
VLADR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08005f58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005f58  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012278  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a46  00000000  00000000  00032310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00035b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177a3  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011efb  00000000  00000000  0004e053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0ce  00000000  00000000  0005ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee01c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003634  00000000  00000000  000ee06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005d04 	.word	0x08005d04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08005d04 	.word	0x08005d04

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_uldivmod>:
 8000410:	2b00      	cmp	r3, #0
 8000412:	d111      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000414:	2a00      	cmp	r2, #0
 8000416:	d10f      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000418:	2900      	cmp	r1, #0
 800041a:	d100      	bne.n	800041e <__aeabi_uldivmod+0xe>
 800041c:	2800      	cmp	r0, #0
 800041e:	d002      	beq.n	8000426 <__aeabi_uldivmod+0x16>
 8000420:	2100      	movs	r1, #0
 8000422:	43c9      	mvns	r1, r1
 8000424:	0008      	movs	r0, r1
 8000426:	b407      	push	{r0, r1, r2}
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <__aeabi_uldivmod+0x24>)
 800042a:	a102      	add	r1, pc, #8	; (adr r1, 8000434 <__aeabi_uldivmod+0x24>)
 800042c:	1840      	adds	r0, r0, r1
 800042e:	9002      	str	r0, [sp, #8]
 8000430:	bd03      	pop	{r0, r1, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	ffffffd9 	.word	0xffffffd9
 8000438:	b403      	push	{r0, r1}
 800043a:	4668      	mov	r0, sp
 800043c:	b501      	push	{r0, lr}
 800043e:	9802      	ldr	r0, [sp, #8]
 8000440:	f000 f806 	bl	8000450 <__udivmoddi4>
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	469e      	mov	lr, r3
 8000448:	b002      	add	sp, #8
 800044a:	bc0c      	pop	{r2, r3}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__udivmoddi4>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	4657      	mov	r7, sl
 8000454:	464e      	mov	r6, r9
 8000456:	4645      	mov	r5, r8
 8000458:	46de      	mov	lr, fp
 800045a:	b5e0      	push	{r5, r6, r7, lr}
 800045c:	0004      	movs	r4, r0
 800045e:	000d      	movs	r5, r1
 8000460:	4692      	mov	sl, r2
 8000462:	4699      	mov	r9, r3
 8000464:	b083      	sub	sp, #12
 8000466:	428b      	cmp	r3, r1
 8000468:	d830      	bhi.n	80004cc <__udivmoddi4+0x7c>
 800046a:	d02d      	beq.n	80004c8 <__udivmoddi4+0x78>
 800046c:	4649      	mov	r1, r9
 800046e:	4650      	mov	r0, sl
 8000470:	f000 f8ba 	bl	80005e8 <__clzdi2>
 8000474:	0029      	movs	r1, r5
 8000476:	0006      	movs	r6, r0
 8000478:	0020      	movs	r0, r4
 800047a:	f000 f8b5 	bl	80005e8 <__clzdi2>
 800047e:	1a33      	subs	r3, r6, r0
 8000480:	4698      	mov	r8, r3
 8000482:	3b20      	subs	r3, #32
 8000484:	469b      	mov	fp, r3
 8000486:	d433      	bmi.n	80004f0 <__udivmoddi4+0xa0>
 8000488:	465a      	mov	r2, fp
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	4642      	mov	r2, r8
 8000490:	001f      	movs	r7, r3
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	001e      	movs	r6, r3
 8000498:	42af      	cmp	r7, r5
 800049a:	d83a      	bhi.n	8000512 <__udivmoddi4+0xc2>
 800049c:	42af      	cmp	r7, r5
 800049e:	d100      	bne.n	80004a2 <__udivmoddi4+0x52>
 80004a0:	e078      	b.n	8000594 <__udivmoddi4+0x144>
 80004a2:	465b      	mov	r3, fp
 80004a4:	1ba4      	subs	r4, r4, r6
 80004a6:	41bd      	sbcs	r5, r7
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da00      	bge.n	80004ae <__udivmoddi4+0x5e>
 80004ac:	e075      	b.n	800059a <__udivmoddi4+0x14a>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2300      	movs	r3, #0
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	465a      	mov	r2, fp
 80004ba:	4093      	lsls	r3, r2
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	4642      	mov	r2, r8
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	e028      	b.n	800051a <__udivmoddi4+0xca>
 80004c8:	4282      	cmp	r2, r0
 80004ca:	d9cf      	bls.n	800046c <__udivmoddi4+0x1c>
 80004cc:	2200      	movs	r2, #0
 80004ce:	2300      	movs	r3, #0
 80004d0:	9200      	str	r2, [sp, #0]
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <__udivmoddi4+0x8e>
 80004da:	601c      	str	r4, [r3, #0]
 80004dc:	605d      	str	r5, [r3, #4]
 80004de:	9800      	ldr	r0, [sp, #0]
 80004e0:	9901      	ldr	r1, [sp, #4]
 80004e2:	b003      	add	sp, #12
 80004e4:	bcf0      	pop	{r4, r5, r6, r7}
 80004e6:	46bb      	mov	fp, r7
 80004e8:	46b2      	mov	sl, r6
 80004ea:	46a9      	mov	r9, r5
 80004ec:	46a0      	mov	r8, r4
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f0:	4642      	mov	r2, r8
 80004f2:	2320      	movs	r3, #32
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	4652      	mov	r2, sl
 80004f8:	40da      	lsrs	r2, r3
 80004fa:	4641      	mov	r1, r8
 80004fc:	0013      	movs	r3, r2
 80004fe:	464a      	mov	r2, r9
 8000500:	408a      	lsls	r2, r1
 8000502:	0017      	movs	r7, r2
 8000504:	4642      	mov	r2, r8
 8000506:	431f      	orrs	r7, r3
 8000508:	4653      	mov	r3, sl
 800050a:	4093      	lsls	r3, r2
 800050c:	001e      	movs	r6, r3
 800050e:	42af      	cmp	r7, r5
 8000510:	d9c4      	bls.n	800049c <__udivmoddi4+0x4c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0d9      	beq.n	80004d4 <__udivmoddi4+0x84>
 8000520:	07fb      	lsls	r3, r7, #31
 8000522:	0872      	lsrs	r2, r6, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4646      	mov	r6, r8
 8000528:	087b      	lsrs	r3, r7, #1
 800052a:	e00e      	b.n	800054a <__udivmoddi4+0xfa>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d101      	bne.n	8000534 <__udivmoddi4+0xe4>
 8000530:	42a2      	cmp	r2, r4
 8000532:	d80c      	bhi.n	800054e <__udivmoddi4+0xfe>
 8000534:	1aa4      	subs	r4, r4, r2
 8000536:	419d      	sbcs	r5, r3
 8000538:	2001      	movs	r0, #1
 800053a:	1924      	adds	r4, r4, r4
 800053c:	416d      	adcs	r5, r5
 800053e:	2100      	movs	r1, #0
 8000540:	3e01      	subs	r6, #1
 8000542:	1824      	adds	r4, r4, r0
 8000544:	414d      	adcs	r5, r1
 8000546:	2e00      	cmp	r6, #0
 8000548:	d006      	beq.n	8000558 <__udivmoddi4+0x108>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d9ee      	bls.n	800052c <__udivmoddi4+0xdc>
 800054e:	3e01      	subs	r6, #1
 8000550:	1924      	adds	r4, r4, r4
 8000552:	416d      	adcs	r5, r5
 8000554:	2e00      	cmp	r6, #0
 8000556:	d1f8      	bne.n	800054a <__udivmoddi4+0xfa>
 8000558:	9800      	ldr	r0, [sp, #0]
 800055a:	9901      	ldr	r1, [sp, #4]
 800055c:	465b      	mov	r3, fp
 800055e:	1900      	adds	r0, r0, r4
 8000560:	4169      	adcs	r1, r5
 8000562:	2b00      	cmp	r3, #0
 8000564:	db24      	blt.n	80005b0 <__udivmoddi4+0x160>
 8000566:	002b      	movs	r3, r5
 8000568:	465a      	mov	r2, fp
 800056a:	4644      	mov	r4, r8
 800056c:	40d3      	lsrs	r3, r2
 800056e:	002a      	movs	r2, r5
 8000570:	40e2      	lsrs	r2, r4
 8000572:	001c      	movs	r4, r3
 8000574:	465b      	mov	r3, fp
 8000576:	0015      	movs	r5, r2
 8000578:	2b00      	cmp	r3, #0
 800057a:	db2a      	blt.n	80005d2 <__udivmoddi4+0x182>
 800057c:	0026      	movs	r6, r4
 800057e:	409e      	lsls	r6, r3
 8000580:	0033      	movs	r3, r6
 8000582:	0026      	movs	r6, r4
 8000584:	4647      	mov	r7, r8
 8000586:	40be      	lsls	r6, r7
 8000588:	0032      	movs	r2, r6
 800058a:	1a80      	subs	r0, r0, r2
 800058c:	4199      	sbcs	r1, r3
 800058e:	9000      	str	r0, [sp, #0]
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	e79f      	b.n	80004d4 <__udivmoddi4+0x84>
 8000594:	42a3      	cmp	r3, r4
 8000596:	d8bc      	bhi.n	8000512 <__udivmoddi4+0xc2>
 8000598:	e783      	b.n	80004a2 <__udivmoddi4+0x52>
 800059a:	4642      	mov	r2, r8
 800059c:	2320      	movs	r3, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	2200      	movs	r2, #0
 80005a4:	9100      	str	r1, [sp, #0]
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	2201      	movs	r2, #1
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	e786      	b.n	80004be <__udivmoddi4+0x6e>
 80005b0:	4642      	mov	r2, r8
 80005b2:	2320      	movs	r3, #32
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	4646      	mov	r6, r8
 80005ba:	409a      	lsls	r2, r3
 80005bc:	0023      	movs	r3, r4
 80005be:	40f3      	lsrs	r3, r6
 80005c0:	4644      	mov	r4, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dad4      	bge.n	800057c <__udivmoddi4+0x12c>
 80005d2:	4642      	mov	r2, r8
 80005d4:	002f      	movs	r7, r5
 80005d6:	2320      	movs	r3, #32
 80005d8:	0026      	movs	r6, r4
 80005da:	4097      	lsls	r7, r2
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	40de      	lsrs	r6, r3
 80005e0:	003b      	movs	r3, r7
 80005e2:	4333      	orrs	r3, r6
 80005e4:	e7cd      	b.n	8000582 <__udivmoddi4+0x132>
 80005e6:	46c0      	nop			; (mov r8, r8)

080005e8 <__clzdi2>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	2900      	cmp	r1, #0
 80005ec:	d103      	bne.n	80005f6 <__clzdi2+0xe>
 80005ee:	f000 f807 	bl	8000600 <__clzsi2>
 80005f2:	3020      	adds	r0, #32
 80005f4:	e002      	b.n	80005fc <__clzdi2+0x14>
 80005f6:	0008      	movs	r0, r1
 80005f8:	f000 f802 	bl	8000600 <__clzsi2>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	; (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <readRegister+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fc30 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fc82 	bl	8001f60 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 800065c:	1cf9      	adds	r1, r7, #3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	f003 fb28 	bl	8003cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000668:	240f      	movs	r4, #15
 800066a:	1939      	adds	r1, r7, r4
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	2201      	movs	r2, #1
 8000672:	f003 fc79 	bl	8003f68 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 fc72 	bl	8001f60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <readRegister+0x58>)
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	0018      	movs	r0, r3
 8000684:	f002 fc17 	bl	8002eb6 <HAL_GPIO_WritePin>
	return rec;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	781b      	ldrb	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b005      	add	sp, #20
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	50000400 	.word	0x50000400

08000698 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	0008      	movs	r0, r1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	0019      	movs	r1, r3
 80006a6:	240b      	movs	r4, #11
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	1c02      	adds	r2, r0, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	230a      	movs	r3, #10
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	1c0a      	adds	r2, r1, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 80006b6:	2510      	movs	r5, #16
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	3304      	adds	r3, #4
 80006c0:	221a      	movs	r2, #26
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 feab 	bl	8005420 <memset>
	tx_data[0] = address | 0x80;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4252      	negs	r2, r2
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80006de:	2301      	movs	r3, #1
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
 80006e2:	e00f      	b.n	8000704 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 80006e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	637a      	str	r2, [r7, #52]	; 0x34
 80006ea:	001a      	movs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	189b      	adds	r3, r3, r2
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	2310      	movs	r3, #16
 80006f4:	18fa      	adds	r2, r7, r3
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3301      	adds	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
 8000704:	240a      	movs	r4, #10
 8000706:	193b      	adds	r3, r7, r4
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800070c:	429a      	cmp	r2, r3
 800070e:	dde9      	ble.n	80006e4 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <writeRegister+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f002 fbcd 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	2110      	movs	r1, #16
 800072c:	1879      	adds	r1, r7, r1
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f003 fac2 	bl	8003cb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <writeRegister+0xbc>)
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fbbb 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f001 fc0d 	bl	8001f60 <HAL_Delay>
	return cmd;  // pull the pin high
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b00e      	add	sp, #56	; 0x38
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	50000400 	.word	0x50000400

08000758 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	0b51      	lsrs	r1, r2, #13
 8000768:	04dd      	lsls	r5, r3, #19
 800076a:	430d      	orrs	r5, r1
 800076c:	04d4      	lsls	r4, r2, #19
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <setRFFrequency+0x98>)
 8000770:	2300      	movs	r3, #0
 8000772:	0020      	movs	r0, r4
 8000774:	0029      	movs	r1, r5
 8000776:	f7ff fe4b 	bl	8000410 <__aeabi_uldivmod>
 800077a:	0002      	movs	r2, r0
 800077c:	000b      	movs	r3, r1
 800077e:	623a      	str	r2, [r7, #32]
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	6a3a      	ldr	r2, [r7, #32]
 8000788:	0c12      	lsrs	r2, r2, #16
 800078a:	60ba      	str	r2, [r7, #8]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	431a      	orrs	r2, r3
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	7a3a      	ldrb	r2, [r7, #8]
 800079a:	210c      	movs	r1, #12
 800079c:	2010      	movs	r0, #16
 800079e:	180b      	adds	r3, r1, r0
 80007a0:	19db      	adds	r3, r3, r7
 80007a2:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	061b      	lsls	r3, r3, #24
 80007a8:	6a3a      	ldr	r2, [r7, #32]
 80007aa:	0a12      	lsrs	r2, r2, #8
 80007ac:	603a      	str	r2, [r7, #0]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	783a      	ldrb	r2, [r7, #0]
 80007bc:	180b      	adds	r3, r1, r0
 80007be:	19db      	adds	r3, r3, r7
 80007c0:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c2:	6a3a      	ldr	r2, [r7, #32]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	1c13      	adds	r3, r2, #0
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	0004      	movs	r4, r0
 80007cc:	180b      	adds	r3, r1, r0
 80007ce:	19db      	adds	r3, r3, r7
 80007d0:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	238a      	movs	r3, #138	; 0x8a
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	58d0      	ldr	r0, [r2, r3]
 80007da:	190b      	adds	r3, r1, r4
 80007dc:	19da      	adds	r2, r3, r7
 80007de:	2303      	movs	r3, #3
 80007e0:	2106      	movs	r1, #6
 80007e2:	f7ff ff59 	bl	8000698 <writeRegister>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00a      	add	sp, #40	; 0x28
 80007ec:	bdb0      	pop	{r4, r5, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	01e84800 	.word	0x01e84800

080007f4 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	238a      	movs	r3, #138	; 0x8a
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	58d0      	ldr	r0, [r2, r3]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3310      	adds	r3, #16
 8000808:	001a      	movs	r2, r3
 800080a:	2301      	movs	r3, #1
 800080c:	2109      	movs	r1, #9
 800080e:	f7ff ff43 	bl	8000698 <writeRegister>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	238a      	movs	r3, #138	; 0x8a
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	58d0      	ldr	r0, [r2, r3]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3316      	adds	r3, #22
 800082e:	001a      	movs	r2, r3
 8000830:	2301      	movs	r3, #1
 8000832:	2139      	movs	r1, #57	; 0x39
 8000834:	f7ff ff30 	bl	8000698 <writeRegister>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	238a      	movs	r3, #138	; 0x8a
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	58d0      	ldr	r0, [r2, r3]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3317      	adds	r3, #23
 8000854:	001a      	movs	r2, r3
 8000856:	2301      	movs	r3, #1
 8000858:	210b      	movs	r1, #11
 800085a:	f7ff ff1d 	bl	8000698 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}

08000866 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	238a      	movs	r3, #138	; 0x8a
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	58d0      	ldr	r0, [r2, r3]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	331a      	adds	r3, #26
 800087a:	001a      	movs	r2, r3
 800087c:	2301      	movs	r3, #1
 800087e:	211f      	movs	r1, #31
 8000880:	f7ff ff0a 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	238a      	movs	r3, #138	; 0x8a
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	58d0      	ldr	r0, [r2, r3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	331c      	adds	r3, #28
 8000890:	001a      	movs	r2, r3
 8000892:	2301      	movs	r3, #1
 8000894:	2120      	movs	r1, #32
 8000896:	f7ff feff 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	238a      	movs	r3, #138	; 0x8a
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	58d0      	ldr	r0, [r2, r3]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	331d      	adds	r3, #29
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	2121      	movs	r1, #33	; 0x21
 80008ac:	f7ff fef4 	bl	8000698 <writeRegister>
			1);
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80008c0:	210f      	movs	r1, #15
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7c9b      	ldrb	r3, [r3, #18]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7cdb      	ldrb	r3, [r3, #19]
 80008d8:	18db      	adds	r3, r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	000c      	movs	r4, r1
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2221      	movs	r2, #33	; 0x21
 80008ee:	5c9a      	ldrb	r2, [r3, r2]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	238a      	movs	r3, #138	; 0x8a
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	58d0      	ldr	r0, [r2, r3]
 8000904:	193a      	adds	r2, r7, r4
 8000906:	2301      	movs	r3, #1
 8000908:	211d      	movs	r1, #29
 800090a:	f7ff fec5 	bl	8000698 <writeRegister>

	cmd = module->LoRa_SF << 4;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7c5b      	ldrb	r3, [r3, #17]
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	b2da      	uxtb	r2, r3
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	b2da      	uxtb	r2, r3
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	187b      	adds	r3, r7, r1
 800092e:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7eda      	ldrb	r2, [r3, #27]
 8000934:	187b      	adds	r3, r7, r1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	238a      	movs	r3, #138	; 0x8a
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	58d0      	ldr	r0, [r2, r3]
 8000948:	187a      	adds	r2, r7, r1
 800094a:	2301      	movs	r3, #1
 800094c:	211e      	movs	r1, #30
 800094e:	f7ff fea3 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	238a      	movs	r3, #138	; 0x8a
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	58d0      	ldr	r0, [r2, r3]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3319      	adds	r3, #25
 800095e:	001a      	movs	r2, r3
 8000960:	2301      	movs	r3, #1
 8000962:	2126      	movs	r1, #38	; 0x26
 8000964:	f7ff fe98 	bl	8000698 <writeRegister>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b005      	add	sp, #20
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	238a      	movs	r3, #138	; 0x8a
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	2131      	movs	r1, #49	; 0x31
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fe5a 	bl	800063c <readRegister>
 8000988:	0003      	movs	r3, r0
 800098a:	001a      	movs	r2, r3
 800098c:	210f      	movs	r1, #15
 800098e:	187b      	adds	r3, r7, r1
 8000990:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2207      	movs	r2, #7
 8000998:	4393      	bics	r3, r2
 800099a:	b2da      	uxtb	r2, r3
 800099c:	187b      	adds	r3, r7, r1
 800099e:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2205      	movs	r2, #5
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	238a      	movs	r3, #138	; 0x8a
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	58d0      	ldr	r0, [r2, r3]
 80009b6:	000c      	movs	r4, r1
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	2301      	movs	r3, #1
 80009bc:	2131      	movs	r1, #49	; 0x31
 80009be:	f7ff fe6b 	bl	8000698 <writeRegister>
	tmp = 0x0C;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	220c      	movs	r2, #12
 80009c8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	238a      	movs	r3, #138	; 0x8a
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	58d0      	ldr	r0, [r2, r3]
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	2301      	movs	r3, #1
 80009d6:	2137      	movs	r1, #55	; 0x37
 80009d8:	f7ff fe5e 	bl	8000698 <writeRegister>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b005      	add	sp, #20
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	238a      	movs	r3, #138	; 0x8a
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	58d3      	ldr	r3, [r2, r3]
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe20 	bl	800063c <readRegister>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	2307      	movs	r3, #7
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	000a      	movs	r2, r1
 8000a18:	1cfb      	adds	r3, r7, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000a1c:	1cfb      	adds	r3, r7, #3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2278      	movs	r2, #120	; 0x78
 8000a22:	4252      	negs	r2, r2
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	210f      	movs	r1, #15
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	238a      	movs	r3, #138	; 0x8a
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58d0      	ldr	r0, [r2, r3]
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f7ff fe2c 	bl	8000698 <writeRegister>
	module->operatingMode = mode;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1cfa      	adds	r2, r7, #3
 8000a44:	2123      	movs	r1, #35	; 0x23
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	545a      	strb	r2, [r3, r1]
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	238a      	movs	r3, #138	; 0x8a
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	58d0      	ldr	r0, [r2, r3]
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2112      	movs	r1, #18
 8000a70:	f7ff fe12 	bl	8000698 <writeRegister>
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f002 f9f3 	bl	8002e7c <HAL_GPIO_ReadPin>
 8000a96:	0003      	movs	r3, r0
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	425a      	negs	r2, r3
 8000a9c:	4153      	adcs	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	01c9      	lsls	r1, r1, #7
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	4911      	ldr	r1, [pc, #68]	; (8000b14 <ledInit+0x6c>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <ledInit+0x70>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ledInit+0x70>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <ledInit+0x70>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <ledInit+0x70>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <ledInit+0x70>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ledInit+0x70>)
 8000af0:	2104      	movs	r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <ledInit+0x70>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ledInit+0x70>)
 8000afc:	2108      	movs	r1, #8
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f809 	bl	8000b1c <led_reset>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	ffff7fff 	.word	0xffff7fff
 8000b18:	50000400 	.word	0x50000400

08000b1c <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000b36:	f001 fa09 	bl	8001f4c <HAL_GetTick>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <setTxBaseParameters>:
	return rec;
}


SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000b64:	2017      	movs	r0, #23
 8000b66:	183b      	adds	r3, r7, r0
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000b6c:	2416      	movs	r4, #22
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000b74:	2515      	movs	r5, #21
 8000b76:	197b      	adds	r3, r7, r5
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000b7c:	2614      	movs	r6, #20
 8000b7e:	19bb      	adds	r3, r7, r6
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 8000b84:	2313      	movs	r3, #19
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	701a      	strb	r2, [r3, #0]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 8000b8c:	2212      	movs	r2, #18
 8000b8e:	18bb      	adds	r3, r7, r2
 8000b90:	2240      	movs	r2, #64	; 0x40
 8000b92:	701a      	strb	r2, [r3, #0]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000b94:	2111      	movs	r1, #17
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2220      	movs	r2, #32
 8000b9a:	701a      	strb	r2, [r3, #0]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	18bb      	adds	r3, r7, r2
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	701a      	strb	r2, [r3, #0]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000bac:	210e      	movs	r1, #14
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	701a      	strb	r2, [r3, #0]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	18bb      	adds	r3, r7, r2
 8000bb8:	2202      	movs	r2, #2
 8000bba:	701a      	strb	r2, [r3, #0]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000bbc:	210c      	movs	r1, #12
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]

	loraTx->frequency = UPLINK_FREQ;
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <setTxBaseParameters+0x154>)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	608a      	str	r2, [r1, #8]
 8000bcc:	60cb      	str	r3, [r1, #12]
	loraTx->power = SX1278_POWER_17DBM;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	22fc      	movs	r2, #252	; 0xfc
 8000bd2:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2206      	movs	r2, #6
 8000bde:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2234      	movs	r2, #52	; 0x34
 8000bf0:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	220b      	movs	r2, #11
 8000bf6:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2223      	movs	r2, #35	; 0x23
 8000bfc:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2208      	movs	r2, #8
 8000c08:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2208      	movs	r2, #8
 8000c14:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000c16:	183a      	adds	r2, r7, r0
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	197b      	adds	r3, r7, r5
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000c36:	2313      	movs	r3, #19
 8000c38:	18fa      	adds	r2, r7, r3
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	2111      	movs	r1, #17
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b2d9      	uxtb	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2220      	movs	r2, #32
 8000c54:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2220      	movs	r2, #32
 8000c5a:	5c9a      	ldrb	r2, [r3, r2]
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	18f9      	adds	r1, r7, r3
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	7809      	ldrb	r1, [r1, #0]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	b2d9      	uxtb	r1, r3
 8000c6c:	230e      	movs	r3, #14
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	430b      	orrs	r3, r1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2220      	movs	r2, #32
 8000c84:	5c9a      	ldrb	r2, [r3, r2]
 8000c86:	230d      	movs	r3, #13
 8000c88:	18f9      	adds	r1, r7, r3
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	7809      	ldrb	r1, [r1, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	430b      	orrs	r3, r1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b2d9      	uxtb	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	5499      	strb	r1, [r3, r2]
	loraTx->fhssValue = HOPS_PERIOD;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	779a      	strb	r2, [r3, #30]
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b007      	add	sp, #28
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	0a21fe80 	.word	0x0a21fe80

08000cb4 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8000cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8000cbc:	2017      	movs	r0, #23
 8000cbe:	183b      	adds	r3, r7, r0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000cc4:	2416      	movs	r4, #22
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000ccc:	2515      	movs	r5, #21
 8000cce:	197b      	adds	r3, r7, r5
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000cd4:	2614      	movs	r6, #20
 8000cd6:	19bb      	adds	r3, r7, r6
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
	////////////////////////////////////////
	uint8_t rxTimeoutMask = 0x00 | (MASK_ENABLE << 7);
 8000cdc:	2313      	movs	r3, #19
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	uint8_t rxDoneMask = 0x00 | (MASK_ENABLE << 6);
 8000ce4:	2212      	movs	r2, #18
 8000ce6:	18bb      	adds	r3, r7, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000cec:	2111      	movs	r1, #17
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	701a      	strb	r2, [r3, #0]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	18bb      	adds	r3, r7, r2
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	701a      	strb	r2, [r3, #0]
	uint8_t txDoneMask = 0x00 | (MASK_DISABLE << 3);
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	18bb      	adds	r3, r7, r2
 8000d00:	2208      	movs	r2, #8
 8000d02:	701a      	strb	r2, [r3, #0]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000d04:	210e      	movs	r1, #14
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2204      	movs	r2, #4
 8000d0a:	701a      	strb	r2, [r3, #0]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000d0c:	220d      	movs	r2, #13
 8000d0e:	18bb      	adds	r3, r7, r2
 8000d10:	2202      	movs	r2, #2
 8000d12:	701a      	strb	r2, [r3, #0]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000d14:	210c      	movs	r1, #12
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]

	loraRx->frequency = UPLINK_FREQ;
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4a3b      	ldr	r2, [pc, #236]	; (8000e0c <setRxBaseParameters+0x158>)
 8000d20:	2300      	movs	r3, #0
 8000d22:	608a      	str	r2, [r1, #8]
 8000d24:	60cb      	str	r3, [r1, #12]
	loraRx->power = SX1278_POWER_17DBM;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	22fc      	movs	r2, #252	; 0xfc
 8000d2a:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	220a      	movs	r2, #10
 8000d30:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2206      	movs	r2, #6
 8000d36:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2234      	movs	r2, #52	; 0x34
 8000d48:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	220b      	movs	r2, #11
 8000d4e:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2223      	movs	r2, #35	; 0x23
 8000d54:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2208      	movs	r2, #8
 8000d60:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000d6e:	183a      	adds	r2, r7, r0
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	197b      	adds	r3, r7, r5
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	19bb      	adds	r3, r7, r6
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	77da      	strb	r2, [r3, #31]
	loraRx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000d8e:	2313      	movs	r3, #19
 8000d90:	18fa      	adds	r2, r7, r3
 8000d92:	2312      	movs	r3, #18
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	2111      	movs	r1, #17
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b2d9      	uxtb	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	5499      	strb	r1, [r3, r2]
	loraRx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2220      	movs	r2, #32
 8000db2:	5c9a      	ldrb	r2, [r3, r2]
 8000db4:	2310      	movs	r3, #16
 8000db6:	18f9      	adds	r1, r7, r3
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	7809      	ldrb	r1, [r1, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	5499      	strb	r1, [r3, r2]
	loraRx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2220      	movs	r2, #32
 8000ddc:	5c9a      	ldrb	r2, [r3, r2]
 8000dde:	230d      	movs	r3, #13
 8000de0:	18f9      	adds	r1, r7, r3
 8000de2:	230c      	movs	r3, #12
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	7809      	ldrb	r1, [r1, #0]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	430b      	orrs	r3, r1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b2d9      	uxtb	r1, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2220      	movs	r2, #32
 8000df6:	5499      	strb	r1, [r3, r2]
	loraRx->fhssValue = HOPS_PERIOD;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	779a      	strb	r2, [r3, #30]
	loraRx->packetLength = SX1278_MAX_PACKET;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	755a      	strb	r2, [r3, #21]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b007      	add	sp, #28
 8000e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0c:	0a21fe80 	.word	0x0a21fe80

08000e10 <saveRx>:

void saveRx(SX1278_t *module) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fdf6 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f001 f89c 	bl	8001f60 <HAL_Delay>
	//updateLoraLowFreq(module, STANDBY);
	setRFFrequency(module);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fc94 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fcf1 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fcda 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fcfc 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	238a      	movs	r3, #138	; 0x8a
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	58d0      	ldr	r0, [r2, r3]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3318      	adds	r3, #24
 8000e54:	001a      	movs	r2, r3
 8000e56:	2301      	movs	r3, #1
 8000e58:	210c      	movs	r1, #12
 8000e5a:	f7ff fc1d 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7c5b      	ldrb	r3, [r3, #17]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d10b      	bne.n	8000e7e <saveRx+0x6e>
		//SFactor=6
		module->headerMode = IMPLICIT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2221      	movs	r2, #33	; 0x21
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff fd7a 	bl	8000970 <setDetectionParameters>
 8000e7c:	e006      	b.n	8000e8c <saveRx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2221      	movs	r2, #33	; 0x21
 8000e82:	2100      	movs	r1, #0
 8000e84:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fd12 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff fce5 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	238a      	movs	r3, #138	; 0x8a
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	58d0      	ldr	r0, [r2, r3]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	331e      	adds	r3, #30
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2124      	movs	r1, #36	; 0x24
 8000eae:	f7ff fbf3 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	238a      	movs	r3, #138	; 0x8a
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	58d0      	ldr	r0, [r2, r3]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	331f      	adds	r3, #31
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	f7ff fbe8 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff fdc1 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	238a      	movs	r3, #138	; 0x8a
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	58d0      	ldr	r0, [r2, r3]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3320      	adds	r3, #32
 8000edc:	001a      	movs	r2, r3
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2111      	movs	r1, #17
 8000ee2:	f7ff fbd9 	bl	8000698 <writeRegister>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}

08000eee <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff fd87 	bl	8000a0e <updateLoraLowFreq>
	uint8_t cmd = module->packetLength;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7d5a      	ldrb	r2, [r3, #21]
 8000f04:	210f      	movs	r1, #15
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	238a      	movs	r3, #138	; 0x8a
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	58d0      	ldr	r0, [r2, r3]
 8000f12:	187a      	adds	r2, r7, r1
 8000f14:	2301      	movs	r3, #1
 8000f16:	2122      	movs	r1, #34	; 0x22
 8000f18:	f7ff fbbe 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	238a      	movs	r3, #138	; 0x8a
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	58d3      	ldr	r3, [r2, r3]
 8000f24:	210f      	movs	r1, #15
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff fb88 	bl	800063c <readRegister>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	001a      	movs	r2, r3
 8000f30:	210e      	movs	r1, #14
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	238a      	movs	r3, #138	; 0x8a
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	58d0      	ldr	r0, [r2, r3]
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	2301      	movs	r3, #1
 8000f42:	210d      	movs	r1, #13
 8000f44:	f7ff fba8 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	238a      	movs	r3, #138	; 0x8a
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	58d3      	ldr	r3, [r2, r3]
 8000f50:	2122      	movs	r1, #34	; 0x22
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fb72 	bl	800063c <readRegister>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	755a      	strb	r2, [r3, #21]
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <sx1278Reset>:

void sx1278Reset() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <sx1278Reset+0x3c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2101      	movs	r1, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 ff9f 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <sx1278Reset+0x3c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 ff99 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 ffeb 	bl	8001f60 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <sx1278Reset+0x3c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2101      	movs	r1, #1
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 ff90 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f000 ffe2 	bl	8001f60 <HAL_Delay>
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	50000400 	.word	0x50000400

08000fa8 <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2224      	movs	r2, #36	; 0x24
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d126      	bne.n	800100a <read+0x62>
		uint8_t tmp[] = "Configuring Slave LoRa module: Rx Mode\r\n";
 8000fbc:	2008      	movs	r0, #8
 8000fbe:	183b      	adds	r3, r7, r0
 8000fc0:	4a75      	ldr	r2, [pc, #468]	; (8001198 <read+0x1f0>)
 8000fc2:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000fc4:	c332      	stmia	r3!, {r1, r4, r5}
 8000fc6:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000fc8:	c332      	stmia	r3!, {r1, r4, r5}
 8000fca:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000fcc:	c332      	stmia	r3!, {r1, r4, r5}
 8000fce:	6811      	ldr	r1, [r2, #0]
 8000fd0:	6019      	str	r1, [r3, #0]
 8000fd2:	7912      	ldrb	r2, [r2, #4]
 8000fd4:	711a      	strb	r2, [r3, #4]
		size_t len = strlen(tmp);
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	183b      	adds	r3, r7, r0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff f890 	bl	8000100 <strlen>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_UART_Transmit(&*huart1, tmp, len, 100);
 8000fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	1939      	adds	r1, r7, r4
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	f003 fd03 	bl	80049f8 <HAL_UART_Transmit>
		setRxBaseParameters(&*loraRx);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fe5d 	bl	8000cb4 <setRxBaseParameters>
		saveRx(loraRx);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff07 	bl	8000e10 <saveRx>
		loraRx->status = RX_READY;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2224      	movs	r2, #36	; 0x24
 8001006:	2102      	movs	r1, #2
 8001008:	5499      	strb	r1, [r3, r2]
	}
	if (loraRx->status == RX_READY) {
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2224      	movs	r2, #36	; 0x24
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d10b      	bne.n	800102c <read+0x84>
		memset(loraRx->rxBuffer, 0, SX1278_MAX_PACKET);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	3325      	adds	r3, #37	; 0x25
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	0052      	lsls	r2, r2, #1
 800101c:	2100      	movs	r1, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f004 f9fe 	bl	8005420 <memset>
		setRxParameters(loraRx);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff61 	bl	8000eee <setRxParameters>
	}
	updateLoraLowFreq(&*loraRx, RX_SINGLE);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2106      	movs	r1, #6
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fcec 	bl	8000a0e <updateLoraLowFreq>
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001036:	e032      	b.n	800109e <read+0xf6>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	238a      	movs	r3, #138	; 0x8a
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	58d3      	ldr	r3, [r2, r3]
 8001040:	2549      	movs	r5, #73	; 0x49
 8001042:	197c      	adds	r4, r7, r5
 8001044:	2112      	movs	r1, #18
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff faf8 	bl	800063c <readRegister>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]
		if (flags && (MASK_DISABLE << 7)) {
 8001050:	002c      	movs	r4, r5
 8001052:	193b      	adds	r3, r7, r4
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d021      	beq.n	800109e <read+0xf6>
			uint8_t cmd = flags | (1 << 7);
 800105a:	193b      	adds	r3, r7, r4
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	4252      	negs	r2, r2
 8001062:	4313      	orrs	r3, r2
 8001064:	b2da      	uxtb	r2, r3
 8001066:	2133      	movs	r1, #51	; 0x33
 8001068:	187b      	adds	r3, r7, r1
 800106a:	701a      	strb	r2, [r3, #0]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	238a      	movs	r3, #138	; 0x8a
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	58d0      	ldr	r0, [r2, r3]
 8001074:	187a      	adds	r2, r7, r1
 8001076:	2301      	movs	r3, #1
 8001078:	2112      	movs	r1, #18
 800107a:	f7ff fb0d 	bl	8000698 <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	238a      	movs	r3, #138	; 0x8a
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	58d3      	ldr	r3, [r2, r3]
 8001086:	193c      	adds	r4, r7, r4
 8001088:	2112      	movs	r1, #18
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fad6 	bl	800063c <readRegister>
 8001090:	0003      	movs	r3, r0
 8001092:	7023      	strb	r3, [r4, #0]
			updateLoraLowFreq(&*loraRx, RX_SINGLE);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2106      	movs	r1, #6
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fcb8 	bl	8000a0e <updateLoraLowFreq>
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff fcea 	bl	8000a7c <SX1278_hw_GetDIO0>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d0c5      	beq.n	8001038 <read+0x90>
		}
	}; //if(Get_NIRQ()) //Packet send over
	loraRx->operatingMode = readMode(loraRx);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff fc98 	bl	80009e4 <readMode>
 80010b4:	0003      	movs	r3, r0
 80010b6:	0019      	movs	r1, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2223      	movs	r2, #35	; 0x23
 80010bc:	5499      	strb	r1, [r3, r2]
	loraRx->packetLength = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	238a      	movs	r3, #138	; 0x8a
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	58d3      	ldr	r3, [r2, r3]
 80010c6:	2113      	movs	r1, #19
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff fab7 	bl	800063c <readRegister>
 80010ce:	0003      	movs	r3, r0
 80010d0:	001a      	movs	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 80010d6:	2448      	movs	r4, #72	; 0x48
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <read+0x1f4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	0018      	movs	r0, r3
 80010e6:	f001 fee6 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 ff38 	bl	8001f60 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100);  // send address
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	238a      	movs	r3, #138	; 0x8a
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	58d0      	ldr	r0, [r2, r3]
 80010f8:	1939      	adds	r1, r7, r4
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	2201      	movs	r2, #1
 80010fe:	f002 fddb 	bl	8003cb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->rxBuffer, loraRx->packetLength, 100); // receive 6 bytes data
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	238a      	movs	r3, #138	; 0x8a
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	58d0      	ldr	r0, [r2, r3]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3325      	adds	r3, #37	; 0x25
 800110e:	0019      	movs	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7d5b      	ldrb	r3, [r3, #21]
 8001114:	b29a      	uxth	r2, r3
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	f002 ff26 	bl	8003f68 <HAL_SPI_Receive>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f000 ff1f 	bl	8001f60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <read+0x1f4>)
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	0018      	movs	r0, r3
 800112a:	f001 fec4 	bl	8002eb6 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(huart1, loraRx->rxBuffer, loraRx->packetLength, 100);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3325      	adds	r3, #37	; 0x25
 8001132:	0019      	movs	r1, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	7d5b      	ldrb	r3, [r3, #21]
 8001138:	b29a      	uxth	r2, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	f003 fc5b 	bl	80049f8 <HAL_UART_Transmit>
	clearIrqFlags(loraRx); //Clear irq
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fc84 	bl	8000a52 <clearIrqFlags>
	uint8_t tmp[] = " -> Reception OK\r\n";
 800114a:	2434      	movs	r4, #52	; 0x34
 800114c:	193b      	adds	r3, r7, r4
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <read+0x1f8>)
 8001150:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001152:	c323      	stmia	r3!, {r0, r1, r5}
 8001154:	6811      	ldr	r1, [r2, #0]
 8001156:	6019      	str	r1, [r3, #0]
 8001158:	8891      	ldrh	r1, [r2, #4]
 800115a:	8099      	strh	r1, [r3, #4]
 800115c:	7992      	ldrb	r2, [r2, #6]
 800115e:	719a      	strb	r2, [r3, #6]
	uint16_t len = strlen(tmp);
 8001160:	193b      	adds	r3, r7, r4
 8001162:	0018      	movs	r0, r3
 8001164:	f7fe ffcc 	bl	8000100 <strlen>
 8001168:	0002      	movs	r2, r0
 800116a:	214a      	movs	r1, #74	; 0x4a
 800116c:	187b      	adds	r3, r7, r1
 800116e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart1, tmp, len, 100);
 8001170:	187b      	adds	r3, r7, r1
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	1939      	adds	r1, r7, r4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	f003 fc3d 	bl	80049f8 <HAL_UART_Transmit>
	loraRx->operatingMode = readMode(loraRx);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fc2f 	bl	80009e4 <readMode>
 8001186:	0003      	movs	r3, r0
 8001188:	0019      	movs	r1, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2223      	movs	r2, #35	; 0x23
 800118e:	5499      	strb	r1, [r3, r2]
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b014      	add	sp, #80	; 0x50
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	08005d1c 	.word	0x08005d1c
 800119c:	50000400 	.word	0x50000400
 80011a0:	08005d48 	.word	0x08005d48

080011a4 <transmit>:
int messageCounter = 0;

void transmit(SX1278_t *loraTx){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b0a4      	sub	sp, #144	; 0x90
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		if (loraTx->status == UNKNOW) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	5c9b      	ldrb	r3, [r3, r2]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d128      	bne.n	8001208 <transmit+0x64>
			//printf("Configuring Slave LoRa module: Tx Mode\r\n");
			uint8_t tmp[] = "Configuring Slave LoRa module: Rx Mode\r\n";
 80011b6:	240c      	movs	r4, #12
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	4a88      	ldr	r2, [pc, #544]	; (80013dc <transmit+0x238>)
 80011bc:	ca23      	ldmia	r2!, {r0, r1, r5}
 80011be:	c323      	stmia	r3!, {r0, r1, r5}
 80011c0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80011c2:	c323      	stmia	r3!, {r0, r1, r5}
 80011c4:	ca23      	ldmia	r2!, {r0, r1, r5}
 80011c6:	c323      	stmia	r3!, {r0, r1, r5}
 80011c8:	6811      	ldr	r1, [r2, #0]
 80011ca:	6019      	str	r1, [r3, #0]
 80011cc:	7912      	ldrb	r2, [r2, #4]
 80011ce:	711a      	strb	r2, [r3, #4]
			size_t len = strlen(tmp);
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7fe ff94 	bl	8000100 <strlen>
 80011d8:	0003      	movs	r3, r0
 80011da:	2288      	movs	r2, #136	; 0x88
 80011dc:	18b9      	adds	r1, r7, r2
 80011de:	600b      	str	r3, [r1, #0]
			HAL_UART_Transmit(&huart1, tmp, len, 100);
 80011e0:	18bb      	adds	r3, r7, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	1939      	adds	r1, r7, r4
 80011e8:	487d      	ldr	r0, [pc, #500]	; (80013e0 <transmit+0x23c>)
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	f003 fc04 	bl	80049f8 <HAL_UART_Transmit>
			setTxBaseParameters(loraTx);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff fcb2 	bl	8000b5c <setTxBaseParameters>
			saveTx(loraTx);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f936 	bl	800146c <saveTx>
			loraTx->status = TX_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	2101      	movs	r1, #1
 8001206:	5499      	strb	r1, [r3, r2]
		}
		if (loraTx->status == TX_READY) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2224      	movs	r2, #36	; 0x24
 800120c:	5c9b      	ldrb	r3, [r3, r2]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d000      	beq.n	8001214 <transmit+0x70>
 8001212:	e0df      	b.n	80013d4 <transmit+0x230>
			memset(loraTx->txBuffer, 0, SX1278_MAX_PACKET);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3326      	adds	r3, #38	; 0x26
 8001218:	33ff      	adds	r3, #255	; 0xff
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	0052      	lsls	r2, r2, #1
 800121e:	2100      	movs	r1, #0
 8001220:	0018      	movs	r0, r3
 8001222:	f004 f8fd 	bl	8005420 <memset>
			loraTx->packetLength = sprintf((char*) loraTx->txBuffer, "Adios tia Paty, Adios tia Lela, "
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3326      	adds	r3, #38	; 0x26
 800122a:	33ff      	adds	r3, #255	; 0xff
 800122c:	0018      	movs	r0, r3
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <transmit+0x240>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <transmit+0x244>)
 8001234:	0019      	movs	r1, r3
 8001236:	f004 f8fb 	bl	8005430 <siprintf>
 800123a:	0003      	movs	r3, r0
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	755a      	strb	r2, [r3, #21]
					"saludos al loco Rene, al compadre moncho y "
					"al vendedor de leña %d",
					messageCounter);

			setTxParameters(loraTx);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f8d9 	bl	80013fc <setTxParameters>
			if (!(loraTx->packetLength > 0))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7d5b      	ldrb	r3, [r3, #21]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d100      	bne.n	8001254 <transmit+0xb0>
 8001252:	e0be      	b.n	80013d2 <transmit+0x22e>
				return;
			//printf("EntryTx OK!\r\n");
			uint8_t tmp1[]= "EntryTx OK!\r\n";
 8001254:	2464      	movs	r4, #100	; 0x64
 8001256:	193b      	adds	r3, r7, r4
 8001258:	4a64      	ldr	r2, [pc, #400]	; (80013ec <transmit+0x248>)
 800125a:	ca23      	ldmia	r2!, {r0, r1, r5}
 800125c:	c323      	stmia	r3!, {r0, r1, r5}
 800125e:	8812      	ldrh	r2, [r2, #0]
 8001260:	801a      	strh	r2, [r3, #0]
			size_t len1 = strlen(tmp1);
 8001262:	193b      	adds	r3, r7, r4
 8001264:	0018      	movs	r0, r3
 8001266:	f7fe ff4b 	bl	8000100 <strlen>
 800126a:	0003      	movs	r3, r0
 800126c:	2284      	movs	r2, #132	; 0x84
 800126e:	18b9      	adds	r1, r7, r2
 8001270:	600b      	str	r3, [r1, #0]
			HAL_UART_Transmit(&huart1, tmp1, len1, 100);
 8001272:	18bb      	adds	r3, r7, r2
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	1939      	adds	r1, r7, r4
 800127a:	4859      	ldr	r0, [pc, #356]	; (80013e0 <transmit+0x23c>)
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	f003 fbbb 	bl	80049f8 <HAL_UART_Transmit>
			//printf("Sending message: %s\r\n", loraTx->txBuffer);
			uint8_t tmp2[]= "Sending message: \r\n";
 8001282:	2450      	movs	r4, #80	; 0x50
 8001284:	193b      	adds	r3, r7, r4
 8001286:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <transmit+0x24c>)
 8001288:	ca23      	ldmia	r2!, {r0, r1, r5}
 800128a:	c323      	stmia	r3!, {r0, r1, r5}
 800128c:	ca03      	ldmia	r2!, {r0, r1}
 800128e:	c303      	stmia	r3!, {r0, r1}
			size_t len2 = strlen(tmp2);
 8001290:	193b      	adds	r3, r7, r4
 8001292:	0018      	movs	r0, r3
 8001294:	f7fe ff34 	bl	8000100 <strlen>
 8001298:	0003      	movs	r3, r0
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	18b9      	adds	r1, r7, r2
 800129e:	600b      	str	r3, [r1, #0]
			HAL_UART_Transmit(&huart1, tmp2, len2, 100);
 80012a0:	18bb      	adds	r3, r7, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	1939      	adds	r1, r7, r4
 80012a8:	484d      	ldr	r0, [pc, #308]	; (80013e0 <transmit+0x23c>)
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	f003 fba4 	bl	80049f8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, loraTx->txBuffer, loraTx->packetLength, 100);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3326      	adds	r3, #38	; 0x26
 80012b4:	33ff      	adds	r3, #255	; 0xff
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7d5b      	ldrb	r3, [r3, #21]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4848      	ldr	r0, [pc, #288]	; (80013e0 <transmit+0x23c>)
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	f003 fb99 	bl	80049f8 <HAL_UART_Transmit>

			for(int i = 0;i<loraTx->packetLength;i++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	228c      	movs	r2, #140	; 0x8c
 80012ca:	18ba      	adds	r2, r7, r2
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e019      	b.n	8001304 <transmit+0x160>
				char data = loraTx->txBuffer[i];
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	2326      	movs	r3, #38	; 0x26
 80012d4:	33ff      	adds	r3, #255	; 0xff
 80012d6:	248c      	movs	r4, #140	; 0x8c
 80012d8:	193a      	adds	r2, r7, r4
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	188a      	adds	r2, r1, r2
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	214f      	movs	r1, #79	; 0x4f
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	701a      	strb	r2, [r3, #0]
				writeRegister(loraTx->spi, 0x00, &data,1);
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	238a      	movs	r3, #138	; 0x8a
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	58d0      	ldr	r0, [r2, r3]
 80012f0:	187a      	adds	r2, r7, r1
 80012f2:	2301      	movs	r3, #1
 80012f4:	2100      	movs	r1, #0
 80012f6:	f7ff f9cf 	bl	8000698 <writeRegister>
			for(int i = 0;i<loraTx->packetLength;i++){
 80012fa:	193b      	adds	r3, r7, r4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	193a      	adds	r2, r7, r4
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d5b      	ldrb	r3, [r3, #21]
 8001308:	001a      	movs	r2, r3
 800130a:	238c      	movs	r3, #140	; 0x8c
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4293      	cmp	r3, r2
 8001312:	dbdd      	blt.n	80012d0 <transmit+0x12c>
		}
			updateLoraLowFreq(loraTx, TX);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2103      	movs	r1, #3
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fb78 	bl	8000a0e <updateLoraLowFreq>
			uint32_t timeStart = HAL_GetTick();
 800131e:	f000 fe15 	bl	8001f4c <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	67fb      	str	r3, [r7, #124]	; 0x7c
			while (1) {
				if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff fba6 	bl	8000a7c <SX1278_hw_GetDIO0>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d025      	beq.n	8001380 <transmit+0x1dc>
					readRegister(loraTx->spi, LR_RegIrqFlags);
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	238a      	movs	r3, #138	; 0x8a
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	58d3      	ldr	r3, [r2, r3]
 800133c:	2112      	movs	r1, #18
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff f97c 	bl	800063c <readRegister>
					clearIrqFlags(loraTx);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff fb83 	bl	8000a52 <clearIrqFlags>
					//printf("Transmission: OK\r\n");
					uint8_t tmp3[]= "\nTransmission: OK\r\n";
 800134c:	2438      	movs	r4, #56	; 0x38
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <transmit+0x250>)
 8001352:	ca23      	ldmia	r2!, {r0, r1, r5}
 8001354:	c323      	stmia	r3!, {r0, r1, r5}
 8001356:	ca03      	ldmia	r2!, {r0, r1}
 8001358:	c303      	stmia	r3!, {r0, r1}
					size_t len3 = strlen(tmp3);
 800135a:	193b      	adds	r3, r7, r4
 800135c:	0018      	movs	r0, r3
 800135e:	f7fe fecf 	bl	8000100 <strlen>
 8001362:	0003      	movs	r3, r0
 8001364:	677b      	str	r3, [r7, #116]	; 0x74
					HAL_UART_Transmit(&huart1, tmp3, len3, 100);
 8001366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001368:	b29a      	uxth	r2, r3
 800136a:	1939      	adds	r1, r7, r4
 800136c:	481c      	ldr	r0, [pc, #112]	; (80013e0 <transmit+0x23c>)
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	f003 fb42 	bl	80049f8 <HAL_UART_Transmit>
					messageCounter += 1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <transmit+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <transmit+0x240>)
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e029      	b.n	80013d4 <transmit+0x230>
					return;
				}

				if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8001380:	f000 fde4 	bl	8001f4c <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001388:	1ad2      	subs	r2, r2, r3
 800138a:	23fa      	movs	r3, #250	; 0xfa
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	429a      	cmp	r2, r3
 8001390:	d91b      	bls.n	80013ca <transmit+0x226>
					sx1278Reset();
 8001392:	f7ff fde9 	bl	8000f68 <sx1278Reset>
					//printf("EntryTx failed, timeout reset!\r\n");
					uint8_t tmp4[]= "EntryTx failed, timeout reset!\r\n";
 8001396:	210c      	movs	r1, #12
 8001398:	187b      	adds	r3, r7, r1
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <transmit+0x254>)
 800139c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800139e:	c331      	stmia	r3!, {r0, r4, r5}
 80013a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80013a2:	c331      	stmia	r3!, {r0, r4, r5}
 80013a4:	ca11      	ldmia	r2!, {r0, r4}
 80013a6:	c311      	stmia	r3!, {r0, r4}
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
					size_t len4 = strlen(tmp4);
 80013ac:	000c      	movs	r4, r1
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7fe fea5 	bl	8000100 <strlen>
 80013b6:	0003      	movs	r3, r0
 80013b8:	67bb      	str	r3, [r7, #120]	; 0x78
					HAL_UART_Transmit(&huart1, tmp4, len4, 100);
 80013ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013bc:	b29a      	uxth	r2, r3
 80013be:	1939      	adds	r1, r7, r4
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <transmit+0x23c>)
 80013c2:	2364      	movs	r3, #100	; 0x64
 80013c4:	f003 fb18 	bl	80049f8 <HAL_UART_Transmit>
 80013c8:	e004      	b.n	80013d4 <transmit+0x230>
					return;
				}

				HAL_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 fdc8 	bl	8001f60 <HAL_Delay>
				if (SX1278_hw_GetDIO0(loraTx->hw)) {
 80013d0:	e7a9      	b.n	8001326 <transmit+0x182>
				return;
 80013d2:	46c0      	nop			; (mov r8, r8)
			}
			loraTx->operatingMode = readMode(loraTx);
		}
}
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b024      	add	sp, #144	; 0x90
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	08005d1c 	.word	0x08005d1c
 80013e0:	20000178 	.word	0x20000178
 80013e4:	20000210 	.word	0x20000210
 80013e8:	08005d5c 	.word	0x08005d5c
 80013ec:	08005dc0 	.word	0x08005dc0
 80013f0:	08005dd0 	.word	0x08005dd0
 80013f4:	08005de4 	.word	0x08005de4
 80013f8:	08005df8 	.word	0x08005df8

080013fc <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->packetLength;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7d5a      	ldrb	r2, [r3, #21]
 8001408:	210f      	movs	r1, #15
 800140a:	187b      	adds	r3, r7, r1
 800140c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	238a      	movs	r3, #138	; 0x8a
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	58d0      	ldr	r0, [r2, r3]
 8001416:	187a      	adds	r2, r7, r1
 8001418:	2301      	movs	r3, #1
 800141a:	2122      	movs	r1, #34	; 0x22
 800141c:	f7ff f93c 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	238a      	movs	r3, #138	; 0x8a
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	58d3      	ldr	r3, [r2, r3]
 8001428:	210e      	movs	r1, #14
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff f906 	bl	800063c <readRegister>
 8001430:	0003      	movs	r3, r0
 8001432:	001a      	movs	r2, r3
 8001434:	210e      	movs	r1, #14
 8001436:	187b      	adds	r3, r7, r1
 8001438:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	238a      	movs	r3, #138	; 0x8a
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	58d0      	ldr	r0, [r2, r3]
 8001442:	187a      	adds	r2, r7, r1
 8001444:	2301      	movs	r3, #1
 8001446:	210d      	movs	r1, #13
 8001448:	f7ff f926 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	238a      	movs	r3, #138	; 0x8a
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	2122      	movs	r1, #34	; 0x22
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff f8f0 	bl	800063c <readRegister>
 800145c:	0003      	movs	r3, r0
 800145e:	001a      	movs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	755a      	strb	r2, [r3, #21]
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b004      	add	sp, #16
 800146a:	bd80      	pop	{r7, pc}

0800146c <saveTx>:

void saveTx(SX1278_t *module) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2100      	movs	r1, #0
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff fac8 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 fd6e 	bl	8001f60 <HAL_Delay>
	setRFFrequency(module);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff f966 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff f9c3 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff f9ac 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff f9ce 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	238a      	movs	r3, #138	; 0x8a
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	58d0      	ldr	r0, [r2, r3]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3318      	adds	r3, #24
 80014b0:	001a      	movs	r2, r3
 80014b2:	2301      	movs	r3, #1
 80014b4:	210c      	movs	r1, #12
 80014b6:	f7ff f8ef 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7c5b      	ldrb	r3, [r3, #17]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d10b      	bne.n	80014da <saveTx+0x6e>
		module->headerMode = IMPLICIT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2221      	movs	r2, #33	; 0x21
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff fa4c 	bl	8000970 <setDetectionParameters>
 80014d8:	e006      	b.n	80014e8 <saveTx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2221      	movs	r2, #33	; 0x21
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff f9e4 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff f9b7 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	238a      	movs	r3, #138	; 0x8a
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	58d0      	ldr	r0, [r2, r3]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	331e      	adds	r3, #30
 8001504:	001a      	movs	r2, r3
 8001506:	2301      	movs	r3, #1
 8001508:	2124      	movs	r1, #36	; 0x24
 800150a:	f7ff f8c5 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	238a      	movs	r3, #138	; 0x8a
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	58d0      	ldr	r0, [r2, r3]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	331f      	adds	r3, #31
 800151a:	001a      	movs	r2, r3
 800151c:	2301      	movs	r3, #1
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	f7ff f8ba 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fa93 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	238a      	movs	r3, #138	; 0x8a
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	58d0      	ldr	r0, [r2, r3]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3320      	adds	r3, #32
 8001538:	001a      	movs	r2, r3
 800153a:	2301      	movs	r3, #1
 800153c:	2111      	movs	r1, #17
 800153e:	f7ff f8ab 	bl	8000698 <writeRegister>
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	4c4d      	ldr	r4, [pc, #308]	; (8001684 <main+0x138>)
 8001550:	44a5      	add	sp, r4
 8001552:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001554:	f000 fc7e 	bl	8001e54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001558:	f000 f8a6 	bl	80016a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800155c:	f000 fa06 	bl	800196c <MX_GPIO_Init>
	MX_ADC1_Init();
 8001560:	f000 f8ea 	bl	8001738 <MX_ADC1_Init>
	MX_SPI1_Init();
 8001564:	f000 f976 	bl	8001854 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001568:	f000 f9b2 	bl	80018d0 <MX_USART1_UART_Init>
	MX_CRC_Init();
 800156c:	f000 f94e 	bl	800180c <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	ledInit(&led);
 8001570:	238f      	movs	r3, #143	; 0x8f
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fa96 	bl	8000aa8 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <main+0x13c>)
 800157e:	258c      	movs	r5, #140	; 0x8c
 8001580:	00ad      	lsls	r5, r5, #2
 8001582:	197a      	adds	r2, r7, r5
 8001584:	601a      	str	r2, [r3, #0]
	lora_ptr = &loraRx;
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <main+0x13c>)
 8001588:	003a      	movs	r2, r7
 800158a:	601a      	str	r2, [r3, #0]

	//int messageCounter = 0;

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 800158c:	218c      	movs	r1, #140	; 0x8c
 800158e:	00c9      	lsls	r1, r1, #3
 8001590:	187b      	adds	r3, r7, r1
 8001592:	4a3e      	ldr	r2, [pc, #248]	; (800168c <main+0x140>)
 8001594:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <main+0x144>)
 80015a0:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2201      	movs	r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	4a39      	ldr	r2, [pc, #228]	; (8001690 <main+0x144>)
 80015ac:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2202      	movs	r2, #2
 80015b2:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <main+0x138>)
 80015b6:	2493      	movs	r4, #147	; 0x93
 80015b8:	00e4      	lsls	r4, r4, #3
 80015ba:	191b      	adds	r3, r3, r4
 80015bc:	19db      	adds	r3, r3, r7
 80015be:	187a      	adds	r2, r7, r1
 80015c0:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <main+0x148>)
 80015c4:	191b      	adds	r3, r3, r4
 80015c6:	19db      	adds	r3, r3, r7
 80015c8:	187a      	adds	r2, r7, r1
 80015ca:	601a      	str	r2, [r3, #0]
	loraRx.spi = &hspi1;
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <main+0x138>)
 80015ce:	191b      	adds	r3, r3, r4
 80015d0:	19da      	adds	r2, r3, r7
 80015d2:	238a      	movs	r3, #138	; 0x8a
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4930      	ldr	r1, [pc, #192]	; (8001698 <main+0x14c>)
 80015d8:	50d1      	str	r1, [r2, r3]
	loraTx.spi = &hspi1;
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <main+0x148>)
 80015dc:	191b      	adds	r3, r3, r4
 80015de:	19da      	adds	r2, r3, r7
 80015e0:	238a      	movs	r3, #138	; 0x8a
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	492c      	ldr	r1, [pc, #176]	; (8001698 <main+0x14c>)
 80015e6:	50d1      	str	r1, [r2, r3]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <main+0x144>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	2101      	movs	r1, #1
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 fc61 	bl	8002eb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <main+0x144>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	2102      	movs	r1, #2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f001 fc5b 	bl	8002eb6 <HAL_GPIO_WritePin>
	loraRx.operatingMode = readMode(&loraRx);
 8001600:	003b      	movs	r3, r7
 8001602:	0018      	movs	r0, r3
 8001604:	f7ff f9ee 	bl	80009e4 <readMode>
 8001608:	0003      	movs	r3, r0
 800160a:	0019      	movs	r1, r3
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <main+0x138>)
 800160e:	191b      	adds	r3, r3, r4
 8001610:	19db      	adds	r3, r3, r7
 8001612:	2223      	movs	r2, #35	; 0x23
 8001614:	5499      	strb	r1, [r3, r2]
	loraTx.operatingMode = readMode(&loraTx);
 8001616:	197b      	adds	r3, r7, r5
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff f9e3 	bl	80009e4 <readMode>
 800161e:	0003      	movs	r3, r0
 8001620:	0019      	movs	r1, r3
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <main+0x148>)
 8001624:	191b      	adds	r3, r3, r4
 8001626:	19db      	adds	r3, r3, r7
 8001628:	2223      	movs	r2, #35	; 0x23
 800162a:	5499      	strb	r1, [r3, r2]
	loraRx.status = UNKNOW;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <main+0x138>)
 800162e:	191b      	adds	r3, r3, r4
 8001630:	19db      	adds	r3, r3, r7
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]
	loraTx.status = UNKNOW;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <main+0x148>)
 800163a:	191b      	adds	r3, r3, r4
 800163c:	19db      	adds	r3, r3, r7
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]

	bool RX_MODE = true;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <main+0x150>)
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
	bool TX_MODE = false;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <main+0x154>)
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (RX_MODE){
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <main+0x150>)
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <main+0x11e>
			read(&huart1, &loraRx);
 800165e:	003a      	movs	r2, r7
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <main+0x158>)
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fc9f 	bl	8000fa8 <read>
		}
		if(TX_MODE){
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <main+0x154>)
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <main+0x108>
        	//if (HAL_GetTick() - counter > 700){
        		//counter = HAL_GetTick();
	        transmit(&loraTx);
 8001674:	238c      	movs	r3, #140	; 0x8c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff fd92 	bl	80011a4 <transmit>
		if (RX_MODE){
 8001680:	e7e8      	b.n	8001654 <main+0x108>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	fffffb68 	.word	0xfffffb68
 8001688:	2000020c 	.word	0x2000020c
 800168c:	50000800 	.word	0x50000800
 8001690:	50000400 	.word	0x50000400
 8001694:	fffffd98 	.word	0xfffffd98
 8001698:	20000114 	.word	0x20000114
 800169c:	00000497 	.word	0x00000497
 80016a0:	00000496 	.word	0x00000496
 80016a4:	20000178 	.word	0x20000178

080016a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b093      	sub	sp, #76	; 0x4c
 80016ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016ae:	2414      	movs	r4, #20
 80016b0:	193b      	adds	r3, r7, r4
 80016b2:	0018      	movs	r0, r3
 80016b4:	2334      	movs	r3, #52	; 0x34
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f003 feb1 	bl	8005420 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2310      	movs	r3, #16
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f003 feaa 	bl	8005420 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f001 fc0d 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	f001 fc45 	bl	8002f88 <HAL_RCC_OscConfig>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x5e>
		Error_Handler();
 8001702:	f000 f9cb 	bl	8001a9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2100      	movs	r1, #0
 8001722:	0018      	movs	r0, r3
 8001724:	f001 ff40 	bl	80035a8 <HAL_RCC_ClockConfig>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x88>
		Error_Handler();
 800172c:	f000 f9b6 	bl	8001a9c <Error_Handler>
	}
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b013      	add	sp, #76	; 0x4c
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	0018      	movs	r0, r3
 8001742:	230c      	movs	r3, #12
 8001744:	001a      	movs	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	f003 fe6a 	bl	8005420 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <MX_ADC1_Init+0xcc>)
 800174e:	4a2e      	ldr	r2, [pc, #184]	; (8001808 <MX_ADC1_Init+0xd0>)
 8001750:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	05d2      	lsls	r2, r2, #23
 8001758:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <MX_ADC1_Init+0xcc>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <MX_ADC1_Init+0xcc>)
 800176e:	2204      	movs	r2, #4
 8001770:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001774:	2200      	movs	r2, #0
 8001776:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_ADC1_Init+0xcc>)
 800177a:	2200      	movs	r2, #0
 800177c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001786:	2201      	movs	r2, #1
 8001788:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_ADC1_Init+0xcc>)
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_ADC1_Init+0xcc>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_ADC1_Init+0xcc>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017a0:	222c      	movs	r2, #44	; 0x2c
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017ba:	223c      	movs	r2, #60	; 0x3c
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 fceb 	bl	80021a4 <HAL_ADC_Init>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <MX_ADC1_Init+0x9e>
		Error_Handler();
 80017d2:	f000 f963 	bl	8001a9c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017e8:	1d3a      	adds	r2, r7, #4
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_ADC1_Init+0xcc>)
 80017ec:	0011      	movs	r1, r2
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fe80 	bl	80024f4 <HAL_ADC_ConfigChannel>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0xc4>
		Error_Handler();
 80017f8:	f000 f950 	bl	8001a9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000008c 	.word	0x2000008c
 8001808:	40012400 	.word	0x40012400

0800180c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_CRC_Init+0x40>)
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <MX_CRC_Init+0x44>)
 8001814:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <MX_CRC_Init+0x40>)
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_CRC_Init+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_CRC_Init+0x40>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_CRC_Init+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_CRC_Init+0x40>)
 8001830:	2201      	movs	r2, #1
 8001832:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <MX_CRC_Init+0x40>)
 8001836:	0018      	movs	r0, r3
 8001838:	f001 f8e8 	bl	8002a0c <HAL_CRC_Init>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <MX_CRC_Init+0x38>
		Error_Handler();
 8001840:	f000 f92c 	bl	8001a9c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	200000f0 	.word	0x200000f0
 8001850:	40023000 	.word	0x40023000

08001854 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_SPI1_Init+0x74>)
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <MX_SPI1_Init+0x78>)
 800185c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001860:	2282      	movs	r2, #130	; 0x82
 8001862:	0052      	lsls	r2, r2, #1
 8001864:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_SPI1_Init+0x74>)
 800186e:	22e0      	movs	r2, #224	; 0xe0
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_SPI1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI1_Init+0x74>)
 800188a:	2218      	movs	r2, #24
 800188c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_SPI1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI1_Init+0x74>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_SPI1_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI1_Init+0x74>)
 80018ae:	2208      	movs	r2, #8
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <MX_SPI1_Init+0x74>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f002 f947 	bl	8003b48 <HAL_SPI_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80018be:	f000 f8ed 	bl	8001a9c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000114 	.word	0x20000114
 80018cc:	40013000 	.word	0x40013000

080018d0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018d6:	4a24      	ldr	r2, [pc, #144]	; (8001968 <MX_USART1_UART_Init+0x98>)
 80018d8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018dc:	22e1      	movs	r2, #225	; 0xe1
 80018de:	0252      	lsls	r2, r2, #9
 80018e0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_USART1_UART_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_USART1_UART_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_USART1_UART_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_USART1_UART_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART1_UART_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_USART1_UART_Init+0x94>)
 800191a:	0018      	movs	r0, r3
 800191c:	f003 f816 	bl	800494c <HAL_UART_Init>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001924:	f000 f8ba 	bl	8001a9c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART1_UART_Init+0x94>)
 800192a:	2100      	movs	r1, #0
 800192c:	0018      	movs	r0, r3
 800192e:	f003 fc6d 	bl	800520c <HAL_UARTEx_SetTxFifoThreshold>
 8001932:	1e03      	subs	r3, r0, #0
 8001934:	d001      	beq.n	800193a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001936:	f000 f8b1 	bl	8001a9c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <MX_USART1_UART_Init+0x94>)
 800193c:	2100      	movs	r1, #0
 800193e:	0018      	movs	r0, r3
 8001940:	f003 fca4 	bl	800528c <HAL_UARTEx_SetRxFifoThreshold>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001948:	f000 f8a8 	bl	8001a9c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <MX_USART1_UART_Init+0x94>)
 800194e:	0018      	movs	r0, r3
 8001950:	f003 fc22 	bl	8005198 <HAL_UARTEx_DisableFifoMode>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d001      	beq.n	800195c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001958:	f000 f8a0 	bl	8001a9c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	20000178 	.word	0x20000178
 8001968:	40013800 	.word	0x40013800

0800196c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001972:	240c      	movs	r4, #12
 8001974:	193b      	adds	r3, r7, r4
 8001976:	0018      	movs	r0, r3
 8001978:	2314      	movs	r3, #20
 800197a:	001a      	movs	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	f003 fd4f 	bl	8005420 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	2201      	movs	r2, #1
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <MX_GPIO_Init+0x124>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019a0:	2102      	movs	r1, #2
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019b8:	2104      	movs	r1, #4
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <MX_GPIO_Init+0x128>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	2103      	movs	r1, #3
 80019d0:	0018      	movs	r0, r3
 80019d2:	f001 fa70 	bl	8002eb6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	0059      	lsls	r1, r3, #1
 80019da:	23a0      	movs	r3, #160	; 0xa0
 80019dc:	05db      	lsls	r3, r3, #23
 80019de:	2200      	movs	r2, #0
 80019e0:	0018      	movs	r0, r3
 80019e2:	f001 fa68 	bl	8002eb6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_GPIO_Init+0x12c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 fa62 	bl	8002eb6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	2203      	movs	r2, #3
 80019f6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2201      	movs	r2, #1
 80019fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_GPIO_Init+0x128>)
 8001a0e:	0019      	movs	r1, r3
 8001a10:	0010      	movs	r0, r2
 8001a12:	f001 f8cf 	bl	8002bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	2204      	movs	r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <MX_GPIO_Init+0x128>)
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0010      	movs	r0, r2
 8001a30:	f001 f8c0 	bl	8002bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8001a34:	0021      	movs	r1, r4
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	0052      	lsls	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	000c      	movs	r4, r1
 8001a40:	193b      	adds	r3, r7, r4
 8001a42:	2201      	movs	r2, #1
 8001a44:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001a52:	193a      	adds	r2, r7, r4
 8001a54:	23a0      	movs	r3, #160	; 0xa0
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f001 f8aa 	bl	8002bb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 8001a60:	0021      	movs	r1, r4
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <MX_GPIO_Init+0x12c>)
 8001a7e:	0019      	movs	r1, r3
 8001a80:	0010      	movs	r0, r2
 8001a82:	f001 f897 	bl	8002bb4 <HAL_GPIO_Init>

}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b009      	add	sp, #36	; 0x24
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	50000400 	.word	0x50000400
 8001a98:	50000800 	.word	0x50000800

08001a9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_MspInit+0x44>)
 8001ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_MspInit+0x44>)
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_MspInit+0x44>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x44>)
 8001ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_MspInit+0x44>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0549      	lsls	r1, r1, #21
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_MspInit+0x44>)
 8001ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	055b      	lsls	r3, r3, #21
 8001adc:	4013      	ands	r3, r2
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	2414      	movs	r4, #20
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	0018      	movs	r0, r3
 8001afe:	2314      	movs	r3, #20
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f003 fc8c 	bl	8005420 <memset>
  if(hadc->Instance==ADC1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_ADC_MspInit+0x80>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d129      	bne.n	8001b66 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0349      	lsls	r1, r1, #13
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	035b      	lsls	r3, r3, #13
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_ADC_MspInit+0x84>)
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	2203      	movs	r2, #3
 8001b50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	193a      	adds	r2, r7, r4
 8001b5a:	23a0      	movs	r3, #160	; 0xa0
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f001 f827 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b00b      	add	sp, #44	; 0x2c
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40012400 	.word	0x40012400
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_CRC_MspInit+0x38>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10d      	bne.n	8001ba6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_CRC_MspInit+0x3c>)
 8001b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_CRC_MspInit+0x3c>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0149      	lsls	r1, r1, #5
 8001b94:	430a      	orrs	r2, r1
 8001b96:	639a      	str	r2, [r3, #56]	; 0x38
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_CRC_MspInit+0x3c>)
 8001b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	015b      	lsls	r3, r3, #5
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40023000 	.word	0x40023000
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b08b      	sub	sp, #44	; 0x2c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	2414      	movs	r4, #20
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	2314      	movs	r3, #20
 8001bc8:	001a      	movs	r2, r3
 8001bca:	2100      	movs	r1, #0
 8001bcc:	f003 fc28 	bl	8005420 <memset>
  if(hspi->Instance==SPI1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <HAL_SPI_MspInit+0xd0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d152      	bne.n	8001c80 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	0149      	lsls	r1, r1, #5
 8001be4:	430a      	orrs	r2, r1
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	015b      	lsls	r3, r3, #5
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	2201      	movs	r2, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001c14:	2102      	movs	r1, #2
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_SPI_MspInit+0xd4>)
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	22c0      	movs	r2, #192	; 0xc0
 8001c2a:	0152      	lsls	r2, r2, #5
 8001c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2202      	movs	r2, #2
 8001c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	193a      	adds	r2, r7, r4
 8001c48:	23a0      	movs	r3, #160	; 0xa0
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 ffb0 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 8001c54:	0021      	movs	r1, r4
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2208      	movs	r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2202      	movs	r2, #2
 8001c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_SPI_MspInit+0xd8>)
 8001c78:	0019      	movs	r1, r3
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	f000 ff9a 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00b      	add	sp, #44	; 0x2c
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	50000400 	.word	0x50000400

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b091      	sub	sp, #68	; 0x44
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	232c      	movs	r3, #44	; 0x2c
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	2314      	movs	r3, #20
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f003 fbba 	bl	8005420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	2414      	movs	r4, #20
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	2318      	movs	r3, #24
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f003 fbb2 	bl	8005420 <memset>
  if(huart->Instance==USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_UART_MspInit+0xbc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d13f      	bne.n	8001d46 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f001 fe11 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cde:	f7ff fedd 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	01c9      	lsls	r1, r1, #7
 8001cec:	430a      	orrs	r2, r1
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	01db      	lsls	r3, r3, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_UART_MspInit+0xc0>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	22c0      	movs	r2, #192	; 0xc0
 8001d1c:	00d2      	lsls	r2, r2, #3
 8001d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2202      	movs	r2, #2
 8001d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2201      	movs	r2, #1
 8001d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	187a      	adds	r2, r7, r1
 8001d3a:	23a0      	movs	r3, #160	; 0xa0
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	0011      	movs	r1, r2
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 ff37 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b011      	add	sp, #68	; 0x44
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40021000 	.word	0x40021000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f000 f8d4 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f003 fb08 	bl	80053cc <__errno>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	18d2      	adds	r2, r2, r3
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20002000 	.word	0x20002000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000214 	.word	0x20000214
 8001df0:	20000230 	.word	0x20000230

08001df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e04:	f7ff fff6 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e2e:	f003 fad3 	bl	80053d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e32:	f7ff fb8b 	bl	800154c <main>

08001e36 <LoopForever>:

LoopForever:
  b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   r0, =_estack
 8001e38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e44:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8001e48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e4c:	2000022c 	.word	0x2000022c

08001e50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_Init+0x3c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Init+0x3c>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0049      	lsls	r1, r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f810 	bl	8001e94 <HAL_InitTick>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e001      	b.n	8001e84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fe12 	bl	8001aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_InitTick+0x88>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d02b      	beq.n	8001f04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_InitTick+0x8c>)
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_InitTick+0x88>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	23fa      	movs	r3, #250	; 0xfa
 8001eb8:	0098      	lsls	r0, r3, #2
 8001eba:	f7fe f933 	bl	8000124 <__udivsi3>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f7fe f92e 	bl	8000124 <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fd91 	bl	80029f2 <HAL_SYSTICK_Config>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d112      	bne.n	8001efa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d80a      	bhi.n	8001ef0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2301      	movs	r3, #1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fd70 	bl	80029c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_InitTick+0x90>)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00d      	b.n	8001f0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e008      	b.n	8001f0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e003      	b.n	8001f0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f04:	230f      	movs	r3, #15
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b005      	add	sp, #20
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	001a      	movs	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	18d2      	adds	r2, r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000218 	.word	0x20000218

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000218 	.word	0x20000218

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001fb8:	401a      	ands	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	fe3fffff 	.word	0xfe3fffff

08001fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	23e0      	movs	r3, #224	; 0xe0
 8001fde:	045b      	lsls	r3, r3, #17
 8001fe0:	4013      	ands	r3, r2
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	400a      	ands	r2, r1
 8002000:	2107      	movs	r1, #7
 8002002:	4091      	lsls	r1, r2
 8002004:	000a      	movs	r2, r1
 8002006:	43d2      	mvns	r2, r2
 8002008:	401a      	ands	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2104      	movs	r1, #4
 800200e:	400b      	ands	r3, r1
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4099      	lsls	r1, r3
 8002014:	000b      	movs	r3, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}

08002024 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	2104      	movs	r1, #4
 8002036:	400a      	ands	r2, r1
 8002038:	2107      	movs	r1, #7
 800203a:	4091      	lsls	r1, r2
 800203c:	000a      	movs	r2, r1
 800203e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2104      	movs	r1, #4
 8002044:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002046:	40da      	lsrs	r2, r3
 8002048:	0013      	movs	r3, r2
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}

08002052 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	211f      	movs	r1, #31
 8002066:	400a      	ands	r2, r1
 8002068:	210f      	movs	r1, #15
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	43d2      	mvns	r2, r2
 8002070:	401a      	ands	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	210f      	movs	r1, #15
 8002078:	4019      	ands	r1, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	201f      	movs	r0, #31
 800207e:	4003      	ands	r3, r0
 8002080:	4099      	lsls	r1, r3
 8002082:	000b      	movs	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b004      	add	sp, #16
 8002090:	bd80      	pop	{r7, pc}

08002092 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	035b      	lsls	r3, r3, #13
 80020a4:	0b5b      	lsrs	r3, r3, #13
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	0352      	lsls	r2, r2, #13
 80020c6:	0b52      	lsrs	r2, r2, #13
 80020c8:	43d2      	mvns	r2, r2
 80020ca:	401a      	ands	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	43d2      	mvns	r2, r2
 80020ee:	401a      	ands	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	400b      	ands	r3, r1
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <LL_ADC_SetChannelSamplingTime+0x34>)
 80020fa:	400b      	ands	r3, r1
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	b004      	add	sp, #16
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	07ffff00 	.word	0x07ffff00

08002110 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <LL_ADC_EnableInternalRegulator+0x24>)
 800211e:	4013      	ands	r3, r2
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	0552      	lsls	r2, r2, #21
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b002      	add	sp, #8
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	6fffffe8 	.word	0x6fffffe8

08002138 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	401a      	ands	r2, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	429a      	cmp	r2, r3
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <LL_ADC_IsEnabled+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_IsEnabled+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}

08002182 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	2b04      	cmp	r3, #4
 8002194:	d101      	bne.n	800219a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	231f      	movs	r3, #31
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e17f      	b.n	80024ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff fc8b 	bl	8001af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2254      	movs	r2, #84	; 0x54
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7ff ffa3 	bl	8002138 <LL_ADC_IsInternalRegulatorEnabled>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d115      	bne.n	8002222 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff ff88 	bl	8002110 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002200:	4bb4      	ldr	r3, [pc, #720]	; (80024d4 <HAL_ADC_Init+0x330>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	49b4      	ldr	r1, [pc, #720]	; (80024d8 <HAL_ADC_Init+0x334>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7fd ff8c 	bl	8000124 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002214:	e002      	b.n	800221c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3b01      	subs	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ff86 	bl	8002138 <LL_ADC_IsInternalRegulatorEnabled>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d10f      	bne.n	8002250 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	2210      	movs	r2, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff94 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 800225a:	0003      	movs	r3, r0
 800225c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	2210      	movs	r2, #16
 8002264:	4013      	ands	r3, r2
 8002266:	d000      	beq.n	800226a <HAL_ADC_Init+0xc6>
 8002268:	e122      	b.n	80024b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d000      	beq.n	8002272 <HAL_ADC_Init+0xce>
 8002270:	e11e      	b.n	80024b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	4a99      	ldr	r2, [pc, #612]	; (80024dc <HAL_ADC_Init+0x338>)
 8002278:	4013      	ands	r3, r2
 800227a:	2202      	movs	r2, #2
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0018      	movs	r0, r3
 8002288:	f7ff ff6a 	bl	8002160 <LL_ADC_IsEnabled>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d000      	beq.n	8002292 <HAL_ADC_Init+0xee>
 8002290:	e0ad      	b.n	80023ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e1b      	ldrb	r3, [r3, #24]
 800229a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800229c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e5b      	ldrb	r3, [r3, #25]
 80022a2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022a4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e9b      	ldrb	r3, [r3, #26]
 80022aa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022ac:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_ADC_Init+0x118>
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	015b      	lsls	r3, r3, #5
 80022ba:	e000      	b.n	80022be <HAL_ADC_Init+0x11a>
 80022bc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022be:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022c4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da04      	bge.n	80022d8 <HAL_ADC_Init+0x134>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	e001      	b.n	80022dc <HAL_ADC_Init+0x138>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80022dc:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	5c5b      	ldrb	r3, [r3, r1]
 80022e4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022e6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d115      	bne.n	8002324 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e9b      	ldrb	r3, [r3, #26]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	0252      	lsls	r2, r2, #9
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e00b      	b.n	8002324 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	2220      	movs	r2, #32
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2201      	movs	r2, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002330:	23e0      	movs	r3, #224	; 0xe0
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800233a:	4313      	orrs	r3, r2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a65      	ldr	r2, [pc, #404]	; (80024e0 <HAL_ADC_Init+0x33c>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0f9b      	lsrs	r3, r3, #30
 800235e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002364:	4313      	orrs	r3, r2
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	223c      	movs	r2, #60	; 0x3c
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d111      	bne.n	800239a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0f9b      	lsrs	r3, r3, #30
 800237c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002382:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002388:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800238e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	2201      	movs	r2, #1
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	4a50      	ldr	r2, [pc, #320]	; (80024e4 <HAL_ADC_Init+0x340>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	23c0      	movs	r3, #192	; 0xc0
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d018      	beq.n	80023ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	05db      	lsls	r3, r3, #23
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d012      	beq.n	80023ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	061b      	lsls	r3, r3, #24
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d00c      	beq.n	80023ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023d4:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <HAL_ADC_Init+0x344>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a44      	ldr	r2, [pc, #272]	; (80024ec <HAL_ADC_Init+0x348>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	23f0      	movs	r3, #240	; 0xf0
 80023e4:	039b      	lsls	r3, r3, #14
 80023e6:	401a      	ands	r2, r3
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_ADC_Init+0x344>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	001a      	movs	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	f7ff fdf6 	bl	8001fea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	493a      	ldr	r1, [pc, #232]	; (80024f0 <HAL_ADC_Init+0x34c>)
 8002408:	001a      	movs	r2, r3
 800240a:	f7ff fdee 	bl	8001fea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2110      	movs	r1, #16
 8002422:	4249      	negs	r1, r1
 8002424:	430a      	orrs	r2, r1
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
 8002428:	e018      	b.n	800245c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	039b      	lsls	r3, r3, #14
 8002432:	429a      	cmp	r2, r3
 8002434:	d112      	bne.n	800245c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	3b01      	subs	r3, #1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	221c      	movs	r2, #28
 8002446:	4013      	ands	r3, r2
 8002448:	2210      	movs	r2, #16
 800244a:	4252      	negs	r2, r2
 800244c:	409a      	lsls	r2, r3
 800244e:	0011      	movs	r1, r2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fdde 	bl	8002024 <LL_ADC_GetSamplingTimeCommonChannels>
 8002468:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800246e:	429a      	cmp	r2, r3
 8002470:	d10b      	bne.n	800248a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	2203      	movs	r2, #3
 800247e:	4393      	bics	r3, r2
 8002480:	2201      	movs	r2, #1
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002488:	e01c      	b.n	80024c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	2212      	movs	r2, #18
 8002490:	4393      	bics	r3, r2
 8002492:	2210      	movs	r2, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2201      	movs	r2, #1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024a6:	231f      	movs	r3, #31
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024ae:	e009      	b.n	80024c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	2210      	movs	r2, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024c4:	231f      	movs	r3, #31
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	781b      	ldrb	r3, [r3, #0]
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b008      	add	sp, #32
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	20000000 	.word	0x20000000
 80024d8:	00030d40 	.word	0x00030d40
 80024dc:	fffffefd 	.word	0xfffffefd
 80024e0:	fffe0201 	.word	0xfffe0201
 80024e4:	1ffffc02 	.word	0x1ffffc02
 80024e8:	40012708 	.word	0x40012708
 80024ec:	ffc3ffff 	.word	0xffc3ffff
 80024f0:	07ffff04 	.word	0x07ffff04

080024f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2317      	movs	r3, #23
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2254      	movs	r2, #84	; 0x54
 800250e:	5c9b      	ldrb	r3, [r3, r2]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x24>
 8002514:	2302      	movs	r3, #2
 8002516:	e1c0      	b.n	800289a <HAL_ADC_ConfigChannel+0x3a6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2254      	movs	r2, #84	; 0x54
 800251c:	2101      	movs	r1, #1
 800251e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fe2c 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d000      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x3c>
 800252e:	e1a3      	b.n	8002878 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d100      	bne.n	800253a <HAL_ADC_ConfigChannel+0x46>
 8002538:	e143      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	429a      	cmp	r2, r3
 8002544:	d004      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800254a:	4ac1      	ldr	r2, [pc, #772]	; (8002850 <HAL_ADC_ConfigChannel+0x35c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d108      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0019      	movs	r1, r3
 800255a:	0010      	movs	r0, r2
 800255c:	f7ff fd99 	bl	8002092 <LL_ADC_REG_SetSequencerChAdd>
 8002560:	e0c9      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	211f      	movs	r1, #31
 800256c:	400b      	ands	r3, r1
 800256e:	210f      	movs	r1, #15
 8002570:	4099      	lsls	r1, r3
 8002572:	000b      	movs	r3, r1
 8002574:	43db      	mvns	r3, r3
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	035b      	lsls	r3, r3, #13
 8002580:	0b5b      	lsrs	r3, r3, #13
 8002582:	d105      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x9c>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	221f      	movs	r2, #31
 800258c:	4013      	ands	r3, r2
 800258e:	e098      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d000      	beq.n	800259c <HAL_ADC_ConfigChannel+0xa8>
 800259a:	e091      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x1cc>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d000      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0xb4>
 80025a6:	e089      	b.n	80026bc <HAL_ADC_ConfigChannel+0x1c8>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2204      	movs	r2, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	d000      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0xc0>
 80025b2:	e081      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x1c4>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d000      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0xcc>
 80025be:	e079      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1c0>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2210      	movs	r2, #16
 80025c6:	4013      	ands	r3, r2
 80025c8:	d000      	beq.n	80025cc <HAL_ADC_ConfigChannel+0xd8>
 80025ca:	e071      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1bc>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d000      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0xe4>
 80025d6:	e069      	b.n	80026ac <HAL_ADC_ConfigChannel+0x1b8>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	4013      	ands	r3, r2
 80025e0:	d000      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0xf0>
 80025e2:	e061      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x1b4>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	4013      	ands	r3, r2
 80025ec:	d000      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0xfc>
 80025ee:	e059      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x1b0>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d151      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1ac>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d149      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1a8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4013      	ands	r3, r2
 8002612:	d141      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1a4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4013      	ands	r3, r2
 800261e:	d139      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1a0>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	4013      	ands	r3, r2
 800262a:	d131      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x19c>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	019b      	lsls	r3, r3, #6
 8002634:	4013      	ands	r3, r2
 8002636:	d129      	bne.n	800268c <HAL_ADC_ConfigChannel+0x198>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4013      	ands	r3, r2
 8002642:	d121      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x194>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4013      	ands	r3, r2
 800264e:	d119      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x190>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	4013      	ands	r3, r2
 800265a:	d111      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x18c>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	029b      	lsls	r3, r3, #10
 8002664:	4013      	ands	r3, r2
 8002666:	d109      	bne.n	800267c <HAL_ADC_ConfigChannel+0x188>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	02db      	lsls	r3, r3, #11
 8002670:	4013      	ands	r3, r2
 8002672:	d001      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x184>
 8002674:	2312      	movs	r3, #18
 8002676:	e024      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002678:	2300      	movs	r3, #0
 800267a:	e022      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 800267c:	2311      	movs	r3, #17
 800267e:	e020      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002680:	2310      	movs	r3, #16
 8002682:	e01e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002684:	230f      	movs	r3, #15
 8002686:	e01c      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002688:	230e      	movs	r3, #14
 800268a:	e01a      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 800268c:	230d      	movs	r3, #13
 800268e:	e018      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002690:	230c      	movs	r3, #12
 8002692:	e016      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002694:	230b      	movs	r3, #11
 8002696:	e014      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 8002698:	230a      	movs	r3, #10
 800269a:	e012      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 800269c:	2309      	movs	r3, #9
 800269e:	e010      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026a0:	2308      	movs	r3, #8
 80026a2:	e00e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026a4:	2307      	movs	r3, #7
 80026a6:	e00c      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026a8:	2306      	movs	r3, #6
 80026aa:	e00a      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026ac:	2305      	movs	r3, #5
 80026ae:	e008      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e006      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e004      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e002      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1ce>
 80026c0:	2300      	movs	r3, #0
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6852      	ldr	r2, [r2, #4]
 80026c6:	201f      	movs	r0, #31
 80026c8:	4002      	ands	r2, r0
 80026ca:	4093      	lsls	r3, r2
 80026cc:	000a      	movs	r2, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d808      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	001a      	movs	r2, r3
 80026f2:	f7ff fcae 	bl	8002052 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	001a      	movs	r2, r3
 8002704:	f7ff fce8 	bl	80020d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db00      	blt.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
 8002710:	e0bc      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002712:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 8002714:	0018      	movs	r0, r3
 8002716:	f7ff fc5b 	bl	8001fd0 <LL_ADC_GetCommonPathInternalCh>
 800271a:	0003      	movs	r3, r0
 800271c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a4d      	ldr	r2, [pc, #308]	; (8002858 <HAL_ADC_ConfigChannel+0x364>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d122      	bne.n	800276e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002730:	d11d      	bne.n	800276e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0412      	lsls	r2, r2, #16
 8002738:	4313      	orrs	r3, r2
 800273a:	4a46      	ldr	r2, [pc, #280]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 800273c:	0019      	movs	r1, r3
 800273e:	0010      	movs	r0, r2
 8002740:	f7ff fc32 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002744:	4b45      	ldr	r3, [pc, #276]	; (800285c <HAL_ADC_ConfigChannel+0x368>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4945      	ldr	r1, [pc, #276]	; (8002860 <HAL_ADC_ConfigChannel+0x36c>)
 800274a:	0018      	movs	r0, r3
 800274c:	f7fd fcea 	bl	8000124 <__udivsi3>
 8002750:	0003      	movs	r3, r0
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	0013      	movs	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	189b      	adds	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800275e:	e002      	b.n	8002766 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3b01      	subs	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f9      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800276c:	e08e      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_ADC_ConfigChannel+0x370>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d10e      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	045b      	lsls	r3, r3, #17
 800277e:	4013      	ands	r3, r2
 8002780:	d109      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0452      	lsls	r2, r2, #17
 8002788:	4313      	orrs	r3, r2
 800278a:	4a32      	ldr	r2, [pc, #200]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 800278c:	0019      	movs	r1, r3
 800278e:	0010      	movs	r0, r2
 8002790:	f7ff fc0a 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
 8002794:	e07a      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a33      	ldr	r2, [pc, #204]	; (8002868 <HAL_ADC_ConfigChannel+0x374>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d000      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x2ae>
 80027a0:	e074      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	03db      	lsls	r3, r3, #15
 80027a8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027aa:	d000      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x2ba>
 80027ac:	e06e      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	03d2      	lsls	r2, r2, #15
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f7ff fbf4 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
 80027c0:	e064      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_ADC_ConfigChannel+0x35c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d107      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0019      	movs	r1, r3
 80027e2:	0010      	movs	r0, r2
 80027e4:	f7ff fc66 	bl	80020b4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da4d      	bge.n	800288c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fbec 	bl	8001fd0 <LL_ADC_GetCommonPathInternalCh>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_ADC_ConfigChannel+0x364>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_ADC_ConfigChannel+0x378>)
 800280a:	4013      	ands	r3, r2
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f7ff fbc9 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
 8002816:	e039      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a11      	ldr	r2, [pc, #68]	; (8002864 <HAL_ADC_ConfigChannel+0x370>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_ADC_ConfigChannel+0x37c>)
 8002826:	4013      	ands	r3, r2
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 800282a:	0019      	movs	r1, r3
 800282c:	0010      	movs	r0, r2
 800282e:	f7ff fbbb 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
 8002832:	e02b      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_ADC_ConfigChannel+0x374>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d126      	bne.n	800288c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_ADC_ConfigChannel+0x380>)
 8002842:	4013      	ands	r3, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_ADC_ConfigChannel+0x360>)
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f7ff fbad 	bl	8001fa8 <LL_ADC_SetCommonPathInternalCh>
 800284e:	e01d      	b.n	800288c <HAL_ADC_ConfigChannel+0x398>
 8002850:	80000004 	.word	0x80000004
 8002854:	40012708 	.word	0x40012708
 8002858:	b0001000 	.word	0xb0001000
 800285c:	20000000 	.word	0x20000000
 8002860:	00030d40 	.word	0x00030d40
 8002864:	b8004000 	.word	0xb8004000
 8002868:	b4002000 	.word	0xb4002000
 800286c:	ff7fffff 	.word	0xff7fffff
 8002870:	feffffff 	.word	0xfeffffff
 8002874:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	2220      	movs	r2, #32
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2254      	movs	r2, #84	; 0x54
 8002890:	2100      	movs	r1, #0
 8002892:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002894:	2317      	movs	r3, #23
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	0002      	movs	r2, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b7f      	cmp	r3, #127	; 0x7f
 80028b8:	d828      	bhi.n	800290c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ba:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <__NVIC_SetPriority+0xd4>)
 80028bc:	1dfb      	adds	r3, r7, #7
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	33c0      	adds	r3, #192	; 0xc0
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	589b      	ldr	r3, [r3, r2]
 80028ca:	1dfa      	adds	r2, r7, #7
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	0011      	movs	r1, r2
 80028d0:	2203      	movs	r2, #3
 80028d2:	400a      	ands	r2, r1
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	21ff      	movs	r1, #255	; 0xff
 80028d8:	4091      	lsls	r1, r2
 80028da:	000a      	movs	r2, r1
 80028dc:	43d2      	mvns	r2, r2
 80028de:	401a      	ands	r2, r3
 80028e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	401a      	ands	r2, r3
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	0018      	movs	r0, r3
 80028f0:	2303      	movs	r3, #3
 80028f2:	4003      	ands	r3, r0
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f8:	481f      	ldr	r0, [pc, #124]	; (8002978 <__NVIC_SetPriority+0xd4>)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	430a      	orrs	r2, r1
 8002904:	33c0      	adds	r3, #192	; 0xc0
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800290a:	e031      	b.n	8002970 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <__NVIC_SetPriority+0xd8>)
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	0019      	movs	r1, r3
 8002914:	230f      	movs	r3, #15
 8002916:	400b      	ands	r3, r1
 8002918:	3b08      	subs	r3, #8
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3306      	adds	r3, #6
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	3304      	adds	r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1dfa      	adds	r2, r7, #7
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	0011      	movs	r1, r2
 800292c:	2203      	movs	r2, #3
 800292e:	400a      	ands	r2, r1
 8002930:	00d2      	lsls	r2, r2, #3
 8002932:	21ff      	movs	r1, #255	; 0xff
 8002934:	4091      	lsls	r1, r2
 8002936:	000a      	movs	r2, r1
 8002938:	43d2      	mvns	r2, r2
 800293a:	401a      	ands	r2, r3
 800293c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	401a      	ands	r2, r3
 8002946:	1dfb      	adds	r3, r7, #7
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	0018      	movs	r0, r3
 800294c:	2303      	movs	r3, #3
 800294e:	4003      	ands	r3, r0
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <__NVIC_SetPriority+0xd8>)
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	001c      	movs	r4, r3
 800295c:	230f      	movs	r3, #15
 800295e:	4023      	ands	r3, r4
 8002960:	3b08      	subs	r3, #8
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	430a      	orrs	r2, r1
 8002966:	3306      	adds	r3, #6
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	18c3      	adds	r3, r0, r3
 800296c:	3304      	adds	r3, #4
 800296e:	601a      	str	r2, [r3, #0]
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b003      	add	sp, #12
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	045b      	lsls	r3, r3, #17
 8002990:	429a      	cmp	r2, r3
 8002992:	d301      	bcc.n	8002998 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002994:	2301      	movs	r3, #1
 8002996:	e010      	b.n	80029ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <SysTick_Config+0x44>)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	3a01      	subs	r2, #1
 800299e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a0:	2301      	movs	r3, #1
 80029a2:	425b      	negs	r3, r3
 80029a4:	2103      	movs	r1, #3
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff ff7c 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SysTick_Config+0x44>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <SysTick_Config+0x44>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	210f      	movs	r1, #15
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	1c02      	adds	r2, r0, #0
 80029d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff ff5d 	bl	80028a4 <__NVIC_SetPriority>
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff ffbf 	bl	8002980 <SysTick_Config>
 8002a02:	0003      	movs	r3, r0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e056      	b.n	8002acc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7f5b      	ldrb	r3, [r3, #29]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff f8a1 	bl	8001b78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	791b      	ldrb	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10c      	bne.n	8002a5e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_CRC_Init+0xc8>)
 8002a4a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2118      	movs	r1, #24
 8002a58:	438a      	bics	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e00b      	b.n	8002a76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f835 	bl	8002ad8 <HAL_CRCEx_Polynomial_Set>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02a      	b.n	8002acc <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	795b      	ldrb	r3, [r3, #5]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4252      	negs	r2, r2
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	e004      	b.n	8002a94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6912      	ldr	r2, [r2, #16]
 8002a92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2260      	movs	r2, #96	; 0x60
 8002a9c:	4393      	bics	r3, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	04c11db7 	.word	0x04c11db7

08002ad8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2317      	movs	r3, #23
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002aec:	231f      	movs	r3, #31
 8002aee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	613a      	str	r2, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_CRCEx_Polynomial_Set+0x36>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	221f      	movs	r2, #31
 8002b00:	4013      	ands	r3, r2
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	40da      	lsrs	r2, r3
 8002b06:	0013      	movs	r3, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0f1      	beq.n	8002af2 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b18      	cmp	r3, #24
 8002b12:	d00f      	beq.n	8002b34 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b18      	cmp	r3, #24
 8002b18:	d824      	bhi.n	8002b64 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d011      	beq.n	8002b44 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d81e      	bhi.n	8002b64 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_CRCEx_Polynomial_Set+0x96>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d010      	beq.n	8002b54 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002b32:	e017      	b.n	8002b64 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d91b      	bls.n	8002b72 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002b3a:	2317      	movs	r3, #23
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002b42:	e016      	b.n	8002b72 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b07      	cmp	r3, #7
 8002b48:	d915      	bls.n	8002b76 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8002b4a:	2317      	movs	r3, #23
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002b52:	e010      	b.n	8002b76 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	d90f      	bls.n	8002b7a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8002b5a:	2317      	movs	r3, #23
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002b62:	e00a      	b.n	8002b7a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b64:	2317      	movs	r3, #23
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
      break;
 8002b6c:	e006      	b.n	8002b7c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	e004      	b.n	8002b7c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	e002      	b.n	8002b7c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	e000      	b.n	8002b7c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8002b7a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002b7c:	2317      	movs	r3, #23
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2218      	movs	r2, #24
 8002b96:	4393      	bics	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002ba4:	2317      	movs	r3, #23
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc2:	e147      	b.n	8002e54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4091      	lsls	r1, r2
 8002bce:	000a      	movs	r2, r1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <HAL_GPIO_Init+0x28>
 8002bda:	e138      	b.n	8002e4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d005      	beq.n	8002bf4 <HAL_GPIO_Init+0x40>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d130      	bne.n	8002c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	409a      	lsls	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	43da      	mvns	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	2201      	movs	r2, #1
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d017      	beq.n	8002c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	409a      	lsls	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d123      	bne.n	8002ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	58d3      	ldr	r3, [r2, r3]
 8002caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2107      	movs	r1, #7
 8002cca:	400b      	ands	r3, r1
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	0092      	lsls	r2, r2, #2
 8002ce2:	6939      	ldr	r1, [r7, #16]
 8002ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2203      	movs	r2, #3
 8002d04:	401a      	ands	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	0013      	movs	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	23c0      	movs	r3, #192	; 0xc0
 8002d20:	029b      	lsls	r3, r3, #10
 8002d22:	4013      	ands	r3, r2
 8002d24:	d100      	bne.n	8002d28 <HAL_GPIO_Init+0x174>
 8002d26:	e092      	b.n	8002e4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3318      	adds	r3, #24
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	589b      	ldr	r3, [r3, r2]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	220f      	movs	r2, #15
 8002d40:	409a      	lsls	r2, r3
 8002d42:	0013      	movs	r3, r2
 8002d44:	43da      	mvns	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x1ca>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <HAL_GPIO_Init+0x2bc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x1c6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a44      	ldr	r2, [pc, #272]	; (8002e74 <HAL_GPIO_Init+0x2c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x1c2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a43      	ldr	r2, [pc, #268]	; (8002e78 <HAL_GPIO_Init+0x2c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x1be>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x1cc>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x1cc>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x1cc>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x1cc>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	2103      	movs	r1, #3
 8002d84:	400a      	ands	r2, r1
 8002d86:	00d2      	lsls	r2, r2, #3
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d90:	4936      	ldr	r1, [pc, #216]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3318      	adds	r3, #24
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	035b      	lsls	r3, r3, #13
 8002db6:	4013      	ands	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	039b      	lsls	r3, r3, #14
 8002de0:	4013      	ands	r3, r2
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002df2:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002df4:	2384      	movs	r3, #132	; 0x84
 8002df6:	58d3      	ldr	r3, [r2, r3]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	029b      	lsls	r3, r3, #10
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002e1a:	2284      	movs	r2, #132	; 0x84
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	58d3      	ldr	r3, [r2, r3]
 8002e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	025b      	lsls	r3, r3, #9
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e46:	4909      	ldr	r1, [pc, #36]	; (8002e6c <HAL_GPIO_Init+0x2b8>)
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	3301      	adds	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	40da      	lsrs	r2, r3
 8002e5c:	1e13      	subs	r3, r2, #0
 8002e5e:	d000      	beq.n	8002e62 <HAL_GPIO_Init+0x2ae>
 8002e60:	e6b0      	b.n	8002bc4 <HAL_GPIO_Init+0x10>
  }
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b006      	add	sp, #24
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021800 	.word	0x40021800
 8002e70:	50000400 	.word	0x50000400
 8002e74:	50000800 	.word	0x50000800
 8002e78:	50000c00 	.word	0x50000c00

08002e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	000a      	movs	r2, r1
 8002e86:	1cbb      	adds	r3, r7, #2
 8002e88:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	1cba      	adds	r2, r7, #2
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	4013      	ands	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e003      	b.n	8002ea8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea0:	230f      	movs	r3, #15
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	0008      	movs	r0, r1
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	1c02      	adds	r2, r0, #0
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	1c7b      	adds	r3, r7, #1
 8002eca:	1c0a      	adds	r2, r1, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ece:	1c7b      	adds	r3, r7, #1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ed6:	1cbb      	adds	r3, r7, #2
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ede:	e003      	b.n	8002ee8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ee0:	1cbb      	adds	r3, r7, #2
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d11f      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	0013      	movs	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4912      	ldr	r1, [pc, #72]	; (8002f6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd f8fe 	bl	8000124 <__udivsi3>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2e:	e008      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e001      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e009      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d0ed      	beq.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40007000 	.word	0x40007000
 8002f64:	fffff9ff 	.word	0xfffff9ff
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	000f4240 	.word	0x000f4240

08002f70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	23e0      	movs	r3, #224	; 0xe0
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	4013      	ands	r3, r2
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e2f3      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1e>
 8002fa4:	e07c      	b.n	80030a0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa6:	4bc3      	ldr	r3, [pc, #780]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2238      	movs	r2, #56	; 0x38
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb0:	4bc0      	ldr	r3, [pc, #768]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3e>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4bb9      	ldr	r3, [pc, #740]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d062      	beq.n	800309e <HAL_RCC_OscConfig+0x116>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d15e      	bne.n	800309e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e2ce      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	025b      	lsls	r3, r3, #9
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x78>
 8002ff0:	4bb0      	ldr	r3, [pc, #704]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4baf      	ldr	r3, [pc, #700]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	0249      	lsls	r1, r1, #9
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e020      	b.n	8003042 <HAL_RCC_OscConfig+0xba>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	02db      	lsls	r3, r3, #11
 8003008:	429a      	cmp	r2, r3
 800300a:	d10e      	bne.n	800302a <HAL_RCC_OscConfig+0xa2>
 800300c:	4ba9      	ldr	r3, [pc, #676]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4ba8      	ldr	r3, [pc, #672]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	02c9      	lsls	r1, r1, #11
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	4ba6      	ldr	r3, [pc, #664]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4ba5      	ldr	r3, [pc, #660]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	0249      	lsls	r1, r1, #9
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0xba>
 800302a:	4ba2      	ldr	r3, [pc, #648]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4ba1      	ldr	r3, [pc, #644]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003030:	49a1      	ldr	r1, [pc, #644]	; (80032b8 <HAL_RCC_OscConfig+0x330>)
 8003032:	400a      	ands	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	4b9f      	ldr	r3, [pc, #636]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b9e      	ldr	r3, [pc, #632]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800303c:	499f      	ldr	r1, [pc, #636]	; (80032bc <HAL_RCC_OscConfig+0x334>)
 800303e:	400a      	ands	r2, r1
 8003040:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d014      	beq.n	8003074 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe ff7f 	bl	8001f4c <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe ff7a 	bl	8001f4c <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e28d      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	4013      	ands	r3, r2
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xcc>
 8003072:	e015      	b.n	80030a0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe ff6a 	bl	8001f4c <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307e:	f7fe ff65 	bl	8001f4c <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e278      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003090:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	4013      	ands	r3, r2
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0xf6>
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d100      	bne.n	80030ac <HAL_RCC_OscConfig+0x124>
 80030aa:	e099      	b.n	80031e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ac:	4b81      	ldr	r3, [pc, #516]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2238      	movs	r2, #56	; 0x38
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b6:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2203      	movs	r2, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_OscConfig+0x144>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d002      	beq.n	80030d2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d135      	bne.n	800313e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d2:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4013      	ands	r3, r2
 80030dc:	d005      	beq.n	80030ea <HAL_RCC_OscConfig+0x162>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e24b      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a74      	ldr	r2, [pc, #464]	; (80032c0 <HAL_RCC_OscConfig+0x338>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003106:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x33c>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	2207      	movs	r2, #7
 8003122:	4013      	ands	r3, r2
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x340>)
 8003126:	40da      	lsrs	r2, r3
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x344>)
 800312a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x348>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	f7fe feaf 	bl	8001e94 <HAL_InitTick>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d051      	beq.n	80031de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e221      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d030      	beq.n	80031a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003146:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5e      	ldr	r2, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x33c>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	4b57      	ldr	r3, [pc, #348]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fef0 	bl	8001f4c <HAL_GetTick>
 800316c:	0003      	movs	r3, r0
 800316e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe feeb 	bl	8001f4c <HAL_GetTick>
 8003176:	0002      	movs	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1fe      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4013      	ands	r3, r2
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <HAL_RCC_OscConfig+0x338>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	4b44      	ldr	r3, [pc, #272]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	e01b      	b.n	80031e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031a8:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	4949      	ldr	r1, [pc, #292]	; (80032d4 <HAL_RCC_OscConfig+0x34c>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe feca 	bl	8001f4c <HAL_GetTick>
 80031b8:	0003      	movs	r3, r0
 80031ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe fec5 	bl	8001f4c <HAL_GetTick>
 80031c2:	0002      	movs	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1d8      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d0:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4013      	ands	r3, r2
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x236>
 80031dc:	e000      	b.n	80031e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2208      	movs	r2, #8
 80031e6:	4013      	ands	r3, r2
 80031e8:	d047      	beq.n	800327a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2238      	movs	r2, #56	; 0x38
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b18      	cmp	r3, #24
 80031f4:	d10a      	bne.n	800320c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d03c      	beq.n	800327a <HAL_RCC_OscConfig+0x2f2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d138      	bne.n	800327a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e1ba      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d019      	beq.n	8003248 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003216:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003218:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800321a:	2101      	movs	r1, #1
 800321c:	430a      	orrs	r2, r1
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fe94 	bl	8001f4c <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe fe8f 	bl	8001f4c <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1a2      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	2202      	movs	r2, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d0f1      	beq.n	800322a <HAL_RCC_OscConfig+0x2a2>
 8003246:	e018      	b.n	800327a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800324a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fe7a 	bl	8001f4c <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325e:	f7fe fe75 	bl	8001f4c <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e188      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	2202      	movs	r2, #2
 8003276:	4013      	ands	r3, r2
 8003278:	d1f1      	bne.n	800325e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2204      	movs	r2, #4
 8003280:	4013      	ands	r3, r2
 8003282:	d100      	bne.n	8003286 <HAL_RCC_OscConfig+0x2fe>
 8003284:	e0c6      	b.n	8003414 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	231f      	movs	r3, #31
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2238      	movs	r2, #56	; 0x38
 8003294:	4013      	ands	r3, r2
 8003296:	2b20      	cmp	r3, #32
 8003298:	d11e      	bne.n	80032d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_OscConfig+0x32c>)
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	2202      	movs	r2, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d100      	bne.n	80032a6 <HAL_RCC_OscConfig+0x31e>
 80032a4:	e0b6      	b.n	8003414 <HAL_RCC_OscConfig+0x48c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d000      	beq.n	80032b0 <HAL_RCC_OscConfig+0x328>
 80032ae:	e0b1      	b.n	8003414 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e166      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	fffbffff 	.word	0xfffbffff
 80032c0:	ffff80ff 	.word	0xffff80ff
 80032c4:	ffffc7ff 	.word	0xffffc7ff
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	20000000 	.word	0x20000000
 80032d0:	20000004 	.word	0x20000004
 80032d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d8:	4bac      	ldr	r3, [pc, #688]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	055b      	lsls	r3, r3, #21
 80032e0:	4013      	ands	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_OscConfig+0x360>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x362>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4ba7      	ldr	r3, [pc, #668]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80032f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f2:	4ba6      	ldr	r3, [pc, #664]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	0549      	lsls	r1, r1, #21
 80032f8:	430a      	orrs	r2, r1
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80032fc:	4ba3      	ldr	r3, [pc, #652]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80032fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	055b      	lsls	r3, r3, #21
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800330a:	231f      	movs	r3, #31
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	4b9f      	ldr	r3, [pc, #636]	; (8003590 <HAL_RCC_OscConfig+0x608>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d11a      	bne.n	8003354 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800331e:	4b9c      	ldr	r3, [pc, #624]	; (8003590 <HAL_RCC_OscConfig+0x608>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b9b      	ldr	r3, [pc, #620]	; (8003590 <HAL_RCC_OscConfig+0x608>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0049      	lsls	r1, r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800332c:	f7fe fe0e 	bl	8001f4c <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe fe09 	bl	8001f4c <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e11c      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_OscConfig+0x608>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x3e2>
 800335c:	4b8b      	ldr	r3, [pc, #556]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800335e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003360:	4b8a      	ldr	r3, [pc, #552]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003362:	2101      	movs	r1, #1
 8003364:	430a      	orrs	r2, r1
 8003366:	65da      	str	r2, [r3, #92]	; 0x5c
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x41c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x404>
 8003372:	4b86      	ldr	r3, [pc, #536]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003376:	4b85      	ldr	r3, [pc, #532]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003378:	2104      	movs	r1, #4
 800337a:	430a      	orrs	r2, r1
 800337c:	65da      	str	r2, [r3, #92]	; 0x5c
 800337e:	4b83      	ldr	r3, [pc, #524]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003382:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x41c>
 800338c:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800338e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003392:	2101      	movs	r1, #1
 8003394:	438a      	bics	r2, r1
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c
 8003398:	4b7c      	ldr	r3, [pc, #496]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800339a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800339c:	4b7b      	ldr	r3, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800339e:	2104      	movs	r1, #4
 80033a0:	438a      	bics	r2, r1
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d014      	beq.n	80033d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fdce 	bl	8001f4c <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe fdc9 	bl	8001f4c <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4a74      	ldr	r2, [pc, #464]	; (8003594 <HAL_RCC_OscConfig+0x60c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0db      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	4b70      	ldr	r3, [pc, #448]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2202      	movs	r2, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x42e>
 80033d4:	e013      	b.n	80033fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fdb9 	bl	8001f4c <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033de:	e009      	b.n	80033f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe fdb4 	bl	8001f4c <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x60c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0c6      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f4:	4b65      	ldr	r3, [pc, #404]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2202      	movs	r2, #2
 80033fa:	4013      	ands	r3, r2
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033fe:	231f      	movs	r3, #31
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b60      	ldr	r3, [pc, #384]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	4b5f      	ldr	r3, [pc, #380]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800340e:	4962      	ldr	r1, [pc, #392]	; (8003598 <HAL_RCC_OscConfig+0x610>)
 8003410:	400a      	ands	r2, r1
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <HAL_RCC_OscConfig+0x496>
 800341c:	e0b0      	b.n	8003580 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341e:	4b5b      	ldr	r3, [pc, #364]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2238      	movs	r2, #56	; 0x38
 8003424:	4013      	ands	r3, r2
 8003426:	2b10      	cmp	r3, #16
 8003428:	d100      	bne.n	800342c <HAL_RCC_OscConfig+0x4a4>
 800342a:	e078      	b.n	800351e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d153      	bne.n	80034dc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b55      	ldr	r3, [pc, #340]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b54      	ldr	r3, [pc, #336]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800343a:	4958      	ldr	r1, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x614>)
 800343c:	400a      	ands	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fd84 	bl	8001f4c <HAL_GetTick>
 8003444:	0003      	movs	r3, r0
 8003446:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fd7f 	bl	8001f4c <HAL_GetTick>
 800344e:	0002      	movs	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e092      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	4b4b      	ldr	r3, [pc, #300]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	049b      	lsls	r3, r3, #18
 8003464:	4013      	ands	r3, r2
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b48      	ldr	r3, [pc, #288]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a4c      	ldr	r2, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x618>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	431a      	orrs	r2, r3
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003492:	430a      	orrs	r2, r1
 8003494:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b3c      	ldr	r3, [pc, #240]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0449      	lsls	r1, r1, #17
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b38      	ldr	r3, [pc, #224]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0549      	lsls	r1, r1, #21
 80034ae:	430a      	orrs	r2, r1
 80034b0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fd4b 	bl	8001f4c <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fd46 	bl	8001f4c <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e059      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	4b2f      	ldr	r3, [pc, #188]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	049b      	lsls	r3, r3, #18
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x534>
 80034da:	e051      	b.n	8003580 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_RCC_OscConfig+0x604>)
 80034e2:	492e      	ldr	r1, [pc, #184]	; (800359c <HAL_RCC_OscConfig+0x614>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe fd30 	bl	8001f4c <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fd2b 	bl	8001f4c <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e03e      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	049b      	lsls	r3, r3, #18
 800350c:	4013      	ands	r3, r2
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_OscConfig+0x604>)
 8003516:	4923      	ldr	r1, [pc, #140]	; (80035a4 <HAL_RCC_OscConfig+0x61c>)
 8003518:	400a      	ands	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	e030      	b.n	8003580 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02b      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_RCC_OscConfig+0x604>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2203      	movs	r2, #3
 8003534:	401a      	ands	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	429a      	cmp	r2, r3
 800353c:	d11e      	bne.n	800357c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2270      	movs	r2, #112	; 0x70
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d117      	bne.n	800357c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	23fe      	movs	r3, #254	; 0xfe
 8003550:	01db      	lsls	r3, r3, #7
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d10e      	bne.n	800357c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	23f8      	movs	r3, #248	; 0xf8
 8003562:	039b      	lsls	r3, r3, #14
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d106      	bne.n	800357c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	0f5b      	lsrs	r3, r3, #29
 8003572:	075a      	lsls	r2, r3, #29
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b008      	add	sp, #32
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	40021000 	.word	0x40021000
 8003590:	40007000 	.word	0x40007000
 8003594:	00001388 	.word	0x00001388
 8003598:	efffffff 	.word	0xefffffff
 800359c:	feffffff 	.word	0xfeffffff
 80035a0:	1fc1808c 	.word	0x1fc1808c
 80035a4:	effefffc 	.word	0xeffefffc

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0e9      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2207      	movs	r2, #7
 80035c2:	4013      	ands	r3, r2
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d91e      	bls.n	8003608 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b73      	ldr	r3, [pc, #460]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2207      	movs	r2, #7
 80035d0:	4393      	bics	r3, r2
 80035d2:	0019      	movs	r1, r3
 80035d4:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035dc:	f7fe fcb6 	bl	8001f4c <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035e4:	e009      	b.n	80035fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e6:	f7fe fcb1 	bl	8001f4c <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4a6a      	ldr	r2, [pc, #424]	; (800379c <HAL_RCC_ClockConfig+0x1f4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0ca      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2207      	movs	r2, #7
 8003600:	4013      	ands	r3, r2
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d1ee      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d015      	beq.n	800363e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	d006      	beq.n	800362a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800361c:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003622:	21e0      	movs	r1, #224	; 0xe0
 8003624:	01c9      	lsls	r1, r1, #7
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <HAL_RCC_ClockConfig+0x1fc>)
 8003630:	4013      	ands	r3, r2
 8003632:	0019      	movs	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d057      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d107      	bne.n	8003660 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	4013      	ands	r3, r2
 800365a:	d12b      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e097      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	049b      	lsls	r3, r3, #18
 8003670:	4013      	ands	r3, r2
 8003672:	d11f      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e08b      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4013      	ands	r3, r2
 800368a:	d113      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e07f      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	2202      	movs	r2, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e074      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06d      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2207      	movs	r2, #7
 80036ba:	4393      	bics	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fe fc40 	bl	8001f4c <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d0:	e009      	b.n	80036e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d2:	f7fe fc3b 	bl	8001f4c <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	4a2f      	ldr	r2, [pc, #188]	; (800379c <HAL_RCC_ClockConfig+0x1f4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e054      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2238      	movs	r2, #56	; 0x38
 80036ec:	401a      	ands	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1ec      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2207      	movs	r2, #7
 80036fe:	4013      	ands	r3, r2
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d21e      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2207      	movs	r2, #7
 800370c:	4393      	bics	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	4b21      	ldr	r3, [pc, #132]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003718:	f7fe fc18 	bl	8001f4c <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003720:	e009      	b.n	8003736 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003722:	f7fe fc13 	bl	8001f4c <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_RCC_ClockConfig+0x1f4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e02c      	b.n	8003790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2207      	movs	r2, #7
 800373c:	4013      	ands	r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2204      	movs	r2, #4
 800374a:	4013      	ands	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <HAL_RCC_ClockConfig+0x200>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003762:	f000 f829 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003766:	0001      	movs	r1, r0
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_ClockConfig+0x1f8>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	220f      	movs	r2, #15
 8003770:	401a      	ands	r2, r3
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCC_ClockConfig+0x204>)
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	58d3      	ldr	r3, [r2, r3]
 8003778:	221f      	movs	r2, #31
 800377a:	4013      	ands	r3, r2
 800377c:	000a      	movs	r2, r1
 800377e:	40da      	lsrs	r2, r3
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x208>)
 8003782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x20c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7fe fb83 	bl	8001e94 <HAL_InitTick>
 800378e:	0003      	movs	r3, r0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40022000 	.word	0x40022000
 800379c:	00001388 	.word	0x00001388
 80037a0:	40021000 	.word	0x40021000
 80037a4:	fffff0ff 	.word	0xfffff0ff
 80037a8:	ffff8fff 	.word	0xffff8fff
 80037ac:	08005e1c 	.word	0x08005e1c
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037be:	4b3c      	ldr	r3, [pc, #240]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2238      	movs	r2, #56	; 0x38
 80037c4:	4013      	ands	r3, r2
 80037c6:	d10f      	bne.n	80037e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037c8:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0adb      	lsrs	r3, r3, #11
 80037ce:	2207      	movs	r2, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	0013      	movs	r3, r2
 80037d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	4835      	ldr	r0, [pc, #212]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037de:	f7fc fca1 	bl	8000124 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e05d      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e8:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2238      	movs	r2, #56	; 0x38
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	e054      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037fa:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2238      	movs	r2, #56	; 0x38
 8003800:	4013      	ands	r3, r2
 8003802:	2b10      	cmp	r3, #16
 8003804:	d138      	bne.n	8003878 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003806:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2203      	movs	r2, #3
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	2207      	movs	r2, #7
 8003818:	4013      	ands	r3, r2
 800381a:	3301      	adds	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d10d      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4824      	ldr	r0, [pc, #144]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003828:	f7fc fc7c 	bl	8000124 <__udivsi3>
 800382c:	0003      	movs	r3, r0
 800382e:	0019      	movs	r1, r3
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	227f      	movs	r2, #127	; 0x7f
 8003838:	4013      	ands	r3, r2
 800383a:	434b      	muls	r3, r1
 800383c:	617b      	str	r3, [r7, #20]
        break;
 800383e:	e00d      	b.n	800385c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	481c      	ldr	r0, [pc, #112]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003844:	f7fc fc6e 	bl	8000124 <__udivsi3>
 8003848:	0003      	movs	r3, r0
 800384a:	0019      	movs	r1, r3
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0a1b      	lsrs	r3, r3, #8
 8003852:	227f      	movs	r2, #127	; 0x7f
 8003854:	4013      	ands	r3, r2
 8003856:	434b      	muls	r3, r1
 8003858:	617b      	str	r3, [r7, #20]
        break;
 800385a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	0f5b      	lsrs	r3, r3, #29
 8003862:	2207      	movs	r2, #7
 8003864:	4013      	ands	r3, r2
 8003866:	3301      	adds	r3, #1
 8003868:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	6978      	ldr	r0, [r7, #20]
 800386e:	f7fc fc59 	bl	8000124 <__udivsi3>
 8003872:	0003      	movs	r3, r0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e015      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2238      	movs	r2, #56	; 0x38
 800387e:	4013      	ands	r3, r2
 8003880:	2b20      	cmp	r3, #32
 8003882:	d103      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2238      	movs	r2, #56	; 0x38
 8003892:	4013      	ands	r3, r2
 8003894:	2b18      	cmp	r3, #24
 8003896:	d103      	bne.n	80038a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003898:	23fa      	movs	r3, #250	; 0xfa
 800389a:	01db      	lsls	r3, r3, #7
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e001      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038a4:	693b      	ldr	r3, [r7, #16]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b006      	add	sp, #24
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	40021000 	.word	0x40021000
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <HAL_RCC_GetHCLKFreq+0x10>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20000000 	.word	0x20000000

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038d4:	f7ff fff2 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038d8:	0004      	movs	r4, r0
 80038da:	f7ff fb49 	bl	8002f70 <LL_RCC_GetAPB1Prescaler>
 80038de:	0003      	movs	r3, r0
 80038e0:	0b1a      	lsrs	r2, r3, #12
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038e4:	0092      	lsls	r2, r2, #2
 80038e6:	58d3      	ldr	r3, [r2, r3]
 80038e8:	221f      	movs	r2, #31
 80038ea:	4013      	ands	r3, r2
 80038ec:	40dc      	lsrs	r4, r3
 80038ee:	0023      	movs	r3, r4
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bdb0      	pop	{r4, r5, r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	08005e5c 	.word	0x08005e5c

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003904:	2313      	movs	r3, #19
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800390c:	2312      	movs	r3, #18
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	029b      	lsls	r3, r3, #10
 800391c:	4013      	ands	r3, r2
 800391e:	d100      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003920:	e0a3      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2011      	movs	r0, #17
 8003924:	183b      	adds	r3, r7, r0
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800392c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	055b      	lsls	r3, r3, #21
 8003932:	4013      	ands	r3, r2
 8003934:	d110      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393a:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	0549      	lsls	r1, r1, #21
 8003940:	430a      	orrs	r2, r1
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
 8003944:	4b78      	ldr	r3, [pc, #480]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	055b      	lsls	r3, r3, #21
 800394c:	4013      	ands	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003952:	183b      	adds	r3, r7, r0
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003958:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	0049      	lsls	r1, r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003966:	f7fe faf1 	bl	8001f4c <HAL_GetTick>
 800396a:	0003      	movs	r3, r0
 800396c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396e:	e00b      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7fe faec 	bl	8001f4c <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d904      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800397e:	2313      	movs	r3, #19
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2203      	movs	r2, #3
 8003984:	701a      	strb	r2, [r3, #0]
        break;
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4013      	ands	r3, r2
 8003992:	d0ed      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003994:	2313      	movs	r3, #19
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d154      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039a2:	23c0      	movs	r3, #192	; 0xc0
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d019      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d014      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	4a5c      	ldr	r2, [pc, #368]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c4:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	0249      	lsls	r1, r1, #9
 80039ce:	430a      	orrs	r2, r1
 80039d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d6:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039d8:	4956      	ldr	r1, [pc, #344]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80039da:	400a      	ands	r2, r1
 80039dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039de:	4b52      	ldr	r3, [pc, #328]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2201      	movs	r2, #1
 80039e8:	4013      	ands	r3, r2
 80039ea:	d016      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe faae 	bl	8001f4c <HAL_GetTick>
 80039f0:	0003      	movs	r3, r0
 80039f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f4:	e00c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe faa9 	bl	8001f4c <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d904      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a06:	2313      	movs	r3, #19
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	701a      	strb	r2, [r3, #0]
            break;
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a10:	4b45      	ldr	r3, [pc, #276]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	2202      	movs	r2, #2
 8003a16:	4013      	ands	r3, r2
 8003a18:	d0ed      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a1a:	2313      	movs	r3, #19
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	4a41      	ldr	r2, [pc, #260]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a38:	e00c      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a3a:	2312      	movs	r3, #18
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2213      	movs	r2, #19
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a48:	2312      	movs	r3, #18
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2213      	movs	r2, #19
 8003a4e:	18ba      	adds	r2, r7, r2
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a54:	2311      	movs	r3, #17
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a64:	4935      	ldr	r1, [pc, #212]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	4013      	ands	r3, r2
 8003a72:	d009      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a74:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	2203      	movs	r2, #3
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a84:	430a      	orrs	r2, r1
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	01db      	lsls	r3, r3, #7
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d015      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	0899      	lsrs	r1, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	05db      	lsls	r3, r3, #23
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d106      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0249      	lsls	r1, r1, #9
 8003ada:	430a      	orrs	r2, r1
 8003adc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	01db      	lsls	r3, r3, #7
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d106      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0249      	lsls	r1, r1, #9
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b18:	2312      	movs	r3, #18
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b006      	add	sp, #24
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	fffffcff 	.word	0xfffffcff
 8003b34:	fffeffff 	.word	0xfffeffff
 8003b38:	00001388 	.word	0x00001388
 8003b3c:	efffffff 	.word	0xefffffff
 8003b40:	ffffcfff 	.word	0xffffcfff
 8003b44:	ffff3fff 	.word	0xffff3fff

08003b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0a8      	b.n	8003cac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	2382      	movs	r3, #130	; 0x82
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d009      	beq.n	8003b82 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	61da      	str	r2, [r3, #28]
 8003b74:	e005      	b.n	8003b82 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	225d      	movs	r2, #93	; 0x5d
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	225c      	movs	r2, #92	; 0x5c
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fe f80a 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	225d      	movs	r2, #93	; 0x5d
 8003ba8:	2102      	movs	r1, #2
 8003baa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	438a      	bics	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	23e0      	movs	r3, #224	; 0xe0
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d902      	bls.n	8003bce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e002      	b.n	8003bd4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	015b      	lsls	r3, r3, #5
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	23f0      	movs	r3, #240	; 0xf0
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d008      	beq.n	8003bf2 <HAL_SPI_Init+0xaa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	23e0      	movs	r3, #224	; 0xe0
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	2382      	movs	r3, #130	; 0x82
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6899      	ldr	r1, [r3, #8]
 8003c00:	2384      	movs	r3, #132	; 0x84
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	400b      	ands	r3, r1
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	400b      	ands	r3, r1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	2101      	movs	r1, #1
 8003c18:	400b      	ands	r3, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6999      	ldr	r1, [r3, #24]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	400b      	ands	r3, r1
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2138      	movs	r1, #56	; 0x38
 8003c2e:	400b      	ands	r3, r1
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	400b      	ands	r3, r1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	401a      	ands	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	2204      	movs	r2, #4
 8003c58:	401a      	ands	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2110      	movs	r1, #16
 8003c60:	400b      	ands	r3, r1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	2108      	movs	r1, #8
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68d9      	ldr	r1, [r3, #12]
 8003c72:	23f0      	movs	r3, #240	; 0xf0
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	400b      	ands	r3, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	015b      	lsls	r3, r3, #5
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <HAL_SPI_Init+0x16c>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	225d      	movs	r2, #93	; 0x5d
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	fffff7ff 	.word	0xfffff7ff

08003cb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	1dbb      	adds	r3, r7, #6
 8003cc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc8:	231f      	movs	r3, #31
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	225c      	movs	r2, #92	; 0x5c
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Transmit+0x26>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e140      	b.n	8003f60 <HAL_SPI_Transmit+0x2a8>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	225c      	movs	r2, #92	; 0x5c
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce6:	f7fe f931 	bl	8001f4c <HAL_GetTick>
 8003cea:	0003      	movs	r3, r0
 8003cec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cee:	2316      	movs	r3, #22
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	1dba      	adds	r2, r7, #6
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	225d      	movs	r2, #93	; 0x5d
 8003cfc:	5c9b      	ldrb	r3, [r3, r2]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d004      	beq.n	8003d0e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003d04:	231f      	movs	r3, #31
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2202      	movs	r2, #2
 8003d0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d0c:	e11d      	b.n	8003f4a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_SPI_Transmit+0x64>
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003d1c:	231f      	movs	r3, #31
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d24:	e111      	b.n	8003f4a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	225d      	movs	r2, #93	; 0x5d
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1dba      	adds	r2, r7, #6
 8003d3e:	8812      	ldrh	r2, [r2, #0]
 8003d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1dba      	adds	r2, r7, #6
 8003d46:	8812      	ldrh	r2, [r2, #0]
 8003d48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2244      	movs	r2, #68	; 0x44
 8003d54:	2100      	movs	r1, #0
 8003d56:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2246      	movs	r2, #70	; 0x46
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d110      	bne.n	8003d9a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	438a      	bics	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	01c9      	lsls	r1, r1, #7
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d007      	beq.n	8003db8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	23e0      	movs	r3, #224	; 0xe0
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d94e      	bls.n	8003e62 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d004      	beq.n	8003dd6 <HAL_SPI_Transmit+0x11e>
 8003dcc:	2316      	movs	r3, #22
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d13f      	bne.n	8003e56 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	1c9a      	adds	r2, r3, #2
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dfa:	e02c      	b.n	8003e56 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d112      	bne.n	8003e30 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	1c9a      	adds	r2, r3, #2
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e2e:	e012      	b.n	8003e56 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e30:	f7fe f88c 	bl	8001f4c <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d802      	bhi.n	8003e46 <HAL_SPI_Transmit+0x18e>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_Transmit+0x194>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003e4c:	231f      	movs	r3, #31
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2203      	movs	r2, #3
 8003e52:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e54:	e079      	b.n	8003f4a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1cd      	bne.n	8003dfc <HAL_SPI_Transmit+0x144>
 8003e60:	e04f      	b.n	8003f02 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_SPI_Transmit+0x1bc>
 8003e6a:	2316      	movs	r3, #22
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d141      	bne.n	8003ef8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003e9a:	e02d      	b.n	8003ef8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d113      	bne.n	8003ed2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed0:	e012      	b.n	8003ef8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed2:	f7fe f83b 	bl	8001f4c <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d802      	bhi.n	8003ee8 <HAL_SPI_Transmit+0x230>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_Transmit+0x236>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003eee:	231f      	movs	r3, #31
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ef6:	e028      	b.n	8003f4a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1cc      	bne.n	8003e9c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fcd9 	bl	80048c0 <SPI_EndRxTxTransaction>
 8003f0e:	1e03      	subs	r3, r0, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003f3e:	231f      	movs	r3, #31
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e000      	b.n	8003f4a <HAL_SPI_Transmit+0x292>
  }

error:
 8003f48:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	225d      	movs	r2, #93	; 0x5d
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	225c      	movs	r2, #92	; 0x5c
 8003f56:	2100      	movs	r1, #0
 8003f58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f5a:	231f      	movs	r3, #31
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	781b      	ldrb	r3, [r3, #0]
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b008      	add	sp, #32
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	1dbb      	adds	r3, r7, #6
 8003f76:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f78:	2317      	movs	r3, #23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	2382      	movs	r3, #130	; 0x82
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d113      	bne.n	8003fb4 <HAL_SPI_Receive+0x4c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10f      	bne.n	8003fb4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	225d      	movs	r2, #93	; 0x5d
 8003f98:	2104      	movs	r1, #4
 8003f9a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f9c:	1dbb      	adds	r3, r7, #6
 8003f9e:	881c      	ldrh	r4, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	0023      	movs	r3, r4
 8003fac:	f000 f928 	bl	8004200 <HAL_SPI_TransmitReceive>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	e11c      	b.n	80041ee <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	225c      	movs	r2, #92	; 0x5c
 8003fb8:	5c9b      	ldrb	r3, [r3, r2]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_SPI_Receive+0x5a>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e115      	b.n	80041ee <HAL_SPI_Receive+0x286>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	225c      	movs	r2, #92	; 0x5c
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fca:	f7fd ffbf 	bl	8001f4c <HAL_GetTick>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	225d      	movs	r2, #93	; 0x5d
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d004      	beq.n	8003fe8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003fde:	2317      	movs	r3, #23
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003fe6:	e0f7      	b.n	80041d8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_SPI_Receive+0x8e>
 8003fee:	1dbb      	adds	r3, r7, #6
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003ff6:	2317      	movs	r3, #23
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ffe:	e0eb      	b.n	80041d8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	225d      	movs	r2, #93	; 0x5d
 8004004:	2104      	movs	r1, #4
 8004006:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1dba      	adds	r2, r7, #6
 8004018:	2144      	movs	r1, #68	; 0x44
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1dba      	adds	r2, r7, #6
 8004022:	2146      	movs	r1, #70	; 0x46
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	23e0      	movs	r3, #224	; 0xe0
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	429a      	cmp	r2, r3
 8004050:	d908      	bls.n	8004064 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4966      	ldr	r1, [pc, #408]	; (80041f8 <HAL_SPI_Receive+0x290>)
 800405e:	400a      	ands	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e008      	b.n	8004076 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2180      	movs	r1, #128	; 0x80
 8004070:	0149      	lsls	r1, r1, #5
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	429a      	cmp	r2, r3
 8004080:	d10f      	bne.n	80040a2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	438a      	bics	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4957      	ldr	r1, [pc, #348]	; (80041fc <HAL_SPI_Receive+0x294>)
 800409e:	400a      	ands	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d007      	beq.n	80040c0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	23e0      	movs	r3, #224	; 0xe0
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d900      	bls.n	80040ce <HAL_SPI_Receive+0x166>
 80040cc:	e069      	b.n	80041a2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040ce:	e031      	b.n	8004134 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2201      	movs	r2, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d117      	bne.n	800410e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	001a      	movs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2246      	movs	r2, #70	; 0x46
 80040fe:	5a9b      	ldrh	r3, [r3, r2]
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b299      	uxth	r1, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2246      	movs	r2, #70	; 0x46
 800410a:	5299      	strh	r1, [r3, r2]
 800410c:	e012      	b.n	8004134 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800410e:	f7fd ff1d 	bl	8001f4c <HAL_GetTick>
 8004112:	0002      	movs	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d802      	bhi.n	8004124 <HAL_SPI_Receive+0x1bc>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	d102      	bne.n	800412a <HAL_SPI_Receive+0x1c2>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800412a:	2317      	movs	r3, #23
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	2203      	movs	r2, #3
 8004130:	701a      	strb	r2, [r3, #0]
          goto error;
 8004132:	e051      	b.n	80041d8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2246      	movs	r2, #70	; 0x46
 8004138:	5a9b      	ldrh	r3, [r3, r2]
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1c7      	bne.n	80040d0 <HAL_SPI_Receive+0x168>
 8004140:	e035      	b.n	80041ae <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	2b01      	cmp	r3, #1
 800414e:	d115      	bne.n	800417c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	b292      	uxth	r2, r2
 800415c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2246      	movs	r2, #70	; 0x46
 800416c:	5a9b      	ldrh	r3, [r3, r2]
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b299      	uxth	r1, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2246      	movs	r2, #70	; 0x46
 8004178:	5299      	strh	r1, [r3, r2]
 800417a:	e012      	b.n	80041a2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417c:	f7fd fee6 	bl	8001f4c <HAL_GetTick>
 8004180:	0002      	movs	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d802      	bhi.n	8004192 <HAL_SPI_Receive+0x22a>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	d102      	bne.n	8004198 <HAL_SPI_Receive+0x230>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004198:	2317      	movs	r3, #23
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2203      	movs	r2, #3
 800419e:	701a      	strb	r2, [r3, #0]
          goto error;
 80041a0:	e01a      	b.n	80041d8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	5a9b      	ldrh	r3, [r3, r2]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1c9      	bne.n	8004142 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fb25 	bl	8004804 <SPI_EndRxTransaction>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80041cc:	2317      	movs	r3, #23
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e000      	b.n	80041d8 <HAL_SPI_Receive+0x270>
  }

error :
 80041d6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	225d      	movs	r2, #93	; 0x5d
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	225c      	movs	r2, #92	; 0x5c
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041e8:	2317      	movs	r3, #23
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
}
 80041ee:	0018      	movs	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b007      	add	sp, #28
 80041f4:	bd90      	pop	{r4, r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	ffffefff 	.word	0xffffefff
 80041fc:	ffffbfff 	.word	0xffffbfff

08004200 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	001a      	movs	r2, r3
 800420e:	1cbb      	adds	r3, r7, #2
 8004210:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004212:	2301      	movs	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004216:	2323      	movs	r3, #35	; 0x23
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	225c      	movs	r2, #92	; 0x5c
 8004222:	5c9b      	ldrb	r3, [r3, r2]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_SPI_TransmitReceive+0x2c>
 8004228:	2302      	movs	r3, #2
 800422a:	e1b5      	b.n	8004598 <HAL_SPI_TransmitReceive+0x398>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	225c      	movs	r2, #92	; 0x5c
 8004230:	2101      	movs	r1, #1
 8004232:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004234:	f7fd fe8a 	bl	8001f4c <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800423c:	201b      	movs	r0, #27
 800423e:	183b      	adds	r3, r7, r0
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	215d      	movs	r1, #93	; 0x5d
 8004244:	5c52      	ldrb	r2, [r2, r1]
 8004246:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800424e:	2312      	movs	r3, #18
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	1cba      	adds	r2, r7, #2
 8004254:	8812      	ldrh	r2, [r2, #0]
 8004256:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004258:	183b      	adds	r3, r7, r0
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d011      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x84>
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	2382      	movs	r3, #130	; 0x82
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	429a      	cmp	r2, r3
 8004268:	d107      	bne.n	800427a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_SPI_TransmitReceive+0x7a>
 8004272:	183b      	adds	r3, r7, r0
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b04      	cmp	r3, #4
 8004278:	d004      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800427a:	2323      	movs	r3, #35	; 0x23
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
    goto error;
 8004282:	e17e      	b.n	8004582 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x98>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x98>
 8004290:	1cbb      	adds	r3, r7, #2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004298:	2323      	movs	r3, #35	; 0x23
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
    goto error;
 80042a0:	e16f      	b.n	8004582 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	225d      	movs	r2, #93	; 0x5d
 80042a6:	5c9b      	ldrb	r3, [r3, r2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d003      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	225d      	movs	r2, #93	; 0x5d
 80042b2:	2105      	movs	r1, #5
 80042b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1cba      	adds	r2, r7, #2
 80042c6:	2146      	movs	r1, #70	; 0x46
 80042c8:	8812      	ldrh	r2, [r2, #0]
 80042ca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1cba      	adds	r2, r7, #2
 80042d0:	2144      	movs	r1, #68	; 0x44
 80042d2:	8812      	ldrh	r2, [r2, #0]
 80042d4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1cba      	adds	r2, r7, #2
 80042e0:	8812      	ldrh	r2, [r2, #0]
 80042e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1cba      	adds	r2, r7, #2
 80042e8:	8812      	ldrh	r2, [r2, #0]
 80042ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	23e0      	movs	r3, #224	; 0xe0
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	429a      	cmp	r2, r3
 8004302:	d908      	bls.n	8004316 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	49a4      	ldr	r1, [pc, #656]	; (80045a0 <HAL_SPI_TransmitReceive+0x3a0>)
 8004310:	400a      	ands	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	e008      	b.n	8004328 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	0149      	lsls	r1, r1, #5
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2240      	movs	r2, #64	; 0x40
 8004330:	4013      	ands	r3, r2
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d007      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	430a      	orrs	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	23e0      	movs	r3, #224	; 0xe0
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	429a      	cmp	r2, r3
 8004350:	d800      	bhi.n	8004354 <HAL_SPI_TransmitReceive+0x154>
 8004352:	e07f      	b.n	8004454 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x168>
 800435c:	2312      	movs	r3, #18
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d000      	beq.n	8004368 <HAL_SPI_TransmitReceive+0x168>
 8004366:	e069      	b.n	800443c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	881a      	ldrh	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	1c9a      	adds	r2, r3, #2
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438c:	e056      	b.n	800443c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2202      	movs	r2, #2
 8004396:	4013      	ands	r3, r2
 8004398:	2b02      	cmp	r3, #2
 800439a:	d11b      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x1d4>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x1d4>
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d113      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	1c9a      	adds	r2, r3, #2
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2201      	movs	r2, #1
 80043dc:	4013      	ands	r3, r2
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d11c      	bne.n	800441c <HAL_SPI_TransmitReceive+0x21c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2246      	movs	r2, #70	; 0x46
 80043e6:	5a9b      	ldrh	r3, [r3, r2]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	b292      	uxth	r2, r2
 80043fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2246      	movs	r2, #70	; 0x46
 800440a:	5a9b      	ldrh	r3, [r3, r2]
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b299      	uxth	r1, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2246      	movs	r2, #70	; 0x46
 8004416:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800441c:	f7fd fd96 	bl	8001f4c <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004428:	429a      	cmp	r2, r3
 800442a:	d807      	bhi.n	800443c <HAL_SPI_TransmitReceive+0x23c>
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	3301      	adds	r3, #1
 8004430:	d004      	beq.n	800443c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004432:	2323      	movs	r3, #35	; 0x23
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2203      	movs	r2, #3
 8004438:	701a      	strb	r2, [r3, #0]
        goto error;
 800443a:	e0a2      	b.n	8004582 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1a3      	bne.n	800438e <HAL_SPI_TransmitReceive+0x18e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2246      	movs	r2, #70	; 0x46
 800444a:	5a9b      	ldrh	r3, [r3, r2]
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d19d      	bne.n	800438e <HAL_SPI_TransmitReceive+0x18e>
 8004452:	e085      	b.n	8004560 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x268>
 800445c:	2312      	movs	r3, #18
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d000      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x268>
 8004466:	e070      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448e:	e05c      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2202      	movs	r2, #2
 8004498:	4013      	ands	r3, r2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d11c      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d017      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d114      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	7812      	ldrb	r2, [r2, #0]
 80044ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2201      	movs	r2, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d11e      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x324>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2246      	movs	r2, #70	; 0x46
 80044ea:	5a9b      	ldrh	r3, [r3, r2]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	001a      	movs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2246      	movs	r2, #70	; 0x46
 8004512:	5a9b      	ldrh	r3, [r3, r2]
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b299      	uxth	r1, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2246      	movs	r2, #70	; 0x46
 800451e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004520:	2301      	movs	r3, #1
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004524:	f7fd fd12 	bl	8001f4c <HAL_GetTick>
 8004528:	0002      	movs	r2, r0
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	429a      	cmp	r2, r3
 8004532:	d802      	bhi.n	800453a <HAL_SPI_TransmitReceive+0x33a>
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	3301      	adds	r3, #1
 8004538:	d102      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x340>
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004540:	2323      	movs	r3, #35	; 0x23
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	2203      	movs	r2, #3
 8004546:	701a      	strb	r2, [r3, #0]
        goto error;
 8004548:	e01b      	b.n	8004582 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d19d      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x290>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2246      	movs	r2, #70	; 0x46
 8004558:	5a9b      	ldrh	r3, [r3, r2]
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d197      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f9aa 	bl	80048c0 <SPI_EndRxTxTransaction>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d007      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004570:	2323      	movs	r3, #35	; 0x23
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	661a      	str	r2, [r3, #96]	; 0x60
 800457e:	e000      	b.n	8004582 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004580:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	225d      	movs	r2, #93	; 0x5d
 8004586:	2101      	movs	r1, #1
 8004588:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	225c      	movs	r2, #92	; 0x5c
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004592:	2323      	movs	r3, #35	; 0x23
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	781b      	ldrb	r3, [r3, #0]
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b00a      	add	sp, #40	; 0x28
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	ffffefff 	.word	0xffffefff

080045a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045b4:	f7fd fcca 	bl	8001f4c <HAL_GetTick>
 80045b8:	0002      	movs	r2, r0
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045c4:	f7fd fcc2 	bl	8001f4c <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045cc:	4b3a      	ldr	r3, [pc, #232]	; (80046b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	015b      	lsls	r3, r3, #5
 80045d2:	0d1b      	lsrs	r3, r3, #20
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	4353      	muls	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045da:	e058      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	d055      	beq.n	800468e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e2:	f7fd fcb3 	bl	8001f4c <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d142      	bne.n	800467e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	21e0      	movs	r1, #224	; 0xe0
 8004604:	438a      	bics	r2, r1
 8004606:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	2382      	movs	r3, #130	; 0x82
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	429a      	cmp	r2, r3
 8004612:	d113      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	429a      	cmp	r2, r3
 800461e:	d005      	beq.n	800462c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	429a      	cmp	r2, r3
 800462a:	d107      	bne.n	800463c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	438a      	bics	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	019b      	lsls	r3, r3, #6
 8004644:	429a      	cmp	r2, r3
 8004646:	d110      	bne.n	800466a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	491a      	ldr	r1, [pc, #104]	; (80046bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	0189      	lsls	r1, r1, #6
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	225d      	movs	r2, #93	; 0x5d
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	225c      	movs	r2, #92	; 0x5c
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e017      	b.n	80046ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3b01      	subs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4013      	ands	r3, r2
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	425a      	negs	r2, r3
 800469e:	4153      	adcs	r3, r2
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	001a      	movs	r2, r3
 80046a4:	1dfb      	adds	r3, r7, #7
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d197      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b008      	add	sp, #32
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	20000000 	.word	0x20000000
 80046bc:	ffffdfff 	.word	0xffffdfff

080046c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ce:	2317      	movs	r3, #23
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046d6:	f7fd fc39 	bl	8001f4c <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046e6:	f7fd fc31 	bl	8001f4c <HAL_GetTick>
 80046ea:	0003      	movs	r3, r0
 80046ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046f6:	4b41      	ldr	r3, [pc, #260]	; (80047fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	0013      	movs	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	00da      	lsls	r2, r3, #3
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	0d1b      	lsrs	r3, r3, #20
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	4353      	muls	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800470c:	e068      	b.n	80047e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	23c0      	movs	r3, #192	; 0xc0
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	429a      	cmp	r2, r3
 8004716:	d10a      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	2117      	movs	r1, #23
 8004726:	187b      	adds	r3, r7, r1
 8004728:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800472a:	187b      	adds	r3, r7, r1
 800472c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	d055      	beq.n	80047e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fd fc0a 	bl	8001f4c <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d142      	bne.n	80047d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	21e0      	movs	r1, #224	; 0xe0
 8004756:	438a      	bics	r2, r1
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	2382      	movs	r3, #130	; 0x82
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	429a      	cmp	r2, r3
 8004764:	d113      	bne.n	800478e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	429a      	cmp	r2, r3
 8004770:	d005      	beq.n	800477e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	429a      	cmp	r2, r3
 800477c:	d107      	bne.n	800478e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	438a      	bics	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	429a      	cmp	r2, r3
 8004798:	d110      	bne.n	80047bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4916      	ldr	r1, [pc, #88]	; (8004800 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80047a6:	400a      	ands	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	0189      	lsls	r1, r1, #6
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	225d      	movs	r2, #93	; 0x5d
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	225c      	movs	r2, #92	; 0x5c
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e010      	b.n	80047f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	3b01      	subs	r3, #1
 80047de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d18e      	bne.n	800470e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b00a      	add	sp, #40	; 0x28
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	20000000 	.word	0x20000000
 8004800:	ffffdfff 	.word	0xffffdfff

08004804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	2382      	movs	r3, #130	; 0x82
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	429a      	cmp	r2, r3
 800481a:	d113      	bne.n	8004844 <SPI_EndRxTransaction+0x40>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	429a      	cmp	r2, r3
 8004826:	d005      	beq.n	8004834 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2140      	movs	r1, #64	; 0x40
 8004840:	438a      	bics	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	0013      	movs	r3, r2
 800484e:	2200      	movs	r2, #0
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	f7ff fea7 	bl	80045a4 <SPI_WaitFlagStateUntilTimeout>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d007      	beq.n	800486a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	2220      	movs	r2, #32
 8004860:	431a      	orrs	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e026      	b.n	80048b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	2382      	movs	r3, #130	; 0x82
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	429a      	cmp	r2, r3
 8004874:	d11f      	bne.n	80048b6 <SPI_EndRxTransaction+0xb2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	429a      	cmp	r2, r3
 8004880:	d005      	beq.n	800488e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	429a      	cmp	r2, r3
 800488c:	d113      	bne.n	80048b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	23c0      	movs	r3, #192	; 0xc0
 8004892:	00d9      	lsls	r1, r3, #3
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0013      	movs	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	f7ff ff0f 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d007      	beq.n	80048b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048aa:	2220      	movs	r2, #32
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e000      	b.n	80048b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b004      	add	sp, #16
 80048be:	bd80      	pop	{r7, pc}

080048c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	23c0      	movs	r3, #192	; 0xc0
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	0013      	movs	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	f7ff fef0 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d007      	beq.n	80048f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	2220      	movs	r2, #32
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e027      	b.n	8004944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	0013      	movs	r3, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	2180      	movs	r1, #128	; 0x80
 8004902:	f7ff fe4f 	bl	80045a4 <SPI_WaitFlagStateUntilTimeout>
 8004906:	1e03      	subs	r3, r0, #0
 8004908:	d007      	beq.n	800491a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490e:	2220      	movs	r2, #32
 8004910:	431a      	orrs	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e014      	b.n	8004944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	23c0      	movs	r3, #192	; 0xc0
 800491e:	00d9      	lsls	r1, r3, #3
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	0013      	movs	r3, r2
 8004928:	2200      	movs	r2, #0
 800492a:	f7ff fec9 	bl	80046c0 <SPI_WaitFifoStateUntilTimeout>
 800492e:	1e03      	subs	r3, r0, #0
 8004930:	d007      	beq.n	8004942 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004936:	2220      	movs	r2, #32
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e000      	b.n	8004944 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e046      	b.n	80049ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2288      	movs	r2, #136	; 0x88
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2284      	movs	r2, #132	; 0x84
 800496c:	2100      	movs	r1, #0
 800496e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	0018      	movs	r0, r3
 8004974:	f7fd f98e 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2288      	movs	r2, #136	; 0x88
 800497c:	2124      	movs	r1, #36	; 0x24
 800497e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	438a      	bics	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 f8cc 	bl	8004b30 <UART_SetConfig>
 8004998:	0003      	movs	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e024      	b.n	80049ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 fa29 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	490d      	ldr	r1, [pc, #52]	; (80049f4 <HAL_UART_Init+0xa8>)
 80049be:	400a      	ands	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	212a      	movs	r1, #42	; 0x2a
 80049ce:	438a      	bics	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fac1 	bl	8004f6c <UART_CheckIdleState>
 80049ea:	0003      	movs	r3, r0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	ffffb7ff 	.word	0xffffb7ff

080049f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	1dbb      	adds	r3, r7, #6
 8004a06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2288      	movs	r2, #136	; 0x88
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d000      	beq.n	8004a14 <HAL_UART_Transmit+0x1c>
 8004a12:	e088      	b.n	8004b26 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_Transmit+0x2a>
 8004a1a:	1dbb      	adds	r3, r7, #6
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e080      	b.n	8004b28 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	015b      	lsls	r3, r3, #5
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d109      	bne.n	8004a46 <HAL_UART_Transmit+0x4e>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e070      	b.n	8004b28 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2290      	movs	r2, #144	; 0x90
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2288      	movs	r2, #136	; 0x88
 8004a52:	2121      	movs	r1, #33	; 0x21
 8004a54:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a56:	f7fd fa79 	bl	8001f4c <HAL_GetTick>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1dba      	adds	r2, r7, #6
 8004a62:	2154      	movs	r1, #84	; 0x54
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1dba      	adds	r2, r7, #6
 8004a6c:	2156      	movs	r1, #86	; 0x56
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	015b      	lsls	r3, r3, #5
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Transmit+0x98>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e003      	b.n	8004a98 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a98:	e02c      	b.n	8004af4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	0013      	movs	r3, r2
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	f000 faae 	bl	8005008 <UART_WaitOnFlagUntilTimeout>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e039      	b.n	8004b28 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	001a      	movs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	05d2      	lsls	r2, r2, #23
 8004ac6:	0dd2      	lsrs	r2, r2, #23
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	3302      	adds	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2256      	movs	r2, #86	; 0x56
 8004ae6:	5a9b      	ldrh	r3, [r3, r2]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b299      	uxth	r1, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2256      	movs	r2, #86	; 0x56
 8004af2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2256      	movs	r2, #86	; 0x56
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1cc      	bne.n	8004a9a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	0013      	movs	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2140      	movs	r1, #64	; 0x40
 8004b0e:	f000 fa7b 	bl	8005008 <UART_WaitOnFlagUntilTimeout>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e006      	b.n	8004b28 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2288      	movs	r2, #136	; 0x88
 8004b1e:	2120      	movs	r1, #32
 8004b20:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b008      	add	sp, #32
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b38:	231a      	movs	r3, #26
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4aa1      	ldr	r2, [pc, #644]	; (8004de4 <UART_SetConfig+0x2b4>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a9c      	ldr	r2, [pc, #624]	; (8004de8 <UART_SetConfig+0x2b8>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4a93      	ldr	r2, [pc, #588]	; (8004dec <UART_SetConfig+0x2bc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	4393      	bics	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a89      	ldr	r2, [pc, #548]	; (8004df0 <UART_SetConfig+0x2c0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d127      	bne.n	8004c1e <UART_SetConfig+0xee>
 8004bce:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <UART_SetConfig+0x2c4>)
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d017      	beq.n	8004c0a <UART_SetConfig+0xda>
 8004bda:	d81b      	bhi.n	8004c14 <UART_SetConfig+0xe4>
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d00a      	beq.n	8004bf6 <UART_SetConfig+0xc6>
 8004be0:	d818      	bhi.n	8004c14 <UART_SetConfig+0xe4>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <UART_SetConfig+0xbc>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d00a      	beq.n	8004c00 <UART_SetConfig+0xd0>
 8004bea:	e013      	b.n	8004c14 <UART_SetConfig+0xe4>
 8004bec:	231b      	movs	r3, #27
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e021      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004bf6:	231b      	movs	r3, #27
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e01c      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004c00:	231b      	movs	r3, #27
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2204      	movs	r2, #4
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e017      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004c0a:	231b      	movs	r3, #27
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	2208      	movs	r2, #8
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e012      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004c14:	231b      	movs	r3, #27
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	2210      	movs	r2, #16
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e00d      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a75      	ldr	r2, [pc, #468]	; (8004df8 <UART_SetConfig+0x2c8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d104      	bne.n	8004c32 <UART_SetConfig+0x102>
 8004c28:	231b      	movs	r3, #27
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e003      	b.n	8004c3a <UART_SetConfig+0x10a>
 8004c32:	231b      	movs	r3, #27
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	2210      	movs	r2, #16
 8004c38:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d000      	beq.n	8004c48 <UART_SetConfig+0x118>
 8004c46:	e065      	b.n	8004d14 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004c48:	231b      	movs	r3, #27
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d015      	beq.n	8004c7e <UART_SetConfig+0x14e>
 8004c52:	dc18      	bgt.n	8004c86 <UART_SetConfig+0x156>
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d00d      	beq.n	8004c74 <UART_SetConfig+0x144>
 8004c58:	dc15      	bgt.n	8004c86 <UART_SetConfig+0x156>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <UART_SetConfig+0x134>
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d005      	beq.n	8004c6e <UART_SetConfig+0x13e>
 8004c62:	e010      	b.n	8004c86 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c64:	f7fe fe34 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	617b      	str	r3, [r7, #20]
        break;
 8004c6c:	e012      	b.n	8004c94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6e:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004c70:	617b      	str	r3, [r7, #20]
        break;
 8004c72:	e00f      	b.n	8004c94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c74:	f7fe fda0 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	617b      	str	r3, [r7, #20]
        break;
 8004c7c:	e00a      	b.n	8004c94 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	617b      	str	r3, [r7, #20]
        break;
 8004c84:	e006      	b.n	8004c94 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c8a:	231a      	movs	r3, #26
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
        break;
 8004c92:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d100      	bne.n	8004c9c <UART_SetConfig+0x16c>
 8004c9a:	e08d      	b.n	8004db8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca0:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <UART_SetConfig+0x2d0>)
 8004ca2:	0052      	lsls	r2, r2, #1
 8004ca4:	5ad3      	ldrh	r3, [r2, r3]
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	6978      	ldr	r0, [r7, #20]
 8004caa:	f7fb fa3b 	bl	8000124 <__udivsi3>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	18d2      	adds	r2, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	0010      	movs	r0, r2
 8004cc2:	f7fb fa2f 	bl	8000124 <__udivsi3>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b0f      	cmp	r3, #15
 8004cce:	d91c      	bls.n	8004d0a <UART_SetConfig+0x1da>
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	025b      	lsls	r3, r3, #9
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d217      	bcs.n	8004d0a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	200e      	movs	r0, #14
 8004ce0:	183b      	adds	r3, r7, r0
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2207      	movs	r2, #7
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	b299      	uxth	r1, r3
 8004cf4:	183b      	adds	r3, r7, r0
 8004cf6:	183a      	adds	r2, r7, r0
 8004cf8:	8812      	ldrh	r2, [r2, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	183a      	adds	r2, r7, r0
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	e056      	b.n	8004db8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0a:	231a      	movs	r3, #26
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e051      	b.n	8004db8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d14:	231b      	movs	r3, #27
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d015      	beq.n	8004d4a <UART_SetConfig+0x21a>
 8004d1e:	dc18      	bgt.n	8004d52 <UART_SetConfig+0x222>
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d00d      	beq.n	8004d40 <UART_SetConfig+0x210>
 8004d24:	dc15      	bgt.n	8004d52 <UART_SetConfig+0x222>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x200>
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d005      	beq.n	8004d3a <UART_SetConfig+0x20a>
 8004d2e:	e010      	b.n	8004d52 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fdce 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8004d34:	0003      	movs	r3, r0
 8004d36:	617b      	str	r3, [r7, #20]
        break;
 8004d38:	e012      	b.n	8004d60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <UART_SetConfig+0x2cc>)
 8004d3c:	617b      	str	r3, [r7, #20]
        break;
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d40:	f7fe fd3a 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8004d44:	0003      	movs	r3, r0
 8004d46:	617b      	str	r3, [r7, #20]
        break;
 8004d48:	e00a      	b.n	8004d60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	617b      	str	r3, [r7, #20]
        break;
 8004d50:	e006      	b.n	8004d60 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d56:	231a      	movs	r3, #26
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
        break;
 8004d5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d028      	beq.n	8004db8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6a:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <UART_SetConfig+0x2d0>)
 8004d6c:	0052      	lsls	r2, r2, #1
 8004d6e:	5ad3      	ldrh	r3, [r2, r3]
 8004d70:	0019      	movs	r1, r3
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7fb f9d6 	bl	8000124 <__udivsi3>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	18d2      	adds	r2, r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	0019      	movs	r1, r3
 8004d8a:	0010      	movs	r0, r2
 8004d8c:	f7fb f9ca 	bl	8000124 <__udivsi3>
 8004d90:	0003      	movs	r3, r0
 8004d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d90a      	bls.n	8004db0 <UART_SetConfig+0x280>
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	025b      	lsls	r3, r3, #9
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d205      	bcs.n	8004db0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e003      	b.n	8004db8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004db0:	231a      	movs	r3, #26
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	226a      	movs	r2, #106	; 0x6a
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2268      	movs	r2, #104	; 0x68
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004dd4:	231a      	movs	r3, #26
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	781b      	ldrb	r3, [r3, #0]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b008      	add	sp, #32
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	cfff69f3 	.word	0xcfff69f3
 8004de8:	ffffcfff 	.word	0xffffcfff
 8004dec:	11fff4ff 	.word	0x11fff4ff
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	08005e7c 	.word	0x08005e7c

08004e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a4a      	ldr	r2, [pc, #296]	; (8004f48 <UART_AdvFeatureConfig+0x144>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	2202      	movs	r2, #2
 8004e34:	4013      	ands	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4a43      	ldr	r2, [pc, #268]	; (8004f4c <UART_AdvFeatureConfig+0x148>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	0019      	movs	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	2204      	movs	r2, #4
 8004e56:	4013      	ands	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a3b      	ldr	r2, [pc, #236]	; (8004f50 <UART_AdvFeatureConfig+0x14c>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	2208      	movs	r2, #8
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4a34      	ldr	r2, [pc, #208]	; (8004f54 <UART_AdvFeatureConfig+0x150>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	2210      	movs	r2, #16
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a2c      	ldr	r2, [pc, #176]	; (8004f58 <UART_AdvFeatureConfig+0x154>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	2220      	movs	r2, #32
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <UART_AdvFeatureConfig+0x158>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <UART_AdvFeatureConfig+0x15c>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	035b      	lsls	r3, r3, #13
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10b      	bne.n	8004f1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <UART_AdvFeatureConfig+0x160>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	2280      	movs	r2, #128	; 0x80
 8004f24:	4013      	ands	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <UART_AdvFeatureConfig+0x164>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	0019      	movs	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	46c0      	nop			; (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	fffdffff 	.word	0xfffdffff
 8004f4c:	fffeffff 	.word	0xfffeffff
 8004f50:	fffbffff 	.word	0xfffbffff
 8004f54:	ffff7fff 	.word	0xffff7fff
 8004f58:	ffffefff 	.word	0xffffefff
 8004f5c:	ffffdfff 	.word	0xffffdfff
 8004f60:	ffefffff 	.word	0xffefffff
 8004f64:	ff9fffff 	.word	0xff9fffff
 8004f68:	fff7ffff 	.word	0xfff7ffff

08004f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2290      	movs	r2, #144	; 0x90
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f7c:	f7fc ffe6 	bl	8001f4c <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d10c      	bne.n	8004fac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2280      	movs	r2, #128	; 0x80
 8004f96:	0391      	lsls	r1, r2, #14
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <UART_CheckIdleState+0x98>)
 8004f9c:	9200      	str	r2, [sp, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f000 f832 	bl	8005008 <UART_WaitOnFlagUntilTimeout>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d001      	beq.n	8004fac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e026      	b.n	8004ffa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d10c      	bne.n	8004fd4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	03d1      	lsls	r1, r2, #15
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4a10      	ldr	r2, [pc, #64]	; (8005004 <UART_CheckIdleState+0x98>)
 8004fc4:	9200      	str	r2, [sp, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f000 f81e 	bl	8005008 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d001      	beq.n	8004fd4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e012      	b.n	8004ffa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2288      	movs	r2, #136	; 0x88
 8004fd8:	2120      	movs	r1, #32
 8004fda:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	228c      	movs	r2, #140	; 0x8c
 8004fe0:	2120      	movs	r1, #32
 8004fe2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2284      	movs	r2, #132	; 0x84
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b004      	add	sp, #16
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	01ffffff 	.word	0x01ffffff

08005008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b094      	sub	sp, #80	; 0x50
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005018:	e0a7      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501c:	3301      	adds	r3, #1
 800501e:	d100      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005020:	e0a3      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fc ff93 	bl	8001f4c <HAL_GetTick>
 8005026:	0002      	movs	r2, r0
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <UART_WaitOnFlagUntilTimeout+0x30>
 8005032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005034:	2b00      	cmp	r3, #0
 8005036:	d13f      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005038:	f3ef 8310 	mrs	r3, PRIMASK
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
 8005042:	2301      	movs	r3, #1
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	f383 8810 	msr	PRIMASK, r3
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	494e      	ldr	r1, [pc, #312]	; (8005194 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800505a:	400a      	ands	r2, r1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	643b      	str	r3, [r7, #64]	; 0x40
 8005074:	2301      	movs	r3, #1
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2101      	movs	r1, #1
 800508c:	438a      	bics	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2288      	movs	r2, #136	; 0x88
 80050a0:	2120      	movs	r1, #32
 80050a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	228c      	movs	r2, #140	; 0x8c
 80050a8:	2120      	movs	r1, #32
 80050aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2284      	movs	r2, #132	; 0x84
 80050b0:	2100      	movs	r1, #0
 80050b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e069      	b.n	800518c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2204      	movs	r2, #4
 80050c0:	4013      	ands	r3, r2
 80050c2:	d052      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	401a      	ands	r2, r3
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d148      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e2:	f3ef 8310 	mrs	r3, PRIMASK
 80050e6:	613b      	str	r3, [r7, #16]
  return(result);
 80050e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f383 8810 	msr	PRIMASK, r3
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4924      	ldr	r1, [pc, #144]	; (8005194 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f383 8810 	msr	PRIMASK, r3
}
 8005112:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005114:	f3ef 8310 	mrs	r3, PRIMASK
 8005118:	61fb      	str	r3, [r7, #28]
  return(result);
 800511a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
 800511e:	2301      	movs	r3, #1
 8005120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f383 8810 	msr	PRIMASK, r3
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2101      	movs	r1, #1
 8005136:	438a      	bics	r2, r1
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	f383 8810 	msr	PRIMASK, r3
}
 8005144:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2288      	movs	r2, #136	; 0x88
 800514a:	2120      	movs	r1, #32
 800514c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	228c      	movs	r2, #140	; 0x8c
 8005152:	2120      	movs	r1, #32
 8005154:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2290      	movs	r2, #144	; 0x90
 800515a:	2120      	movs	r1, #32
 800515c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2284      	movs	r2, #132	; 0x84
 8005162:	2100      	movs	r1, #0
 8005164:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e010      	b.n	800518c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	4013      	ands	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	425a      	negs	r2, r3
 800517a:	4153      	adcs	r3, r2
 800517c:	b2db      	uxtb	r3, r3
 800517e:	001a      	movs	r2, r3
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d100      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x182>
 8005188:	e747      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	0018      	movs	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	b014      	add	sp, #80	; 0x50
 8005192:	bd80      	pop	{r7, pc}
 8005194:	fffffe5f 	.word	0xfffffe5f

08005198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2284      	movs	r2, #132	; 0x84
 80051a4:	5c9b      	ldrb	r3, [r3, r2]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_UARTEx_DisableFifoMode+0x16>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e027      	b.n	80051fe <HAL_UARTEx_DisableFifoMode+0x66>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2284      	movs	r2, #132	; 0x84
 80051b2:	2101      	movs	r1, #1
 80051b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2288      	movs	r2, #136	; 0x88
 80051ba:	2124      	movs	r1, #36	; 0x24
 80051bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	438a      	bics	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a0b      	ldr	r2, [pc, #44]	; (8005208 <HAL_UARTEx_DisableFifoMode+0x70>)
 80051da:	4013      	ands	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2288      	movs	r2, #136	; 0x88
 80051f0:	2120      	movs	r1, #32
 80051f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2284      	movs	r2, #132	; 0x84
 80051f8:	2100      	movs	r1, #0
 80051fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b004      	add	sp, #16
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	dfffffff 	.word	0xdfffffff

0800520c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2284      	movs	r2, #132	; 0x84
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005220:	2302      	movs	r3, #2
 8005222:	e02e      	b.n	8005282 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2284      	movs	r2, #132	; 0x84
 8005228:	2101      	movs	r1, #1
 800522a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2288      	movs	r2, #136	; 0x88
 8005230:	2124      	movs	r1, #36	; 0x24
 8005232:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2101      	movs	r1, #1
 8005248:	438a      	bics	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	08d9      	lsrs	r1, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f854 	bl	8005310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2288      	movs	r2, #136	; 0x88
 8005274:	2120      	movs	r1, #32
 8005276:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2284      	movs	r2, #132	; 0x84
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b004      	add	sp, #16
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2284      	movs	r2, #132	; 0x84
 800529a:	5c9b      	ldrb	r3, [r3, r2]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e02f      	b.n	8005304 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2284      	movs	r2, #132	; 0x84
 80052a8:	2101      	movs	r1, #1
 80052aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2288      	movs	r2, #136	; 0x88
 80052b0:	2124      	movs	r1, #36	; 0x24
 80052b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2101      	movs	r1, #1
 80052c8:	438a      	bics	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4a0e      	ldr	r2, [pc, #56]	; (800530c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f813 	bl	8005310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2288      	movs	r2, #136	; 0x88
 80052f6:	2120      	movs	r1, #32
 80052f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2284      	movs	r2, #132	; 0x84
 80052fe:	2100      	movs	r1, #0
 8005300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	f1ffffff 	.word	0xf1ffffff

08005310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	226a      	movs	r2, #106	; 0x6a
 8005324:	2101      	movs	r1, #1
 8005326:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2268      	movs	r2, #104	; 0x68
 800532c:	2101      	movs	r1, #1
 800532e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005330:	e043      	b.n	80053ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005332:	260f      	movs	r6, #15
 8005334:	19bb      	adds	r3, r7, r6
 8005336:	2208      	movs	r2, #8
 8005338:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800533a:	200e      	movs	r0, #14
 800533c:	183b      	adds	r3, r7, r0
 800533e:	2208      	movs	r2, #8
 8005340:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	0e5b      	lsrs	r3, r3, #25
 800534a:	b2da      	uxtb	r2, r3
 800534c:	240d      	movs	r4, #13
 800534e:	193b      	adds	r3, r7, r4
 8005350:	2107      	movs	r1, #7
 8005352:	400a      	ands	r2, r1
 8005354:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	0f5b      	lsrs	r3, r3, #29
 800535e:	b2da      	uxtb	r2, r3
 8005360:	250c      	movs	r5, #12
 8005362:	197b      	adds	r3, r7, r5
 8005364:	2107      	movs	r1, #7
 8005366:	400a      	ands	r2, r1
 8005368:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800536a:	183b      	adds	r3, r7, r0
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	197a      	adds	r2, r7, r5
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	4914      	ldr	r1, [pc, #80]	; (80053c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005374:	5c8a      	ldrb	r2, [r1, r2]
 8005376:	435a      	muls	r2, r3
 8005378:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800537a:	197b      	adds	r3, r7, r5
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005382:	0019      	movs	r1, r3
 8005384:	f7fa ff58 	bl	8000238 <__divsi3>
 8005388:	0003      	movs	r3, r0
 800538a:	b299      	uxth	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	226a      	movs	r2, #106	; 0x6a
 8005390:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005392:	19bb      	adds	r3, r7, r6
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	193a      	adds	r2, r7, r4
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	490a      	ldr	r1, [pc, #40]	; (80053c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800539c:	5c8a      	ldrb	r2, [r1, r2]
 800539e:	435a      	muls	r2, r3
 80053a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80053a2:	193b      	adds	r3, r7, r4
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80053a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053aa:	0019      	movs	r1, r3
 80053ac:	f7fa ff44 	bl	8000238 <__divsi3>
 80053b0:	0003      	movs	r3, r0
 80053b2:	b299      	uxth	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2268      	movs	r2, #104	; 0x68
 80053b8:	5299      	strh	r1, [r3, r2]
}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b005      	add	sp, #20
 80053c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	08005e94 	.word	0x08005e94
 80053c8:	08005e9c 	.word	0x08005e9c

080053cc <__errno>:
 80053cc:	4b01      	ldr	r3, [pc, #4]	; (80053d4 <__errno+0x8>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	4770      	bx	lr
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	2000000c 	.word	0x2000000c

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	2600      	movs	r6, #0
 80053dc:	4d0c      	ldr	r5, [pc, #48]	; (8005410 <__libc_init_array+0x38>)
 80053de:	4c0d      	ldr	r4, [pc, #52]	; (8005414 <__libc_init_array+0x3c>)
 80053e0:	1b64      	subs	r4, r4, r5
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	2600      	movs	r6, #0
 80053ea:	f000 fc8b 	bl	8005d04 <_init>
 80053ee:	4d0a      	ldr	r5, [pc, #40]	; (8005418 <__libc_init_array+0x40>)
 80053f0:	4c0a      	ldr	r4, [pc, #40]	; (800541c <__libc_init_array+0x44>)
 80053f2:	1b64      	subs	r4, r4, r5
 80053f4:	10a4      	asrs	r4, r4, #2
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	00b3      	lsls	r3, r6, #2
 80053fe:	58eb      	ldr	r3, [r5, r3]
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	00b3      	lsls	r3, r6, #2
 8005408:	58eb      	ldr	r3, [r5, r3]
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	08005ee0 	.word	0x08005ee0
 8005414:	08005ee0 	.word	0x08005ee0
 8005418:	08005ee0 	.word	0x08005ee0
 800541c:	08005ee4 	.word	0x08005ee4

08005420 <memset>:
 8005420:	0003      	movs	r3, r0
 8005422:	1882      	adds	r2, r0, r2
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	7019      	strb	r1, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <siprintf>:
 8005430:	b40e      	push	{r1, r2, r3}
 8005432:	b500      	push	{lr}
 8005434:	490b      	ldr	r1, [pc, #44]	; (8005464 <siprintf+0x34>)
 8005436:	b09c      	sub	sp, #112	; 0x70
 8005438:	ab1d      	add	r3, sp, #116	; 0x74
 800543a:	9002      	str	r0, [sp, #8]
 800543c:	9006      	str	r0, [sp, #24]
 800543e:	9107      	str	r1, [sp, #28]
 8005440:	9104      	str	r1, [sp, #16]
 8005442:	4809      	ldr	r0, [pc, #36]	; (8005468 <siprintf+0x38>)
 8005444:	4909      	ldr	r1, [pc, #36]	; (800546c <siprintf+0x3c>)
 8005446:	cb04      	ldmia	r3!, {r2}
 8005448:	9105      	str	r1, [sp, #20]
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	a902      	add	r1, sp, #8
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	f000 f870 	bl	8005534 <_svfiprintf_r>
 8005454:	2300      	movs	r3, #0
 8005456:	9a02      	ldr	r2, [sp, #8]
 8005458:	7013      	strb	r3, [r2, #0]
 800545a:	b01c      	add	sp, #112	; 0x70
 800545c:	bc08      	pop	{r3}
 800545e:	b003      	add	sp, #12
 8005460:	4718      	bx	r3
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	7fffffff 	.word	0x7fffffff
 8005468:	2000000c 	.word	0x2000000c
 800546c:	ffff0208 	.word	0xffff0208

08005470 <__ssputs_r>:
 8005470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005472:	688e      	ldr	r6, [r1, #8]
 8005474:	b085      	sub	sp, #20
 8005476:	0007      	movs	r7, r0
 8005478:	000c      	movs	r4, r1
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	429e      	cmp	r6, r3
 8005480:	d83c      	bhi.n	80054fc <__ssputs_r+0x8c>
 8005482:	2390      	movs	r3, #144	; 0x90
 8005484:	898a      	ldrh	r2, [r1, #12]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	421a      	tst	r2, r3
 800548a:	d034      	beq.n	80054f6 <__ssputs_r+0x86>
 800548c:	6909      	ldr	r1, [r1, #16]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6960      	ldr	r0, [r4, #20]
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	2303      	movs	r3, #3
 8005498:	4343      	muls	r3, r0
 800549a:	0fdd      	lsrs	r5, r3, #31
 800549c:	18ed      	adds	r5, r5, r3
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	9802      	ldr	r0, [sp, #8]
 80054a2:	3301      	adds	r3, #1
 80054a4:	181b      	adds	r3, r3, r0
 80054a6:	106d      	asrs	r5, r5, #1
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	d900      	bls.n	80054ae <__ssputs_r+0x3e>
 80054ac:	001d      	movs	r5, r3
 80054ae:	0553      	lsls	r3, r2, #21
 80054b0:	d532      	bpl.n	8005518 <__ssputs_r+0xa8>
 80054b2:	0029      	movs	r1, r5
 80054b4:	0038      	movs	r0, r7
 80054b6:	f000 fb53 	bl	8005b60 <_malloc_r>
 80054ba:	1e06      	subs	r6, r0, #0
 80054bc:	d109      	bne.n	80054d2 <__ssputs_r+0x62>
 80054be:	230c      	movs	r3, #12
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	2001      	movs	r0, #1
 80054c6:	89a2      	ldrh	r2, [r4, #12]
 80054c8:	4240      	negs	r0, r0
 80054ca:	4313      	orrs	r3, r2
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	b005      	add	sp, #20
 80054d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d2:	9a02      	ldr	r2, [sp, #8]
 80054d4:	6921      	ldr	r1, [r4, #16]
 80054d6:	f000 faba 	bl	8005a4e <memcpy>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <__ssputs_r+0xc0>)
 80054de:	401a      	ands	r2, r3
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	4313      	orrs	r3, r2
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	9b02      	ldr	r3, [sp, #8]
 80054e8:	6126      	str	r6, [r4, #16]
 80054ea:	18f6      	adds	r6, r6, r3
 80054ec:	6026      	str	r6, [r4, #0]
 80054ee:	6165      	str	r5, [r4, #20]
 80054f0:	9e01      	ldr	r6, [sp, #4]
 80054f2:	1aed      	subs	r5, r5, r3
 80054f4:	60a5      	str	r5, [r4, #8]
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	429e      	cmp	r6, r3
 80054fa:	d900      	bls.n	80054fe <__ssputs_r+0x8e>
 80054fc:	9e01      	ldr	r6, [sp, #4]
 80054fe:	0032      	movs	r2, r6
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	f000 faac 	bl	8005a60 <memmove>
 8005508:	68a3      	ldr	r3, [r4, #8]
 800550a:	2000      	movs	r0, #0
 800550c:	1b9b      	subs	r3, r3, r6
 800550e:	60a3      	str	r3, [r4, #8]
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	199e      	adds	r6, r3, r6
 8005514:	6026      	str	r6, [r4, #0]
 8005516:	e7da      	b.n	80054ce <__ssputs_r+0x5e>
 8005518:	002a      	movs	r2, r5
 800551a:	0038      	movs	r0, r7
 800551c:	f000 fb96 	bl	8005c4c <_realloc_r>
 8005520:	1e06      	subs	r6, r0, #0
 8005522:	d1e0      	bne.n	80054e6 <__ssputs_r+0x76>
 8005524:	0038      	movs	r0, r7
 8005526:	6921      	ldr	r1, [r4, #16]
 8005528:	f000 faae 	bl	8005a88 <_free_r>
 800552c:	e7c7      	b.n	80054be <__ssputs_r+0x4e>
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	fffffb7f 	.word	0xfffffb7f

08005534 <_svfiprintf_r>:
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	b0a1      	sub	sp, #132	; 0x84
 8005538:	9003      	str	r0, [sp, #12]
 800553a:	001d      	movs	r5, r3
 800553c:	898b      	ldrh	r3, [r1, #12]
 800553e:	000f      	movs	r7, r1
 8005540:	0016      	movs	r6, r2
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	d511      	bpl.n	800556a <_svfiprintf_r+0x36>
 8005546:	690b      	ldr	r3, [r1, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10e      	bne.n	800556a <_svfiprintf_r+0x36>
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	f000 fb07 	bl	8005b60 <_malloc_r>
 8005552:	6038      	str	r0, [r7, #0]
 8005554:	6138      	str	r0, [r7, #16]
 8005556:	2800      	cmp	r0, #0
 8005558:	d105      	bne.n	8005566 <_svfiprintf_r+0x32>
 800555a:	230c      	movs	r3, #12
 800555c:	9a03      	ldr	r2, [sp, #12]
 800555e:	3801      	subs	r0, #1
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	b021      	add	sp, #132	; 0x84
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	2300      	movs	r3, #0
 800556c:	ac08      	add	r4, sp, #32
 800556e:	6163      	str	r3, [r4, #20]
 8005570:	3320      	adds	r3, #32
 8005572:	7663      	strb	r3, [r4, #25]
 8005574:	3310      	adds	r3, #16
 8005576:	76a3      	strb	r3, [r4, #26]
 8005578:	9507      	str	r5, [sp, #28]
 800557a:	0035      	movs	r5, r6
 800557c:	782b      	ldrb	r3, [r5, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <_svfiprintf_r+0x52>
 8005582:	2b25      	cmp	r3, #37	; 0x25
 8005584:	d147      	bne.n	8005616 <_svfiprintf_r+0xe2>
 8005586:	1bab      	subs	r3, r5, r6
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	42b5      	cmp	r5, r6
 800558c:	d00c      	beq.n	80055a8 <_svfiprintf_r+0x74>
 800558e:	0032      	movs	r2, r6
 8005590:	0039      	movs	r1, r7
 8005592:	9803      	ldr	r0, [sp, #12]
 8005594:	f7ff ff6c 	bl	8005470 <__ssputs_r>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d100      	bne.n	800559e <_svfiprintf_r+0x6a>
 800559c:	e0ae      	b.n	80056fc <_svfiprintf_r+0x1c8>
 800559e:	6962      	ldr	r2, [r4, #20]
 80055a0:	9b05      	ldr	r3, [sp, #20]
 80055a2:	4694      	mov	ip, r2
 80055a4:	4463      	add	r3, ip
 80055a6:	6163      	str	r3, [r4, #20]
 80055a8:	782b      	ldrb	r3, [r5, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d100      	bne.n	80055b0 <_svfiprintf_r+0x7c>
 80055ae:	e0a5      	b.n	80056fc <_svfiprintf_r+0x1c8>
 80055b0:	2201      	movs	r2, #1
 80055b2:	2300      	movs	r3, #0
 80055b4:	4252      	negs	r2, r2
 80055b6:	6062      	str	r2, [r4, #4]
 80055b8:	a904      	add	r1, sp, #16
 80055ba:	3254      	adds	r2, #84	; 0x54
 80055bc:	1852      	adds	r2, r2, r1
 80055be:	1c6e      	adds	r6, r5, #1
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	60e3      	str	r3, [r4, #12]
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	7013      	strb	r3, [r2, #0]
 80055c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80055ca:	2205      	movs	r2, #5
 80055cc:	7831      	ldrb	r1, [r6, #0]
 80055ce:	4854      	ldr	r0, [pc, #336]	; (8005720 <_svfiprintf_r+0x1ec>)
 80055d0:	f000 fa32 	bl	8005a38 <memchr>
 80055d4:	1c75      	adds	r5, r6, #1
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d11f      	bne.n	800561a <_svfiprintf_r+0xe6>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	06d3      	lsls	r3, r2, #27
 80055de:	d504      	bpl.n	80055ea <_svfiprintf_r+0xb6>
 80055e0:	2353      	movs	r3, #83	; 0x53
 80055e2:	a904      	add	r1, sp, #16
 80055e4:	185b      	adds	r3, r3, r1
 80055e6:	2120      	movs	r1, #32
 80055e8:	7019      	strb	r1, [r3, #0]
 80055ea:	0713      	lsls	r3, r2, #28
 80055ec:	d504      	bpl.n	80055f8 <_svfiprintf_r+0xc4>
 80055ee:	2353      	movs	r3, #83	; 0x53
 80055f0:	a904      	add	r1, sp, #16
 80055f2:	185b      	adds	r3, r3, r1
 80055f4:	212b      	movs	r1, #43	; 0x2b
 80055f6:	7019      	strb	r1, [r3, #0]
 80055f8:	7833      	ldrb	r3, [r6, #0]
 80055fa:	2b2a      	cmp	r3, #42	; 0x2a
 80055fc:	d016      	beq.n	800562c <_svfiprintf_r+0xf8>
 80055fe:	0035      	movs	r5, r6
 8005600:	2100      	movs	r1, #0
 8005602:	200a      	movs	r0, #10
 8005604:	68e3      	ldr	r3, [r4, #12]
 8005606:	782a      	ldrb	r2, [r5, #0]
 8005608:	1c6e      	adds	r6, r5, #1
 800560a:	3a30      	subs	r2, #48	; 0x30
 800560c:	2a09      	cmp	r2, #9
 800560e:	d94e      	bls.n	80056ae <_svfiprintf_r+0x17a>
 8005610:	2900      	cmp	r1, #0
 8005612:	d111      	bne.n	8005638 <_svfiprintf_r+0x104>
 8005614:	e017      	b.n	8005646 <_svfiprintf_r+0x112>
 8005616:	3501      	adds	r5, #1
 8005618:	e7b0      	b.n	800557c <_svfiprintf_r+0x48>
 800561a:	4b41      	ldr	r3, [pc, #260]	; (8005720 <_svfiprintf_r+0x1ec>)
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	1ac0      	subs	r0, r0, r3
 8005620:	2301      	movs	r3, #1
 8005622:	4083      	lsls	r3, r0
 8005624:	4313      	orrs	r3, r2
 8005626:	002e      	movs	r6, r5
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	e7ce      	b.n	80055ca <_svfiprintf_r+0x96>
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	1d19      	adds	r1, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	9107      	str	r1, [sp, #28]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db01      	blt.n	800563c <_svfiprintf_r+0x108>
 8005638:	930b      	str	r3, [sp, #44]	; 0x2c
 800563a:	e004      	b.n	8005646 <_svfiprintf_r+0x112>
 800563c:	425b      	negs	r3, r3
 800563e:	60e3      	str	r3, [r4, #12]
 8005640:	2302      	movs	r3, #2
 8005642:	4313      	orrs	r3, r2
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	782b      	ldrb	r3, [r5, #0]
 8005648:	2b2e      	cmp	r3, #46	; 0x2e
 800564a:	d10a      	bne.n	8005662 <_svfiprintf_r+0x12e>
 800564c:	786b      	ldrb	r3, [r5, #1]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d135      	bne.n	80056be <_svfiprintf_r+0x18a>
 8005652:	9b07      	ldr	r3, [sp, #28]
 8005654:	3502      	adds	r5, #2
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	9207      	str	r2, [sp, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	db2b      	blt.n	80056b8 <_svfiprintf_r+0x184>
 8005660:	9309      	str	r3, [sp, #36]	; 0x24
 8005662:	4e30      	ldr	r6, [pc, #192]	; (8005724 <_svfiprintf_r+0x1f0>)
 8005664:	2203      	movs	r2, #3
 8005666:	0030      	movs	r0, r6
 8005668:	7829      	ldrb	r1, [r5, #0]
 800566a:	f000 f9e5 	bl	8005a38 <memchr>
 800566e:	2800      	cmp	r0, #0
 8005670:	d006      	beq.n	8005680 <_svfiprintf_r+0x14c>
 8005672:	2340      	movs	r3, #64	; 0x40
 8005674:	1b80      	subs	r0, r0, r6
 8005676:	4083      	lsls	r3, r0
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	3501      	adds	r5, #1
 800567c:	4313      	orrs	r3, r2
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	7829      	ldrb	r1, [r5, #0]
 8005682:	2206      	movs	r2, #6
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <_svfiprintf_r+0x1f4>)
 8005686:	1c6e      	adds	r6, r5, #1
 8005688:	7621      	strb	r1, [r4, #24]
 800568a:	f000 f9d5 	bl	8005a38 <memchr>
 800568e:	2800      	cmp	r0, #0
 8005690:	d03c      	beq.n	800570c <_svfiprintf_r+0x1d8>
 8005692:	4b26      	ldr	r3, [pc, #152]	; (800572c <_svfiprintf_r+0x1f8>)
 8005694:	2b00      	cmp	r3, #0
 8005696:	d125      	bne.n	80056e4 <_svfiprintf_r+0x1b0>
 8005698:	2207      	movs	r2, #7
 800569a:	9b07      	ldr	r3, [sp, #28]
 800569c:	3307      	adds	r3, #7
 800569e:	4393      	bics	r3, r2
 80056a0:	3308      	adds	r3, #8
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	6963      	ldr	r3, [r4, #20]
 80056a6:	9a04      	ldr	r2, [sp, #16]
 80056a8:	189b      	adds	r3, r3, r2
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	e765      	b.n	800557a <_svfiprintf_r+0x46>
 80056ae:	4343      	muls	r3, r0
 80056b0:	0035      	movs	r5, r6
 80056b2:	2101      	movs	r1, #1
 80056b4:	189b      	adds	r3, r3, r2
 80056b6:	e7a6      	b.n	8005606 <_svfiprintf_r+0xd2>
 80056b8:	2301      	movs	r3, #1
 80056ba:	425b      	negs	r3, r3
 80056bc:	e7d0      	b.n	8005660 <_svfiprintf_r+0x12c>
 80056be:	2300      	movs	r3, #0
 80056c0:	200a      	movs	r0, #10
 80056c2:	001a      	movs	r2, r3
 80056c4:	3501      	adds	r5, #1
 80056c6:	6063      	str	r3, [r4, #4]
 80056c8:	7829      	ldrb	r1, [r5, #0]
 80056ca:	1c6e      	adds	r6, r5, #1
 80056cc:	3930      	subs	r1, #48	; 0x30
 80056ce:	2909      	cmp	r1, #9
 80056d0:	d903      	bls.n	80056da <_svfiprintf_r+0x1a6>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0c5      	beq.n	8005662 <_svfiprintf_r+0x12e>
 80056d6:	9209      	str	r2, [sp, #36]	; 0x24
 80056d8:	e7c3      	b.n	8005662 <_svfiprintf_r+0x12e>
 80056da:	4342      	muls	r2, r0
 80056dc:	0035      	movs	r5, r6
 80056de:	2301      	movs	r3, #1
 80056e0:	1852      	adds	r2, r2, r1
 80056e2:	e7f1      	b.n	80056c8 <_svfiprintf_r+0x194>
 80056e4:	ab07      	add	r3, sp, #28
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	003a      	movs	r2, r7
 80056ea:	0021      	movs	r1, r4
 80056ec:	4b10      	ldr	r3, [pc, #64]	; (8005730 <_svfiprintf_r+0x1fc>)
 80056ee:	9803      	ldr	r0, [sp, #12]
 80056f0:	e000      	b.n	80056f4 <_svfiprintf_r+0x1c0>
 80056f2:	bf00      	nop
 80056f4:	9004      	str	r0, [sp, #16]
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	d1d3      	bne.n	80056a4 <_svfiprintf_r+0x170>
 80056fc:	89bb      	ldrh	r3, [r7, #12]
 80056fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005700:	065b      	lsls	r3, r3, #25
 8005702:	d400      	bmi.n	8005706 <_svfiprintf_r+0x1d2>
 8005704:	e72d      	b.n	8005562 <_svfiprintf_r+0x2e>
 8005706:	2001      	movs	r0, #1
 8005708:	4240      	negs	r0, r0
 800570a:	e72a      	b.n	8005562 <_svfiprintf_r+0x2e>
 800570c:	ab07      	add	r3, sp, #28
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	003a      	movs	r2, r7
 8005712:	0021      	movs	r1, r4
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_svfiprintf_r+0x1fc>)
 8005716:	9803      	ldr	r0, [sp, #12]
 8005718:	f000 f87c 	bl	8005814 <_printf_i>
 800571c:	e7ea      	b.n	80056f4 <_svfiprintf_r+0x1c0>
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	08005ea4 	.word	0x08005ea4
 8005724:	08005eaa 	.word	0x08005eaa
 8005728:	08005eae 	.word	0x08005eae
 800572c:	00000000 	.word	0x00000000
 8005730:	08005471 	.word	0x08005471

08005734 <_printf_common>:
 8005734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005736:	0015      	movs	r5, r2
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	688a      	ldr	r2, [r1, #8]
 800573c:	690b      	ldr	r3, [r1, #16]
 800573e:	000c      	movs	r4, r1
 8005740:	9000      	str	r0, [sp, #0]
 8005742:	4293      	cmp	r3, r2
 8005744:	da00      	bge.n	8005748 <_printf_common+0x14>
 8005746:	0013      	movs	r3, r2
 8005748:	0022      	movs	r2, r4
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	3243      	adds	r2, #67	; 0x43
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	2a00      	cmp	r2, #0
 8005752:	d001      	beq.n	8005758 <_printf_common+0x24>
 8005754:	3301      	adds	r3, #1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	069b      	lsls	r3, r3, #26
 800575c:	d502      	bpl.n	8005764 <_printf_common+0x30>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	3302      	adds	r3, #2
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	2306      	movs	r3, #6
 8005768:	0017      	movs	r7, r2
 800576a:	401f      	ands	r7, r3
 800576c:	421a      	tst	r2, r3
 800576e:	d027      	beq.n	80057c0 <_printf_common+0x8c>
 8005770:	0023      	movs	r3, r4
 8005772:	3343      	adds	r3, #67	; 0x43
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	1e5a      	subs	r2, r3, #1
 8005778:	4193      	sbcs	r3, r2
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	0692      	lsls	r2, r2, #26
 800577e:	d430      	bmi.n	80057e2 <_printf_common+0xae>
 8005780:	0022      	movs	r2, r4
 8005782:	9901      	ldr	r1, [sp, #4]
 8005784:	9800      	ldr	r0, [sp, #0]
 8005786:	9e08      	ldr	r6, [sp, #32]
 8005788:	3243      	adds	r2, #67	; 0x43
 800578a:	47b0      	blx	r6
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d025      	beq.n	80057dc <_printf_common+0xa8>
 8005790:	2306      	movs	r3, #6
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	682a      	ldr	r2, [r5, #0]
 8005796:	68e1      	ldr	r1, [r4, #12]
 8005798:	2500      	movs	r5, #0
 800579a:	4003      	ands	r3, r0
 800579c:	2b04      	cmp	r3, #4
 800579e:	d103      	bne.n	80057a8 <_printf_common+0x74>
 80057a0:	1a8d      	subs	r5, r1, r2
 80057a2:	43eb      	mvns	r3, r5
 80057a4:	17db      	asrs	r3, r3, #31
 80057a6:	401d      	ands	r5, r3
 80057a8:	68a3      	ldr	r3, [r4, #8]
 80057aa:	6922      	ldr	r2, [r4, #16]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	dd01      	ble.n	80057b4 <_printf_common+0x80>
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	18ed      	adds	r5, r5, r3
 80057b4:	2700      	movs	r7, #0
 80057b6:	42bd      	cmp	r5, r7
 80057b8:	d120      	bne.n	80057fc <_printf_common+0xc8>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e010      	b.n	80057e0 <_printf_common+0xac>
 80057be:	3701      	adds	r7, #1
 80057c0:	68e3      	ldr	r3, [r4, #12]
 80057c2:	682a      	ldr	r2, [r5, #0]
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	42bb      	cmp	r3, r7
 80057c8:	ddd2      	ble.n	8005770 <_printf_common+0x3c>
 80057ca:	0022      	movs	r2, r4
 80057cc:	2301      	movs	r3, #1
 80057ce:	9901      	ldr	r1, [sp, #4]
 80057d0:	9800      	ldr	r0, [sp, #0]
 80057d2:	9e08      	ldr	r6, [sp, #32]
 80057d4:	3219      	adds	r2, #25
 80057d6:	47b0      	blx	r6
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d1f0      	bne.n	80057be <_printf_common+0x8a>
 80057dc:	2001      	movs	r0, #1
 80057de:	4240      	negs	r0, r0
 80057e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057e2:	2030      	movs	r0, #48	; 0x30
 80057e4:	18e1      	adds	r1, r4, r3
 80057e6:	3143      	adds	r1, #67	; 0x43
 80057e8:	7008      	strb	r0, [r1, #0]
 80057ea:	0021      	movs	r1, r4
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	3145      	adds	r1, #69	; 0x45
 80057f0:	7809      	ldrb	r1, [r1, #0]
 80057f2:	18a2      	adds	r2, r4, r2
 80057f4:	3243      	adds	r2, #67	; 0x43
 80057f6:	3302      	adds	r3, #2
 80057f8:	7011      	strb	r1, [r2, #0]
 80057fa:	e7c1      	b.n	8005780 <_printf_common+0x4c>
 80057fc:	0022      	movs	r2, r4
 80057fe:	2301      	movs	r3, #1
 8005800:	9901      	ldr	r1, [sp, #4]
 8005802:	9800      	ldr	r0, [sp, #0]
 8005804:	9e08      	ldr	r6, [sp, #32]
 8005806:	321a      	adds	r2, #26
 8005808:	47b0      	blx	r6
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d0e6      	beq.n	80057dc <_printf_common+0xa8>
 800580e:	3701      	adds	r7, #1
 8005810:	e7d1      	b.n	80057b6 <_printf_common+0x82>
	...

08005814 <_printf_i>:
 8005814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005816:	b08b      	sub	sp, #44	; 0x2c
 8005818:	9206      	str	r2, [sp, #24]
 800581a:	000a      	movs	r2, r1
 800581c:	3243      	adds	r2, #67	; 0x43
 800581e:	9307      	str	r3, [sp, #28]
 8005820:	9005      	str	r0, [sp, #20]
 8005822:	9204      	str	r2, [sp, #16]
 8005824:	7e0a      	ldrb	r2, [r1, #24]
 8005826:	000c      	movs	r4, r1
 8005828:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800582a:	2a78      	cmp	r2, #120	; 0x78
 800582c:	d807      	bhi.n	800583e <_printf_i+0x2a>
 800582e:	2a62      	cmp	r2, #98	; 0x62
 8005830:	d809      	bhi.n	8005846 <_printf_i+0x32>
 8005832:	2a00      	cmp	r2, #0
 8005834:	d100      	bne.n	8005838 <_printf_i+0x24>
 8005836:	e0c1      	b.n	80059bc <_printf_i+0x1a8>
 8005838:	2a58      	cmp	r2, #88	; 0x58
 800583a:	d100      	bne.n	800583e <_printf_i+0x2a>
 800583c:	e08c      	b.n	8005958 <_printf_i+0x144>
 800583e:	0026      	movs	r6, r4
 8005840:	3642      	adds	r6, #66	; 0x42
 8005842:	7032      	strb	r2, [r6, #0]
 8005844:	e022      	b.n	800588c <_printf_i+0x78>
 8005846:	0010      	movs	r0, r2
 8005848:	3863      	subs	r0, #99	; 0x63
 800584a:	2815      	cmp	r0, #21
 800584c:	d8f7      	bhi.n	800583e <_printf_i+0x2a>
 800584e:	f7fa fc5f 	bl	8000110 <__gnu_thumb1_case_shi>
 8005852:	0016      	.short	0x0016
 8005854:	fff6001f 	.word	0xfff6001f
 8005858:	fff6fff6 	.word	0xfff6fff6
 800585c:	001ffff6 	.word	0x001ffff6
 8005860:	fff6fff6 	.word	0xfff6fff6
 8005864:	fff6fff6 	.word	0xfff6fff6
 8005868:	003600a8 	.word	0x003600a8
 800586c:	fff6009a 	.word	0xfff6009a
 8005870:	00b9fff6 	.word	0x00b9fff6
 8005874:	0036fff6 	.word	0x0036fff6
 8005878:	fff6fff6 	.word	0xfff6fff6
 800587c:	009e      	.short	0x009e
 800587e:	0026      	movs	r6, r4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	3642      	adds	r6, #66	; 0x42
 8005884:	1d11      	adds	r1, r2, #4
 8005886:	6019      	str	r1, [r3, #0]
 8005888:	6813      	ldr	r3, [r2, #0]
 800588a:	7033      	strb	r3, [r6, #0]
 800588c:	2301      	movs	r3, #1
 800588e:	e0a7      	b.n	80059e0 <_printf_i+0x1cc>
 8005890:	6808      	ldr	r0, [r1, #0]
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	1d0a      	adds	r2, r1, #4
 8005896:	0605      	lsls	r5, r0, #24
 8005898:	d50b      	bpl.n	80058b2 <_printf_i+0x9e>
 800589a:	680d      	ldr	r5, [r1, #0]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	2d00      	cmp	r5, #0
 80058a0:	da03      	bge.n	80058aa <_printf_i+0x96>
 80058a2:	232d      	movs	r3, #45	; 0x2d
 80058a4:	9a04      	ldr	r2, [sp, #16]
 80058a6:	426d      	negs	r5, r5
 80058a8:	7013      	strb	r3, [r2, #0]
 80058aa:	4b61      	ldr	r3, [pc, #388]	; (8005a30 <_printf_i+0x21c>)
 80058ac:	270a      	movs	r7, #10
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	e01b      	b.n	80058ea <_printf_i+0xd6>
 80058b2:	680d      	ldr	r5, [r1, #0]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	0641      	lsls	r1, r0, #25
 80058b8:	d5f1      	bpl.n	800589e <_printf_i+0x8a>
 80058ba:	b22d      	sxth	r5, r5
 80058bc:	e7ef      	b.n	800589e <_printf_i+0x8a>
 80058be:	680d      	ldr	r5, [r1, #0]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	1d08      	adds	r0, r1, #4
 80058c4:	6018      	str	r0, [r3, #0]
 80058c6:	062e      	lsls	r6, r5, #24
 80058c8:	d501      	bpl.n	80058ce <_printf_i+0xba>
 80058ca:	680d      	ldr	r5, [r1, #0]
 80058cc:	e003      	b.n	80058d6 <_printf_i+0xc2>
 80058ce:	066d      	lsls	r5, r5, #25
 80058d0:	d5fb      	bpl.n	80058ca <_printf_i+0xb6>
 80058d2:	680d      	ldr	r5, [r1, #0]
 80058d4:	b2ad      	uxth	r5, r5
 80058d6:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <_printf_i+0x21c>)
 80058d8:	2708      	movs	r7, #8
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	2a6f      	cmp	r2, #111	; 0x6f
 80058de:	d000      	beq.n	80058e2 <_printf_i+0xce>
 80058e0:	3702      	adds	r7, #2
 80058e2:	0023      	movs	r3, r4
 80058e4:	2200      	movs	r2, #0
 80058e6:	3343      	adds	r3, #67	; 0x43
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	6863      	ldr	r3, [r4, #4]
 80058ec:	60a3      	str	r3, [r4, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db03      	blt.n	80058fa <_printf_i+0xe6>
 80058f2:	2204      	movs	r2, #4
 80058f4:	6821      	ldr	r1, [r4, #0]
 80058f6:	4391      	bics	r1, r2
 80058f8:	6021      	str	r1, [r4, #0]
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	d102      	bne.n	8005904 <_printf_i+0xf0>
 80058fe:	9e04      	ldr	r6, [sp, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <_printf_i+0x10a>
 8005904:	9e04      	ldr	r6, [sp, #16]
 8005906:	0028      	movs	r0, r5
 8005908:	0039      	movs	r1, r7
 800590a:	f7fa fc91 	bl	8000230 <__aeabi_uidivmod>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	3e01      	subs	r6, #1
 8005912:	5c5b      	ldrb	r3, [r3, r1]
 8005914:	7033      	strb	r3, [r6, #0]
 8005916:	002b      	movs	r3, r5
 8005918:	0005      	movs	r5, r0
 800591a:	429f      	cmp	r7, r3
 800591c:	d9f3      	bls.n	8005906 <_printf_i+0xf2>
 800591e:	2f08      	cmp	r7, #8
 8005920:	d109      	bne.n	8005936 <_printf_i+0x122>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	07db      	lsls	r3, r3, #31
 8005926:	d506      	bpl.n	8005936 <_printf_i+0x122>
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	6922      	ldr	r2, [r4, #16]
 800592c:	4293      	cmp	r3, r2
 800592e:	dc02      	bgt.n	8005936 <_printf_i+0x122>
 8005930:	2330      	movs	r3, #48	; 0x30
 8005932:	3e01      	subs	r6, #1
 8005934:	7033      	strb	r3, [r6, #0]
 8005936:	9b04      	ldr	r3, [sp, #16]
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	9b07      	ldr	r3, [sp, #28]
 800593e:	0021      	movs	r1, r4
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	9805      	ldr	r0, [sp, #20]
 8005944:	9b06      	ldr	r3, [sp, #24]
 8005946:	aa09      	add	r2, sp, #36	; 0x24
 8005948:	f7ff fef4 	bl	8005734 <_printf_common>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d14c      	bne.n	80059ea <_printf_i+0x1d6>
 8005950:	2001      	movs	r0, #1
 8005952:	4240      	negs	r0, r0
 8005954:	b00b      	add	sp, #44	; 0x2c
 8005956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005958:	3145      	adds	r1, #69	; 0x45
 800595a:	700a      	strb	r2, [r1, #0]
 800595c:	4a34      	ldr	r2, [pc, #208]	; (8005a30 <_printf_i+0x21c>)
 800595e:	9203      	str	r2, [sp, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	6821      	ldr	r1, [r4, #0]
 8005964:	ca20      	ldmia	r2!, {r5}
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	0608      	lsls	r0, r1, #24
 800596a:	d516      	bpl.n	800599a <_printf_i+0x186>
 800596c:	07cb      	lsls	r3, r1, #31
 800596e:	d502      	bpl.n	8005976 <_printf_i+0x162>
 8005970:	2320      	movs	r3, #32
 8005972:	4319      	orrs	r1, r3
 8005974:	6021      	str	r1, [r4, #0]
 8005976:	2710      	movs	r7, #16
 8005978:	2d00      	cmp	r5, #0
 800597a:	d1b2      	bne.n	80058e2 <_printf_i+0xce>
 800597c:	2320      	movs	r3, #32
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	439a      	bics	r2, r3
 8005982:	6022      	str	r2, [r4, #0]
 8005984:	e7ad      	b.n	80058e2 <_printf_i+0xce>
 8005986:	2220      	movs	r2, #32
 8005988:	6809      	ldr	r1, [r1, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	0022      	movs	r2, r4
 8005990:	2178      	movs	r1, #120	; 0x78
 8005992:	3245      	adds	r2, #69	; 0x45
 8005994:	7011      	strb	r1, [r2, #0]
 8005996:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <_printf_i+0x220>)
 8005998:	e7e1      	b.n	800595e <_printf_i+0x14a>
 800599a:	0648      	lsls	r0, r1, #25
 800599c:	d5e6      	bpl.n	800596c <_printf_i+0x158>
 800599e:	b2ad      	uxth	r5, r5
 80059a0:	e7e4      	b.n	800596c <_printf_i+0x158>
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	680d      	ldr	r5, [r1, #0]
 80059a6:	1d10      	adds	r0, r2, #4
 80059a8:	6949      	ldr	r1, [r1, #20]
 80059aa:	6018      	str	r0, [r3, #0]
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	062e      	lsls	r6, r5, #24
 80059b0:	d501      	bpl.n	80059b6 <_printf_i+0x1a2>
 80059b2:	6019      	str	r1, [r3, #0]
 80059b4:	e002      	b.n	80059bc <_printf_i+0x1a8>
 80059b6:	066d      	lsls	r5, r5, #25
 80059b8:	d5fb      	bpl.n	80059b2 <_printf_i+0x19e>
 80059ba:	8019      	strh	r1, [r3, #0]
 80059bc:	2300      	movs	r3, #0
 80059be:	9e04      	ldr	r6, [sp, #16]
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	e7bb      	b.n	800593c <_printf_i+0x128>
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	1d11      	adds	r1, r2, #4
 80059c8:	6019      	str	r1, [r3, #0]
 80059ca:	6816      	ldr	r6, [r2, #0]
 80059cc:	2100      	movs	r1, #0
 80059ce:	0030      	movs	r0, r6
 80059d0:	6862      	ldr	r2, [r4, #4]
 80059d2:	f000 f831 	bl	8005a38 <memchr>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d001      	beq.n	80059de <_printf_i+0x1ca>
 80059da:	1b80      	subs	r0, r0, r6
 80059dc:	6060      	str	r0, [r4, #4]
 80059de:	6863      	ldr	r3, [r4, #4]
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9a04      	ldr	r2, [sp, #16]
 80059e6:	7013      	strb	r3, [r2, #0]
 80059e8:	e7a8      	b.n	800593c <_printf_i+0x128>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	0032      	movs	r2, r6
 80059ee:	9906      	ldr	r1, [sp, #24]
 80059f0:	9805      	ldr	r0, [sp, #20]
 80059f2:	9d07      	ldr	r5, [sp, #28]
 80059f4:	47a8      	blx	r5
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d0aa      	beq.n	8005950 <_printf_i+0x13c>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	079b      	lsls	r3, r3, #30
 80059fe:	d415      	bmi.n	8005a2c <_printf_i+0x218>
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	68e0      	ldr	r0, [r4, #12]
 8005a04:	4298      	cmp	r0, r3
 8005a06:	daa5      	bge.n	8005954 <_printf_i+0x140>
 8005a08:	0018      	movs	r0, r3
 8005a0a:	e7a3      	b.n	8005954 <_printf_i+0x140>
 8005a0c:	0022      	movs	r2, r4
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9906      	ldr	r1, [sp, #24]
 8005a12:	9805      	ldr	r0, [sp, #20]
 8005a14:	9e07      	ldr	r6, [sp, #28]
 8005a16:	3219      	adds	r2, #25
 8005a18:	47b0      	blx	r6
 8005a1a:	1c43      	adds	r3, r0, #1
 8005a1c:	d098      	beq.n	8005950 <_printf_i+0x13c>
 8005a1e:	3501      	adds	r5, #1
 8005a20:	68e3      	ldr	r3, [r4, #12]
 8005a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	42ab      	cmp	r3, r5
 8005a28:	dcf0      	bgt.n	8005a0c <_printf_i+0x1f8>
 8005a2a:	e7e9      	b.n	8005a00 <_printf_i+0x1ec>
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	e7f7      	b.n	8005a20 <_printf_i+0x20c>
 8005a30:	08005eb5 	.word	0x08005eb5
 8005a34:	08005ec6 	.word	0x08005ec6

08005a38 <memchr>:
 8005a38:	b2c9      	uxtb	r1, r1
 8005a3a:	1882      	adds	r2, r0, r2
 8005a3c:	4290      	cmp	r0, r2
 8005a3e:	d101      	bne.n	8005a44 <memchr+0xc>
 8005a40:	2000      	movs	r0, #0
 8005a42:	4770      	bx	lr
 8005a44:	7803      	ldrb	r3, [r0, #0]
 8005a46:	428b      	cmp	r3, r1
 8005a48:	d0fb      	beq.n	8005a42 <memchr+0xa>
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	e7f6      	b.n	8005a3c <memchr+0x4>

08005a4e <memcpy>:
 8005a4e:	2300      	movs	r3, #0
 8005a50:	b510      	push	{r4, lr}
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d100      	bne.n	8005a58 <memcpy+0xa>
 8005a56:	bd10      	pop	{r4, pc}
 8005a58:	5ccc      	ldrb	r4, [r1, r3]
 8005a5a:	54c4      	strb	r4, [r0, r3]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	e7f8      	b.n	8005a52 <memcpy+0x4>

08005a60 <memmove>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	4288      	cmp	r0, r1
 8005a64:	d902      	bls.n	8005a6c <memmove+0xc>
 8005a66:	188b      	adds	r3, r1, r2
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	d303      	bcc.n	8005a74 <memmove+0x14>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e007      	b.n	8005a80 <memmove+0x20>
 8005a70:	5c8b      	ldrb	r3, [r1, r2]
 8005a72:	5483      	strb	r3, [r0, r2]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	d2fb      	bcs.n	8005a70 <memmove+0x10>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	5ccc      	ldrb	r4, [r1, r3]
 8005a7c:	54c4      	strb	r4, [r0, r3]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1fa      	bne.n	8005a7a <memmove+0x1a>
 8005a84:	e7f8      	b.n	8005a78 <memmove+0x18>
	...

08005a88 <_free_r>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	0005      	movs	r5, r0
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	d010      	beq.n	8005ab2 <_free_r+0x2a>
 8005a90:	1f0c      	subs	r4, r1, #4
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da00      	bge.n	8005a9a <_free_r+0x12>
 8005a98:	18e4      	adds	r4, r4, r3
 8005a9a:	0028      	movs	r0, r5
 8005a9c:	f000 f918 	bl	8005cd0 <__malloc_lock>
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <_free_r+0x90>)
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <_free_r+0x2c>
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	6014      	str	r4, [r2, #0]
 8005aac:	0028      	movs	r0, r5
 8005aae:	f000 f917 	bl	8005ce0 <__malloc_unlock>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	d908      	bls.n	8005aca <_free_r+0x42>
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	1860      	adds	r0, r4, r1
 8005abc:	4283      	cmp	r3, r0
 8005abe:	d1f3      	bne.n	8005aa8 <_free_r+0x20>
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	1841      	adds	r1, r0, r1
 8005ac6:	6021      	str	r1, [r4, #0]
 8005ac8:	e7ee      	b.n	8005aa8 <_free_r+0x20>
 8005aca:	001a      	movs	r2, r3
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <_free_r+0x4e>
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d9f9      	bls.n	8005aca <_free_r+0x42>
 8005ad6:	6811      	ldr	r1, [r2, #0]
 8005ad8:	1850      	adds	r0, r2, r1
 8005ada:	42a0      	cmp	r0, r4
 8005adc:	d10b      	bne.n	8005af6 <_free_r+0x6e>
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	1809      	adds	r1, r1, r0
 8005ae2:	1850      	adds	r0, r2, r1
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	d1e0      	bne.n	8005aac <_free_r+0x24>
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	1841      	adds	r1, r0, r1
 8005af0:	6011      	str	r1, [r2, #0]
 8005af2:	6053      	str	r3, [r2, #4]
 8005af4:	e7da      	b.n	8005aac <_free_r+0x24>
 8005af6:	42a0      	cmp	r0, r4
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x78>
 8005afa:	230c      	movs	r3, #12
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	e7d5      	b.n	8005aac <_free_r+0x24>
 8005b00:	6821      	ldr	r1, [r4, #0]
 8005b02:	1860      	adds	r0, r4, r1
 8005b04:	4283      	cmp	r3, r0
 8005b06:	d103      	bne.n	8005b10 <_free_r+0x88>
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	1841      	adds	r1, r0, r1
 8005b0e:	6021      	str	r1, [r4, #0]
 8005b10:	6063      	str	r3, [r4, #4]
 8005b12:	6054      	str	r4, [r2, #4]
 8005b14:	e7ca      	b.n	8005aac <_free_r+0x24>
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	2000021c 	.word	0x2000021c

08005b1c <sbrk_aligned>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4e0f      	ldr	r6, [pc, #60]	; (8005b5c <sbrk_aligned+0x40>)
 8005b20:	000d      	movs	r5, r1
 8005b22:	6831      	ldr	r1, [r6, #0]
 8005b24:	0004      	movs	r4, r0
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d102      	bne.n	8005b30 <sbrk_aligned+0x14>
 8005b2a:	f000 f8bf 	bl	8005cac <_sbrk_r>
 8005b2e:	6030      	str	r0, [r6, #0]
 8005b30:	0029      	movs	r1, r5
 8005b32:	0020      	movs	r0, r4
 8005b34:	f000 f8ba 	bl	8005cac <_sbrk_r>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d00a      	beq.n	8005b52 <sbrk_aligned+0x36>
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	1cc5      	adds	r5, r0, #3
 8005b40:	439d      	bics	r5, r3
 8005b42:	42a8      	cmp	r0, r5
 8005b44:	d007      	beq.n	8005b56 <sbrk_aligned+0x3a>
 8005b46:	1a29      	subs	r1, r5, r0
 8005b48:	0020      	movs	r0, r4
 8005b4a:	f000 f8af 	bl	8005cac <_sbrk_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	d101      	bne.n	8005b56 <sbrk_aligned+0x3a>
 8005b52:	2501      	movs	r5, #1
 8005b54:	426d      	negs	r5, r5
 8005b56:	0028      	movs	r0, r5
 8005b58:	bd70      	pop	{r4, r5, r6, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	20000220 	.word	0x20000220

08005b60 <_malloc_r>:
 8005b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b62:	2203      	movs	r2, #3
 8005b64:	1ccb      	adds	r3, r1, #3
 8005b66:	4393      	bics	r3, r2
 8005b68:	3308      	adds	r3, #8
 8005b6a:	0006      	movs	r6, r0
 8005b6c:	001f      	movs	r7, r3
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d232      	bcs.n	8005bd8 <_malloc_r+0x78>
 8005b72:	270c      	movs	r7, #12
 8005b74:	42b9      	cmp	r1, r7
 8005b76:	d831      	bhi.n	8005bdc <_malloc_r+0x7c>
 8005b78:	0030      	movs	r0, r6
 8005b7a:	f000 f8a9 	bl	8005cd0 <__malloc_lock>
 8005b7e:	4d32      	ldr	r5, [pc, #200]	; (8005c48 <_malloc_r+0xe8>)
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	001c      	movs	r4, r3
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d12e      	bne.n	8005be6 <_malloc_r+0x86>
 8005b88:	0039      	movs	r1, r7
 8005b8a:	0030      	movs	r0, r6
 8005b8c:	f7ff ffc6 	bl	8005b1c <sbrk_aligned>
 8005b90:	0004      	movs	r4, r0
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	d11e      	bne.n	8005bd4 <_malloc_r+0x74>
 8005b96:	682c      	ldr	r4, [r5, #0]
 8005b98:	0025      	movs	r5, r4
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	d14a      	bne.n	8005c34 <_malloc_r+0xd4>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	0029      	movs	r1, r5
 8005ba2:	18e3      	adds	r3, r4, r3
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	f000 f880 	bl	8005cac <_sbrk_r>
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	d143      	bne.n	8005c3a <_malloc_r+0xda>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	3703      	adds	r7, #3
 8005bb6:	1aff      	subs	r7, r7, r3
 8005bb8:	2303      	movs	r3, #3
 8005bba:	439f      	bics	r7, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	2f0c      	cmp	r7, #12
 8005bc0:	d200      	bcs.n	8005bc4 <_malloc_r+0x64>
 8005bc2:	270c      	movs	r7, #12
 8005bc4:	0039      	movs	r1, r7
 8005bc6:	0030      	movs	r0, r6
 8005bc8:	f7ff ffa8 	bl	8005b1c <sbrk_aligned>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d034      	beq.n	8005c3a <_malloc_r+0xda>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	19df      	adds	r7, r3, r7
 8005bd4:	6027      	str	r7, [r4, #0]
 8005bd6:	e013      	b.n	8005c00 <_malloc_r+0xa0>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dacb      	bge.n	8005b74 <_malloc_r+0x14>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	2500      	movs	r5, #0
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	0028      	movs	r0, r5
 8005be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	1bd1      	subs	r1, r2, r7
 8005bea:	d420      	bmi.n	8005c2e <_malloc_r+0xce>
 8005bec:	290b      	cmp	r1, #11
 8005bee:	d917      	bls.n	8005c20 <_malloc_r+0xc0>
 8005bf0:	19e2      	adds	r2, r4, r7
 8005bf2:	6027      	str	r7, [r4, #0]
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d111      	bne.n	8005c1c <_malloc_r+0xbc>
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	6053      	str	r3, [r2, #4]
 8005c00:	0030      	movs	r0, r6
 8005c02:	0025      	movs	r5, r4
 8005c04:	f000 f86c 	bl	8005ce0 <__malloc_unlock>
 8005c08:	2207      	movs	r2, #7
 8005c0a:	350b      	adds	r5, #11
 8005c0c:	1d23      	adds	r3, r4, #4
 8005c0e:	4395      	bics	r5, r2
 8005c10:	1aea      	subs	r2, r5, r3
 8005c12:	429d      	cmp	r5, r3
 8005c14:	d0e5      	beq.n	8005be2 <_malloc_r+0x82>
 8005c16:	1b5b      	subs	r3, r3, r5
 8005c18:	50a3      	str	r3, [r4, r2]
 8005c1a:	e7e2      	b.n	8005be2 <_malloc_r+0x82>
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e7ec      	b.n	8005bfa <_malloc_r+0x9a>
 8005c20:	6862      	ldr	r2, [r4, #4]
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	d101      	bne.n	8005c2a <_malloc_r+0xca>
 8005c26:	602a      	str	r2, [r5, #0]
 8005c28:	e7ea      	b.n	8005c00 <_malloc_r+0xa0>
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	e7e8      	b.n	8005c00 <_malloc_r+0xa0>
 8005c2e:	0023      	movs	r3, r4
 8005c30:	6864      	ldr	r4, [r4, #4]
 8005c32:	e7a7      	b.n	8005b84 <_malloc_r+0x24>
 8005c34:	002c      	movs	r4, r5
 8005c36:	686d      	ldr	r5, [r5, #4]
 8005c38:	e7af      	b.n	8005b9a <_malloc_r+0x3a>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	0030      	movs	r0, r6
 8005c3e:	6033      	str	r3, [r6, #0]
 8005c40:	f000 f84e 	bl	8005ce0 <__malloc_unlock>
 8005c44:	e7cd      	b.n	8005be2 <_malloc_r+0x82>
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	2000021c 	.word	0x2000021c

08005c4c <_realloc_r>:
 8005c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4e:	0007      	movs	r7, r0
 8005c50:	000e      	movs	r6, r1
 8005c52:	0014      	movs	r4, r2
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d105      	bne.n	8005c64 <_realloc_r+0x18>
 8005c58:	0011      	movs	r1, r2
 8005c5a:	f7ff ff81 	bl	8005b60 <_malloc_r>
 8005c5e:	0005      	movs	r5, r0
 8005c60:	0028      	movs	r0, r5
 8005c62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d103      	bne.n	8005c70 <_realloc_r+0x24>
 8005c68:	f7ff ff0e 	bl	8005a88 <_free_r>
 8005c6c:	0025      	movs	r5, r4
 8005c6e:	e7f7      	b.n	8005c60 <_realloc_r+0x14>
 8005c70:	f000 f83e 	bl	8005cf0 <_malloc_usable_size_r>
 8005c74:	9001      	str	r0, [sp, #4]
 8005c76:	4284      	cmp	r4, r0
 8005c78:	d803      	bhi.n	8005c82 <_realloc_r+0x36>
 8005c7a:	0035      	movs	r5, r6
 8005c7c:	0843      	lsrs	r3, r0, #1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	d3ee      	bcc.n	8005c60 <_realloc_r+0x14>
 8005c82:	0021      	movs	r1, r4
 8005c84:	0038      	movs	r0, r7
 8005c86:	f7ff ff6b 	bl	8005b60 <_malloc_r>
 8005c8a:	1e05      	subs	r5, r0, #0
 8005c8c:	d0e8      	beq.n	8005c60 <_realloc_r+0x14>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	0022      	movs	r2, r4
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d900      	bls.n	8005c98 <_realloc_r+0x4c>
 8005c96:	001a      	movs	r2, r3
 8005c98:	0031      	movs	r1, r6
 8005c9a:	0028      	movs	r0, r5
 8005c9c:	f7ff fed7 	bl	8005a4e <memcpy>
 8005ca0:	0031      	movs	r1, r6
 8005ca2:	0038      	movs	r0, r7
 8005ca4:	f7ff fef0 	bl	8005a88 <_free_r>
 8005ca8:	e7da      	b.n	8005c60 <_realloc_r+0x14>
	...

08005cac <_sbrk_r>:
 8005cac:	2300      	movs	r3, #0
 8005cae:	b570      	push	{r4, r5, r6, lr}
 8005cb0:	4d06      	ldr	r5, [pc, #24]	; (8005ccc <_sbrk_r+0x20>)
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	0008      	movs	r0, r1
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	f7fc f866 	bl	8001d88 <_sbrk>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d103      	bne.n	8005cc8 <_sbrk_r+0x1c>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d000      	beq.n	8005cc8 <_sbrk_r+0x1c>
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	20000224 	.word	0x20000224

08005cd0 <__malloc_lock>:
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	4802      	ldr	r0, [pc, #8]	; (8005cdc <__malloc_lock+0xc>)
 8005cd4:	f000 f814 	bl	8005d00 <__retarget_lock_acquire_recursive>
 8005cd8:	bd10      	pop	{r4, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	20000228 	.word	0x20000228

08005ce0 <__malloc_unlock>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4802      	ldr	r0, [pc, #8]	; (8005cec <__malloc_unlock+0xc>)
 8005ce4:	f000 f80d 	bl	8005d02 <__retarget_lock_release_recursive>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	20000228 	.word	0x20000228

08005cf0 <_malloc_usable_size_r>:
 8005cf0:	1f0b      	subs	r3, r1, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	1f18      	subs	r0, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da01      	bge.n	8005cfe <_malloc_usable_size_r+0xe>
 8005cfa:	580b      	ldr	r3, [r1, r0]
 8005cfc:	18c0      	adds	r0, r0, r3
 8005cfe:	4770      	bx	lr

08005d00 <__retarget_lock_acquire_recursive>:
 8005d00:	4770      	bx	lr

08005d02 <__retarget_lock_release_recursive>:
 8005d02:	4770      	bx	lr

08005d04 <_init>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr

08005d10 <_fini>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr
