
rdss_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065bc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e8  080068e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f0  080068f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08006968  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08006968  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fec  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ba  00000000  00000000  00034084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00037140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001850c  00000000  00000000  00038f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142a1  00000000  00000000  00051424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f15a  00000000  00000000  000656c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f481f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a98  00000000  00000000  000f4870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800665c 	.word	0x0800665c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	0800665c 	.word	0x0800665c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_uldivmod>:
 8000410:	2b00      	cmp	r3, #0
 8000412:	d111      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000414:	2a00      	cmp	r2, #0
 8000416:	d10f      	bne.n	8000438 <__aeabi_uldivmod+0x28>
 8000418:	2900      	cmp	r1, #0
 800041a:	d100      	bne.n	800041e <__aeabi_uldivmod+0xe>
 800041c:	2800      	cmp	r0, #0
 800041e:	d002      	beq.n	8000426 <__aeabi_uldivmod+0x16>
 8000420:	2100      	movs	r1, #0
 8000422:	43c9      	mvns	r1, r1
 8000424:	0008      	movs	r0, r1
 8000426:	b407      	push	{r0, r1, r2}
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <__aeabi_uldivmod+0x24>)
 800042a:	a102      	add	r1, pc, #8	; (adr r1, 8000434 <__aeabi_uldivmod+0x24>)
 800042c:	1840      	adds	r0, r0, r1
 800042e:	9002      	str	r0, [sp, #8]
 8000430:	bd03      	pop	{r0, r1, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	ffffffd9 	.word	0xffffffd9
 8000438:	b403      	push	{r0, r1}
 800043a:	4668      	mov	r0, sp
 800043c:	b501      	push	{r0, lr}
 800043e:	9802      	ldr	r0, [sp, #8]
 8000440:	f000 f806 	bl	8000450 <__udivmoddi4>
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	469e      	mov	lr, r3
 8000448:	b002      	add	sp, #8
 800044a:	bc0c      	pop	{r2, r3}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__udivmoddi4>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	4657      	mov	r7, sl
 8000454:	464e      	mov	r6, r9
 8000456:	4645      	mov	r5, r8
 8000458:	46de      	mov	lr, fp
 800045a:	b5e0      	push	{r5, r6, r7, lr}
 800045c:	0004      	movs	r4, r0
 800045e:	000d      	movs	r5, r1
 8000460:	4692      	mov	sl, r2
 8000462:	4699      	mov	r9, r3
 8000464:	b083      	sub	sp, #12
 8000466:	428b      	cmp	r3, r1
 8000468:	d830      	bhi.n	80004cc <__udivmoddi4+0x7c>
 800046a:	d02d      	beq.n	80004c8 <__udivmoddi4+0x78>
 800046c:	4649      	mov	r1, r9
 800046e:	4650      	mov	r0, sl
 8000470:	f000 f8d8 	bl	8000624 <__clzdi2>
 8000474:	0029      	movs	r1, r5
 8000476:	0006      	movs	r6, r0
 8000478:	0020      	movs	r0, r4
 800047a:	f000 f8d3 	bl	8000624 <__clzdi2>
 800047e:	1a33      	subs	r3, r6, r0
 8000480:	4698      	mov	r8, r3
 8000482:	3b20      	subs	r3, #32
 8000484:	469b      	mov	fp, r3
 8000486:	d433      	bmi.n	80004f0 <__udivmoddi4+0xa0>
 8000488:	465a      	mov	r2, fp
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	4642      	mov	r2, r8
 8000490:	001f      	movs	r7, r3
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	001e      	movs	r6, r3
 8000498:	42af      	cmp	r7, r5
 800049a:	d83a      	bhi.n	8000512 <__udivmoddi4+0xc2>
 800049c:	42af      	cmp	r7, r5
 800049e:	d100      	bne.n	80004a2 <__udivmoddi4+0x52>
 80004a0:	e078      	b.n	8000594 <__udivmoddi4+0x144>
 80004a2:	465b      	mov	r3, fp
 80004a4:	1ba4      	subs	r4, r4, r6
 80004a6:	41bd      	sbcs	r5, r7
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da00      	bge.n	80004ae <__udivmoddi4+0x5e>
 80004ac:	e075      	b.n	800059a <__udivmoddi4+0x14a>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2300      	movs	r3, #0
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	465a      	mov	r2, fp
 80004ba:	4093      	lsls	r3, r2
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	4642      	mov	r2, r8
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	e028      	b.n	800051a <__udivmoddi4+0xca>
 80004c8:	4282      	cmp	r2, r0
 80004ca:	d9cf      	bls.n	800046c <__udivmoddi4+0x1c>
 80004cc:	2200      	movs	r2, #0
 80004ce:	2300      	movs	r3, #0
 80004d0:	9200      	str	r2, [sp, #0]
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <__udivmoddi4+0x8e>
 80004da:	601c      	str	r4, [r3, #0]
 80004dc:	605d      	str	r5, [r3, #4]
 80004de:	9800      	ldr	r0, [sp, #0]
 80004e0:	9901      	ldr	r1, [sp, #4]
 80004e2:	b003      	add	sp, #12
 80004e4:	bcf0      	pop	{r4, r5, r6, r7}
 80004e6:	46bb      	mov	fp, r7
 80004e8:	46b2      	mov	sl, r6
 80004ea:	46a9      	mov	r9, r5
 80004ec:	46a0      	mov	r8, r4
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f0:	4642      	mov	r2, r8
 80004f2:	2320      	movs	r3, #32
 80004f4:	1a9b      	subs	r3, r3, r2
 80004f6:	4652      	mov	r2, sl
 80004f8:	40da      	lsrs	r2, r3
 80004fa:	4641      	mov	r1, r8
 80004fc:	0013      	movs	r3, r2
 80004fe:	464a      	mov	r2, r9
 8000500:	408a      	lsls	r2, r1
 8000502:	0017      	movs	r7, r2
 8000504:	4642      	mov	r2, r8
 8000506:	431f      	orrs	r7, r3
 8000508:	4653      	mov	r3, sl
 800050a:	4093      	lsls	r3, r2
 800050c:	001e      	movs	r6, r3
 800050e:	42af      	cmp	r7, r5
 8000510:	d9c4      	bls.n	800049c <__udivmoddi4+0x4c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0d9      	beq.n	80004d4 <__udivmoddi4+0x84>
 8000520:	07fb      	lsls	r3, r7, #31
 8000522:	0872      	lsrs	r2, r6, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4646      	mov	r6, r8
 8000528:	087b      	lsrs	r3, r7, #1
 800052a:	e00e      	b.n	800054a <__udivmoddi4+0xfa>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d101      	bne.n	8000534 <__udivmoddi4+0xe4>
 8000530:	42a2      	cmp	r2, r4
 8000532:	d80c      	bhi.n	800054e <__udivmoddi4+0xfe>
 8000534:	1aa4      	subs	r4, r4, r2
 8000536:	419d      	sbcs	r5, r3
 8000538:	2001      	movs	r0, #1
 800053a:	1924      	adds	r4, r4, r4
 800053c:	416d      	adcs	r5, r5
 800053e:	2100      	movs	r1, #0
 8000540:	3e01      	subs	r6, #1
 8000542:	1824      	adds	r4, r4, r0
 8000544:	414d      	adcs	r5, r1
 8000546:	2e00      	cmp	r6, #0
 8000548:	d006      	beq.n	8000558 <__udivmoddi4+0x108>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d9ee      	bls.n	800052c <__udivmoddi4+0xdc>
 800054e:	3e01      	subs	r6, #1
 8000550:	1924      	adds	r4, r4, r4
 8000552:	416d      	adcs	r5, r5
 8000554:	2e00      	cmp	r6, #0
 8000556:	d1f8      	bne.n	800054a <__udivmoddi4+0xfa>
 8000558:	9800      	ldr	r0, [sp, #0]
 800055a:	9901      	ldr	r1, [sp, #4]
 800055c:	465b      	mov	r3, fp
 800055e:	1900      	adds	r0, r0, r4
 8000560:	4169      	adcs	r1, r5
 8000562:	2b00      	cmp	r3, #0
 8000564:	db24      	blt.n	80005b0 <__udivmoddi4+0x160>
 8000566:	002b      	movs	r3, r5
 8000568:	465a      	mov	r2, fp
 800056a:	4644      	mov	r4, r8
 800056c:	40d3      	lsrs	r3, r2
 800056e:	002a      	movs	r2, r5
 8000570:	40e2      	lsrs	r2, r4
 8000572:	001c      	movs	r4, r3
 8000574:	465b      	mov	r3, fp
 8000576:	0015      	movs	r5, r2
 8000578:	2b00      	cmp	r3, #0
 800057a:	db2a      	blt.n	80005d2 <__udivmoddi4+0x182>
 800057c:	0026      	movs	r6, r4
 800057e:	409e      	lsls	r6, r3
 8000580:	0033      	movs	r3, r6
 8000582:	0026      	movs	r6, r4
 8000584:	4647      	mov	r7, r8
 8000586:	40be      	lsls	r6, r7
 8000588:	0032      	movs	r2, r6
 800058a:	1a80      	subs	r0, r0, r2
 800058c:	4199      	sbcs	r1, r3
 800058e:	9000      	str	r0, [sp, #0]
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	e79f      	b.n	80004d4 <__udivmoddi4+0x84>
 8000594:	42a3      	cmp	r3, r4
 8000596:	d8bc      	bhi.n	8000512 <__udivmoddi4+0xc2>
 8000598:	e783      	b.n	80004a2 <__udivmoddi4+0x52>
 800059a:	4642      	mov	r2, r8
 800059c:	2320      	movs	r3, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	2200      	movs	r2, #0
 80005a4:	9100      	str	r1, [sp, #0]
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	2201      	movs	r2, #1
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	e786      	b.n	80004be <__udivmoddi4+0x6e>
 80005b0:	4642      	mov	r2, r8
 80005b2:	2320      	movs	r3, #32
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	4646      	mov	r6, r8
 80005ba:	409a      	lsls	r2, r3
 80005bc:	0023      	movs	r3, r4
 80005be:	40f3      	lsrs	r3, r6
 80005c0:	4644      	mov	r4, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dad4      	bge.n	800057c <__udivmoddi4+0x12c>
 80005d2:	4642      	mov	r2, r8
 80005d4:	002f      	movs	r7, r5
 80005d6:	2320      	movs	r3, #32
 80005d8:	0026      	movs	r6, r4
 80005da:	4097      	lsls	r7, r2
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	40de      	lsrs	r6, r3
 80005e0:	003b      	movs	r3, r7
 80005e2:	4333      	orrs	r3, r6
 80005e4:	e7cd      	b.n	8000582 <__udivmoddi4+0x132>
 80005e6:	46c0      	nop			; (mov r8, r8)

080005e8 <__clzsi2>:
 80005e8:	211c      	movs	r1, #28
 80005ea:	2301      	movs	r3, #1
 80005ec:	041b      	lsls	r3, r3, #16
 80005ee:	4298      	cmp	r0, r3
 80005f0:	d301      	bcc.n	80005f6 <__clzsi2+0xe>
 80005f2:	0c00      	lsrs	r0, r0, #16
 80005f4:	3910      	subs	r1, #16
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	4298      	cmp	r0, r3
 80005fa:	d301      	bcc.n	8000600 <__clzsi2+0x18>
 80005fc:	0a00      	lsrs	r0, r0, #8
 80005fe:	3908      	subs	r1, #8
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	4298      	cmp	r0, r3
 8000604:	d301      	bcc.n	800060a <__clzsi2+0x22>
 8000606:	0900      	lsrs	r0, r0, #4
 8000608:	3904      	subs	r1, #4
 800060a:	a202      	add	r2, pc, #8	; (adr r2, 8000614 <__clzsi2+0x2c>)
 800060c:	5c10      	ldrb	r0, [r2, r0]
 800060e:	1840      	adds	r0, r0, r1
 8000610:	4770      	bx	lr
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	02020304 	.word	0x02020304
 8000618:	01010101 	.word	0x01010101
	...

08000624 <__clzdi2>:
 8000624:	b510      	push	{r4, lr}
 8000626:	2900      	cmp	r1, #0
 8000628:	d103      	bne.n	8000632 <__clzdi2+0xe>
 800062a:	f7ff ffdd 	bl	80005e8 <__clzsi2>
 800062e:	3020      	adds	r0, #32
 8000630:	e002      	b.n	8000638 <__clzdi2+0x14>
 8000632:	0008      	movs	r0, r1
 8000634:	f7ff ffd8 	bl	80005e8 <__clzsi2>
 8000638:	bd10      	pop	{r4, pc}
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	000a      	movs	r2, r1
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <readRegister+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0018      	movs	r0, r3
 8000652:	f003 f8dc 	bl	800380e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f002 f92e 	bl	80028b8 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 800065c:	1cf9      	adds	r1, r7, #3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2201      	movs	r2, #1
 8000664:	f003 ffd4 	bl	8004610 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000668:	240f      	movs	r4, #15
 800066a:	1939      	adds	r1, r7, r4
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	2201      	movs	r2, #1
 8000672:	f004 f925 	bl	80048c0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f002 f91e 	bl	80028b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <readRegister+0x58>)
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	0018      	movs	r0, r3
 8000684:	f003 f8c3 	bl	800380e <HAL_GPIO_WritePin>
	return rec;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	781b      	ldrb	r3, [r3, #0]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b005      	add	sp, #20
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	50000400 	.word	0x50000400

08000698 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	0008      	movs	r0, r1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	0019      	movs	r1, r3
 80006a6:	240b      	movs	r4, #11
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	1c02      	adds	r2, r0, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	230a      	movs	r3, #10
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	1c0a      	adds	r2, r1, #0
 80006b4:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 80006b6:	2510      	movs	r5, #16
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	3304      	adds	r3, #4
 80006c0:	221a      	movs	r2, #26
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f005 fb57 	bl	8005d78 <memset>
	tx_data[0] = address | 0x80;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4252      	negs	r2, r2
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80006de:	2301      	movs	r3, #1
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
 80006e2:	e00f      	b.n	8000704 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 80006e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	637a      	str	r2, [r7, #52]	; 0x34
 80006ea:	001a      	movs	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	189b      	adds	r3, r3, r2
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	2310      	movs	r3, #16
 80006f4:	18fa      	adds	r2, r7, r3
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	18d3      	adds	r3, r2, r3
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3301      	adds	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
 8000704:	240a      	movs	r4, #10
 8000706:	193b      	adds	r3, r7, r4
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800070c:	429a      	cmp	r2, r3
 800070e:	dde9      	ble.n	80006e4 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <writeRegister+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f003 f879 	bl	800380e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	2110      	movs	r1, #16
 800072c:	1879      	adds	r1, r7, r1
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f003 ff6e 	bl	8004610 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <writeRegister+0xbc>)
 8000736:	2201      	movs	r2, #1
 8000738:	2101      	movs	r1, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f003 f867 	bl	800380e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f002 f8b9 	bl	80028b8 <HAL_Delay>
	return cmd;  // pull the pin high
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b00e      	add	sp, #56	; 0x38
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	50000400 	.word	0x50000400

08000758 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	0b51      	lsrs	r1, r2, #13
 8000768:	04dd      	lsls	r5, r3, #19
 800076a:	430d      	orrs	r5, r1
 800076c:	04d4      	lsls	r4, r2, #19
 800076e:	4a20      	ldr	r2, [pc, #128]	; (80007f0 <setRFFrequency+0x98>)
 8000770:	2300      	movs	r3, #0
 8000772:	0020      	movs	r0, r4
 8000774:	0029      	movs	r1, r5
 8000776:	f7ff fe4b 	bl	8000410 <__aeabi_uldivmod>
 800077a:	0002      	movs	r2, r0
 800077c:	000b      	movs	r3, r1
 800077e:	623a      	str	r2, [r7, #32]
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	6a3a      	ldr	r2, [r7, #32]
 8000788:	0c12      	lsrs	r2, r2, #16
 800078a:	60ba      	str	r2, [r7, #8]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	431a      	orrs	r2, r3
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	7a3a      	ldrb	r2, [r7, #8]
 800079a:	210c      	movs	r1, #12
 800079c:	2010      	movs	r0, #16
 800079e:	180b      	adds	r3, r1, r0
 80007a0:	19db      	adds	r3, r3, r7
 80007a2:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	061b      	lsls	r3, r3, #24
 80007a8:	6a3a      	ldr	r2, [r7, #32]
 80007aa:	0a12      	lsrs	r2, r2, #8
 80007ac:	603a      	str	r2, [r7, #0]
 80007ae:	683a      	ldr	r2, [r7, #0]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	603a      	str	r2, [r7, #0]
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	783a      	ldrb	r2, [r7, #0]
 80007bc:	180b      	adds	r3, r1, r0
 80007be:	19db      	adds	r3, r3, r7
 80007c0:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c2:	6a3a      	ldr	r2, [r7, #32]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	1c13      	adds	r3, r2, #0
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	0004      	movs	r4, r0
 80007cc:	180b      	adds	r3, r1, r0
 80007ce:	19db      	adds	r3, r3, r7
 80007d0:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	2394      	movs	r3, #148	; 0x94
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	58d0      	ldr	r0, [r2, r3]
 80007da:	190b      	adds	r3, r1, r4
 80007dc:	19da      	adds	r2, r3, r7
 80007de:	2303      	movs	r3, #3
 80007e0:	2106      	movs	r1, #6
 80007e2:	f7ff ff59 	bl	8000698 <writeRegister>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b00a      	add	sp, #40	; 0x28
 80007ec:	bdb0      	pop	{r4, r5, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	01e84800 	.word	0x01e84800

080007f4 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	2394      	movs	r3, #148	; 0x94
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	58d0      	ldr	r0, [r2, r3]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3310      	adds	r3, #16
 8000808:	001a      	movs	r2, r3
 800080a:	2301      	movs	r3, #1
 800080c:	2109      	movs	r1, #9
 800080e:	f7ff ff43 	bl	8000698 <writeRegister>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	2394      	movs	r3, #148	; 0x94
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	58d0      	ldr	r0, [r2, r3]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3316      	adds	r3, #22
 800082e:	001a      	movs	r2, r3
 8000830:	2301      	movs	r3, #1
 8000832:	2139      	movs	r1, #57	; 0x39
 8000834:	f7ff ff30 	bl	8000698 <writeRegister>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	2394      	movs	r3, #148	; 0x94
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	58d0      	ldr	r0, [r2, r3]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3317      	adds	r3, #23
 8000854:	001a      	movs	r2, r3
 8000856:	2301      	movs	r3, #1
 8000858:	210b      	movs	r1, #11
 800085a:	f7ff ff1d 	bl	8000698 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}

08000866 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	2394      	movs	r3, #148	; 0x94
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	58d0      	ldr	r0, [r2, r3]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	331a      	adds	r3, #26
 800087a:	001a      	movs	r2, r3
 800087c:	2301      	movs	r3, #1
 800087e:	211f      	movs	r1, #31
 8000880:	f7ff ff0a 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	2394      	movs	r3, #148	; 0x94
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	58d0      	ldr	r0, [r2, r3]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	331c      	adds	r3, #28
 8000890:	001a      	movs	r2, r3
 8000892:	2301      	movs	r3, #1
 8000894:	2120      	movs	r1, #32
 8000896:	f7ff feff 	bl	8000698 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	2394      	movs	r3, #148	; 0x94
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	58d0      	ldr	r0, [r2, r3]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	331d      	adds	r3, #29
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	2121      	movs	r1, #33	; 0x21
 80008ac:	f7ff fef4 	bl	8000698 <writeRegister>
			1);
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80008c0:	210f      	movs	r1, #15
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7c9b      	ldrb	r3, [r3, #18]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7cdb      	ldrb	r3, [r3, #19]
 80008d8:	18db      	adds	r3, r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	000c      	movs	r4, r1
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2221      	movs	r2, #33	; 0x21
 80008ee:	5c9a      	ldrb	r2, [r3, r2]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	2394      	movs	r3, #148	; 0x94
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	58d0      	ldr	r0, [r2, r3]
 8000904:	193a      	adds	r2, r7, r4
 8000906:	2301      	movs	r3, #1
 8000908:	211d      	movs	r1, #29
 800090a:	f7ff fec5 	bl	8000698 <writeRegister>

	cmd = module->LoRa_SF << 4;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7c5b      	ldrb	r3, [r3, #17]
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	b2da      	uxtb	r2, r3
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7d1b      	ldrb	r3, [r3, #20]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	b2da      	uxtb	r2, r3
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	b2da      	uxtb	r2, r3
 800092c:	187b      	adds	r3, r7, r1
 800092e:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7eda      	ldrb	r2, [r3, #27]
 8000934:	187b      	adds	r3, r7, r1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	b2da      	uxtb	r2, r3
 800093c:	187b      	adds	r3, r7, r1
 800093e:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2394      	movs	r3, #148	; 0x94
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	58d0      	ldr	r0, [r2, r3]
 8000948:	187a      	adds	r2, r7, r1
 800094a:	2301      	movs	r3, #1
 800094c:	211e      	movs	r1, #30
 800094e:	f7ff fea3 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	2394      	movs	r3, #148	; 0x94
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	58d0      	ldr	r0, [r2, r3]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3319      	adds	r3, #25
 800095e:	001a      	movs	r2, r3
 8000960:	2301      	movs	r3, #1
 8000962:	2126      	movs	r1, #38	; 0x26
 8000964:	f7ff fe98 	bl	8000698 <writeRegister>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b005      	add	sp, #20
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	2394      	movs	r3, #148	; 0x94
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	2131      	movs	r1, #49	; 0x31
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fe5a 	bl	800063c <readRegister>
 8000988:	0003      	movs	r3, r0
 800098a:	001a      	movs	r2, r3
 800098c:	210f      	movs	r1, #15
 800098e:	187b      	adds	r3, r7, r1
 8000990:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2207      	movs	r2, #7
 8000998:	4393      	bics	r3, r2
 800099a:	b2da      	uxtb	r2, r3
 800099c:	187b      	adds	r3, r7, r1
 800099e:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2205      	movs	r2, #5
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2394      	movs	r3, #148	; 0x94
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	58d0      	ldr	r0, [r2, r3]
 80009b6:	000c      	movs	r4, r1
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	2301      	movs	r3, #1
 80009bc:	2131      	movs	r1, #49	; 0x31
 80009be:	f7ff fe6b 	bl	8000698 <writeRegister>
	tmp = 0x0C;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	220c      	movs	r2, #12
 80009c8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	2394      	movs	r3, #148	; 0x94
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	58d0      	ldr	r0, [r2, r3]
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	2301      	movs	r3, #1
 80009d6:	2137      	movs	r1, #55	; 0x37
 80009d8:	f7ff fe5e 	bl	8000698 <writeRegister>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b005      	add	sp, #20
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	2394      	movs	r3, #148	; 0x94
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	58d3      	ldr	r3, [r2, r3]
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe20 	bl	800063c <readRegister>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	2307      	movs	r3, #7
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	000a      	movs	r2, r1
 8000a18:	1cfb      	adds	r3, r7, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000a1c:	1cfb      	adds	r3, r7, #3
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2278      	movs	r2, #120	; 0x78
 8000a22:	4252      	negs	r2, r2
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	210f      	movs	r1, #15
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	2394      	movs	r3, #148	; 0x94
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	58d0      	ldr	r0, [r2, r3]
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f7ff fe2c 	bl	8000698 <writeRegister>
	module->operatingMode = mode;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1cfa      	adds	r2, r7, #3
 8000a44:	2123      	movs	r1, #35	; 0x23
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	545a      	strb	r2, [r3, r1]
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	2394      	movs	r3, #148	; 0x94
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	58d0      	ldr	r0, [r2, r3]
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2112      	movs	r1, #18
 8000a70:	f7ff fe12 	bl	8000698 <writeRegister>
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f002 fe9f 	bl	80037d4 <HAL_GPIO_ReadPin>
 8000a96:	0003      	movs	r3, r0
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	425a      	negs	r2, r3
 8000a9c:	4153      	adcs	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	23a0      	movs	r3, #160	; 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	01c9      	lsls	r1, r1, #7
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	4911      	ldr	r1, [pc, #68]	; (8000b14 <ledInit+0x6c>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <ledInit+0x70>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ledInit+0x70>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <ledInit+0x70>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <ledInit+0x70>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <ledInit+0x70>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ledInit+0x70>)
 8000af0:	2104      	movs	r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <ledInit+0x70>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ledInit+0x70>)
 8000afc:	2108      	movs	r1, #8
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f809 	bl	8000b1c <led_reset>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	ffff7fff 	.word	0xffff7fff
 8000b18:	50000400 	.word	0x50000400

08000b1c <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000b36:	f001 feb5 	bl	80028a4 <HAL_GetTick>
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <USART1_IRQHandler>:
/* USER CODE BEGIN 0 */
UART1_t *uart1_ptr;
Tone_uhf_t *uhf_ptr;
RS485_t *rs485_ptr;

void USART1_IRQHandler(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <USART1_IRQHandler+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 fd65 	bl	8002634 <uart1_read_to_frame>
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000020c 	.word	0x2000020c

08000b74 <setTxBaseParameters>:
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000b7c:	2017      	movs	r0, #23
 8000b7e:	183b      	adds	r3, r7, r0
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000b84:	2416      	movs	r4, #22
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000b8c:	2515      	movs	r5, #21
 8000b8e:	197b      	adds	r3, r7, r5
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000b94:	2614      	movs	r6, #20
 8000b96:	19bb      	adds	r3, r7, r6
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 8000b9c:	2313      	movs	r3, #19
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	701a      	strb	r2, [r3, #0]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 8000ba4:	2212      	movs	r2, #18
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	2240      	movs	r2, #64	; 0x40
 8000baa:	701a      	strb	r2, [r3, #0]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000bac:	2111      	movs	r1, #17
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	701a      	strb	r2, [r3, #0]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	18bb      	adds	r3, r7, r2
 8000bb8:	2210      	movs	r2, #16
 8000bba:	701a      	strb	r2, [r3, #0]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	18bb      	adds	r3, r7, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000bc4:	210e      	movs	r1, #14
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2204      	movs	r2, #4
 8000bca:	701a      	strb	r2, [r3, #0]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000bcc:	220d      	movs	r2, #13
 8000bce:	18bb      	adds	r3, r7, r2
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	701a      	strb	r2, [r3, #0]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000bd4:	210c      	movs	r1, #12
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]

	loraTx->frequency = UPLINK_FREQ;
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	4a3a      	ldr	r2, [pc, #232]	; (8000cc8 <setTxBaseParameters+0x154>)
 8000be0:	2300      	movs	r3, #0
 8000be2:	608a      	str	r2, [r1, #8]
 8000be4:	60cb      	str	r3, [r1, #12]
	loraTx->power = SX1278_POWER_17DBM;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	22fc      	movs	r2, #252	; 0xfc
 8000bea:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	220a      	movs	r2, #10
 8000bf0:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2206      	movs	r2, #6
 8000bf6:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2234      	movs	r2, #52	; 0x34
 8000c08:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2223      	movs	r2, #35	; 0x23
 8000c14:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2204      	movs	r2, #4
 8000c1a:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2208      	movs	r2, #8
 8000c20:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000c2e:	183a      	adds	r2, r7, r0
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	7812      	ldrb	r2, [r2, #0]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	19bb      	adds	r3, r7, r6
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000c4e:	2313      	movs	r3, #19
 8000c50:	18fa      	adds	r2, r7, r3
 8000c52:	2312      	movs	r3, #18
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	2111      	movs	r1, #17
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b2d9      	uxtb	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2220      	movs	r2, #32
 8000c72:	5c9a      	ldrb	r2, [r3, r2]
 8000c74:	2310      	movs	r3, #16
 8000c76:	18f9      	adds	r1, r7, r3
 8000c78:	230f      	movs	r3, #15
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	7809      	ldrb	r1, [r1, #0]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	230e      	movs	r3, #14
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2220      	movs	r2, #32
 8000c96:	5499      	strb	r1, [r3, r2]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	5c9a      	ldrb	r2, [r3, r2]
 8000c9e:	230d      	movs	r3, #13
 8000ca0:	18f9      	adds	r1, r7, r3
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	7809      	ldrb	r1, [r1, #0]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	5499      	strb	r1, [r3, r2]
	loraTx->fhssValue = HOPS_PERIOD;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	779a      	strb	r2, [r3, #30]
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b007      	add	sp, #28
 8000cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	0a21fe80 	.word	0x0a21fe80

08000ccc <saveTx>:

void saveTx(SX1278_t *module) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff fe98 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f001 fdea 	bl	80028b8 <HAL_Delay>
	setRFFrequency(module);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fd36 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fd93 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fd7c 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff fd9e 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	2394      	movs	r3, #148	; 0x94
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	58d0      	ldr	r0, [r2, r3]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3318      	adds	r3, #24
 8000d10:	001a      	movs	r2, r3
 8000d12:	2301      	movs	r3, #1
 8000d14:	210c      	movs	r1, #12
 8000d16:	f7ff fcbf 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7c5b      	ldrb	r3, [r3, #17]
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d10b      	bne.n	8000d3a <saveTx+0x6e>
		module->headerMode = IMPLICIT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2221      	movs	r2, #33	; 0x21
 8000d26:	2101      	movs	r1, #1
 8000d28:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fe1c 	bl	8000970 <setDetectionParameters>
 8000d38:	e006      	b.n	8000d48 <saveTx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2221      	movs	r2, #33	; 0x21
 8000d3e:	2100      	movs	r1, #0
 8000d40:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fdb4 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fd87 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	2394      	movs	r3, #148	; 0x94
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	58d0      	ldr	r0, [r2, r3]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	331e      	adds	r3, #30
 8000d64:	001a      	movs	r2, r3
 8000d66:	2301      	movs	r3, #1
 8000d68:	2124      	movs	r1, #36	; 0x24
 8000d6a:	f7ff fc95 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	2394      	movs	r3, #148	; 0x94
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	58d0      	ldr	r0, [r2, r3]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	331f      	adds	r3, #31
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	f7ff fc8a 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fe63 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	2394      	movs	r3, #148	; 0x94
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	58d0      	ldr	r0, [r2, r3]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3320      	adds	r3, #32
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2111      	movs	r1, #17
 8000d9e:	f7ff fc7b 	bl	8000698 <writeRegister>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}

08000daa <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->packetLength;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7d5a      	ldrb	r2, [r3, #21]
 8000db6:	210f      	movs	r1, #15
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	2394      	movs	r3, #148	; 0x94
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	58d0      	ldr	r0, [r2, r3]
 8000dc4:	187a      	adds	r2, r7, r1
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2122      	movs	r1, #34	; 0x22
 8000dca:	f7ff fc65 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	2394      	movs	r3, #148	; 0x94
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	58d3      	ldr	r3, [r2, r3]
 8000dd6:	210e      	movs	r1, #14
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fc2f 	bl	800063c <readRegister>
 8000dde:	0003      	movs	r3, r0
 8000de0:	001a      	movs	r2, r3
 8000de2:	210e      	movs	r1, #14
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	2394      	movs	r3, #148	; 0x94
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	58d0      	ldr	r0, [r2, r3]
 8000df0:	187a      	adds	r2, r7, r1
 8000df2:	2301      	movs	r3, #1
 8000df4:	210d      	movs	r1, #13
 8000df6:	f7ff fc4f 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	2394      	movs	r3, #148	; 0x94
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	58d3      	ldr	r3, [r2, r3]
 8000e02:	2122      	movs	r1, #34	; 0x22
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff fc19 	bl	800063c <readRegister>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	755a      	strb	r2, [r3, #21]
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <sx1278Reset>:

void sx1278Reset() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <sx1278Reset+0x3c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	2101      	movs	r1, #1
 8000e26:	0018      	movs	r0, r3
 8000e28:	f002 fcf1 	bl	800380e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <sx1278Reset+0x3c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fceb 	bl	800380e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f001 fd3d 	bl	80028b8 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <sx1278Reset+0x3c>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	0018      	movs	r0, r3
 8000e46:	f002 fce2 	bl	800380e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e4a:	2064      	movs	r0, #100	; 0x64
 8000e4c:	f001 fd34 	bl	80028b8 <HAL_Delay>
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	50000400 	.word	0x50000400

08000e5c <transmit>:

int messageCounter = 0;
void transmit(const UART1_t *uart1, SX1278_t *loraTx) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	if (loraTx->status == UNKNOW) {
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2224      	movs	r2, #36	; 0x24
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d118      	bne.n	8000ea2 <transmit+0x46>
		sprintf(uart1->txBuffer, "Configuring Slave LoRa module: Tx Mode\r\n");
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3319      	adds	r3, #25
 8000e74:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <transmit+0x194>)
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f004 ff85 	bl	8005d88 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3319      	adds	r3, #25
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fc1d 	bl	80026c4 <uart1_send_frame>
		setTxBaseParameters(loraTx);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff fe71 	bl	8000b74 <setTxBaseParameters>
		saveTx(loraTx);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff19 	bl	8000ccc <saveTx>
		loraTx->status = TX_READY;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2224      	movs	r2, #36	; 0x24
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	5499      	strb	r1, [r3, r2]
	}
	if (loraTx->status == TX_READY) {
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2224      	movs	r2, #36	; 0x24
 8000ea6:	5c9b      	ldrb	r3, [r3, r2]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d000      	beq.n	8000eae <transmit+0x52>
 8000eac:	e09c      	b.n	8000fe8 <transmit+0x18c>

		memset(loraTx->buffer, 0, sizeof(loraTx->buffer));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3325      	adds	r3, #37	; 0x25
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f004 ff5d 	bl	8005d78 <memset>
		loraTx->packetLength = sprintf((char*) loraTx->buffer, "Hola  Mundo"
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	3325      	adds	r3, #37	; 0x25
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <transmit+0x198>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <transmit+0x19c>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	f004 ff5c 	bl	8005d88 <siprintf>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	755a      	strb	r2, [r3, #21]
				" %d", messageCounter);

		setTxParameters(loraTx);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	0018      	movs	r0, r3
 8000edc:	f7ff ff65 	bl	8000daa <setTxParameters>
		/*uint8_t tmp2[] = "Sending message: ";
		size_t len2 = strlen(tmp2);
		HAL_UART_Transmit(&huart1, tmp2, len2, 100);
		HAL_UART_Transmit(&huart1, loraTx->buffer, loraTx->packetLength, 100);*/
		sprintf(uart1->txBuffer, "sending message: %s", loraTx->buffer);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3319      	adds	r3, #25
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	3325      	adds	r3, #37	; 0x25
 8000eea:	001a      	movs	r2, r3
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <transmit+0x1a0>)
 8000eee:	0019      	movs	r1, r3
 8000ef0:	f004 ff4a 	bl	8005d88 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3319      	adds	r3, #25
 8000ef8:	2164      	movs	r1, #100	; 0x64
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fbe2 	bl	80026c4 <uart1_send_frame>

		for (int i = 0; i < loraTx->packetLength; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	e014      	b.n	8000f30 <transmit+0xd4>
			char data = loraTx->buffer[i];
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	2125      	movs	r1, #37	; 0x25
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	18d3      	adds	r3, r2, r3
 8000f0e:	185b      	adds	r3, r3, r1
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	210f      	movs	r1, #15
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	701a      	strb	r2, [r3, #0]
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	2394      	movs	r3, #148	; 0x94
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	58d0      	ldr	r0, [r2, r3]
 8000f20:	187a      	adds	r2, r7, r1
 8000f22:	2301      	movs	r3, #1
 8000f24:	2100      	movs	r1, #0
 8000f26:	f7ff fbb7 	bl	8000698 <writeRegister>
		for (int i = 0; i < loraTx->packetLength; i++) {
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	7d5b      	ldrb	r3, [r3, #21]
 8000f34:	001a      	movs	r2, r3
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	dbe4      	blt.n	8000f06 <transmit+0xaa>
		}
		updateLoraLowFreq(loraTx, TX);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff fd64 	bl	8000a0e <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8000f46:	f001 fcad 	bl	80028a4 <HAL_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	61bb      	str	r3, [r7, #24]
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fd92 	bl	8000a7c <SX1278_hw_GetDIO0>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d028      	beq.n	8000fae <transmit+0x152>
				int timeEnd = HAL_GetTick();
 8000f5c:	f001 fca2 	bl	80028a4 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	617b      	str	r3, [r7, #20]
				int tiempoTransmision = timeEnd - timeStart;
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	613b      	str	r3, [r7, #16]
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	2394      	movs	r3, #148	; 0x94
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	58d3      	ldr	r3, [r2, r3]
 8000f74:	2112      	movs	r1, #18
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff fb60 	bl	800063c <readRegister>
				clearIrqFlags(loraTx);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fd67 	bl	8000a52 <clearIrqFlags>
				sprintf(uart1->txBuffer, "- Tx Ok: %d ms %d bytes\n", tiempoTransmision, loraTx->packetLength);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3319      	adds	r3, #25
 8000f88:	0018      	movs	r0, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	7d5b      	ldrb	r3, [r3, #21]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	491b      	ldr	r1, [pc, #108]	; (8001000 <transmit+0x1a4>)
 8000f92:	f004 fef9 	bl	8005d88 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3319      	adds	r3, #25
 8000f9a:	2164      	movs	r1, #100	; 0x64
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 fb91 	bl	80026c4 <uart1_send_frame>
				messageCounter += 1;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <transmit+0x198>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <transmit+0x198>)
 8000faa:	601a      	str	r2, [r3, #0]
				return;
 8000fac:	e01c      	b.n	8000fe8 <transmit+0x18c>
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000fae:	f001 fc79 	bl	80028a4 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad2      	subs	r2, r2, r3
 8000fb8:	23fa      	movs	r3, #250	; 0xfa
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d90f      	bls.n	8000fe0 <transmit+0x184>
				sx1278Reset();
 8000fc0:	f7ff ff2c 	bl	8000e1c <sx1278Reset>
				sprintf(uart1->txBuffer, "EntryTx failed, timeout reset!\r\n");
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3319      	adds	r3, #25
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <transmit+0x1a8>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f004 fedb 	bl	8005d88 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3319      	adds	r3, #25
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 fb73 	bl	80026c4 <uart1_send_frame>

				return;
 8000fde:	e003      	b.n	8000fe8 <transmit+0x18c>
			}

			HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 fc69 	bl	80028b8 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000fe6:	e7b2      	b.n	8000f4e <transmit+0xf2>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b008      	add	sp, #32
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	08006674 	.word	0x08006674
 8000ff4:	2000021c 	.word	0x2000021c
 8000ff8:	080066a0 	.word	0x080066a0
 8000ffc:	080066b0 	.word	0x080066b0
 8001000:	080066c4 	.word	0x080066c4
 8001004:	080066e0 	.word	0x080066e0

08001008 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8001010:	200f      	movs	r0, #15
 8001012:	183b      	adds	r3, r7, r0
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8001018:	240e      	movs	r4, #14
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8001020:	250d      	movs	r5, #13
 8001022:	197b      	adds	r3, r7, r5
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8001028:	260c      	movs	r6, #12
 800102a:	19bb      	adds	r3, r7, r6
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	////////////////////////////////////////
	loraRx->frequency = DOWNLINK_FREQ;
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4a2c      	ldr	r2, [pc, #176]	; (80010e4 <setRxBaseParameters+0xdc>)
 8001034:	2300      	movs	r3, #0
 8001036:	608a      	str	r2, [r1, #8]
 8001038:	60cb      	str	r3, [r1, #12]
	loraRx->power = SX1278_POWER_17DBM;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	22fc      	movs	r2, #252	; 0xfc
 800103e:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	220a      	movs	r2, #10
 8001044:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2206      	movs	r2, #6
 800104a:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	220b      	movs	r2, #11
 8001062:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2223      	movs	r2, #35	; 0x23
 8001068:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2204      	movs	r2, #4
 800106e:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2208      	movs	r2, #8
 8001074:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2208      	movs	r2, #8
 8001080:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8001082:	183a      	adds	r2, r7, r0
 8001084:	193b      	adds	r3, r7, r4
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	b2da      	uxtb	r2, r3
 800108e:	197b      	adds	r3, r7, r5
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	b2da      	uxtb	r2, r3
 8001096:	19bb      	adds	r3, r7, r6
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4313      	orrs	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	21ff      	movs	r1, #255	; 0xff
 80010a8:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2220      	movs	r2, #32
 80010ae:	5c9b      	ldrb	r3, [r3, r2]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	4393      	bics	r3, r2
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2220      	movs	r2, #32
 80010ba:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	5c9b      	ldrb	r3, [r3, r2]
 80010c2:	2220      	movs	r2, #32
 80010c4:	4393      	bics	r3, r2
 80010c6:	b2d9      	uxtb	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2220      	movs	r2, #32
 80010cc:	5499      	strb	r1, [r3, r2]

	loraRx->fhssValue = HOPS_PERIOD;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	779a      	strb	r2, [r3, #30]
	loraRx->packetLength = SX1278_MAX_PACKET;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	755a      	strb	r2, [r3, #21]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b005      	add	sp, #20
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	08f0d180 	.word	0x08f0d180

080010e8 <saveRx>:

void saveRx(SX1278_t *module) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2100      	movs	r1, #0
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff fc8a 	bl	8000a0e <updateLoraLowFreq>
	HAL_Delay(15);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f001 fbdc 	bl	80028b8 <HAL_Delay>
	setRFFrequency(module);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff fb28 	bl	8000758 <setRFFrequency>
	setLORAWAN(module);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff fb85 	bl	800081a <setLORAWAN>
	setOutputPower(module);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fb6e 	bl	80007f4 <setOutputPower>
	setOvercurrentProtect(module);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fb90 	bl	8000840 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	2394      	movs	r3, #148	; 0x94
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	58d0      	ldr	r0, [r2, r3]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3318      	adds	r3, #24
 800112c:	001a      	movs	r2, r3
 800112e:	2301      	movs	r3, #1
 8001130:	210c      	movs	r1, #12
 8001132:	f7ff fab1 	bl	8000698 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7c5b      	ldrb	r3, [r3, #17]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d10b      	bne.n	8001156 <saveRx+0x6e>
		module->headerMode = IMPLICIT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2221      	movs	r2, #33	; 0x21
 8001142:	2101      	movs	r1, #1
 8001144:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fc0e 	bl	8000970 <setDetectionParameters>
 8001154:	e006      	b.n	8001164 <saveRx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2221      	movs	r2, #33	; 0x21
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fba6 	bl	80008b8 <setReModemConfig>
	setPreambleParameters(module);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff fb79 	bl	8000866 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	2394      	movs	r3, #148	; 0x94
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	58d0      	ldr	r0, [r2, r3]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	331e      	adds	r3, #30
 8001180:	001a      	movs	r2, r3
 8001182:	2301      	movs	r3, #1
 8001184:	2124      	movs	r1, #36	; 0x24
 8001186:	f7ff fa87 	bl	8000698 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	2394      	movs	r3, #148	; 0x94
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	58d0      	ldr	r0, [r2, r3]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	331f      	adds	r3, #31
 8001196:	001a      	movs	r2, r3
 8001198:	2301      	movs	r3, #1
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	f7ff fa7c 	bl	8000698 <writeRegister>
	clearIrqFlags(module);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fc55 	bl	8000a52 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	2394      	movs	r3, #148	; 0x94
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	58d0      	ldr	r0, [r2, r3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3320      	adds	r3, #32
 80011b4:	001a      	movs	r2, r3
 80011b6:	2301      	movs	r3, #1
 80011b8:	2111      	movs	r1, #17
 80011ba:	f7ff fa6d 	bl	8000698 <writeRegister>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2100      	movs	r1, #0
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fc1b 	bl	8000a0e <updateLoraLowFreq>
	uint8_t cmd = module->packetLength;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7d5a      	ldrb	r2, [r3, #21]
 80011dc:	210f      	movs	r1, #15
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	2394      	movs	r3, #148	; 0x94
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	58d0      	ldr	r0, [r2, r3]
 80011ea:	187a      	adds	r2, r7, r1
 80011ec:	2301      	movs	r3, #1
 80011ee:	2122      	movs	r1, #34	; 0x22
 80011f0:	f7ff fa52 	bl	8000698 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	2394      	movs	r3, #148	; 0x94
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	58d3      	ldr	r3, [r2, r3]
 80011fc:	210f      	movs	r1, #15
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff fa1c 	bl	800063c <readRegister>
 8001204:	0003      	movs	r3, r0
 8001206:	001a      	movs	r2, r3
 8001208:	210e      	movs	r1, #14
 800120a:	187b      	adds	r3, r7, r1
 800120c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	2394      	movs	r3, #148	; 0x94
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	58d0      	ldr	r0, [r2, r3]
 8001216:	187a      	adds	r2, r7, r1
 8001218:	2301      	movs	r3, #1
 800121a:	210d      	movs	r1, #13
 800121c:	f7ff fa3c 	bl	8000698 <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	2394      	movs	r3, #148	; 0x94
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	58d3      	ldr	r3, [r2, r3]
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fa06 	bl	800063c <readRegister>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	755a      	strb	r2, [r3, #21]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	5c9b      	ldrb	r3, [r3, r2]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d107      	bne.n	8001262 <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, sizeof(loraRx->buffer));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3325      	adds	r3, #37	; 0x25
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	2100      	movs	r1, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f004 fd8b 	bl	8005d78 <memset>
	}
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <waitForRxDone>:

void waitForRxDone(SX1278_t *loraRx) {
 800126a:	b5b0      	push	{r4, r5, r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001272:	e02e      	b.n	80012d2 <waitForRxDone+0x68>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	2394      	movs	r3, #148	; 0x94
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	58d3      	ldr	r3, [r2, r3]
 800127c:	250f      	movs	r5, #15
 800127e:	197c      	adds	r4, r7, r5
 8001280:	2112      	movs	r1, #18
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff f9da 	bl	800063c <readRegister>
 8001288:	0003      	movs	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 800128c:	002c      	movs	r4, r5
 800128e:	193b      	adds	r3, r7, r4
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2220      	movs	r2, #32
 8001294:	4013      	ands	r3, r2
 8001296:	d01c      	beq.n	80012d2 <waitForRxDone+0x68>
			uint8_t cmd = flags | (1 << 7);
 8001298:	193b      	adds	r3, r7, r4
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	4252      	negs	r2, r2
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	210e      	movs	r1, #14
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	701a      	strb	r2, [r3, #0]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	2394      	movs	r3, #148	; 0x94
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	58d0      	ldr	r0, [r2, r3]
 80012b2:	187a      	adds	r2, r7, r1
 80012b4:	2301      	movs	r3, #1
 80012b6:	2112      	movs	r1, #18
 80012b8:	f7ff f9ee 	bl	8000698 <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	2394      	movs	r3, #148	; 0x94
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	58d3      	ldr	r3, [r2, r3]
 80012c4:	193c      	adds	r4, r7, r4
 80012c6:	2112      	movs	r1, #18
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff f9b7 	bl	800063c <readRegister>
 80012ce:	0003      	movs	r3, r0
 80012d0:	7023      	strb	r3, [r4, #0]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7ff fbd0 	bl	8000a7c <SX1278_hw_GetDIO0>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d0c9      	beq.n	8001274 <waitForRxDone+0xa>
		}
	}
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012ec <configInit>:

void configInit(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	uint8_t tmp[] = "Configuring Slave LoRa module: Rx Mode\r\n";
 80012f6:	2008      	movs	r0, #8
 80012f8:	183b      	adds	r3, r7, r0
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <configInit+0x68>)
 80012fc:	ca32      	ldmia	r2!, {r1, r4, r5}
 80012fe:	c332      	stmia	r3!, {r1, r4, r5}
 8001300:	ca32      	ldmia	r2!, {r1, r4, r5}
 8001302:	c332      	stmia	r3!, {r1, r4, r5}
 8001304:	ca32      	ldmia	r2!, {r1, r4, r5}
 8001306:	c332      	stmia	r3!, {r1, r4, r5}
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	6019      	str	r1, [r3, #0]
 800130c:	7912      	ldrb	r2, [r2, #4]
 800130e:	711a      	strb	r2, [r3, #4]
	size_t len = strlen(tmp);
 8001310:	0004      	movs	r4, r0
 8001312:	183b      	adds	r3, r7, r0
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe fef3 	bl	8000100 <strlen>
 800131a:	0003      	movs	r3, r0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_UART_Transmit(&*huart1, tmp, len, 100);
 800131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001320:	b29a      	uxth	r2, r3
 8001322:	1939      	adds	r1, r7, r4
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	2364      	movs	r3, #100	; 0x64
 8001328:	f004 f812 	bl	8005350 <HAL_UART_Transmit>
	setRxBaseParameters(&*loraRx);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fe6a 	bl	8001008 <setRxBaseParameters>
	saveRx(loraRx);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff fed6 	bl	80010e8 <saveRx>
	loraRx->status = RX_READY;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2224      	movs	r2, #36	; 0x24
 8001340:	2102      	movs	r1, #2
 8001342:	5499      	strb	r1, [r3, r2]
	setRxParameters(loraRx);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff3d 	bl	80011c6 <setRxParameters>
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b00e      	add	sp, #56	; 0x38
 8001352:	bdb0      	pop	{r4, r5, r7, pc}
 8001354:	08006704 	.word	0x08006704

08001358 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	2394      	movs	r3, #148	; 0x94
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	58d3      	ldr	r3, [r2, r3]
 8001368:	2517      	movs	r5, #23
 800136a:	197c      	adds	r4, r7, r5
 800136c:	2112      	movs	r1, #18
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff f964 	bl	800063c <readRegister>
 8001374:	0003      	movs	r3, r0
 8001376:	7023      	strb	r3, [r4, #0]
	SET_BIT(flags2, RX_DONE_MASK);
 8001378:	0028      	movs	r0, r5
 800137a:	183b      	adds	r3, r7, r0
 800137c:	183a      	adds	r2, r7, r0
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	430a      	orrs	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = flags2;
 8001386:	210f      	movs	r1, #15
 8001388:	187b      	adds	r3, r7, r1
 800138a:	183a      	adds	r2, r7, r0
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	701a      	strb	r2, [r3, #0]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	2394      	movs	r3, #148	; 0x94
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	58d0      	ldr	r0, [r2, r3]
 8001398:	187a      	adds	r2, r7, r1
 800139a:	2301      	movs	r3, #1
 800139c:	2112      	movs	r1, #18
 800139e:	f7ff f97b 	bl	8000698 <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	2394      	movs	r3, #148	; 0x94
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	2516      	movs	r5, #22
 80013ac:	197c      	adds	r4, r7, r5
 80013ae:	2112      	movs	r1, #18
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff f943 	bl	800063c <readRegister>
 80013b6:	0003      	movs	r3, r0
 80013b8:	7023      	strb	r3, [r4, #0]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 80013ba:	197b      	adds	r3, r7, r5
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2220      	movs	r2, #32
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
	return errorActivation;
 80013c4:	693b      	ldr	r3, [r7, #16]
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b006      	add	sp, #24
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080013d0 <getLoraPacket>:

void getLoraPacket(SX1278_t *loraRx) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	loraRx->packetLength = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	2394      	movs	r3, #148	; 0x94
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	58d3      	ldr	r3, [r2, r3]
 80013e0:	2113      	movs	r1, #19
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff f92a 	bl	800063c <readRegister>
 80013e8:	0003      	movs	r3, r0
 80013ea:	001a      	movs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 80013f0:	240f      	movs	r4, #15
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <getLoraPacket+0x80>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	2101      	movs	r1, #1
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 fa05 	bl	800380e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f001 fa57 	bl	80028b8 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100); // send address
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	2394      	movs	r3, #148	; 0x94
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	58d0      	ldr	r0, [r2, r3]
 8001412:	1939      	adds	r1, r7, r4
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	2201      	movs	r2, #1
 8001418:	f003 f8fa 	bl	8004610 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->packetLength, 100); // receive 6 bytes data
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	2394      	movs	r3, #148	; 0x94
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	58d0      	ldr	r0, [r2, r3]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3325      	adds	r3, #37	; 0x25
 8001428:	0019      	movs	r1, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7d5b      	ldrb	r3, [r3, #21]
 800142e:	b29a      	uxth	r2, r3
 8001430:	2364      	movs	r3, #100	; 0x64
 8001432:	f003 fa45 	bl	80048c0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 fa3e 	bl	80028b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <getLoraPacket+0x80>)
 800143e:	2201      	movs	r2, #1
 8001440:	2101      	movs	r1, #1
 8001442:	0018      	movs	r0, r3
 8001444:	f002 f9e3 	bl	800380e <HAL_GPIO_WritePin>
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b005      	add	sp, #20
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	50000400 	.word	0x50000400

08001454 <printParameters>:

void printParameters(int timeRx, UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart1, loraRx->buffer, loraRx->packetLength, 100);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3325      	adds	r3, #37	; 0x25
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7d5b      	ldrb	r3, [r3, #21]
 800146a:	b29a      	uxth	r2, r3
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	f003 ff6e 	bl	8005350 <HAL_UART_Transmit>
	uint8_t largo = sprintf((char*) loraRx->buffer,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3325      	adds	r3, #37	; 0x25
 8001478:	0018      	movs	r0, r3
			" - Rx Ok: %d ms %d bytes\n", timeRx, loraRx->packetLength);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7d5b      	ldrb	r3, [r3, #21]
	uint8_t largo = sprintf((char*) loraRx->buffer,
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	490a      	ldr	r1, [pc, #40]	; (80014ac <printParameters+0x58>)
 8001482:	f004 fc81 	bl	8005d88 <siprintf>
 8001486:	0002      	movs	r2, r0
 8001488:	2017      	movs	r0, #23
 800148a:	183b      	adds	r3, r7, r0
 800148c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart1, loraRx->buffer, largo, 100);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3325      	adds	r3, #37	; 0x25
 8001492:	0019      	movs	r1, r3
 8001494:	183b      	adds	r3, r7, r0
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	f003 ff57 	bl	8005350 <HAL_UART_Transmit>
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b006      	add	sp, #24
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	08006730 	.word	0x08006730

080014b0 <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <read+0x2a>
		configInit(huart1, loraRx);
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff ff0e 	bl	80012ec <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2105      	movs	r1, #5
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fa9a 	bl	8000a0e <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff feaf 	bl	8001240 <clearMemForRx>
	int timeStart = HAL_GetTick();
 80014e2:	f001 f9df 	bl	80028a4 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	617b      	str	r3, [r7, #20]
	waitForRxDone(loraRx);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff febc 	bl	800126a <waitForRxDone>
	int timeEnd = HAL_GetTick();
 80014f2:	f001 f9d7 	bl	80028a4 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff ff27 	bl	8001358 <crcErrorActivation>
 800150a:	0003      	movs	r3, r0
 800150c:	60bb      	str	r3, [r7, #8]
	if (errorActivation == 1) {
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d01c      	beq.n	800154e <read+0x9e>
		return;
	}
	getLoraPacket(loraRx);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff ff5a 	bl	80013d0 <getLoraPacket>
	printParameters(timeRx, huart1, loraRx);
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	0018      	movs	r0, r3
 8001524:	f7ff ff96 	bl	8001454 <printParameters>
	setRxParameters(loraRx);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff fe4b 	bl	80011c6 <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2105      	movs	r1, #5
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff fa6a 	bl	8000a0e <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fa51 	bl	80009e4 <readMode>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2223      	movs	r2, #35	; 0x23
 800154a:	5499      	strb	r1, [r3, r2]
 800154c:	e000      	b.n	8001550 <read+0xa0>
		return;
 800154e:	46c0      	nop			; (mov r8, r8)
}
 8001550:	46bd      	mov	sp, r7
 8001552:	b006      	add	sp, #24
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <modeCmdUpdate>:

bool TX_MODE;
bool RX_MODE;

void modeCmdUpdate(const UART1_t *uart1) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	795b      	ldrb	r3, [r3, #5]
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	001a      	movs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	799b      	ldrb	r3, [r3, #6]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	001a      	movs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	79db      	ldrb	r3, [r3, #7]
 800158c:	001a      	movs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d112      	bne.n	80015c0 <modeCmdUpdate+0x68>
		RX_MODE = true;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <modeCmdUpdate+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
		TX_MODE = false;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <modeCmdUpdate+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		sprintf(uart1->txBuffer, "New mode: Rx \n");
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3319      	adds	r3, #25
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <modeCmdUpdate+0xa4>)
 80015ac:	0011      	movs	r1, r2
 80015ae:	0018      	movs	r0, r3
 80015b0:	f004 fbea 	bl	8005d88 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3319      	adds	r3, #25
 80015b8:	2164      	movs	r1, #100	; 0x64
 80015ba:	0018      	movs	r0, r3
 80015bc:	f001 f882 	bl	80026c4 <uart1_send_frame>

	}
	if (receiveValue == 1) {
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d112      	bne.n	80015ec <modeCmdUpdate+0x94>
		TX_MODE = true;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <modeCmdUpdate+0xa0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		RX_MODE = false;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <modeCmdUpdate+0x9c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		sprintf(uart1->txBuffer, "New mode: Tx \n");
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3319      	adds	r3, #25
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <modeCmdUpdate+0xa8>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f004 fbd4 	bl	8005d88 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3319      	adds	r3, #25
 80015e4:	2164      	movs	r1, #100	; 0x64
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 f86c 	bl	80026c4 <uart1_send_frame>
	}
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000221 	.word	0x20000221
 80015f8:	20000220 	.word	0x20000220
 80015fc:	0800674c 	.word	0x0800674c
 8001600:	0800675c 	.word	0x0800675c

08001604 <modeRs485Update>:

void modeRs485Update(const UART1_t *uart1, RS485_t *rs485) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	switch (rs485->cmd) {
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3b31      	subs	r3, #49	; 0x31
 8001614:	2b04      	cmp	r3, #4
 8001616:	d81c      	bhi.n	8001652 <modeRs485Update+0x4e>
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <modeRs485Update+0x60>)
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	469f      	mov	pc, r3
	case SET_PARAMETER_FREQOUT: //cmd = 31
		modeCmdUpdate(uart1);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ff97 	bl	8001558 <modeCmdUpdate>
		rs485->cmd = NONE;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		break;
 8001630:	e013      	b.n	800165a <modeRs485Update+0x56>
	case SET_PARAMETERS: //cmd = 32
		//ParametersCmd(uart1);
		rs485->cmd = NONE;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
		break;
 8001638:	e00f      	b.n	800165a <modeRs485Update+0x56>
	case SET_PARAMETER_FREQBASE: //cmd = 33
		//freqBaseCmdUpdate(uart1);
		rs485->cmd = NONE;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		break;
 8001640:	e00b      	b.n	800165a <modeRs485Update+0x56>
	case QUERY_PARAMETER_PdBm: //cmd = 34
		//powerOutCmdUpdate(uart1);
		rs485->cmd = NONE;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		break;
 8001648:	e007      	b.n	800165a <modeRs485Update+0x56>
	case SET_MODE: //cmd = 35
		//setModeCmd(uart1,;
		rs485->cmd = NONE;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	e003      	b.n	800165a <modeRs485Update+0x56>
	default:
		rs485->cmd = NONE;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		break;
 8001658:	46c0      	nop			; (mov r8, r8)
	}
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	080067f0 	.word	0x080067f0

08001668 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	4c7a      	ldr	r4, [pc, #488]	; (8001854 <main+0x1ec>)
 800166c:	44a5      	add	sp, r4
 800166e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Tone_uhf_t uhf;
	uart1_ptr = &uart1;
 8001670:	4b79      	ldr	r3, [pc, #484]	; (8001858 <main+0x1f0>)
 8001672:	24a3      	movs	r4, #163	; 0xa3
 8001674:	00a4      	lsls	r4, r4, #2
 8001676:	193a      	adds	r2, r7, r4
 8001678:	601a      	str	r2, [r3, #0]
	uhf_ptr = &uhf;
 800167a:	4b78      	ldr	r3, [pc, #480]	; (800185c <main+0x1f4>)
 800167c:	259f      	movs	r5, #159	; 0x9f
 800167e:	00ad      	lsls	r5, r5, #2
 8001680:	197a      	adds	r2, r7, r5
 8001682:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 8001684:	4b76      	ldr	r3, [pc, #472]	; (8001860 <main+0x1f8>)
 8001686:	26c4      	movs	r6, #196	; 0xc4
 8001688:	00b6      	lsls	r6, r6, #2
 800168a:	19ba      	adds	r2, r7, r6
 800168c:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800168e:	f001 f88d 	bl	80027ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001692:	f000 f8fb 	bl	800188c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001696:	f000 fa51 	bl	8001b3c <MX_GPIO_Init>
	MX_ADC1_Init();
 800169a:	f000 f93f 	bl	800191c <MX_ADC1_Init>
	MX_SPI1_Init();
 800169e:	f000 f9cb 	bl	8001a38 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80016a2:	f000 fa07 	bl	8001ab4 <MX_USART1_UART_Init>
	MX_CRC_Init();
 80016a6:	f000 f9a3 	bl	80019f0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	toneUhfInit(UHF_TONE, ID0, &uhf);
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	2007      	movs	r0, #7
 80016b2:	f000 fae0 	bl	8001c76 <toneUhfInit>
	rs485Init(&rs485);
 80016b6:	19bb      	adds	r3, r7, r6
 80016b8:	0018      	movs	r0, r3
 80016ba:	f000 fb61 	bl	8001d80 <rs485Init>
	uart1Init(HS16_CLK, BAUD_RATE, &uart1);
 80016be:	193a      	adds	r2, r7, r4
 80016c0:	23e1      	movs	r3, #225	; 0xe1
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4867      	ldr	r0, [pc, #412]	; (8001864 <main+0x1fc>)
 80016c6:	0019      	movs	r1, r3
 80016c8:	f000 ff00 	bl	80024cc <uart1Init>
	ledInit(&led);
 80016cc:	23c7      	movs	r3, #199	; 0xc7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7ff f9e8 	bl	8000aa8 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 80016d8:	4b63      	ldr	r3, [pc, #396]	; (8001868 <main+0x200>)
 80016da:	2298      	movs	r2, #152	; 0x98
 80016dc:	0052      	lsls	r2, r2, #1
 80016de:	18ba      	adds	r2, r7, r2
 80016e0:	601a      	str	r2, [r3, #0]
	lora_ptr = &loraRx;
 80016e2:	4b61      	ldr	r3, [pc, #388]	; (8001868 <main+0x200>)
 80016e4:	003a      	movs	r2, r7
 80016e6:	601a      	str	r2, [r3, #0]

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 80016e8:	2199      	movs	r1, #153	; 0x99
 80016ea:	0089      	lsls	r1, r1, #2
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	4a5f      	ldr	r2, [pc, #380]	; (800186c <main+0x204>)
 80016f0:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	4a5d      	ldr	r2, [pc, #372]	; (8001870 <main+0x208>)
 80016fc:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2201      	movs	r2, #1
 8001702:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	4a5a      	ldr	r2, [pc, #360]	; (8001870 <main+0x208>)
 8001708:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <main+0x20c>)
 8001712:	24d0      	movs	r4, #208	; 0xd0
 8001714:	00a4      	lsls	r4, r4, #2
 8001716:	191b      	adds	r3, r3, r4
 8001718:	19db      	adds	r3, r3, r7
 800171a:	187a      	adds	r2, r7, r1
 800171c:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <main+0x210>)
 8001720:	191b      	adds	r3, r3, r4
 8001722:	19db      	adds	r3, r3, r7
 8001724:	187a      	adds	r2, r7, r1
 8001726:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 8001728:	4b52      	ldr	r3, [pc, #328]	; (8001874 <main+0x20c>)
 800172a:	191b      	adds	r3, r3, r4
 800172c:	19da      	adds	r2, r3, r7
 800172e:	2394      	movs	r3, #148	; 0x94
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4952      	ldr	r1, [pc, #328]	; (800187c <main+0x214>)
 8001734:	50d1      	str	r1, [r2, r3]
	loraRx.spi = &hspi1;
 8001736:	4b50      	ldr	r3, [pc, #320]	; (8001878 <main+0x210>)
 8001738:	191b      	adds	r3, r3, r4
 800173a:	19da      	adds	r2, r3, r7
 800173c:	2394      	movs	r3, #148	; 0x94
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	494e      	ldr	r1, [pc, #312]	; (800187c <main+0x214>)
 8001742:	50d1      	str	r1, [r2, r3]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001744:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <main+0x208>)
 8001746:	2201      	movs	r2, #1
 8001748:	2101      	movs	r1, #1
 800174a:	0018      	movs	r0, r3
 800174c:	f002 f85f 	bl	800380e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <main+0x208>)
 8001752:	2201      	movs	r2, #1
 8001754:	2102      	movs	r1, #2
 8001756:	0018      	movs	r0, r3
 8001758:	f002 f859 	bl	800380e <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <main+0x214>)
 800175e:	2101      	movs	r1, #1
 8001760:	0018      	movs	r0, r3
 8001762:	f7fe ff6b 	bl	800063c <readRegister>
 8001766:	0003      	movs	r3, r0
 8001768:	0019      	movs	r1, r3
 800176a:	4b42      	ldr	r3, [pc, #264]	; (8001874 <main+0x20c>)
 800176c:	191b      	adds	r3, r3, r4
 800176e:	19db      	adds	r3, r3, r7
 8001770:	2223      	movs	r2, #35	; 0x23
 8001772:	5499      	strb	r1, [r3, r2]
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <main+0x214>)
 8001776:	2101      	movs	r1, #1
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe ff5f 	bl	800063c <readRegister>
 800177e:	0003      	movs	r3, r0
 8001780:	0019      	movs	r1, r3
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <main+0x210>)
 8001784:	191b      	adds	r3, r3, r4
 8001786:	19db      	adds	r3, r3, r7
 8001788:	2223      	movs	r2, #35	; 0x23
 800178a:	5499      	strb	r1, [r3, r2]
	loraTx.status = UNKNOW;
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <main+0x20c>)
 800178e:	191b      	adds	r3, r3, r4
 8001790:	19db      	adds	r3, r3, r7
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]
	loraRx.status = UNKNOW;
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <main+0x210>)
 800179a:	191b      	adds	r3, r3, r4
 800179c:	19db      	adds	r3, r3, r7
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]
	TX_MODE = false;
 80017a4:	4b36      	ldr	r3, [pc, #216]	; (8001880 <main+0x218>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	RX_MODE = true;
 80017aa:	4b36      	ldr	r3, [pc, #216]	; (8001884 <main+0x21c>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
	int counter = HAL_GetTick();
 80017b0:	f001 f878 	bl	80028a4 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	22cf      	movs	r2, #207	; 0xcf
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	18ba      	adds	r2, r7, r2
 80017bc:	6013      	str	r3, [r2, #0]
	int change = 0;;
 80017be:	2300      	movs	r3, #0
 80017c0:	22ce      	movs	r2, #206	; 0xce
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	18ba      	adds	r2, r7, r2
 80017c6:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		rs485Uart1Decode(&rs485, &uart1);
 80017c8:	24a3      	movs	r4, #163	; 0xa3
 80017ca:	00a4      	lsls	r4, r4, #2
 80017cc:	193a      	adds	r2, r7, r4
 80017ce:	25c4      	movs	r5, #196	; 0xc4
 80017d0:	00ad      	lsls	r5, r5, #2
 80017d2:	197b      	adds	r3, r7, r5
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f000 fb64 	bl	8001ea4 <rs485Uart1Decode>
		modeRs485Update(&uart1, &rs485);
 80017dc:	197a      	adds	r2, r7, r5
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff ff0e 	bl	8001604 <modeRs485Update>

		if (RX_MODE) {
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <main+0x21c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00c      	beq.n	800180a <main+0x1a2>
			read(&huart1, &loraRx);
 80017f0:	003a      	movs	r2, r7
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <main+0x220>)
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fe5a 	bl	80014b0 <read>
			change += 1;
 80017fc:	22ce      	movs	r2, #206	; 0xce
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	18bb      	adds	r3, r7, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	18ba      	adds	r2, r7, r2
 8001808:	6013      	str	r3, [r2, #0]
			 TX_MODE = true;
			 RX_MODE = false;
			 loraRx.status = UNKNOW;
			 }*/
		}
		if (TX_MODE) {
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <main+0x218>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0da      	beq.n	80017c8 <main+0x160>
			//if (HAL_GetTick() - counter > 700){
			//counter = HAL_GetTick();
			if (HAL_GetTick() - counter > 1) {
 8001812:	f001 f847 	bl	80028a4 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	24cf      	movs	r4, #207	; 0xcf
 800181a:	00a4      	lsls	r4, r4, #2
 800181c:	193b      	adds	r3, r7, r4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d9d0      	bls.n	80017c8 <main+0x160>
				counter = HAL_GetTick();
 8001826:	f001 f83d 	bl	80028a4 <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	193a      	adds	r2, r7, r4
 800182e:	6013      	str	r3, [r2, #0]
				transmit(&uart1, &loraTx);
 8001830:	2398      	movs	r3, #152	; 0x98
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	18fa      	adds	r2, r7, r3
 8001836:	23a3      	movs	r3, #163	; 0xa3
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	0011      	movs	r1, r2
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff fb0c 	bl	8000e5c <transmit>
				change += 1;
 8001844:	22ce      	movs	r2, #206	; 0xce
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	18bb      	adds	r3, r7, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	18ba      	adds	r2, r7, r2
 8001850:	6013      	str	r3, [r2, #0]
		rs485Uart1Decode(&rs485, &uart1);
 8001852:	e7b9      	b.n	80017c8 <main+0x160>
 8001854:	fffffcbc 	.word	0xfffffcbc
 8001858:	2000020c 	.word	0x2000020c
 800185c:	20000210 	.word	0x20000210
 8001860:	20000214 	.word	0x20000214
 8001864:	00f42400 	.word	0x00f42400
 8001868:	20000218 	.word	0x20000218
 800186c:	50000800 	.word	0x50000800
 8001870:	50000400 	.word	0x50000400
 8001874:	fffffdf0 	.word	0xfffffdf0
 8001878:	fffffcc0 	.word	0xfffffcc0
 800187c:	20000114 	.word	0x20000114
 8001880:	20000220 	.word	0x20000220
 8001884:	20000221 	.word	0x20000221
 8001888:	20000178 	.word	0x20000178

0800188c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b093      	sub	sp, #76	; 0x4c
 8001890:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001892:	2414      	movs	r4, #20
 8001894:	193b      	adds	r3, r7, r4
 8001896:	0018      	movs	r0, r3
 8001898:	2334      	movs	r3, #52	; 0x34
 800189a:	001a      	movs	r2, r3
 800189c:	2100      	movs	r1, #0
 800189e:	f004 fa6b 	bl	8005d78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	0018      	movs	r0, r3
 80018a6:	2310      	movs	r3, #16
 80018a8:	001a      	movs	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	f004 fa64 	bl	8005d78 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 ffc7 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	0052      	lsls	r2, r2, #1
 80018c6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2240      	movs	r2, #64	; 0x40
 80018d2:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	0018      	movs	r0, r3
 80018de:	f001 ffff 	bl	80038e0 <HAL_RCC_OscConfig>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x5e>
		Error_Handler();
 80018e6:	f000 f9c1 	bl	8001c6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2100      	movs	r1, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f002 fafa 	bl	8003f00 <HAL_RCC_ClockConfig>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x88>
		Error_Handler();
 8001910:	f000 f9ac 	bl	8001c6c <Error_Handler>
	}
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b013      	add	sp, #76	; 0x4c
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	0018      	movs	r0, r3
 8001926:	230c      	movs	r3, #12
 8001928:	001a      	movs	r2, r3
 800192a:	2100      	movs	r1, #0
 800192c:	f004 fa24 	bl	8005d78 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001932:	4a2e      	ldr	r2, [pc, #184]	; (80019ec <MX_ADC1_Init+0xd0>)
 8001934:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	05d2      	lsls	r2, r2, #23
 800193c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001952:	2204      	movs	r2, #4
 8001954:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001958:	2200      	movs	r2, #0
 800195a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800195e:	2200      	movs	r2, #0
 8001960:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001964:	2200      	movs	r2, #0
 8001966:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800196a:	2201      	movs	r2, #1
 800196c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001970:	2220      	movs	r2, #32
 8001972:	2100      	movs	r1, #0
 8001974:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001984:	222c      	movs	r2, #44	; 0x2c
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_ADC1_Init+0xcc>)
 8001998:	2200      	movs	r2, #0
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_ADC1_Init+0xcc>)
 800199e:	223c      	movs	r2, #60	; 0x3c
 80019a0:	2100      	movs	r1, #0
 80019a2:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <MX_ADC1_Init+0xcc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_ADC1_Init+0xcc>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f001 f8a5 	bl	8002afc <HAL_ADC_Init>
 80019b2:	1e03      	subs	r3, r0, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0x9e>
		Error_Handler();
 80019b6:	f000 f959 	bl	8001c6c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019cc:	1d3a      	adds	r2, r7, #4
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_ADC1_Init+0xcc>)
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 fa3a 	bl	8002e4c <HAL_ADC_ConfigChannel>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0xc4>
		Error_Handler();
 80019dc:	f000 f946 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000008c 	.word	0x2000008c
 80019ec:	40012400 	.word	0x40012400

080019f0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_CRC_Init+0x40>)
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <MX_CRC_Init+0x44>)
 80019f8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <MX_CRC_Init+0x40>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <MX_CRC_Init+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_CRC_Init+0x40>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <MX_CRC_Init+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_CRC_Init+0x40>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <MX_CRC_Init+0x40>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f001 fca2 	bl	8003364 <HAL_CRC_Init>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <MX_CRC_Init+0x38>
		Error_Handler();
 8001a24:	f000 f922 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	200000f0 	.word	0x200000f0
 8001a34:	40023000 	.word	0x40023000

08001a38 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <MX_SPI1_Init+0x78>)
 8001a40:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a44:	2282      	movs	r2, #130	; 0x82
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a52:	22e0      	movs	r2, #224	; 0xe0
 8001a54:	00d2      	lsls	r2, r2, #3
 8001a56:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a6e:	2218      	movs	r2, #24
 8001a70:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a86:	2207      	movs	r2, #7
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a92:	2208      	movs	r2, #8
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f002 fd01 	bl	80044a0 <HAL_SPI_Init>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001aa2:	f000 f8e3 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000114 	.word	0x20000114
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <MX_USART1_UART_Init+0x84>)
 8001abc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ac0:	22e1      	movs	r2, #225	; 0xe1
 8001ac2:	0252      	lsls	r2, r2, #9
 8001ac4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f003 fbd9 	bl	80052a4 <HAL_UART_Init>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001af6:	f000 f8b9 	bl	8001c6c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001afc:	2100      	movs	r1, #0
 8001afe:	0018      	movs	r0, r3
 8001b00:	f004 f830 	bl	8005b64 <HAL_UARTEx_SetTxFifoThreshold>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART1_UART_Init+0x58>
			!= HAL_OK) {
		Error_Handler();
 8001b08:	f000 f8b0 	bl	8001c6c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	0018      	movs	r0, r3
 8001b12:	f004 f867 	bl	8005be4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001b1a:	f000 f8a7 	bl	8001c6c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <MX_USART1_UART_Init+0x80>)
 8001b20:	0018      	movs	r0, r3
 8001b22:	f003 ffe5 	bl	8005af0 <HAL_UARTEx_DisableFifoMode>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x7a>
		Error_Handler();
 8001b2a:	f000 f89f 	bl	8001c6c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000178 	.word	0x20000178
 8001b38:	40013800 	.word	0x40013800

08001b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b42:	240c      	movs	r4, #12
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	0018      	movs	r0, r3
 8001b48:	2314      	movs	r3, #20
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f004 f913 	bl	8005d78 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b70:	2102      	movs	r1, #2
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b88:	2104      	movs	r1, #4
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <MX_GPIO_Init+0x124>)
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <MX_GPIO_Init+0x128>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f001 fe34 	bl	800380e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	0059      	lsls	r1, r3, #1
 8001baa:	23a0      	movs	r3, #160	; 0xa0
 8001bac:	05db      	lsls	r3, r3, #23
 8001bae:	2200      	movs	r2, #0
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f001 fe2c 	bl	800380e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <MX_GPIO_Init+0x12c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f001 fe26 	bl	800380e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	2201      	movs	r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	193b      	adds	r3, r7, r4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_GPIO_Init+0x128>)
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f001 fc93 	bl	800350c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	2204      	movs	r2, #4
 8001bea:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <MX_GPIO_Init+0x128>)
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0010      	movs	r0, r2
 8001c00:	f001 fc84 	bl	800350c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8001c04:	0021      	movs	r1, r4
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	0052      	lsls	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	000c      	movs	r4, r1
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	2201      	movs	r2, #1
 8001c14:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001c22:	193a      	adds	r2, r7, r4
 8001c24:	23a0      	movs	r3, #160	; 0xa0
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	0011      	movs	r1, r2
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f001 fc6e 	bl	800350c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 8001c30:	0021      	movs	r1, r4
 8001c32:	187b      	adds	r3, r7, r1
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <MX_GPIO_Init+0x12c>)
 8001c4e:	0019      	movs	r1, r3
 8001c50:	0010      	movs	r0, r2
 8001c52:	f001 fc5b 	bl	800350c <HAL_GPIO_Init>

}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b009      	add	sp, #36	; 0x24
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40021000 	.word	0x40021000
 8001c64:	50000400 	.word	0x50000400
 8001c68:	50000800 	.word	0x50000800

08001c6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c74:	e7fe      	b.n	8001c74 <Error_Handler+0x8>

08001c76 <toneUhfInit>:
	/* PA3  PA_HAB as output - ENABLE - DISABLE PA */
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
}

void toneUhfInit(Function_t funcion, Id_t id, Tone_uhf_t *uhf) {
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	603a      	str	r2, [r7, #0]
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	1c02      	adds	r2, r0, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	1dbb      	adds	r3, r7, #6
 8001c86:	1c0a      	adds	r2, r1, #0
 8001c88:	701a      	strb	r2, [r3, #0]
	uhf->ON_OFF = 0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
	uhf->FreqBase = 0;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
	uhf->FreqOut = 0;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	uhf->PdBm = 0;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	731a      	strb	r2, [r3, #12]
	uhf->function = funcion;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	1dfa      	adds	r2, r7, #7
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	739a      	strb	r2, [r3, #14]
	uhf->id = id;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	1dba      	adds	r2, r7, #6
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	735a      	strb	r2, [r3, #13]
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	000a      	movs	r2, r1
 8001cc6:	1cfb      	adds	r3, r7, #3
 8001cc8:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001cca:	230a      	movs	r3, #10
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <crc_get+0xc0>)
 8001cd0:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 8001cda:	230f      	movs	r3, #15
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e03d      	b.n	8001d60 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b299      	uxth	r1, r3
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	18bb      	adds	r3, r7, r2
 8001cfa:	18ba      	adds	r2, r7, r2
 8001cfc:	8812      	ldrh	r2, [r2, #0]
 8001cfe:	404a      	eors	r2, r1
 8001d00:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8001d02:	230e      	movs	r3, #14
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e01e      	b.n	8001d4a <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001d0c:	210c      	movs	r1, #12
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2200      	movs	r2, #0
 8001d12:	5e9b      	ldrsh	r3, [r3, r2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0c      	bge.n	8001d32 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	230a      	movs	r3, #10
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2000      	movs	r0, #0
 8001d26:	5e1b      	ldrsh	r3, [r3, r0]
 8001d28:	4053      	eors	r3, r2
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	e005      	b.n	8001d3e <crc_get+0x82>
			else
				crc <<= 1;
 8001d32:	230c      	movs	r3, #12
 8001d34:	18fa      	adds	r2, r7, r3
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	18db      	adds	r3, r3, r3
 8001d3c:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8001d3e:	210e      	movs	r1, #14
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	3201      	adds	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	d9db      	bls.n	8001d0c <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8001d54:	210f      	movs	r1, #15
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	3201      	adds	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fa      	adds	r2, r7, r3
 8001d64:	1cfb      	adds	r3, r7, #3
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3ba      	bcc.n	8001ce4 <crc_get+0x28>
		}
	}
	return crc;
 8001d6e:	230c      	movs	r3, #12
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	881b      	ldrh	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	00001021 	.word	0x00001021

08001d80 <rs485Init>:

void rs485Init(RS485_t *r) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2207      	movs	r2, #7
 8001d92:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <rs485Init+0x3c>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <rs485Init+0x3c>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	02c9      	lsls	r1, r1, #11
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <rs485Init+0x3c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <rs485Init+0x3c>)
 8001dae:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <rs485Init+0x40>)
 8001db0:	400a      	ands	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	50000400 	.word	0x50000400
 8001dc0:	fff7ffff 	.word	0xfff7ffff

08001dc4 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]

	if (u->rxCount > (MINIMUN_FRAME_LEN)) {
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	227d      	movs	r2, #125	; 0x7d
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d913      	bls.n	8001e00 <rs485_check_frame+0x3c>
		if (u->rxBuffer[0] == LTEL_START_MARK) {
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	227e      	movs	r2, #126	; 0x7e
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10c      	bne.n	8001dfc <rs485_check_frame+0x38>
			if (u->rxBuffer[u->rxCount - 1] == LTEL_END_MARK)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	227d      	movs	r2, #125	; 0x7d
 8001de6:	5c9b      	ldrb	r3, [r3, r2]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	227f      	movs	r2, #127	; 0x7f
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <rs485_check_frame+0x34>
				return VALID_FRAME;
 8001df4:	2302      	movs	r3, #2
 8001df6:	e004      	b.n	8001e02 <rs485_check_frame+0x3e>
			else
				return START_READING;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e002      	b.n	8001e02 <rs485_check_frame+0x3e>
		} else
			return NOT_VALID_FRAME;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <rs485_check_frame+0x3e>
	} else

		return WAITING;
 8001e00:	2308      	movs	r3, #8
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <rs485_check_CRC_module>:

Rs485_status_t rs485_check_CRC_module(UART1_t *uart1) {
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = uart1->rxBuffer[8] << 8;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7a1b      	ldrb	r3, [r3, #8]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
	crc_save |= uart1->rxBuffer[9];
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7a5b      	ldrb	r3, [r3, #9]
 8001e1e:	001a      	movs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(uart1->rxBuffer[1]), 7);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	2107      	movs	r1, #7
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff ff45 	bl	8001cbc <crc_get>
 8001e32:	0003      	movs	r3, r0
 8001e34:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d101      	bne.n	8001e42 <rs485_check_CRC_module+0x38>
		return DATA_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <rs485_check_CRC_module+0x3a>
	return CRC_ERROR;
 8001e42:	2306      	movs	r3, #6
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <rs485_check_valid_module>:

Rs485_status_t rs485_check_valid_module(UART1_t *uart1) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	if (uart1->rxBuffer[1] == UHF_TONE) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b07      	cmp	r3, #7
 8001e5a:	d11c      	bne.n	8001e96 <rs485_check_valid_module+0x4a>
		if (uart1->rxBuffer[2] == ID0) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	789b      	ldrb	r3, [r3, #2]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d116      	bne.n	8001e92 <rs485_check_valid_module+0x46>
			for (int i = 3; i < uart1->rxCount; i++)
 8001e64:	2303      	movs	r3, #3
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e00b      	b.n	8001e82 <rs485_check_valid_module+0x36>
				if (uart1->rxBuffer[i] == LTEL_END_MARK)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	18d3      	adds	r3, r2, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	227f      	movs	r2, #127	; 0x7f
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <rs485_check_valid_module+0x30>
					return VALID_MODULE;
 8001e78:	2309      	movs	r3, #9
 8001e7a:	e00f      	b.n	8001e9c <rs485_check_valid_module+0x50>
			for (int i = 3; i < uart1->rxCount; i++)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	227d      	movs	r2, #125	; 0x7d
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	dbec      	blt.n	8001e6a <rs485_check_valid_module+0x1e>
 8001e90:	e003      	b.n	8001e9a <rs485_check_valid_module+0x4e>
		} else
			return WRONG_MODULE_ID;
 8001e92:	2305      	movs	r3, #5
 8001e94:	e002      	b.n	8001e9c <rs485_check_valid_module+0x50>
	} else
		return WRONG_MODULE_FUNCTION;
 8001e96:	2304      	movs	r3, #4
 8001e98:	e000      	b.n	8001e9c <rs485_check_valid_module+0x50>
	return WRONG_MODULE_FUNCTION;
 8001e9a:	2304      	movs	r3, #4
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <rs485Uart1Decode>:

void rs485Uart1Decode(RS485_t *rs485, UART1_t *uart1) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	switch (rs485->status) {
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	d900      	bls.n	8001eb8 <rs485Uart1Decode+0x14>
 8001eb6:	e081      	b.n	8001fbc <rs485Uart1Decode+0x118>
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <rs485Uart1Decode+0x134>)
 8001ebc:	18d3      	adds	r3, r2, r3
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	469f      	mov	pc, r3
	case VALID_MODULE:
		rs485->status = rs485_check_CRC_module(uart1);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ffa0 	bl	8001e0a <rs485_check_CRC_module>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	001a      	movs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	721a      	strb	r2, [r3, #8]
		break;
 8001ed2:	e07c      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case DATA_OK:
		rs485->cmd = uart1->rxBuffer[3];
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	78da      	ldrb	r2, [r3, #3]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	701a      	strb	r2, [r3, #0]
		uart1_send_str("DATA OK\r\n");
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <rs485Uart1Decode+0x138>)
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 fbcc 	bl	800267c <uart1_send_str>
		rs485->status = DONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	721a      	strb	r2, [r3, #8]
		break;
 8001eea:	e070      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case START_READING:
		rs485->status = WAITING;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 8001ef2:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <rs485Uart1Decode+0x13c>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fa45 	bl	8002388 <uart1_clean_by_timeout>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d064      	beq.n	8001fcc <rs485Uart1Decode+0x128>
			rs485->status = DONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2207      	movs	r2, #7
 8001f06:	721a      	strb	r2, [r3, #8]
		break;
 8001f08:	e060      	b.n	8001fcc <rs485Uart1Decode+0x128>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff9d 	bl	8001e4c <rs485_check_valid_module>
 8001f12:	0003      	movs	r3, r0
 8001f14:	001a      	movs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	721a      	strb	r2, [r3, #8]
		break;
 8001f1a:	e058      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case NOT_VALID_FRAME:
		HAL_Delay(50);
 8001f1c:	2032      	movs	r0, #50	; 0x32
 8001f1e:	f000 fccb 	bl	80028b8 <HAL_Delay>
	    uart1_send_str("NOT VALID FRAME\r\n");
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <rs485Uart1Decode+0x140>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fba9 	bl	800267c <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fbef 	bl	8002710 <uart1_clean_buffer>
		rs485->status = DONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2207      	movs	r2, #7
 8001f36:	721a      	strb	r2, [r3, #8]
		break;
 8001f38:	e049      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_ID:
		uart1_send_str("WRONG MODULE ID\r\n");
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <rs485Uart1Decode+0x144>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f000 fb9d 	bl	800267c <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fbe3 	bl	8002710 <uart1_clean_buffer>
		rs485->status = DONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	721a      	strb	r2, [r3, #8]
		break;
 8001f50:	e03d      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_FUNCTION:
		uart1_send_str("WRONG MODULE FUNCTION\r\n");
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <rs485Uart1Decode+0x148>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 fb91 	bl	800267c <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 fbd7 	bl	8002710 <uart1_clean_buffer>
		rs485->status = DONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2207      	movs	r2, #7
 8001f66:	721a      	strb	r2, [r3, #8]
		break;
 8001f68:	e031      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case CRC_ERROR:
		uart1_send_str("CRC ERROR\r\n");
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <rs485Uart1Decode+0x14c>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fb85 	bl	800267c <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 fbcb 	bl	8002710 <uart1_clean_buffer>
		rs485->status = DONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	721a      	strb	r2, [r3, #8]
		break;
 8001f80:	e025      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff ff1b 	bl	8001dc4 <rs485_check_frame>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	001a      	movs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <rs485Uart1Decode+0x150>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f9f3 	bl	8002388 <uart1_clean_by_timeout>
		break;
 8001fa2:	e014      	b.n	8001fce <rs485Uart1Decode+0x12a>
	case DONE:
		uart1_send_str("DONE\r\n");
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <rs485Uart1Decode+0x154>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 fb68 	bl	800267c <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fbae 	bl	8002710 <uart1_clean_buffer>
		rs485->status = WAITING;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	721a      	strb	r2, [r3, #8]
		break;
 8001fba:	e008      	b.n	8001fce <rs485Uart1Decode+0x12a>
	default:
		rs485->status = DONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 fba3 	bl	8002710 <uart1_clean_buffer>
		break;
 8001fca:	e000      	b.n	8001fce <rs485Uart1Decode+0x12a>
		break;
 8001fcc:	46c0      	nop			; (mov r8, r8)
	}
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	08006804 	.word	0x08006804
 8001fdc:	0800676c 	.word	0x0800676c
 8001fe0:	08006778 	.word	0x08006778
 8001fe4:	08006788 	.word	0x08006788
 8001fe8:	0800679c 	.word	0x0800679c
 8001fec:	080067b0 	.word	0x080067b0
 8001ff0:	080067c8 	.word	0x080067c8
 8001ff4:	080067d4 	.word	0x080067d4
 8001ff8:	080067dc 	.word	0x080067dc

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	2101      	movs	r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	0549      	lsls	r1, r1, #21
 8002024:	430a      	orrs	r2, r1
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_MspInit+0x44>)
 800202a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	2414      	movs	r4, #20
 800204e:	193b      	adds	r3, r7, r4
 8002050:	0018      	movs	r0, r3
 8002052:	2314      	movs	r3, #20
 8002054:	001a      	movs	r2, r3
 8002056:	2100      	movs	r1, #0
 8002058:	f003 fe8e 	bl	8005d78 <memset>
  if(hadc->Instance==ADC1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d129      	bne.n	80020ba <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 8002068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0349      	lsls	r1, r1, #13
 8002070:	430a      	orrs	r2, r1
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 8002076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	035b      	lsls	r3, r3, #13
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 8002084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 8002088:	2101      	movs	r1, #1
 800208a:	430a      	orrs	r2, r1
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002092:	2201      	movs	r2, #1
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800209a:	193b      	adds	r3, r7, r4
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	2203      	movs	r2, #3
 80020a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	193a      	adds	r2, r7, r4
 80020ae:	23a0      	movs	r3, #160	; 0xa0
 80020b0:	05db      	lsls	r3, r3, #23
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f001 fa29 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b00b      	add	sp, #44	; 0x2c
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40012400 	.word	0x40012400
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_CRC_MspInit+0x38>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10d      	bne.n	80020fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0149      	lsls	r1, r1, #5
 80020e8:	430a      	orrs	r2, r1
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	40023000 	.word	0x40023000
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08b      	sub	sp, #44	; 0x2c
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	2414      	movs	r4, #20
 8002116:	193b      	adds	r3, r7, r4
 8002118:	0018      	movs	r0, r3
 800211a:	2314      	movs	r3, #20
 800211c:	001a      	movs	r2, r3
 800211e:	2100      	movs	r1, #0
 8002120:	f003 fe2a 	bl	8005d78 <memset>
  if(hspi->Instance==SPI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <HAL_SPI_MspInit+0xd0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d152      	bne.n	80021d4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0149      	lsls	r1, r1, #5
 8002138:	430a      	orrs	r2, r1
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 800213e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	015b      	lsls	r3, r3, #5
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 800214c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002150:	2101      	movs	r1, #1
 8002152:	430a      	orrs	r2, r1
 8002154:	635a      	str	r2, [r3, #52]	; 0x34
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	2201      	movs	r2, #1
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002168:	2102      	movs	r1, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_SPI_MspInit+0xd4>)
 8002170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800217a:	193b      	adds	r3, r7, r4
 800217c:	22c0      	movs	r2, #192	; 0xc0
 800217e:	0152      	lsls	r2, r2, #5
 8002180:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2202      	movs	r2, #2
 8002186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	193b      	adds	r3, r7, r4
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002194:	193b      	adds	r3, r7, r4
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	193a      	adds	r2, r7, r4
 800219c:	23a0      	movs	r3, #160	; 0xa0
 800219e:	05db      	lsls	r3, r3, #23
 80021a0:	0011      	movs	r1, r2
 80021a2:	0018      	movs	r0, r3
 80021a4:	f001 f9b2 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 80021a8:	0021      	movs	r1, r4
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2208      	movs	r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2202      	movs	r2, #2
 80021b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_SPI_MspInit+0xd8>)
 80021cc:	0019      	movs	r1, r3
 80021ce:	0010      	movs	r0, r2
 80021d0:	f001 f99c 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b00b      	add	sp, #44	; 0x2c
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	40013000 	.word	0x40013000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	50000400 	.word	0x50000400

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b091      	sub	sp, #68	; 0x44
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	232c      	movs	r3, #44	; 0x2c
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	0018      	movs	r0, r3
 80021f6:	2314      	movs	r3, #20
 80021f8:	001a      	movs	r2, r3
 80021fa:	2100      	movs	r1, #0
 80021fc:	f003 fdbc 	bl	8005d78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	2414      	movs	r4, #20
 8002202:	193b      	adds	r3, r7, r4
 8002204:	0018      	movs	r0, r3
 8002206:	2318      	movs	r3, #24
 8002208:	001a      	movs	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	f003 fdb4 	bl	8005d78 <memset>
  if(huart->Instance==USART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_UART_MspInit+0xbc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d13f      	bne.n	800229a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002220:	193b      	adds	r3, r7, r4
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002226:	193b      	adds	r3, r7, r4
 8002228:	0018      	movs	r0, r3
 800222a:	f002 f813 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002232:	f7ff fd1b 	bl	8001c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	01c9      	lsls	r1, r1, #7
 8002240:	430a      	orrs	r2, r1
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_UART_MspInit+0xc0>)
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	2201      	movs	r2, #1
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	187b      	adds	r3, r7, r1
 800226e:	22c0      	movs	r2, #192	; 0xc0
 8002270:	00d2      	lsls	r2, r2, #3
 8002272:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2202      	movs	r2, #2
 8002278:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2201      	movs	r2, #1
 800228a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	187a      	adds	r2, r7, r1
 800228e:	23a0      	movs	r3, #160	; 0xa0
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f001 f939 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b011      	add	sp, #68	; 0x44
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40021000 	.word	0x40021000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d0:	f000 fad6 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	18d3      	adds	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f003 fd0a 	bl	8005d24 <__errno>
 8002310:	0003      	movs	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	2301      	movs	r3, #1
 8002318:	425b      	negs	r3, r3
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	18d2      	adds	r2, r2, r3
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <_sbrk+0x64>)
 800232c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b006      	add	sp, #24
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20002000 	.word	0x20002000
 800233c:	00000400 	.word	0x00000400
 8002340:	20000224 	.word	0x20000224
 8002344:	20000240 	.word	0x20000240

08002348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	0002      	movs	r2, r0
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b7f      	cmp	r3, #127	; 0x7f
 8002366:	d809      	bhi.n	800237c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	231f      	movs	r3, #31
 8002370:	401a      	ands	r2, r3
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_EnableIRQ+0x30>)
 8002374:	2101      	movs	r1, #1
 8002376:	4091      	lsls	r1, r2
 8002378:	000a      	movs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	e000e100 	.word	0xe000e100

08002388 <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8002392:	f000 fa87 	bl	80028a4 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	585b      	ldr	r3, [r3, r1]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <uart1_clean_by_timeout+0x58>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d917      	bls.n	80023d6 <uart1_clean_by_timeout+0x4e>
			uart1_send_str((char*)str);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f967 	bl	800267c <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <uart1_clean_by_timeout+0x5c>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f963 	bl	800267c <uart1_send_str>
			if(strlen(str)>0)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <uart1_clean_by_timeout+0x3e>
				uart1_clean_buffer(uart1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f9a5 	bl	8002710 <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 80023c6:	f000 fa6d 	bl	80028a4 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	505a      	str	r2, [r3, r1]
			return 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <uart1_clean_by_timeout+0x50>
		}
		return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00001388 	.word	0x00001388
 80023e4:	080067e4 	.word	0x080067e4

080023e8 <uart1_gpio_init>:

void uart1_gpio_init() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80023ec:	23a0      	movs	r3, #160	; 0xa0
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	4930      	ldr	r1, [pc, #192]	; (80024b8 <uart1_gpio_init+0xd0>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80023fc:	23a0      	movs	r3, #160	; 0xa0
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	23a0      	movs	r3, #160	; 0xa0
 8002404:	05db      	lsls	r3, r3, #23
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0389      	lsls	r1, r1, #14
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800240e:	23a0      	movs	r3, #160	; 0xa0
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	23a0      	movs	r3, #160	; 0xa0
 8002416:	05db      	lsls	r3, r3, #23
 8002418:	4928      	ldr	r1, [pc, #160]	; (80024bc <uart1_gpio_init+0xd4>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800241e:	23a0      	movs	r3, #160	; 0xa0
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	23a0      	movs	r3, #160	; 0xa0
 8002426:	05db      	lsls	r3, r3, #23
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0309      	lsls	r1, r1, #12
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8002430:	23a0      	movs	r3, #160	; 0xa0
 8002432:	05db      	lsls	r3, r3, #23
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	23a0      	movs	r3, #160	; 0xa0
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0049      	lsls	r1, r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 8002442:	23a0      	movs	r3, #160	; 0xa0
 8002444:	05db      	lsls	r3, r3, #23
 8002446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002448:	23a0      	movs	r3, #160	; 0xa0
 800244a:	05db      	lsls	r3, r3, #23
 800244c:	491c      	ldr	r1, [pc, #112]	; (80024c0 <uart1_gpio_init+0xd8>)
 800244e:	400a      	ands	r2, r1
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	23a0      	movs	r3, #160	; 0xa0
 800245a:	05db      	lsls	r3, r3, #23
 800245c:	4919      	ldr	r1, [pc, #100]	; (80024c4 <uart1_gpio_init+0xdc>)
 800245e:	400a      	ands	r2, r1
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 8002462:	23a0      	movs	r3, #160	; 0xa0
 8002464:	05db      	lsls	r3, r3, #23
 8002466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002468:	23a0      	movs	r3, #160	; 0xa0
 800246a:	05db      	lsls	r3, r3, #23
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <uart1_gpio_init+0xe0>)
 800246e:	400a      	ands	r2, r1
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 8002472:	23a0      	movs	r3, #160	; 0xa0
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002478:	23a0      	movs	r3, #160	; 0xa0
 800247a:	05db      	lsls	r3, r3, #23
 800247c:	2110      	movs	r1, #16
 800247e:	430a      	orrs	r2, r1
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8002482:	23a0      	movs	r3, #160	; 0xa0
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002488:	23a0      	movs	r3, #160	; 0xa0
 800248a:	05db      	lsls	r3, r3, #23
 800248c:	2120      	movs	r1, #32
 800248e:	438a      	bics	r2, r1
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8002492:	23a0      	movs	r3, #160	; 0xa0
 8002494:	05db      	lsls	r3, r3, #23
 8002496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002498:	23a0      	movs	r3, #160	; 0xa0
 800249a:	05db      	lsls	r3, r3, #23
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	438a      	bics	r2, r1
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 80024a2:	23a0      	movs	r3, #160	; 0xa0
 80024a4:	05db      	lsls	r3, r3, #23
 80024a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a8:	23a0      	movs	r3, #160	; 0xa0
 80024aa:	05db      	lsls	r3, r3, #23
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	438a      	bics	r2, r1
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	ffefffff 	.word	0xffefffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	fffffdff 	.word	0xfffffdff
 80024c4:	fffffbff 	.word	0xfffffbff
 80024c8:	fffff7ff 	.word	0xfffff7ff

080024cc <uart1Init>:

void uart1Init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 80024dc:	f7ff ff84 	bl	80023e8 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <uart1Init+0x94>)
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <uart1Init+0x94>)
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	01c9      	lsls	r1, r1, #7
 80024ea:	430a      	orrs	r2, r1
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <uart1Init+0x98>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <uart1Init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <uart1Init+0x94>)
 80024f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <uart1Init+0x94>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	438a      	bics	r2, r1
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <uart1Init+0x94>)
 8002504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <uart1Init+0x94>)
 8002508:	2102      	movs	r1, #2
 800250a:	430a      	orrs	r2, r1
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7fd fe07 	bl	8000124 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <uart1Init+0x9c>)
 8002520:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <uart1Init+0x9c>)
 8002524:	220c      	movs	r2, #12
 8002526:	601a      	str	r2, [r3, #0]
	u->rxCount = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	227d      	movs	r2, #125	; 0x7d
 800252c:	2100      	movs	r1, #0
 800252e:	5499      	strb	r1, [r3, r2]

	uart1_clean_buffer(u);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f8ec 	bl	8002710 <uart1_clean_buffer>

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <uart1Init+0x9c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <uart1Init+0x9c>)
 800253e:	2120      	movs	r1, #32
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8002544:	201b      	movs	r0, #27
 8002546:	f7ff ff05 	bl	8002354 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <uart1Init+0x9c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <uart1Init+0x9c>)
 8002550:	2101      	movs	r1, #1
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b006      	add	sp, #24
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40021000 	.word	0x40021000
 8002564:	00f42400 	.word	0x00f42400
 8002568:	40013800 	.word	0x40013800

0800256c <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <uart1_write+0x50>)
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <uart1_write+0x50>)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0089      	lsls	r1, r1, #2
 8002582:	430a      	orrs	r2, r1
 8002584:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <uart1_write+0x54>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	4013      	ands	r3, r2
 8002590:	d0fa      	beq.n	8002588 <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <uart1_write+0x54>)
 8002594:	1dfa      	adds	r2, r7, #7
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <uart1_write+0x54>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	4013      	ands	r3, r2
 80025a4:	d0fa      	beq.n	800259c <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <uart1_write+0x50>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <uart1_write+0x50>)
 80025ac:	4905      	ldr	r1, [pc, #20]	; (80025c4 <uart1_write+0x58>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	615a      	str	r2, [r3, #20]
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	50000400 	.word	0x50000400
 80025c0:	40013800 	.word	0x40013800
 80025c4:	fffffdff 	.word	0xfffffdff

080025c8 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <uart1_1byte_read+0x68>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2208      	movs	r2, #8
 80025d4:	401a      	ands	r2, r3
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	1e51      	subs	r1, r2, #1
 80025da:	418a      	sbcs	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <uart1_1byte_read+0x68>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2220      	movs	r2, #32
 80025e4:	401a      	ands	r2, r3
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	1e51      	subs	r1, r2, #1
 80025ea:	418a      	sbcs	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 80025ee:	1dbb      	adds	r3, r7, #6
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <uart1_1byte_read+0x36>
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <uart1_1byte_read+0x5c>
		if (override)
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <uart1_1byte_read+0x68>)
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <uart1_1byte_read+0x68>)
 800260c:	2108      	movs	r1, #8
 800260e:	430a      	orrs	r2, r1
 8002610:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <uart1_1byte_read+0x68>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	b2da      	uxtb	r2, r3
 8002618:	1d7b      	adds	r3, r7, #5
 800261a:	701a      	strb	r2, [r3, #0]
		return data;
 800261c:	1d7b      	adds	r3, r7, #5
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e000      	b.n	8002626 <uart1_1byte_read+0x5e>
	} else
		return '\0';
 8002624:	2300      	movs	r3, #0
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	40013800 	.word	0x40013800

08002634 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	if (u->rxCount >= RX_BUFFLEN) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	227d      	movs	r2, #125	; 0x7d
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	2b18      	cmp	r3, #24
 8002644:	d907      	bls.n	8002656 <uart1_read_to_frame+0x22>
		uart1_clean_buffer(u);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f861 	bl	8002710 <uart1_clean_buffer>
		u->rxCount = 0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	227d      	movs	r2, #125	; 0x7d
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]
	}
	u->rxBuffer[u->rxCount++] = uart1_1byte_read();
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	227d      	movs	r2, #125	; 0x7d
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	b2d0      	uxtb	r0, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	217d      	movs	r1, #125	; 0x7d
 8002664:	5450      	strb	r0, [r2, r1]
 8002666:	001c      	movs	r4, r3
 8002668:	f7ff ffae 	bl	80025c8 <uart1_1byte_read>
 800266c:	0003      	movs	r3, r0
 800266e:	001a      	movs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	551a      	strb	r2, [r3, r4]
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b003      	add	sp, #12
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <uart1_send_str>:

void uart1_send_str(char *str) {
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002684:	230f      	movs	r3, #15
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e00d      	b.n	80026aa <uart1_send_str+0x2e>
		uart1_write(str[i]);
 800268e:	240f      	movs	r4, #15
 8002690:	193b      	adds	r3, r7, r4
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	18d3      	adds	r3, r2, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff ff66 	bl	800256c <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	3201      	adds	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	230f      	movs	r3, #15
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e9      	bne.n	800268e <uart1_send_str+0x12>
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b005      	add	sp, #20
 80026c2:	bd90      	pop	{r4, r7, pc}

080026c4 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	000a      	movs	r2, r1
 80026ce:	1cfb      	adds	r3, r7, #3
 80026d0:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 80026d2:	1cfb      	adds	r3, r7, #3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e00e      	b.n	80026fe <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff ff3f 	bl	800256c <uart1_write>
			str[i] = (char) '\0';
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	18d3      	adds	r3, r2, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	1cfb      	adds	r3, r7, #3
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbeb      	blt.n	80026e0 <uart1_send_frame+0x1c>
		}
	}
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bd80      	pop	{r7, pc}

08002710 <uart1_clean_buffer>:

void uart1_clean_buffer(UART1_t *u) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	u->rxCount = 0;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	227d      	movs	r2, #125	; 0x7d
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e010      	b.n	8002748 <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b18      	cmp	r3, #24
 800272a:	dc04      	bgt.n	8002736 <uart1_clean_buffer+0x26>
				u->rxBuffer[i] = 0x00;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	18d3      	adds	r3, r2, r3
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
			u->txBuffer[i] = 0x00;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	3319      	adds	r3, #25
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3301      	adds	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b63      	cmp	r3, #99	; 0x63
 800274c:	ddeb      	ble.n	8002726 <uart1_clean_buffer+0x16>
			if (i < TX_BUFFLEN)
				u->txBuffer[i] = 0x00;
			u->rxBuffer[i] = 0x00;
		}
	}
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800275a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800275c:	f7ff fdf4 	bl	8002348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480c      	ldr	r0, [pc, #48]	; (8002794 <LoopForever+0x6>)
  ldr r1, =_edata
 8002762:	490d      	ldr	r1, [pc, #52]	; (8002798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <LoopForever+0xe>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <LoopForever+0x16>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002786:	f003 fad3 	bl	8005d30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800278a:	f7fe ff6d 	bl	8001668 <main>

0800278e <LoopForever>:

LoopForever:
  b LoopForever
 800278e:	e7fe      	b.n	800278e <LoopForever>
  ldr   r0, =_estack
 8002790:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800279c:	080068f8 	.word	0x080068f8
  ldr r2, =_sbss
 80027a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027a4:	2000023c 	.word	0x2000023c

080027a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_IRQHandler>
	...

080027ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_Init+0x3c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Init+0x3c>)
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	0049      	lsls	r1, r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c6:	2003      	movs	r0, #3
 80027c8:	f000 f810 	bl	80027ec <HAL_InitTick>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e001      	b.n	80027dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fc10 	bl	8001ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	781b      	ldrb	r3, [r3, #0]
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_InitTick+0x88>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02b      	beq.n	800285c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_InitTick+0x8c>)
 8002806:	681c      	ldr	r4, [r3, #0]
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_InitTick+0x88>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	0019      	movs	r1, r3
 800280e:	23fa      	movs	r3, #250	; 0xfa
 8002810:	0098      	lsls	r0, r3, #2
 8002812:	f7fd fc87 	bl	8000124 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	0019      	movs	r1, r3
 800281a:	0020      	movs	r0, r4
 800281c:	f7fd fc82 	bl	8000124 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	0018      	movs	r0, r3
 8002824:	f000 fd91 	bl	800334a <HAL_SYSTICK_Config>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d112      	bne.n	8002852 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d80a      	bhi.n	8002848 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	2301      	movs	r3, #1
 8002836:	425b      	negs	r3, r3
 8002838:	2200      	movs	r2, #0
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fd70 	bl	8003320 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_InitTick+0x90>)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e00d      	b.n	8002864 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e008      	b.n	8002864 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002852:	230f      	movs	r3, #15
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e003      	b.n	8002864 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800285c:	230f      	movs	r3, #15
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002864:	230f      	movs	r3, #15
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	781b      	ldrb	r3, [r3, #0]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b005      	add	sp, #20
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000008 	.word	0x20000008
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004

08002880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_IncTick+0x1c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_IncTick+0x20>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	18d2      	adds	r2, r2, r3
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_IncTick+0x20>)
 8002892:	601a      	str	r2, [r3, #0]
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	20000008 	.word	0x20000008
 80028a0:	20000228 	.word	0x20000228

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b02      	ldr	r3, [pc, #8]	; (80028b4 <HAL_GetTick+0x10>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	20000228 	.word	0x20000228

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff fff0 	bl	80028a4 <HAL_GetTick>
 80028c4:	0003      	movs	r3, r0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	001a      	movs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	f7ff ffe0 	bl	80028a4 <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b004      	add	sp, #16
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	20000008 	.word	0x20000008

08002900 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002910:	401a      	ands	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	fe3fffff 	.word	0xfe3fffff

08002928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	23e0      	movs	r3, #224	; 0xe0
 8002936:	045b      	lsls	r3, r3, #17
 8002938:	4013      	ands	r3, r2
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}

08002942 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	2104      	movs	r1, #4
 8002956:	400a      	ands	r2, r1
 8002958:	2107      	movs	r1, #7
 800295a:	4091      	lsls	r1, r2
 800295c:	000a      	movs	r2, r1
 800295e:	43d2      	mvns	r2, r2
 8002960:	401a      	ands	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2104      	movs	r1, #4
 8002966:	400b      	ands	r3, r1
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4099      	lsls	r1, r3
 800296c:	000b      	movs	r3, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}

0800297c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	2104      	movs	r1, #4
 800298e:	400a      	ands	r2, r1
 8002990:	2107      	movs	r1, #7
 8002992:	4091      	lsls	r1, r2
 8002994:	000a      	movs	r2, r1
 8002996:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2104      	movs	r1, #4
 800299c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800299e:	40da      	lsrs	r2, r3
 80029a0:	0013      	movs	r3, r2
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b002      	add	sp, #8
 80029a8:	bd80      	pop	{r7, pc}

080029aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	211f      	movs	r1, #31
 80029be:	400a      	ands	r2, r1
 80029c0:	210f      	movs	r1, #15
 80029c2:	4091      	lsls	r1, r2
 80029c4:	000a      	movs	r2, r1
 80029c6:	43d2      	mvns	r2, r2
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	210f      	movs	r1, #15
 80029d0:	4019      	ands	r1, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	201f      	movs	r0, #31
 80029d6:	4003      	ands	r3, r0
 80029d8:	4099      	lsls	r1, r3
 80029da:	000b      	movs	r3, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	035b      	lsls	r3, r3, #13
 80029fc:	0b5b      	lsrs	r3, r3, #13
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	0352      	lsls	r2, r2, #13
 8002a1e:	0b52      	lsrs	r2, r2, #13
 8002a20:	43d2      	mvns	r2, r2
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	0212      	lsls	r2, r2, #8
 8002a44:	43d2      	mvns	r2, r2
 8002a46:	401a      	ands	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	07ffff00 	.word	0x07ffff00

08002a68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <LL_ADC_EnableInternalRegulator+0x24>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	0552      	lsls	r2, r2, #21
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	6fffffe8 	.word	0x6fffffe8

08002a90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	055b      	lsls	r3, r3, #21
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d101      	bne.n	8002aae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	231f      	movs	r3, #31
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e17f      	b.n	8002e22 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fa89 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2254      	movs	r2, #84	; 0x54
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff ffa3 	bl	8002a90 <LL_ADC_IsInternalRegulatorEnabled>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d115      	bne.n	8002b7a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff ff88 	bl	8002a68 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b58:	4bb4      	ldr	r3, [pc, #720]	; (8002e2c <HAL_ADC_Init+0x330>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	49b4      	ldr	r1, [pc, #720]	; (8002e30 <HAL_ADC_Init+0x334>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fd fae0 	bl	8000124 <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	3301      	adds	r3, #1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b6c:	e002      	b.n	8002b74 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f9      	bne.n	8002b6e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ff86 	bl	8002a90 <LL_ADC_IsInternalRegulatorEnabled>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba0:	231f      	movs	r3, #31
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff ff94 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	2210      	movs	r2, #16
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d000      	beq.n	8002bc2 <HAL_ADC_Init+0xc6>
 8002bc0:	e122      	b.n	8002e08 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d000      	beq.n	8002bca <HAL_ADC_Init+0xce>
 8002bc8:	e11e      	b.n	8002e08 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	4a99      	ldr	r2, [pc, #612]	; (8002e34 <HAL_ADC_Init+0x338>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff ff6a 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d000      	beq.n	8002bea <HAL_ADC_Init+0xee>
 8002be8:	e0ad      	b.n	8002d46 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7e1b      	ldrb	r3, [r3, #24]
 8002bf2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bf4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7e5b      	ldrb	r3, [r3, #25]
 8002bfa:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bfc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7e9b      	ldrb	r3, [r3, #26]
 8002c02:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c04:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_ADC_Init+0x118>
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	e000      	b.n	8002c16 <HAL_ADC_Init+0x11a>
 8002c14:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c16:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c1c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da04      	bge.n	8002c30 <HAL_ADC_Init+0x134>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	e001      	b.n	8002c34 <HAL_ADC_Init+0x138>
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002c34:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	5c5b      	ldrb	r3, [r3, r1]
 8002c3c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c3e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d115      	bne.n	8002c7c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	7e9b      	ldrb	r3, [r3, #26]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	0252      	lsls	r2, r2, #9
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e00b      	b.n	8002c7c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	2220      	movs	r2, #32
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	2201      	movs	r2, #1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c88:	23e0      	movs	r3, #224	; 0xe0
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c92:	4313      	orrs	r3, r2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_ADC_Init+0x33c>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	0f9b      	lsrs	r3, r3, #30
 8002cb6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	223c      	movs	r2, #60	; 0x3c
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d111      	bne.n	8002cf2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0f9b      	lsrs	r3, r3, #30
 8002cd4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cda:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ce0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002ce6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	2201      	movs	r2, #1
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	4a50      	ldr	r2, [pc, #320]	; (8002e3c <HAL_ADC_Init+0x340>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d018      	beq.n	8002d46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	05db      	lsls	r3, r3, #23
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d012      	beq.n	8002d46 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d00c      	beq.n	8002d46 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d2c:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_ADC_Init+0x344>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a44      	ldr	r2, [pc, #272]	; (8002e44 <HAL_ADC_Init+0x348>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	23f0      	movs	r3, #240	; 0xf0
 8002d3c:	039b      	lsls	r3, r3, #14
 8002d3e:	401a      	ands	r2, r3
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_ADC_Init+0x344>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	001a      	movs	r2, r3
 8002d50:	2100      	movs	r1, #0
 8002d52:	f7ff fdf6 	bl	8002942 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	493a      	ldr	r1, [pc, #232]	; (8002e48 <HAL_ADC_Init+0x34c>)
 8002d60:	001a      	movs	r2, r3
 8002d62:	f7ff fdee 	bl	8002942 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2110      	movs	r1, #16
 8002d7a:	4249      	negs	r1, r1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d80:	e018      	b.n	8002db4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	039b      	lsls	r3, r3, #14
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d112      	bne.n	8002db4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	221c      	movs	r2, #28
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2210      	movs	r2, #16
 8002da2:	4252      	negs	r2, r2
 8002da4:	409a      	lsls	r2, r3
 8002da6:	0011      	movs	r1, r2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2100      	movs	r1, #0
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff fdde 	bl	800297c <LL_ADC_GetSamplingTimeCommonChannels>
 8002dc0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10b      	bne.n	8002de2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	2201      	movs	r2, #1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002de0:	e01c      	b.n	8002e1c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	2212      	movs	r2, #18
 8002de8:	4393      	bics	r3, r2
 8002dea:	2210      	movs	r2, #16
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2201      	movs	r2, #1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e06:	e009      	b.n	8002e1c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e14:	231f      	movs	r3, #31
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	781b      	ldrb	r3, [r3, #0]
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b008      	add	sp, #32
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	00030d40 	.word	0x00030d40
 8002e34:	fffffefd 	.word	0xfffffefd
 8002e38:	fffe0201 	.word	0xfffe0201
 8002e3c:	1ffffc02 	.word	0x1ffffc02
 8002e40:	40012708 	.word	0x40012708
 8002e44:	ffc3ffff 	.word	0xffc3ffff
 8002e48:	07ffff04 	.word	0x07ffff04

08002e4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e56:	2317      	movs	r3, #23
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2254      	movs	r2, #84	; 0x54
 8002e66:	5c9b      	ldrb	r3, [r3, r2]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x24>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e1c0      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x3a6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2254      	movs	r2, #84	; 0x54
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7ff fe2c 	bl	8002ada <LL_ADC_REG_IsConversionOngoing>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d000      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x3c>
 8002e86:	e1a3      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d100      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x46>
 8002e90:	e143      	b.n	800311a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ea2:	4ac1      	ldr	r2, [pc, #772]	; (80031a8 <HAL_ADC_ConfigChannel+0x35c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	0010      	movs	r0, r2
 8002eb4:	f7ff fd99 	bl	80029ea <LL_ADC_REG_SetSequencerChAdd>
 8002eb8:	e0c9      	b.n	800304e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	211f      	movs	r1, #31
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	4099      	lsls	r1, r3
 8002eca:	000b      	movs	r3, r1
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	035b      	lsls	r3, r3, #13
 8002ed8:	0b5b      	lsrs	r3, r3, #13
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x9c>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	221f      	movs	r2, #31
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	e098      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d000      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0xa8>
 8002ef2:	e091      	b.n	8003018 <HAL_ADC_ConfigChannel+0x1cc>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d000      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0xb4>
 8002efe:	e089      	b.n	8003014 <HAL_ADC_ConfigChannel+0x1c8>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2204      	movs	r2, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	d000      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0xc0>
 8002f0a:	e081      	b.n	8003010 <HAL_ADC_ConfigChannel+0x1c4>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2208      	movs	r2, #8
 8002f12:	4013      	ands	r3, r2
 8002f14:	d000      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0xcc>
 8002f16:	e079      	b.n	800300c <HAL_ADC_ConfigChannel+0x1c0>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d000      	beq.n	8002f24 <HAL_ADC_ConfigChannel+0xd8>
 8002f22:	e071      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1bc>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d000      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0xe4>
 8002f2e:	e069      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1b8>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	4013      	ands	r3, r2
 8002f38:	d000      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0xf0>
 8002f3a:	e061      	b.n	8003000 <HAL_ADC_ConfigChannel+0x1b4>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	4013      	ands	r3, r2
 8002f44:	d000      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0xfc>
 8002f46:	e059      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x1b0>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d151      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x1ac>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d149      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1a8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d141      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1a4>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	4013      	ands	r3, r2
 8002f76:	d139      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1a0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	015b      	lsls	r3, r3, #5
 8002f80:	4013      	ands	r3, r2
 8002f82:	d131      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x19c>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d129      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x198>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d121      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x194>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d119      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x190>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	025b      	lsls	r3, r3, #9
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d111      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x18c>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x188>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	02db      	lsls	r3, r3, #11
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d001      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x184>
 8002fcc:	2312      	movs	r3, #18
 8002fce:	e024      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e022      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fd4:	2311      	movs	r3, #17
 8002fd6:	e020      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	e01e      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fdc:	230f      	movs	r3, #15
 8002fde:	e01c      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	e01a      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fe4:	230d      	movs	r3, #13
 8002fe6:	e018      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fe8:	230c      	movs	r3, #12
 8002fea:	e016      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002fec:	230b      	movs	r3, #11
 8002fee:	e014      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	e012      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002ff4:	2309      	movs	r3, #9
 8002ff6:	e010      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	e00e      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	e00c      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003000:	2306      	movs	r3, #6
 8003002:	e00a      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003004:	2305      	movs	r3, #5
 8003006:	e008      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003008:	2304      	movs	r3, #4
 800300a:	e006      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 800300c:	2303      	movs	r3, #3
 800300e:	e004      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003010:	2302      	movs	r3, #2
 8003012:	e002      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_ADC_ConfigChannel+0x1ce>
 8003018:	2300      	movs	r3, #0
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	6852      	ldr	r2, [r2, #4]
 800301e:	201f      	movs	r0, #31
 8003020:	4002      	ands	r2, r0
 8003022:	4093      	lsls	r3, r2
 8003024:	000a      	movs	r2, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d808      	bhi.n	800304e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	001a      	movs	r2, r3
 800304a:	f7ff fcae 	bl	80029aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	001a      	movs	r2, r3
 800305c:	f7ff fce8 	bl	8002a30 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db00      	blt.n	800306a <HAL_ADC_ConfigChannel+0x21e>
 8003068:	e0bc      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800306a:	4b50      	ldr	r3, [pc, #320]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff fc5b 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 8003072:	0003      	movs	r3, r0
 8003074:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_ADC_ConfigChannel+0x364>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d122      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003088:	d11d      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	0412      	lsls	r2, r2, #16
 8003090:	4313      	orrs	r3, r2
 8003092:	4a46      	ldr	r2, [pc, #280]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 8003094:	0019      	movs	r1, r3
 8003096:	0010      	movs	r0, r2
 8003098:	f7ff fc32 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309c:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <HAL_ADC_ConfigChannel+0x368>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4945      	ldr	r1, [pc, #276]	; (80031b8 <HAL_ADC_ConfigChannel+0x36c>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7fd f83e 	bl	8000124 <__udivsi3>
 80030a8:	0003      	movs	r3, r0
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	0013      	movs	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	189b      	adds	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b6:	e002      	b.n	80030be <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030c4:	e08e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_ADC_ConfigChannel+0x370>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10e      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	045b      	lsls	r3, r3, #17
 80030d6:	4013      	ands	r3, r2
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	0452      	lsls	r2, r2, #17
 80030e0:	4313      	orrs	r3, r2
 80030e2:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 80030e4:	0019      	movs	r1, r3
 80030e6:	0010      	movs	r0, r2
 80030e8:	f7ff fc0a 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
 80030ec:	e07a      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a33      	ldr	r2, [pc, #204]	; (80031c0 <HAL_ADC_ConfigChannel+0x374>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d000      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x2ae>
 80030f8:	e074      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	03db      	lsls	r3, r3, #15
 8003100:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003102:	d000      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x2ba>
 8003104:	e06e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	03d2      	lsls	r2, r2, #15
 800310c:	4313      	orrs	r3, r2
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 8003110:	0019      	movs	r1, r3
 8003112:	0010      	movs	r0, r2
 8003114:	f7ff fbf4 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
 8003118:	e064      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	429a      	cmp	r2, r3
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_ADC_ConfigChannel+0x35c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0019      	movs	r1, r3
 800313a:	0010      	movs	r0, r2
 800313c:	f7ff fc66 	bl	8002a0c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da4d      	bge.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003148:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff fbec 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 8003150:	0003      	movs	r3, r0
 8003152:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_ADC_ConfigChannel+0x364>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_ADC_ConfigChannel+0x378>)
 8003162:	4013      	ands	r3, r2
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 8003166:	0019      	movs	r1, r3
 8003168:	0010      	movs	r0, r2
 800316a:	f7ff fbc9 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
 800316e:	e039      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_ADC_ConfigChannel+0x370>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <HAL_ADC_ConfigChannel+0x37c>)
 800317e:	4013      	ands	r3, r2
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f7ff fbbb 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
 800318a:	e02b      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_ADC_ConfigChannel+0x374>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d126      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_ADC_ConfigChannel+0x380>)
 800319a:	4013      	ands	r3, r2
 800319c:	4a03      	ldr	r2, [pc, #12]	; (80031ac <HAL_ADC_ConfigChannel+0x360>)
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f7ff fbad 	bl	8002900 <LL_ADC_SetCommonPathInternalCh>
 80031a6:	e01d      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x398>
 80031a8:	80000004 	.word	0x80000004
 80031ac:	40012708 	.word	0x40012708
 80031b0:	b0001000 	.word	0xb0001000
 80031b4:	20000000 	.word	0x20000000
 80031b8:	00030d40 	.word	0x00030d40
 80031bc:	b8004000 	.word	0xb8004000
 80031c0:	b4002000 	.word	0xb4002000
 80031c4:	ff7fffff 	.word	0xff7fffff
 80031c8:	feffffff 	.word	0xfeffffff
 80031cc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	2220      	movs	r2, #32
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031dc:	2317      	movs	r3, #23
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2254      	movs	r2, #84	; 0x54
 80031e8:	2100      	movs	r1, #0
 80031ea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80031ec:	2317      	movs	r3, #23
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b006      	add	sp, #24
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)

080031fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	0002      	movs	r2, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b7f      	cmp	r3, #127	; 0x7f
 8003210:	d828      	bhi.n	8003264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <__NVIC_SetPriority+0xd4>)
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b25b      	sxtb	r3, r3
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	33c0      	adds	r3, #192	; 0xc0
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	589b      	ldr	r3, [r3, r2]
 8003222:	1dfa      	adds	r2, r7, #7
 8003224:	7812      	ldrb	r2, [r2, #0]
 8003226:	0011      	movs	r1, r2
 8003228:	2203      	movs	r2, #3
 800322a:	400a      	ands	r2, r1
 800322c:	00d2      	lsls	r2, r2, #3
 800322e:	21ff      	movs	r1, #255	; 0xff
 8003230:	4091      	lsls	r1, r2
 8003232:	000a      	movs	r2, r1
 8003234:	43d2      	mvns	r2, r2
 8003236:	401a      	ands	r2, r3
 8003238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	22ff      	movs	r2, #255	; 0xff
 8003240:	401a      	ands	r2, r3
 8003242:	1dfb      	adds	r3, r7, #7
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	0018      	movs	r0, r3
 8003248:	2303      	movs	r3, #3
 800324a:	4003      	ands	r3, r0
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003250:	481f      	ldr	r0, [pc, #124]	; (80032d0 <__NVIC_SetPriority+0xd4>)
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	430a      	orrs	r2, r1
 800325c:	33c0      	adds	r3, #192	; 0xc0
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003262:	e031      	b.n	80032c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <__NVIC_SetPriority+0xd8>)
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0019      	movs	r1, r3
 800326c:	230f      	movs	r3, #15
 800326e:	400b      	ands	r3, r1
 8003270:	3b08      	subs	r3, #8
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3306      	adds	r3, #6
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	3304      	adds	r3, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1dfa      	adds	r2, r7, #7
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	0011      	movs	r1, r2
 8003284:	2203      	movs	r2, #3
 8003286:	400a      	ands	r2, r1
 8003288:	00d2      	lsls	r2, r2, #3
 800328a:	21ff      	movs	r1, #255	; 0xff
 800328c:	4091      	lsls	r1, r2
 800328e:	000a      	movs	r2, r1
 8003290:	43d2      	mvns	r2, r2
 8003292:	401a      	ands	r2, r3
 8003294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	401a      	ands	r2, r3
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	0018      	movs	r0, r3
 80032a4:	2303      	movs	r3, #3
 80032a6:	4003      	ands	r3, r0
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ac:	4809      	ldr	r0, [pc, #36]	; (80032d4 <__NVIC_SetPriority+0xd8>)
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	001c      	movs	r4, r3
 80032b4:	230f      	movs	r3, #15
 80032b6:	4023      	ands	r3, r4
 80032b8:	3b08      	subs	r3, #8
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	430a      	orrs	r2, r1
 80032be:	3306      	adds	r3, #6
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	18c3      	adds	r3, r0, r3
 80032c4:	3304      	adds	r3, #4
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b003      	add	sp, #12
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	045b      	lsls	r3, r3, #17
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d301      	bcc.n	80032f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ec:	2301      	movs	r3, #1
 80032ee:	e010      	b.n	8003312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <SysTick_Config+0x44>)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	3a01      	subs	r2, #1
 80032f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f8:	2301      	movs	r3, #1
 80032fa:	425b      	negs	r3, r3
 80032fc:	2103      	movs	r1, #3
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff7c 	bl	80031fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <SysTick_Config+0x44>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <SysTick_Config+0x44>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	210f      	movs	r1, #15
 800332c:	187b      	adds	r3, r7, r1
 800332e:	1c02      	adds	r2, r0, #0
 8003330:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	187b      	adds	r3, r7, r1
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b25b      	sxtb	r3, r3
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff ff5d 	bl	80031fc <__NVIC_SetPriority>
}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b004      	add	sp, #16
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff ffbf 	bl	80032d8 <SysTick_Config>
 800335a:	0003      	movs	r3, r0
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e056      	b.n	8003424 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7f5b      	ldrb	r3, [r3, #29]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f7fe fe9f 	bl	80020cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	791b      	ldrb	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10c      	bne.n	80033b6 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <HAL_CRC_Init+0xc8>)
 80033a2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2118      	movs	r1, #24
 80033b0:	438a      	bics	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	e00b      	b.n	80033ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	0018      	movs	r0, r3
 80033c2:	f000 f835 	bl	8003430 <HAL_CRCEx_Polynomial_Set>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e02a      	b.n	8003424 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	795b      	ldrb	r3, [r3, #5]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2201      	movs	r2, #1
 80033dc:	4252      	negs	r2, r2
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	e004      	b.n	80033ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6912      	ldr	r2, [r2, #16]
 80033ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2260      	movs	r2, #96	; 0x60
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	04c11db7 	.word	0x04c11db7

08003430 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2317      	movs	r3, #23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003444:	231f      	movs	r3, #31
 8003446:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	613a      	str	r2, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_CRCEx_Polynomial_Set+0x36>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	221f      	movs	r2, #31
 8003458:	4013      	ands	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	40da      	lsrs	r2, r3
 800345e:	0013      	movs	r3, r2
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	d0f1      	beq.n	800344a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b18      	cmp	r3, #24
 800346a:	d00f      	beq.n	800348c <HAL_CRCEx_Polynomial_Set+0x5c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b18      	cmp	r3, #24
 8003470:	d824      	bhi.n	80034bc <HAL_CRCEx_Polynomial_Set+0x8c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d011      	beq.n	800349c <HAL_CRCEx_Polynomial_Set+0x6c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d81e      	bhi.n	80034bc <HAL_CRCEx_Polynomial_Set+0x8c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_CRCEx_Polynomial_Set+0x96>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d010      	beq.n	80034ac <HAL_CRCEx_Polynomial_Set+0x7c>
 800348a:	e017      	b.n	80034bc <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d91b      	bls.n	80034ca <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8003492:	2317      	movs	r3, #23
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
      }
      break;
 800349a:	e016      	b.n	80034ca <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d915      	bls.n	80034ce <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80034a2:	2317      	movs	r3, #23
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80034aa:	e010      	b.n	80034ce <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	d90f      	bls.n	80034d2 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80034b2:	2317      	movs	r3, #23
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80034ba:	e00a      	b.n	80034d2 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80034bc:	2317      	movs	r3, #23
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
      break;
 80034c4:	e006      	b.n	80034d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	e004      	b.n	80034d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	e002      	b.n	80034d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	e000      	b.n	80034d4 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80034d2:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80034d4:	2317      	movs	r3, #23
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10e      	bne.n	80034fc <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2218      	movs	r2, #24
 80034ee:	4393      	bics	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80034fc:	2317      	movs	r3, #23
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b006      	add	sp, #24
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e147      	b.n	80037ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x28>
 8003532:	e138      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	4013      	ands	r3, r2
 800353c:	2b01      	cmp	r3, #1
 800353e:	d005      	beq.n	800354c <HAL_GPIO_Init+0x40>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2203      	movs	r2, #3
 8003546:	4013      	ands	r3, r2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d130      	bne.n	80035ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	409a      	lsls	r2, r3
 800355a:	0013      	movs	r3, r2
 800355c:	43da      	mvns	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	43da      	mvns	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	2201      	movs	r2, #1
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2203      	movs	r2, #3
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d017      	beq.n	80035ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	43da      	mvns	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	58d3      	ldr	r3, [r2, r3]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2107      	movs	r1, #7
 8003622:	400b      	ands	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	409a      	lsls	r2, r3
 800364c:	0013      	movs	r3, r2
 800364e:	43da      	mvns	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	401a      	ands	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_Init+0x174>
 800367e:	e092      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003680:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3318      	adds	r3, #24
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	220f      	movs	r2, #15
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x1ca>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a45      	ldr	r2, [pc, #276]	; (80037c8 <HAL_GPIO_Init+0x2bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x1c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a44      	ldr	r2, [pc, #272]	; (80037cc <HAL_GPIO_Init+0x2c0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x1c2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a43      	ldr	r2, [pc, #268]	; (80037d0 <HAL_GPIO_Init+0x2c4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x1be>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d6:	2300      	movs	r3, #0
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	2103      	movs	r1, #3
 80036dc:	400a      	ands	r2, r1
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4093      	lsls	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036e8:	4936      	ldr	r1, [pc, #216]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3318      	adds	r3, #24
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f6:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43da      	mvns	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	035b      	lsls	r3, r3, #13
 800370e:	4013      	ands	r3, r2
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	039b      	lsls	r3, r3, #14
 8003738:	4013      	ands	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800374c:	2384      	movs	r3, #132	; 0x84
 800374e:	58d3      	ldr	r3, [r2, r3]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43da      	mvns	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	4013      	ands	r3, r2
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003770:	4914      	ldr	r1, [pc, #80]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003772:	2284      	movs	r2, #132	; 0x84
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003778:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	58d3      	ldr	r3, [r2, r3]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43da      	mvns	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	025b      	lsls	r3, r3, #9
 8003792:	4013      	ands	r3, r2
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800379e:	4909      	ldr	r1, [pc, #36]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	40da      	lsrs	r2, r3
 80037b4:	1e13      	subs	r3, r2, #0
 80037b6:	d000      	beq.n	80037ba <HAL_GPIO_Init+0x2ae>
 80037b8:	e6b0      	b.n	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b006      	add	sp, #24
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021800 	.word	0x40021800
 80037c8:	50000400 	.word	0x50000400
 80037cc:	50000800 	.word	0x50000800
 80037d0:	50000c00 	.word	0x50000c00

080037d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	000a      	movs	r2, r1
 80037de:	1cbb      	adds	r3, r7, #2
 80037e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	1cba      	adds	r2, r7, #2
 80037e8:	8812      	ldrh	r2, [r2, #0]
 80037ea:	4013      	ands	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80037ee:	230f      	movs	r3, #15
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e003      	b.n	8003800 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037f8:	230f      	movs	r3, #15
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003800:	230f      	movs	r3, #15
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	0008      	movs	r0, r1
 8003818:	0011      	movs	r1, r2
 800381a:	1cbb      	adds	r3, r7, #2
 800381c:	1c02      	adds	r2, r0, #0
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	1c7b      	adds	r3, r7, #1
 8003822:	1c0a      	adds	r2, r1, #0
 8003824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003826:	1c7b      	adds	r3, r7, #1
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003836:	e003      	b.n	8003840 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003838:	1cbb      	adds	r3, r7, #2
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003856:	4013      	ands	r3, r2
 8003858:	0019      	movs	r1, r3
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d11f      	bne.n	80038ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	0013      	movs	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	189b      	adds	r3, r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4912      	ldr	r1, [pc, #72]	; (80038c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fc52 	bl	8000124 <__udivsi3>
 8003880:	0003      	movs	r3, r0
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	e008      	b.n	800389a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e009      	b.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	401a      	ands	r2, r3
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0ed      	beq.n	8003888 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40007000 	.word	0x40007000
 80038bc:	fffff9ff 	.word	0xfffff9ff
 80038c0:	20000000 	.word	0x20000000
 80038c4:	000f4240 	.word	0x000f4240

080038c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	23e0      	movs	r3, #224	; 0xe0
 80038d2:	01db      	lsls	r3, r3, #7
 80038d4:	4013      	ands	r3, r2
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e2f3      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d100      	bne.n	80038fe <HAL_RCC_OscConfig+0x1e>
 80038fc:	e07c      	b.n	80039f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fe:	4bc3      	ldr	r3, [pc, #780]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2238      	movs	r2, #56	; 0x38
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003908:	4bc0      	ldr	r3, [pc, #768]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2203      	movs	r2, #3
 800390e:	4013      	ands	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b10      	cmp	r3, #16
 8003916:	d102      	bne.n	800391e <HAL_RCC_OscConfig+0x3e>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d002      	beq.n	8003924 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d10b      	bne.n	800393c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	4bb9      	ldr	r3, [pc, #740]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	029b      	lsls	r3, r3, #10
 800392c:	4013      	ands	r3, r2
 800392e:	d062      	beq.n	80039f6 <HAL_RCC_OscConfig+0x116>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d15e      	bne.n	80039f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e2ce      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x78>
 8003948:	4bb0      	ldr	r3, [pc, #704]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4baf      	ldr	r3, [pc, #700]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 800394e:	2180      	movs	r1, #128	; 0x80
 8003950:	0249      	lsls	r1, r1, #9
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e020      	b.n	800399a <HAL_RCC_OscConfig+0xba>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	23a0      	movs	r3, #160	; 0xa0
 800395e:	02db      	lsls	r3, r3, #11
 8003960:	429a      	cmp	r2, r3
 8003962:	d10e      	bne.n	8003982 <HAL_RCC_OscConfig+0xa2>
 8003964:	4ba9      	ldr	r3, [pc, #676]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4ba8      	ldr	r3, [pc, #672]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	02c9      	lsls	r1, r1, #11
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	4ba6      	ldr	r3, [pc, #664]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4ba5      	ldr	r3, [pc, #660]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	0249      	lsls	r1, r1, #9
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0xba>
 8003982:	4ba2      	ldr	r3, [pc, #648]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4ba1      	ldr	r3, [pc, #644]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003988:	49a1      	ldr	r1, [pc, #644]	; (8003c10 <HAL_RCC_OscConfig+0x330>)
 800398a:	400a      	ands	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	4b9f      	ldr	r3, [pc, #636]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b9e      	ldr	r3, [pc, #632]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003994:	499f      	ldr	r1, [pc, #636]	; (8003c14 <HAL_RCC_OscConfig+0x334>)
 8003996:	400a      	ands	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d014      	beq.n	80039cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fe ff7f 	bl	80028a4 <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe ff7a 	bl	80028a4 <HAL_GetTick>
 80039b0:	0002      	movs	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e28d      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039be:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	029b      	lsls	r3, r3, #10
 80039c6:	4013      	ands	r3, r2
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xcc>
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe ff6a 	bl	80028a4 <HAL_GetTick>
 80039d0:	0003      	movs	r3, r0
 80039d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d6:	f7fe ff65 	bl	80028a4 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e278      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e8:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	029b      	lsls	r3, r3, #10
 80039f0:	4013      	ands	r3, r2
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0xf6>
 80039f4:	e000      	b.n	80039f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2202      	movs	r2, #2
 80039fe:	4013      	ands	r3, r2
 8003a00:	d100      	bne.n	8003a04 <HAL_RCC_OscConfig+0x124>
 8003a02:	e099      	b.n	8003b38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a04:	4b81      	ldr	r3, [pc, #516]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2238      	movs	r2, #56	; 0x38
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2203      	movs	r2, #3
 8003a14:	4013      	ands	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d102      	bne.n	8003a24 <HAL_RCC_OscConfig+0x144>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d002      	beq.n	8003a2a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d135      	bne.n	8003a96 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a2a:	4b78      	ldr	r3, [pc, #480]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4013      	ands	r3, r2
 8003a34:	d005      	beq.n	8003a42 <HAL_RCC_OscConfig+0x162>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e24b      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b72      	ldr	r3, [pc, #456]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a74      	ldr	r2, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x338>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	4b6e      	ldr	r3, [pc, #440]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d112      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a5e:	4b6b      	ldr	r3, [pc, #428]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x33c>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	4b67      	ldr	r3, [pc, #412]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a72:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0adb      	lsrs	r3, r3, #11
 8003a78:	2207      	movs	r2, #7
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	4a68      	ldr	r2, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x340>)
 8003a7e:	40da      	lsrs	r2, r3
 8003a80:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x344>)
 8003a82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x348>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7fe feaf 	bl	80027ec <HAL_InitTick>
 8003a8e:	1e03      	subs	r3, r0, #0
 8003a90:	d051      	beq.n	8003b36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e221      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d030      	beq.n	8003b00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5e      	ldr	r2, [pc, #376]	; (8003c1c <HAL_RCC_OscConfig+0x33c>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ab2:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	0049      	lsls	r1, r1, #1
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fef0 	bl	80028a4 <HAL_GetTick>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fe feeb 	bl	80028a4 <HAL_GetTick>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1fe      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_RCC_OscConfig+0x338>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	e01b      	b.n	8003b38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b00:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b06:	4949      	ldr	r1, [pc, #292]	; (8003c2c <HAL_RCC_OscConfig+0x34c>)
 8003b08:	400a      	ands	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe feca 	bl	80028a4 <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe fec5 	bl	80028a4 <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1d8      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b28:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4013      	ands	r3, r2
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x236>
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d047      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b42:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2238      	movs	r2, #56	; 0x38
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b18      	cmp	r3, #24
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2202      	movs	r2, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d138      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e1ba      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b70:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe94 	bl	80028a4 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fe8f 	bl	80028a4 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1a2      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0f1      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2a2>
 8003b9e:	e018      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	438a      	bics	r2, r1
 8003baa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe fe7a 	bl	80028a4 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fe fe75 	bl	80028a4 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e188      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f1      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d100      	bne.n	8003bde <HAL_RCC_OscConfig+0x2fe>
 8003bdc:	e0c6      	b.n	8003d6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	231f      	movs	r3, #31
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2238      	movs	r2, #56	; 0x38
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d11e      	bne.n	8003c30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x31e>
 8003bfc:	e0b6      	b.n	8003d6c <HAL_RCC_OscConfig+0x48c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d000      	beq.n	8003c08 <HAL_RCC_OscConfig+0x328>
 8003c06:	e0b1      	b.n	8003d6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e166      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	fffeffff 	.word	0xfffeffff
 8003c14:	fffbffff 	.word	0xfffbffff
 8003c18:	ffff80ff 	.word	0xffff80ff
 8003c1c:	ffffc7ff 	.word	0xffffc7ff
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	20000000 	.word	0x20000000
 8003c28:	20000004 	.word	0x20000004
 8003c2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c30:	4bac      	ldr	r3, [pc, #688]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	055b      	lsls	r3, r3, #21
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x360>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x362>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d011      	beq.n	8003c6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4ba7      	ldr	r3, [pc, #668]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4a:	4ba6      	ldr	r3, [pc, #664]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	0549      	lsls	r1, r1, #21
 8003c50:	430a      	orrs	r2, r1
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c54:	4ba3      	ldr	r3, [pc, #652]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	055b      	lsls	r3, r3, #21
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c62:	231f      	movs	r3, #31
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6a:	4b9f      	ldr	r3, [pc, #636]	; (8003ee8 <HAL_RCC_OscConfig+0x608>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4013      	ands	r3, r2
 8003c74:	d11a      	bne.n	8003cac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c76:	4b9c      	ldr	r3, [pc, #624]	; (8003ee8 <HAL_RCC_OscConfig+0x608>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b9b      	ldr	r3, [pc, #620]	; (8003ee8 <HAL_RCC_OscConfig+0x608>)
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	0049      	lsls	r1, r1, #1
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fe0e 	bl	80028a4 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe fe09 	bl	80028a4 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e11c      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca0:	4b91      	ldr	r3, [pc, #580]	; (8003ee8 <HAL_RCC_OscConfig+0x608>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x3e2>
 8003cb4:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cb8:	4b8a      	ldr	r3, [pc, #552]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x41c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x404>
 8003cca:	4b86      	ldr	r3, [pc, #536]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cd6:	4b83      	ldr	r3, [pc, #524]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x41c>
 8003ce4:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003ce6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cf0:	4b7c      	ldr	r3, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cf4:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d014      	beq.n	8003d2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fdce 	bl	80028a4 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	e009      	b.n	8003d22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fdc9 	bl	80028a4 <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	4a74      	ldr	r2, [pc, #464]	; (8003eec <HAL_RCC_OscConfig+0x60c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0db      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	2202      	movs	r2, #2
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x42e>
 8003d2c:	e013      	b.n	8003d56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fdb9 	bl	80028a4 <HAL_GetTick>
 8003d32:	0003      	movs	r3, r0
 8003d34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d36:	e009      	b.n	8003d4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe fdb4 	bl	80028a4 <HAL_GetTick>
 8003d3c:	0002      	movs	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <HAL_RCC_OscConfig+0x60c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0c6      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d4c:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2202      	movs	r2, #2
 8003d52:	4013      	ands	r3, r2
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d56:	231f      	movs	r3, #31
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d66:	4962      	ldr	r1, [pc, #392]	; (8003ef0 <HAL_RCC_OscConfig+0x610>)
 8003d68:	400a      	ands	r2, r1
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d100      	bne.n	8003d76 <HAL_RCC_OscConfig+0x496>
 8003d74:	e0b0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d76:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2238      	movs	r2, #56	; 0x38
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d100      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4a4>
 8003d82:	e078      	b.n	8003e76 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d153      	bne.n	8003e34 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	4b55      	ldr	r3, [pc, #340]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b54      	ldr	r3, [pc, #336]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003d92:	4958      	ldr	r1, [pc, #352]	; (8003ef4 <HAL_RCC_OscConfig+0x614>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fd84 	bl	80028a4 <HAL_GetTick>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fe fd7f 	bl	80028a4 <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e092      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	049b      	lsls	r3, r3, #18
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_RCC_OscConfig+0x618>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	431a      	orrs	r2, r3
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dee:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b3c      	ldr	r3, [pc, #240]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0449      	lsls	r1, r1, #17
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003dfc:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	0549      	lsls	r1, r1, #21
 8003e06:	430a      	orrs	r2, r1
 8003e08:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fd4b 	bl	80028a4 <HAL_GetTick>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe fd46 	bl	80028a4 <HAL_GetTick>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e059      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e26:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	049b      	lsls	r3, r3, #18
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x534>
 8003e32:	e051      	b.n	8003ed8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e3a:	492e      	ldr	r1, [pc, #184]	; (8003ef4 <HAL_RCC_OscConfig+0x614>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fe fd30 	bl	80028a4 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fe fd2b 	bl	80028a4 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03e      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	049b      	lsls	r3, r3, #18
 8003e64:	4013      	ands	r3, r2
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e6e:	4923      	ldr	r1, [pc, #140]	; (8003efc <HAL_RCC_OscConfig+0x61c>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e030      	b.n	8003ed8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e02b      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_RCC_OscConfig+0x604>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d11e      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2270      	movs	r2, #112	; 0x70
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d117      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	23fe      	movs	r3, #254	; 0xfe
 8003ea8:	01db      	lsls	r3, r3, #7
 8003eaa:	401a      	ands	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	23f8      	movs	r3, #248	; 0xf8
 8003eba:	039b      	lsls	r3, r3, #14
 8003ebc:	401a      	ands	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	0f5b      	lsrs	r3, r3, #29
 8003eca:	075a      	lsls	r2, r3, #29
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b008      	add	sp, #32
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	00001388 	.word	0x00001388
 8003ef0:	efffffff 	.word	0xefffffff
 8003ef4:	feffffff 	.word	0xfeffffff
 8003ef8:	1fc1808c 	.word	0x1fc1808c
 8003efc:	effefffc 	.word	0xeffefffc

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0e9      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2207      	movs	r2, #7
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d91e      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2207      	movs	r2, #7
 8003f28:	4393      	bics	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f34:	f7fe fcb6 	bl	80028a4 <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f3c:	e009      	b.n	8003f52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3e:	f7fe fcb1 	bl	80028a4 <HAL_GetTick>
 8003f42:	0002      	movs	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	4a6a      	ldr	r2, [pc, #424]	; (80040f4 <HAL_RCC_ClockConfig+0x1f4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0ca      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f52:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2207      	movs	r2, #7
 8003f58:	4013      	ands	r3, r2
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1ee      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	4013      	ands	r3, r2
 8003f72:	d006      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f74:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f7a:	21e0      	movs	r1, #224	; 0xe0
 8003f7c:	01c9      	lsls	r1, r1, #7
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4a5d      	ldr	r2, [pc, #372]	; (80040fc <HAL_RCC_ClockConfig+0x1fc>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d057      	beq.n	8004050 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d12b      	bne.n	800400c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e097      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc0:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	049b      	lsls	r3, r3, #18
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d11f      	bne.n	800400c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e08b      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd8:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d113      	bne.n	800400c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e07f      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d108      	bne.n	800400c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e074      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	2202      	movs	r2, #2
 8004004:	4013      	ands	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e06d      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400c:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2207      	movs	r2, #7
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fe fc40 	bl	80028a4 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004028:	e009      	b.n	800403e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402a:	f7fe fc3b 	bl	80028a4 <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <HAL_RCC_ClockConfig+0x1f4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e054      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b2e      	ldr	r3, [pc, #184]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2238      	movs	r2, #56	; 0x38
 8004044:	401a      	ands	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	429a      	cmp	r2, r3
 800404e:	d1ec      	bne.n	800402a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2207      	movs	r2, #7
 8004056:	4013      	ands	r3, r2
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d21e      	bcs.n	800409c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2207      	movs	r2, #7
 8004064:	4393      	bics	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004070:	f7fe fc18 	bl	80028a4 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004078:	e009      	b.n	800408e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407a:	f7fe fc13 	bl	80028a4 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_RCC_ClockConfig+0x1f4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e02c      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800408e:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_RCC_ClockConfig+0x1f0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2207      	movs	r2, #7
 8004094:	4013      	ands	r3, r2
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d1ee      	bne.n	800407a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2204      	movs	r2, #4
 80040a2:	4013      	ands	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <HAL_RCC_ClockConfig+0x200>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040ba:	f000 f829 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040be:	0001      	movs	r1, r0
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	220f      	movs	r2, #15
 80040c8:	401a      	ands	r2, r3
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <HAL_RCC_ClockConfig+0x204>)
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	58d3      	ldr	r3, [r2, r3]
 80040d0:	221f      	movs	r2, #31
 80040d2:	4013      	ands	r3, r2
 80040d4:	000a      	movs	r2, r1
 80040d6:	40da      	lsrs	r2, r3
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_ClockConfig+0x208>)
 80040da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x20c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe fb83 	bl	80027ec <HAL_InitTick>
 80040e6:	0003      	movs	r3, r0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b004      	add	sp, #16
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40022000 	.word	0x40022000
 80040f4:	00001388 	.word	0x00001388
 80040f8:	40021000 	.word	0x40021000
 80040fc:	fffff0ff 	.word	0xfffff0ff
 8004100:	ffff8fff 	.word	0xffff8fff
 8004104:	0800682c 	.word	0x0800682c
 8004108:	20000000 	.word	0x20000000
 800410c:	20000004 	.word	0x20000004

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2238      	movs	r2, #56	; 0x38
 800411c:	4013      	ands	r3, r2
 800411e:	d10f      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0adb      	lsrs	r3, r3, #11
 8004126:	2207      	movs	r2, #7
 8004128:	4013      	ands	r3, r2
 800412a:	2201      	movs	r2, #1
 800412c:	409a      	lsls	r2, r3
 800412e:	0013      	movs	r3, r2
 8004130:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004132:	6839      	ldr	r1, [r7, #0]
 8004134:	4835      	ldr	r0, [pc, #212]	; (800420c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004136:	f7fb fff5 	bl	8000124 <__udivsi3>
 800413a:	0003      	movs	r3, r0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e05d      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2238      	movs	r2, #56	; 0x38
 8004146:	4013      	ands	r3, r2
 8004148:	2b08      	cmp	r3, #8
 800414a:	d102      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <HAL_RCC_GetSysClockFreq+0x100>)
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e054      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2238      	movs	r2, #56	; 0x38
 8004158:	4013      	ands	r3, r2
 800415a:	2b10      	cmp	r3, #16
 800415c:	d138      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2203      	movs	r2, #3
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	2207      	movs	r2, #7
 8004170:	4013      	ands	r3, r2
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d10d      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4824      	ldr	r0, [pc, #144]	; (8004210 <HAL_RCC_GetSysClockFreq+0x100>)
 8004180:	f7fb ffd0 	bl	8000124 <__udivsi3>
 8004184:	0003      	movs	r3, r0
 8004186:	0019      	movs	r1, r3
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	227f      	movs	r2, #127	; 0x7f
 8004190:	4013      	ands	r3, r2
 8004192:	434b      	muls	r3, r1
 8004194:	617b      	str	r3, [r7, #20]
        break;
 8004196:	e00d      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	481c      	ldr	r0, [pc, #112]	; (800420c <HAL_RCC_GetSysClockFreq+0xfc>)
 800419c:	f7fb ffc2 	bl	8000124 <__udivsi3>
 80041a0:	0003      	movs	r3, r0
 80041a2:	0019      	movs	r1, r3
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	227f      	movs	r2, #127	; 0x7f
 80041ac:	4013      	ands	r3, r2
 80041ae:	434b      	muls	r3, r1
 80041b0:	617b      	str	r3, [r7, #20]
        break;
 80041b2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0f5b      	lsrs	r3, r3, #29
 80041ba:	2207      	movs	r2, #7
 80041bc:	4013      	ands	r3, r2
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	6978      	ldr	r0, [r7, #20]
 80041c6:	f7fb ffad 	bl	8000124 <__udivsi3>
 80041ca:	0003      	movs	r3, r0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e015      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2238      	movs	r2, #56	; 0x38
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d103      	bne.n	80041e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2238      	movs	r2, #56	; 0x38
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d103      	bne.n	80041f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041f0:	23fa      	movs	r3, #250	; 0xfa
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e001      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041fc:	693b      	ldr	r3, [r7, #16]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	40021000 	.word	0x40021000
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b02      	ldr	r3, [pc, #8]	; (8004224 <HAL_RCC_GetHCLKFreq+0x10>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	20000000 	.word	0x20000000

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800422c:	f7ff fff2 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004230:	0004      	movs	r4, r0
 8004232:	f7ff fb49 	bl	80038c8 <LL_RCC_GetAPB1Prescaler>
 8004236:	0003      	movs	r3, r0
 8004238:	0b1a      	lsrs	r2, r3, #12
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800423c:	0092      	lsls	r2, r2, #2
 800423e:	58d3      	ldr	r3, [r2, r3]
 8004240:	221f      	movs	r2, #31
 8004242:	4013      	ands	r3, r2
 8004244:	40dc      	lsrs	r4, r3
 8004246:	0023      	movs	r3, r4
}
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	bdb0      	pop	{r4, r5, r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	0800686c 	.word	0x0800686c

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800425c:	2313      	movs	r3, #19
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004264:	2312      	movs	r3, #18
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	029b      	lsls	r3, r3, #10
 8004274:	4013      	ands	r3, r2
 8004276:	d100      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004278:	e0a3      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2011      	movs	r0, #17
 800427c:	183b      	adds	r3, r7, r0
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004282:	4b7f      	ldr	r3, [pc, #508]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	055b      	lsls	r3, r3, #21
 800428a:	4013      	ands	r3, r2
 800428c:	d110      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004292:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0549      	lsls	r1, r1, #21
 8004298:	430a      	orrs	r2, r1
 800429a:	63da      	str	r2, [r3, #60]	; 0x3c
 800429c:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	055b      	lsls	r3, r3, #21
 80042a4:	4013      	ands	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	183b      	adds	r3, r7, r0
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b0:	4b74      	ldr	r3, [pc, #464]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	0049      	lsls	r1, r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042be:	f7fe faf1 	bl	80028a4 <HAL_GetTick>
 80042c2:	0003      	movs	r3, r0
 80042c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe faec 	bl	80028a4 <HAL_GetTick>
 80042cc:	0002      	movs	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d904      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80042d6:	2313      	movs	r3, #19
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2203      	movs	r2, #3
 80042dc:	701a      	strb	r2, [r3, #0]
        break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	4b68      	ldr	r3, [pc, #416]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d0ed      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80042ec:	2313      	movs	r3, #19
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d154      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042f6:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042fa:	23c0      	movs	r3, #192	; 0xc0
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d019      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	429a      	cmp	r2, r3
 8004310:	d014      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004312:	4b5b      	ldr	r3, [pc, #364]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	4a5c      	ldr	r2, [pc, #368]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800431c:	4b58      	ldr	r3, [pc, #352]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800431e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004320:	4b57      	ldr	r3, [pc, #348]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	0249      	lsls	r1, r1, #9
 8004326:	430a      	orrs	r2, r1
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800432a:	4b55      	ldr	r3, [pc, #340]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800432c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800432e:	4b54      	ldr	r3, [pc, #336]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004330:	4956      	ldr	r1, [pc, #344]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004332:	400a      	ands	r2, r1
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004336:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2201      	movs	r2, #1
 8004340:	4013      	ands	r3, r2
 8004342:	d016      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe faae 	bl	80028a4 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434c:	e00c      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fe faa9 	bl	80028a4 <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	4a4d      	ldr	r2, [pc, #308]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d904      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800435e:	2313      	movs	r3, #19
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2203      	movs	r2, #3
 8004364:	701a      	strb	r2, [r3, #0]
            break;
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004368:	4b45      	ldr	r3, [pc, #276]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2202      	movs	r2, #2
 800436e:	4013      	ands	r3, r2
 8004370:	d0ed      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004372:	2313      	movs	r3, #19
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	4a41      	ldr	r2, [pc, #260]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800438c:	430a      	orrs	r2, r1
 800438e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004390:	e00c      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004392:	2312      	movs	r3, #18
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	2213      	movs	r2, #19
 8004398:	18ba      	adds	r2, r7, r2
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	2312      	movs	r3, #18
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	2213      	movs	r2, #19
 80043a6:	18ba      	adds	r2, r7, r2
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ac:	2311      	movs	r3, #17
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d105      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b6:	4b32      	ldr	r3, [pc, #200]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ba:	4b31      	ldr	r3, [pc, #196]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043bc:	4935      	ldr	r1, [pc, #212]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043be:	400a      	ands	r2, r1
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043cc:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	2203      	movs	r2, #3
 80043d2:	4393      	bics	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2220      	movs	r2, #32
 80043e6:	4013      	ands	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	0019      	movs	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	4b21      	ldr	r3, [pc, #132]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043fa:	430a      	orrs	r2, r1
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4013      	ands	r3, r2
 8004408:	d015      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	0899      	lsrs	r1, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004418:	430a      	orrs	r2, r1
 800441a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	05db      	lsls	r3, r3, #23
 8004424:	429a      	cmp	r2, r3
 8004426:	d106      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0249      	lsls	r1, r1, #9
 8004432:	430a      	orrs	r2, r1
 8004434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d016      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004448:	4013      	ands	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004452:	430a      	orrs	r2, r1
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	429a      	cmp	r2, r3
 8004460:	d106      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004462:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0249      	lsls	r1, r1, #9
 800446c:	430a      	orrs	r2, r1
 800446e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004470:	2312      	movs	r3, #18
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	781b      	ldrb	r3, [r3, #0]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b006      	add	sp, #24
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
 8004488:	fffffcff 	.word	0xfffffcff
 800448c:	fffeffff 	.word	0xfffeffff
 8004490:	00001388 	.word	0x00001388
 8004494:	efffffff 	.word	0xefffffff
 8004498:	ffffcfff 	.word	0xffffcfff
 800449c:	ffff3fff 	.word	0xffff3fff

080044a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0a8      	b.n	8004604 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	2382      	movs	r3, #130	; 0x82
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d009      	beq.n	80044da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	61da      	str	r2, [r3, #28]
 80044cc:	e005      	b.n	80044da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	225d      	movs	r2, #93	; 0x5d
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	225c      	movs	r2, #92	; 0x5c
 80044f0:	2100      	movs	r1, #0
 80044f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7fd fe08 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	225d      	movs	r2, #93	; 0x5d
 8004500:	2102      	movs	r1, #2
 8004502:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	23e0      	movs	r3, #224	; 0xe0
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	429a      	cmp	r2, r3
 800451e:	d902      	bls.n	8004526 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e002      	b.n	800452c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	015b      	lsls	r3, r3, #5
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	23f0      	movs	r3, #240	; 0xf0
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	429a      	cmp	r2, r3
 8004536:	d008      	beq.n	800454a <HAL_SPI_Init+0xaa>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	23e0      	movs	r3, #224	; 0xe0
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	429a      	cmp	r2, r3
 8004542:	d002      	beq.n	800454a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	2382      	movs	r3, #130	; 0x82
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	401a      	ands	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6899      	ldr	r1, [r3, #8]
 8004558:	2384      	movs	r3, #132	; 0x84
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	400b      	ands	r3, r1
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2102      	movs	r1, #2
 8004566:	400b      	ands	r3, r1
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2101      	movs	r1, #1
 8004570:	400b      	ands	r3, r1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6999      	ldr	r1, [r3, #24]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	400b      	ands	r3, r1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	2138      	movs	r1, #56	; 0x38
 8004586:	400b      	ands	r3, r1
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	400b      	ands	r3, r1
 8004592:	431a      	orrs	r2, r3
 8004594:	0011      	movs	r1, r2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	401a      	ands	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	2204      	movs	r2, #4
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	2110      	movs	r1, #16
 80045b8:	400b      	ands	r3, r1
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	2108      	movs	r1, #8
 80045c2:	400b      	ands	r3, r1
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68d9      	ldr	r1, [r3, #12]
 80045ca:	23f0      	movs	r3, #240	; 0xf0
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	400b      	ands	r3, r1
 80045d0:	431a      	orrs	r2, r3
 80045d2:	0011      	movs	r1, r2
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	015b      	lsls	r3, r3, #5
 80045da:	401a      	ands	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4907      	ldr	r1, [pc, #28]	; (800460c <HAL_SPI_Init+0x16c>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	225d      	movs	r2, #93	; 0x5d
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b004      	add	sp, #16
 800460a:	bd80      	pop	{r7, pc}
 800460c:	fffff7ff 	.word	0xfffff7ff

08004610 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004620:	231f      	movs	r3, #31
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	225c      	movs	r2, #92	; 0x5c
 800462c:	5c9b      	ldrb	r3, [r3, r2]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_SPI_Transmit+0x26>
 8004632:	2302      	movs	r3, #2
 8004634:	e140      	b.n	80048b8 <HAL_SPI_Transmit+0x2a8>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	225c      	movs	r2, #92	; 0x5c
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463e:	f7fe f931 	bl	80028a4 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004646:	2316      	movs	r3, #22
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	1dba      	adds	r2, r7, #6
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	225d      	movs	r2, #93	; 0x5d
 8004654:	5c9b      	ldrb	r3, [r3, r2]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d004      	beq.n	8004666 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800465c:	231f      	movs	r3, #31
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
    goto error;
 8004664:	e11d      	b.n	80048a2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_SPI_Transmit+0x64>
 800466c:	1dbb      	adds	r3, r7, #6
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004674:	231f      	movs	r3, #31
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
    goto error;
 800467c:	e111      	b.n	80048a2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	225d      	movs	r2, #93	; 0x5d
 8004682:	2103      	movs	r1, #3
 8004684:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1dba      	adds	r2, r7, #6
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1dba      	adds	r2, r7, #6
 800469e:	8812      	ldrh	r2, [r2, #0]
 80046a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2244      	movs	r2, #68	; 0x44
 80046ac:	2100      	movs	r1, #0
 80046ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2246      	movs	r2, #70	; 0x46
 80046b4:	2100      	movs	r1, #0
 80046b6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d110      	bne.n	80046f2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	438a      	bics	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	01c9      	lsls	r1, r1, #7
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d007      	beq.n	8004710 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2140      	movs	r1, #64	; 0x40
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	23e0      	movs	r3, #224	; 0xe0
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	429a      	cmp	r2, r3
 800471a:	d94e      	bls.n	80047ba <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_SPI_Transmit+0x11e>
 8004724:	2316      	movs	r3, #22
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d13f      	bne.n	80047ae <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004752:	e02c      	b.n	80047ae <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2202      	movs	r2, #2
 800475c:	4013      	ands	r3, r2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d112      	bne.n	8004788 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004786:	e012      	b.n	80047ae <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004788:	f7fe f88c 	bl	80028a4 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d802      	bhi.n	800479e <HAL_SPI_Transmit+0x18e>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x194>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80047a4:	231f      	movs	r3, #31
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2203      	movs	r2, #3
 80047aa:	701a      	strb	r2, [r3, #0]
          goto error;
 80047ac:	e079      	b.n	80048a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1cd      	bne.n	8004754 <HAL_SPI_Transmit+0x144>
 80047b8:	e04f      	b.n	800485a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_SPI_Transmit+0x1bc>
 80047c2:	2316      	movs	r3, #22
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d141      	bne.n	8004850 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	7812      	ldrb	r2, [r2, #0]
 80047d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80047f2:	e02d      	b.n	8004850 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2202      	movs	r2, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d113      	bne.n	800482a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004828:	e012      	b.n	8004850 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482a:	f7fe f83b 	bl	80028a4 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d802      	bhi.n	8004840 <HAL_SPI_Transmit+0x230>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	d102      	bne.n	8004846 <HAL_SPI_Transmit+0x236>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004846:	231f      	movs	r3, #31
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2203      	movs	r2, #3
 800484c:	701a      	strb	r2, [r3, #0]
          goto error;
 800484e:	e028      	b.n	80048a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cc      	bne.n	80047f4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	0018      	movs	r0, r3
 8004862:	f000 fcd9 	bl	8005218 <SPI_EndRxTxTransaction>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004896:	231f      	movs	r3, #31
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <HAL_SPI_Transmit+0x292>
  }

error:
 80048a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	225d      	movs	r2, #93	; 0x5d
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	225c      	movs	r2, #92	; 0x5c
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048b2:	231f      	movs	r3, #31
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	781b      	ldrb	r3, [r3, #0]
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b008      	add	sp, #32
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048d0:	2317      	movs	r3, #23
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	2382      	movs	r3, #130	; 0x82
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d113      	bne.n	800490c <HAL_SPI_Receive+0x4c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	225d      	movs	r2, #93	; 0x5d
 80048f0:	2104      	movs	r1, #4
 80048f2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048f4:	1dbb      	adds	r3, r7, #6
 80048f6:	881c      	ldrh	r4, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	0023      	movs	r3, r4
 8004904:	f000 f928 	bl	8004b58 <HAL_SPI_TransmitReceive>
 8004908:	0003      	movs	r3, r0
 800490a:	e11c      	b.n	8004b46 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	225c      	movs	r2, #92	; 0x5c
 8004910:	5c9b      	ldrb	r3, [r3, r2]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_SPI_Receive+0x5a>
 8004916:	2302      	movs	r3, #2
 8004918:	e115      	b.n	8004b46 <HAL_SPI_Receive+0x286>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	225c      	movs	r2, #92	; 0x5c
 800491e:	2101      	movs	r1, #1
 8004920:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004922:	f7fd ffbf 	bl	80028a4 <HAL_GetTick>
 8004926:	0003      	movs	r3, r0
 8004928:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	225d      	movs	r2, #93	; 0x5d
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d004      	beq.n	8004940 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004936:	2317      	movs	r3, #23
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2202      	movs	r2, #2
 800493c:	701a      	strb	r2, [r3, #0]
    goto error;
 800493e:	e0f7      	b.n	8004b30 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_SPI_Receive+0x8e>
 8004946:	1dbb      	adds	r3, r7, #6
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800494e:	2317      	movs	r3, #23
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
    goto error;
 8004956:	e0eb      	b.n	8004b30 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	225d      	movs	r2, #93	; 0x5d
 800495c:	2104      	movs	r1, #4
 800495e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1dba      	adds	r2, r7, #6
 8004970:	2144      	movs	r1, #68	; 0x44
 8004972:	8812      	ldrh	r2, [r2, #0]
 8004974:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1dba      	adds	r2, r7, #6
 800497a:	2146      	movs	r1, #70	; 0x46
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	23e0      	movs	r3, #224	; 0xe0
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d908      	bls.n	80049bc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4966      	ldr	r1, [pc, #408]	; (8004b50 <HAL_SPI_Receive+0x290>)
 80049b6:	400a      	ands	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e008      	b.n	80049ce <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	0149      	lsls	r1, r1, #5
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10f      	bne.n	80049fa <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	438a      	bics	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4957      	ldr	r1, [pc, #348]	; (8004b54 <HAL_SPI_Receive+0x294>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2240      	movs	r2, #64	; 0x40
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d007      	beq.n	8004a18 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	23e0      	movs	r3, #224	; 0xe0
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d900      	bls.n	8004a26 <HAL_SPI_Receive+0x166>
 8004a24:	e069      	b.n	8004afa <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a26:	e031      	b.n	8004a8c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d117      	bne.n	8004a66 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2246      	movs	r2, #70	; 0x46
 8004a56:	5a9b      	ldrh	r3, [r3, r2]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b299      	uxth	r1, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2246      	movs	r2, #70	; 0x46
 8004a62:	5299      	strh	r1, [r3, r2]
 8004a64:	e012      	b.n	8004a8c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a66:	f7fd ff1d 	bl	80028a4 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d802      	bhi.n	8004a7c <HAL_SPI_Receive+0x1bc>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Receive+0x1c2>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004a82:	2317      	movs	r3, #23
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2203      	movs	r2, #3
 8004a88:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a8a:	e051      	b.n	8004b30 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2246      	movs	r2, #70	; 0x46
 8004a90:	5a9b      	ldrh	r3, [r3, r2]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1c7      	bne.n	8004a28 <HAL_SPI_Receive+0x168>
 8004a98:	e035      	b.n	8004b06 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d115      	bne.n	8004ad4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2246      	movs	r2, #70	; 0x46
 8004ac4:	5a9b      	ldrh	r3, [r3, r2]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b299      	uxth	r1, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2246      	movs	r2, #70	; 0x46
 8004ad0:	5299      	strh	r1, [r3, r2]
 8004ad2:	e012      	b.n	8004afa <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad4:	f7fd fee6 	bl	80028a4 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d802      	bhi.n	8004aea <HAL_SPI_Receive+0x22a>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_Receive+0x230>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004af0:	2317      	movs	r3, #23
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	2203      	movs	r2, #3
 8004af6:	701a      	strb	r2, [r3, #0]
          goto error;
 8004af8:	e01a      	b.n	8004b30 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2246      	movs	r2, #70	; 0x46
 8004afe:	5a9b      	ldrh	r3, [r3, r2]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1c9      	bne.n	8004a9a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 fb25 	bl	800515c <SPI_EndRxTransaction>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004b24:	2317      	movs	r3, #23
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e000      	b.n	8004b30 <HAL_SPI_Receive+0x270>
  }

error :
 8004b2e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	225d      	movs	r2, #93	; 0x5d
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	225c      	movs	r2, #92	; 0x5c
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b40:	2317      	movs	r3, #23
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b007      	add	sp, #28
 8004b4c:	bd90      	pop	{r4, r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	ffffefff 	.word	0xffffefff
 8004b54:	ffffbfff 	.word	0xffffbfff

08004b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	001a      	movs	r2, r3
 8004b66:	1cbb      	adds	r3, r7, #2
 8004b68:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b6e:	2323      	movs	r3, #35	; 0x23
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	225c      	movs	r2, #92	; 0x5c
 8004b7a:	5c9b      	ldrb	r3, [r3, r2]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x2c>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e1b5      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x398>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	225c      	movs	r2, #92	; 0x5c
 8004b88:	2101      	movs	r1, #1
 8004b8a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b8c:	f7fd fe8a 	bl	80028a4 <HAL_GetTick>
 8004b90:	0003      	movs	r3, r0
 8004b92:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b94:	201b      	movs	r0, #27
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	215d      	movs	r1, #93	; 0x5d
 8004b9c:	5c52      	ldrb	r2, [r2, r1]
 8004b9e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ba6:	2312      	movs	r3, #18
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	1cba      	adds	r2, r7, #2
 8004bac:	8812      	ldrh	r2, [r2, #0]
 8004bae:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bb0:	183b      	adds	r3, r7, r0
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d011      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x84>
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	2382      	movs	r3, #130	; 0x82
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d107      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x7a>
 8004bca:	183b      	adds	r3, r7, r0
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d004      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004bd2:	2323      	movs	r3, #35	; 0x23
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bda:	e17e      	b.n	8004eda <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x98>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x98>
 8004be8:	1cbb      	adds	r3, r7, #2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004bf0:	2323      	movs	r3, #35	; 0x23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bf8:	e16f      	b.n	8004eda <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	225d      	movs	r2, #93	; 0x5d
 8004bfe:	5c9b      	ldrb	r3, [r3, r2]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	225d      	movs	r2, #93	; 0x5d
 8004c0a:	2105      	movs	r1, #5
 8004c0c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1cba      	adds	r2, r7, #2
 8004c1e:	2146      	movs	r1, #70	; 0x46
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1cba      	adds	r2, r7, #2
 8004c28:	2144      	movs	r1, #68	; 0x44
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1cba      	adds	r2, r7, #2
 8004c38:	8812      	ldrh	r2, [r2, #0]
 8004c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1cba      	adds	r2, r7, #2
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	23e0      	movs	r3, #224	; 0xe0
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d908      	bls.n	8004c6e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	49a4      	ldr	r1, [pc, #656]	; (8004ef8 <HAL_SPI_TransmitReceive+0x3a0>)
 8004c68:	400a      	ands	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e008      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	0149      	lsls	r1, r1, #5
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d007      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	23e0      	movs	r3, #224	; 0xe0
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d800      	bhi.n	8004cac <HAL_SPI_TransmitReceive+0x154>
 8004caa:	e07f      	b.n	8004dac <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x168>
 8004cb4:	2312      	movs	r3, #18
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d000      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x168>
 8004cbe:	e069      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce4:	e056      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2202      	movs	r2, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d11b      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x1d4>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d016      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x1d4>
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d113      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d11c      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x21c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2246      	movs	r2, #70	; 0x46
 8004d3e:	5a9b      	ldrh	r3, [r3, r2]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	b292      	uxth	r2, r2
 8004d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2246      	movs	r2, #70	; 0x46
 8004d62:	5a9b      	ldrh	r3, [r3, r2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b299      	uxth	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2246      	movs	r2, #70	; 0x46
 8004d6e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d74:	f7fd fd96 	bl	80028a4 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d807      	bhi.n	8004d94 <HAL_SPI_TransmitReceive+0x23c>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	3301      	adds	r3, #1
 8004d88:	d004      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004d8a:	2323      	movs	r3, #35	; 0x23
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2203      	movs	r2, #3
 8004d90:	701a      	strb	r2, [r3, #0]
        goto error;
 8004d92:	e0a2      	b.n	8004eda <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1a3      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x18e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2246      	movs	r2, #70	; 0x46
 8004da2:	5a9b      	ldrh	r3, [r3, r2]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d19d      	bne.n	8004ce6 <HAL_SPI_TransmitReceive+0x18e>
 8004daa:	e085      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x268>
 8004db4:	2312      	movs	r3, #18
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d000      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x268>
 8004dbe:	e070      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de6:	e05c      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2202      	movs	r2, #2
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d11c      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2d8>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d017      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x2d8>
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d114      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2201      	movs	r2, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d11e      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x324>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2246      	movs	r2, #70	; 0x46
 8004e42:	5a9b      	ldrh	r3, [r3, r2]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	001a      	movs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	7812      	ldrb	r2, [r2, #0]
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2246      	movs	r2, #70	; 0x46
 8004e6a:	5a9b      	ldrh	r3, [r3, r2]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b299      	uxth	r1, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2246      	movs	r2, #70	; 0x46
 8004e76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e7c:	f7fd fd12 	bl	80028a4 <HAL_GetTick>
 8004e80:	0002      	movs	r2, r0
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d802      	bhi.n	8004e92 <HAL_SPI_TransmitReceive+0x33a>
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	3301      	adds	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x340>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004e98:	2323      	movs	r3, #35	; 0x23
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004ea0:	e01b      	b.n	8004eda <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d19d      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x290>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2246      	movs	r2, #70	; 0x46
 8004eb0:	5a9b      	ldrh	r3, [r3, r2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d197      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 f9aa 	bl	8005218 <SPI_EndRxTxTransaction>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004ec8:	2323      	movs	r3, #35	; 0x23
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ed6:	e000      	b.n	8004eda <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004ed8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	225d      	movs	r2, #93	; 0x5d
 8004ede:	2101      	movs	r1, #1
 8004ee0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	225c      	movs	r2, #92	; 0x5c
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004eea:	2323      	movs	r3, #35	; 0x23
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	781b      	ldrb	r3, [r3, #0]
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b00a      	add	sp, #40	; 0x28
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	ffffefff 	.word	0xffffefff

08004efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	1dfb      	adds	r3, r7, #7
 8004f0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f0c:	f7fd fcca 	bl	80028a4 <HAL_GetTick>
 8004f10:	0002      	movs	r2, r0
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f1c:	f7fd fcc2 	bl	80028a4 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f24:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	015b      	lsls	r3, r3, #5
 8004f2a:	0d1b      	lsrs	r3, r3, #20
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	4353      	muls	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f32:	e058      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	d055      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f3a:	f7fd fcb3 	bl	80028a4 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d902      	bls.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d142      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	21e0      	movs	r1, #224	; 0xe0
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	2382      	movs	r3, #130	; 0x82
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d113      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d005      	beq.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d107      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2140      	movs	r1, #64	; 0x40
 8004f90:	438a      	bics	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d110      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	491a      	ldr	r1, [pc, #104]	; (8005014 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	0189      	lsls	r1, r1, #6
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	225d      	movs	r2, #93	; 0x5d
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	225c      	movs	r2, #92	; 0x5c
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e017      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	425a      	negs	r2, r3
 8004ff6:	4153      	adcs	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d197      	bne.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b008      	add	sp, #32
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	20000000 	.word	0x20000000
 8005014:	ffffdfff 	.word	0xffffdfff

08005018 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005026:	2317      	movs	r3, #23
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800502e:	f7fd fc39 	bl	80028a4 <HAL_GetTick>
 8005032:	0002      	movs	r2, r0
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800503e:	f7fd fc31 	bl	80028a4 <HAL_GetTick>
 8005042:	0003      	movs	r3, r0
 8005044:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	0013      	movs	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	189b      	adds	r3, r3, r2
 8005058:	00da      	lsls	r2, r3, #3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	0d1b      	lsrs	r3, r3, #20
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	4353      	muls	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005064:	e068      	b.n	8005138 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	23c0      	movs	r3, #192	; 0xc0
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	429a      	cmp	r2, r3
 800506e:	d10a      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	2117      	movs	r1, #23
 800507e:	187b      	adds	r3, r7, r1
 8005080:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005082:	187b      	adds	r3, r7, r1
 8005084:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	d055      	beq.n	8005138 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800508c:	f7fd fc0a 	bl	80028a4 <HAL_GetTick>
 8005090:	0002      	movs	r2, r0
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d142      	bne.n	8005128 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	21e0      	movs	r1, #224	; 0xe0
 80050ae:	438a      	bics	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	2382      	movs	r3, #130	; 0x82
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d113      	bne.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d005      	beq.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d107      	bne.n	80050e6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d110      	bne.n	8005114 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4916      	ldr	r1, [pc, #88]	; (8005158 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80050fe:	400a      	ands	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	0189      	lsls	r1, r1, #6
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	225d      	movs	r2, #93	; 0x5d
 8005118:	2101      	movs	r1, #1
 800511a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	225c      	movs	r2, #92	; 0x5c
 8005120:	2100      	movs	r1, #0
 8005122:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e010      	b.n	800514a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3b01      	subs	r3, #1
 8005136:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d18e      	bne.n	8005066 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b00a      	add	sp, #40	; 0x28
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	20000000 	.word	0x20000000
 8005158:	ffffdfff 	.word	0xffffdfff

0800515c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	2382      	movs	r3, #130	; 0x82
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	429a      	cmp	r2, r3
 8005172:	d113      	bne.n	800519c <SPI_EndRxTransaction+0x40>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	429a      	cmp	r2, r3
 800517e:	d005      	beq.n	800518c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	429a      	cmp	r2, r3
 800518a:	d107      	bne.n	800519c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2140      	movs	r1, #64	; 0x40
 8005198:	438a      	bics	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	0013      	movs	r3, r2
 80051a6:	2200      	movs	r2, #0
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	f7ff fea7 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d007      	beq.n	80051c2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b6:	2220      	movs	r2, #32
 80051b8:	431a      	orrs	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e026      	b.n	8005210 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	2382      	movs	r3, #130	; 0x82
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d11f      	bne.n	800520e <SPI_EndRxTransaction+0xb2>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d005      	beq.n	80051e6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d113      	bne.n	800520e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	23c0      	movs	r3, #192	; 0xc0
 80051ea:	00d9      	lsls	r1, r3, #3
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	0013      	movs	r3, r2
 80051f4:	2200      	movs	r2, #0
 80051f6:	f7ff ff0f 	bl	8005018 <SPI_WaitFifoStateUntilTimeout>
 80051fa:	1e03      	subs	r3, r0, #0
 80051fc:	d007      	beq.n	800520e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	2220      	movs	r2, #32
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e000      	b.n	8005210 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}

08005218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	23c0      	movs	r3, #192	; 0xc0
 8005228:	0159      	lsls	r1, r3, #5
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	0013      	movs	r3, r2
 8005232:	2200      	movs	r2, #0
 8005234:	f7ff fef0 	bl	8005018 <SPI_WaitFifoStateUntilTimeout>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d007      	beq.n	800524c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005240:	2220      	movs	r2, #32
 8005242:	431a      	orrs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e027      	b.n	800529c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	0013      	movs	r3, r2
 8005256:	2200      	movs	r2, #0
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	f7ff fe4f 	bl	8004efc <SPI_WaitFlagStateUntilTimeout>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d007      	beq.n	8005272 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	2220      	movs	r2, #32
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e014      	b.n	800529c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	23c0      	movs	r3, #192	; 0xc0
 8005276:	00d9      	lsls	r1, r3, #3
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	0013      	movs	r3, r2
 8005280:	2200      	movs	r2, #0
 8005282:	f7ff fec9 	bl	8005018 <SPI_WaitFifoStateUntilTimeout>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d007      	beq.n	800529a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	2220      	movs	r2, #32
 8005290:	431a      	orrs	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e000      	b.n	800529c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b004      	add	sp, #16
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e046      	b.n	8005344 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2288      	movs	r2, #136	; 0x88
 80052ba:	589b      	ldr	r3, [r3, r2]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2284      	movs	r2, #132	; 0x84
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fc ff8c 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2288      	movs	r2, #136	; 0x88
 80052d4:	2124      	movs	r1, #36	; 0x24
 80052d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f000 f8cc 	bl	8005488 <UART_SetConfig>
 80052f0:	0003      	movs	r3, r0
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e024      	b.n	8005344 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 fa29 	bl	800575c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	490d      	ldr	r1, [pc, #52]	; (800534c <HAL_UART_Init+0xa8>)
 8005316:	400a      	ands	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	212a      	movs	r1, #42	; 0x2a
 8005326:	438a      	bics	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2101      	movs	r1, #1
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 fac1 	bl	80058c4 <UART_CheckIdleState>
 8005342:	0003      	movs	r3, r0
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}
 800534c:	ffffb7ff 	.word	0xffffb7ff

08005350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	1dbb      	adds	r3, r7, #6
 800535e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2288      	movs	r2, #136	; 0x88
 8005364:	589b      	ldr	r3, [r3, r2]
 8005366:	2b20      	cmp	r3, #32
 8005368:	d000      	beq.n	800536c <HAL_UART_Transmit+0x1c>
 800536a:	e088      	b.n	800547e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_UART_Transmit+0x2a>
 8005372:	1dbb      	adds	r3, r7, #6
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e080      	b.n	8005480 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	015b      	lsls	r3, r3, #5
 8005386:	429a      	cmp	r2, r3
 8005388:	d109      	bne.n	800539e <HAL_UART_Transmit+0x4e>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d105      	bne.n	800539e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2201      	movs	r2, #1
 8005396:	4013      	ands	r3, r2
 8005398:	d001      	beq.n	800539e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e070      	b.n	8005480 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2290      	movs	r2, #144	; 0x90
 80053a2:	2100      	movs	r1, #0
 80053a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2288      	movs	r2, #136	; 0x88
 80053aa:	2121      	movs	r1, #33	; 0x21
 80053ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ae:	f7fd fa79 	bl	80028a4 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1dba      	adds	r2, r7, #6
 80053ba:	2154      	movs	r1, #84	; 0x54
 80053bc:	8812      	ldrh	r2, [r2, #0]
 80053be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1dba      	adds	r2, r7, #6
 80053c4:	2156      	movs	r1, #86	; 0x56
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	015b      	lsls	r3, r3, #5
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d108      	bne.n	80053e8 <HAL_UART_Transmit+0x98>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053f0:	e02c      	b.n	800544c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	0013      	movs	r3, r2
 80053fc:	2200      	movs	r2, #0
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	f000 faae 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d001      	beq.n	800540c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e039      	b.n	8005480 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	001a      	movs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	05d2      	lsls	r2, r2, #23
 800541e:	0dd2      	lsrs	r2, r2, #23
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3302      	adds	r3, #2
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e007      	b.n	800543a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2256      	movs	r2, #86	; 0x56
 800543e:	5a9b      	ldrh	r3, [r3, r2]
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b299      	uxth	r1, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2256      	movs	r2, #86	; 0x56
 800544a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2256      	movs	r2, #86	; 0x56
 8005450:	5a9b      	ldrh	r3, [r3, r2]
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1cc      	bne.n	80053f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	0013      	movs	r3, r2
 8005462:	2200      	movs	r2, #0
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	f000 fa7b 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e006      	b.n	8005480 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2288      	movs	r2, #136	; 0x88
 8005476:	2120      	movs	r1, #32
 8005478:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b008      	add	sp, #32
 8005486:	bd80      	pop	{r7, pc}

08005488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005490:	231a      	movs	r3, #26
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4aa1      	ldr	r2, [pc, #644]	; (800573c <UART_SetConfig+0x2b4>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4a9c      	ldr	r2, [pc, #624]	; (8005740 <UART_SetConfig+0x2b8>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a93      	ldr	r2, [pc, #588]	; (8005744 <UART_SetConfig+0x2bc>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	220f      	movs	r2, #15
 800550c:	4393      	bics	r3, r2
 800550e:	0019      	movs	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a89      	ldr	r2, [pc, #548]	; (8005748 <UART_SetConfig+0x2c0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d127      	bne.n	8005576 <UART_SetConfig+0xee>
 8005526:	4b89      	ldr	r3, [pc, #548]	; (800574c <UART_SetConfig+0x2c4>)
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	2203      	movs	r2, #3
 800552c:	4013      	ands	r3, r2
 800552e:	2b03      	cmp	r3, #3
 8005530:	d017      	beq.n	8005562 <UART_SetConfig+0xda>
 8005532:	d81b      	bhi.n	800556c <UART_SetConfig+0xe4>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d00a      	beq.n	800554e <UART_SetConfig+0xc6>
 8005538:	d818      	bhi.n	800556c <UART_SetConfig+0xe4>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <UART_SetConfig+0xbc>
 800553e:	2b01      	cmp	r3, #1
 8005540:	d00a      	beq.n	8005558 <UART_SetConfig+0xd0>
 8005542:	e013      	b.n	800556c <UART_SetConfig+0xe4>
 8005544:	231b      	movs	r3, #27
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e021      	b.n	8005592 <UART_SetConfig+0x10a>
 800554e:	231b      	movs	r3, #27
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	2202      	movs	r2, #2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e01c      	b.n	8005592 <UART_SetConfig+0x10a>
 8005558:	231b      	movs	r3, #27
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	2204      	movs	r2, #4
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e017      	b.n	8005592 <UART_SetConfig+0x10a>
 8005562:	231b      	movs	r3, #27
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	2208      	movs	r2, #8
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x10a>
 800556c:	231b      	movs	r3, #27
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	2210      	movs	r2, #16
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x10a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a75      	ldr	r2, [pc, #468]	; (8005750 <UART_SetConfig+0x2c8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d104      	bne.n	800558a <UART_SetConfig+0x102>
 8005580:	231b      	movs	r3, #27
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e003      	b.n	8005592 <UART_SetConfig+0x10a>
 800558a:	231b      	movs	r3, #27
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2210      	movs	r2, #16
 8005590:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	429a      	cmp	r2, r3
 800559c:	d000      	beq.n	80055a0 <UART_SetConfig+0x118>
 800559e:	e065      	b.n	800566c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80055a0:	231b      	movs	r3, #27
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d015      	beq.n	80055d6 <UART_SetConfig+0x14e>
 80055aa:	dc18      	bgt.n	80055de <UART_SetConfig+0x156>
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00d      	beq.n	80055cc <UART_SetConfig+0x144>
 80055b0:	dc15      	bgt.n	80055de <UART_SetConfig+0x156>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <UART_SetConfig+0x134>
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d005      	beq.n	80055c6 <UART_SetConfig+0x13e>
 80055ba:	e010      	b.n	80055de <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe fe34 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 80055c0:	0003      	movs	r3, r0
 80055c2:	617b      	str	r3, [r7, #20]
        break;
 80055c4:	e012      	b.n	80055ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c6:	4b63      	ldr	r3, [pc, #396]	; (8005754 <UART_SetConfig+0x2cc>)
 80055c8:	617b      	str	r3, [r7, #20]
        break;
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055cc:	f7fe fda0 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80055d0:	0003      	movs	r3, r0
 80055d2:	617b      	str	r3, [r7, #20]
        break;
 80055d4:	e00a      	b.n	80055ec <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	617b      	str	r3, [r7, #20]
        break;
 80055dc:	e006      	b.n	80055ec <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055e2:	231a      	movs	r3, #26
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
        break;
 80055ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d100      	bne.n	80055f4 <UART_SetConfig+0x16c>
 80055f2:	e08d      	b.n	8005710 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f8:	4b57      	ldr	r3, [pc, #348]	; (8005758 <UART_SetConfig+0x2d0>)
 80055fa:	0052      	lsls	r2, r2, #1
 80055fc:	5ad3      	ldrh	r3, [r2, r3]
 80055fe:	0019      	movs	r1, r3
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f7fa fd8f 	bl	8000124 <__udivsi3>
 8005606:	0003      	movs	r3, r0
 8005608:	005a      	lsls	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	18d2      	adds	r2, r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0019      	movs	r1, r3
 8005618:	0010      	movs	r0, r2
 800561a:	f7fa fd83 	bl	8000124 <__udivsi3>
 800561e:	0003      	movs	r3, r0
 8005620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d91c      	bls.n	8005662 <UART_SetConfig+0x1da>
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	025b      	lsls	r3, r3, #9
 800562e:	429a      	cmp	r2, r3
 8005630:	d217      	bcs.n	8005662 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	b29a      	uxth	r2, r3
 8005636:	200e      	movs	r0, #14
 8005638:	183b      	adds	r3, r7, r0
 800563a:	210f      	movs	r1, #15
 800563c:	438a      	bics	r2, r1
 800563e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	2207      	movs	r2, #7
 8005648:	4013      	ands	r3, r2
 800564a:	b299      	uxth	r1, r3
 800564c:	183b      	adds	r3, r7, r0
 800564e:	183a      	adds	r2, r7, r0
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	183a      	adds	r2, r7, r0
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e056      	b.n	8005710 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	231a      	movs	r3, #26
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	e051      	b.n	8005710 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566c:	231b      	movs	r3, #27
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d015      	beq.n	80056a2 <UART_SetConfig+0x21a>
 8005676:	dc18      	bgt.n	80056aa <UART_SetConfig+0x222>
 8005678:	2b04      	cmp	r3, #4
 800567a:	d00d      	beq.n	8005698 <UART_SetConfig+0x210>
 800567c:	dc15      	bgt.n	80056aa <UART_SetConfig+0x222>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <UART_SetConfig+0x200>
 8005682:	2b02      	cmp	r3, #2
 8005684:	d005      	beq.n	8005692 <UART_SetConfig+0x20a>
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005688:	f7fe fdce 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 800568c:	0003      	movs	r3, r0
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e012      	b.n	80056b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <UART_SetConfig+0x2cc>)
 8005694:	617b      	str	r3, [r7, #20]
        break;
 8005696:	e00f      	b.n	80056b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005698:	f7fe fd3a 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800569c:	0003      	movs	r3, r0
 800569e:	617b      	str	r3, [r7, #20]
        break;
 80056a0:	e00a      	b.n	80056b8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	617b      	str	r3, [r7, #20]
        break;
 80056a8:	e006      	b.n	80056b8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056ae:	231a      	movs	r3, #26
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
        break;
 80056b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d028      	beq.n	8005710 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <UART_SetConfig+0x2d0>)
 80056c4:	0052      	lsls	r2, r2, #1
 80056c6:	5ad3      	ldrh	r3, [r2, r3]
 80056c8:	0019      	movs	r1, r3
 80056ca:	6978      	ldr	r0, [r7, #20]
 80056cc:	f7fa fd2a 	bl	8000124 <__udivsi3>
 80056d0:	0003      	movs	r3, r0
 80056d2:	001a      	movs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	18d2      	adds	r2, r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	0019      	movs	r1, r3
 80056e2:	0010      	movs	r0, r2
 80056e4:	f7fa fd1e 	bl	8000124 <__udivsi3>
 80056e8:	0003      	movs	r3, r0
 80056ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d90a      	bls.n	8005708 <UART_SetConfig+0x280>
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	025b      	lsls	r3, r3, #9
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d205      	bcs.n	8005708 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e003      	b.n	8005710 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	231a      	movs	r3, #26
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	226a      	movs	r2, #106	; 0x6a
 8005714:	2101      	movs	r1, #1
 8005716:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2268      	movs	r2, #104	; 0x68
 800571c:	2101      	movs	r1, #1
 800571e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800572c:	231a      	movs	r3, #26
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	781b      	ldrb	r3, [r3, #0]
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b008      	add	sp, #32
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	cfff69f3 	.word	0xcfff69f3
 8005740:	ffffcfff 	.word	0xffffcfff
 8005744:	11fff4ff 	.word	0x11fff4ff
 8005748:	40013800 	.word	0x40013800
 800574c:	40021000 	.word	0x40021000
 8005750:	40004400 	.word	0x40004400
 8005754:	00f42400 	.word	0x00f42400
 8005758:	0800688c 	.word	0x0800688c

0800575c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	2201      	movs	r2, #1
 800576a:	4013      	ands	r3, r2
 800576c:	d00b      	beq.n	8005786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4a4a      	ldr	r2, [pc, #296]	; (80058a0 <UART_AdvFeatureConfig+0x144>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	2202      	movs	r2, #2
 800578c:	4013      	ands	r3, r2
 800578e:	d00b      	beq.n	80057a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a43      	ldr	r2, [pc, #268]	; (80058a4 <UART_AdvFeatureConfig+0x148>)
 8005798:	4013      	ands	r3, r2
 800579a:	0019      	movs	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	2204      	movs	r2, #4
 80057ae:	4013      	ands	r3, r2
 80057b0:	d00b      	beq.n	80057ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <UART_AdvFeatureConfig+0x14c>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	2208      	movs	r2, #8
 80057d0:	4013      	ands	r3, r2
 80057d2:	d00b      	beq.n	80057ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4a34      	ldr	r2, [pc, #208]	; (80058ac <UART_AdvFeatureConfig+0x150>)
 80057dc:	4013      	ands	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	2210      	movs	r2, #16
 80057f2:	4013      	ands	r3, r2
 80057f4:	d00b      	beq.n	800580e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <UART_AdvFeatureConfig+0x154>)
 80057fe:	4013      	ands	r3, r2
 8005800:	0019      	movs	r1, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	2220      	movs	r2, #32
 8005814:	4013      	ands	r3, r2
 8005816:	d00b      	beq.n	8005830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <UART_AdvFeatureConfig+0x158>)
 8005820:	4013      	ands	r3, r2
 8005822:	0019      	movs	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	4013      	ands	r3, r2
 8005838:	d01d      	beq.n	8005876 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <UART_AdvFeatureConfig+0x15c>)
 8005842:	4013      	ands	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	035b      	lsls	r3, r3, #13
 800585a:	429a      	cmp	r2, r3
 800585c:	d10b      	bne.n	8005876 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a15      	ldr	r2, [pc, #84]	; (80058bc <UART_AdvFeatureConfig+0x160>)
 8005866:	4013      	ands	r3, r2
 8005868:	0019      	movs	r1, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	4013      	ands	r3, r2
 800587e:	d00b      	beq.n	8005898 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4a0e      	ldr	r2, [pc, #56]	; (80058c0 <UART_AdvFeatureConfig+0x164>)
 8005888:	4013      	ands	r3, r2
 800588a:	0019      	movs	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
  }
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	fffdffff 	.word	0xfffdffff
 80058a4:	fffeffff 	.word	0xfffeffff
 80058a8:	fffbffff 	.word	0xfffbffff
 80058ac:	ffff7fff 	.word	0xffff7fff
 80058b0:	ffffefff 	.word	0xffffefff
 80058b4:	ffffdfff 	.word	0xffffdfff
 80058b8:	ffefffff 	.word	0xffefffff
 80058bc:	ff9fffff 	.word	0xff9fffff
 80058c0:	fff7ffff 	.word	0xfff7ffff

080058c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2290      	movs	r2, #144	; 0x90
 80058d0:	2100      	movs	r1, #0
 80058d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058d4:	f7fc ffe6 	bl	80028a4 <HAL_GetTick>
 80058d8:	0003      	movs	r3, r0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2208      	movs	r2, #8
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d10c      	bne.n	8005904 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2280      	movs	r2, #128	; 0x80
 80058ee:	0391      	lsls	r1, r2, #14
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <UART_CheckIdleState+0x98>)
 80058f4:	9200      	str	r2, [sp, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f000 f832 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 80058fc:	1e03      	subs	r3, r0, #0
 80058fe:	d001      	beq.n	8005904 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e026      	b.n	8005952 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2204      	movs	r2, #4
 800590c:	4013      	ands	r3, r2
 800590e:	2b04      	cmp	r3, #4
 8005910:	d10c      	bne.n	800592c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2280      	movs	r2, #128	; 0x80
 8005916:	03d1      	lsls	r1, r2, #15
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4a10      	ldr	r2, [pc, #64]	; (800595c <UART_CheckIdleState+0x98>)
 800591c:	9200      	str	r2, [sp, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	f000 f81e 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 8005924:	1e03      	subs	r3, r0, #0
 8005926:	d001      	beq.n	800592c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e012      	b.n	8005952 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2288      	movs	r2, #136	; 0x88
 8005930:	2120      	movs	r1, #32
 8005932:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	228c      	movs	r2, #140	; 0x8c
 8005938:	2120      	movs	r1, #32
 800593a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2284      	movs	r2, #132	; 0x84
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b004      	add	sp, #16
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	01ffffff 	.word	0x01ffffff

08005960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b094      	sub	sp, #80	; 0x50
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	1dfb      	adds	r3, r7, #7
 800596e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005970:	e0a7      	b.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005974:	3301      	adds	r3, #1
 8005976:	d100      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005978:	e0a3      	b.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fc ff93 	bl	80028a4 <HAL_GetTick>
 800597e:	0002      	movs	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x30>
 800598a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800598c:	2b00      	cmp	r3, #0
 800598e:	d13f      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
 800599a:	2301      	movs	r3, #1
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	494e      	ldr	r1, [pc, #312]	; (8005aec <UART_WaitOnFlagUntilTimeout+0x18c>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c2:	f3ef 8310 	mrs	r3, PRIMASK
 80059c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80059c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	2301      	movs	r3, #1
 80059ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2101      	movs	r1, #1
 80059e4:	438a      	bics	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	f383 8810 	msr	PRIMASK, r3
}
 80059f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2288      	movs	r2, #136	; 0x88
 80059f8:	2120      	movs	r1, #32
 80059fa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	228c      	movs	r2, #140	; 0x8c
 8005a00:	2120      	movs	r1, #32
 8005a02:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2284      	movs	r2, #132	; 0x84
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e069      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2204      	movs	r2, #4
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d052      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	401a      	ands	r2, r3
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d148      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2280      	movs	r2, #128	; 0x80
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f383 8810 	msr	PRIMASK, r3
}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4924      	ldr	r1, [pc, #144]	; (8005aec <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005a5c:	400a      	ands	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f383 8810 	msr	PRIMASK, r3
}
 8005a6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a72:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a76:	2301      	movs	r3, #1
 8005a78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	438a      	bics	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2288      	movs	r2, #136	; 0x88
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	228c      	movs	r2, #140	; 0x8c
 8005aaa:	2120      	movs	r1, #32
 8005aac:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2290      	movs	r2, #144	; 0x90
 8005ab2:	2120      	movs	r1, #32
 8005ab4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2284      	movs	r2, #132	; 0x84
 8005aba:	2100      	movs	r1, #0
 8005abc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e010      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	425a      	negs	r2, r3
 8005ad2:	4153      	adcs	r3, r2
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	1dfb      	adds	r3, r7, #7
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d100      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x182>
 8005ae0:	e747      	b.n	8005972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b014      	add	sp, #80	; 0x50
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	fffffe5f 	.word	0xfffffe5f

08005af0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	; 0x84
 8005afc:	5c9b      	ldrb	r3, [r3, r2]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e027      	b.n	8005b56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2284      	movs	r2, #132	; 0x84
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2288      	movs	r2, #136	; 0x88
 8005b12:	2124      	movs	r1, #36	; 0x24
 8005b14:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2101      	movs	r1, #1
 8005b2a:	438a      	bics	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a0b      	ldr	r2, [pc, #44]	; (8005b60 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2288      	movs	r2, #136	; 0x88
 8005b48:	2120      	movs	r1, #32
 8005b4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2284      	movs	r2, #132	; 0x84
 8005b50:	2100      	movs	r1, #0
 8005b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b004      	add	sp, #16
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	dfffffff 	.word	0xdfffffff

08005b64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2284      	movs	r2, #132	; 0x84
 8005b72:	5c9b      	ldrb	r3, [r3, r2]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e02e      	b.n	8005bda <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2284      	movs	r2, #132	; 0x84
 8005b80:	2101      	movs	r1, #1
 8005b82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2288      	movs	r2, #136	; 0x88
 8005b88:	2124      	movs	r1, #36	; 0x24
 8005b8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	438a      	bics	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	08d9      	lsrs	r1, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f854 	bl	8005c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2288      	movs	r2, #136	; 0x88
 8005bcc:	2120      	movs	r1, #32
 8005bce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2284      	movs	r2, #132	; 0x84
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b004      	add	sp, #16
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2284      	movs	r2, #132	; 0x84
 8005bf2:	5c9b      	ldrb	r3, [r3, r2]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e02f      	b.n	8005c5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2284      	movs	r2, #132	; 0x84
 8005c00:	2101      	movs	r1, #1
 8005c02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2288      	movs	r2, #136	; 0x88
 8005c08:	2124      	movs	r1, #36	; 0x24
 8005c0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	438a      	bics	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	0019      	movs	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 f813 	bl	8005c68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2288      	movs	r2, #136	; 0x88
 8005c4e:	2120      	movs	r1, #32
 8005c50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2284      	movs	r2, #132	; 0x84
 8005c56:	2100      	movs	r1, #0
 8005c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b004      	add	sp, #16
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	f1ffffff 	.word	0xf1ffffff

08005c68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	226a      	movs	r2, #106	; 0x6a
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2268      	movs	r2, #104	; 0x68
 8005c84:	2101      	movs	r1, #1
 8005c86:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c88:	e043      	b.n	8005d12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c8a:	260f      	movs	r6, #15
 8005c8c:	19bb      	adds	r3, r7, r6
 8005c8e:	2208      	movs	r2, #8
 8005c90:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c92:	200e      	movs	r0, #14
 8005c94:	183b      	adds	r3, r7, r0
 8005c96:	2208      	movs	r2, #8
 8005c98:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	0e5b      	lsrs	r3, r3, #25
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	240d      	movs	r4, #13
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	2107      	movs	r1, #7
 8005caa:	400a      	ands	r2, r1
 8005cac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	0f5b      	lsrs	r3, r3, #29
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	250c      	movs	r5, #12
 8005cba:	197b      	adds	r3, r7, r5
 8005cbc:	2107      	movs	r1, #7
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cc2:	183b      	adds	r3, r7, r0
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	197a      	adds	r2, r7, r5
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	4914      	ldr	r1, [pc, #80]	; (8005d1c <UARTEx_SetNbDataToProcess+0xb4>)
 8005ccc:	5c8a      	ldrb	r2, [r1, r2]
 8005cce:	435a      	muls	r2, r3
 8005cd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <UARTEx_SetNbDataToProcess+0xb8>)
 8005cd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cda:	0019      	movs	r1, r3
 8005cdc:	f7fa faac 	bl	8000238 <__divsi3>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	b299      	uxth	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	226a      	movs	r2, #106	; 0x6a
 8005ce8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cea:	19bb      	adds	r3, r7, r6
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	193a      	adds	r2, r7, r4
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	490a      	ldr	r1, [pc, #40]	; (8005d1c <UARTEx_SetNbDataToProcess+0xb4>)
 8005cf4:	5c8a      	ldrb	r2, [r1, r2]
 8005cf6:	435a      	muls	r2, r3
 8005cf8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cfa:	193b      	adds	r3, r7, r4
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <UARTEx_SetNbDataToProcess+0xb8>)
 8005d00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d02:	0019      	movs	r1, r3
 8005d04:	f7fa fa98 	bl	8000238 <__divsi3>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	b299      	uxth	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2268      	movs	r2, #104	; 0x68
 8005d10:	5299      	strh	r1, [r3, r2]
}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b005      	add	sp, #20
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	080068a4 	.word	0x080068a4
 8005d20:	080068ac 	.word	0x080068ac

08005d24 <__errno>:
 8005d24:	4b01      	ldr	r3, [pc, #4]	; (8005d2c <__errno+0x8>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4770      	bx	lr
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	2000000c 	.word	0x2000000c

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	2600      	movs	r6, #0
 8005d34:	4d0c      	ldr	r5, [pc, #48]	; (8005d68 <__libc_init_array+0x38>)
 8005d36:	4c0d      	ldr	r4, [pc, #52]	; (8005d6c <__libc_init_array+0x3c>)
 8005d38:	1b64      	subs	r4, r4, r5
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	2600      	movs	r6, #0
 8005d42:	f000 fc8b 	bl	800665c <_init>
 8005d46:	4d0a      	ldr	r5, [pc, #40]	; (8005d70 <__libc_init_array+0x40>)
 8005d48:	4c0a      	ldr	r4, [pc, #40]	; (8005d74 <__libc_init_array+0x44>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	00b3      	lsls	r3, r6, #2
 8005d56:	58eb      	ldr	r3, [r5, r3]
 8005d58:	4798      	blx	r3
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	00b3      	lsls	r3, r6, #2
 8005d60:	58eb      	ldr	r3, [r5, r3]
 8005d62:	4798      	blx	r3
 8005d64:	3601      	adds	r6, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	080068f0 	.word	0x080068f0
 8005d6c:	080068f0 	.word	0x080068f0
 8005d70:	080068f0 	.word	0x080068f0
 8005d74:	080068f4 	.word	0x080068f4

08005d78 <memset>:
 8005d78:	0003      	movs	r3, r0
 8005d7a:	1882      	adds	r2, r0, r2
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <siprintf>:
 8005d88:	b40e      	push	{r1, r2, r3}
 8005d8a:	b500      	push	{lr}
 8005d8c:	490b      	ldr	r1, [pc, #44]	; (8005dbc <siprintf+0x34>)
 8005d8e:	b09c      	sub	sp, #112	; 0x70
 8005d90:	ab1d      	add	r3, sp, #116	; 0x74
 8005d92:	9002      	str	r0, [sp, #8]
 8005d94:	9006      	str	r0, [sp, #24]
 8005d96:	9107      	str	r1, [sp, #28]
 8005d98:	9104      	str	r1, [sp, #16]
 8005d9a:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <siprintf+0x38>)
 8005d9c:	4909      	ldr	r1, [pc, #36]	; (8005dc4 <siprintf+0x3c>)
 8005d9e:	cb04      	ldmia	r3!, {r2}
 8005da0:	9105      	str	r1, [sp, #20]
 8005da2:	6800      	ldr	r0, [r0, #0]
 8005da4:	a902      	add	r1, sp, #8
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	f000 f870 	bl	8005e8c <_svfiprintf_r>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9a02      	ldr	r2, [sp, #8]
 8005db0:	7013      	strb	r3, [r2, #0]
 8005db2:	b01c      	add	sp, #112	; 0x70
 8005db4:	bc08      	pop	{r3}
 8005db6:	b003      	add	sp, #12
 8005db8:	4718      	bx	r3
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	7fffffff 	.word	0x7fffffff
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	ffff0208 	.word	0xffff0208

08005dc8 <__ssputs_r>:
 8005dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dca:	688e      	ldr	r6, [r1, #8]
 8005dcc:	b085      	sub	sp, #20
 8005dce:	0007      	movs	r7, r0
 8005dd0:	000c      	movs	r4, r1
 8005dd2:	9203      	str	r2, [sp, #12]
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	429e      	cmp	r6, r3
 8005dd8:	d83c      	bhi.n	8005e54 <__ssputs_r+0x8c>
 8005dda:	2390      	movs	r3, #144	; 0x90
 8005ddc:	898a      	ldrh	r2, [r1, #12]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	421a      	tst	r2, r3
 8005de2:	d034      	beq.n	8005e4e <__ssputs_r+0x86>
 8005de4:	6909      	ldr	r1, [r1, #16]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	6960      	ldr	r0, [r4, #20]
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	2303      	movs	r3, #3
 8005df0:	4343      	muls	r3, r0
 8005df2:	0fdd      	lsrs	r5, r3, #31
 8005df4:	18ed      	adds	r5, r5, r3
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	9802      	ldr	r0, [sp, #8]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	181b      	adds	r3, r3, r0
 8005dfe:	106d      	asrs	r5, r5, #1
 8005e00:	42ab      	cmp	r3, r5
 8005e02:	d900      	bls.n	8005e06 <__ssputs_r+0x3e>
 8005e04:	001d      	movs	r5, r3
 8005e06:	0553      	lsls	r3, r2, #21
 8005e08:	d532      	bpl.n	8005e70 <__ssputs_r+0xa8>
 8005e0a:	0029      	movs	r1, r5
 8005e0c:	0038      	movs	r0, r7
 8005e0e:	f000 fb53 	bl	80064b8 <_malloc_r>
 8005e12:	1e06      	subs	r6, r0, #0
 8005e14:	d109      	bne.n	8005e2a <__ssputs_r+0x62>
 8005e16:	230c      	movs	r3, #12
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	89a2      	ldrh	r2, [r4, #12]
 8005e20:	4240      	negs	r0, r0
 8005e22:	4313      	orrs	r3, r2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	b005      	add	sp, #20
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e2a:	9a02      	ldr	r2, [sp, #8]
 8005e2c:	6921      	ldr	r1, [r4, #16]
 8005e2e:	f000 faba 	bl	80063a6 <memcpy>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <__ssputs_r+0xc0>)
 8005e36:	401a      	ands	r2, r3
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	6126      	str	r6, [r4, #16]
 8005e42:	18f6      	adds	r6, r6, r3
 8005e44:	6026      	str	r6, [r4, #0]
 8005e46:	6165      	str	r5, [r4, #20]
 8005e48:	9e01      	ldr	r6, [sp, #4]
 8005e4a:	1aed      	subs	r5, r5, r3
 8005e4c:	60a5      	str	r5, [r4, #8]
 8005e4e:	9b01      	ldr	r3, [sp, #4]
 8005e50:	429e      	cmp	r6, r3
 8005e52:	d900      	bls.n	8005e56 <__ssputs_r+0x8e>
 8005e54:	9e01      	ldr	r6, [sp, #4]
 8005e56:	0032      	movs	r2, r6
 8005e58:	9903      	ldr	r1, [sp, #12]
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	f000 faac 	bl	80063b8 <memmove>
 8005e60:	68a3      	ldr	r3, [r4, #8]
 8005e62:	2000      	movs	r0, #0
 8005e64:	1b9b      	subs	r3, r3, r6
 8005e66:	60a3      	str	r3, [r4, #8]
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	199e      	adds	r6, r3, r6
 8005e6c:	6026      	str	r6, [r4, #0]
 8005e6e:	e7da      	b.n	8005e26 <__ssputs_r+0x5e>
 8005e70:	002a      	movs	r2, r5
 8005e72:	0038      	movs	r0, r7
 8005e74:	f000 fb96 	bl	80065a4 <_realloc_r>
 8005e78:	1e06      	subs	r6, r0, #0
 8005e7a:	d1e0      	bne.n	8005e3e <__ssputs_r+0x76>
 8005e7c:	0038      	movs	r0, r7
 8005e7e:	6921      	ldr	r1, [r4, #16]
 8005e80:	f000 faae 	bl	80063e0 <_free_r>
 8005e84:	e7c7      	b.n	8005e16 <__ssputs_r+0x4e>
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	fffffb7f 	.word	0xfffffb7f

08005e8c <_svfiprintf_r>:
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	b0a1      	sub	sp, #132	; 0x84
 8005e90:	9003      	str	r0, [sp, #12]
 8005e92:	001d      	movs	r5, r3
 8005e94:	898b      	ldrh	r3, [r1, #12]
 8005e96:	000f      	movs	r7, r1
 8005e98:	0016      	movs	r6, r2
 8005e9a:	061b      	lsls	r3, r3, #24
 8005e9c:	d511      	bpl.n	8005ec2 <_svfiprintf_r+0x36>
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10e      	bne.n	8005ec2 <_svfiprintf_r+0x36>
 8005ea4:	2140      	movs	r1, #64	; 0x40
 8005ea6:	f000 fb07 	bl	80064b8 <_malloc_r>
 8005eaa:	6038      	str	r0, [r7, #0]
 8005eac:	6138      	str	r0, [r7, #16]
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d105      	bne.n	8005ebe <_svfiprintf_r+0x32>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	9a03      	ldr	r2, [sp, #12]
 8005eb6:	3801      	subs	r0, #1
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	b021      	add	sp, #132	; 0x84
 8005ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	ac08      	add	r4, sp, #32
 8005ec6:	6163      	str	r3, [r4, #20]
 8005ec8:	3320      	adds	r3, #32
 8005eca:	7663      	strb	r3, [r4, #25]
 8005ecc:	3310      	adds	r3, #16
 8005ece:	76a3      	strb	r3, [r4, #26]
 8005ed0:	9507      	str	r5, [sp, #28]
 8005ed2:	0035      	movs	r5, r6
 8005ed4:	782b      	ldrb	r3, [r5, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <_svfiprintf_r+0x52>
 8005eda:	2b25      	cmp	r3, #37	; 0x25
 8005edc:	d147      	bne.n	8005f6e <_svfiprintf_r+0xe2>
 8005ede:	1bab      	subs	r3, r5, r6
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d00c      	beq.n	8005f00 <_svfiprintf_r+0x74>
 8005ee6:	0032      	movs	r2, r6
 8005ee8:	0039      	movs	r1, r7
 8005eea:	9803      	ldr	r0, [sp, #12]
 8005eec:	f7ff ff6c 	bl	8005dc8 <__ssputs_r>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d100      	bne.n	8005ef6 <_svfiprintf_r+0x6a>
 8005ef4:	e0ae      	b.n	8006054 <_svfiprintf_r+0x1c8>
 8005ef6:	6962      	ldr	r2, [r4, #20]
 8005ef8:	9b05      	ldr	r3, [sp, #20]
 8005efa:	4694      	mov	ip, r2
 8005efc:	4463      	add	r3, ip
 8005efe:	6163      	str	r3, [r4, #20]
 8005f00:	782b      	ldrb	r3, [r5, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d100      	bne.n	8005f08 <_svfiprintf_r+0x7c>
 8005f06:	e0a5      	b.n	8006054 <_svfiprintf_r+0x1c8>
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4252      	negs	r2, r2
 8005f0e:	6062      	str	r2, [r4, #4]
 8005f10:	a904      	add	r1, sp, #16
 8005f12:	3254      	adds	r2, #84	; 0x54
 8005f14:	1852      	adds	r2, r2, r1
 8005f16:	1c6e      	adds	r6, r5, #1
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	60e3      	str	r3, [r4, #12]
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	7013      	strb	r3, [r2, #0]
 8005f20:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f22:	2205      	movs	r2, #5
 8005f24:	7831      	ldrb	r1, [r6, #0]
 8005f26:	4854      	ldr	r0, [pc, #336]	; (8006078 <_svfiprintf_r+0x1ec>)
 8005f28:	f000 fa32 	bl	8006390 <memchr>
 8005f2c:	1c75      	adds	r5, r6, #1
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d11f      	bne.n	8005f72 <_svfiprintf_r+0xe6>
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	06d3      	lsls	r3, r2, #27
 8005f36:	d504      	bpl.n	8005f42 <_svfiprintf_r+0xb6>
 8005f38:	2353      	movs	r3, #83	; 0x53
 8005f3a:	a904      	add	r1, sp, #16
 8005f3c:	185b      	adds	r3, r3, r1
 8005f3e:	2120      	movs	r1, #32
 8005f40:	7019      	strb	r1, [r3, #0]
 8005f42:	0713      	lsls	r3, r2, #28
 8005f44:	d504      	bpl.n	8005f50 <_svfiprintf_r+0xc4>
 8005f46:	2353      	movs	r3, #83	; 0x53
 8005f48:	a904      	add	r1, sp, #16
 8005f4a:	185b      	adds	r3, r3, r1
 8005f4c:	212b      	movs	r1, #43	; 0x2b
 8005f4e:	7019      	strb	r1, [r3, #0]
 8005f50:	7833      	ldrb	r3, [r6, #0]
 8005f52:	2b2a      	cmp	r3, #42	; 0x2a
 8005f54:	d016      	beq.n	8005f84 <_svfiprintf_r+0xf8>
 8005f56:	0035      	movs	r5, r6
 8005f58:	2100      	movs	r1, #0
 8005f5a:	200a      	movs	r0, #10
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	782a      	ldrb	r2, [r5, #0]
 8005f60:	1c6e      	adds	r6, r5, #1
 8005f62:	3a30      	subs	r2, #48	; 0x30
 8005f64:	2a09      	cmp	r2, #9
 8005f66:	d94e      	bls.n	8006006 <_svfiprintf_r+0x17a>
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d111      	bne.n	8005f90 <_svfiprintf_r+0x104>
 8005f6c:	e017      	b.n	8005f9e <_svfiprintf_r+0x112>
 8005f6e:	3501      	adds	r5, #1
 8005f70:	e7b0      	b.n	8005ed4 <_svfiprintf_r+0x48>
 8005f72:	4b41      	ldr	r3, [pc, #260]	; (8006078 <_svfiprintf_r+0x1ec>)
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	1ac0      	subs	r0, r0, r3
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4083      	lsls	r3, r0
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	002e      	movs	r6, r5
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	e7ce      	b.n	8005f22 <_svfiprintf_r+0x96>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db01      	blt.n	8005f94 <_svfiprintf_r+0x108>
 8005f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f92:	e004      	b.n	8005f9e <_svfiprintf_r+0x112>
 8005f94:	425b      	negs	r3, r3
 8005f96:	60e3      	str	r3, [r4, #12]
 8005f98:	2302      	movs	r3, #2
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	782b      	ldrb	r3, [r5, #0]
 8005fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa2:	d10a      	bne.n	8005fba <_svfiprintf_r+0x12e>
 8005fa4:	786b      	ldrb	r3, [r5, #1]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d135      	bne.n	8006016 <_svfiprintf_r+0x18a>
 8005faa:	9b07      	ldr	r3, [sp, #28]
 8005fac:	3502      	adds	r5, #2
 8005fae:	1d1a      	adds	r2, r3, #4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	9207      	str	r2, [sp, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	db2b      	blt.n	8006010 <_svfiprintf_r+0x184>
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	4e30      	ldr	r6, [pc, #192]	; (800607c <_svfiprintf_r+0x1f0>)
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	0030      	movs	r0, r6
 8005fc0:	7829      	ldrb	r1, [r5, #0]
 8005fc2:	f000 f9e5 	bl	8006390 <memchr>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d006      	beq.n	8005fd8 <_svfiprintf_r+0x14c>
 8005fca:	2340      	movs	r3, #64	; 0x40
 8005fcc:	1b80      	subs	r0, r0, r6
 8005fce:	4083      	lsls	r3, r0
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	3501      	adds	r5, #1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	7829      	ldrb	r1, [r5, #0]
 8005fda:	2206      	movs	r2, #6
 8005fdc:	4828      	ldr	r0, [pc, #160]	; (8006080 <_svfiprintf_r+0x1f4>)
 8005fde:	1c6e      	adds	r6, r5, #1
 8005fe0:	7621      	strb	r1, [r4, #24]
 8005fe2:	f000 f9d5 	bl	8006390 <memchr>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d03c      	beq.n	8006064 <_svfiprintf_r+0x1d8>
 8005fea:	4b26      	ldr	r3, [pc, #152]	; (8006084 <_svfiprintf_r+0x1f8>)
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d125      	bne.n	800603c <_svfiprintf_r+0x1b0>
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	9b07      	ldr	r3, [sp, #28]
 8005ff4:	3307      	adds	r3, #7
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	6963      	ldr	r3, [r4, #20]
 8005ffe:	9a04      	ldr	r2, [sp, #16]
 8006000:	189b      	adds	r3, r3, r2
 8006002:	6163      	str	r3, [r4, #20]
 8006004:	e765      	b.n	8005ed2 <_svfiprintf_r+0x46>
 8006006:	4343      	muls	r3, r0
 8006008:	0035      	movs	r5, r6
 800600a:	2101      	movs	r1, #1
 800600c:	189b      	adds	r3, r3, r2
 800600e:	e7a6      	b.n	8005f5e <_svfiprintf_r+0xd2>
 8006010:	2301      	movs	r3, #1
 8006012:	425b      	negs	r3, r3
 8006014:	e7d0      	b.n	8005fb8 <_svfiprintf_r+0x12c>
 8006016:	2300      	movs	r3, #0
 8006018:	200a      	movs	r0, #10
 800601a:	001a      	movs	r2, r3
 800601c:	3501      	adds	r5, #1
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	7829      	ldrb	r1, [r5, #0]
 8006022:	1c6e      	adds	r6, r5, #1
 8006024:	3930      	subs	r1, #48	; 0x30
 8006026:	2909      	cmp	r1, #9
 8006028:	d903      	bls.n	8006032 <_svfiprintf_r+0x1a6>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0c5      	beq.n	8005fba <_svfiprintf_r+0x12e>
 800602e:	9209      	str	r2, [sp, #36]	; 0x24
 8006030:	e7c3      	b.n	8005fba <_svfiprintf_r+0x12e>
 8006032:	4342      	muls	r2, r0
 8006034:	0035      	movs	r5, r6
 8006036:	2301      	movs	r3, #1
 8006038:	1852      	adds	r2, r2, r1
 800603a:	e7f1      	b.n	8006020 <_svfiprintf_r+0x194>
 800603c:	ab07      	add	r3, sp, #28
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	003a      	movs	r2, r7
 8006042:	0021      	movs	r1, r4
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <_svfiprintf_r+0x1fc>)
 8006046:	9803      	ldr	r0, [sp, #12]
 8006048:	e000      	b.n	800604c <_svfiprintf_r+0x1c0>
 800604a:	bf00      	nop
 800604c:	9004      	str	r0, [sp, #16]
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	3301      	adds	r3, #1
 8006052:	d1d3      	bne.n	8005ffc <_svfiprintf_r+0x170>
 8006054:	89bb      	ldrh	r3, [r7, #12]
 8006056:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006058:	065b      	lsls	r3, r3, #25
 800605a:	d400      	bmi.n	800605e <_svfiprintf_r+0x1d2>
 800605c:	e72d      	b.n	8005eba <_svfiprintf_r+0x2e>
 800605e:	2001      	movs	r0, #1
 8006060:	4240      	negs	r0, r0
 8006062:	e72a      	b.n	8005eba <_svfiprintf_r+0x2e>
 8006064:	ab07      	add	r3, sp, #28
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	003a      	movs	r2, r7
 800606a:	0021      	movs	r1, r4
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <_svfiprintf_r+0x1fc>)
 800606e:	9803      	ldr	r0, [sp, #12]
 8006070:	f000 f87c 	bl	800616c <_printf_i>
 8006074:	e7ea      	b.n	800604c <_svfiprintf_r+0x1c0>
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	080068b4 	.word	0x080068b4
 800607c:	080068ba 	.word	0x080068ba
 8006080:	080068be 	.word	0x080068be
 8006084:	00000000 	.word	0x00000000
 8006088:	08005dc9 	.word	0x08005dc9

0800608c <_printf_common>:
 800608c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800608e:	0015      	movs	r5, r2
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	688a      	ldr	r2, [r1, #8]
 8006094:	690b      	ldr	r3, [r1, #16]
 8006096:	000c      	movs	r4, r1
 8006098:	9000      	str	r0, [sp, #0]
 800609a:	4293      	cmp	r3, r2
 800609c:	da00      	bge.n	80060a0 <_printf_common+0x14>
 800609e:	0013      	movs	r3, r2
 80060a0:	0022      	movs	r2, r4
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	3243      	adds	r2, #67	; 0x43
 80060a6:	7812      	ldrb	r2, [r2, #0]
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d001      	beq.n	80060b0 <_printf_common+0x24>
 80060ac:	3301      	adds	r3, #1
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	069b      	lsls	r3, r3, #26
 80060b4:	d502      	bpl.n	80060bc <_printf_common+0x30>
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	3302      	adds	r3, #2
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	6822      	ldr	r2, [r4, #0]
 80060be:	2306      	movs	r3, #6
 80060c0:	0017      	movs	r7, r2
 80060c2:	401f      	ands	r7, r3
 80060c4:	421a      	tst	r2, r3
 80060c6:	d027      	beq.n	8006118 <_printf_common+0x8c>
 80060c8:	0023      	movs	r3, r4
 80060ca:	3343      	adds	r3, #67	; 0x43
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	4193      	sbcs	r3, r2
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d430      	bmi.n	800613a <_printf_common+0xae>
 80060d8:	0022      	movs	r2, r4
 80060da:	9901      	ldr	r1, [sp, #4]
 80060dc:	9800      	ldr	r0, [sp, #0]
 80060de:	9e08      	ldr	r6, [sp, #32]
 80060e0:	3243      	adds	r2, #67	; 0x43
 80060e2:	47b0      	blx	r6
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d025      	beq.n	8006134 <_printf_common+0xa8>
 80060e8:	2306      	movs	r3, #6
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	682a      	ldr	r2, [r5, #0]
 80060ee:	68e1      	ldr	r1, [r4, #12]
 80060f0:	2500      	movs	r5, #0
 80060f2:	4003      	ands	r3, r0
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d103      	bne.n	8006100 <_printf_common+0x74>
 80060f8:	1a8d      	subs	r5, r1, r2
 80060fa:	43eb      	mvns	r3, r5
 80060fc:	17db      	asrs	r3, r3, #31
 80060fe:	401d      	ands	r5, r3
 8006100:	68a3      	ldr	r3, [r4, #8]
 8006102:	6922      	ldr	r2, [r4, #16]
 8006104:	4293      	cmp	r3, r2
 8006106:	dd01      	ble.n	800610c <_printf_common+0x80>
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	18ed      	adds	r5, r5, r3
 800610c:	2700      	movs	r7, #0
 800610e:	42bd      	cmp	r5, r7
 8006110:	d120      	bne.n	8006154 <_printf_common+0xc8>
 8006112:	2000      	movs	r0, #0
 8006114:	e010      	b.n	8006138 <_printf_common+0xac>
 8006116:	3701      	adds	r7, #1
 8006118:	68e3      	ldr	r3, [r4, #12]
 800611a:	682a      	ldr	r2, [r5, #0]
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	42bb      	cmp	r3, r7
 8006120:	ddd2      	ble.n	80060c8 <_printf_common+0x3c>
 8006122:	0022      	movs	r2, r4
 8006124:	2301      	movs	r3, #1
 8006126:	9901      	ldr	r1, [sp, #4]
 8006128:	9800      	ldr	r0, [sp, #0]
 800612a:	9e08      	ldr	r6, [sp, #32]
 800612c:	3219      	adds	r2, #25
 800612e:	47b0      	blx	r6
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d1f0      	bne.n	8006116 <_printf_common+0x8a>
 8006134:	2001      	movs	r0, #1
 8006136:	4240      	negs	r0, r0
 8006138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800613a:	2030      	movs	r0, #48	; 0x30
 800613c:	18e1      	adds	r1, r4, r3
 800613e:	3143      	adds	r1, #67	; 0x43
 8006140:	7008      	strb	r0, [r1, #0]
 8006142:	0021      	movs	r1, r4
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	3145      	adds	r1, #69	; 0x45
 8006148:	7809      	ldrb	r1, [r1, #0]
 800614a:	18a2      	adds	r2, r4, r2
 800614c:	3243      	adds	r2, #67	; 0x43
 800614e:	3302      	adds	r3, #2
 8006150:	7011      	strb	r1, [r2, #0]
 8006152:	e7c1      	b.n	80060d8 <_printf_common+0x4c>
 8006154:	0022      	movs	r2, r4
 8006156:	2301      	movs	r3, #1
 8006158:	9901      	ldr	r1, [sp, #4]
 800615a:	9800      	ldr	r0, [sp, #0]
 800615c:	9e08      	ldr	r6, [sp, #32]
 800615e:	321a      	adds	r2, #26
 8006160:	47b0      	blx	r6
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa8>
 8006166:	3701      	adds	r7, #1
 8006168:	e7d1      	b.n	800610e <_printf_common+0x82>
	...

0800616c <_printf_i>:
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616e:	b08b      	sub	sp, #44	; 0x2c
 8006170:	9206      	str	r2, [sp, #24]
 8006172:	000a      	movs	r2, r1
 8006174:	3243      	adds	r2, #67	; 0x43
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	9005      	str	r0, [sp, #20]
 800617a:	9204      	str	r2, [sp, #16]
 800617c:	7e0a      	ldrb	r2, [r1, #24]
 800617e:	000c      	movs	r4, r1
 8006180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006182:	2a78      	cmp	r2, #120	; 0x78
 8006184:	d807      	bhi.n	8006196 <_printf_i+0x2a>
 8006186:	2a62      	cmp	r2, #98	; 0x62
 8006188:	d809      	bhi.n	800619e <_printf_i+0x32>
 800618a:	2a00      	cmp	r2, #0
 800618c:	d100      	bne.n	8006190 <_printf_i+0x24>
 800618e:	e0c1      	b.n	8006314 <_printf_i+0x1a8>
 8006190:	2a58      	cmp	r2, #88	; 0x58
 8006192:	d100      	bne.n	8006196 <_printf_i+0x2a>
 8006194:	e08c      	b.n	80062b0 <_printf_i+0x144>
 8006196:	0026      	movs	r6, r4
 8006198:	3642      	adds	r6, #66	; 0x42
 800619a:	7032      	strb	r2, [r6, #0]
 800619c:	e022      	b.n	80061e4 <_printf_i+0x78>
 800619e:	0010      	movs	r0, r2
 80061a0:	3863      	subs	r0, #99	; 0x63
 80061a2:	2815      	cmp	r0, #21
 80061a4:	d8f7      	bhi.n	8006196 <_printf_i+0x2a>
 80061a6:	f7f9 ffb3 	bl	8000110 <__gnu_thumb1_case_shi>
 80061aa:	0016      	.short	0x0016
 80061ac:	fff6001f 	.word	0xfff6001f
 80061b0:	fff6fff6 	.word	0xfff6fff6
 80061b4:	001ffff6 	.word	0x001ffff6
 80061b8:	fff6fff6 	.word	0xfff6fff6
 80061bc:	fff6fff6 	.word	0xfff6fff6
 80061c0:	003600a8 	.word	0x003600a8
 80061c4:	fff6009a 	.word	0xfff6009a
 80061c8:	00b9fff6 	.word	0x00b9fff6
 80061cc:	0036fff6 	.word	0x0036fff6
 80061d0:	fff6fff6 	.word	0xfff6fff6
 80061d4:	009e      	.short	0x009e
 80061d6:	0026      	movs	r6, r4
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	3642      	adds	r6, #66	; 0x42
 80061dc:	1d11      	adds	r1, r2, #4
 80061de:	6019      	str	r1, [r3, #0]
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	7033      	strb	r3, [r6, #0]
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0a7      	b.n	8006338 <_printf_i+0x1cc>
 80061e8:	6808      	ldr	r0, [r1, #0]
 80061ea:	6819      	ldr	r1, [r3, #0]
 80061ec:	1d0a      	adds	r2, r1, #4
 80061ee:	0605      	lsls	r5, r0, #24
 80061f0:	d50b      	bpl.n	800620a <_printf_i+0x9e>
 80061f2:	680d      	ldr	r5, [r1, #0]
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	da03      	bge.n	8006202 <_printf_i+0x96>
 80061fa:	232d      	movs	r3, #45	; 0x2d
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	426d      	negs	r5, r5
 8006200:	7013      	strb	r3, [r2, #0]
 8006202:	4b61      	ldr	r3, [pc, #388]	; (8006388 <_printf_i+0x21c>)
 8006204:	270a      	movs	r7, #10
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	e01b      	b.n	8006242 <_printf_i+0xd6>
 800620a:	680d      	ldr	r5, [r1, #0]
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	0641      	lsls	r1, r0, #25
 8006210:	d5f1      	bpl.n	80061f6 <_printf_i+0x8a>
 8006212:	b22d      	sxth	r5, r5
 8006214:	e7ef      	b.n	80061f6 <_printf_i+0x8a>
 8006216:	680d      	ldr	r5, [r1, #0]
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	1d08      	adds	r0, r1, #4
 800621c:	6018      	str	r0, [r3, #0]
 800621e:	062e      	lsls	r6, r5, #24
 8006220:	d501      	bpl.n	8006226 <_printf_i+0xba>
 8006222:	680d      	ldr	r5, [r1, #0]
 8006224:	e003      	b.n	800622e <_printf_i+0xc2>
 8006226:	066d      	lsls	r5, r5, #25
 8006228:	d5fb      	bpl.n	8006222 <_printf_i+0xb6>
 800622a:	680d      	ldr	r5, [r1, #0]
 800622c:	b2ad      	uxth	r5, r5
 800622e:	4b56      	ldr	r3, [pc, #344]	; (8006388 <_printf_i+0x21c>)
 8006230:	2708      	movs	r7, #8
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	2a6f      	cmp	r2, #111	; 0x6f
 8006236:	d000      	beq.n	800623a <_printf_i+0xce>
 8006238:	3702      	adds	r7, #2
 800623a:	0023      	movs	r3, r4
 800623c:	2200      	movs	r2, #0
 800623e:	3343      	adds	r3, #67	; 0x43
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	60a3      	str	r3, [r4, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db03      	blt.n	8006252 <_printf_i+0xe6>
 800624a:	2204      	movs	r2, #4
 800624c:	6821      	ldr	r1, [r4, #0]
 800624e:	4391      	bics	r1, r2
 8006250:	6021      	str	r1, [r4, #0]
 8006252:	2d00      	cmp	r5, #0
 8006254:	d102      	bne.n	800625c <_printf_i+0xf0>
 8006256:	9e04      	ldr	r6, [sp, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <_printf_i+0x10a>
 800625c:	9e04      	ldr	r6, [sp, #16]
 800625e:	0028      	movs	r0, r5
 8006260:	0039      	movs	r1, r7
 8006262:	f7f9 ffe5 	bl	8000230 <__aeabi_uidivmod>
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	3e01      	subs	r6, #1
 800626a:	5c5b      	ldrb	r3, [r3, r1]
 800626c:	7033      	strb	r3, [r6, #0]
 800626e:	002b      	movs	r3, r5
 8006270:	0005      	movs	r5, r0
 8006272:	429f      	cmp	r7, r3
 8006274:	d9f3      	bls.n	800625e <_printf_i+0xf2>
 8006276:	2f08      	cmp	r7, #8
 8006278:	d109      	bne.n	800628e <_printf_i+0x122>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	07db      	lsls	r3, r3, #31
 800627e:	d506      	bpl.n	800628e <_printf_i+0x122>
 8006280:	6863      	ldr	r3, [r4, #4]
 8006282:	6922      	ldr	r2, [r4, #16]
 8006284:	4293      	cmp	r3, r2
 8006286:	dc02      	bgt.n	800628e <_printf_i+0x122>
 8006288:	2330      	movs	r3, #48	; 0x30
 800628a:	3e01      	subs	r6, #1
 800628c:	7033      	strb	r3, [r6, #0]
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	9b07      	ldr	r3, [sp, #28]
 8006296:	0021      	movs	r1, r4
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	9805      	ldr	r0, [sp, #20]
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	aa09      	add	r2, sp, #36	; 0x24
 80062a0:	f7ff fef4 	bl	800608c <_printf_common>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d14c      	bne.n	8006342 <_printf_i+0x1d6>
 80062a8:	2001      	movs	r0, #1
 80062aa:	4240      	negs	r0, r0
 80062ac:	b00b      	add	sp, #44	; 0x2c
 80062ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b0:	3145      	adds	r1, #69	; 0x45
 80062b2:	700a      	strb	r2, [r1, #0]
 80062b4:	4a34      	ldr	r2, [pc, #208]	; (8006388 <_printf_i+0x21c>)
 80062b6:	9203      	str	r2, [sp, #12]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	ca20      	ldmia	r2!, {r5}
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	0608      	lsls	r0, r1, #24
 80062c2:	d516      	bpl.n	80062f2 <_printf_i+0x186>
 80062c4:	07cb      	lsls	r3, r1, #31
 80062c6:	d502      	bpl.n	80062ce <_printf_i+0x162>
 80062c8:	2320      	movs	r3, #32
 80062ca:	4319      	orrs	r1, r3
 80062cc:	6021      	str	r1, [r4, #0]
 80062ce:	2710      	movs	r7, #16
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d1b2      	bne.n	800623a <_printf_i+0xce>
 80062d4:	2320      	movs	r3, #32
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	439a      	bics	r2, r3
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	e7ad      	b.n	800623a <_printf_i+0xce>
 80062de:	2220      	movs	r2, #32
 80062e0:	6809      	ldr	r1, [r1, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	0022      	movs	r2, r4
 80062e8:	2178      	movs	r1, #120	; 0x78
 80062ea:	3245      	adds	r2, #69	; 0x45
 80062ec:	7011      	strb	r1, [r2, #0]
 80062ee:	4a27      	ldr	r2, [pc, #156]	; (800638c <_printf_i+0x220>)
 80062f0:	e7e1      	b.n	80062b6 <_printf_i+0x14a>
 80062f2:	0648      	lsls	r0, r1, #25
 80062f4:	d5e6      	bpl.n	80062c4 <_printf_i+0x158>
 80062f6:	b2ad      	uxth	r5, r5
 80062f8:	e7e4      	b.n	80062c4 <_printf_i+0x158>
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	680d      	ldr	r5, [r1, #0]
 80062fe:	1d10      	adds	r0, r2, #4
 8006300:	6949      	ldr	r1, [r1, #20]
 8006302:	6018      	str	r0, [r3, #0]
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	062e      	lsls	r6, r5, #24
 8006308:	d501      	bpl.n	800630e <_printf_i+0x1a2>
 800630a:	6019      	str	r1, [r3, #0]
 800630c:	e002      	b.n	8006314 <_printf_i+0x1a8>
 800630e:	066d      	lsls	r5, r5, #25
 8006310:	d5fb      	bpl.n	800630a <_printf_i+0x19e>
 8006312:	8019      	strh	r1, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	9e04      	ldr	r6, [sp, #16]
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	e7bb      	b.n	8006294 <_printf_i+0x128>
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	1d11      	adds	r1, r2, #4
 8006320:	6019      	str	r1, [r3, #0]
 8006322:	6816      	ldr	r6, [r2, #0]
 8006324:	2100      	movs	r1, #0
 8006326:	0030      	movs	r0, r6
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	f000 f831 	bl	8006390 <memchr>
 800632e:	2800      	cmp	r0, #0
 8006330:	d001      	beq.n	8006336 <_printf_i+0x1ca>
 8006332:	1b80      	subs	r0, r0, r6
 8006334:	6060      	str	r0, [r4, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	2300      	movs	r3, #0
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	7013      	strb	r3, [r2, #0]
 8006340:	e7a8      	b.n	8006294 <_printf_i+0x128>
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	0032      	movs	r2, r6
 8006346:	9906      	ldr	r1, [sp, #24]
 8006348:	9805      	ldr	r0, [sp, #20]
 800634a:	9d07      	ldr	r5, [sp, #28]
 800634c:	47a8      	blx	r5
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	d0aa      	beq.n	80062a8 <_printf_i+0x13c>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	079b      	lsls	r3, r3, #30
 8006356:	d415      	bmi.n	8006384 <_printf_i+0x218>
 8006358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635a:	68e0      	ldr	r0, [r4, #12]
 800635c:	4298      	cmp	r0, r3
 800635e:	daa5      	bge.n	80062ac <_printf_i+0x140>
 8006360:	0018      	movs	r0, r3
 8006362:	e7a3      	b.n	80062ac <_printf_i+0x140>
 8006364:	0022      	movs	r2, r4
 8006366:	2301      	movs	r3, #1
 8006368:	9906      	ldr	r1, [sp, #24]
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	9e07      	ldr	r6, [sp, #28]
 800636e:	3219      	adds	r2, #25
 8006370:	47b0      	blx	r6
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d098      	beq.n	80062a8 <_printf_i+0x13c>
 8006376:	3501      	adds	r5, #1
 8006378:	68e3      	ldr	r3, [r4, #12]
 800637a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	42ab      	cmp	r3, r5
 8006380:	dcf0      	bgt.n	8006364 <_printf_i+0x1f8>
 8006382:	e7e9      	b.n	8006358 <_printf_i+0x1ec>
 8006384:	2500      	movs	r5, #0
 8006386:	e7f7      	b.n	8006378 <_printf_i+0x20c>
 8006388:	080068c5 	.word	0x080068c5
 800638c:	080068d6 	.word	0x080068d6

08006390 <memchr>:
 8006390:	b2c9      	uxtb	r1, r1
 8006392:	1882      	adds	r2, r0, r2
 8006394:	4290      	cmp	r0, r2
 8006396:	d101      	bne.n	800639c <memchr+0xc>
 8006398:	2000      	movs	r0, #0
 800639a:	4770      	bx	lr
 800639c:	7803      	ldrb	r3, [r0, #0]
 800639e:	428b      	cmp	r3, r1
 80063a0:	d0fb      	beq.n	800639a <memchr+0xa>
 80063a2:	3001      	adds	r0, #1
 80063a4:	e7f6      	b.n	8006394 <memchr+0x4>

080063a6 <memcpy>:
 80063a6:	2300      	movs	r3, #0
 80063a8:	b510      	push	{r4, lr}
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d100      	bne.n	80063b0 <memcpy+0xa>
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	5ccc      	ldrb	r4, [r1, r3]
 80063b2:	54c4      	strb	r4, [r0, r3]
 80063b4:	3301      	adds	r3, #1
 80063b6:	e7f8      	b.n	80063aa <memcpy+0x4>

080063b8 <memmove>:
 80063b8:	b510      	push	{r4, lr}
 80063ba:	4288      	cmp	r0, r1
 80063bc:	d902      	bls.n	80063c4 <memmove+0xc>
 80063be:	188b      	adds	r3, r1, r2
 80063c0:	4298      	cmp	r0, r3
 80063c2:	d303      	bcc.n	80063cc <memmove+0x14>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e007      	b.n	80063d8 <memmove+0x20>
 80063c8:	5c8b      	ldrb	r3, [r1, r2]
 80063ca:	5483      	strb	r3, [r0, r2]
 80063cc:	3a01      	subs	r2, #1
 80063ce:	d2fb      	bcs.n	80063c8 <memmove+0x10>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	5ccc      	ldrb	r4, [r1, r3]
 80063d4:	54c4      	strb	r4, [r0, r3]
 80063d6:	3301      	adds	r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1fa      	bne.n	80063d2 <memmove+0x1a>
 80063dc:	e7f8      	b.n	80063d0 <memmove+0x18>
	...

080063e0 <_free_r>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	0005      	movs	r5, r0
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d010      	beq.n	800640a <_free_r+0x2a>
 80063e8:	1f0c      	subs	r4, r1, #4
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da00      	bge.n	80063f2 <_free_r+0x12>
 80063f0:	18e4      	adds	r4, r4, r3
 80063f2:	0028      	movs	r0, r5
 80063f4:	f000 f918 	bl	8006628 <__malloc_lock>
 80063f8:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <_free_r+0x90>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <_free_r+0x2c>
 8006400:	6063      	str	r3, [r4, #4]
 8006402:	6014      	str	r4, [r2, #0]
 8006404:	0028      	movs	r0, r5
 8006406:	f000 f917 	bl	8006638 <__malloc_unlock>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	42a3      	cmp	r3, r4
 800640e:	d908      	bls.n	8006422 <_free_r+0x42>
 8006410:	6821      	ldr	r1, [r4, #0]
 8006412:	1860      	adds	r0, r4, r1
 8006414:	4283      	cmp	r3, r0
 8006416:	d1f3      	bne.n	8006400 <_free_r+0x20>
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	1841      	adds	r1, r0, r1
 800641e:	6021      	str	r1, [r4, #0]
 8006420:	e7ee      	b.n	8006400 <_free_r+0x20>
 8006422:	001a      	movs	r2, r3
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <_free_r+0x4e>
 800642a:	42a3      	cmp	r3, r4
 800642c:	d9f9      	bls.n	8006422 <_free_r+0x42>
 800642e:	6811      	ldr	r1, [r2, #0]
 8006430:	1850      	adds	r0, r2, r1
 8006432:	42a0      	cmp	r0, r4
 8006434:	d10b      	bne.n	800644e <_free_r+0x6e>
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1809      	adds	r1, r1, r0
 800643a:	1850      	adds	r0, r2, r1
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	4283      	cmp	r3, r0
 8006440:	d1e0      	bne.n	8006404 <_free_r+0x24>
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	1841      	adds	r1, r0, r1
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	6053      	str	r3, [r2, #4]
 800644c:	e7da      	b.n	8006404 <_free_r+0x24>
 800644e:	42a0      	cmp	r0, r4
 8006450:	d902      	bls.n	8006458 <_free_r+0x78>
 8006452:	230c      	movs	r3, #12
 8006454:	602b      	str	r3, [r5, #0]
 8006456:	e7d5      	b.n	8006404 <_free_r+0x24>
 8006458:	6821      	ldr	r1, [r4, #0]
 800645a:	1860      	adds	r0, r4, r1
 800645c:	4283      	cmp	r3, r0
 800645e:	d103      	bne.n	8006468 <_free_r+0x88>
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	1841      	adds	r1, r0, r1
 8006466:	6021      	str	r1, [r4, #0]
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6054      	str	r4, [r2, #4]
 800646c:	e7ca      	b.n	8006404 <_free_r+0x24>
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	2000022c 	.word	0x2000022c

08006474 <sbrk_aligned>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4e0f      	ldr	r6, [pc, #60]	; (80064b4 <sbrk_aligned+0x40>)
 8006478:	000d      	movs	r5, r1
 800647a:	6831      	ldr	r1, [r6, #0]
 800647c:	0004      	movs	r4, r0
 800647e:	2900      	cmp	r1, #0
 8006480:	d102      	bne.n	8006488 <sbrk_aligned+0x14>
 8006482:	f000 f8bf 	bl	8006604 <_sbrk_r>
 8006486:	6030      	str	r0, [r6, #0]
 8006488:	0029      	movs	r1, r5
 800648a:	0020      	movs	r0, r4
 800648c:	f000 f8ba 	bl	8006604 <_sbrk_r>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d00a      	beq.n	80064aa <sbrk_aligned+0x36>
 8006494:	2303      	movs	r3, #3
 8006496:	1cc5      	adds	r5, r0, #3
 8006498:	439d      	bics	r5, r3
 800649a:	42a8      	cmp	r0, r5
 800649c:	d007      	beq.n	80064ae <sbrk_aligned+0x3a>
 800649e:	1a29      	subs	r1, r5, r0
 80064a0:	0020      	movs	r0, r4
 80064a2:	f000 f8af 	bl	8006604 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d101      	bne.n	80064ae <sbrk_aligned+0x3a>
 80064aa:	2501      	movs	r5, #1
 80064ac:	426d      	negs	r5, r5
 80064ae:	0028      	movs	r0, r5
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	20000230 	.word	0x20000230

080064b8 <_malloc_r>:
 80064b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ba:	2203      	movs	r2, #3
 80064bc:	1ccb      	adds	r3, r1, #3
 80064be:	4393      	bics	r3, r2
 80064c0:	3308      	adds	r3, #8
 80064c2:	0006      	movs	r6, r0
 80064c4:	001f      	movs	r7, r3
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d232      	bcs.n	8006530 <_malloc_r+0x78>
 80064ca:	270c      	movs	r7, #12
 80064cc:	42b9      	cmp	r1, r7
 80064ce:	d831      	bhi.n	8006534 <_malloc_r+0x7c>
 80064d0:	0030      	movs	r0, r6
 80064d2:	f000 f8a9 	bl	8006628 <__malloc_lock>
 80064d6:	4d32      	ldr	r5, [pc, #200]	; (80065a0 <_malloc_r+0xe8>)
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	001c      	movs	r4, r3
 80064dc:	2c00      	cmp	r4, #0
 80064de:	d12e      	bne.n	800653e <_malloc_r+0x86>
 80064e0:	0039      	movs	r1, r7
 80064e2:	0030      	movs	r0, r6
 80064e4:	f7ff ffc6 	bl	8006474 <sbrk_aligned>
 80064e8:	0004      	movs	r4, r0
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d11e      	bne.n	800652c <_malloc_r+0x74>
 80064ee:	682c      	ldr	r4, [r5, #0]
 80064f0:	0025      	movs	r5, r4
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	d14a      	bne.n	800658c <_malloc_r+0xd4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0029      	movs	r1, r5
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	0030      	movs	r0, r6
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	f000 f880 	bl	8006604 <_sbrk_r>
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	4283      	cmp	r3, r0
 8006508:	d143      	bne.n	8006592 <_malloc_r+0xda>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	3703      	adds	r7, #3
 800650e:	1aff      	subs	r7, r7, r3
 8006510:	2303      	movs	r3, #3
 8006512:	439f      	bics	r7, r3
 8006514:	3708      	adds	r7, #8
 8006516:	2f0c      	cmp	r7, #12
 8006518:	d200      	bcs.n	800651c <_malloc_r+0x64>
 800651a:	270c      	movs	r7, #12
 800651c:	0039      	movs	r1, r7
 800651e:	0030      	movs	r0, r6
 8006520:	f7ff ffa8 	bl	8006474 <sbrk_aligned>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d034      	beq.n	8006592 <_malloc_r+0xda>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	19df      	adds	r7, r3, r7
 800652c:	6027      	str	r7, [r4, #0]
 800652e:	e013      	b.n	8006558 <_malloc_r+0xa0>
 8006530:	2b00      	cmp	r3, #0
 8006532:	dacb      	bge.n	80064cc <_malloc_r+0x14>
 8006534:	230c      	movs	r3, #12
 8006536:	2500      	movs	r5, #0
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	0028      	movs	r0, r5
 800653c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	1bd1      	subs	r1, r2, r7
 8006542:	d420      	bmi.n	8006586 <_malloc_r+0xce>
 8006544:	290b      	cmp	r1, #11
 8006546:	d917      	bls.n	8006578 <_malloc_r+0xc0>
 8006548:	19e2      	adds	r2, r4, r7
 800654a:	6027      	str	r7, [r4, #0]
 800654c:	42a3      	cmp	r3, r4
 800654e:	d111      	bne.n	8006574 <_malloc_r+0xbc>
 8006550:	602a      	str	r2, [r5, #0]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6011      	str	r1, [r2, #0]
 8006556:	6053      	str	r3, [r2, #4]
 8006558:	0030      	movs	r0, r6
 800655a:	0025      	movs	r5, r4
 800655c:	f000 f86c 	bl	8006638 <__malloc_unlock>
 8006560:	2207      	movs	r2, #7
 8006562:	350b      	adds	r5, #11
 8006564:	1d23      	adds	r3, r4, #4
 8006566:	4395      	bics	r5, r2
 8006568:	1aea      	subs	r2, r5, r3
 800656a:	429d      	cmp	r5, r3
 800656c:	d0e5      	beq.n	800653a <_malloc_r+0x82>
 800656e:	1b5b      	subs	r3, r3, r5
 8006570:	50a3      	str	r3, [r4, r2]
 8006572:	e7e2      	b.n	800653a <_malloc_r+0x82>
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	e7ec      	b.n	8006552 <_malloc_r+0x9a>
 8006578:	6862      	ldr	r2, [r4, #4]
 800657a:	42a3      	cmp	r3, r4
 800657c:	d101      	bne.n	8006582 <_malloc_r+0xca>
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	e7ea      	b.n	8006558 <_malloc_r+0xa0>
 8006582:	605a      	str	r2, [r3, #4]
 8006584:	e7e8      	b.n	8006558 <_malloc_r+0xa0>
 8006586:	0023      	movs	r3, r4
 8006588:	6864      	ldr	r4, [r4, #4]
 800658a:	e7a7      	b.n	80064dc <_malloc_r+0x24>
 800658c:	002c      	movs	r4, r5
 800658e:	686d      	ldr	r5, [r5, #4]
 8006590:	e7af      	b.n	80064f2 <_malloc_r+0x3a>
 8006592:	230c      	movs	r3, #12
 8006594:	0030      	movs	r0, r6
 8006596:	6033      	str	r3, [r6, #0]
 8006598:	f000 f84e 	bl	8006638 <__malloc_unlock>
 800659c:	e7cd      	b.n	800653a <_malloc_r+0x82>
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	2000022c 	.word	0x2000022c

080065a4 <_realloc_r>:
 80065a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065a6:	0007      	movs	r7, r0
 80065a8:	000e      	movs	r6, r1
 80065aa:	0014      	movs	r4, r2
 80065ac:	2900      	cmp	r1, #0
 80065ae:	d105      	bne.n	80065bc <_realloc_r+0x18>
 80065b0:	0011      	movs	r1, r2
 80065b2:	f7ff ff81 	bl	80064b8 <_malloc_r>
 80065b6:	0005      	movs	r5, r0
 80065b8:	0028      	movs	r0, r5
 80065ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d103      	bne.n	80065c8 <_realloc_r+0x24>
 80065c0:	f7ff ff0e 	bl	80063e0 <_free_r>
 80065c4:	0025      	movs	r5, r4
 80065c6:	e7f7      	b.n	80065b8 <_realloc_r+0x14>
 80065c8:	f000 f83e 	bl	8006648 <_malloc_usable_size_r>
 80065cc:	9001      	str	r0, [sp, #4]
 80065ce:	4284      	cmp	r4, r0
 80065d0:	d803      	bhi.n	80065da <_realloc_r+0x36>
 80065d2:	0035      	movs	r5, r6
 80065d4:	0843      	lsrs	r3, r0, #1
 80065d6:	42a3      	cmp	r3, r4
 80065d8:	d3ee      	bcc.n	80065b8 <_realloc_r+0x14>
 80065da:	0021      	movs	r1, r4
 80065dc:	0038      	movs	r0, r7
 80065de:	f7ff ff6b 	bl	80064b8 <_malloc_r>
 80065e2:	1e05      	subs	r5, r0, #0
 80065e4:	d0e8      	beq.n	80065b8 <_realloc_r+0x14>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	0022      	movs	r2, r4
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d900      	bls.n	80065f0 <_realloc_r+0x4c>
 80065ee:	001a      	movs	r2, r3
 80065f0:	0031      	movs	r1, r6
 80065f2:	0028      	movs	r0, r5
 80065f4:	f7ff fed7 	bl	80063a6 <memcpy>
 80065f8:	0031      	movs	r1, r6
 80065fa:	0038      	movs	r0, r7
 80065fc:	f7ff fef0 	bl	80063e0 <_free_r>
 8006600:	e7da      	b.n	80065b8 <_realloc_r+0x14>
	...

08006604 <_sbrk_r>:
 8006604:	2300      	movs	r3, #0
 8006606:	b570      	push	{r4, r5, r6, lr}
 8006608:	4d06      	ldr	r5, [pc, #24]	; (8006624 <_sbrk_r+0x20>)
 800660a:	0004      	movs	r4, r0
 800660c:	0008      	movs	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fb fe64 	bl	80022dc <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d103      	bne.n	8006620 <_sbrk_r+0x1c>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d000      	beq.n	8006620 <_sbrk_r+0x1c>
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	20000234 	.word	0x20000234

08006628 <__malloc_lock>:
 8006628:	b510      	push	{r4, lr}
 800662a:	4802      	ldr	r0, [pc, #8]	; (8006634 <__malloc_lock+0xc>)
 800662c:	f000 f814 	bl	8006658 <__retarget_lock_acquire_recursive>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	20000238 	.word	0x20000238

08006638 <__malloc_unlock>:
 8006638:	b510      	push	{r4, lr}
 800663a:	4802      	ldr	r0, [pc, #8]	; (8006644 <__malloc_unlock+0xc>)
 800663c:	f000 f80d 	bl	800665a <__retarget_lock_release_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	20000238 	.word	0x20000238

08006648 <_malloc_usable_size_r>:
 8006648:	1f0b      	subs	r3, r1, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	1f18      	subs	r0, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	da01      	bge.n	8006656 <_malloc_usable_size_r+0xe>
 8006652:	580b      	ldr	r3, [r1, r0]
 8006654:	18c0      	adds	r0, r0, r3
 8006656:	4770      	bx	lr

08006658 <__retarget_lock_acquire_recursive>:
 8006658:	4770      	bx	lr

0800665a <__retarget_lock_release_recursive>:
 800665a:	4770      	bx	lr

0800665c <_init>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr

08006668 <_fini>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr
