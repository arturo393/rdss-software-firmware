
rdss_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f2c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  080075d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080075d0  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c55d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250e  00000000  00000000  0002c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002eb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ec  00000000  00000000  0002ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e15d  00000000  00000000  0004700c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d31  00000000  00000000  00055169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbe9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000dbeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006fcc 	.word	0x08006fcc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006fcc 	.word	0x08006fcc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cfrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0008      	movs	r0, r1
 8000230:	4661      	mov	r1, ip
 8000232:	e7ff      	b.n	8000234 <__aeabi_cfcmpeq>

08000234 <__aeabi_cfcmpeq>:
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000236:	f000 fc59 	bl	8000aec <__lesf2>
 800023a:	2800      	cmp	r0, #0
 800023c:	d401      	bmi.n	8000242 <__aeabi_cfcmpeq+0xe>
 800023e:	2100      	movs	r1, #0
 8000240:	42c8      	cmn	r0, r1
 8000242:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000244 <__aeabi_fcmpeq>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fbe5 	bl	8000a14 <__eqsf2>
 800024a:	4240      	negs	r0, r0
 800024c:	3001      	adds	r0, #1
 800024e:	bd10      	pop	{r4, pc}

08000250 <__aeabi_fcmplt>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fc4b 	bl	8000aec <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	db01      	blt.n	800025e <__aeabi_fcmplt+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmple>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fc41 	bl	8000aec <__lesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dd01      	ble.n	8000272 <__aeabi_fcmple+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpgt>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fbf1 	bl	8000a60 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dc01      	bgt.n	8000286 <__aeabi_fcmpgt+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fcmpge>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 fbe7 	bl	8000a60 <__gesf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	da01      	bge.n	800029a <__aeabi_fcmpge+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__aeabi_uldivmod>:
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d111      	bne.n	80002c8 <__aeabi_uldivmod+0x28>
 80002a4:	2a00      	cmp	r2, #0
 80002a6:	d10f      	bne.n	80002c8 <__aeabi_uldivmod+0x28>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	d100      	bne.n	80002ae <__aeabi_uldivmod+0xe>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d002      	beq.n	80002b6 <__aeabi_uldivmod+0x16>
 80002b0:	2100      	movs	r1, #0
 80002b2:	43c9      	mvns	r1, r1
 80002b4:	0008      	movs	r0, r1
 80002b6:	b407      	push	{r0, r1, r2}
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <__aeabi_uldivmod+0x24>)
 80002ba:	a102      	add	r1, pc, #8	; (adr r1, 80002c4 <__aeabi_uldivmod+0x24>)
 80002bc:	1840      	adds	r0, r0, r1
 80002be:	9002      	str	r0, [sp, #8]
 80002c0:	bd03      	pop	{r0, r1, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	ffffff65 	.word	0xffffff65
 80002c8:	b403      	push	{r0, r1}
 80002ca:	4668      	mov	r0, sp
 80002cc:	b501      	push	{r0, lr}
 80002ce:	9802      	ldr	r0, [sp, #8]
 80002d0:	f000 f81e 	bl	8000310 <__udivmoddi4>
 80002d4:	9b01      	ldr	r3, [sp, #4]
 80002d6:	469e      	mov	lr, r3
 80002d8:	b002      	add	sp, #8
 80002da:	bc0c      	pop	{r2, r3}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f7ff ffd0 	bl	800028c <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 ff13 	bl	800111c <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fd5f 	bl	8000dc0 <__aeabi_fsub>
 8000302:	f000 ff0b 	bl	800111c <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f000 ff74 	bl	800121c <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f000 ff6f 	bl	800121c <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	469b      	mov	fp, r3
 8000346:	d433      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000348:	465a      	mov	r2, fp
 800034a:	4653      	mov	r3, sl
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83a      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e078      	b.n	8000454 <__udivmoddi4+0x144>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e075      	b.n	800045a <__udivmoddi4+0x14a>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e028      	b.n	80003da <__udivmoddi4+0xca>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	4652      	mov	r2, sl
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	4641      	mov	r1, r8
 80003bc:	0013      	movs	r3, r2
 80003be:	464a      	mov	r2, r9
 80003c0:	408a      	lsls	r2, r1
 80003c2:	0017      	movs	r7, r2
 80003c4:	4642      	mov	r2, r8
 80003c6:	431f      	orrs	r7, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	4093      	lsls	r3, r2
 80003cc:	001e      	movs	r6, r3
 80003ce:	42af      	cmp	r7, r5
 80003d0:	d9c4      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d2:	2200      	movs	r2, #0
 80003d4:	2300      	movs	r3, #0
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	4643      	mov	r3, r8
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0d9      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e0:	07fb      	lsls	r3, r7, #31
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	431a      	orrs	r2, r3
 80003e6:	4646      	mov	r6, r8
 80003e8:	087b      	lsrs	r3, r7, #1
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xfa>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xe4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xfe>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0x108>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xdc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xfa>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	465b      	mov	r3, fp
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db24      	blt.n	8000470 <__udivmoddi4+0x160>
 8000426:	002b      	movs	r3, r5
 8000428:	465a      	mov	r2, fp
 800042a:	4644      	mov	r4, r8
 800042c:	40d3      	lsrs	r3, r2
 800042e:	002a      	movs	r2, r5
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	465b      	mov	r3, fp
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2a      	blt.n	8000492 <__udivmoddi4+0x182>
 800043c:	0026      	movs	r6, r4
 800043e:	409e      	lsls	r6, r3
 8000440:	0033      	movs	r3, r6
 8000442:	0026      	movs	r6, r4
 8000444:	4647      	mov	r7, r8
 8000446:	40be      	lsls	r6, r7
 8000448:	0032      	movs	r2, r6
 800044a:	1a80      	subs	r0, r0, r2
 800044c:	4199      	sbcs	r1, r3
 800044e:	9000      	str	r0, [sp, #0]
 8000450:	9101      	str	r1, [sp, #4]
 8000452:	e79f      	b.n	8000394 <__udivmoddi4+0x84>
 8000454:	42a3      	cmp	r3, r4
 8000456:	d8bc      	bhi.n	80003d2 <__udivmoddi4+0xc2>
 8000458:	e783      	b.n	8000362 <__udivmoddi4+0x52>
 800045a:	4642      	mov	r2, r8
 800045c:	2320      	movs	r3, #32
 800045e:	2100      	movs	r1, #0
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	2200      	movs	r2, #0
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	9201      	str	r2, [sp, #4]
 8000468:	2201      	movs	r2, #1
 800046a:	40da      	lsrs	r2, r3
 800046c:	9201      	str	r2, [sp, #4]
 800046e:	e786      	b.n	800037e <__udivmoddi4+0x6e>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	1a9b      	subs	r3, r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	4646      	mov	r6, r8
 800047a:	409a      	lsls	r2, r3
 800047c:	0023      	movs	r3, r4
 800047e:	40f3      	lsrs	r3, r6
 8000480:	4644      	mov	r4, r8
 8000482:	4313      	orrs	r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	40e2      	lsrs	r2, r4
 8000488:	001c      	movs	r4, r3
 800048a:	465b      	mov	r3, fp
 800048c:	0015      	movs	r5, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	dad4      	bge.n	800043c <__udivmoddi4+0x12c>
 8000492:	4642      	mov	r2, r8
 8000494:	002f      	movs	r7, r5
 8000496:	2320      	movs	r3, #32
 8000498:	0026      	movs	r6, r4
 800049a:	4097      	lsls	r7, r2
 800049c:	1a9b      	subs	r3, r3, r2
 800049e:	40de      	lsrs	r6, r3
 80004a0:	003b      	movs	r3, r7
 80004a2:	4333      	orrs	r3, r6
 80004a4:	e7cd      	b.n	8000442 <__udivmoddi4+0x132>
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f000 fe70 	bl	80011e0 <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fdiv>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	b5c0      	push	{r6, r7, lr}
 80007f0:	0047      	lsls	r7, r0, #1
 80007f2:	1c0c      	adds	r4, r1, #0
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	0e3f      	lsrs	r7, r7, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x1c>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fdiv+0xfe>
 8000800:	2fff      	cmp	r7, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x22>
 8000804:	e075      	b.n	80008f2 <__aeabi_fdiv+0x10e>
 8000806:	00eb      	lsls	r3, r5, #3
 8000808:	2580      	movs	r5, #128	; 0x80
 800080a:	04ed      	lsls	r5, r5, #19
 800080c:	431d      	orrs	r5, r3
 800080e:	2300      	movs	r3, #0
 8000810:	4699      	mov	r9, r3
 8000812:	469a      	mov	sl, r3
 8000814:	3f7f      	subs	r7, #127	; 0x7f
 8000816:	0260      	lsls	r0, r4, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	0063      	lsls	r3, r4, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fe4      	lsrs	r4, r4, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <__aeabi_fdiv+0xe0>
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d046      	beq.n	80008b8 <__aeabi_fdiv+0xd4>
 800082a:	4642      	mov	r2, r8
 800082c:	00d0      	lsls	r0, r2, #3
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	04d2      	lsls	r2, r2, #19
 8000832:	4302      	orrs	r2, r0
 8000834:	4690      	mov	r8, r2
 8000836:	2200      	movs	r2, #0
 8000838:	3b7f      	subs	r3, #127	; 0x7f
 800083a:	0031      	movs	r1, r6
 800083c:	1aff      	subs	r7, r7, r3
 800083e:	464b      	mov	r3, r9
 8000840:	4061      	eors	r1, r4
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4313      	orrs	r3, r2
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d900      	bls.n	800084c <__aeabi_fdiv+0x68>
 800084a:	e0b5      	b.n	80009b8 <__aeabi_fdiv+0x1d4>
 800084c:	486e      	ldr	r0, [pc, #440]	; (8000a08 <__aeabi_fdiv+0x224>)
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	58c3      	ldr	r3, [r0, r3]
 8000852:	469f      	mov	pc, r3
 8000854:	2300      	movs	r3, #0
 8000856:	4698      	mov	r8, r3
 8000858:	0026      	movs	r6, r4
 800085a:	4645      	mov	r5, r8
 800085c:	4692      	mov	sl, r2
 800085e:	4653      	mov	r3, sl
 8000860:	2b02      	cmp	r3, #2
 8000862:	d100      	bne.n	8000866 <__aeabi_fdiv+0x82>
 8000864:	e089      	b.n	800097a <__aeabi_fdiv+0x196>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x88>
 800086a:	e09e      	b.n	80009aa <__aeabi_fdiv+0x1c6>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d018      	beq.n	80008a2 <__aeabi_fdiv+0xbe>
 8000870:	003b      	movs	r3, r7
 8000872:	337f      	adds	r3, #127	; 0x7f
 8000874:	2b00      	cmp	r3, #0
 8000876:	dd69      	ble.n	800094c <__aeabi_fdiv+0x168>
 8000878:	076a      	lsls	r2, r5, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 800087c:	220f      	movs	r2, #15
 800087e:	402a      	ands	r2, r5
 8000880:	2a04      	cmp	r2, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 8000884:	3504      	adds	r5, #4
 8000886:	012a      	lsls	r2, r5, #4
 8000888:	d503      	bpl.n	8000892 <__aeabi_fdiv+0xae>
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <__aeabi_fdiv+0x228>)
 800088c:	401d      	ands	r5, r3
 800088e:	003b      	movs	r3, r7
 8000890:	3380      	adds	r3, #128	; 0x80
 8000892:	2bfe      	cmp	r3, #254	; 0xfe
 8000894:	dd00      	ble.n	8000898 <__aeabi_fdiv+0xb4>
 8000896:	e070      	b.n	800097a <__aeabi_fdiv+0x196>
 8000898:	01ad      	lsls	r5, r5, #6
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	b2d8      	uxtb	r0, r3
 800089e:	e002      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80008a0:	000e      	movs	r6, r1
 80008a2:	2000      	movs	r0, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	05c0      	lsls	r0, r0, #23
 80008a8:	4328      	orrs	r0, r5
 80008aa:	07f6      	lsls	r6, r6, #31
 80008ac:	4330      	orrs	r0, r6
 80008ae:	bce0      	pop	{r5, r6, r7}
 80008b0:	46ba      	mov	sl, r7
 80008b2:	46b1      	mov	r9, r6
 80008b4:	46a8      	mov	r8, r5
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	4643      	mov	r3, r8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d13f      	bne.n	800093e <__aeabi_fdiv+0x15a>
 80008be:	2202      	movs	r2, #2
 80008c0:	3fff      	subs	r7, #255	; 0xff
 80008c2:	e003      	b.n	80008cc <__aeabi_fdiv+0xe8>
 80008c4:	4643      	mov	r3, r8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12d      	bne.n	8000926 <__aeabi_fdiv+0x142>
 80008ca:	2201      	movs	r2, #1
 80008cc:	0031      	movs	r1, r6
 80008ce:	464b      	mov	r3, r9
 80008d0:	4061      	eors	r1, r4
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d834      	bhi.n	8000944 <__aeabi_fdiv+0x160>
 80008da:	484d      	ldr	r0, [pc, #308]	; (8000a10 <__aeabi_fdiv+0x22c>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58c3      	ldr	r3, [r0, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d113      	bne.n	800090e <__aeabi_fdiv+0x12a>
 80008e6:	2304      	movs	r3, #4
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b03      	subs	r3, #3
 80008ec:	2700      	movs	r7, #0
 80008ee:	469a      	mov	sl, r3
 80008f0:	e791      	b.n	8000816 <__aeabi_fdiv+0x32>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d105      	bne.n	8000902 <__aeabi_fdiv+0x11e>
 80008f6:	2308      	movs	r3, #8
 80008f8:	4699      	mov	r9, r3
 80008fa:	3b06      	subs	r3, #6
 80008fc:	27ff      	movs	r7, #255	; 0xff
 80008fe:	469a      	mov	sl, r3
 8000900:	e789      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000902:	230c      	movs	r3, #12
 8000904:	4699      	mov	r9, r3
 8000906:	3b09      	subs	r3, #9
 8000908:	27ff      	movs	r7, #255	; 0xff
 800090a:	469a      	mov	sl, r3
 800090c:	e783      	b.n	8000816 <__aeabi_fdiv+0x32>
 800090e:	0028      	movs	r0, r5
 8000910:	f000 fc66 	bl	80011e0 <__clzsi2>
 8000914:	2776      	movs	r7, #118	; 0x76
 8000916:	1f43      	subs	r3, r0, #5
 8000918:	409d      	lsls	r5, r3
 800091a:	2300      	movs	r3, #0
 800091c:	427f      	negs	r7, r7
 800091e:	4699      	mov	r9, r3
 8000920:	469a      	mov	sl, r3
 8000922:	1a3f      	subs	r7, r7, r0
 8000924:	e777      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000926:	4640      	mov	r0, r8
 8000928:	f000 fc5a 	bl	80011e0 <__clzsi2>
 800092c:	4642      	mov	r2, r8
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	409a      	lsls	r2, r3
 8000932:	2376      	movs	r3, #118	; 0x76
 8000934:	425b      	negs	r3, r3
 8000936:	4690      	mov	r8, r2
 8000938:	1a1b      	subs	r3, r3, r0
 800093a:	2200      	movs	r2, #0
 800093c:	e77d      	b.n	800083a <__aeabi_fdiv+0x56>
 800093e:	23ff      	movs	r3, #255	; 0xff
 8000940:	2203      	movs	r2, #3
 8000942:	e77a      	b.n	800083a <__aeabi_fdiv+0x56>
 8000944:	000e      	movs	r6, r1
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	2500      	movs	r5, #0
 800094a:	e7ac      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800094c:	2001      	movs	r0, #1
 800094e:	1ac0      	subs	r0, r0, r3
 8000950:	281b      	cmp	r0, #27
 8000952:	dca6      	bgt.n	80008a2 <__aeabi_fdiv+0xbe>
 8000954:	379e      	adds	r7, #158	; 0x9e
 8000956:	002a      	movs	r2, r5
 8000958:	40bd      	lsls	r5, r7
 800095a:	40c2      	lsrs	r2, r0
 800095c:	1e6b      	subs	r3, r5, #1
 800095e:	419d      	sbcs	r5, r3
 8000960:	4315      	orrs	r5, r2
 8000962:	076b      	lsls	r3, r5, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 8000966:	230f      	movs	r3, #15
 8000968:	402b      	ands	r3, r5
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 800096e:	3504      	adds	r5, #4
 8000970:	016b      	lsls	r3, r5, #5
 8000972:	d544      	bpl.n	80009fe <__aeabi_fdiv+0x21a>
 8000974:	2001      	movs	r0, #1
 8000976:	2500      	movs	r5, #0
 8000978:	e795      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	2500      	movs	r5, #0
 800097e:	e792      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000980:	2580      	movs	r5, #128	; 0x80
 8000982:	2600      	movs	r6, #0
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	03ed      	lsls	r5, r5, #15
 8000988:	e78d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800098a:	2300      	movs	r3, #0
 800098c:	4698      	mov	r8, r3
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	4205      	tst	r5, r0
 8000994:	d009      	beq.n	80009aa <__aeabi_fdiv+0x1c6>
 8000996:	4643      	mov	r3, r8
 8000998:	4203      	tst	r3, r0
 800099a:	d106      	bne.n	80009aa <__aeabi_fdiv+0x1c6>
 800099c:	4645      	mov	r5, r8
 800099e:	4305      	orrs	r5, r0
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	0026      	movs	r6, r4
 80009a4:	20ff      	movs	r0, #255	; 0xff
 80009a6:	0a6d      	lsrs	r5, r5, #9
 80009a8:	e77d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	03c0      	lsls	r0, r0, #15
 80009ae:	4305      	orrs	r5, r0
 80009b0:	026d      	lsls	r5, r5, #9
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	e776      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009b8:	4642      	mov	r2, r8
 80009ba:	016b      	lsls	r3, r5, #5
 80009bc:	0150      	lsls	r0, r2, #5
 80009be:	4283      	cmp	r3, r0
 80009c0:	d219      	bcs.n	80009f6 <__aeabi_fdiv+0x212>
 80009c2:	221b      	movs	r2, #27
 80009c4:	2500      	movs	r5, #0
 80009c6:	3f01      	subs	r7, #1
 80009c8:	2601      	movs	r6, #1
 80009ca:	001c      	movs	r4, r3
 80009cc:	006d      	lsls	r5, r5, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	db01      	blt.n	80009d8 <__aeabi_fdiv+0x1f4>
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d801      	bhi.n	80009dc <__aeabi_fdiv+0x1f8>
 80009d8:	1a1b      	subs	r3, r3, r0
 80009da:	4335      	orrs	r5, r6
 80009dc:	3a01      	subs	r2, #1
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d1f3      	bne.n	80009ca <__aeabi_fdiv+0x1e6>
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	4193      	sbcs	r3, r2
 80009e6:	431d      	orrs	r5, r3
 80009e8:	003b      	movs	r3, r7
 80009ea:	337f      	adds	r3, #127	; 0x7f
 80009ec:	000e      	movs	r6, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dd00      	ble.n	80009f4 <__aeabi_fdiv+0x210>
 80009f2:	e741      	b.n	8000878 <__aeabi_fdiv+0x94>
 80009f4:	e7aa      	b.n	800094c <__aeabi_fdiv+0x168>
 80009f6:	221a      	movs	r2, #26
 80009f8:	2501      	movs	r5, #1
 80009fa:	1a1b      	subs	r3, r3, r0
 80009fc:	e7e4      	b.n	80009c8 <__aeabi_fdiv+0x1e4>
 80009fe:	01ad      	lsls	r5, r5, #6
 8000a00:	2000      	movs	r0, #0
 8000a02:	0a6d      	lsrs	r5, r5, #9
 8000a04:	e74f      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	0800726c 	.word	0x0800726c
 8000a0c:	f7ffffff 	.word	0xf7ffffff
 8000a10:	080072ac 	.word	0x080072ac

08000a14 <__eqsf2>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	0042      	lsls	r2, r0, #1
 8000a18:	0245      	lsls	r5, r0, #9
 8000a1a:	024e      	lsls	r6, r1, #9
 8000a1c:	004c      	lsls	r4, r1, #1
 8000a1e:	0fc3      	lsrs	r3, r0, #31
 8000a20:	0a6d      	lsrs	r5, r5, #9
 8000a22:	2001      	movs	r0, #1
 8000a24:	0e12      	lsrs	r2, r2, #24
 8000a26:	0a76      	lsrs	r6, r6, #9
 8000a28:	0e24      	lsrs	r4, r4, #24
 8000a2a:	0fc9      	lsrs	r1, r1, #31
 8000a2c:	2aff      	cmp	r2, #255	; 0xff
 8000a2e:	d006      	beq.n	8000a3e <__eqsf2+0x2a>
 8000a30:	2cff      	cmp	r4, #255	; 0xff
 8000a32:	d003      	beq.n	8000a3c <__eqsf2+0x28>
 8000a34:	42a2      	cmp	r2, r4
 8000a36:	d101      	bne.n	8000a3c <__eqsf2+0x28>
 8000a38:	42b5      	cmp	r5, r6
 8000a3a:	d006      	beq.n	8000a4a <__eqsf2+0x36>
 8000a3c:	bd70      	pop	{r4, r5, r6, pc}
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d1fc      	bne.n	8000a3c <__eqsf2+0x28>
 8000a42:	2cff      	cmp	r4, #255	; 0xff
 8000a44:	d1fa      	bne.n	8000a3c <__eqsf2+0x28>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	d1f8      	bne.n	8000a3c <__eqsf2+0x28>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d006      	beq.n	8000a5c <__eqsf2+0x48>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d1f3      	bne.n	8000a3c <__eqsf2+0x28>
 8000a54:	0028      	movs	r0, r5
 8000a56:	1e43      	subs	r3, r0, #1
 8000a58:	4198      	sbcs	r0, r3
 8000a5a:	e7ef      	b.n	8000a3c <__eqsf2+0x28>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e7ed      	b.n	8000a3c <__eqsf2+0x28>

08000a60 <__gesf2>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	0042      	lsls	r2, r0, #1
 8000a64:	0245      	lsls	r5, r0, #9
 8000a66:	024e      	lsls	r6, r1, #9
 8000a68:	004c      	lsls	r4, r1, #1
 8000a6a:	0fc3      	lsrs	r3, r0, #31
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	0e12      	lsrs	r2, r2, #24
 8000a70:	0a76      	lsrs	r6, r6, #9
 8000a72:	0e24      	lsrs	r4, r4, #24
 8000a74:	0fc8      	lsrs	r0, r1, #31
 8000a76:	2aff      	cmp	r2, #255	; 0xff
 8000a78:	d01b      	beq.n	8000ab2 <__gesf2+0x52>
 8000a7a:	2cff      	cmp	r4, #255	; 0xff
 8000a7c:	d00e      	beq.n	8000a9c <__gesf2+0x3c>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d11b      	bne.n	8000aba <__gesf2+0x5a>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d101      	bne.n	8000a8a <__gesf2+0x2a>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d01c      	beq.n	8000ac4 <__gesf2+0x64>
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d00c      	beq.n	8000aa8 <__gesf2+0x48>
 8000a8e:	4283      	cmp	r3, r0
 8000a90:	d01c      	beq.n	8000acc <__gesf2+0x6c>
 8000a92:	2102      	movs	r1, #2
 8000a94:	1e58      	subs	r0, r3, #1
 8000a96:	4008      	ands	r0, r1
 8000a98:	3801      	subs	r0, #1
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d122      	bne.n	8000ae6 <__gesf2+0x86>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d1f4      	bne.n	8000a8e <__gesf2+0x2e>
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	d1f2      	bne.n	8000a8e <__gesf2+0x2e>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d1f6      	bne.n	8000a9a <__gesf2+0x3a>
 8000aac:	2001      	movs	r0, #1
 8000aae:	4240      	negs	r0, r0
 8000ab0:	e7f3      	b.n	8000a9a <__gesf2+0x3a>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d117      	bne.n	8000ae6 <__gesf2+0x86>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d0f0      	beq.n	8000a9c <__gesf2+0x3c>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d1e7      	bne.n	8000a8e <__gesf2+0x2e>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d1e5      	bne.n	8000a8e <__gesf2+0x2e>
 8000ac2:	e7e6      	b.n	8000a92 <__gesf2+0x32>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0e7      	beq.n	8000a9a <__gesf2+0x3a>
 8000aca:	e7e2      	b.n	8000a92 <__gesf2+0x32>
 8000acc:	42a2      	cmp	r2, r4
 8000ace:	dc05      	bgt.n	8000adc <__gesf2+0x7c>
 8000ad0:	dbea      	blt.n	8000aa8 <__gesf2+0x48>
 8000ad2:	42b5      	cmp	r5, r6
 8000ad4:	d802      	bhi.n	8000adc <__gesf2+0x7c>
 8000ad6:	d3e7      	bcc.n	8000aa8 <__gesf2+0x48>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7de      	b.n	8000a9a <__gesf2+0x3a>
 8000adc:	4243      	negs	r3, r0
 8000ade:	4158      	adcs	r0, r3
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	3801      	subs	r0, #1
 8000ae4:	e7d9      	b.n	8000a9a <__gesf2+0x3a>
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	4240      	negs	r0, r0
 8000aea:	e7d6      	b.n	8000a9a <__gesf2+0x3a>

08000aec <__lesf2>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	0042      	lsls	r2, r0, #1
 8000af0:	0245      	lsls	r5, r0, #9
 8000af2:	024e      	lsls	r6, r1, #9
 8000af4:	004c      	lsls	r4, r1, #1
 8000af6:	0fc3      	lsrs	r3, r0, #31
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0e12      	lsrs	r2, r2, #24
 8000afc:	0a76      	lsrs	r6, r6, #9
 8000afe:	0e24      	lsrs	r4, r4, #24
 8000b00:	0fc8      	lsrs	r0, r1, #31
 8000b02:	2aff      	cmp	r2, #255	; 0xff
 8000b04:	d00b      	beq.n	8000b1e <__lesf2+0x32>
 8000b06:	2cff      	cmp	r4, #255	; 0xff
 8000b08:	d00d      	beq.n	8000b26 <__lesf2+0x3a>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d11f      	bne.n	8000b4e <__lesf2+0x62>
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d116      	bne.n	8000b40 <__lesf2+0x54>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d114      	bne.n	8000b40 <__lesf2+0x54>
 8000b16:	2000      	movs	r0, #0
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d010      	beq.n	8000b3e <__lesf2+0x52>
 8000b1c:	e009      	b.n	8000b32 <__lesf2+0x46>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d10c      	bne.n	8000b3c <__lesf2+0x50>
 8000b22:	2cff      	cmp	r4, #255	; 0xff
 8000b24:	d113      	bne.n	8000b4e <__lesf2+0x62>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d108      	bne.n	8000b3c <__lesf2+0x50>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d008      	beq.n	8000b40 <__lesf2+0x54>
 8000b2e:	4283      	cmp	r3, r0
 8000b30:	d012      	beq.n	8000b58 <__lesf2+0x6c>
 8000b32:	2102      	movs	r1, #2
 8000b34:	1e58      	subs	r0, r3, #1
 8000b36:	4008      	ands	r0, r1
 8000b38:	3801      	subs	r0, #1
 8000b3a:	e000      	b.n	8000b3e <__lesf2+0x52>
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d1f4      	bne.n	8000b2e <__lesf2+0x42>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1fa      	bne.n	8000b3e <__lesf2+0x52>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	e7f7      	b.n	8000b3e <__lesf2+0x52>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d1ed      	bne.n	8000b2e <__lesf2+0x42>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d1eb      	bne.n	8000b2e <__lesf2+0x42>
 8000b56:	e7ec      	b.n	8000b32 <__lesf2+0x46>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__lesf2+0x7c>
 8000b5c:	dbf2      	blt.n	8000b44 <__lesf2+0x58>
 8000b5e:	42b5      	cmp	r5, r6
 8000b60:	d802      	bhi.n	8000b68 <__lesf2+0x7c>
 8000b62:	d3ef      	bcc.n	8000b44 <__lesf2+0x58>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7ea      	b.n	8000b3e <__lesf2+0x52>
 8000b68:	4243      	negs	r3, r0
 8000b6a:	4158      	adcs	r0, r3
 8000b6c:	0040      	lsls	r0, r0, #1
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7e5      	b.n	8000b3e <__lesf2+0x52>
 8000b72:	46c0      	nop			; (mov r8, r8)

08000b74 <__aeabi_fmul>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0244      	lsls	r4, r0, #9
 8000b7e:	0045      	lsls	r5, r0, #1
 8000b80:	b5c0      	push	{r6, r7, lr}
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	1c0f      	adds	r7, r1, #0
 8000b86:	0e2d      	lsrs	r5, r5, #24
 8000b88:	0fc6      	lsrs	r6, r0, #31
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fmul+0x1c>
 8000b8e:	e08d      	b.n	8000cac <__aeabi_fmul+0x138>
 8000b90:	2dff      	cmp	r5, #255	; 0xff
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fmul+0x22>
 8000b94:	e092      	b.n	8000cbc <__aeabi_fmul+0x148>
 8000b96:	2300      	movs	r3, #0
 8000b98:	2080      	movs	r0, #128	; 0x80
 8000b9a:	4699      	mov	r9, r3
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	00e4      	lsls	r4, r4, #3
 8000ba0:	04c0      	lsls	r0, r0, #19
 8000ba2:	4304      	orrs	r4, r0
 8000ba4:	3d7f      	subs	r5, #127	; 0x7f
 8000ba6:	0278      	lsls	r0, r7, #9
 8000ba8:	0a43      	lsrs	r3, r0, #9
 8000baa:	4698      	mov	r8, r3
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	0e1b      	lsrs	r3, r3, #24
 8000bb0:	0fff      	lsrs	r7, r7, #31
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fmul+0x44>
 8000bb6:	e070      	b.n	8000c9a <__aeabi_fmul+0x126>
 8000bb8:	2bff      	cmp	r3, #255	; 0xff
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fmul+0x4a>
 8000bbc:	e086      	b.n	8000ccc <__aeabi_fmul+0x158>
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	00d0      	lsls	r0, r2, #3
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	3b7f      	subs	r3, #127	; 0x7f
 8000bc6:	18ed      	adds	r5, r5, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	04d2      	lsls	r2, r2, #19
 8000bcc:	4302      	orrs	r2, r0
 8000bce:	4690      	mov	r8, r2
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	0031      	movs	r1, r6
 8000bd4:	464b      	mov	r3, r9
 8000bd6:	4079      	eors	r1, r7
 8000bd8:	1c68      	adds	r0, r5, #1
 8000bda:	2b0f      	cmp	r3, #15
 8000bdc:	d81c      	bhi.n	8000c18 <__aeabi_fmul+0xa4>
 8000bde:	4a76      	ldr	r2, [pc, #472]	; (8000db8 <__aeabi_fmul+0x244>)
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	58d3      	ldr	r3, [r2, r3]
 8000be4:	469f      	mov	pc, r3
 8000be6:	0039      	movs	r1, r7
 8000be8:	4644      	mov	r4, r8
 8000bea:	46e2      	mov	sl, ip
 8000bec:	4653      	mov	r3, sl
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d00f      	beq.n	8000c12 <__aeabi_fmul+0x9e>
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fmul+0x84>
 8000bf6:	e0d7      	b.n	8000da8 <__aeabi_fmul+0x234>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d137      	bne.n	8000c6c <__aeabi_fmul+0xf8>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	2400      	movs	r4, #0
 8000c00:	05c0      	lsls	r0, r0, #23
 8000c02:	4320      	orrs	r0, r4
 8000c04:	07c9      	lsls	r1, r1, #31
 8000c06:	4308      	orrs	r0, r1
 8000c08:	bce0      	pop	{r5, r6, r7}
 8000c0a:	46ba      	mov	sl, r7
 8000c0c:	46b1      	mov	r9, r6
 8000c0e:	46a8      	mov	r8, r5
 8000c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c12:	20ff      	movs	r0, #255	; 0xff
 8000c14:	2400      	movs	r4, #0
 8000c16:	e7f3      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000c18:	0c26      	lsrs	r6, r4, #16
 8000c1a:	0424      	lsls	r4, r4, #16
 8000c1c:	0c22      	lsrs	r2, r4, #16
 8000c1e:	4644      	mov	r4, r8
 8000c20:	0424      	lsls	r4, r4, #16
 8000c22:	0c24      	lsrs	r4, r4, #16
 8000c24:	4643      	mov	r3, r8
 8000c26:	0027      	movs	r7, r4
 8000c28:	0c1b      	lsrs	r3, r3, #16
 8000c2a:	4357      	muls	r7, r2
 8000c2c:	4374      	muls	r4, r6
 8000c2e:	435a      	muls	r2, r3
 8000c30:	435e      	muls	r6, r3
 8000c32:	1912      	adds	r2, r2, r4
 8000c34:	0c3b      	lsrs	r3, r7, #16
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	d903      	bls.n	8000c44 <__aeabi_fmul+0xd0>
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0252      	lsls	r2, r2, #9
 8000c40:	4694      	mov	ip, r2
 8000c42:	4466      	add	r6, ip
 8000c44:	043f      	lsls	r7, r7, #16
 8000c46:	041a      	lsls	r2, r3, #16
 8000c48:	0c3f      	lsrs	r7, r7, #16
 8000c4a:	19d2      	adds	r2, r2, r7
 8000c4c:	0194      	lsls	r4, r2, #6
 8000c4e:	1e67      	subs	r7, r4, #1
 8000c50:	41bc      	sbcs	r4, r7
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	0e92      	lsrs	r2, r2, #26
 8000c56:	199b      	adds	r3, r3, r6
 8000c58:	4314      	orrs	r4, r2
 8000c5a:	019b      	lsls	r3, r3, #6
 8000c5c:	431c      	orrs	r4, r3
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	d400      	bmi.n	8000c64 <__aeabi_fmul+0xf0>
 8000c62:	e09b      	b.n	8000d9c <__aeabi_fmul+0x228>
 8000c64:	2301      	movs	r3, #1
 8000c66:	0862      	lsrs	r2, r4, #1
 8000c68:	401c      	ands	r4, r3
 8000c6a:	4314      	orrs	r4, r2
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	327f      	adds	r2, #127	; 0x7f
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dd64      	ble.n	8000d3e <__aeabi_fmul+0x1ca>
 8000c74:	0763      	lsls	r3, r4, #29
 8000c76:	d004      	beq.n	8000c82 <__aeabi_fmul+0x10e>
 8000c78:	230f      	movs	r3, #15
 8000c7a:	4023      	ands	r3, r4
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x10e>
 8000c80:	3404      	adds	r4, #4
 8000c82:	0123      	lsls	r3, r4, #4
 8000c84:	d503      	bpl.n	8000c8e <__aeabi_fmul+0x11a>
 8000c86:	0002      	movs	r2, r0
 8000c88:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <__aeabi_fmul+0x248>)
 8000c8a:	3280      	adds	r2, #128	; 0x80
 8000c8c:	401c      	ands	r4, r3
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	dcbf      	bgt.n	8000c12 <__aeabi_fmul+0x9e>
 8000c92:	01a4      	lsls	r4, r4, #6
 8000c94:	0a64      	lsrs	r4, r4, #9
 8000c96:	b2d0      	uxtb	r0, r2
 8000c98:	e7b2      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d13d      	bne.n	8000d1c <__aeabi_fmul+0x1a8>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	4691      	mov	r9, r2
 8000ca8:	469c      	mov	ip, r3
 8000caa:	e792      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d129      	bne.n	8000d04 <__aeabi_fmul+0x190>
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	469a      	mov	sl, r3
 8000cba:	e774      	b.n	8000ba6 <__aeabi_fmul+0x32>
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d11b      	bne.n	8000cf8 <__aeabi_fmul+0x184>
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	3b06      	subs	r3, #6
 8000cc6:	25ff      	movs	r5, #255	; 0xff
 8000cc8:	469a      	mov	sl, r3
 8000cca:	e76c      	b.n	8000ba6 <__aeabi_fmul+0x32>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	35ff      	adds	r5, #255	; 0xff
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10b      	bne.n	8000cec <__aeabi_fmul+0x178>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	4691      	mov	r9, r2
 8000cdc:	469c      	mov	ip, r3
 8000cde:	e778      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000ce0:	4653      	mov	r3, sl
 8000ce2:	0031      	movs	r1, r6
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d000      	beq.n	8000cea <__aeabi_fmul+0x176>
 8000ce8:	e783      	b.n	8000bf2 <__aeabi_fmul+0x7e>
 8000cea:	e792      	b.n	8000c12 <__aeabi_fmul+0x9e>
 8000cec:	2303      	movs	r3, #3
 8000cee:	464a      	mov	r2, r9
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	469c      	mov	ip, r3
 8000cf6:	e76c      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b09      	subs	r3, #9
 8000cfe:	25ff      	movs	r5, #255	; 0xff
 8000d00:	469a      	mov	sl, r3
 8000d02:	e750      	b.n	8000ba6 <__aeabi_fmul+0x32>
 8000d04:	0020      	movs	r0, r4
 8000d06:	f000 fa6b 	bl	80011e0 <__clzsi2>
 8000d0a:	2576      	movs	r5, #118	; 0x76
 8000d0c:	1f43      	subs	r3, r0, #5
 8000d0e:	409c      	lsls	r4, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	426d      	negs	r5, r5
 8000d14:	4699      	mov	r9, r3
 8000d16:	469a      	mov	sl, r3
 8000d18:	1a2d      	subs	r5, r5, r0
 8000d1a:	e744      	b.n	8000ba6 <__aeabi_fmul+0x32>
 8000d1c:	4640      	mov	r0, r8
 8000d1e:	f000 fa5f 	bl	80011e0 <__clzsi2>
 8000d22:	4642      	mov	r2, r8
 8000d24:	1f43      	subs	r3, r0, #5
 8000d26:	409a      	lsls	r2, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	1a2d      	subs	r5, r5, r0
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	469c      	mov	ip, r3
 8000d30:	3d76      	subs	r5, #118	; 0x76
 8000d32:	e74e      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	2100      	movs	r1, #0
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	03e4      	lsls	r4, r4, #15
 8000d3c:	e760      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	1a9b      	subs	r3, r3, r2
 8000d42:	2b1b      	cmp	r3, #27
 8000d44:	dd00      	ble.n	8000d48 <__aeabi_fmul+0x1d4>
 8000d46:	e759      	b.n	8000bfc <__aeabi_fmul+0x88>
 8000d48:	0022      	movs	r2, r4
 8000d4a:	309e      	adds	r0, #158	; 0x9e
 8000d4c:	40da      	lsrs	r2, r3
 8000d4e:	4084      	lsls	r4, r0
 8000d50:	0013      	movs	r3, r2
 8000d52:	1e62      	subs	r2, r4, #1
 8000d54:	4194      	sbcs	r4, r2
 8000d56:	431c      	orrs	r4, r3
 8000d58:	0763      	lsls	r3, r4, #29
 8000d5a:	d004      	beq.n	8000d66 <__aeabi_fmul+0x1f2>
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fmul+0x1f2>
 8000d64:	3404      	adds	r4, #4
 8000d66:	0163      	lsls	r3, r4, #5
 8000d68:	d51a      	bpl.n	8000da0 <__aeabi_fmul+0x22c>
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	e747      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000d70:	2080      	movs	r0, #128	; 0x80
 8000d72:	03c0      	lsls	r0, r0, #15
 8000d74:	4204      	tst	r4, r0
 8000d76:	d009      	beq.n	8000d8c <__aeabi_fmul+0x218>
 8000d78:	4643      	mov	r3, r8
 8000d7a:	4203      	tst	r3, r0
 8000d7c:	d106      	bne.n	8000d8c <__aeabi_fmul+0x218>
 8000d7e:	4644      	mov	r4, r8
 8000d80:	4304      	orrs	r4, r0
 8000d82:	0264      	lsls	r4, r4, #9
 8000d84:	0039      	movs	r1, r7
 8000d86:	20ff      	movs	r0, #255	; 0xff
 8000d88:	0a64      	lsrs	r4, r4, #9
 8000d8a:	e739      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000d8c:	2080      	movs	r0, #128	; 0x80
 8000d8e:	03c0      	lsls	r0, r0, #15
 8000d90:	4304      	orrs	r4, r0
 8000d92:	0264      	lsls	r4, r4, #9
 8000d94:	0031      	movs	r1, r6
 8000d96:	20ff      	movs	r0, #255	; 0xff
 8000d98:	0a64      	lsrs	r4, r4, #9
 8000d9a:	e731      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000d9c:	0028      	movs	r0, r5
 8000d9e:	e765      	b.n	8000c6c <__aeabi_fmul+0xf8>
 8000da0:	01a4      	lsls	r4, r4, #6
 8000da2:	2000      	movs	r0, #0
 8000da4:	0a64      	lsrs	r4, r4, #9
 8000da6:	e72b      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	03c0      	lsls	r0, r0, #15
 8000dac:	4304      	orrs	r4, r0
 8000dae:	0264      	lsls	r4, r4, #9
 8000db0:	20ff      	movs	r0, #255	; 0xff
 8000db2:	0a64      	lsrs	r4, r4, #9
 8000db4:	e724      	b.n	8000c00 <__aeabi_fmul+0x8c>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	080072ec 	.word	0x080072ec
 8000dbc:	f7ffffff 	.word	0xf7ffffff

08000dc0 <__aeabi_fsub>:
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc2:	46ce      	mov	lr, r9
 8000dc4:	4647      	mov	r7, r8
 8000dc6:	0243      	lsls	r3, r0, #9
 8000dc8:	0a5b      	lsrs	r3, r3, #9
 8000dca:	024e      	lsls	r6, r1, #9
 8000dcc:	00da      	lsls	r2, r3, #3
 8000dce:	4694      	mov	ip, r2
 8000dd0:	0a72      	lsrs	r2, r6, #9
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	0045      	lsls	r5, r0, #1
 8000dd6:	004a      	lsls	r2, r1, #1
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	0e2d      	lsrs	r5, r5, #24
 8000ddc:	001f      	movs	r7, r3
 8000dde:	0fc4      	lsrs	r4, r0, #31
 8000de0:	0e12      	lsrs	r2, r2, #24
 8000de2:	0fc9      	lsrs	r1, r1, #31
 8000de4:	09b6      	lsrs	r6, r6, #6
 8000de6:	2aff      	cmp	r2, #255	; 0xff
 8000de8:	d05b      	beq.n	8000ea2 <__aeabi_fsub+0xe2>
 8000dea:	2001      	movs	r0, #1
 8000dec:	4041      	eors	r1, r0
 8000dee:	428c      	cmp	r4, r1
 8000df0:	d039      	beq.n	8000e66 <__aeabi_fsub+0xa6>
 8000df2:	1aa8      	subs	r0, r5, r2
 8000df4:	2800      	cmp	r0, #0
 8000df6:	dd5a      	ble.n	8000eae <__aeabi_fsub+0xee>
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	d06a      	beq.n	8000ed2 <__aeabi_fsub+0x112>
 8000dfc:	2dff      	cmp	r5, #255	; 0xff
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x42>
 8000e00:	e0d9      	b.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	04d2      	lsls	r2, r2, #19
 8000e06:	4316      	orrs	r6, r2
 8000e08:	281b      	cmp	r0, #27
 8000e0a:	dc00      	bgt.n	8000e0e <__aeabi_fsub+0x4e>
 8000e0c:	e0e9      	b.n	8000fe2 <__aeabi_fsub+0x222>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	4663      	mov	r3, ip
 8000e12:	1a18      	subs	r0, r3, r0
 8000e14:	0143      	lsls	r3, r0, #5
 8000e16:	d400      	bmi.n	8000e1a <__aeabi_fsub+0x5a>
 8000e18:	e0b4      	b.n	8000f84 <__aeabi_fsub+0x1c4>
 8000e1a:	0180      	lsls	r0, r0, #6
 8000e1c:	0987      	lsrs	r7, r0, #6
 8000e1e:	0038      	movs	r0, r7
 8000e20:	f000 f9de 	bl	80011e0 <__clzsi2>
 8000e24:	3805      	subs	r0, #5
 8000e26:	4087      	lsls	r7, r0
 8000e28:	4285      	cmp	r5, r0
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_fsub+0x6e>
 8000e2c:	e0cc      	b.n	8000fc8 <__aeabi_fsub+0x208>
 8000e2e:	1a2d      	subs	r5, r5, r0
 8000e30:	48b5      	ldr	r0, [pc, #724]	; (8001108 <__aeabi_fsub+0x348>)
 8000e32:	4038      	ands	r0, r7
 8000e34:	0743      	lsls	r3, r0, #29
 8000e36:	d004      	beq.n	8000e42 <__aeabi_fsub+0x82>
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4003      	ands	r3, r0
 8000e3c:	2b04      	cmp	r3, #4
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_fsub+0x82>
 8000e40:	3004      	adds	r0, #4
 8000e42:	0143      	lsls	r3, r0, #5
 8000e44:	d400      	bmi.n	8000e48 <__aeabi_fsub+0x88>
 8000e46:	e0a0      	b.n	8000f8a <__aeabi_fsub+0x1ca>
 8000e48:	1c6a      	adds	r2, r5, #1
 8000e4a:	2dfe      	cmp	r5, #254	; 0xfe
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x90>
 8000e4e:	e08d      	b.n	8000f6c <__aeabi_fsub+0x1ac>
 8000e50:	0180      	lsls	r0, r0, #6
 8000e52:	0a47      	lsrs	r7, r0, #9
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	05d0      	lsls	r0, r2, #23
 8000e58:	4338      	orrs	r0, r7
 8000e5a:	07e4      	lsls	r4, r4, #31
 8000e5c:	4320      	orrs	r0, r4
 8000e5e:	bcc0      	pop	{r6, r7}
 8000e60:	46b9      	mov	r9, r7
 8000e62:	46b0      	mov	r8, r6
 8000e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e66:	1aa8      	subs	r0, r5, r2
 8000e68:	4680      	mov	r8, r0
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	dd45      	ble.n	8000efa <__aeabi_fsub+0x13a>
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d070      	beq.n	8000f54 <__aeabi_fsub+0x194>
 8000e72:	2dff      	cmp	r5, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0xb8>
 8000e76:	e09e      	b.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	04db      	lsls	r3, r3, #19
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	4643      	mov	r3, r8
 8000e80:	2b1b      	cmp	r3, #27
 8000e82:	dc00      	bgt.n	8000e86 <__aeabi_fsub+0xc6>
 8000e84:	e0d2      	b.n	800102c <__aeabi_fsub+0x26c>
 8000e86:	2001      	movs	r0, #1
 8000e88:	4460      	add	r0, ip
 8000e8a:	0143      	lsls	r3, r0, #5
 8000e8c:	d57a      	bpl.n	8000f84 <__aeabi_fsub+0x1c4>
 8000e8e:	3501      	adds	r5, #1
 8000e90:	2dff      	cmp	r5, #255	; 0xff
 8000e92:	d06b      	beq.n	8000f6c <__aeabi_fsub+0x1ac>
 8000e94:	2301      	movs	r3, #1
 8000e96:	4a9d      	ldr	r2, [pc, #628]	; (800110c <__aeabi_fsub+0x34c>)
 8000e98:	4003      	ands	r3, r0
 8000e9a:	0840      	lsrs	r0, r0, #1
 8000e9c:	4010      	ands	r0, r2
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	e7c8      	b.n	8000e34 <__aeabi_fsub+0x74>
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d020      	beq.n	8000ee8 <__aeabi_fsub+0x128>
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d023      	beq.n	8000ef2 <__aeabi_fsub+0x132>
 8000eaa:	0028      	movs	r0, r5
 8000eac:	38ff      	subs	r0, #255	; 0xff
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d039      	beq.n	8000f26 <__aeabi_fsub+0x166>
 8000eb2:	1b57      	subs	r7, r2, r5
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0xfa>
 8000eb8:	e09d      	b.n	8000ff6 <__aeabi_fsub+0x236>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x102>
 8000ec0:	e0db      	b.n	800107a <__aeabi_fsub+0x2ba>
 8000ec2:	1e7b      	subs	r3, r7, #1
 8000ec4:	2f01      	cmp	r7, #1
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x10a>
 8000ec8:	e10d      	b.n	80010e6 <__aeabi_fsub+0x326>
 8000eca:	2fff      	cmp	r7, #255	; 0xff
 8000ecc:	d071      	beq.n	8000fb2 <__aeabi_fsub+0x1f2>
 8000ece:	001f      	movs	r7, r3
 8000ed0:	e098      	b.n	8001004 <__aeabi_fsub+0x244>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x118>
 8000ed6:	e0a7      	b.n	8001028 <__aeabi_fsub+0x268>
 8000ed8:	1e42      	subs	r2, r0, #1
 8000eda:	2801      	cmp	r0, #1
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_fsub+0x120>
 8000ede:	e0e6      	b.n	80010ae <__aeabi_fsub+0x2ee>
 8000ee0:	28ff      	cmp	r0, #255	; 0xff
 8000ee2:	d068      	beq.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	e78f      	b.n	8000e08 <__aeabi_fsub+0x48>
 8000ee8:	2001      	movs	r0, #1
 8000eea:	4041      	eors	r1, r0
 8000eec:	42a1      	cmp	r1, r4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_fsub+0x132>
 8000ef0:	e77f      	b.n	8000df2 <__aeabi_fsub+0x32>
 8000ef2:	20ff      	movs	r0, #255	; 0xff
 8000ef4:	4240      	negs	r0, r0
 8000ef6:	4680      	mov	r8, r0
 8000ef8:	44a8      	add	r8, r5
 8000efa:	4640      	mov	r0, r8
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d038      	beq.n	8000f72 <__aeabi_fsub+0x1b2>
 8000f00:	1b51      	subs	r1, r2, r5
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x148>
 8000f06:	e0ae      	b.n	8001066 <__aeabi_fsub+0x2a6>
 8000f08:	2aff      	cmp	r2, #255	; 0xff
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_fsub+0x14e>
 8000f0c:	e0df      	b.n	80010ce <__aeabi_fsub+0x30e>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	4660      	mov	r0, ip
 8000f12:	04db      	lsls	r3, r3, #19
 8000f14:	4318      	orrs	r0, r3
 8000f16:	4684      	mov	ip, r0
 8000f18:	291b      	cmp	r1, #27
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_fsub+0x15e>
 8000f1c:	e0d9      	b.n	80010d2 <__aeabi_fsub+0x312>
 8000f1e:	2001      	movs	r0, #1
 8000f20:	0015      	movs	r5, r2
 8000f22:	1980      	adds	r0, r0, r6
 8000f24:	e7b1      	b.n	8000e8a <__aeabi_fsub+0xca>
 8000f26:	20fe      	movs	r0, #254	; 0xfe
 8000f28:	1c6a      	adds	r2, r5, #1
 8000f2a:	4210      	tst	r0, r2
 8000f2c:	d171      	bne.n	8001012 <__aeabi_fsub+0x252>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x174>
 8000f32:	e0a6      	b.n	8001082 <__aeabi_fsub+0x2c2>
 8000f34:	4663      	mov	r3, ip
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x17c>
 8000f3a:	e0d9      	b.n	80010f0 <__aeabi_fsub+0x330>
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x184>
 8000f42:	e788      	b.n	8000e56 <__aeabi_fsub+0x96>
 8000f44:	1b98      	subs	r0, r3, r6
 8000f46:	0143      	lsls	r3, r0, #5
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_fsub+0x18c>
 8000f4a:	e0e1      	b.n	8001110 <__aeabi_fsub+0x350>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1af0      	subs	r0, r6, r3
 8000f52:	e76f      	b.n	8000e34 <__aeabi_fsub+0x74>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d100      	bne.n	8000f5a <__aeabi_fsub+0x19a>
 8000f58:	e0b7      	b.n	80010ca <__aeabi_fsub+0x30a>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	2801      	cmp	r0, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x1a4>
 8000f62:	e09c      	b.n	800109e <__aeabi_fsub+0x2de>
 8000f64:	28ff      	cmp	r0, #255	; 0xff
 8000f66:	d026      	beq.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000f68:	4690      	mov	r8, r2
 8000f6a:	e788      	b.n	8000e7e <__aeabi_fsub+0xbe>
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	2700      	movs	r7, #0
 8000f70:	e771      	b.n	8000e56 <__aeabi_fsub+0x96>
 8000f72:	20fe      	movs	r0, #254	; 0xfe
 8000f74:	1c6a      	adds	r2, r5, #1
 8000f76:	4210      	tst	r0, r2
 8000f78:	d064      	beq.n	8001044 <__aeabi_fsub+0x284>
 8000f7a:	2aff      	cmp	r2, #255	; 0xff
 8000f7c:	d0f6      	beq.n	8000f6c <__aeabi_fsub+0x1ac>
 8000f7e:	0015      	movs	r5, r2
 8000f80:	4466      	add	r6, ip
 8000f82:	0870      	lsrs	r0, r6, #1
 8000f84:	0743      	lsls	r3, r0, #29
 8000f86:	d000      	beq.n	8000f8a <__aeabi_fsub+0x1ca>
 8000f88:	e756      	b.n	8000e38 <__aeabi_fsub+0x78>
 8000f8a:	08c3      	lsrs	r3, r0, #3
 8000f8c:	2dff      	cmp	r5, #255	; 0xff
 8000f8e:	d012      	beq.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	0a5f      	lsrs	r7, r3, #9
 8000f94:	b2ea      	uxtb	r2, r5
 8000f96:	e75e      	b.n	8000e56 <__aeabi_fsub+0x96>
 8000f98:	4662      	mov	r2, ip
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x1e0>
 8000f9e:	e096      	b.n	80010ce <__aeabi_fsub+0x30e>
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d008      	beq.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	03d2      	lsls	r2, r2, #15
 8000fa8:	4213      	tst	r3, r2
 8000faa:	d004      	beq.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000fac:	4648      	mov	r0, r9
 8000fae:	4210      	tst	r0, r2
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fsub+0x1f6>
 8000fb2:	000c      	movs	r4, r1
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0d8      	beq.n	8000f6c <__aeabi_fsub+0x1ac>
 8000fba:	2780      	movs	r7, #128	; 0x80
 8000fbc:	03ff      	lsls	r7, r7, #15
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	027f      	lsls	r7, r7, #9
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	0a7f      	lsrs	r7, r7, #9
 8000fc6:	e746      	b.n	8000e56 <__aeabi_fsub+0x96>
 8000fc8:	2320      	movs	r3, #32
 8000fca:	003a      	movs	r2, r7
 8000fcc:	1b45      	subs	r5, r0, r5
 8000fce:	0038      	movs	r0, r7
 8000fd0:	3501      	adds	r5, #1
 8000fd2:	40ea      	lsrs	r2, r5
 8000fd4:	1b5d      	subs	r5, r3, r5
 8000fd6:	40a8      	lsls	r0, r5
 8000fd8:	1e43      	subs	r3, r0, #1
 8000fda:	4198      	sbcs	r0, r3
 8000fdc:	2500      	movs	r5, #0
 8000fde:	4310      	orrs	r0, r2
 8000fe0:	e728      	b.n	8000e34 <__aeabi_fsub+0x74>
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	1a1b      	subs	r3, r3, r0
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	409e      	lsls	r6, r3
 8000fea:	40c2      	lsrs	r2, r0
 8000fec:	0030      	movs	r0, r6
 8000fee:	1e43      	subs	r3, r0, #1
 8000ff0:	4198      	sbcs	r0, r3
 8000ff2:	4310      	orrs	r0, r2
 8000ff4:	e70c      	b.n	8000e10 <__aeabi_fsub+0x50>
 8000ff6:	2aff      	cmp	r2, #255	; 0xff
 8000ff8:	d0db      	beq.n	8000fb2 <__aeabi_fsub+0x1f2>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	4318      	orrs	r0, r3
 8001002:	4684      	mov	ip, r0
 8001004:	2f1b      	cmp	r7, #27
 8001006:	dd56      	ble.n	80010b6 <__aeabi_fsub+0x2f6>
 8001008:	2001      	movs	r0, #1
 800100a:	000c      	movs	r4, r1
 800100c:	0015      	movs	r5, r2
 800100e:	1a30      	subs	r0, r6, r0
 8001010:	e700      	b.n	8000e14 <__aeabi_fsub+0x54>
 8001012:	4663      	mov	r3, ip
 8001014:	1b9f      	subs	r7, r3, r6
 8001016:	017b      	lsls	r3, r7, #5
 8001018:	d43d      	bmi.n	8001096 <__aeabi_fsub+0x2d6>
 800101a:	2f00      	cmp	r7, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x260>
 800101e:	e6fe      	b.n	8000e1e <__aeabi_fsub+0x5e>
 8001020:	2400      	movs	r4, #0
 8001022:	2200      	movs	r2, #0
 8001024:	2700      	movs	r7, #0
 8001026:	e716      	b.n	8000e56 <__aeabi_fsub+0x96>
 8001028:	0005      	movs	r5, r0
 800102a:	e7af      	b.n	8000f8c <__aeabi_fsub+0x1cc>
 800102c:	0032      	movs	r2, r6
 800102e:	4643      	mov	r3, r8
 8001030:	4641      	mov	r1, r8
 8001032:	40da      	lsrs	r2, r3
 8001034:	2320      	movs	r3, #32
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	409e      	lsls	r6, r3
 800103a:	0030      	movs	r0, r6
 800103c:	1e43      	subs	r3, r0, #1
 800103e:	4198      	sbcs	r0, r3
 8001040:	4310      	orrs	r0, r2
 8001042:	e721      	b.n	8000e88 <__aeabi_fsub+0xc8>
 8001044:	2d00      	cmp	r5, #0
 8001046:	d1a7      	bne.n	8000f98 <__aeabi_fsub+0x1d8>
 8001048:	4663      	mov	r3, ip
 800104a:	2b00      	cmp	r3, #0
 800104c:	d059      	beq.n	8001102 <__aeabi_fsub+0x342>
 800104e:	2200      	movs	r2, #0
 8001050:	2e00      	cmp	r6, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x296>
 8001054:	e6ff      	b.n	8000e56 <__aeabi_fsub+0x96>
 8001056:	0030      	movs	r0, r6
 8001058:	4460      	add	r0, ip
 800105a:	0143      	lsls	r3, r0, #5
 800105c:	d592      	bpl.n	8000f84 <__aeabi_fsub+0x1c4>
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <__aeabi_fsub+0x348>)
 8001060:	3501      	adds	r5, #1
 8001062:	4018      	ands	r0, r3
 8001064:	e78e      	b.n	8000f84 <__aeabi_fsub+0x1c4>
 8001066:	4663      	mov	r3, ip
 8001068:	2b00      	cmp	r3, #0
 800106a:	d047      	beq.n	80010fc <__aeabi_fsub+0x33c>
 800106c:	1e4b      	subs	r3, r1, #1
 800106e:	2901      	cmp	r1, #1
 8001070:	d015      	beq.n	800109e <__aeabi_fsub+0x2de>
 8001072:	29ff      	cmp	r1, #255	; 0xff
 8001074:	d02b      	beq.n	80010ce <__aeabi_fsub+0x30e>
 8001076:	0019      	movs	r1, r3
 8001078:	e74e      	b.n	8000f18 <__aeabi_fsub+0x158>
 800107a:	000c      	movs	r4, r1
 800107c:	464b      	mov	r3, r9
 800107e:	003d      	movs	r5, r7
 8001080:	e784      	b.n	8000f8c <__aeabi_fsub+0x1cc>
 8001082:	4662      	mov	r2, ip
 8001084:	2a00      	cmp	r2, #0
 8001086:	d18b      	bne.n	8000fa0 <__aeabi_fsub+0x1e0>
 8001088:	2e00      	cmp	r6, #0
 800108a:	d192      	bne.n	8000fb2 <__aeabi_fsub+0x1f2>
 800108c:	2780      	movs	r7, #128	; 0x80
 800108e:	2400      	movs	r4, #0
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	03ff      	lsls	r7, r7, #15
 8001094:	e6df      	b.n	8000e56 <__aeabi_fsub+0x96>
 8001096:	4663      	mov	r3, ip
 8001098:	000c      	movs	r4, r1
 800109a:	1af7      	subs	r7, r6, r3
 800109c:	e6bf      	b.n	8000e1e <__aeabi_fsub+0x5e>
 800109e:	0030      	movs	r0, r6
 80010a0:	4460      	add	r0, ip
 80010a2:	2501      	movs	r5, #1
 80010a4:	0143      	lsls	r3, r0, #5
 80010a6:	d400      	bmi.n	80010aa <__aeabi_fsub+0x2ea>
 80010a8:	e76c      	b.n	8000f84 <__aeabi_fsub+0x1c4>
 80010aa:	2502      	movs	r5, #2
 80010ac:	e6f2      	b.n	8000e94 <__aeabi_fsub+0xd4>
 80010ae:	4663      	mov	r3, ip
 80010b0:	2501      	movs	r5, #1
 80010b2:	1b98      	subs	r0, r3, r6
 80010b4:	e6ae      	b.n	8000e14 <__aeabi_fsub+0x54>
 80010b6:	2320      	movs	r3, #32
 80010b8:	4664      	mov	r4, ip
 80010ba:	4660      	mov	r0, ip
 80010bc:	40fc      	lsrs	r4, r7
 80010be:	1bdf      	subs	r7, r3, r7
 80010c0:	40b8      	lsls	r0, r7
 80010c2:	1e43      	subs	r3, r0, #1
 80010c4:	4198      	sbcs	r0, r3
 80010c6:	4320      	orrs	r0, r4
 80010c8:	e79f      	b.n	800100a <__aeabi_fsub+0x24a>
 80010ca:	0005      	movs	r5, r0
 80010cc:	e75e      	b.n	8000f8c <__aeabi_fsub+0x1cc>
 80010ce:	464b      	mov	r3, r9
 80010d0:	e771      	b.n	8000fb6 <__aeabi_fsub+0x1f6>
 80010d2:	2320      	movs	r3, #32
 80010d4:	4665      	mov	r5, ip
 80010d6:	4660      	mov	r0, ip
 80010d8:	40cd      	lsrs	r5, r1
 80010da:	1a59      	subs	r1, r3, r1
 80010dc:	4088      	lsls	r0, r1
 80010de:	1e43      	subs	r3, r0, #1
 80010e0:	4198      	sbcs	r0, r3
 80010e2:	4328      	orrs	r0, r5
 80010e4:	e71c      	b.n	8000f20 <__aeabi_fsub+0x160>
 80010e6:	4663      	mov	r3, ip
 80010e8:	000c      	movs	r4, r1
 80010ea:	2501      	movs	r5, #1
 80010ec:	1af0      	subs	r0, r6, r3
 80010ee:	e691      	b.n	8000e14 <__aeabi_fsub+0x54>
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d095      	beq.n	8001020 <__aeabi_fsub+0x260>
 80010f4:	000c      	movs	r4, r1
 80010f6:	464f      	mov	r7, r9
 80010f8:	2200      	movs	r2, #0
 80010fa:	e6ac      	b.n	8000e56 <__aeabi_fsub+0x96>
 80010fc:	464b      	mov	r3, r9
 80010fe:	000d      	movs	r5, r1
 8001100:	e744      	b.n	8000f8c <__aeabi_fsub+0x1cc>
 8001102:	464f      	mov	r7, r9
 8001104:	2200      	movs	r2, #0
 8001106:	e6a6      	b.n	8000e56 <__aeabi_fsub+0x96>
 8001108:	fbffffff 	.word	0xfbffffff
 800110c:	7dffffff 	.word	0x7dffffff
 8001110:	2800      	cmp	r0, #0
 8001112:	d000      	beq.n	8001116 <__aeabi_fsub+0x356>
 8001114:	e736      	b.n	8000f84 <__aeabi_fsub+0x1c4>
 8001116:	2400      	movs	r4, #0
 8001118:	2700      	movs	r7, #0
 800111a:	e69c      	b.n	8000e56 <__aeabi_fsub+0x96>

0800111c <__aeabi_f2iz>:
 800111c:	0241      	lsls	r1, r0, #9
 800111e:	0042      	lsls	r2, r0, #1
 8001120:	0fc3      	lsrs	r3, r0, #31
 8001122:	0a49      	lsrs	r1, r1, #9
 8001124:	2000      	movs	r0, #0
 8001126:	0e12      	lsrs	r2, r2, #24
 8001128:	2a7e      	cmp	r2, #126	; 0x7e
 800112a:	dd03      	ble.n	8001134 <__aeabi_f2iz+0x18>
 800112c:	2a9d      	cmp	r2, #157	; 0x9d
 800112e:	dd02      	ble.n	8001136 <__aeabi_f2iz+0x1a>
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <__aeabi_f2iz+0x3c>)
 8001132:	1898      	adds	r0, r3, r2
 8001134:	4770      	bx	lr
 8001136:	2080      	movs	r0, #128	; 0x80
 8001138:	0400      	lsls	r0, r0, #16
 800113a:	4301      	orrs	r1, r0
 800113c:	2a95      	cmp	r2, #149	; 0x95
 800113e:	dc07      	bgt.n	8001150 <__aeabi_f2iz+0x34>
 8001140:	2096      	movs	r0, #150	; 0x96
 8001142:	1a82      	subs	r2, r0, r2
 8001144:	40d1      	lsrs	r1, r2
 8001146:	4248      	negs	r0, r1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f3      	bne.n	8001134 <__aeabi_f2iz+0x18>
 800114c:	0008      	movs	r0, r1
 800114e:	e7f1      	b.n	8001134 <__aeabi_f2iz+0x18>
 8001150:	3a96      	subs	r2, #150	; 0x96
 8001152:	4091      	lsls	r1, r2
 8001154:	e7f7      	b.n	8001146 <__aeabi_f2iz+0x2a>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	7fffffff 	.word	0x7fffffff

0800115c <__aeabi_ui2f>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	1e05      	subs	r5, r0, #0
 8001160:	d00e      	beq.n	8001180 <__aeabi_ui2f+0x24>
 8001162:	f000 f83d 	bl	80011e0 <__clzsi2>
 8001166:	239e      	movs	r3, #158	; 0x9e
 8001168:	0004      	movs	r4, r0
 800116a:	1a1b      	subs	r3, r3, r0
 800116c:	2b96      	cmp	r3, #150	; 0x96
 800116e:	dc0c      	bgt.n	800118a <__aeabi_ui2f+0x2e>
 8001170:	2808      	cmp	r0, #8
 8001172:	dd01      	ble.n	8001178 <__aeabi_ui2f+0x1c>
 8001174:	3c08      	subs	r4, #8
 8001176:	40a5      	lsls	r5, r4
 8001178:	026d      	lsls	r5, r5, #9
 800117a:	0a6d      	lsrs	r5, r5, #9
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	e001      	b.n	8001184 <__aeabi_ui2f+0x28>
 8001180:	2000      	movs	r0, #0
 8001182:	2500      	movs	r5, #0
 8001184:	05c0      	lsls	r0, r0, #23
 8001186:	4328      	orrs	r0, r5
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	2b99      	cmp	r3, #153	; 0x99
 800118c:	dd09      	ble.n	80011a2 <__aeabi_ui2f+0x46>
 800118e:	0002      	movs	r2, r0
 8001190:	0029      	movs	r1, r5
 8001192:	321b      	adds	r2, #27
 8001194:	4091      	lsls	r1, r2
 8001196:	1e4a      	subs	r2, r1, #1
 8001198:	4191      	sbcs	r1, r2
 800119a:	2205      	movs	r2, #5
 800119c:	1a12      	subs	r2, r2, r0
 800119e:	40d5      	lsrs	r5, r2
 80011a0:	430d      	orrs	r5, r1
 80011a2:	2c05      	cmp	r4, #5
 80011a4:	dc12      	bgt.n	80011cc <__aeabi_ui2f+0x70>
 80011a6:	0029      	movs	r1, r5
 80011a8:	4e0c      	ldr	r6, [pc, #48]	; (80011dc <__aeabi_ui2f+0x80>)
 80011aa:	4031      	ands	r1, r6
 80011ac:	076a      	lsls	r2, r5, #29
 80011ae:	d009      	beq.n	80011c4 <__aeabi_ui2f+0x68>
 80011b0:	200f      	movs	r0, #15
 80011b2:	4028      	ands	r0, r5
 80011b4:	2804      	cmp	r0, #4
 80011b6:	d005      	beq.n	80011c4 <__aeabi_ui2f+0x68>
 80011b8:	3104      	adds	r1, #4
 80011ba:	014a      	lsls	r2, r1, #5
 80011bc:	d502      	bpl.n	80011c4 <__aeabi_ui2f+0x68>
 80011be:	239f      	movs	r3, #159	; 0x9f
 80011c0:	4031      	ands	r1, r6
 80011c2:	1b1b      	subs	r3, r3, r4
 80011c4:	0189      	lsls	r1, r1, #6
 80011c6:	0a4d      	lsrs	r5, r1, #9
 80011c8:	b2d8      	uxtb	r0, r3
 80011ca:	e7db      	b.n	8001184 <__aeabi_ui2f+0x28>
 80011cc:	1f62      	subs	r2, r4, #5
 80011ce:	4095      	lsls	r5, r2
 80011d0:	0029      	movs	r1, r5
 80011d2:	4e02      	ldr	r6, [pc, #8]	; (80011dc <__aeabi_ui2f+0x80>)
 80011d4:	4031      	ands	r1, r6
 80011d6:	076a      	lsls	r2, r5, #29
 80011d8:	d0f4      	beq.n	80011c4 <__aeabi_ui2f+0x68>
 80011da:	e7e9      	b.n	80011b0 <__aeabi_ui2f+0x54>
 80011dc:	fbffffff 	.word	0xfbffffff

080011e0 <__clzsi2>:
 80011e0:	211c      	movs	r1, #28
 80011e2:	2301      	movs	r3, #1
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	4298      	cmp	r0, r3
 80011e8:	d301      	bcc.n	80011ee <__clzsi2+0xe>
 80011ea:	0c00      	lsrs	r0, r0, #16
 80011ec:	3910      	subs	r1, #16
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	4298      	cmp	r0, r3
 80011f2:	d301      	bcc.n	80011f8 <__clzsi2+0x18>
 80011f4:	0a00      	lsrs	r0, r0, #8
 80011f6:	3908      	subs	r1, #8
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d301      	bcc.n	8001202 <__clzsi2+0x22>
 80011fe:	0900      	lsrs	r0, r0, #4
 8001200:	3904      	subs	r1, #4
 8001202:	a202      	add	r2, pc, #8	; (adr r2, 800120c <__clzsi2+0x2c>)
 8001204:	5c10      	ldrb	r0, [r2, r0]
 8001206:	1840      	adds	r0, r0, r1
 8001208:	4770      	bx	lr
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	02020304 	.word	0x02020304
 8001210:	01010101 	.word	0x01010101
	...

0800121c <__clzdi2>:
 800121c:	b510      	push	{r4, lr}
 800121e:	2900      	cmp	r1, #0
 8001220:	d103      	bne.n	800122a <__clzdi2+0xe>
 8001222:	f7ff ffdd 	bl	80011e0 <__clzsi2>
 8001226:	3020      	adds	r0, #32
 8001228:	e002      	b.n	8001230 <__clzdi2+0x14>
 800122a:	0008      	movs	r0, r1
 800122c:	f7ff ffd8 	bl	80011e0 <__clzsi2>
 8001230:	bd10      	pop	{r4, pc}
 8001232:	46c0      	nop			; (mov r8, r8)

08001234 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include "SX1278.h"

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	000a      	movs	r2, r1
 800123e:	1cfb      	adds	r3, r7, #3
 8001240:	701a      	strb	r2, [r3, #0]
	uint8_t rec = 0;
 8001242:	240f      	movs	r4, #15
 8001244:	193b      	adds	r3, r7, r4
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <readRegister+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	0018      	movs	r0, r3
 8001252:	f003 fe0a 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f003 fbae 	bl	80049b8 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 800125c:	1cf9      	adds	r1, r7, #3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	f004 fbb0 	bl	80059c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8001268:	1939      	adds	r1, r7, r4
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	2201      	movs	r2, #1
 8001270:	f004 fd02 	bl	8005c78 <HAL_SPI_Receive>
	HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f003 fb9f 	bl	80049b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <readRegister+0x60>)
 800127c:	2201      	movs	r2, #1
 800127e:	2101      	movs	r1, #1
 8001280:	0018      	movs	r0, r3
 8001282:	f003 fdf2 	bl	8004e6a <HAL_GPIO_WritePin>
	return rec;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	781b      	ldrb	r3, [r3, #0]
}
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b005      	add	sp, #20
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	50000400 	.word	0x50000400

08001298 <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	0008      	movs	r0, r1
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	0019      	movs	r1, r3
 80012a6:	240b      	movs	r4, #11
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	1c02      	adds	r2, r0, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	200a      	movs	r0, #10
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	1c0a      	adds	r2, r1, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	if (lenght > 4)
 80012b6:	183b      	adds	r3, r7, r0
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d844      	bhi.n	8001348 <writeRegister+0xb0>
		return;
	uint8_t tx_data[5] = { 0 };
 80012be:	2110      	movs	r1, #16
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	711a      	strb	r2, [r3, #4]
	tx_data[0] = address | 0x80;
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	4252      	negs	r2, r2
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	e00f      	b.n	8001304 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	61fa      	str	r2, [r7, #28]
 80012ea:	001a      	movs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	189b      	adds	r3, r3, r2
 80012f0:	7819      	ldrb	r1, [r3, #0]
 80012f2:	2310      	movs	r3, #16
 80012f4:	18fa      	adds	r2, r7, r3
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	1c0a      	adds	r2, r1, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	3301      	adds	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	240a      	movs	r4, #10
 8001306:	193b      	adds	r3, r7, r4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	429a      	cmp	r2, r3
 800130e:	dde9      	ble.n	80012e4 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <writeRegister+0xb8>)
 8001312:	2200      	movs	r2, #0
 8001314:	2101      	movs	r1, #1
 8001316:	0018      	movs	r0, r3
 8001318:	f003 fda7 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800131c:	193b      	adds	r3, r7, r4
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	23fa      	movs	r3, #250	; 0xfa
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	2110      	movs	r1, #16
 800132c:	1879      	adds	r1, r7, r1
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f004 fb4a 	bl	80059c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <writeRegister+0xb8>)
 8001336:	2201      	movs	r2, #1
 8001338:	2101      	movs	r1, #1
 800133a:	0018      	movs	r0, r3
 800133c:	f003 fd95 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001340:	200a      	movs	r0, #10
 8001342:	f003 fb39 	bl	80049b8 <HAL_Delay>
 8001346:	e000      	b.n	800134a <writeRegister+0xb2>
		return;
 8001348:	46c0      	nop			; (mov r8, r8)
}
 800134a:	46bd      	mov	sp, r7
 800134c:	b009      	add	sp, #36	; 0x24
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	50000400 	.word	0x50000400

08001354 <setRFFrequencyReg>:
    rec =  spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
    return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800135c:	6979      	ldr	r1, [r7, #20]
 800135e:	6809      	ldr	r1, [r1, #0]
 8001360:	000a      	movs	r2, r1
 8001362:	2100      	movs	r1, #0
 8001364:	000b      	movs	r3, r1
 8001366:	0b51      	lsrs	r1, r2, #13
 8001368:	6079      	str	r1, [r7, #4]
 800136a:	04d3      	lsls	r3, r2, #19
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <setRFFrequencyReg+0x90>)
 8001370:	2300      	movs	r3, #0
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	f7fe ff93 	bl	80002a0 <__aeabi_uldivmod>
 800137a:	0002      	movs	r2, r0
 800137c:	000b      	movs	r3, r1
 800137e:	623a      	str	r2, [r7, #32]
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	0c12      	lsrs	r2, r2, #16
 800138a:	60ba      	str	r2, [r7, #8]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	431a      	orrs	r2, r3
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	0c1b      	lsrs	r3, r3, #16
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	7a3a      	ldrb	r2, [r7, #8]
 800139a:	210c      	movs	r1, #12
 800139c:	2010      	movs	r0, #16
 800139e:	180b      	adds	r3, r1, r0
 80013a0:	19db      	adds	r3, r3, r7
 80013a2:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	061b      	lsls	r3, r3, #24
 80013a8:	6a3a      	ldr	r2, [r7, #32]
 80013aa:	0a14      	lsrs	r4, r2, #8
 80013ac:	431c      	orrs	r4, r3
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	0a1d      	lsrs	r5, r3, #8
 80013b2:	b2e2      	uxtb	r2, r4
 80013b4:	180b      	adds	r3, r1, r0
 80013b6:	19db      	adds	r3, r3, r7
 80013b8:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	1c13      	adds	r3, r2, #0
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	0004      	movs	r4, r0
 80013c4:	180b      	adds	r3, r1, r0
 80013c6:	19db      	adds	r3, r3, r7
 80013c8:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2290      	movs	r2, #144	; 0x90
 80013ce:	5898      	ldr	r0, [r3, r2]
 80013d0:	190b      	adds	r3, r1, r4
 80013d2:	19da      	adds	r2, r3, r7
 80013d4:	2303      	movs	r3, #3
 80013d6:	2106      	movs	r1, #6
 80013d8:	f7ff ff5e 	bl	8001298 <writeRegister>

}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b00a      	add	sp, #40	; 0x28
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	01e84800 	.word	0x01e84800

080013e8 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2290      	movs	r2, #144	; 0x90
 80013f4:	5898      	ldr	r0, [r3, r2]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	330c      	adds	r3, #12
 80013fa:	001a      	movs	r2, r3
 80013fc:	2301      	movs	r3, #1
 80013fe:	2109      	movs	r1, #9
 8001400:	f7ff ff4a 	bl	8001298 <writeRegister>
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2290      	movs	r2, #144	; 0x90
 8001418:	5898      	ldr	r0, [r3, r2]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3313      	adds	r3, #19
 800141e:	001a      	movs	r2, r3
 8001420:	2301      	movs	r3, #1
 8001422:	210b      	movs	r1, #11
 8001424:	f7ff ff38 	bl	8001298 <writeRegister>
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2290      	movs	r2, #144	; 0x90
 800143c:	5898      	ldr	r0, [r3, r2]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3316      	adds	r3, #22
 8001442:	001a      	movs	r2, r3
 8001444:	2301      	movs	r3, #1
 8001446:	211f      	movs	r1, #31
 8001448:	f7ff ff26 	bl	8001298 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2290      	movs	r2, #144	; 0x90
 8001450:	5898      	ldr	r0, [r3, r2]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3318      	adds	r3, #24
 8001456:	001a      	movs	r2, r3
 8001458:	2301      	movs	r3, #1
 800145a:	2120      	movs	r1, #32
 800145c:	f7ff ff1c 	bl	8001298 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2290      	movs	r2, #144	; 0x90
 8001464:	5898      	ldr	r0, [r3, r2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3319      	adds	r3, #25
 800146a:	001a      	movs	r2, r3
 800146c:	2301      	movs	r3, #1
 800146e:	2121      	movs	r1, #33	; 0x21
 8001470:	f7ff ff12 	bl	8001298 <writeRegister>
			1);
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8001484:	210f      	movs	r1, #15
 8001486:	187b      	adds	r3, r7, r1
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	cmd = module->bandwidth << 4;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7b9b      	ldrb	r3, [r3, #14]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	b2da      	uxtb	r2, r3
 8001494:	187b      	adds	r3, r7, r1
 8001496:	701a      	strb	r2, [r3, #0]
	cmd += module->codingRate << 1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7bdb      	ldrb	r3, [r3, #15]
 800149c:	18db      	adds	r3, r3, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	18d3      	adds	r3, r2, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7f5a      	ldrb	r2, [r3, #29]
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	18d3      	adds	r3, r2, r3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2290      	movs	r2, #144	; 0x90
 80014c2:	5898      	ldr	r0, [r3, r2]
 80014c4:	193a      	adds	r2, r7, r4
 80014c6:	2301      	movs	r3, #1
 80014c8:	211d      	movs	r1, #29
 80014ca:	f7ff fee5 	bl	8001298 <writeRegister>

	cmd = module->spreadFactor << 4;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7b5b      	ldrb	r3, [r3, #13]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	0021      	movs	r1, r4
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c1b      	ldrb	r3, [r3, #16]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7dda      	ldrb	r2, [r3, #23]
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2290      	movs	r2, #144	; 0x90
 8001504:	5898      	ldr	r0, [r3, r2]
 8001506:	187a      	adds	r2, r7, r1
 8001508:	2301      	movs	r3, #1
 800150a:	211e      	movs	r1, #30
 800150c:	f7ff fec4 	bl	8001298 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2290      	movs	r2, #144	; 0x90
 8001514:	5898      	ldr	r0, [r3, r2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3315      	adds	r3, #21
 800151a:	001a      	movs	r2, r3
 800151c:	2301      	movs	r3, #1
 800151e:	2126      	movs	r1, #38	; 0x26
 8001520:	f7ff feba 	bl	8001298 <writeRegister>
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b005      	add	sp, #20
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2290      	movs	r2, #144	; 0x90
 8001538:	589b      	ldr	r3, [r3, r2]
 800153a:	2131      	movs	r1, #49	; 0x31
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fe79 	bl	8001234 <readRegister>
 8001542:	0003      	movs	r3, r0
 8001544:	001a      	movs	r2, r3
 8001546:	210f      	movs	r1, #15
 8001548:	187b      	adds	r3, r7, r1
 800154a:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2207      	movs	r2, #7
 8001552:	4393      	bics	r3, r2
 8001554:	b2da      	uxtb	r2, r3
 8001556:	187b      	adds	r3, r7, r1
 8001558:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2205      	movs	r2, #5
 8001560:	4313      	orrs	r3, r2
 8001562:	b2da      	uxtb	r2, r3
 8001564:	187b      	adds	r3, r7, r1
 8001566:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2290      	movs	r2, #144	; 0x90
 800156c:	5898      	ldr	r0, [r3, r2]
 800156e:	000c      	movs	r4, r1
 8001570:	187a      	adds	r2, r7, r1
 8001572:	2301      	movs	r3, #1
 8001574:	2131      	movs	r1, #49	; 0x31
 8001576:	f7ff fe8f 	bl	8001298 <writeRegister>
	tmp = 0x0C;
 800157a:	0021      	movs	r1, r4
 800157c:	187b      	adds	r3, r7, r1
 800157e:	220c      	movs	r2, #12
 8001580:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2290      	movs	r2, #144	; 0x90
 8001586:	5898      	ldr	r0, [r3, r2]
 8001588:	187a      	adds	r2, r7, r1
 800158a:	2301      	movs	r3, #1
 800158c:	2137      	movs	r1, #55	; 0x37
 800158e:	f7ff fe83 	bl	8001298 <writeRegister>
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b005      	add	sp, #20
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <readOperatingMode>:

void readOperatingMode(SX1278_t *module) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	module->operatingMode = (0x07 & readRegister(module->spi,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2290      	movs	r2, #144	; 0x90
 80015a6:	589b      	ldr	r3, [r3, r2]
 80015a8:	2101      	movs	r1, #1
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff fe42 	bl	8001234 <readRegister>
 80015b0:	0003      	movs	r3, r0
 80015b2:	001a      	movs	r2, r3
 80015b4:	2307      	movs	r3, #7
 80015b6:	4013      	ands	r3, r2
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2228      	movs	r2, #40	; 0x28
 80015be:	5499      	strb	r1, [r3, r2]
	LR_RegOpMode));
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <setLoraLowFreqModeReg>:

void setLoraLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	000a      	movs	r2, r1
 80015d2:	1cfb      	adds	r3, r7, #3
 80015d4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2278      	movs	r2, #120	; 0x78
 80015dc:	4252      	negs	r2, r2
 80015de:	4313      	orrs	r3, r2
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	210f      	movs	r1, #15
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2290      	movs	r2, #144	; 0x90
 80015ec:	5898      	ldr	r0, [r3, r2]
 80015ee:	187a      	adds	r2, r7, r1
 80015f0:	2301      	movs	r3, #1
 80015f2:	2101      	movs	r1, #1
 80015f4:	f7ff fe50 	bl	8001298 <writeRegister>
	module->operatingMode = mode;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	1cfa      	adds	r2, r7, #3
 80015fc:	2128      	movs	r1, #40	; 0x28
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	545a      	strb	r2, [r3, r1]
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b004      	add	sp, #16
 8001608:	bd80      	pop	{r7, pc}

0800160a <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8001612:	210f      	movs	r1, #15
 8001614:	187b      	adds	r3, r7, r1
 8001616:	22ff      	movs	r2, #255	; 0xff
 8001618:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2290      	movs	r2, #144	; 0x90
 800161e:	5898      	ldr	r0, [r3, r2]
 8001620:	187a      	adds	r2, r7, r1
 8001622:	2301      	movs	r3, #1
 8001624:	2112      	movs	r1, #18
 8001626:	f7ff fe37 	bl	8001298 <writeRegister>
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}

08001632 <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	setLoraLowFreqModeReg(module, SLEEP);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2100      	movs	r1, #0
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff ffc2 	bl	80015c8 <setLoraLowFreqModeReg>
	HAL_Delay(15);
 8001644:	200f      	movs	r0, #15
 8001646:	f003 f9b7 	bl	80049b8 <HAL_Delay>
	setRFFrequencyReg(module);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fe81 	bl	8001354 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2290      	movs	r2, #144	; 0x90
 8001656:	5898      	ldr	r0, [r3, r2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3312      	adds	r3, #18
 800165c:	001a      	movs	r2, r3
 800165e:	2301      	movs	r3, #1
 8001660:	2139      	movs	r1, #57	; 0x39
 8001662:	f7ff fe19 	bl	8001298 <writeRegister>
	setOutputPower(module);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff febd 	bl	80013e8 <setOutputPower>
	setOvercurrentProtect(module);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fecb 	bl	800140c <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2290      	movs	r2, #144	; 0x90
 800167a:	5898      	ldr	r0, [r3, r2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3314      	adds	r3, #20
 8001680:	001a      	movs	r2, r3
 8001682:	2301      	movs	r3, #1
 8001684:	210c      	movs	r1, #12
 8001686:	f7ff fe07 	bl	8001298 <writeRegister>
	if (module->spreadFactor == SF_6) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7b5b      	ldrb	r3, [r3, #13]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d10a      	bne.n	80016a8 <writeLoRaParametersReg+0x76>
		module->headerMode = IMPLICIT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x03;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2203      	movs	r2, #3
 800169c:	75da      	strb	r2, [r3, #23]
		setDetectionParametersReg(module);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ff43 	bl	800152c <setDetectionParametersReg>
 80016a6:	e005      	b.n	80016b4 <writeLoRaParametersReg+0x82>
	} else {
		module->headerMode = EXPLICIT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x00;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	75da      	strb	r2, [r3, #23]
	}

	setReModemConfig(module);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7ff fee0 	bl	800147c <setReModemConfig>
	setPreambleParameters(module);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff feb6 	bl	8001430 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2290      	movs	r2, #144	; 0x90
 80016c8:	5898      	ldr	r0, [r3, r2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	331a      	adds	r3, #26
 80016ce:	001a      	movs	r2, r3
 80016d0:	2301      	movs	r3, #1
 80016d2:	2124      	movs	r1, #36	; 0x24
 80016d4:	f7ff fde0 	bl	8001298 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2290      	movs	r2, #144	; 0x90
 80016dc:	5898      	ldr	r0, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	331b      	adds	r3, #27
 80016e2:	001a      	movs	r2, r3
 80016e4:	2301      	movs	r3, #1
 80016e6:	2140      	movs	r1, #64	; 0x40
 80016e8:	f7ff fdd6 	bl	8001298 <writeRegister>
	clearIrqFlagsReg(module);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff ff8b 	bl	800160a <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2290      	movs	r2, #144	; 0x90
 80016f8:	5898      	ldr	r0, [r3, r2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	331c      	adds	r3, #28
 80016fe:	001a      	movs	r2, r3
 8001700:	2301      	movs	r3, #1
 8001702:	2111      	movs	r1, #17
 8001704:	f7ff fdc8 	bl	8001298 <writeRegister>
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <updateMode>:

void updateMode(SX1278_t *module, Lora_Mode_t mode) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	000a      	movs	r2, r1
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	701a      	strb	r2, [r3, #0]

	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 800171e:	1cfb      	adds	r3, r7, #3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <updateMode+0x1e>
 8001726:	1cfb      	adds	r3, r7, #3
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d121      	bne.n	8001772 <updateMode+0x62>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 800172e:	1cfb      	adds	r3, r7, #3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <updateMode+0x2c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	e001      	b.n	8001740 <updateMode+0x30>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
		module->frequency =
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2241      	movs	r2, #65	; 0x41
 8001748:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	22ff      	movs	r2, #255	; 0xff
 800174e:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7f1b      	ldrb	r3, [r3, #28]
 8001754:	2208      	movs	r2, #8
 8001756:	4393      	bics	r3, r2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	1cfa      	adds	r2, r7, #3
 8001762:	2129      	movs	r1, #41	; 0x29
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	545a      	strb	r2, [r3, r1]
		module->status = TX_MODE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	222a      	movs	r2, #42	; 0x2a
 800176c:	2101      	movs	r1, #1
 800176e:	5499      	strb	r1, [r3, r2]
 8001770:	e02f      	b.n	80017d2 <updateMode+0xc2>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8001772:	1cfb      	adds	r3, r7, #3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <updateMode+0x72>
 800177a:	1cfb      	adds	r3, r7, #3
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d127      	bne.n	80017d2 <updateMode+0xc2>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8001782:	1cfb      	adds	r3, r7, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <updateMode+0x80>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	e001      	b.n	8001794 <updateMode+0x84>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
		module->frequency =
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	601a      	str	r2, [r3, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, RX_DONE_MASK);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7f1b      	ldrb	r3, [r3, #28]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	4393      	bics	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7f1b      	ldrb	r3, [r3, #28]
 80017b6:	2220      	movs	r2, #32
 80017b8:	4393      	bics	r3, r2
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	1cfa      	adds	r2, r7, #3
 80017c4:	2129      	movs	r1, #41	; 0x29
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	545a      	strb	r2, [r3, r1]
		module->status = RX_MODE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	222a      	movs	r2, #42	; 0x2a
 80017ce:	2102      	movs	r1, #2
 80017d0:	5499      	strb	r1, [r3, r2]
	}
	setLoraLowFreqModeReg(module, STANDBY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2101      	movs	r1, #1
 80017d6:	0018      	movs	r0, r3
 80017d8:	f7ff fef6 	bl	80015c8 <setLoraLowFreqModeReg>
	HAL_Delay(15);
 80017dc:	200f      	movs	r0, #15
 80017de:	f003 f8eb 	bl	80049b8 <HAL_Delay>
	setRFFrequencyReg(module);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff fdb5 	bl	8001354 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2290      	movs	r2, #144	; 0x90
 80017ee:	5898      	ldr	r0, [r3, r2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	331b      	adds	r3, #27
 80017f4:	001a      	movs	r2, r3
 80017f6:	2301      	movs	r3, #1
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	f7ff fd4d 	bl	8001298 <writeRegister>
	clearIrqFlagsReg(module);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff ff02 	bl	800160a <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2290      	movs	r2, #144	; 0x90
 800180a:	5898      	ldr	r0, [r3, r2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	331c      	adds	r3, #28
 8001810:	001a      	movs	r2, r3
 8001812:	2301      	movs	r3, #1
 8001814:	2111      	movs	r1, #17
 8001816:	f7ff fd3f 	bl	8001298 <writeRegister>
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <sx1278Reset>:
	module->preambleLengthLsb = 12; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
	module->len = 9;
}

void sx1278Reset() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <sx1278Reset+0x3c>)
 800182a:	2201      	movs	r2, #1
 800182c:	2101      	movs	r1, #1
 800182e:	0018      	movs	r0, r3
 8001830:	f003 fb1b 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <sx1278Reset+0x3c>)
 8001836:	2200      	movs	r2, #0
 8001838:	2101      	movs	r1, #1
 800183a:	0018      	movs	r0, r3
 800183c:	f003 fb15 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f003 f8b9 	bl	80049b8 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <sx1278Reset+0x3c>)
 8001848:	2201      	movs	r2, #1
 800184a:	2101      	movs	r1, #1
 800184c:	0018      	movs	r0, r3
 800184e:	f003 fb0c 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001852:	2064      	movs	r0, #100	; 0x64
 8001854:	f003 f8b0 	bl	80049b8 <HAL_Delay>
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	50000400 	.word	0x50000400

08001864 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 800186c:	f003 f89a 	bl	80049a4 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <waitForTxEnd+0x80>)
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	0018      	movs	r0, r3
 800187a:	f003 fad9 	bl	8004e30 <HAL_GPIO_ReadPin>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d019      	beq.n	80018b6 <waitForTxEnd+0x52>
			int timeEnd = HAL_GetTick();
 8001882:	f003 f88f 	bl	80049a4 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	60bb      	str	r3, [r7, #8]
			loRa->lastTxTime = timeEnd - timeStart;
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	001a      	movs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	621a      	str	r2, [r3, #32]
			readRegister(loRa->spi, LR_RegIrqFlags);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2290      	movs	r2, #144	; 0x90
 800189a:	589b      	ldr	r3, [r3, r2]
 800189c:	2112      	movs	r1, #18
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff fcc8 	bl	8001234 <readRegister>
			clearIrqFlagsReg(loRa);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff feaf 	bl	800160a <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	222a      	movs	r2, #42	; 0x2a
 80018b0:	2103      	movs	r1, #3
 80018b2:	5499      	strb	r1, [r3, r2]
			return;
 80018b4:	e013      	b.n	80018de <waitForTxEnd+0x7a>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 80018b6:	f003 f875 	bl	80049a4 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad2      	subs	r2, r2, r3
 80018c0:	23fa      	movs	r3, #250	; 0xfa
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d906      	bls.n	80018d6 <waitForTxEnd+0x72>
			sx1278Reset();
 80018c8:	f7ff ffac 	bl	8001824 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	222a      	movs	r2, #42	; 0x2a
 80018d0:	2105      	movs	r1, #5
 80018d2:	5499      	strb	r1, [r3, r2]
			return;
 80018d4:	e003      	b.n	80018de <waitForTxEnd+0x7a>
		}
		HAL_Delay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f003 f86e 	bl	80049b8 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 80018dc:	e7ca      	b.n	8001874 <waitForTxEnd+0x10>
	}
}
 80018de:	46bd      	mov	sp, r7
 80018e0:	b004      	add	sp, #16
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	50000800 	.word	0x50000800

080018e8 <setRxFifoAddr>:
    }
    return 0;
}


void setRxFifoAddr(SX1278_t *module) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	setLoraLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2100      	movs	r1, #0
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fe67 	bl	80015c8 <setLoraLowFreqModeReg>
	uint8_t cmd = module->len;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7c5a      	ldrb	r2, [r3, #17]
 80018fe:	210f      	movs	r1, #15
 8001900:	187b      	adds	r3, r7, r1
 8001902:	701a      	strb	r2, [r3, #0]
	//cmd = 9;
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2290      	movs	r2, #144	; 0x90
 8001908:	5898      	ldr	r0, [r3, r2]
 800190a:	187a      	adds	r2, r7, r1
 800190c:	2301      	movs	r3, #1
 800190e:	2122      	movs	r1, #34	; 0x22
 8001910:	f7ff fcc2 	bl	8001298 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2290      	movs	r2, #144	; 0x90
 8001918:	589b      	ldr	r3, [r3, r2]
 800191a:	210f      	movs	r1, #15
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff fc89 	bl	8001234 <readRegister>
 8001922:	0003      	movs	r3, r0
 8001924:	001a      	movs	r2, r3
 8001926:	210e      	movs	r1, #14
 8001928:	187b      	adds	r3, r7, r1
 800192a:	701a      	strb	r2, [r3, #0]
	addr = 0x00;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2290      	movs	r2, #144	; 0x90
 8001936:	5898      	ldr	r0, [r3, r2]
 8001938:	187a      	adds	r2, r7, r1
 800193a:	2301      	movs	r3, #1
 800193c:	210d      	movs	r1, #13
 800193e:	f7ff fcab 	bl	8001298 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2290      	movs	r2, #144	; 0x90
 8001946:	589b      	ldr	r3, [r3, r2]
 8001948:	2122      	movs	r1, #34	; 0x22
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff fc72 	bl	8001234 <readRegister>
 8001950:	0003      	movs	r3, r0
 8001952:	001a      	movs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	745a      	strb	r2, [r3, #17]
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b004      	add	sp, #16
 800195e:	bd80      	pop	{r7, pc}

08001960 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *module) {
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	uint8_t flags;
	flags = readRegister(module->spi, LR_RegIrqFlags);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2290      	movs	r2, #144	; 0x90
 800196c:	589b      	ldr	r3, [r3, r2]
 800196e:	2112      	movs	r1, #18
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff fc5f 	bl	8001234 <readRegister>
 8001976:	0003      	movs	r3, r0
 8001978:	001a      	movs	r2, r3
 800197a:	240e      	movs	r4, #14
 800197c:	193b      	adds	r3, r7, r4
 800197e:	701a      	strb	r2, [r3, #0]
	SET_BIT(flags, RX_DONE_MASK);
 8001980:	193b      	adds	r3, r7, r4
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	4313      	orrs	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	193b      	adds	r3, r7, r4
 800198c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &flags, 1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2290      	movs	r2, #144	; 0x90
 8001992:	5898      	ldr	r0, [r3, r2]
 8001994:	193a      	adds	r2, r7, r4
 8001996:	2301      	movs	r3, #1
 8001998:	2112      	movs	r1, #18
 800199a:	f7ff fc7d 	bl	8001298 <writeRegister>
	flags = readRegister(module->spi, LR_RegIrqFlags);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2290      	movs	r2, #144	; 0x90
 80019a2:	589b      	ldr	r3, [r3, r2]
 80019a4:	2112      	movs	r1, #18
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fc44 	bl	8001234 <readRegister>
 80019ac:	0003      	movs	r3, r0
 80019ae:	001a      	movs	r2, r3
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	701a      	strb	r2, [r3, #0]
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	200f      	movs	r0, #15
 80019ba:	183b      	adds	r3, r7, r0
 80019bc:	2120      	movs	r1, #32
 80019be:	400a      	ands	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
	return errorActivation;
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	781b      	ldrb	r3, [r3, #0]
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b005      	add	sp, #20
 80019cc:	bd90      	pop	{r4, r7, pc}
	...

080019d0 <getRxFifoData>:

void getRxFifoData(SX1278_t *module) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	module->len = readRegister(module->spi, LR_RegRxNbBytes); //Number for received bytes
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2290      	movs	r2, #144	; 0x90
 80019dc:	589b      	ldr	r3, [r3, r2]
 80019de:	2113      	movs	r1, #19
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff fc27 	bl	8001234 <readRegister>
 80019e6:	0003      	movs	r3, r0
 80019e8:	001a      	movs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	745a      	strb	r2, [r3, #17]
	uint8_t addr = 0x00;
 80019ee:	240f      	movs	r4, #15
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <getRxFifoData+0x84>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	2101      	movs	r1, #1
 80019fc:	0018      	movs	r0, r3
 80019fe:	f003 fa34 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f002 ffd8 	bl	80049b8 <HAL_Delay>
	HAL_SPI_Transmit(module->spi, &addr, 1, 100); // send address
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2290      	movs	r2, #144	; 0x90
 8001a0c:	5898      	ldr	r0, [r3, r2]
 8001a0e:	1939      	adds	r1, r7, r4
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	2201      	movs	r2, #1
 8001a14:	f003 ffd8 	bl	80059c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(module->spi, module->buffer, module->len, 100); // receive 6 bytes data
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2290      	movs	r2, #144	; 0x90
 8001a1c:	5898      	ldr	r0, [r3, r2]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	332b      	adds	r3, #43	; 0x2b
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7c5b      	ldrb	r3, [r3, #17]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	f004 f924 	bl	8005c78 <HAL_SPI_Receive>
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f002 ffc1 	bl	80049b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <getRxFifoData+0x84>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f003 fa14 	bl	8004e6a <HAL_GPIO_WritePin>
	module->status = RX_DONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	222a      	movs	r2, #42	; 0x2a
 8001a46:	2104      	movs	r1, #4
 8001a48:	5499      	strb	r1, [r3, r2]
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b005      	add	sp, #20
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	50000400 	.word	0x50000400

08001a58 <setTxFifoAddr>:

void setTxFifoAddr(SX1278_t *module) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7c5a      	ldrb	r2, [r3, #17]
 8001a64:	210f      	movs	r1, #15
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2290      	movs	r2, #144	; 0x90
 8001a6e:	5898      	ldr	r0, [r3, r2]
 8001a70:	187a      	adds	r2, r7, r1
 8001a72:	2301      	movs	r3, #1
 8001a74:	2122      	movs	r1, #34	; 0x22
 8001a76:	f7ff fc0f 	bl	8001298 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2290      	movs	r2, #144	; 0x90
 8001a7e:	589b      	ldr	r3, [r3, r2]
 8001a80:	210e      	movs	r1, #14
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fbd6 	bl	8001234 <readRegister>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	210e      	movs	r1, #14
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	addr = 0x80;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2290      	movs	r2, #144	; 0x90
 8001a9c:	5898      	ldr	r0, [r3, r2]
 8001a9e:	187a      	adds	r2, r7, r1
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	210d      	movs	r1, #13
 8001aa4:	f7ff fbf8 	bl	8001298 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2290      	movs	r2, #144	; 0x90
 8001aac:	589b      	ldr	r3, [r3, r2]
 8001aae:	2122      	movs	r1, #34	; 0x22
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fbbf 	bl	8001234 <readRegister>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	001a      	movs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	745a      	strb	r2, [r3, #17]
}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <setTxFifoData>:

void setTxFifoData(SX1278_t *module) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	setTxFifoAddr(module);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ffc1 	bl	8001a58 <setTxFifoAddr>
	for (int i = 0; i < module->len; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e013      	b.n	8001b04 <setTxFifoData+0x3e>
		uint8_t data = module->buffer[i];
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212b      	movs	r1, #43	; 0x2b
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	185b      	adds	r3, r3, r1
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	210b      	movs	r1, #11
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	701a      	strb	r2, [r3, #0]
		writeRegister(module->spi, 0x00, &data, 1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2290      	movs	r2, #144	; 0x90
 8001af2:	5898      	ldr	r0, [r3, r2]
 8001af4:	187a      	adds	r2, r7, r1
 8001af6:	2301      	movs	r3, #1
 8001af8:	2100      	movs	r1, #0
 8001afa:	f7ff fbcd 	bl	8001298 <writeRegister>
	for (int i = 0; i < module->len; i++) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7c5b      	ldrb	r3, [r3, #17]
 8001b08:	001a      	movs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	dbe5      	blt.n	8001adc <setTxFifoData+0x16>
	}
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <clearMemForRx>:

void clearMemForRx(SX1278_t *module) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	if (module->status == RX_MODE) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	222a      	movs	r2, #42	; 0x2a
 8001b26:	5c9b      	ldrb	r3, [r3, r2]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d106      	bne.n	8001b3a <clearMemForRx+0x20>
		memset(module->buffer, 0, SX1278_MAX_PACKET);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	332b      	adds	r3, #43	; 0x2b
 8001b30:	2264      	movs	r2, #100	; 0x64
 8001b32:	2100      	movs	r1, #0
 8001b34:	0018      	movs	r0, r3
 8001b36:	f004 fdd2 	bl	80066de <memset>
	}
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <transmit>:
	clearMemForRx(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ffba 	bl	8001ac6 <setTxFifoData>
	setLoraLowFreqModeReg(loRa, TX);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2103      	movs	r1, #3
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fd36 	bl	80015c8 <setLoraLowFreqModeReg>
	waitForTxEnd(loRa);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7ff fe80 	bl	8001864 <waitForTxEnd>
	memset(loRa->buffer, 0, sizeof(loRa->buffer));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	332b      	adds	r3, #43	; 0x2b
 8001b68:	2264      	movs	r2, #100	; 0x64
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f004 fdb6 	bl	80066de <memset>
	loRa->len = 0;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	745a      	strb	r2, [r3, #17]
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <readLoRaSettings>:

void readLoRaSettings(SX1278_t *loRa) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->spreadFactor), 0, 1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	330d      	adds	r3, #13
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2200      	movs	r2, #0
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f8c8 	bl	8001d28 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->bandwidth), 1, 1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	330e      	adds	r3, #14
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f8c0 	bl	8001d28 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	330f      	adds	r3, #15
 8001bac:	0019      	movs	r1, r3
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f8b8 	bl	8001d28 <readPage>
	readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->upFreq), 0, 4);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f000 f8b0 	bl	8001d28 <readPage>
	readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->dlFreq), 4, 4);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	1d19      	adds	r1, r3, #4
 8001bcc:	2304      	movs	r3, #4
 8001bce:	2204      	movs	r2, #4
 8001bd0:	2010      	movs	r0, #16
 8001bd2:	f000 f8a9 	bl	8001d28 <readPage>
	if (loRa->spreadFactor < SF_9 || loRa->spreadFactor > SF_12)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b5b      	ldrb	r3, [r3, #13]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d903      	bls.n	8001be6 <readLoRaSettings+0x66>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b5b      	ldrb	r3, [r3, #13]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d902      	bls.n	8001bec <readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	220a      	movs	r2, #10
 8001bea:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7b9b      	ldrb	r3, [r3, #14]
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	d902      	bls.n	8001bfa <readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2206      	movs	r2, #6
 8001bf8:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7bdb      	ldrb	r3, [r3, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <readLoRaSettings+0x8a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7bdb      	ldrb	r3, [r3, #15]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d902      	bls.n	8001c10 <readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <readLoRaSettings+0xcc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d904      	bls.n	8001c24 <readLoRaSettings+0xa4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <readLoRaSettings+0xd0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d902      	bls.n	8001c2a <readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <readLoRaSettings+0xd4>)
 8001c28:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <readLoRaSettings+0xd8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d904      	bls.n	8001c3e <readLoRaSettings+0xbe>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <readLoRaSettings+0xdc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d902      	bls.n	8001c44 <readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <readLoRaSettings+0xe0>)
 8001c42:	605a      	str	r2, [r3, #4]
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	09c670ff 	.word	0x09c670ff
 8001c50:	0a5f0780 	.word	0x0a5f0780
 8001c54:	0a408300 	.word	0x0a408300
 8001c58:	08d24cff 	.word	0x08d24cff
 8001c5c:	095ba140 	.word	0x095ba140
 8001c60:	093d1cc0 	.word	0x093d1cc0

08001c64 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	SX1278_t * loRa;
	loRa = malloc(sizeof(SX1278_t));
 8001c6c:	2094      	movs	r0, #148	; 0x94
 8001c6e:	f004 fd23 	bl	80066b8 <malloc>
 8001c72:	0003      	movs	r3, r0
 8001c74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <loRaInit+0xc0>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f003 f8f4 	bl	8004e6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <loRaInit+0xc0>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	2102      	movs	r1, #2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f003 f8ee 	bl	8004e6a <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2190      	movs	r1, #144	; 0x90
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	505a      	str	r2, [r3, r1]
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2290      	movs	r2, #144	; 0x90
 8001c9a:	589b      	ldr	r3, [r3, r2]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff fac8 	bl	8001234 <readRegister>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2228      	movs	r2, #40	; 0x28
 8001cac:	5499      	strb	r1, [r3, r2]
	loRa->mode = -1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2229      	movs	r2, #41	; 0x29
 8001cb2:	21ff      	movs	r1, #255	; 0xff
 8001cb4:	5499      	strb	r1, [r3, r2]
	loRa->power = SX1278_POWER_17DBM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	22fc      	movs	r2, #252	; 0xfc
 8001cba:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	220b      	movs	r2, #11
 8001cc6:	74da      	strb	r2, [r3, #19]
	loRa->lnaGain = LNAGAIN;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2223      	movs	r2, #35	; 0x23
 8001ccc:	751a      	strb	r2, [r3, #20]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	755a      	strb	r2, [r3, #21]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2212      	movs	r2, #18
 8001cd8:	749a      	strb	r2, [r3, #18]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	759a      	strb	r2, [r3, #22]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	765a      	strb	r2, [r3, #25]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	220c      	movs	r2, #12
 8001cf0:	765a      	strb	r2, [r3, #25]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	769a      	strb	r2, [r3, #26]
	loRa->len = 9;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2209      	movs	r2, #9
 8001cfc:	745a      	strb	r2, [r3, #17]
	readLoRaSettings(loRa);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff ff3d 	bl	8001b80 <readLoRaSettings>
	 savePage(CAT24C02_PAGE0_START_ADDR, &(loRa.bandwidth),1, 1);
	 savePage(CAT24C02_PAGE0_START_ADDR, &(loRa.codingRate),2, 1);
	 savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*)&(loRa.upFreq),0, 4);
	 savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*)&(loRa.dlFreq),4, 4);
	 */
	updateMode(loRa, SLAVE_RECEIVER);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff fd00 	bl	8001710 <updateMode>
	writeLoRaParametersReg(loRa);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fc8d 	bl	8001632 <writeLoRaParametersReg>
	return loRa;
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	50000400 	.word	0x50000400

08001d28 <readPage>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

bool readPage(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	0004      	movs	r4, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	0010      	movs	r0, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	1c22      	adds	r2, r4, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	1dbb      	adds	r3, r7, #6
 8001d3e:	1c02      	adds	r2, r0, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	1d7b      	adds	r3, r7, #5
 8001d44:	1c0a      	adds	r2, r1, #0
 8001d46:	701a      	strb	r2, [r3, #0]
	uint8_t buff[1] = { 0 };
 8001d48:	210c      	movs	r1, #12
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <readPage+0xa0>)
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	701a      	strb	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	200e      	movs	r0, #14
 8001d66:	183b      	adds	r3, r7, r0
 8001d68:	801a      	strh	r2, [r3, #0]
	buff[0] = (uint8_t) MemAddress & 0xff;
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	701a      	strb	r2, [r3, #0]

	if (!i2c1MasterTransmit(CHIP_ADDR, buff, 1, 1000))
 8001d74:	23fa      	movs	r3, #250	; 0xfa
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	1879      	adds	r1, r7, r1
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2050      	movs	r0, #80	; 0x50
 8001d7e:	f000 f905 	bl	8001f8c <i2c1MasterTransmit>
 8001d82:	0003      	movs	r3, r0
 8001d84:	001a      	movs	r2, r3
 8001d86:	2301      	movs	r3, #1
 8001d88:	4053      	eors	r3, r2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <readPage+0x6c>
		return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e015      	b.n	8001dc0 <readPage+0x98>
	HAL_Delay(5);
 8001d94:	2005      	movs	r0, #5
 8001d96:	f002 fe0f 	bl	80049b8 <HAL_Delay>
	if (!i2c1MasterReceive(CHIP_ADDR, data, size, 1000))
 8001d9a:	23fa      	movs	r3, #250	; 0xfa
 8001d9c:	0098      	lsls	r0, r3, #2
 8001d9e:	1d7b      	adds	r3, r7, #5
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	0003      	movs	r3, r0
 8001da6:	2050      	movs	r0, #80	; 0x50
 8001da8:	f000 f9da 	bl	8002160 <i2c1MasterReceive>
 8001dac:	0003      	movs	r3, r0
 8001dae:	001a      	movs	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	4053      	eors	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <readPage+0x96>
		return false;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <readPage+0x98>
	return true;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b005      	add	sp, #20
 8001dc6:	bd90      	pop	{r4, r7, pc}
 8001dc8:	08006fe4 	.word	0x08006fe4

08001dcc <savePage>:

void savePage(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	0004      	movs	r4, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	1c22      	adds	r2, r4, #0
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	1c02      	adds	r2, r0, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	1d7b      	adds	r3, r7, #5
 8001de8:	1c0a      	adds	r2, r1, #0
 8001dea:	701a      	strb	r2, [r3, #0]
	uint8_t buff[16 + 1];
	uint8_t read[16];
	uint8_t i = 0;
 8001dec:	252f      	movs	r5, #47	; 0x2f
 8001dee:	197b      	adds	r3, r7, r5
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

	readPage(page, read, offset, size);
 8001df4:	1d7b      	adds	r3, r7, #5
 8001df6:	781c      	ldrb	r4, [r3, #0]
 8001df8:	1dbb      	adds	r3, r7, #6
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	18f9      	adds	r1, r7, r3
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	7818      	ldrb	r0, [r3, #0]
 8001e04:	0023      	movs	r3, r4
 8001e06:	f7ff ff8f 	bl	8001d28 <readPage>
	bool notEqual = false;
 8001e0a:	232e      	movs	r3, #46	; 0x2e
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < size; i++)
 8001e12:	197b      	adds	r3, r7, r5
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e017      	b.n	8001e4a <savePage+0x7e>
		if (data[i] != read[i]) {
 8001e1a:	212f      	movs	r1, #47	; 0x2f
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	18d3      	adds	r3, r2, r3
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	210c      	movs	r1, #12
 8001e2c:	1879      	adds	r1, r7, r1
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d004      	beq.n	8001e3e <savePage+0x72>
			notEqual = true;
 8001e34:	232e      	movs	r3, #46	; 0x2e
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
			break;
 8001e3c:	e00c      	b.n	8001e58 <savePage+0x8c>
	for (i = 0; i < size; i++)
 8001e3e:	212f      	movs	r1, #47	; 0x2f
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	781a      	ldrb	r2, [r3, #0]
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	3201      	adds	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	232f      	movs	r3, #47	; 0x2f
 8001e4c:	18fa      	adds	r2, r7, r3
 8001e4e:	1d7b      	adds	r3, r7, #5
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3e0      	bcc.n	8001e1a <savePage+0x4e>
		}

	if (notEqual) {
 8001e58:	232e      	movs	r3, #46	; 0x2e
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d033      	beq.n	8001eca <savePage+0xfe>
		buff[0] = (uint8_t) (page << PADDRPOSITION | offset) & 0xff;
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	b25a      	sxtb	r2, r3
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	231c      	movs	r3, #28
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++) {
 8001e7c:	232f      	movs	r3, #47	; 0x2f
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e010      	b.n	8001ea8 <savePage+0xdc>
			buff[i + 1] = data[i];
 8001e86:	202f      	movs	r0, #47	; 0x2f
 8001e88:	183b      	adds	r3, r7, r0
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	18d2      	adds	r2, r2, r3
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	7811      	ldrb	r1, [r2, #0]
 8001e98:	221c      	movs	r2, #28
 8001e9a:	18ba      	adds	r2, r7, r2
 8001e9c:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < size; i++) {
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	3201      	adds	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	232f      	movs	r3, #47	; 0x2f
 8001eaa:	18fa      	adds	r2, r7, r3
 8001eac:	1d7b      	adds	r3, r7, #5
 8001eae:	7812      	ldrb	r2, [r2, #0]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3e7      	bcc.n	8001e86 <savePage+0xba>
		}
		i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
 8001eb6:	1d7b      	adds	r3, r7, #5
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	231c      	movs	r3, #28
 8001ec0:	18f9      	adds	r1, r7, r3
 8001ec2:	2332      	movs	r3, #50	; 0x32
 8001ec4:	2050      	movs	r0, #80	; 0x50
 8001ec6:	f000 f861 	bl	8001f8c <i2c1MasterTransmit>
	}
	HAL_Delay(6);
 8001eca:	2006      	movs	r0, #6
 8001ecc:	f002 fd74 	bl	80049b8 <HAL_Delay>
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b00c      	add	sp, #48	; 0x30
 8001ed6:	bdb0      	pop	{r4, r5, r7, pc}

08001ed8 <i2c1MasterInit>:
 *      Author: sigmadev
 */

#include <i2c.h>

void i2c1MasterInit() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <i2c1MasterInit+0x9c>)
 8001ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <i2c1MasterInit+0x9c>)
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

	// Configure SCL and SDA pins (PB6 and PB7) as alternate function
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001eee:	4923      	ldr	r1, [pc, #140]	; (8001f7c <i2c1MasterInit+0xa4>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001efa:	21a0      	movs	r1, #160	; 0xa0
 8001efc:	0209      	lsls	r1, r1, #8
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

	// Set SCL and SDA pins as open-drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f08:	21c0      	movs	r1, #192	; 0xc0
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]

	// Set alternate function for SCL and SDA pins to I2C
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6_Msk | GPIO_AFRL_AFSEL7_Msk);
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f14:	0212      	lsls	r2, r2, #8
 8001f16:	0a12      	lsrs	r2, r2, #8
 8001f18:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |= (6U << GPIO_AFRL_AFSEL6_Pos)
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <i2c1MasterInit+0xa0>)
 8001f20:	21cc      	movs	r1, #204	; 0xcc
 8001f22:	05c9      	lsls	r1, r1, #23
 8001f24:	430a      	orrs	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
			| (6U << GPIO_AFRL_AFSEL7_Pos);

	// Enable I2C1 clock
	RCC->APBENR1 |= RCC_APBENR1_I2C1EN;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <i2c1MasterInit+0x9c>)
 8001f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <i2c1MasterInit+0x9c>)
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	0389      	lsls	r1, r1, #14
 8001f32:	430a      	orrs	r2, r1
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c

	// Disable I2C1
	I2C1->CR1 &= ~I2C_CR1_PE;
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	438a      	bics	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

	// Set I2C1 timing
	I2C1->TIMINGR = 0x00303D5B;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <i2c1MasterInit+0xac>)
 8001f46:	611a      	str	r2, [r3, #16]

	// Disable I2C1 own address
	I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f4e:	490e      	ldr	r1, [pc, #56]	; (8001f88 <i2c1MasterInit+0xb0>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
	I2C1->OAR2 &= ~I2C_OAR2_OA2EN;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f5a:	490b      	ldr	r1, [pc, #44]	; (8001f88 <i2c1MasterInit+0xb0>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

	// Enable I2C1
	I2C1->CR1 |= I2C_CR1_PE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <i2c1MasterInit+0xa8>)
 8001f66:	2101      	movs	r1, #1
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	50000400 	.word	0x50000400
 8001f7c:	ffff0fff 	.word	0xffff0fff
 8001f80:	40005400 	.word	0x40005400
 8001f84:	00303d5b 	.word	0x00303d5b
 8001f88:	ffff7fff 	.word	0xffff7fff

08001f8c <i2c1MasterTransmit>:
		}
	}
	return true;
}

bool i2c1MasterTransmit(uint8_t slaveAddr, uint8_t *data, uint8_t length, uint32_t timeout) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	0011      	movs	r1, r2
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	1c02      	adds	r2, r0, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	230e      	movs	r3, #14
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	1c0a      	adds	r2, r1, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    uint32_t tickStart = HAL_GetTick();
 8001fa8:	f002 fcfc 	bl	80049a4 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	613b      	str	r3, [r7, #16]
    uint8_t dataIndex = 0;
 8001fb0:	2317      	movs	r3, #23
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
    uint8_t retries = 3;
 8001fb8:	2316      	movs	r3, #22
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	701a      	strb	r2, [r3, #0]

    if (!(I2C1->CR1 & I2C_CR1_PE) || (I2C1->ISR & I2C_ISR_BUSY)) {
 8001fc0:	4b66      	ldr	r3, [pc, #408]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d005      	beq.n	8001fd6 <i2c1MasterTransmit+0x4a>
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <i2c1MasterTransmit+0x66>
        I2C1->CR1 &= ~I2C_CR1_PE;
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	438a      	bics	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
        I2C1->CR1 |= I2C_CR1_PE;
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]
        return false;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e0b0      	b.n	8002154 <i2c1MasterTransmit+0x1c8>
    }

    I2C1->CR2 = (slaveAddr << 1) | (length << 16) | I2C_CR2_AUTOEND;
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	005a      	lsls	r2, r3, #1
 8001ffa:	230e      	movs	r3, #14
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	4313      	orrs	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0492      	lsls	r2, r2, #18
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2C1->CR2, I2C_CR2_START);
 8002010:	4b52      	ldr	r3, [pc, #328]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0189      	lsls	r1, r1, #6
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

    while (dataIndex < length) {
 800201e:	e079      	b.n	8002114 <i2c1MasterTransmit+0x188>
        if (HAL_GetTick() - tickStart > timeout) {
 8002020:	f002 fcc0 	bl	80049a4 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d210      	bcs.n	8002052 <i2c1MasterTransmit+0xc6>
            if (I2C1->ISR & I2C_ISR_BUSY) {
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	4013      	ands	r3, r2
 800203a:	d00a      	beq.n	8002052 <i2c1MasterTransmit+0xc6>
                I2C1->CR2 |= I2C_CR2_STOP;
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <i2c1MasterTransmit+0x1d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	01c9      	lsls	r1, r1, #7
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
                i2c1MasterInit();
 800204a:	f7ff ff45 	bl	8001ed8 <i2c1MasterInit>
                return false;
 800204e:	2300      	movs	r3, #0
 8002050:	e080      	b.n	8002154 <i2c1MasterTransmit+0x1c8>
            }
        }

        if (READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d00b      	beq.n	8002074 <i2c1MasterTransmit+0xe8>
            I2C1->TXDR = data[dataIndex++];
 800205c:	2217      	movs	r2, #23
 800205e:	18bb      	adds	r3, r7, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	18ba      	adds	r2, r7, r2
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	7011      	strb	r1, [r2, #0]
 8002068:	001a      	movs	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	189b      	adds	r3, r3, r2
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if (READ_BIT(I2C1->ISR, I2C_ISR_NACKF)) {
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2210      	movs	r2, #16
 800207a:	4013      	ands	r3, r2
 800207c:	2016      	movs	r0, #22
 800207e:	183a      	adds	r2, r7, r0
 8002080:	1839      	adds	r1, r7, r0
 8002082:	7809      	ldrb	r1, [r1, #0]
 8002084:	7011      	strb	r1, [r2, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d044      	beq.n	8002114 <i2c1MasterTransmit+0x188>
            if (--retries > 0) {
 800208a:	0001      	movs	r1, r0
 800208c:	187b      	adds	r3, r7, r1
 800208e:	187a      	adds	r2, r7, r1
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	3a01      	subs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	187b      	adds	r3, r7, r1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d029      	beq.n	80020f2 <i2c1MasterTransmit+0x166>
                // Generate the stop condition
                I2C1->CR2 |= I2C_CR2_STOP;
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	01c9      	lsls	r1, r1, #7
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
                // Clear NACKF flag
                SET_BIT(I2C1->ICR, I2C_ICR_NACKCF);
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020b2:	2110      	movs	r1, #16
 80020b4:	430a      	orrs	r2, r1
 80020b6:	61da      	str	r2, [r3, #28]
                // Reinitialize the I2C peripheral
                i2c1MasterInit();
 80020b8:	f7ff ff0e 	bl	8001ed8 <i2c1MasterInit>
                // Restart the transmission process
                dataIndex = 0;
 80020bc:	2317      	movs	r3, #23
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
                I2C1->CR2 = (slaveAddr << 1) | (length << 16) | I2C_CR2_AUTOEND;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	005a      	lsls	r2, r3, #1
 80020cc:	230e      	movs	r3, #14
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	4313      	orrs	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0492      	lsls	r2, r2, #18
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
                SET_BIT(I2C1->CR2, I2C_CR2_START);
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0189      	lsls	r1, r1, #6
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	e010      	b.n	8002114 <i2c1MasterTransmit+0x188>
            } else {
                I2C1->CR2 |= I2C_CR2_STOP;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <i2c1MasterTransmit+0x1d0>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	01c9      	lsls	r1, r1, #7
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
                SET_BIT(I2C1->ICR, I2C_ICR_NACKCF);
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002106:	2110      	movs	r1, #16
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
                i2c1MasterInit();
 800210c:	f7ff fee4 	bl	8001ed8 <i2c1MasterInit>
                return false;
 8002110:	2300      	movs	r3, #0
 8002112:	e01f      	b.n	8002154 <i2c1MasterTransmit+0x1c8>
    while (dataIndex < length) {
 8002114:	2317      	movs	r3, #23
 8002116:	18fa      	adds	r2, r7, r3
 8002118:	230e      	movs	r3, #14
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d200      	bcs.n	8002126 <i2c1MasterTransmit+0x19a>
 8002124:	e77c      	b.n	8002020 <i2c1MasterTransmit+0x94>
            }
        }
    }

    while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8002126:	e009      	b.n	800213c <i2c1MasterTransmit+0x1b0>
        if (HAL_GetTick() - tickStart > timeout) {
 8002128:	f002 fc3c 	bl	80049a4 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d201      	bcs.n	800213c <i2c1MasterTransmit+0x1b0>
            return false;
 8002138:	2300      	movs	r3, #0
 800213a:	e00b      	b.n	8002154 <i2c1MasterTransmit+0x1c8>
    while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <i2c1MasterTransmit+0x1d0>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2220      	movs	r2, #32
 8002142:	4013      	ands	r3, r2
 8002144:	d0f0      	beq.n	8002128 <i2c1MasterTransmit+0x19c>
        }
    }

    SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <i2c1MasterTransmit+0x1d0>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <i2c1MasterTransmit+0x1d0>)
 800214c:	2120      	movs	r1, #32
 800214e:	430a      	orrs	r2, r1
 8002150:	61da      	str	r2, [r3, #28]

    return true;
 8002152:	2301      	movs	r3, #1
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40005400 	.word	0x40005400

08002160 <i2c1MasterReceive>:

bool i2c1MasterReceive(uint8_t slave_addr, uint8_t *data, uint8_t len,
		uint32_t timeout) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	0011      	movs	r1, r2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	1c02      	adds	r2, r0, #0
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	230e      	movs	r3, #14
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	1c0a      	adds	r2, r1, #0
 800217a:	701a      	strb	r2, [r3, #0]
	uint32_t tick_start = HAL_GetTick();
 800217c:	f002 fc12 	bl	80049a4 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	613b      	str	r3, [r7, #16]
	uint8_t index = 0;
 8002184:	2317      	movs	r3, #23
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]

	// Make sure the peripheral is enabled
	if (!(I2C1->CR1 & I2C_CR1_PE)) {
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <i2c1MasterReceive+0xf8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d101      	bne.n	800219a <i2c1MasterReceive+0x3a>
		return false;
 8002196:	2300      	movs	r3, #0
 8002198:	e05a      	b.n	8002250 <i2c1MasterReceive+0xf0>
	}

	// Set slave address, read transfer, and set number of bytes
	I2C1->CR2 = (slave_addr << 1) | I2C_CR2_RD_WRN | (len << 16)
 800219a:	230f      	movs	r3, #15
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	001a      	movs	r2, r3
 80021a4:	230e      	movs	r3, #14
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	431a      	orrs	r2, r3
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <i2c1MasterReceive+0xf8>)
			| I2C_CR2_AUTOEND;
 80021b0:	492a      	ldr	r1, [pc, #168]	; (800225c <i2c1MasterReceive+0xfc>)
 80021b2:	430a      	orrs	r2, r1
	I2C1->CR2 = (slave_addr << 1) | I2C_CR2_RD_WRN | (len << 16)
 80021b4:	605a      	str	r2, [r3, #4]

	// Send START condition
	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0189      	lsls	r1, r1, #6
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]

	while (index < len) {
 80021c4:	e02f      	b.n	8002226 <i2c1MasterReceive+0xc6>
		// Check for timeout
		if (HAL_GetTick() - tick_start > timeout) {
 80021c6:	f002 fbed 	bl	80049a4 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <i2c1MasterReceive+0x98>
			if (I2C1->ISR & I2C_ISR_BUSY) {
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4013      	ands	r3, r2
 80021e0:	d00a      	beq.n	80021f8 <i2c1MasterReceive+0x98>
				// Generate the stop condition
				I2C1->CR2 |= I2C_CR2_STOP;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	01c9      	lsls	r1, r1, #7
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
				i2c1MasterInit();
 80021f0:	f7ff fe72 	bl	8001ed8 <i2c1MasterInit>
				return false;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e02b      	b.n	8002250 <i2c1MasterReceive+0xf0>
			}
		}

		// Check if RXNE flag is set (receive data register not empty)
		if (READ_BIT(I2C1->ISR, I2C_ISR_RXNE)) {
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <i2c1MasterReceive+0xf8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2204      	movs	r2, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	2017      	movs	r0, #23
 8002202:	183a      	adds	r2, r7, r0
 8002204:	1839      	adds	r1, r7, r0
 8002206:	7809      	ldrb	r1, [r1, #0]
 8002208:	7011      	strb	r1, [r2, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <i2c1MasterReceive+0xc6>
			// Read data from RXDR
			data[index++] = (uint8_t) (I2C1->RXDR & 0xFF);
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <i2c1MasterReceive+0xf8>)
 8002210:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002212:	183b      	adds	r3, r7, r0
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	183a      	adds	r2, r7, r0
 8002218:	1c58      	adds	r0, r3, #1
 800221a:	7010      	strb	r0, [r2, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	189b      	adds	r3, r3, r2
 8002222:	b2ca      	uxtb	r2, r1
 8002224:	701a      	strb	r2, [r3, #0]
	while (index < len) {
 8002226:	2317      	movs	r3, #23
 8002228:	18fa      	adds	r2, r7, r3
 800222a:	230e      	movs	r3, #14
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3c7      	bcc.n	80021c6 <i2c1MasterReceive+0x66>
		}
	}

	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <i2c1MasterReceive+0xf8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2220      	movs	r2, #32
 800223e:	4013      	ands	r3, r2
 8002240:	d0fa      	beq.n	8002238 <i2c1MasterReceive+0xd8>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <i2c1MasterReceive+0xf8>)
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <i2c1MasterReceive+0xf8>)
 8002248:	2120      	movs	r1, #32
 800224a:	430a      	orrs	r2, r1
 800224c:	61da      	str	r2, [r3, #28]

	return true;
 800224e:	2301      	movs	r3, #1
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40005400 	.word	0x40005400
 800225c:	02000400 	.word	0x02000400

08002260 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8002268:	23a0      	movs	r3, #160	; 0xa0
 800226a:	05db      	lsls	r3, r3, #23
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	23a0      	movs	r3, #160	; 0xa0
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	01c9      	lsls	r1, r1, #7
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 800227a:	23a0      	movs	r3, #160	; 0xa0
 800227c:	05db      	lsls	r3, r3, #23
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	23a0      	movs	r3, #160	; 0xa0
 8002282:	05db      	lsls	r3, r3, #23
 8002284:	4911      	ldr	r1, [pc, #68]	; (80022cc <ledInit+0x6c>)
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <ledInit+0x70>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <ledInit+0x70>)
 8002290:	2101      	movs	r1, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <ledInit+0x70>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <ledInit+0x70>)
 800229c:	2102      	movs	r1, #2
 800229e:	438a      	bics	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <ledInit+0x70>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <ledInit+0x70>)
 80022a8:	2104      	movs	r1, #4
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <ledInit+0x70>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <ledInit+0x70>)
 80022b4:	2108      	movs	r1, #8
 80022b6:	438a      	bics	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
	led_reset(led);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f809 	bl	80022d4 <led_reset>
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	ffff7fff 	.word	0xffff7fff
 80022d0:	50000400 	.word	0x50000400

080022d4 <led_reset>:
		else
			SYS_RP_LED_ON();
	}
}

void led_reset(LED_t *l) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
//	l->chCounter = 0;
//	l->clCounter = 0;
//	l->cnCounter = 0;
	l->kaCounter = HAL_GetTick();
 80022dc:	f002 fb62 	bl	80049a4 <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
//	l->sysrpCounter = 0;
//	l->thCounter = 0;
//	l->tokCounter = 0;
}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022f4:	f002 fada 	bl	80048ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022f8:	f000 f856 	bl	80023a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022fc:	f000 f8de 	bl	80024bc <MX_GPIO_Init>
	MX_SPI1_Init();
 8002300:	f000 f89e 	bl	8002440 <MX_SPI1_Init>
//	MX_I2C1_Init();
//  MX_IWDG_Init();
	/* USER CODE BEGIN 2 */

// Initialize the I2C peripheral (hi2c1) here
	i2c1MasterInit();
 8002304:	f7ff fde8 	bl	8001ed8 <i2c1MasterInit>
	u1 = uart1Init(HS16_CLK, BAUD_RATE);
 8002308:	23e1      	movs	r3, #225	; 0xe1
 800230a:	025b      	lsls	r3, r3, #9
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <main+0x9c>)
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f002 f973 	bl	80045fc <uart1Init>
 8002316:	0002      	movs	r2, r0
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <main+0xa0>)
 800231a:	601a      	str	r2, [r3, #0]
	u1->debug = false;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <main+0xa0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	226d      	movs	r2, #109	; 0x6d
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]
	vlad = vladInit(0);
 8002326:	2000      	movs	r0, #0
 8002328:	f001 f9bd 	bl	80036a6 <vladInit>
 800232c:	0002      	movs	r2, r0
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <main+0xa4>)
 8002330:	601a      	str	r2, [r3, #0]
	rdss = rdssInit(vlad->id);
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <main+0xa4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2230      	movs	r2, #48	; 0x30
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fd70 	bl	8003e20 <rdssInit>
 8002340:	0002      	movs	r2, r0
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <main+0xa8>)
 8002344:	601a      	str	r2, [r3, #0]
	ledInit(&led);
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <main+0xac>)
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff89 	bl	8002260 <ledInit>
	loRa = loRaInit(&hspi1);
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <main+0xb0>)
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff fc87 	bl	8001c64 <loRaInit>
 8002356:	0002      	movs	r2, r0
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <main+0xb4>)
 800235a:	601a      	str	r2, [r3, #0]
	printLoRaStatus(u1, loRa);
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <main+0xa0>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <main+0xb4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0019      	movs	r1, r3
 8002366:	0010      	movs	r0, r2
 8002368:	f000 fb5a 	bl	8002a20 <printLoRaStatus>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		updateVladMeasurements(vlad);
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <main+0xa4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f001 fc99 	bl	8003ca8 <updateVladMeasurements>
		handleCommunication(rdss, loRa, vlad, u1);
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <main+0xa8>)
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <main+0xb4>)
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <main+0xa4>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <main+0xa0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f001 f905 	bl	8003594 <handleCommunication>
		updateVladMeasurements(vlad);
 800238a:	e7ef      	b.n	800236c <main+0x7c>
 800238c:	00f42400 	.word	0x00f42400
 8002390:	200000f0 	.word	0x200000f0
 8002394:	20000100 	.word	0x20000100
 8002398:	200000f8 	.word	0x200000f8
 800239c:	200000f4 	.word	0x200000f4
 80023a0:	2000008c 	.word	0x2000008c
 80023a4:	200000fc 	.word	0x200000fc

080023a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b093      	sub	sp, #76	; 0x4c
 80023ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80023ae:	2414      	movs	r4, #20
 80023b0:	193b      	adds	r3, r7, r4
 80023b2:	0018      	movs	r0, r3
 80023b4:	2334      	movs	r3, #52	; 0x34
 80023b6:	001a      	movs	r2, r3
 80023b8:	2100      	movs	r1, #0
 80023ba:	f004 f990 	bl	80066de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	0018      	movs	r0, r3
 80023c2:	2310      	movs	r3, #16
 80023c4:	001a      	movs	r2, r3
 80023c6:	2100      	movs	r1, #0
 80023c8:	f004 f989 	bl	80066de <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f002 fd67 	bl	8004ea4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	220a      	movs	r2, #10
 80023da:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	0052      	lsls	r2, r2, #1
 80023e2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80023e4:	0021      	movs	r1, r4
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2201      	movs	r2, #1
 80023f6:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	0018      	movs	r0, r3
 8002402:	f002 fd8f 	bl	8004f24 <HAL_RCC_OscConfig>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0x66>
		Error_Handler();
 800240a:	f001 f947 	bl	800369c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2100      	movs	r1, #0
 800242a:	0018      	movs	r0, r3
 800242c:	f003 f88a 	bl	8005544 <HAL_RCC_ClockConfig>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <SystemClock_Config+0x90>
		Error_Handler();
 8002434:	f001 f932 	bl	800369c <Error_Handler>
	}
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b013      	add	sp, #76	; 0x4c
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <MX_SPI1_Init+0x78>)
 8002448:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_SPI1_Init+0x74>)
 800244c:	2282      	movs	r2, #130	; 0x82
 800244e:	0052      	lsls	r2, r2, #1
 8002450:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_SPI1_Init+0x74>)
 800245a:	22e0      	movs	r2, #224	; 0xe0
 800245c:	00d2      	lsls	r2, r2, #3
 800245e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_SPI1_Init+0x74>)
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002476:	2218      	movs	r2, #24
 8002478:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_SPI1_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SPI1_Init+0x74>)
 800248e:	2207      	movs	r2, #7
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SPI1_Init+0x74>)
 800249a:	2208      	movs	r2, #8
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <MX_SPI1_Init+0x74>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f003 f9d9 	bl	8005858 <HAL_SPI_Init>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <MX_SPI1_Init+0x6e>
		Error_Handler();
 80024aa:	f001 f8f7 	bl	800369c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000008c 	.word	0x2000008c
 80024b8:	40013000 	.word	0x40013000

080024bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80024c2:	240c      	movs	r4, #12
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	0018      	movs	r0, r3
 80024c8:	2314      	movs	r3, #20
 80024ca:	001a      	movs	r2, r3
 80024cc:	2100      	movs	r1, #0
 80024ce:	f004 f906 	bl	80066de <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024d8:	2102      	movs	r1, #2
 80024da:	430a      	orrs	r2, r1
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <MX_GPIO_Init+0x124>)
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <MX_GPIO_Init+0x124>)
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <MX_GPIO_Init+0x124>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <MX_GPIO_Init+0x124>)
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	2204      	movs	r2, #4
 8002514:	4013      	ands	r3, r2
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <MX_GPIO_Init+0x128>)
 800251c:	2200      	movs	r2, #0
 800251e:	2103      	movs	r1, #3
 8002520:	0018      	movs	r0, r3
 8002522:	f002 fca2 	bl	8004e6a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	0059      	lsls	r1, r3, #1
 800252a:	23a0      	movs	r3, #160	; 0xa0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	2200      	movs	r2, #0
 8002530:	0018      	movs	r0, r3
 8002532:	f002 fc9a 	bl	8004e6a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin, GPIO_PIN_RESET);
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <MX_GPIO_Init+0x12c>)
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	0018      	movs	r0, r3
 800253e:	f002 fc94 	bl	8004e6a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2203      	movs	r2, #3
 8002546:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	193b      	adds	r3, r7, r4
 800254a:	2201      	movs	r2, #1
 800254c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	193b      	adds	r3, r7, r4
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	193b      	adds	r3, r7, r4
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	193b      	adds	r3, r7, r4
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <MX_GPIO_Init+0x128>)
 800255e:	0019      	movs	r1, r3
 8002560:	0010      	movs	r0, r2
 8002562:	f002 fb01 	bl	8004b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8002566:	193b      	adds	r3, r7, r4
 8002568:	2204      	movs	r2, #4
 800256a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	193b      	adds	r3, r7, r4
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8002578:	193b      	adds	r3, r7, r4
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <MX_GPIO_Init+0x128>)
 800257c:	0019      	movs	r1, r3
 800257e:	0010      	movs	r0, r2
 8002580:	f002 faf2 	bl	8004b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8002584:	0021      	movs	r1, r4
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0052      	lsls	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258e:	000c      	movs	r4, r1
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2201      	movs	r2, #1
 8002594:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	193b      	adds	r3, r7, r4
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	193b      	adds	r3, r7, r4
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80025a2:	193a      	adds	r2, r7, r4
 80025a4:	23a0      	movs	r3, #160	; 0xa0
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	0011      	movs	r1, r2
 80025aa:	0018      	movs	r0, r3
 80025ac:	f002 fadc 	bl	8004b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : LORA_BUSSY_Pin */
	GPIO_InitStruct.Pin = LORA_BUSSY_Pin;
 80025b0:	0021      	movs	r1, r4
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2201      	movs	r2, #1
 80025bc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LORA_BUSSY_GPIO_Port, &GPIO_InitStruct);
 80025ca:	187b      	adds	r3, r7, r1
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <MX_GPIO_Init+0x12c>)
 80025ce:	0019      	movs	r1, r3
 80025d0:	0010      	movs	r0, r2
 80025d2:	f002 fac9 	bl	8004b68 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b009      	add	sp, #36	; 0x24
 80025dc:	bd90      	pop	{r4, r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000
 80025e4:	50000400 	.word	0x50000400
 80025e8:	50000800 	.word	0x50000800

080025ec <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART1_IRQHandler(void) {
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	if (u1->rxLen >= RX_BUFFLEN) {
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <USART1_IRQHandler+0x84>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2265      	movs	r2, #101	; 0x65
 80025f6:	5c9b      	ldrb	r3, [r3, r2]
 80025f8:	2b31      	cmp	r3, #49	; 0x31
 80025fa:	d909      	bls.n	8002610 <USART1_IRQHandler+0x24>
		cleanRx(u1);
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <USART1_IRQHandler+0x84>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f002 f900 	bl	8004806 <cleanRx>
		u1->rxLen = 0;
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <USART1_IRQHandler+0x84>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2265      	movs	r2, #101	; 0x65
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
	}
	u1->rx[u1->rxLen++] = readRxReg();
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <USART1_IRQHandler+0x84>)
 8002612:	681c      	ldr	r4, [r3, #0]
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <USART1_IRQHandler+0x84>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2265      	movs	r2, #101	; 0x65
 800261a:	5c9a      	ldrb	r2, [r3, r2]
 800261c:	1c51      	adds	r1, r2, #1
 800261e:	b2c8      	uxtb	r0, r1
 8002620:	2165      	movs	r1, #101	; 0x65
 8002622:	5458      	strb	r0, [r3, r1]
 8002624:	0015      	movs	r5, r2
 8002626:	f002 f879 	bl	800471c <readRxReg>
 800262a:	0003      	movs	r3, r0
 800262c:	5563      	strb	r3, [r4, r5]
	if (u1->rx[u1->rxLen - 1] == LTEL_END_MARK)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <USART1_IRQHandler+0x84>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <USART1_IRQHandler+0x84>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2165      	movs	r1, #101	; 0x65
 8002638:	5c5b      	ldrb	r3, [r3, r1]
 800263a:	3b01      	subs	r3, #1
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	2b7f      	cmp	r3, #127	; 0x7f
 8002640:	d104      	bne.n	800264c <USART1_IRQHandler+0x60>
		u1->isReady = true;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <USART1_IRQHandler+0x84>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	226c      	movs	r2, #108	; 0x6c
 8002648:	2101      	movs	r1, #1
 800264a:	5499      	strb	r1, [r3, r2]
	if (u1->rx[0] != LTEL_START_MARK) {
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <USART1_IRQHandler+0x84>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b7e      	cmp	r3, #126	; 0x7e
 8002654:	d009      	beq.n	800266a <USART1_IRQHandler+0x7e>
		cleanRx(u1);
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <USART1_IRQHandler+0x84>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0018      	movs	r0, r3
 800265c:	f002 f8d3 	bl	8004806 <cleanRx>
		u1->rxLen = 0;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <USART1_IRQHandler+0x84>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2265      	movs	r2, #101	; 0x65
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
	}

}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	bdb0      	pop	{r4, r5, r7, pc}
 8002670:	200000f0 	.word	0x200000f0

08002674 <printStatus>:
			vlad.level172m);
	writeTx(u1);
	cleanTx(u1);
}

void printStatus(UART1_t *u1, RDSS_t *rdss) {
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af02      	add	r7, sp, #8
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

	if (!u1->debug)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	226d      	movs	r2, #109	; 0x6d
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	2201      	movs	r2, #1
 8002686:	4053      	eors	r3, r2
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d000      	beq.n	8002690 <printStatus+0x1c>
 800268e:	e1b0      	b.n	80029f2 <printStatus+0x37e>
		return;

	char *str = (char*) u1->tx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	60bb      	str	r3, [r7, #8]
	uint8_t i = 0;
 8002696:	2317      	movs	r3, #23
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
	switch (rdss->status) {
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	223b      	movs	r2, #59	; 0x3b
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	2b0e      	cmp	r3, #14
 80026a6:	d900      	bls.n	80026aa <printStatus+0x36>
 80026a8:	e19d      	b.n	80029e6 <printStatus+0x372>
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	4bd3      	ldr	r3, [pc, #844]	; (80029fc <printStatus+0x388>)
 80026ae:	18d3      	adds	r3, r2, r3
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	469f      	mov	pc, r3
	case CRC_ERROR:
		checkValidCrc(rdss->buffer, rdss->len);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	0019      	movs	r1, r3
 80026be:	0010      	movs	r0, r2
 80026c0:	f001 fc2f 	bl	8003f22 <checkValidCrc>
		u1->tx_len = (uint8_t) sprintf(str, "CRC mismatch:\r\n");
 80026c4:	4ace      	ldr	r2, [pc, #824]	; (8002a00 <printStatus+0x38c>)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f004 f904 	bl	80068d8 <siprintf>
 80026d0:	0003      	movs	r3, r0
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2264      	movs	r2, #100	; 0x64
 80026d8:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f002 f880 	bl	80047e2 <writeTx>
		u1->tx_len = 0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2264      	movs	r2, #100	; 0x64
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]
		break;
 80026ea:	e17d      	b.n	80029e8 <printStatus+0x374>
	case WRONG_MODULE_ID:
		u1->tx_len = (uint8_t) sprintf(str,
				"ID mismatch - ID %d and ID received %d \r\n", rdss->id,
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	223a      	movs	r2, #58	; 0x3a
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str,
 80026f2:	001c      	movs	r4, r3
				rdss->idReceived);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2239      	movs	r2, #57	; 0x39
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str,
 80026fa:	49c2      	ldr	r1, [pc, #776]	; (8002a04 <printStatus+0x390>)
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	0022      	movs	r2, r4
 8002700:	f004 f8ea 	bl	80068d8 <siprintf>
 8002704:	0003      	movs	r3, r0
 8002706:	b2d9      	uxtb	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2264      	movs	r2, #100	; 0x64
 800270c:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f002 f866 	bl	80047e2 <writeTx>
		u1->tx_len = 0;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2264      	movs	r2, #100	; 0x64
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]
		break;
 800271e:	e163      	b.n	80029e8 <printStatus+0x374>
	case NOT_VALID_FRAME:
		u1->tx_len = (uint8_t) sprintf(str, "Not valid start byte \r\n");
 8002720:	4ab9      	ldr	r2, [pc, #740]	; (8002a08 <printStatus+0x394>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f004 f8d6 	bl	80068d8 <siprintf>
 800272c:	0003      	movs	r3, r0
 800272e:	b2d9      	uxtb	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2264      	movs	r2, #100	; 0x64
 8002734:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0018      	movs	r0, r3
 800273a:	f002 f852 	bl	80047e2 <writeTx>
		u1->tx_len = 0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2264      	movs	r2, #100	; 0x64
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]
		break;
 8002746:	e14f      	b.n	80029e8 <printStatus+0x374>
	case DATA_OK:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 800274c:	001a      	movs	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 8002752:	001c      	movs	r4, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 8002758:	49ac      	ldr	r1, [pc, #688]	; (8002a0c <printStatus+0x398>)
 800275a:	68b8      	ldr	r0, [r7, #8]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	0023      	movs	r3, r4
 8002760:	f004 f8ba 	bl	80068d8 <siprintf>
 8002764:	0003      	movs	r3, r0
 8002766:	b2d9      	uxtb	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2264      	movs	r2, #100	; 0x64
 800276c:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f002 f836 	bl	80047e2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 8002776:	2306      	movs	r3, #6
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e019      	b.n	80027b0 <printStatus+0x13c>
			if (i > 250)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2bfa      	cmp	r3, #250	; 0xfa
 8002780:	dc1d      	bgt.n	80027be <printStatus+0x14a>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	18d3      	adds	r3, r2, r3
 8002788:	3302      	adds	r3, #2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	49a0      	ldr	r1, [pc, #640]	; (8002a10 <printStatus+0x39c>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0018      	movs	r0, r3
 8002794:	f004 f8a0 	bl	80068d8 <siprintf>
 8002798:	0003      	movs	r3, r0
 800279a:	b2d9      	uxtb	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2264      	movs	r2, #100	; 0x64
 80027a0:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f002 f81c 	bl	80047e2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	79db      	ldrb	r3, [r3, #7]
 80027b4:	001a      	movs	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4293      	cmp	r3, r2
 80027ba:	dbdf      	blt.n	800277c <printStatus+0x108>
 80027bc:	e000      	b.n	80027c0 <printStatus+0x14c>
				break;
 80027be:	46c0      	nop			; (mov r8, r8)
		}
		writeTxReg('\n');
 80027c0:	200a      	movs	r0, #10
 80027c2:	f001 ff7d 	bl	80046c0 <writeTxReg>
		break;
 80027c6:	e10f      	b.n	80029e8 <printStatus+0x374>
	case WAITING:
		u1->tx_len = (uint8_t) sprintf(str, "Waiting for new data\r\n");
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <printStatus+0x3a0>)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f004 f882 	bl	80068d8 <siprintf>
 80027d4:	0003      	movs	r3, r0
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2264      	movs	r2, #100	; 0x64
 80027dc:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f001 fffe 	bl	80047e2 <writeTx>
		u1->tx_len = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2264      	movs	r2, #100	; 0x64
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]
		break;
 80027ee:	e0fb      	b.n	80029e8 <printStatus+0x374>
	case LORA_SEND:
		u1->tx_len = (uint8_t) sprintf(str, "Send uart data to loRa ID: %d\r\n",
				rdss->idReceived);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2239      	movs	r2, #57	; 0x39
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str, "Send uart data to loRa ID: %d\r\n",
 80027f6:	001a      	movs	r2, r3
 80027f8:	4987      	ldr	r1, [pc, #540]	; (8002a18 <printStatus+0x3a4>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f004 f86b 	bl	80068d8 <siprintf>
 8002802:	0003      	movs	r3, r0
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2264      	movs	r2, #100	; 0x64
 800280a:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f001 ffe7 	bl	80047e2 <writeTx>
		u1->tx_len = 0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2264      	movs	r2, #100	; 0x64
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]
		break;
 800281c:	e0e4      	b.n	80029e8 <printStatus+0x374>
	case LORA_RECEIVE:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 8002822:	001a      	movs	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 8002828:	001c      	movs	r4, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 800282e:	4977      	ldr	r1, [pc, #476]	; (8002a0c <printStatus+0x398>)
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	0023      	movs	r3, r4
 8002836:	f004 f84f 	bl	80068d8 <siprintf>
 800283a:	0003      	movs	r3, r0
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2264      	movs	r2, #100	; 0x64
 8002842:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f001 ffcb 	bl	80047e2 <writeTx>
		for (i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 800284c:	2317      	movs	r3, #23
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2206      	movs	r2, #6
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e01d      	b.n	8002892 <printStatus+0x21e>
			if (i > 250)
 8002856:	2417      	movs	r4, #23
 8002858:	193b      	adds	r3, r7, r4
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2bfa      	cmp	r3, #250	; 0xfa
 800285e:	d820      	bhi.n	80028a2 <printStatus+0x22e>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 8002860:	193b      	adds	r3, r7, r4
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	18d3      	adds	r3, r2, r3
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	001a      	movs	r2, r3
 800286c:	4968      	ldr	r1, [pc, #416]	; (8002a10 <printStatus+0x39c>)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0018      	movs	r0, r3
 8002872:	f004 f831 	bl	80068d8 <siprintf>
 8002876:	0003      	movs	r3, r0
 8002878:	b2d9      	uxtb	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2264      	movs	r2, #100	; 0x64
 800287e:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	0018      	movs	r0, r3
 8002884:	f001 ffad 	bl	80047e2 <writeTx>
		for (i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 8002888:	193b      	adds	r3, r7, r4
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	193b      	adds	r3, r7, r4
 800288e:	3201      	adds	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	79db      	ldrb	r3, [r3, #7]
 8002896:	2217      	movs	r2, #23
 8002898:	18ba      	adds	r2, r7, r2
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3da      	bcc.n	8002856 <printStatus+0x1e2>
 80028a0:	e000      	b.n	80028a4 <printStatus+0x230>
				break;
 80028a2:	46c0      	nop			; (mov r8, r8)
		}
		if (i > DATA_START_INDEX)
 80028a4:	2317      	movs	r3, #23
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <printStatus+0x240>
			writeTxReg('\n');
 80028ae:	200a      	movs	r0, #10
 80028b0:	f001 ff06 	bl	80046c0 <writeTxReg>
		u1->tx_len = 0;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2264      	movs	r2, #100	; 0x64
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]
		break;
 80028bc:	e094      	b.n	80029e8 <printStatus+0x374>
	case UART_SEND:
		u1->tx_len = (uint8_t) sprintf(str, "Reply vlad data: %d\r\n",
				rdss->idReceived);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2239      	movs	r2, #57	; 0x39
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str, "Reply vlad data: %d\r\n",
 80028c4:	001a      	movs	r2, r3
 80028c6:	4955      	ldr	r1, [pc, #340]	; (8002a1c <printStatus+0x3a8>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f004 f804 	bl	80068d8 <siprintf>
 80028d0:	0003      	movs	r3, r0
 80028d2:	b2d9      	uxtb	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2264      	movs	r2, #100	; 0x64
 80028d8:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f001 ff80 	bl	80047e2 <writeTx>
		for (i = 0; i < rdss->len; i++) {
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e01d      	b.n	8002928 <printStatus+0x2b4>
			if (i > 250)
 80028ec:	2417      	movs	r4, #23
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2bfa      	cmp	r3, #250	; 0xfa
 80028f4:	d820      	bhi.n	8002938 <printStatus+0x2c4>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	18d3      	adds	r3, r2, r3
 80028fe:	789b      	ldrb	r3, [r3, #2]
 8002900:	001a      	movs	r2, r3
 8002902:	4943      	ldr	r1, [pc, #268]	; (8002a10 <printStatus+0x39c>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0018      	movs	r0, r3
 8002908:	f003 ffe6 	bl	80068d8 <siprintf>
 800290c:	0003      	movs	r3, r0
 800290e:	b2d9      	uxtb	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2264      	movs	r2, #100	; 0x64
 8002914:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f001 ff62 	bl	80047e2 <writeTx>
		for (i = 0; i < rdss->len; i++) {
 800291e:	193b      	adds	r3, r7, r4
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	193b      	adds	r3, r7, r4
 8002924:	3201      	adds	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	2217      	movs	r2, #23
 800292e:	18ba      	adds	r2, r7, r2
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3da      	bcc.n	80028ec <printStatus+0x278>
 8002936:	e000      	b.n	800293a <printStatus+0x2c6>
				break;
 8002938:	46c0      	nop			; (mov r8, r8)
		}
		if (i > 0)
 800293a:	2317      	movs	r3, #23
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <printStatus+0x2d6>
			writeTxReg('\n');
 8002944:	200a      	movs	r0, #10
 8002946:	f001 febb 	bl	80046c0 <writeTxReg>
		u1->tx_len = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2264      	movs	r2, #100	; 0x64
 800294e:	2100      	movs	r1, #0
 8002950:	5499      	strb	r1, [r3, r2]
		break;
 8002952:	e049      	b.n	80029e8 <printStatus+0x374>
	case UART_VALID:
		u1->tx_len = (uint8_t) sprintf(str,
				"Validation ok: ID %02x Cmd %02x Bytes %d Data \r\n",
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	791b      	ldrb	r3, [r3, #4]
		u1->tx_len = (uint8_t) sprintf(str,
 8002958:	001a      	movs	r2, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	795b      	ldrb	r3, [r3, #5]
		u1->tx_len = (uint8_t) sprintf(str,
 800295e:	001c      	movs	r4, r3
				rdss->buffer[2], rdss->buffer[3], rdss->buffer[5]);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	79db      	ldrb	r3, [r3, #7]
		u1->tx_len = (uint8_t) sprintf(str,
 8002964:	4929      	ldr	r1, [pc, #164]	; (8002a0c <printStatus+0x398>)
 8002966:	68b8      	ldr	r0, [r7, #8]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	0023      	movs	r3, r4
 800296c:	f003 ffb4 	bl	80068d8 <siprintf>
 8002970:	0003      	movs	r3, r0
 8002972:	b2d9      	uxtb	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2264      	movs	r2, #100	; 0x64
 8002978:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f001 ff30 	bl	80047e2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 8002982:	2306      	movs	r3, #6
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e019      	b.n	80029bc <printStatus+0x348>
			if (i > 250)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2bfa      	cmp	r3, #250	; 0xfa
 800298c:	dc1d      	bgt.n	80029ca <printStatus+0x356>
				break;
			u1->tx_len = (uint8_t) sprintf(str, "%02X", rdss->buffer[i]);
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	3302      	adds	r3, #2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	001a      	movs	r2, r3
 800299a:	491d      	ldr	r1, [pc, #116]	; (8002a10 <printStatus+0x39c>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0018      	movs	r0, r3
 80029a0:	f003 ff9a 	bl	80068d8 <siprintf>
 80029a4:	0003      	movs	r3, r0
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2264      	movs	r2, #100	; 0x64
 80029ac:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f001 ff16 	bl	80047e2 <writeTx>
		for (int i = DATA_START_INDEX; i < rdss->buffer[5]; i++) {
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	79db      	ldrb	r3, [r3, #7]
 80029c0:	001a      	movs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	dbdf      	blt.n	8002988 <printStatus+0x314>
 80029c8:	e000      	b.n	80029cc <printStatus+0x358>
				break;
 80029ca:	46c0      	nop			; (mov r8, r8)
		}
		if (i > DATA_START_INDEX)
 80029cc:	2317      	movs	r3, #23
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <printStatus+0x368>
			writeTxReg('\n');
 80029d6:	200a      	movs	r0, #10
 80029d8:	f001 fe72 	bl	80046c0 <writeTxReg>
		u1->tx_len = 0;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2264      	movs	r2, #100	; 0x64
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]
		break;
 80029e4:	e000      	b.n	80029e8 <printStatus+0x374>
	default:
		break;
 80029e6:	46c0      	nop			; (mov r8, r8)

	}
	cleanTx(u1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f001 ff21 	bl	8004832 <cleanTx>
 80029f0:	e000      	b.n	80029f4 <printStatus+0x380>
		return;
 80029f2:	46c0      	nop			; (mov r8, r8)

}
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b007      	add	sp, #28
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	0800732c 	.word	0x0800732c
 8002a00:	08007088 	.word	0x08007088
 8002a04:	08007098 	.word	0x08007098
 8002a08:	080070c4 	.word	0x080070c4
 8002a0c:	080070dc 	.word	0x080070dc
 8002a10:	08007110 	.word	0x08007110
 8002a14:	08007118 	.word	0x08007118
 8002a18:	08007130 	.word	0x08007130
 8002a1c:	08007150 	.word	0x08007150

08002a20 <printLoRaStatus>:
void printLoRaStatus(UART1_t *u1, SX1278_t *loRa) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
	if (!u1->debug) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	226d      	movs	r2, #109	; 0x6d
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4053      	eors	r3, r2
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d000      	beq.n	8002a3c <printLoRaStatus+0x1c>
 8002a3a:	e0f2      	b.n	8002c22 <printLoRaStatus+0x202>
		return;
	}

	char *str = (char*) u1->tx;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	60fb      	str	r3, [r7, #12]

	switch (loRa->status) {
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	222a      	movs	r2, #42	; 0x2a
 8002a46:	5c9b      	ldrb	r3, [r3, r2]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d900      	bls.n	8002a4e <printLoRaStatus+0x2e>
 8002a4c:	e0e1      	b.n	8002c12 <printLoRaStatus+0x1f2>
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <printLoRaStatus+0x20c>)
 8002a52:	18d3      	adds	r3, r2, r3
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	469f      	mov	pc, r3
	case TX_TIMEOUT:
		u1->tx_len = (uint8_t) sprintf(str,
 8002a58:	4975      	ldr	r1, [pc, #468]	; (8002c30 <printLoRaStatus+0x210>)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f003 ff3a 	bl	80068d8 <siprintf>
 8002a64:	0003      	movs	r3, r0
 8002a66:	b2d9      	uxtb	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2264      	movs	r2, #100	; 0x64
 8002a6c:	5499      	strb	r1, [r3, r2]
				"Transmission Fail: %d seconds Timeout\r\n", TX_TIMEOUT / 1000);
		writeTx(u1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 feb6 	bl	80047e2 <writeTx>
		break;
 8002a76:	e0cf      	b.n	8002c18 <printLoRaStatus+0x1f8>
	case TX_DONE:
		u1->tx_len = (uint8_t) sprintf(str, "Transmission Done: %lu ms\r\n",
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	496d      	ldr	r1, [pc, #436]	; (8002c34 <printLoRaStatus+0x214>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f003 ff29 	bl	80068d8 <siprintf>
 8002a86:	0003      	movs	r3, r0
 8002a88:	b2d9      	uxtb	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2264      	movs	r2, #100	; 0x64
 8002a8e:	5499      	strb	r1, [r3, r2]
				loRa->lastTxTime);
		writeTx(u1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f001 fea5 	bl	80047e2 <writeTx>
		break;
 8002a98:	e0be      	b.n	8002c18 <printLoRaStatus+0x1f8>
	case TX_BUFFER_READY:
		u1->tx_len = (uint8_t) sprintf(str,
				"Transmission Buffer: %d bytes data \r\n", loRa->len);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7c5b      	ldrb	r3, [r3, #17]
		u1->tx_len = (uint8_t) sprintf(str,
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	4965      	ldr	r1, [pc, #404]	; (8002c38 <printLoRaStatus+0x218>)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f003 ff17 	bl	80068d8 <siprintf>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	b2d9      	uxtb	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2264      	movs	r2, #100	; 0x64
 8002ab2:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f001 fe93 	bl	80047e2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e017      	b.n	8002af2 <printLoRaStatus+0xd2>
			u1->tx_len = (uint8_t) sprintf(str, "%02X", loRa->buffer[i]);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	212b      	movs	r1, #43	; 0x2b
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	18d3      	adds	r3, r2, r3
 8002aca:	185b      	adds	r3, r3, r1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	001a      	movs	r2, r3
 8002ad0:	495a      	ldr	r1, [pc, #360]	; (8002c3c <printLoRaStatus+0x21c>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f003 feff 	bl	80068d8 <siprintf>
 8002ada:	0003      	movs	r3, r0
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2264      	movs	r2, #100	; 0x64
 8002ae2:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f001 fe7b 	bl	80047e2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	7c5b      	ldrb	r3, [r3, #17]
 8002af6:	001a      	movs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4293      	cmp	r3, r2
 8002afc:	dbe1      	blt.n	8002ac2 <printLoRaStatus+0xa2>
		}
		writeTxReg('\n');
 8002afe:	200a      	movs	r0, #10
 8002b00:	f001 fdde 	bl	80046c0 <writeTxReg>
		break;
 8002b04:	e088      	b.n	8002c18 <printLoRaStatus+0x1f8>
	case TX_MODE:
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
				(loRa->mode == MASTER_SENDER) ? "Master Sender" :
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2229      	movs	r2, #41	; 0x29
 8002b0a:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d008      	beq.n	8002b22 <printLoRaStatus+0x102>
				(loRa->mode == SLAVE_SENDER) ? "Slave Sender" : "Unknown");
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2229      	movs	r2, #41	; 0x29
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <printLoRaStatus+0xfe>
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <printLoRaStatus+0x220>)
 8002b1c:	e002      	b.n	8002b24 <printLoRaStatus+0x104>
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <printLoRaStatus+0x224>)
 8002b20:	e000      	b.n	8002b24 <printLoRaStatus+0x104>
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <printLoRaStatus+0x228>)
 8002b24:	4949      	ldr	r1, [pc, #292]	; (8002c4c <printLoRaStatus+0x22c>)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	001a      	movs	r2, r3
 8002b2a:	f003 fed5 	bl	80068d8 <siprintf>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	b2d9      	uxtb	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f001 fe51 	bl	80047e2 <writeTx>
		break;
 8002b40:	e06a      	b.n	8002c18 <printLoRaStatus+0x1f8>
	case RX_DONE:
		u1->tx_len = (uint8_t) sprintf(str, "Reception Done: %d bytes\r\n",
				loRa->len);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	7c5b      	ldrb	r3, [r3, #17]
		u1->tx_len = (uint8_t) sprintf(str, "Reception Done: %d bytes\r\n",
 8002b46:	001a      	movs	r2, r3
 8002b48:	4941      	ldr	r1, [pc, #260]	; (8002c50 <printLoRaStatus+0x230>)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f003 fec3 	bl	80068d8 <siprintf>
 8002b52:	0003      	movs	r3, r0
 8002b54:	b2d9      	uxtb	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2264      	movs	r2, #100	; 0x64
 8002b5a:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f001 fe3f 	bl	80047e2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	e017      	b.n	8002b9a <printLoRaStatus+0x17a>
			u1->tx_len = (uint8_t) sprintf(str, "%02X", loRa->buffer[i]);
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	212b      	movs	r1, #43	; 0x2b
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	185b      	adds	r3, r3, r1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	001a      	movs	r2, r3
 8002b78:	4930      	ldr	r1, [pc, #192]	; (8002c3c <printLoRaStatus+0x21c>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f003 feab 	bl	80068d8 <siprintf>
 8002b82:	0003      	movs	r3, r0
 8002b84:	b2d9      	uxtb	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2264      	movs	r2, #100	; 0x64
 8002b8a:	5499      	strb	r1, [r3, r2]
			writeTx(u1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f001 fe27 	bl	80047e2 <writeTx>
		for (int i = 0; i < loRa->len; i++) {
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	7c5b      	ldrb	r3, [r3, #17]
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	dbe1      	blt.n	8002b6a <printLoRaStatus+0x14a>
		}
		if (loRa->len > 0) {
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	7c5b      	ldrb	r3, [r3, #17]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d033      	beq.n	8002c16 <printLoRaStatus+0x1f6>
			writeTxReg('\n');
 8002bae:	200a      	movs	r0, #10
 8002bb0:	f001 fd86 	bl	80046c0 <writeTxReg>
		}
		break;
 8002bb4:	e02f      	b.n	8002c16 <printLoRaStatus+0x1f6>
	case RX_MODE:
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
				(loRa->mode == MASTER_RECEIVER) ? "Master Receiver" :
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2229      	movs	r2, #41	; 0x29
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d008      	beq.n	8002bd2 <printLoRaStatus+0x1b2>
				(loRa->mode == SLAVE_RECEIVER) ? "Slave Receiver" : "Unknown");
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2229      	movs	r2, #41	; 0x29
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <printLoRaStatus+0x1ae>
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <printLoRaStatus+0x234>)
 8002bcc:	e002      	b.n	8002bd4 <printLoRaStatus+0x1b4>
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <printLoRaStatus+0x224>)
 8002bd0:	e000      	b.n	8002bd4 <printLoRaStatus+0x1b4>
		u1->tx_len = (uint8_t) sprintf(str, "%s Mode\r\n",
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <printLoRaStatus+0x238>)
 8002bd4:	491d      	ldr	r1, [pc, #116]	; (8002c4c <printLoRaStatus+0x22c>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	f003 fe7d 	bl	80068d8 <siprintf>
 8002bde:	0003      	movs	r3, r0
 8002be0:	b2d9      	uxtb	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2264      	movs	r2, #100	; 0x64
 8002be6:	5499      	strb	r1, [r3, r2]
		writeTx(u1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f001 fdf9 	bl	80047e2 <writeTx>
		break;
 8002bf0:	e012      	b.n	8002c18 <printLoRaStatus+0x1f8>
	case CRC_ERROR_ACTIVATION:
		u1->tx_len = (uint8_t) sprintf(str,
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <printLoRaStatus+0x23c>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f003 fe6d 	bl	80068d8 <siprintf>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	b2d9      	uxtb	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2264      	movs	r2, #100	; 0x64
 8002c06:	5499      	strb	r1, [r3, r2]
				"Reception Fail: CRC error activation\r\n");
		writeTx(u1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f001 fde9 	bl	80047e2 <writeTx>
		break;
 8002c10:	e002      	b.n	8002c18 <printLoRaStatus+0x1f8>
	default:
		break;
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	e000      	b.n	8002c18 <printLoRaStatus+0x1f8>
		break;
 8002c16:	46c0      	nop			; (mov r8, r8)
	}
	cleanTx(u1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f001 fe09 	bl	8004832 <cleanTx>
 8002c20:	e000      	b.n	8002c24 <printLoRaStatus+0x204>
		return;
 8002c22:	46c0      	nop			; (mov r8, r8)
}
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	08007368 	.word	0x08007368
 8002c30:	08007168 	.word	0x08007168
 8002c34:	08007190 	.word	0x08007190
 8002c38:	080071ac 	.word	0x080071ac
 8002c3c:	08007110 	.word	0x08007110
 8002c40:	080071d4 	.word	0x080071d4
 8002c44:	080071e4 	.word	0x080071e4
 8002c48:	080071ec 	.word	0x080071ec
 8002c4c:	080071fc 	.word	0x080071fc
 8002c50:	08007208 	.word	0x08007208
 8002c54:	08007224 	.word	0x08007224
 8002c58:	08007234 	.word	0x08007234
 8002c5c:	08007244 	.word	0x08007244

08002c60 <parseLoRaSlave>:

		rs485->idQuery = 0;
	}
}

void parseLoRaSlave(RDSS_t *rs485, SX1278_t *loRa) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	fillValidBuffer(&*rs485, loRa->buffer, loRa->len);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	332b      	adds	r3, #43	; 0x2b
 8002c6e:	0019      	movs	r1, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	7c5a      	ldrb	r2, [r3, #17]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 fa32 	bl	80040e0 <fillValidBuffer>
	memset(loRa->buffer, 0, sizeof(loRa->buffer));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	332b      	adds	r3, #43	; 0x2b
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	2100      	movs	r1, #0
 8002c84:	0018      	movs	r0, r3
 8002c86:	f003 fd2a 	bl	80066de <memset>
	loRa->len = 0;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	745a      	strb	r2, [r3, #17]
	if (rs485->status == DATA_OK) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223b      	movs	r2, #59	; 0x3b
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11d      	bne.n	8002cd6 <parseLoRaSlave+0x76>
		rs485->cmd = rs485->buffer[CMD_INDEX];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	795a      	ldrb	r2, [r3, #5]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	701a      	strb	r2, [r3, #0]
		rs485->idReceived = rs485->buffer[MODULE_ID_INDEX];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7919      	ldrb	r1, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2239      	movs	r2, #57	; 0x39
 8002caa:	5499      	strb	r1, [r3, r2]
		if (rs485->idReceived == rs485->id)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2239      	movs	r2, #57	; 0x39
 8002cb0:	5c9a      	ldrb	r2, [r3, r2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	213a      	movs	r1, #58	; 0x3a
 8002cb6:	5c5b      	ldrb	r3, [r3, r1]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <parseLoRaSlave+0x66>
			rs485->status = LORA_RECEIVE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223b      	movs	r2, #59	; 0x3b
 8002cc0:	210b      	movs	r1, #11
 8002cc2:	5499      	strb	r1, [r3, r2]
 8002cc4:	e003      	b.n	8002cce <parseLoRaSlave+0x6e>
		else
			rs485->status = WRONG_MODULE_ID;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	223b      	movs	r2, #59	; 0x3b
 8002cca:	2105      	movs	r1, #5
 8002ccc:	5499      	strb	r1, [r3, r2]

		rs485->idQuery = 0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]
	}
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b002      	add	sp, #8
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <parseUartSlave>:
		rdss->idQuery = rdss->idReceived;
		rdss->status = LORA_SEND;
	}
}

void parseUartSlave(UART1_t *u1, RDSS_t *rdss) {
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
	u1->isReady = false;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	226c      	movs	r2, #108	; 0x6c
 8002cec:	2100      	movs	r1, #0
 8002cee:	5499      	strb	r1, [r3, r2]
	fillValidBuffer(rdss, u1->rx, u1->rxLen);
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2265      	movs	r2, #101	; 0x65
 8002cf6:	5c9a      	ldrb	r2, [r3, r2]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f001 f9f0 	bl	80040e0 <fillValidBuffer>
	if (rdss->status == DATA_OK) {
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	223b      	movs	r2, #59	; 0x3b
 8002d04:	5c9b      	ldrb	r3, [r3, r2]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <parseUartSlave+0x60>
		rdss->cmd = rdss->buffer[CMD_INDEX];
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	795a      	ldrb	r2, [r3, #5]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	701a      	strb	r2, [r3, #0]
		rdss->idReceived = rdss->buffer[MODULE_ID_INDEX];
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7919      	ldrb	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2239      	movs	r2, #57	; 0x39
 8002d1a:	5499      	strb	r1, [r3, r2]
		if (rdss->idReceived == rdss->id) {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2239      	movs	r2, #57	; 0x39
 8002d20:	5c9a      	ldrb	r2, [r3, r2]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	213a      	movs	r1, #58	; 0x3a
 8002d26:	5c5b      	ldrb	r3, [r3, r1]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d104      	bne.n	8002d36 <parseUartSlave+0x58>
			rdss->status = UART_VALID;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	223b      	movs	r2, #59	; 0x3b
 8002d30:	210e      	movs	r1, #14
 8002d32:	5499      	strb	r1, [r3, r2]
 8002d34:	e003      	b.n	8002d3e <parseUartSlave+0x60>
		} else {
			rdss->status = WRONG_MODULE_ID;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	223b      	movs	r2, #59	; 0x3b
 8002d3a:	2105      	movs	r1, #5
 8002d3c:	5499      	strb	r1, [r3, r2]
		}
	}
	if (u1->rx[CMD_INDEX] == QUERY_MODULE_ID
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	78db      	ldrb	r3, [r3, #3]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d003      	beq.n	8002d4e <parseUartSlave+0x70>
			|| u1->rx[CMD_INDEX] == SET_MODULE_ID) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	78db      	ldrb	r3, [r3, #3]
 8002d4a:	2b90      	cmp	r3, #144	; 0x90
 8002d4c:	d113      	bne.n	8002d76 <parseUartSlave+0x98>
		rdss->status = UART_VALID;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	223b      	movs	r2, #59	; 0x3b
 8002d52:	210e      	movs	r1, #14
 8002d54:	5499      	strb	r1, [r3, r2]
		memcpy(rdss->buffer, u1->rx, sizeof(u1->rx));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	2232      	movs	r2, #50	; 0x32
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f003 fcb4 	bl	80066cc <memcpy>
		rdss->cmd = rdss->buffer[CMD_INDEX];
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	795a      	ldrb	r2, [r3, #5]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	701a      	strb	r2, [r3, #0]
		rdss->len = u1->rxLen;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2265      	movs	r2, #101	; 0x65
 8002d70:	5c9a      	ldrb	r2, [r3, r2]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	705a      	strb	r2, [r3, #1]
	}

	memset(u1->rx, 0, sizeof(u1->rx));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2232      	movs	r2, #50	; 0x32
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f003 fcae 	bl	80066de <memset>
	u1->rxLen = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2265      	movs	r2, #101	; 0x65
 8002d86:	2100      	movs	r1, #0
 8002d88:	5499      	strb	r1, [r3, r2]
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <sendLoRaMasterQuery>:

void sendLoRaMasterQuery(RDSS_t *rs485, SX1278_t *loRa) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
	if (rs485->len != LTEL_QUERY_LENGTH)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	785b      	ldrb	r3, [r3, #1]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d11c      	bne.n	8002dde <sendLoRaMasterQuery+0x4c>
		return;
	rs485->idQuery = rs485->buffer[MODULE_ID_INDEX];
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7919      	ldrb	r1, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2238      	movs	r2, #56	; 0x38
 8002dac:	5499      	strb	r1, [r3, r2]
	loRa->len = rs485->len;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	785a      	ldrb	r2, [r3, #1]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	745a      	strb	r2, [r3, #17]
	updateMode(&*loRa, MASTER_SENDER);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2102      	movs	r1, #2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fe fca8 	bl	8001710 <updateMode>
	memcpy(loRa->buffer, rs485->buffer, rs485->len);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	332b      	adds	r3, #43	; 0x2b
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	1c99      	adds	r1, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	001a      	movs	r2, r3
 8002dd0:	f003 fc7c 	bl	80066cc <memcpy>
	transmit(&*loRa);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe feb3 	bl	8001b42 <transmit>
 8002ddc:	e000      	b.n	8002de0 <sendLoRaMasterQuery+0x4e>
		return;
 8002dde:	46c0      	nop			; (mov r8, r8)
}
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <setBufferWithLtelCmd>:

uint8_t setBufferWithLtelCmd(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Vlad_t *vlad) {
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8002df6:	2317      	movs	r3, #23
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]

	if (rdss->len < LTEL_QUERY_LENGTH || rdss->len > LTEL_SET_LENGTH)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d903      	bls.n	8002e0e <setBufferWithLtelCmd+0x26>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	2b0d      	cmp	r3, #13
 8002e0c:	d901      	bls.n	8002e12 <setBufferWithLtelCmd+0x2a>
		return 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e232      	b.n	8003278 <setBufferWithLtelCmd+0x490>

	index = setRdssStartData(rdss, buffer);
 8002e12:	2317      	movs	r3, #23
 8002e14:	18fc      	adds	r4, r7, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f001 f9db 	bl	80041d8 <setRdssStartData>
 8002e22:	0003      	movs	r3, r0
 8002e24:	7023      	strb	r3, [r4, #0]

	switch (rdss->cmd) {
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b25      	cmp	r3, #37	; 0x25
 8002e2c:	dc14      	bgt.n	8002e58 <setBufferWithLtelCmd+0x70>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	da09      	bge.n	8002e46 <setBufferWithLtelCmd+0x5e>
		loRa->codingRate = rdss->buffer[index++];
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
		break;

	default:
		break;
 8002e32:	e200      	b.n	8003236 <setBufferWithLtelCmd+0x44e>
	switch (rdss->cmd) {
 8002e34:	3b90      	subs	r3, #144	; 0x90
 8002e36:	2b25      	cmp	r3, #37	; 0x25
 8002e38:	d900      	bls.n	8002e3c <setBufferWithLtelCmd+0x54>
 8002e3a:	e1fc      	b.n	8003236 <setBufferWithLtelCmd+0x44e>
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	4bec      	ldr	r3, [pc, #944]	; (80031f0 <setBufferWithLtelCmd+0x408>)
 8002e40:	18d3      	adds	r3, r2, r3
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	469f      	mov	pc, r3
 8002e46:	3b10      	subs	r3, #16
 8002e48:	2b15      	cmp	r3, #21
 8002e4a:	d900      	bls.n	8002e4e <setBufferWithLtelCmd+0x66>
 8002e4c:	e1f3      	b.n	8003236 <setBufferWithLtelCmd+0x44e>
 8002e4e:	009a      	lsls	r2, r3, #2
 8002e50:	4be8      	ldr	r3, [pc, #928]	; (80031f4 <setBufferWithLtelCmd+0x40c>)
 8002e52:	18d3      	adds	r3, r2, r3
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	469f      	mov	pc, r3
 8002e58:	2bb5      	cmp	r3, #181	; 0xb5
 8002e5a:	dd00      	ble.n	8002e5e <setBufferWithLtelCmd+0x76>
 8002e5c:	e1eb      	b.n	8003236 <setBufferWithLtelCmd+0x44e>
 8002e5e:	2b90      	cmp	r3, #144	; 0x90
 8002e60:	dae8      	bge.n	8002e34 <setBufferWithLtelCmd+0x4c>
		break;
 8002e62:	e1e8      	b.n	8003236 <setBufferWithLtelCmd+0x44e>
		index += encodeVladToLtel(buffer + index, vlad);
 8002e64:	2417      	movs	r4, #23
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	0011      	movs	r1, r2
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 fca0 	bl	80037b8 <encodeVladToLtel>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	193a      	adds	r2, r7, r4
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	188a      	adds	r2, r1, r2
 8002e84:	701a      	strb	r2, [r3, #0]
		break;
 8002e86:	e1d7      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 4;
 8002e88:	2017      	movs	r0, #23
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	183a      	adds	r2, r7, r0
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	7011      	strb	r1, [r2, #0]
 8002e94:	001a      	movs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 8002e9e:	0004      	movs	r4, r0
 8002ea0:	183b      	adds	r3, r7, r0
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	18d2      	adds	r2, r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0019      	movs	r1, r3
 8002eae:	0010      	movs	r0, r2
 8002eb0:	f001 fa16 	bl	80042e0 <freqEncode>
		index += sizeof(loRa->dlFreq);
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	183a      	adds	r2, r7, r0
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	3204      	adds	r2, #4
 8002ebe:	701a      	strb	r2, [r3, #0]
		index++;
 8002ec0:	183b      	adds	r3, r7, r0
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	3201      	adds	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
		break;
 8002eca:	e1b5      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 4;
 8002ecc:	2017      	movs	r0, #23
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	183a      	adds	r2, r7, r0
 8002ed4:	1c59      	adds	r1, r3, #1
 8002ed6:	7011      	strb	r1, [r2, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 8002ee2:	0004      	movs	r4, r0
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	18d2      	adds	r2, r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	f001 f9f4 	bl	80042e0 <freqEncode>
		index += sizeof(loRa->upFreq);
 8002ef8:	0020      	movs	r0, r4
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	183a      	adds	r2, r7, r0
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	3204      	adds	r2, #4
 8002f02:	701a      	strb	r2, [r3, #0]
		index++;
 8002f04:	183b      	adds	r3, r7, r0
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
		break;
 8002f0e:	e193      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 1;
 8002f10:	2017      	movs	r0, #23
 8002f12:	183b      	adds	r3, r7, r0
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	183a      	adds	r2, r7, r0
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	7011      	strb	r1, [r2, #0]
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	189b      	adds	r3, r3, r2
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7b5a      	ldrb	r2, [r3, #13]
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	1839      	adds	r1, r7, r0
 8002f30:	1c58      	adds	r0, r3, #1
 8002f32:	7008      	strb	r0, [r1, #0]
 8002f34:	0019      	movs	r1, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	185b      	adds	r3, r3, r1
 8002f3a:	3a06      	subs	r2, #6
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]
		break;
 8002f40:	e17a      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 1;
 8002f42:	2017      	movs	r0, #23
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	183a      	adds	r2, r7, r0
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	7011      	strb	r1, [r2, #0]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 8002f58:	183b      	adds	r3, r7, r0
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	183a      	adds	r2, r7, r0
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	7011      	strb	r1, [r2, #0]
 8002f62:	001a      	movs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	7bd2      	ldrb	r2, [r2, #15]
 8002f6c:	701a      	strb	r2, [r3, #0]
		break;
 8002f6e:	e163      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 1;
 8002f70:	2017      	movs	r0, #23
 8002f72:	183b      	adds	r3, r7, r0
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	183a      	adds	r2, r7, r0
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	7011      	strb	r1, [r2, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7b9a      	ldrb	r2, [r3, #14]
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	1839      	adds	r1, r7, r0
 8002f90:	1c58      	adds	r0, r3, #1
 8002f92:	7008      	strb	r0, [r1, #0]
 8002f94:	0019      	movs	r1, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	185b      	adds	r3, r3, r1
 8002f9a:	3201      	adds	r2, #1
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
		break;
 8002fa0:	e14a      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		index = 0;
 8002fa2:	2017      	movs	r0, #23
 8002fa4:	183b      	adds	r3, r7, r0
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = LTEL_START_MARK;
 8002faa:	183b      	adds	r3, r7, r0
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	183a      	adds	r2, r7, r0
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	7011      	strb	r1, [r2, #0]
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	189b      	adds	r3, r3, r2
 8002fba:	227e      	movs	r2, #126	; 0x7e
 8002fbc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = VLADR;
 8002fbe:	183b      	adds	r3, r7, r0
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	183a      	adds	r2, r7, r0
 8002fc4:	1c59      	adds	r1, r3, #1
 8002fc6:	7011      	strb	r1, [r2, #0]
 8002fc8:	001a      	movs	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	2205      	movs	r2, #5
 8002fd0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8002fd2:	183b      	adds	r3, r7, r0
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	183a      	adds	r2, r7, r0
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	7011      	strb	r1, [r2, #0]
 8002fdc:	001a      	movs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	189b      	adds	r3, r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	213a      	movs	r1, #58	; 0x3a
 8002fe6:	5c52      	ldrb	r2, [r2, r1]
 8002fe8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8002fea:	183b      	adds	r3, r7, r0
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	183a      	adds	r2, r7, r0
 8002ff0:	1c59      	adds	r1, r3, #1
 8002ff2:	7011      	strb	r1, [r2, #0]
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8002ffe:	183b      	adds	r3, r7, r0
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	183a      	adds	r2, r7, r0
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	7011      	strb	r1, [r2, #0]
 8003008:	001a      	movs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	189b      	adds	r3, r3, r2
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8003012:	183b      	adds	r3, r7, r0
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	183a      	adds	r2, r7, r0
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	7011      	strb	r1, [r2, #0]
 800301c:	001a      	movs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	189b      	adds	r3, r3, r2
 8003022:	2202      	movs	r2, #2
 8003024:	701a      	strb	r2, [r3, #0]
		buffer[index++] = VLADR;
 8003026:	183b      	adds	r3, r7, r0
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	183a      	adds	r2, r7, r0
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	7011      	strb	r1, [r2, #0]
 8003030:	001a      	movs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	189b      	adds	r3, r3, r2
 8003036:	2205      	movs	r2, #5
 8003038:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 800303a:	183b      	adds	r3, r7, r0
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	183a      	adds	r2, r7, r0
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	7011      	strb	r1, [r2, #0]
 8003044:	001a      	movs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	189b      	adds	r3, r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	213a      	movs	r1, #58	; 0x3a
 800304e:	5c52      	ldrb	r2, [r2, r1]
 8003050:	701a      	strb	r2, [r3, #0]
		break;
 8003052:	e0f1      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		vlad->function = rdss->buffer[6];
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	7a19      	ldrb	r1, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2231      	movs	r2, #49	; 0x31
 800305c:	5499      	strb	r1, [r3, r2]
		vlad->id = rdss->buffer[7];
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	7a59      	ldrb	r1, [r3, #9]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2230      	movs	r2, #48	; 0x30
 8003066:	5499      	strb	r1, [r3, r2]
		rdss->id = vlad->id;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2230      	movs	r2, #48	; 0x30
 800306c:	5c99      	ldrb	r1, [r3, r2]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	223a      	movs	r2, #58	; 0x3a
 8003072:	5499      	strb	r1, [r3, r2]
		index = setRdssStartData(rdss, buffer);
 8003074:	2517      	movs	r5, #23
 8003076:	197c      	adds	r4, r7, r5
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f001 f8aa 	bl	80041d8 <setRdssStartData>
 8003084:	0003      	movs	r3, r0
 8003086:	7023      	strb	r3, [r4, #0]
		buffer[index++] = VLADR;
 8003088:	0028      	movs	r0, r5
 800308a:	183b      	adds	r3, r7, r0
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	183a      	adds	r2, r7, r0
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	7011      	strb	r1, [r2, #0]
 8003094:	001a      	movs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	189b      	adds	r3, r3, r2
 800309a:	2205      	movs	r2, #5
 800309c:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	183a      	adds	r2, r7, r0
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	7011      	strb	r1, [r2, #0]
 80030a8:	001a      	movs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	189b      	adds	r3, r3, r2
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	213a      	movs	r1, #58	; 0x3a
 80030b2:	5c52      	ldrb	r2, [r2, r1]
 80030b4:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE0_START_ADDR, (uint8_t*) &(vlad->function), 3, 1);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3331      	adds	r3, #49	; 0x31
 80030ba:	0019      	movs	r1, r3
 80030bc:	2301      	movs	r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7fe fe83 	bl	8001dcc <savePage>
		savePage(CAT24C02_PAGE0_START_ADDR, (uint8_t*) &(vlad->id), 4, 1);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3330      	adds	r3, #48	; 0x30
 80030ca:	0019      	movs	r1, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	2204      	movs	r2, #4
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fe fe7b 	bl	8001dcc <savePage>
		break;
 80030d6:	e0af      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 4;
 80030d8:	2017      	movs	r0, #23
 80030da:	183b      	adds	r3, r7, r0
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	183a      	adds	r2, r7, r0
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	7011      	strb	r1, [r2, #0]
 80030e4:	001a      	movs	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	2204      	movs	r2, #4
 80030ec:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buffer + index);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	0004      	movs	r4, r0
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	18d3      	adds	r3, r2, r3
 80030fa:	0018      	movs	r0, r3
 80030fc:	f001 f8c2 	bl	8004284 <freqDecode>
 8003100:	0002      	movs	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 8003106:	193b      	adds	r3, r7, r4
 8003108:	193a      	adds	r2, r7, r4
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	3204      	adds	r2, #4
 800310e:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->upFreq), 0, 4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3308      	adds	r3, #8
 8003114:	0019      	movs	r1, r3
 8003116:	2304      	movs	r3, #4
 8003118:	2200      	movs	r2, #0
 800311a:	2010      	movs	r0, #16
 800311c:	f7fe fe56 	bl	8001dcc <savePage>
		break;
 8003120:	e08a      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 4;
 8003122:	2017      	movs	r0, #23
 8003124:	183b      	adds	r3, r7, r0
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	183a      	adds	r2, r7, r0
 800312a:	1c59      	adds	r1, r3, #1
 800312c:	7011      	strb	r1, [r2, #0]
 800312e:	001a      	movs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	189b      	adds	r3, r3, r2
 8003134:	2204      	movs	r2, #4
 8003136:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buffer + index);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	0004      	movs	r4, r0
 800313e:	183b      	adds	r3, r7, r0
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	18d3      	adds	r3, r2, r3
 8003144:	0018      	movs	r0, r3
 8003146:	f001 f89d 	bl	8004284 <freqDecode>
 800314a:	0002      	movs	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 8003150:	193b      	adds	r3, r7, r4
 8003152:	193a      	adds	r2, r7, r4
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	3204      	adds	r2, #4
 8003158:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->dlFreq), 4, 4);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1d19      	adds	r1, r3, #4
 800315e:	2304      	movs	r3, #4
 8003160:	2204      	movs	r2, #4
 8003162:	2010      	movs	r0, #16
 8003164:	f7fe fe32 	bl	8001dcc <savePage>
		break;
 8003168:	e066      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 1;
 800316a:	2017      	movs	r0, #23
 800316c:	183b      	adds	r3, r7, r0
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	183a      	adds	r2, r7, r0
 8003172:	1c59      	adds	r1, r3, #1
 8003174:	7011      	strb	r1, [r2, #0]
 8003176:	001a      	movs	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	189b      	adds	r3, r3, r2
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buffer[index++] - 1;
 8003180:	183b      	adds	r3, r7, r0
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	183a      	adds	r2, r7, r0
 8003186:	1c59      	adds	r1, r3, #1
 8003188:	7011      	strb	r1, [r2, #0]
 800318a:	001a      	movs	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	189b      	adds	r3, r3, r2
 8003190:	789b      	ldrb	r3, [r3, #2]
 8003192:	3b01      	subs	r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	739a      	strb	r2, [r3, #14]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->bandwidth), 1, 1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	330e      	adds	r3, #14
 800319e:	0019      	movs	r1, r3
 80031a0:	2301      	movs	r3, #1
 80031a2:	2201      	movs	r2, #1
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fe fe11 	bl	8001dcc <savePage>
		break;
 80031aa:	e045      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		buffer[index++] = 1;
 80031ac:	2017      	movs	r0, #23
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	183a      	adds	r2, r7, r0
 80031b4:	1c59      	adds	r1, r3, #1
 80031b6:	7011      	strb	r1, [r2, #0]
 80031b8:	001a      	movs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buffer[index++] + 6;
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	183a      	adds	r2, r7, r0
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	7011      	strb	r1, [r2, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	789b      	ldrb	r3, [r3, #2]
 80031d4:	3306      	adds	r3, #6
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	739a      	strb	r2, [r3, #14]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->spreadFactor), 0, 1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	330d      	adds	r3, #13
 80031e0:	0019      	movs	r1, r3
 80031e2:	2301      	movs	r3, #1
 80031e4:	2200      	movs	r2, #0
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fe fdf0 	bl	8001dcc <savePage>
		break;
 80031ec:	e024      	b.n	8003238 <setBufferWithLtelCmd+0x450>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	0800738c 	.word	0x0800738c
 80031f4:	08007424 	.word	0x08007424
		buffer[index++] = 1;
 80031f8:	2017      	movs	r0, #23
 80031fa:	183b      	adds	r3, r7, r0
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	183a      	adds	r2, r7, r0
 8003200:	1c59      	adds	r1, r3, #1
 8003202:	7011      	strb	r1, [r2, #0]
 8003204:	001a      	movs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	189b      	adds	r3, r3, r2
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buffer[index++];
 800320e:	183b      	adds	r3, r7, r0
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	183a      	adds	r2, r7, r0
 8003214:	1c59      	adds	r1, r3, #1
 8003216:	7011      	strb	r1, [r2, #0]
 8003218:	001a      	movs	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	189b      	adds	r3, r3, r2
 800321e:	789a      	ldrb	r2, [r3, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	73da      	strb	r2, [r3, #15]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	330f      	adds	r3, #15
 8003228:	0019      	movs	r1, r3
 800322a:	2301      	movs	r3, #1
 800322c:	2202      	movs	r2, #2
 800322e:	2000      	movs	r0, #0
 8003230:	f7fe fdcc 	bl	8001dcc <savePage>
		break;
 8003234:	e000      	b.n	8003238 <setBufferWithLtelCmd+0x450>
		break;
 8003236:	46c0      	nop			; (mov r8, r8)
	}
	index += setCrc(buffer, index);
 8003238:	2417      	movs	r4, #23
 800323a:	193b      	adds	r3, r7, r4
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f000 ff92 	bl	800416c <setCrc>
 8003248:	0003      	movs	r3, r0
 800324a:	0019      	movs	r1, r3
 800324c:	0020      	movs	r0, r4
 800324e:	183b      	adds	r3, r7, r0
 8003250:	183a      	adds	r2, r7, r0
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	188a      	adds	r2, r1, r2
 8003256:	701a      	strb	r2, [r3, #0]
	buffer[index++] = LTEL_END_MARK;
 8003258:	183b      	adds	r3, r7, r0
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	183a      	adds	r2, r7, r0
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	7011      	strb	r1, [r2, #0]
 8003262:	001a      	movs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	189b      	adds	r3, r3, r2
 8003268:	227f      	movs	r2, #127	; 0x7f
 800326a:	701a      	strb	r2, [r3, #0]
	rdss->status = UART_SEND;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	223b      	movs	r2, #59	; 0x3b
 8003270:	210d      	movs	r1, #13
 8003272:	5499      	strb	r1, [r3, r2]

	return index;
 8003274:	183b      	adds	r3, r7, r0
 8003276:	781b      	ldrb	r3, [r3, #0]
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bdb0      	pop	{r4, r5, r7, pc}

08003280 <processReceivedLoraCommand>:

uint8_t processReceivedLoraCommand(RDSS_t *rdss, SX1278_t *loRa, Vlad_t *vlad,
		UART1_t *u1) {
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]

	loRa->len = setBufferWithLtelCmd(loRa->buffer, rdss, loRa, vlad);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	332b      	adds	r3, #43	; 0x2b
 8003292:	0018      	movs	r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	f7ff fda5 	bl	8002de8 <setBufferWithLtelCmd>
 800329e:	0003      	movs	r3, r0
 80032a0:	001a      	movs	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	745a      	strb	r2, [r3, #17]
	if (rdss->cmd == SET_VLAD_ATTENUATION) {
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b12      	cmp	r3, #18
 80032ac:	d157      	bne.n	800335e <processReceivedLoraCommand+0xde>
		uint8_t attenuationCommand[2];
		uint8_t i2cSlaveAddress = 0x08;
 80032ae:	2617      	movs	r6, #23
 80032b0:	19bb      	adds	r3, r7, r6
 80032b2:	2208      	movs	r2, #8
 80032b4:	701a      	strb	r2, [r3, #0]
		uint8_t index = setRdssStartData(&*rdss, loRa->buffer);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	332b      	adds	r3, #43	; 0x2b
 80032ba:	001a      	movs	r2, r3
 80032bc:	2516      	movs	r5, #22
 80032be:	197c      	adds	r4, r7, r5
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	0011      	movs	r1, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 ff87 	bl	80041d8 <setRdssStartData>
 80032ca:	0003      	movs	r3, r0
 80032cc:	7023      	strb	r3, [r4, #0]
		attenuationCommand[0] = SET_VLAD_ATTENUATION;
 80032ce:	2114      	movs	r1, #20
 80032d0:	187b      	adds	r3, r7, r1
 80032d2:	2212      	movs	r2, #18
 80032d4:	701a      	strb	r2, [r3, #0]
		attenuationCommand[1] = rdss->buffer[6];
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	7a1a      	ldrb	r2, [r3, #8]
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	705a      	strb	r2, [r3, #1]
		vlad->is_attenuation_updated = i2c1MasterTransmit(i2cSlaveAddress,
 80032de:	1879      	adds	r1, r7, r1
 80032e0:	19bb      	adds	r3, r7, r6
 80032e2:	7818      	ldrb	r0, [r3, #0]
 80032e4:	230a      	movs	r3, #10
 80032e6:	2202      	movs	r2, #2
 80032e8:	f7fe fe50 	bl	8001f8c <i2c1MasterTransmit>
 80032ec:	0003      	movs	r3, r0
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	222f      	movs	r2, #47	; 0x2f
 80032f4:	5499      	strb	r1, [r3, r2]
				attenuationCommand, sizeof(attenuationCommand), 10);
		loRa->buffer[index++] = vlad->is_attenuation_updated;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	222f      	movs	r2, #47	; 0x2f
 80032fa:	5c98      	ldrb	r0, [r3, r2]
 80032fc:	197b      	adds	r3, r7, r5
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	197a      	adds	r2, r7, r5
 8003302:	1c59      	adds	r1, r3, #1
 8003304:	7011      	strb	r1, [r2, #0]
 8003306:	0019      	movs	r1, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	222b      	movs	r2, #43	; 0x2b
 800330c:	185b      	adds	r3, r3, r1
 800330e:	189b      	adds	r3, r3, r2
 8003310:	1c02      	adds	r2, r0, #0
 8003312:	701a      	strb	r2, [r3, #0]
		index += setCrc(loRa->buffer, index);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	332b      	adds	r3, #43	; 0x2b
 8003318:	001a      	movs	r2, r3
 800331a:	197b      	adds	r3, r7, r5
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	0019      	movs	r1, r3
 8003320:	0010      	movs	r0, r2
 8003322:	f000 ff23 	bl	800416c <setCrc>
 8003326:	0003      	movs	r3, r0
 8003328:	0019      	movs	r1, r3
 800332a:	197b      	adds	r3, r7, r5
 800332c:	197a      	adds	r2, r7, r5
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	188a      	adds	r2, r1, r2
 8003332:	701a      	strb	r2, [r3, #0]
		loRa->buffer[index++] = LTEL_END_MARK;
 8003334:	197b      	adds	r3, r7, r5
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	0028      	movs	r0, r5
 800333a:	197a      	adds	r2, r7, r5
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	7011      	strb	r1, [r2, #0]
 8003340:	0019      	movs	r1, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	222b      	movs	r2, #43	; 0x2b
 8003346:	185b      	adds	r3, r3, r1
 8003348:	189b      	adds	r3, r3, r2
 800334a:	227f      	movs	r2, #127	; 0x7f
 800334c:	701a      	strb	r2, [r3, #0]
		loRa->len = index;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	183a      	adds	r2, r7, r0
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	745a      	strb	r2, [r3, #17]
		loRa->status = TX_BUFFER_READY;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	222a      	movs	r2, #42	; 0x2a
 800335a:	2108      	movs	r1, #8
 800335c:	5499      	strb	r1, [r3, r2]
	}
	printLoRaStatus(u1, loRa);
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f7ff fb5b 	bl	8002a20 <printLoRaStatus>
	updateMode(loRa, SLAVE_SENDER);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2100      	movs	r1, #0
 800336e:	0018      	movs	r0, r3
 8003370:	f7fe f9ce 	bl	8001710 <updateMode>
	printStatus(u1, &*rdss);
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff f97a 	bl	8002674 <printStatus>
	transmit(loRa);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0018      	movs	r0, r3
 8003384:	f7fe fbdd 	bl	8001b42 <transmit>
	printLoRaStatus(u1, loRa);
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff fb46 	bl	8002a20 <printLoRaStatus>
	reinit(&*rdss);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 feca 	bl	8004130 <reinit>
	updateMode(loRa, SLAVE_RECEIVER);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2101      	movs	r1, #1
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fe f9b5 	bl	8001710 <updateMode>
	printLoRaStatus(u1, loRa);
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff fb37 	bl	8002a20 <printLoRaStatus>
	return index;
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <processReceivedLoraCommand+0x140>)
 80033b4:	b2db      	uxtb	r3, r3
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b007      	add	sp, #28
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	08006669 	.word	0x08006669

080033c4 <processReceivedUartCommand>:

void processReceivedUartCommand(Vlad_t *vlad, UART1_t *u1, RDSS_t *rdss,
		SX1278_t *loRa) {
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
	u1->tx_len = setBufferWithLtelCmd(u1->tx, rdss, loRa, vlad);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3332      	adds	r3, #50	; 0x32
 80033d6:	0018      	movs	r0, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	f7ff fd03 	bl	8002de8 <setBufferWithLtelCmd>
 80033e2:	0003      	movs	r3, r0
 80033e4:	0019      	movs	r1, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2264      	movs	r2, #100	; 0x64
 80033ea:	5499      	strb	r1, [r3, r2]
	if (rdss->cmd == SET_VLAD_ATTENUATION) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d154      	bne.n	800349e <processReceivedUartCommand+0xda>
		uint8_t attenuationCommand[2];
		uint8_t i2cSlaveAddress = 0x08;
 80033f4:	2617      	movs	r6, #23
 80033f6:	19bb      	adds	r3, r7, r6
 80033f8:	2208      	movs	r2, #8
 80033fa:	701a      	strb	r2, [r3, #0]
		uint8_t index = setRdssStartData(rdss, u1->tx);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	001a      	movs	r2, r3
 8003402:	2516      	movs	r5, #22
 8003404:	197c      	adds	r4, r7, r5
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fee4 	bl	80041d8 <setRdssStartData>
 8003410:	0003      	movs	r3, r0
 8003412:	7023      	strb	r3, [r4, #0]
		attenuationCommand[0] = SET_VLAD_ATTENUATION;
 8003414:	2114      	movs	r1, #20
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2212      	movs	r2, #18
 800341a:	701a      	strb	r2, [r3, #0]
		attenuationCommand[1] = rdss->buffer[5];
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	79da      	ldrb	r2, [r3, #7]
 8003420:	187b      	adds	r3, r7, r1
 8003422:	705a      	strb	r2, [r3, #1]
		vlad->is_attenuation_updated = i2c1MasterTransmit(i2cSlaveAddress,
 8003424:	1879      	adds	r1, r7, r1
 8003426:	19bb      	adds	r3, r7, r6
 8003428:	7818      	ldrb	r0, [r3, #0]
 800342a:	230a      	movs	r3, #10
 800342c:	2202      	movs	r2, #2
 800342e:	f7fe fdad 	bl	8001f8c <i2c1MasterTransmit>
 8003432:	0003      	movs	r3, r0
 8003434:	0019      	movs	r1, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	222f      	movs	r2, #47	; 0x2f
 800343a:	5499      	strb	r1, [r3, r2]
				attenuationCommand, sizeof(attenuationCommand), 10);

		u1->tx[index++] = vlad->is_attenuation_updated;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	222f      	movs	r2, #47	; 0x2f
 8003440:	5c98      	ldrb	r0, [r3, r2]
 8003442:	197b      	adds	r3, r7, r5
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	197a      	adds	r2, r7, r5
 8003448:	1c59      	adds	r1, r3, #1
 800344a:	7011      	strb	r1, [r2, #0]
 800344c:	0019      	movs	r1, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2232      	movs	r2, #50	; 0x32
 8003452:	185b      	adds	r3, r3, r1
 8003454:	189b      	adds	r3, r3, r2
 8003456:	1c02      	adds	r2, r0, #0
 8003458:	701a      	strb	r2, [r3, #0]
		index += setCrc(u1->tx, index);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3332      	adds	r3, #50	; 0x32
 800345e:	001a      	movs	r2, r3
 8003460:	197b      	adds	r3, r7, r5
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	0019      	movs	r1, r3
 8003466:	0010      	movs	r0, r2
 8003468:	f000 fe80 	bl	800416c <setCrc>
 800346c:	0003      	movs	r3, r0
 800346e:	0019      	movs	r1, r3
 8003470:	197b      	adds	r3, r7, r5
 8003472:	197a      	adds	r2, r7, r5
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	188a      	adds	r2, r1, r2
 8003478:	701a      	strb	r2, [r3, #0]
		u1->tx[index++] = LTEL_END_MARK;
 800347a:	197b      	adds	r3, r7, r5
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	0028      	movs	r0, r5
 8003480:	197a      	adds	r2, r7, r5
 8003482:	1c59      	adds	r1, r3, #1
 8003484:	7011      	strb	r1, [r2, #0]
 8003486:	0019      	movs	r1, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2232      	movs	r2, #50	; 0x32
 800348c:	185b      	adds	r3, r3, r1
 800348e:	189b      	adds	r3, r3, r2
 8003490:	227f      	movs	r2, #127	; 0x7f
 8003492:	701a      	strb	r2, [r3, #0]
		u1->tx_len = index;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	183a      	adds	r2, r7, r0
 8003498:	2164      	movs	r1, #100	; 0x64
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	545a      	strb	r2, [r3, r1]
	}
	writeTx(u1);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f001 f99e 	bl	80047e2 <writeTx>
	printStatus(u1, rdss);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff f8e1 	bl	8002674 <printStatus>
	reinit(rdss);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 fe3b 	bl	8004130 <reinit>
	cleanTx(u1);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0018      	movs	r0, r3
 80034be:	f001 f9b8 	bl	8004832 <cleanTx>
	u1->tx_len = 0;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2264      	movs	r2, #100	; 0x64
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b007      	add	sp, #28
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034d4 <processLoRaSlaveReceiver>:

GPIO_PinState processLoRaSlaveReceiver(SX1278_t *loRa, UART1_t *u1) {
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	if (loRa->operatingMode != RX_CONTINUOUS) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2228      	movs	r2, #40	; 0x28
 80034e2:	5c9b      	ldrb	r3, [r3, r2]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d00d      	beq.n	8003504 <processLoRaSlaveReceiver+0x30>
		updateMode(loRa, SLAVE_RECEIVER);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2101      	movs	r1, #1
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fe f90f 	bl	8001710 <updateMode>
		setRxFifoAddr(loRa);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fe f9f7 	bl	80018e8 <setRxFifoAddr>
		setLoraLowFreqModeReg(loRa, RX_CONTINUOUS);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2105      	movs	r1, #5
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fe f862 	bl	80015c8 <setLoraLowFreqModeReg>
	}
	clearMemForRx(loRa);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f7fe fb07 	bl	8001b1a <clearMemForRx>
	GPIO_PinState bussy = HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 800350c:	250f      	movs	r5, #15
 800350e:	197c      	adds	r4, r7, r5
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <processLoRaSlaveReceiver+0xbc>)
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	0018      	movs	r0, r3
 8003516:	f001 fc8b 	bl	8004e30 <HAL_GPIO_ReadPin>
 800351a:	0003      	movs	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
	LORA_BUSSY_Pin);
	if (bussy == GPIO_PIN_SET)
 800351e:	197b      	adds	r3, r7, r5
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d110      	bne.n	8003548 <processLoRaSlaveReceiver+0x74>
		if (crcErrorActivation(loRa) != 1) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f7fe fa19 	bl	8001960 <crcErrorActivation>
 800352e:	0003      	movs	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d009      	beq.n	8003548 <processLoRaSlaveReceiver+0x74>
			getRxFifoData(loRa);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f7fe fa4a 	bl	80019d0 <getRxFifoData>
			printLoRaStatus(u1, loRa);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	0011      	movs	r1, r2
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff fa6c 	bl	8002a20 <printLoRaStatus>
		}

	if (loRa->status == RX_DONE) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	222a      	movs	r2, #42	; 0x2a
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d116      	bne.n	8003580 <processLoRaSlaveReceiver+0xac>
		setRxFifoAddr(loRa);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f7fe f9c7 	bl	80018e8 <setRxFifoAddr>
		setLoraLowFreqModeReg(loRa, RX_CONTINUOUS);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2105      	movs	r1, #5
 800355e:	0018      	movs	r0, r3
 8003560:	f7fe f832 	bl	80015c8 <setLoraLowFreqModeReg>
		readOperatingMode(loRa);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f7fe f817 	bl	800159a <readOperatingMode>
		loRa->status = RX_MODE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	222a      	movs	r2, #42	; 0x2a
 8003570:	2102      	movs	r1, #2
 8003572:	5499      	strb	r1, [r3, r2]
		printLoRaStatus(u1, loRa);
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fa50 	bl	8002a20 <printLoRaStatus>
	}
	return bussy;
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	50000800 	.word	0x50000800

08003594 <handleCommunication>:

void handleCommunication(RDSS_t *rdss, SX1278_t *loRa, Vlad_t *vlad,
		UART1_t *u1) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	switch (rdss->status) {
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	223b      	movs	r2, #59	; 0x3b
 80035a6:	5c9b      	ldrb	r3, [r3, r2]
 80035a8:	2b0e      	cmp	r3, #14
 80035aa:	d027      	beq.n	80035fc <handleCommunication+0x68>
 80035ac:	dc2d      	bgt.n	800360a <handleCommunication+0x76>
 80035ae:	2b0b      	cmp	r3, #11
 80035b0:	d002      	beq.n	80035b8 <handleCommunication+0x24>
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d007      	beq.n	80035c6 <handleCommunication+0x32>
 80035b6:	e028      	b.n	800360a <handleCommunication+0x76>
	case LORA_RECEIVE:
		processReceivedLoraCommand(rdss, loRa, vlad, u1);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fe5e 	bl	8003280 <processReceivedLoraCommand>
		break;
 80035c4:	e028      	b.n	8003618 <handleCommunication+0x84>
	case LORA_SEND:
		printStatus(u1, rdss);
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff f851 	bl	8002674 <printStatus>
		if (rdss->cmd == QUERY_STATUS) {
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b11      	cmp	r3, #17
 80035d8:	d105      	bne.n	80035e6 <handleCommunication+0x52>
			sendLoRaMasterQuery(rdss, loRa);
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fbd6 	bl	8002d92 <sendLoRaMasterQuery>
		}
		printLoRaStatus(u1, loRa);
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	0011      	movs	r1, r2
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff fa17 	bl	8002a20 <printLoRaStatus>
		reinit(rdss);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fd9b 	bl	8004130 <reinit>
		break;
 80035fa:	e00d      	b.n	8003618 <handleCommunication+0x84>
	case UART_VALID:
		processReceivedUartCommand(vlad, u1, rdss, loRa);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fede 	bl	80033c4 <processReceivedUartCommand>
		break;
 8003608:	e006      	b.n	8003618 <handleCommunication+0x84>
	default:
		handleDefaultCase(rdss, loRa, u1);
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 f805 	bl	8003620 <handleDefaultCase>
		break;
 8003616:	46c0      	nop			; (mov r8, r8)
	}
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b004      	add	sp, #16
 800361e:	bd80      	pop	{r7, pc}

08003620 <handleDefaultCase>:

void handleDefaultCase(RDSS_t *rdss, SX1278_t *loRa, UART1_t *u1) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	if (u1->isReady) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	226c      	movs	r2, #108	; 0x6c
 8003630:	5c9b      	ldrb	r3, [r3, r2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <handleDefaultCase+0x30>
		parseUartSlave(u1, rdss);
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff fb4e 	bl	8002cde <parseUartSlave>
		printStatus(u1, rdss);
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0011      	movs	r1, r2
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff f813 	bl	8002674 <printStatus>
		printStatus(u1, rdss);
		printLoRaStatus(u1, loRa);
	} else if (loRa->mode == SLAVE_RECEIVER) {
		processLoRaSlaveReceiver(loRa, u1);
	}
}
 800364e:	e021      	b.n	8003694 <handleDefaultCase+0x74>
	} else if (loRa->len > 0) {
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	7c5b      	ldrb	r3, [r3, #17]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <handleDefaultCase+0x5e>
		parseLoRaSlave(rdss, loRa);
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f7ff fafe 	bl	8002c60 <parseLoRaSlave>
		printStatus(u1, rdss);
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff f802 	bl	8002674 <printStatus>
		printLoRaStatus(u1, loRa);
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0011      	movs	r1, r2
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff f9d2 	bl	8002a20 <printLoRaStatus>
}
 800367c:	e00a      	b.n	8003694 <handleDefaultCase+0x74>
	} else if (loRa->mode == SLAVE_RECEIVER) {
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2229      	movs	r2, #41	; 0x29
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <handleDefaultCase+0x74>
		processLoRaSlaveReceiver(loRa, u1);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff ff20 	bl	80034d4 <processLoRaSlaveReceiver>
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}

0800369c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036a0:	b672      	cpsid	i
}
 80036a2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036a4:	e7fe      	b.n	80036a4 <Error_Handler+0x8>

080036a6 <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

Vlad_t* vladInit(uint8_t id) {
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	0002      	movs	r2, r0
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	701a      	strb	r2, [r3, #0]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 80036b2:	203c      	movs	r0, #60	; 0x3c
 80036b4:	f003 f800 	bl	80066b8 <malloc>
 80036b8:	0003      	movs	r3, r0
 80036ba:	60fb      	str	r3, [r7, #12]
	vlad->agc152m = 0;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	801a      	strh	r2, [r3, #0]
	vlad->ref152m = 0;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	805a      	strh	r2, [r3, #2]
	vlad->level152m = 0;  // downlink 150 mhz
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	809a      	strh	r2, [r3, #4]
	vlad->agc172m = 0;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	80da      	strh	r2, [r3, #6]
	vlad->level172m = 0; //uplink 170 mhz
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	811a      	strh	r2, [r3, #8]
	vlad->tone_level = 0;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	815a      	strh	r2, [r3, #10]
	vlad->v_5v = 0;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	819a      	strh	r2, [r3, #12]
	vlad->vin = 0;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	81da      	strh	r2, [r3, #14]
	vlad->current = 0;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	821a      	strh	r2, [r3, #16]
	vlad->v_5v_real = 0;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
	vlad->vin_real = 0;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
	vlad->current_real = 0;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	621a      	str	r2, [r3, #32]
	vlad->ucTemperature.i = 0;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->lineCurrent.i = 0;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->remoteAttenuation = 0;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	222c      	movs	r2, #44	; 0x2c
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]
	vlad->v_5v_real = 0;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
	vlad->vin_real = 0;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	61da      	str	r2, [r3, #28]
	vlad->current_real = 0;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	621a      	str	r2, [r3, #32]
	vlad->agc152m_real = 0;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	755a      	strb	r2, [r3, #21]
	vlad->remoteAttenuation = 0;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	222c      	movs	r2, #44	; 0x2c
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]
	vlad->rotarySwitchAttenuation = 0;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	222d      	movs	r2, #45	; 0x2d
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
	vlad->isRemoteAttenuation = false;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	222e      	movs	r2, #46	; 0x2e
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]
	vlad->is_attenuation_updated = false;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	222f      	movs	r2, #47	; 0x2f
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]
	vlad->state = 0;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2238      	movs	r2, #56	; 0x38
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]
	vlad->calc_en = false;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2232      	movs	r2, #50	; 0x32
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]
	vlad->function = VLADR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2231      	movs	r2, #49	; 0x31
 8003776:	2105      	movs	r1, #5
 8003778:	5499      	strb	r1, [r3, r2]
	vlad->id = id;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1dfa      	adds	r2, r7, #7
 800377e:	2130      	movs	r1, #48	; 0x30
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	545a      	strb	r2, [r3, r1]
	vlad->lastUpdateTicks = HAL_GetTick();
 8003784:	f001 f90e 	bl	80049a4 <HAL_GetTick>
 8003788:	0002      	movs	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

	readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3331      	adds	r3, #49	; 0x31
 8003792:	0019      	movs	r1, r3
 8003794:	2301      	movs	r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	2000      	movs	r0, #0
 800379a:	f7fe fac5 	bl	8001d28 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3330      	adds	r3, #48	; 0x30
 80037a2:	0019      	movs	r1, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	2204      	movs	r2, #4
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fe fabd 	bl	8001d28 <readPage>
	return vlad;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b004      	add	sp, #16
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <encodeVladToLtel>:

uint8_t encodeVladToLtel(uint8_t *frame, Vlad_t *vlad) {
 80037b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	uint8_t data_length = 12;
 80037c2:	2317      	movs	r3, #23
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	220c      	movs	r2, #12
 80037c8:	701a      	strb	r2, [r3, #0]
	uint8_t index = 0;
 80037ca:	2516      	movs	r5, #22
 80037cc:	197b      	adds	r3, r7, r5
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
	uint16_t line_voltage = (uint16_t) (vlad->vin_real * 10);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4974      	ldr	r1, [pc, #464]	; (80039a8 <encodeVladToLtel+0x1f0>)
 80037d8:	1c18      	adds	r0, r3, #0
 80037da:	f7fd f9cb 	bl	8000b74 <__aeabi_fmul>
 80037de:	1c03      	adds	r3, r0, #0
 80037e0:	2614      	movs	r6, #20
 80037e2:	19bc      	adds	r4, r7, r6
 80037e4:	1c18      	adds	r0, r3, #0
 80037e6:	f7fc fd7b 	bl	80002e0 <__aeabi_f2uiz>
 80037ea:	0003      	movs	r3, r0
 80037ec:	8023      	strh	r3, [r4, #0]
	uint16_t line_current = (uint16_t) (vlad->lineCurrent.f * 1000);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	496e      	ldr	r1, [pc, #440]	; (80039ac <encodeVladToLtel+0x1f4>)
 80037f4:	1c18      	adds	r0, r3, #0
 80037f6:	f7fd f9bd 	bl	8000b74 <__aeabi_fmul>
 80037fa:	1c03      	adds	r3, r0, #0
 80037fc:	2112      	movs	r1, #18
 80037fe:	187c      	adds	r4, r7, r1
 8003800:	1c18      	adds	r0, r3, #0
 8003802:	f7fc fd6d 	bl	80002e0 <__aeabi_f2uiz>
 8003806:	0003      	movs	r3, r0
 8003808:	8023      	strh	r3, [r4, #0]
	uint8_t downlink_agc_value = (uint8_t) (vlad->agc152m_real * 10);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	7c9b      	ldrb	r3, [r3, #18]
 800380e:	b25b      	sxtb	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2011      	movs	r0, #17
 8003814:	183a      	adds	r2, r7, r0
 8003816:	1c19      	adds	r1, r3, #0
 8003818:	0089      	lsls	r1, r1, #2
 800381a:	18cb      	adds	r3, r1, r3
 800381c:	18db      	adds	r3, r3, r3
 800381e:	7013      	strb	r3, [r2, #0]
	uint8_t uplink_agc_value = (uint8_t) (vlad->agc172m_real * 10);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	7cdb      	ldrb	r3, [r3, #19]
 8003824:	b25b      	sxtb	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2410      	movs	r4, #16
 800382a:	193a      	adds	r2, r7, r4
 800382c:	1c19      	adds	r1, r3, #0
 800382e:	0089      	lsls	r1, r1, #2
 8003830:	18cb      	adds	r3, r1, r3
 8003832:	18db      	adds	r3, r3, r3
 8003834:	7013      	strb	r3, [r2, #0]
	uint8_t vladRev23Id = 0xff;
 8003836:	230f      	movs	r3, #15
 8003838:	001c      	movs	r4, r3
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	701a      	strb	r2, [r3, #0]

	frame[index++] = data_length;
 8003840:	0028      	movs	r0, r5
 8003842:	183b      	adds	r3, r7, r0
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	183a      	adds	r2, r7, r0
 8003848:	1c59      	adds	r1, r3, #1
 800384a:	7011      	strb	r1, [r2, #0]
 800384c:	001a      	movs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	189b      	adds	r3, r3, r2
 8003852:	2217      	movs	r2, #23
 8003854:	18ba      	adds	r2, r7, r2
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) vladRev23Id;
 800385a:	183b      	adds	r3, r7, r0
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	183a      	adds	r2, r7, r0
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	7011      	strb	r1, [r2, #0]
 8003864:	001a      	movs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	189b      	adds	r3, r3, r2
 800386a:	0025      	movs	r5, r4
 800386c:	197a      	adds	r2, r7, r5
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) vlad->state;
 8003872:	183b      	adds	r3, r7, r0
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	183a      	adds	r2, r7, r0
 8003878:	1c59      	adds	r1, r3, #1
 800387a:	7011      	strb	r1, [r2, #0]
 800387c:	001a      	movs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	189b      	adds	r3, r3, r2
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	2138      	movs	r1, #56	; 0x38
 8003886:	5c52      	ldrb	r2, [r2, r1]
 8003888:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) line_voltage;
 800388a:	183b      	adds	r3, r7, r0
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	183a      	adds	r2, r7, r0
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	7011      	strb	r1, [r2, #0]
 8003894:	001a      	movs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	189b      	adds	r3, r3, r2
 800389a:	19ba      	adds	r2, r7, r6
 800389c:	8812      	ldrh	r2, [r2, #0]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) (line_voltage >> 8);
 80038a2:	19bb      	adds	r3, r7, r6
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	b299      	uxth	r1, r3
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	0004      	movs	r4, r0
 80038b0:	183a      	adds	r2, r7, r0
 80038b2:	1c58      	adds	r0, r3, #1
 80038b4:	7010      	strb	r0, [r2, #0]
 80038b6:	001a      	movs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	189b      	adds	r3, r3, r2
 80038bc:	b2ca      	uxtb	r2, r1
 80038be:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) line_current;
 80038c0:	0020      	movs	r0, r4
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	183a      	adds	r2, r7, r0
 80038c8:	1c59      	adds	r1, r3, #1
 80038ca:	7011      	strb	r1, [r2, #0]
 80038cc:	001a      	movs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	189b      	adds	r3, r3, r2
 80038d2:	2112      	movs	r1, #18
 80038d4:	187a      	adds	r2, r7, r1
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) (line_current >> 8);
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	b299      	uxth	r1, r3
 80038e4:	0004      	movs	r4, r0
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	193a      	adds	r2, r7, r4
 80038ec:	1c58      	adds	r0, r3, #1
 80038ee:	7010      	strb	r0, [r2, #0]
 80038f0:	001a      	movs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	b2ca      	uxtb	r2, r1
 80038f8:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) vlad->tone_level;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	8959      	ldrh	r1, [r3, #10]
 80038fe:	193b      	adds	r3, r7, r4
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	193a      	adds	r2, r7, r4
 8003904:	1c58      	adds	r0, r3, #1
 8003906:	7010      	strb	r0, [r2, #0]
 8003908:	001a      	movs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	189b      	adds	r3, r3, r2
 800390e:	b2ca      	uxtb	r2, r1
 8003910:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) (vlad->tone_level >> 8);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	895b      	ldrh	r3, [r3, #10]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b299      	uxth	r1, r3
 800391a:	193b      	adds	r3, r7, r4
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	193a      	adds	r2, r7, r4
 8003920:	1c58      	adds	r0, r3, #1
 8003922:	7010      	strb	r0, [r2, #0]
 8003924:	001a      	movs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	189b      	adds	r3, r3, r2
 800392a:	b2ca      	uxtb	r2, r1
 800392c:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) downlink_agc_value;
 800392e:	193b      	adds	r3, r7, r4
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0020      	movs	r0, r4
 8003934:	193a      	adds	r2, r7, r4
 8003936:	1c59      	adds	r1, r3, #1
 8003938:	7011      	strb	r1, [r2, #0]
 800393a:	001a      	movs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	189b      	adds	r3, r3, r2
 8003940:	2211      	movs	r2, #17
 8003942:	18ba      	adds	r2, r7, r2
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) vlad->level152m_real;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2114      	movs	r1, #20
 800394c:	5659      	ldrsb	r1, [r3, r1]
 800394e:	183b      	adds	r3, r7, r0
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	0004      	movs	r4, r0
 8003954:	183a      	adds	r2, r7, r0
 8003956:	1c58      	adds	r0, r3, #1
 8003958:	7010      	strb	r0, [r2, #0]
 800395a:	001a      	movs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	189b      	adds	r3, r3, r2
 8003960:	b2ca      	uxtb	r2, r1
 8003962:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) uplink_agc_value;
 8003964:	0020      	movs	r0, r4
 8003966:	183b      	adds	r3, r7, r0
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	183a      	adds	r2, r7, r0
 800396c:	1c59      	adds	r1, r3, #1
 800396e:	7011      	strb	r1, [r2, #0]
 8003970:	001a      	movs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	189b      	adds	r3, r3, r2
 8003976:	2410      	movs	r4, #16
 8003978:	193a      	adds	r2, r7, r4
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
	frame[index++] = (uint8_t) vlad->level172m_real;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2115      	movs	r1, #21
 8003982:	5659      	ldrsb	r1, [r3, r1]
 8003984:	183b      	adds	r3, r7, r0
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	0004      	movs	r4, r0
 800398a:	183a      	adds	r2, r7, r0
 800398c:	1c58      	adds	r0, r3, #1
 800398e:	7010      	strb	r0, [r2, #0]
 8003990:	001a      	movs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	189b      	adds	r3, r3, r2
 8003996:	b2ca      	uxtb	r2, r1
 8003998:	701a      	strb	r2, [r3, #0]
	return index;
 800399a:	193b      	adds	r3, r7, r4
 800399c:	781b      	ldrb	r3, [r3, #0]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b007      	add	sp, #28
 80039a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	41200000 	.word	0x41200000
 80039ac:	447a0000 	.word	0x447a0000

080039b0 <resetVladData>:

float current_calc(uint16_t _current) {
	return ADC_CONSUMPTION_CURRENT_FACTOR * _current / 4095.0f;
}

void resetVladData(Vlad_t *vlad) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	vlad->level152m = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	809a      	strh	r2, [r3, #4]
	vlad->level172m = 0;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	811a      	strh	r2, [r3, #8]
	vlad->agc152m = 0;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	801a      	strh	r2, [r3, #0]
	vlad->agc172m = 0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	80da      	strh	r2, [r3, #6]
	vlad->ref152m = 0;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	805a      	strh	r2, [r3, #2]
	vlad->tone_level = 0;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	815a      	strh	r2, [r3, #10]
	vlad->vin = 0;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	81da      	strh	r2, [r3, #14]
	vlad->v_5v = 0;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	819a      	strh	r2, [r3, #12]
	vlad->current = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	821a      	strh	r2, [r3, #16]
	vlad->ucTemperature.i = 0;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->lineCurrent.i = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->remoteAttenuation = 0;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	222c      	movs	r2, #44	; 0x2c
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]
	vlad->rotarySwitchAttenuation = 0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	222d      	movs	r2, #45	; 0x2d
 8003a06:	2100      	movs	r1, #0
 8003a08:	5499      	strb	r1, [r3, r2]
	vlad->is_attenuation_updated = false;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	222f      	movs	r2, #47	; 0x2f
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]
	vlad->v_5v_real = 0;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
	vlad->vin_real = 0;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
	vlad->current_real = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	621a      	str	r2, [r3, #32]
	vlad->agc152m_real = 0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	755a      	strb	r2, [r3, #21]
	vlad->state = 0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2238      	movs	r2, #56	; 0x38
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <readVladMeasurements>:

uint8_t readVladMeasurements(Vlad_t *vlad) {
 8003a4c:	b5b0      	push	{r4, r5, r7, lr}
 8003a4e:	b098      	sub	sp, #96	; 0x60
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	uint8_t slaveAddress = 0x08;
 8003a54:	2057      	movs	r0, #87	; 0x57
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	2208      	movs	r2, #8
 8003a5a:	701a      	strb	r2, [r3, #0]
	uint8_t vladMeasurementsCmd[2] = {0x10,0x00};
 8003a5c:	214c      	movs	r1, #76	; 0x4c
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2210      	movs	r2, #16
 8003a62:	801a      	strh	r2, [r3, #0]
	uint8_t query_size = 30;
 8003a64:	2356      	movs	r3, #86	; 0x56
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	221e      	movs	r2, #30
 8003a6a:	701a      	strb	r2, [r3, #0]
	uint8_t bufferIndex = 0;
 8003a6c:	245f      	movs	r4, #95	; 0x5f
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[30];

	if (!i2c1MasterTransmit(slaveAddress, vladMeasurementsCmd, sizeof(vladMeasurementsCmd), 10))
 8003a74:	1879      	adds	r1, r7, r1
 8003a76:	183b      	adds	r3, r7, r0
 8003a78:	7818      	ldrb	r0, [r3, #0]
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f7fe fa85 	bl	8001f8c <i2c1MasterTransmit>
 8003a82:	0003      	movs	r3, r0
 8003a84:	001a      	movs	r2, r3
 8003a86:	2301      	movs	r3, #1
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <readVladMeasurements+0x4a>
		return bufferIndex;
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	e104      	b.n	8003ca0 <readVladMeasurements+0x254>
	HAL_Delay(6);
 8003a96:	2006      	movs	r0, #6
 8003a98:	f000 ff8e 	bl	80049b8 <HAL_Delay>
	if (!i2c1MasterReceive(slaveAddress, buffer, query_size, 10))
 8003a9c:	2356      	movs	r3, #86	; 0x56
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	232c      	movs	r3, #44	; 0x2c
 8003aa4:	18f9      	adds	r1, r7, r3
 8003aa6:	2357      	movs	r3, #87	; 0x57
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	7818      	ldrb	r0, [r3, #0]
 8003aac:	230a      	movs	r3, #10
 8003aae:	f7fe fb57 	bl	8002160 <i2c1MasterReceive>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4053      	eors	r3, r2
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <readVladMeasurements+0x7c>
		return bufferIndex;
 8003ac0:	235f      	movs	r3, #95	; 0x5f
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	e0eb      	b.n	8003ca0 <readVladMeasurements+0x254>

	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	2108      	movs	r1, #8
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	605a      	str	r2, [r3, #4]
			&vlad->agc152m, &vlad->agc172m, &vlad->ref152m, &vlad->tone_level,
 8003adc:	687a      	ldr	r2, [r7, #4]
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	609a      	str	r2, [r3, #8]
			&vlad->agc152m, &vlad->agc172m, &vlad->ref152m, &vlad->tone_level,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	1d9a      	adds	r2, r3, #6
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	60da      	str	r2, [r3, #12]
			&vlad->agc152m, &vlad->agc172m, &vlad->ref152m, &vlad->tone_level,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1c9a      	adds	r2, r3, #2
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	611a      	str	r2, [r3, #16]
			&vlad->agc152m, &vlad->agc172m, &vlad->ref152m, &vlad->tone_level,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	330a      	adds	r3, #10
 8003af6:	001a      	movs	r2, r3
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	615a      	str	r2, [r3, #20]
			&vlad->vin, &vlad->v_5v, &vlad->current };
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	330e      	adds	r3, #14
 8003b00:	001a      	movs	r2, r3
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	619a      	str	r2, [r3, #24]
			&vlad->vin, &vlad->v_5v, &vlad->current };
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	001a      	movs	r2, r3
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	61da      	str	r2, [r3, #28]
			&vlad->vin, &vlad->v_5v, &vlad->current };
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3310      	adds	r3, #16
 8003b14:	001a      	movs	r2, r3
	uint16_t *vladValues[] = { &vlad->level152m, &vlad->level172m,
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	621a      	str	r2, [r3, #32]

	size_t num_values = sizeof(vladValues) / sizeof(vladValues[0]);
 8003b1a:	2309      	movs	r3, #9
 8003b1c:	653b      	str	r3, [r7, #80]	; 0x50

	for (size_t i = 0; i < num_values; i++) {
 8003b1e:	2300      	movs	r3, #0
 8003b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b22:	e02a      	b.n	8003b7a <readVladMeasurements+0x12e>
		*vladValues[i] = (uint16_t) buffer[bufferIndex++];
 8003b24:	205f      	movs	r0, #95	; 0x5f
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	183a      	adds	r2, r7, r0
 8003b2c:	1c59      	adds	r1, r3, #1
 8003b2e:	7011      	strb	r1, [r2, #0]
 8003b30:	001a      	movs	r2, r3
 8003b32:	252c      	movs	r5, #44	; 0x2c
 8003b34:	197b      	adds	r3, r7, r5
 8003b36:	5c99      	ldrb	r1, [r3, r2]
 8003b38:	2408      	movs	r4, #8
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	58d3      	ldr	r3, [r2, r3]
 8003b42:	b28a      	uxth	r2, r1
 8003b44:	801a      	strh	r2, [r3, #0]
		*vladValues[i] |= (uint16_t) (buffer[bufferIndex++] << 8);
 8003b46:	183b      	adds	r3, r7, r0
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	183a      	adds	r2, r7, r0
 8003b4c:	1c59      	adds	r1, r3, #1
 8003b4e:	7011      	strb	r1, [r2, #0]
 8003b50:	001a      	movs	r2, r3
 8003b52:	197b      	adds	r3, r7, r5
 8003b54:	5c9b      	ldrb	r3, [r3, r2]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	b299      	uxth	r1, r3
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	58d3      	ldr	r3, [r2, r3]
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b6a:	0080      	lsls	r0, r0, #2
 8003b6c:	58c3      	ldr	r3, [r0, r3]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	b292      	uxth	r2, r2
 8003b72:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < num_values; i++) {
 8003b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b76:	3301      	adds	r3, #1
 8003b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d3d0      	bcc.n	8003b24 <readVladMeasurements+0xd8>
	}

	vlad->remoteAttenuation = buffer[bufferIndex++];
 8003b82:	205f      	movs	r0, #95	; 0x5f
 8003b84:	183b      	adds	r3, r7, r0
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	183a      	adds	r2, r7, r0
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	7011      	strb	r1, [r2, #0]
 8003b8e:	001a      	movs	r2, r3
 8003b90:	242c      	movs	r4, #44	; 0x2c
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	5c99      	ldrb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	222c      	movs	r2, #44	; 0x2c
 8003b9a:	5499      	strb	r1, [r3, r2]
	vlad->rotarySwitchAttenuation = buffer[bufferIndex++];
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	183a      	adds	r2, r7, r0
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	7011      	strb	r1, [r2, #0]
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	5c99      	ldrb	r1, [r3, r2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	222d      	movs	r2, #45	; 0x2d
 8003bb0:	5499      	strb	r1, [r3, r2]
	vlad->state = buffer[bufferIndex++];
 8003bb2:	183b      	adds	r3, r7, r0
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	183a      	adds	r2, r7, r0
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	7011      	strb	r1, [r2, #0]
 8003bbc:	001a      	movs	r2, r3
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	5c99      	ldrb	r1, [r3, r2]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2238      	movs	r2, #56	; 0x38
 8003bc6:	5499      	strb	r1, [r3, r2]
	vlad->lineCurrent.i =buffer[bufferIndex++];
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	183a      	adds	r2, r7, r0
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	7011      	strb	r1, [r2, #0]
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	001a      	movs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->lineCurrent.i |=buffer[bufferIndex++]<<8;
 8003bde:	183b      	adds	r3, r7, r0
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	183a      	adds	r2, r7, r0
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	7011      	strb	r1, [r2, #0]
 8003be8:	001a      	movs	r2, r3
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->lineCurrent.i |=buffer[bufferIndex++]<<16;
 8003bfa:	183b      	adds	r3, r7, r0
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	183a      	adds	r2, r7, r0
 8003c00:	1c59      	adds	r1, r3, #1
 8003c02:	7011      	strb	r1, [r2, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->lineCurrent.i |=buffer[bufferIndex++]<<24;
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	183a      	adds	r2, r7, r0
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	7011      	strb	r1, [r2, #0]
 8003c20:	001a      	movs	r2, r3
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	5c9b      	ldrb	r3, [r3, r2]
 8003c26:	061a      	lsls	r2, r3, #24
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
	vlad->ucTemperature.i = buffer[bufferIndex++];
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	183a      	adds	r2, r7, r0
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	7011      	strb	r1, [r2, #0]
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	001a      	movs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->ucTemperature.i |= buffer[bufferIndex++] << 8;
 8003c48:	183b      	adds	r3, r7, r0
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	183a      	adds	r2, r7, r0
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	7011      	strb	r1, [r2, #0]
 8003c52:	001a      	movs	r2, r3
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	5c9b      	ldrb	r3, [r3, r2]
 8003c58:	021a      	lsls	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->ucTemperature.i |= buffer[bufferIndex++] << 16;
 8003c64:	183b      	adds	r3, r7, r0
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	183a      	adds	r2, r7, r0
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	7011      	strb	r1, [r2, #0]
 8003c6e:	001a      	movs	r2, r3
 8003c70:	193b      	adds	r3, r7, r4
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	041a      	lsls	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24
	vlad->ucTemperature.i |= buffer[bufferIndex++] << 24;
 8003c80:	183b      	adds	r3, r7, r0
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	183a      	adds	r2, r7, r0
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	7011      	strb	r1, [r2, #0]
 8003c8a:	001a      	movs	r2, r3
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	5c9b      	ldrb	r3, [r3, r2]
 8003c90:	061a      	lsls	r2, r3, #24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
	return bufferIndex;
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b018      	add	sp, #96	; 0x60
 8003ca6:	bdb0      	pop	{r4, r5, r7, pc}

08003ca8 <updateVladMeasurements>:

void updateVladMeasurements(Vlad_t *vlad) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	const uint32_t vladReadIntervalMs  = VLAD_READ_TIMER;
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <updateVladMeasurements+0x158>)
 8003cb2:	60fb      	str	r3, [r7, #12]


	if (HAL_GetTick() - vlad->lastUpdateTicks > vladReadIntervalMs ) {
 8003cb4:	f000 fe76 	bl	80049a4 <HAL_GetTick>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d300      	bcc.n	8003cc8 <updateVladMeasurements+0x20>
 8003cc6:	e096      	b.n	8003df6 <updateVladMeasurements+0x14e>
		if (readVladMeasurements(vlad) > 0) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7ff febe 	bl	8003a4c <readVladMeasurements>
 8003cd0:	1e03      	subs	r3, r0, #0
 8003cd2:	d100      	bne.n	8003cd6 <updateVladMeasurements+0x2e>
 8003cd4:	e086      	b.n	8003de4 <updateVladMeasurements+0x13c>
			vlad->v_5v_real = (float) vlad->v_5v * ADC_V5V_FACTOR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	899b      	ldrh	r3, [r3, #12]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fd fa3e 	bl	800115c <__aeabi_ui2f>
 8003ce0:	1c03      	adds	r3, r0, #0
 8003ce2:	4948      	ldr	r1, [pc, #288]	; (8003e04 <updateVladMeasurements+0x15c>)
 8003ce4:	1c18      	adds	r0, r3, #0
 8003ce6:	f7fc ff45 	bl	8000b74 <__aeabi_fmul>
 8003cea:	1c03      	adds	r3, r0, #0
 8003cec:	1c1a      	adds	r2, r3, #0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
			vlad->vin_real = (float) vlad->vin * ADC_VOLTAGE_FACTOR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	89db      	ldrh	r3, [r3, #14]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fd fa30 	bl	800115c <__aeabi_ui2f>
 8003cfc:	1c03      	adds	r3, r0, #0
 8003cfe:	4942      	ldr	r1, [pc, #264]	; (8003e08 <updateVladMeasurements+0x160>)
 8003d00:	1c18      	adds	r0, r3, #0
 8003d02:	f7fc ff37 	bl	8000b74 <__aeabi_fmul>
 8003d06:	1c03      	adds	r3, r0, #0
 8003d08:	1c1a      	adds	r2, r3, #0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	61da      	str	r2, [r3, #28]
			vlad->current_real =
					(float) vlad->current * ADC_LINE_CURRENT_FACTOR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8a1b      	ldrh	r3, [r3, #16]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fd fa22 	bl	800115c <__aeabi_ui2f>
 8003d18:	1c03      	adds	r3, r0, #0
 8003d1a:	493c      	ldr	r1, [pc, #240]	; (8003e0c <updateVladMeasurements+0x164>)
 8003d1c:	1c18      	adds	r0, r3, #0
 8003d1e:	f7fc ff29 	bl	8000b74 <__aeabi_fmul>
 8003d22:	1c03      	adds	r3, r0, #0
 8003d24:	1c1a      	adds	r2, r3, #0
			vlad->current_real =
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]
			vlad->agc152m_real = (int8_t) (MAX4003_AGC_SCOPE
					* (float) vlad->agc152m + MAX4003_AGC_FACTOR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fd fa14 	bl	800115c <__aeabi_ui2f>
 8003d34:	1c03      	adds	r3, r0, #0
 8003d36:	4936      	ldr	r1, [pc, #216]	; (8003e10 <updateVladMeasurements+0x168>)
 8003d38:	1c18      	adds	r0, r3, #0
 8003d3a:	f7fc ff1b 	bl	8000b74 <__aeabi_fmul>
 8003d3e:	1c03      	adds	r3, r0, #0
 8003d40:	4934      	ldr	r1, [pc, #208]	; (8003e14 <updateVladMeasurements+0x16c>)
 8003d42:	1c18      	adds	r0, r3, #0
 8003d44:	f7fc fbb0 	bl	80004a8 <__aeabi_fadd>
 8003d48:	1c03      	adds	r3, r0, #0
			vlad->agc152m_real = (int8_t) (MAX4003_AGC_SCOPE
 8003d4a:	1c18      	adds	r0, r3, #0
 8003d4c:	f7fd f9e6 	bl	800111c <__aeabi_f2iz>
 8003d50:	0003      	movs	r3, r0
 8003d52:	b25a      	sxtb	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	749a      	strb	r2, [r3, #18]
			vlad->agc172m_real = (int8_t) (MAX4003_AGC_SCOPE
					* (float) vlad->agc172m + MAX4003_AGC_FACTOR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	88db      	ldrh	r3, [r3, #6]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fd f9fd 	bl	800115c <__aeabi_ui2f>
 8003d62:	1c03      	adds	r3, r0, #0
 8003d64:	492a      	ldr	r1, [pc, #168]	; (8003e10 <updateVladMeasurements+0x168>)
 8003d66:	1c18      	adds	r0, r3, #0
 8003d68:	f7fc ff04 	bl	8000b74 <__aeabi_fmul>
 8003d6c:	1c03      	adds	r3, r0, #0
 8003d6e:	4929      	ldr	r1, [pc, #164]	; (8003e14 <updateVladMeasurements+0x16c>)
 8003d70:	1c18      	adds	r0, r3, #0
 8003d72:	f7fc fb99 	bl	80004a8 <__aeabi_fadd>
 8003d76:	1c03      	adds	r3, r0, #0
			vlad->agc172m_real = (int8_t) (MAX4003_AGC_SCOPE
 8003d78:	1c18      	adds	r0, r3, #0
 8003d7a:	f7fd f9cf 	bl	800111c <__aeabi_f2iz>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	74da      	strb	r2, [r3, #19]
			vlad->level152m_real = (int8_t) (MAX4003_DBM_SCOPE
					* (float) vlad->level152m + MAX4003_DBM_FACTOR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	889b      	ldrh	r3, [r3, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fd f9e6 	bl	800115c <__aeabi_ui2f>
 8003d90:	1c03      	adds	r3, r0, #0
 8003d92:	4921      	ldr	r1, [pc, #132]	; (8003e18 <updateVladMeasurements+0x170>)
 8003d94:	1c18      	adds	r0, r3, #0
 8003d96:	f7fc feed 	bl	8000b74 <__aeabi_fmul>
 8003d9a:	1c03      	adds	r3, r0, #0
 8003d9c:	491f      	ldr	r1, [pc, #124]	; (8003e1c <updateVladMeasurements+0x174>)
 8003d9e:	1c18      	adds	r0, r3, #0
 8003da0:	f7fd f80e 	bl	8000dc0 <__aeabi_fsub>
 8003da4:	1c03      	adds	r3, r0, #0
			vlad->level152m_real = (int8_t) (MAX4003_DBM_SCOPE
 8003da6:	1c18      	adds	r0, r3, #0
 8003da8:	f7fd f9b8 	bl	800111c <__aeabi_f2iz>
 8003dac:	0003      	movs	r3, r0
 8003dae:	b25a      	sxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	751a      	strb	r2, [r3, #20]
			vlad->level172m_real = (int8_t) (MAX4003_DBM_SCOPE
					* (float) vlad->level172m + MAX4003_DBM_FACTOR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	891b      	ldrh	r3, [r3, #8]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fd f9cf 	bl	800115c <__aeabi_ui2f>
 8003dbe:	1c03      	adds	r3, r0, #0
 8003dc0:	4915      	ldr	r1, [pc, #84]	; (8003e18 <updateVladMeasurements+0x170>)
 8003dc2:	1c18      	adds	r0, r3, #0
 8003dc4:	f7fc fed6 	bl	8000b74 <__aeabi_fmul>
 8003dc8:	1c03      	adds	r3, r0, #0
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <updateVladMeasurements+0x174>)
 8003dcc:	1c18      	adds	r0, r3, #0
 8003dce:	f7fc fff7 	bl	8000dc0 <__aeabi_fsub>
 8003dd2:	1c03      	adds	r3, r0, #0
			vlad->level172m_real = (int8_t) (MAX4003_DBM_SCOPE
 8003dd4:	1c18      	adds	r0, r3, #0
 8003dd6:	f7fd f9a1 	bl	800111c <__aeabi_f2iz>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	b25a      	sxtb	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	755a      	strb	r2, [r3, #21]
 8003de2:	e003      	b.n	8003dec <updateVladMeasurements+0x144>



		} else {
			resetVladData(vlad);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0018      	movs	r0, r3
 8003de8:	f7ff fde2 	bl	80039b0 <resetVladData>
		}
		vlad->lastUpdateTicks = HAL_GetTick();
 8003dec:	f000 fdda 	bl	80049a4 <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	00001388 	.word	0x00001388
 8003e04:	3ad3592e 	.word	0x3ad3592e
 8003e08:	3c635eaa 	.word	0x3c635eaa
 8003e0c:	3a9008f7 	.word	0x3a9008f7
 8003e10:	bbf00f01 	.word	0xbbf00f01
 8003e14:	41f00000 	.word	0x41f00000
 8003e18:	3caf6ae5 	.word	0x3caf6ae5
 8003e1c:	4221b68b 	.word	0x4221b68b

08003e20 <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

RDSS_t* rdssInit(uint8_t id) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	0002      	movs	r2, r0
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	701a      	strb	r2, [r3, #0]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 8003e2c:	203c      	movs	r0, #60	; 0x3c
 8003e2e:	f002 fc43 	bl	80066b8 <malloc>
 8003e32:	0003      	movs	r3, r0
 8003e34:	60fb      	str	r3, [r7, #12]
	r->len = 0;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
	r->status = WAITING;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	223b      	movs	r2, #59	; 0x3b
 8003e40:	2108      	movs	r1, #8
 8003e42:	5499      	strb	r1, [r3, r2]
	r->cmd = NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
	r->id = id;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1dfa      	adds	r2, r7, #7
 8003e4e:	213a      	movs	r1, #58	; 0x3a
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	545a      	strb	r2, [r3, r1]
	memset(r->buffer, 0, RDSS_BUFFER_SIZE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3302      	adds	r3, #2
 8003e58:	2232      	movs	r2, #50	; 0x32
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f002 fc3e 	bl	80066de <memset>
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <rdssInit+0x68>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <rdssInit+0x68>)
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	02c9      	lsls	r1, r1, #11
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <rdssInit+0x68>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <rdssInit+0x68>)
 8003e76:	4905      	ldr	r1, [pc, #20]	; (8003e8c <rdssInit+0x6c>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]
	return r;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	50000400 	.word	0x50000400
 8003e8c:	fff7ffff 	.word	0xfff7ffff

08003e90 <isValidModule>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t isValidModule(uint8_t *frame, uint8_t lenght) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	000a      	movs	r2, r1
 8003e9a:	1cfb      	adds	r3, r7, #3
 8003e9c:	701a      	strb	r2, [r3, #0]
	if (frame[1] == VLADR) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d113      	bne.n	8003ed0 <isValidModule+0x40>
		for (int i = 3; i < lenght; i++)
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00a      	b.n	8003ec4 <isValidModule+0x34>
			if (frame[i] == LTEL_END_MARK)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	18d3      	adds	r3, r2, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb8:	d101      	bne.n	8003ebe <isValidModule+0x2e>
				return VALID_MODULE;
 8003eba:	2309      	movs	r3, #9
 8003ebc:	e00b      	b.n	8003ed6 <isValidModule+0x46>
		for (int i = 3; i < lenght; i++)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	1cfb      	adds	r3, r7, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	dbef      	blt.n	8003eae <isValidModule+0x1e>
 8003ece:	e001      	b.n	8003ed4 <isValidModule+0x44>
	} else
		return WRONG_MODULE_FUNCTION;
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e000      	b.n	8003ed6 <isValidModule+0x46>
	return WRONG_MODULE_FUNCTION;
 8003ed4:	2304      	movs	r3, #4
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b004      	add	sp, #16
 8003edc:	bd80      	pop	{r7, pc}

08003ede <isValidFrame>:

Rs485_status_t isValidFrame(uint8_t *frame, uint8_t lenght) {
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	000a      	movs	r2, r1
 8003ee8:	1cfb      	adds	r3, r7, #3
 8003eea:	701a      	strb	r2, [r3, #0]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8003eec:	1cfb      	adds	r3, r7, #3
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d911      	bls.n	8003f18 <isValidFrame+0x3a>
		if (frame[0] == LTEL_START_MARK) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b7e      	cmp	r3, #126	; 0x7e
 8003efa:	d10b      	bne.n	8003f14 <isValidFrame+0x36>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8003efc:	1cfb      	adds	r3, r7, #3
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	18d3      	adds	r3, r2, r3
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b7f      	cmp	r3, #127	; 0x7f
 8003f0a:	d101      	bne.n	8003f10 <isValidFrame+0x32>
				return VALID_FRAME;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e004      	b.n	8003f1a <isValidFrame+0x3c>
			else
				return START_READING;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e002      	b.n	8003f1a <isValidFrame+0x3c>
		} else
			return NOT_VALID_FRAME;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e000      	b.n	8003f1a <isValidFrame+0x3c>
	} else

		return WAITING;
 8003f18:	2308      	movs	r3, #8
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <checkValidCrc>:

Rs485_status_t checkValidCrc(uint8_t *frame, uint8_t len) {
 8003f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	000a      	movs	r2, r1
 8003f2c:	1cfb      	adds	r3, r7, #3
 8003f2e:	701a      	strb	r2, [r3, #0]
	uint16_t calculatedCrc, savedCrc;
	savedCrc = ((uint16_t) frame[len - 2] << 8);
 8003f30:	1cfb      	adds	r3, r7, #3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3b02      	subs	r3, #2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	18d3      	adds	r3, r2, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	250e      	movs	r5, #14
 8003f40:	197b      	adds	r3, r7, r5
 8003f42:	0212      	lsls	r2, r2, #8
 8003f44:	801a      	strh	r2, [r3, #0]
	savedCrc |= (uint16_t) frame[len - 3];
 8003f46:	1cfb      	adds	r3, r7, #3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	3b03      	subs	r3, #3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	18d3      	adds	r3, r2, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b299      	uxth	r1, r3
 8003f54:	197b      	adds	r3, r7, r5
 8003f56:	197a      	adds	r2, r7, r5
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	801a      	strh	r2, [r3, #0]
	calculatedCrc = crc_get(&frame[1], len - 4);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	1cfb      	adds	r3, r7, #3
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b04      	subs	r3, #4
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	260c      	movs	r6, #12
 8003f6c:	19bc      	adds	r4, r7, r6
 8003f6e:	0019      	movs	r1, r3
 8003f70:	0010      	movs	r0, r2
 8003f72:	f000 f80f 	bl	8003f94 <crc_get>
 8003f76:	0003      	movs	r3, r0
 8003f78:	8023      	strh	r3, [r4, #0]

	return (calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR;
 8003f7a:	19ba      	adds	r2, r7, r6
 8003f7c:	197b      	adds	r3, r7, r5
 8003f7e:	8812      	ldrh	r2, [r2, #0]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d101      	bne.n	8003f8a <checkValidCrc+0x68>
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <checkValidCrc+0x6a>
 8003f8a:	2306      	movs	r3, #6
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b005      	add	sp, #20
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f94 <crc_get>:

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	000a      	movs	r2, r1
 8003f9e:	1cfb      	adds	r3, r7, #3
 8003fa0:	701a      	strb	r2, [r3, #0]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	; (8004054 <crc_get+0xc0>)
 8003fa8:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;            // 16-bit CRC value
 8003faa:	230c      	movs	r3, #12
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2200      	movs	r2, #0
 8003fb0:	801a      	strh	r2, [r3, #0]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e03d      	b.n	8004038 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 8003fbc:	230f      	movs	r3, #15
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b299      	uxth	r1, r3
 8003fce:	220c      	movs	r2, #12
 8003fd0:	18bb      	adds	r3, r7, r2
 8003fd2:	18ba      	adds	r2, r7, r2
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	404a      	eors	r2, r1
 8003fd8:	801a      	strh	r2, [r3, #0]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8003fda:	230e      	movs	r3, #14
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e01e      	b.n	8004022 <crc_get+0x8e>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8003fe4:	210c      	movs	r1, #12
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2200      	movs	r2, #0
 8003fea:	5e9b      	ldrsh	r3, [r3, r2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da0c      	bge.n	800400a <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	b21a      	sxth	r2, r3
 8003ff8:	230a      	movs	r3, #10
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	5e1b      	ldrsh	r3, [r3, r0]
 8004000:	4053      	eors	r3, r2
 8004002:	b21a      	sxth	r2, r3
 8004004:	187b      	adds	r3, r7, r1
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e005      	b.n	8004016 <crc_get+0x82>
			} else {
				crc <<= 1;
 800400a:	230c      	movs	r3, #12
 800400c:	18fa      	adds	r2, r7, r3
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	18db      	adds	r3, r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8004016:	210e      	movs	r1, #14
 8004018:	187b      	adds	r3, r7, r1
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	187b      	adds	r3, r7, r1
 800401e:	3201      	adds	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	230e      	movs	r3, #14
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9db      	bls.n	8003fe4 <crc_get+0x50>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 800402c:	210f      	movs	r1, #15
 800402e:	187b      	adds	r3, r7, r1
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	187b      	adds	r3, r7, r1
 8004034:	3201      	adds	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	230f      	movs	r3, #15
 800403a:	18fa      	adds	r2, r7, r3
 800403c:	1cfb      	adds	r3, r7, #3
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d3ba      	bcc.n	8003fbc <crc_get+0x28>
			}
		}
	}

	return crc;
 8004046:	230c      	movs	r3, #12
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	881b      	ldrh	r3, [r3, #0]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00001021 	.word	0x00001021

08004058 <isValid>:
	else if (r->id == ID0)
		return LORA_SEND;
	return WRONG_MODULE_ID;
}

Rs485_status_t isValid(uint8_t *buff,uint8_t len) {
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	000a      	movs	r2, r1
 8004062:	1cfb      	adds	r3, r7, #3
 8004064:	701a      	strb	r2, [r3, #0]
	Rs485_status_t status;
	status = isValidFrame(buff,len);
 8004066:	250f      	movs	r5, #15
 8004068:	197c      	adds	r4, r7, r5
 800406a:	1cfb      	adds	r3, r7, #3
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0011      	movs	r1, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f7ff ff33 	bl	8003ede <isValidFrame>
 8004078:	0003      	movs	r3, r0
 800407a:	7023      	strb	r3, [r4, #0]
	if (!(status == VALID_FRAME))
 800407c:	197b      	adds	r3, r7, r5
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d002      	beq.n	800408a <isValid+0x32>
		return status;
 8004084:	197b      	adds	r3, r7, r5
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	e026      	b.n	80040d8 <isValid+0x80>
	status = isValidModule(buff,len);
 800408a:	250f      	movs	r5, #15
 800408c:	197c      	adds	r4, r7, r5
 800408e:	1cfb      	adds	r3, r7, #3
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0011      	movs	r1, r2
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff fefa 	bl	8003e90 <isValidModule>
 800409c:	0003      	movs	r3, r0
 800409e:	7023      	strb	r3, [r4, #0]
	if (!(status == VALID_MODULE))
 80040a0:	197b      	adds	r3, r7, r5
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d002      	beq.n	80040ae <isValid+0x56>
		return status;
 80040a8:	197b      	adds	r3, r7, r5
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	e014      	b.n	80040d8 <isValid+0x80>
	status = checkValidCrc(buff,len);
 80040ae:	250f      	movs	r5, #15
 80040b0:	197c      	adds	r4, r7, r5
 80040b2:	1cfb      	adds	r3, r7, #3
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0011      	movs	r1, r2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff ff31 	bl	8003f22 <checkValidCrc>
 80040c0:	0003      	movs	r3, r0
 80040c2:	7023      	strb	r3, [r4, #0]
	if (!(status == DATA_OK))
 80040c4:	197b      	adds	r3, r7, r5
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <isValid+0x7a>
		return status;
 80040cc:	197b      	adds	r3, r7, r5
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	e002      	b.n	80040d8 <isValid+0x80>
	return status;
 80040d2:	230f      	movs	r3, #15
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	781b      	ldrb	r3, [r3, #0]
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bdb0      	pop	{r4, r5, r7, pc}

080040e0 <fillValidBuffer>:

void fillValidBuffer(RDSS_t *r, uint8_t *buff, uint8_t len) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	1dfb      	adds	r3, r7, #7
 80040ec:	701a      	strb	r2, [r3, #0]
	r->status = isValid(buff, len);
 80040ee:	1dfb      	adds	r3, r7, #7
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff ffae 	bl	8004058 <isValid>
 80040fc:	0003      	movs	r3, r0
 80040fe:	0019      	movs	r1, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	223b      	movs	r2, #59	; 0x3b
 8004104:	5499      	strb	r1, [r3, r2]
	if (r->status == DATA_OK) {
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	223b      	movs	r2, #59	; 0x3b
 800410a:	5c9b      	ldrb	r3, [r3, r2]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <fillValidBuffer+0x48>
		r->len = len;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1dfa      	adds	r2, r7, #7
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	705a      	strb	r2, [r3, #1]
		memcpy(r->buffer, buff, len);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1c98      	adds	r0, r3, #2
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0019      	movs	r1, r3
 8004124:	f002 fad2 	bl	80066cc <memcpy>
	}
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b004      	add	sp, #16
 800412e:	bd80      	pop	{r7, pc}

08004130 <reinit>:
	if (!(rs485->status == WRONG_MODULE_ID))
		return rs485->status;
	return rs485->status;
}

void reinit(RDSS_t *rs485) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	rs485->cmd = NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
	rs485->status = WAITING;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	223b      	movs	r2, #59	; 0x3b
 8004142:	2108      	movs	r1, #8
 8004144:	5499      	strb	r1, [r3, r2]
	if (rs485->buffer[0] == '\0')
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	789b      	ldrb	r3, [r3, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <reinit+0x34>
		return;
	memset(rs485->buffer, 0, sizeof(rs485->buffer));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3302      	adds	r3, #2
 8004152:	2232      	movs	r2, #50	; 0x32
 8004154:	2100      	movs	r1, #0
 8004156:	0018      	movs	r0, r3
 8004158:	f002 fac1 	bl	80066de <memset>
	rs485->len = 0;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	705a      	strb	r2, [r3, #1]
 8004162:	e000      	b.n	8004166 <reinit+0x36>
		return;
 8004164:	46c0      	nop			; (mov r8, r8)
}
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t* buff,uint8_t size){
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	000a      	movs	r2, r1
 8004176:	1cfb      	adds	r3, r7, #3
 8004178:	701a      	strb	r2, [r3, #0]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff+1, size-1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	1cfb      	adds	r3, r7, #3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	0019      	movs	r1, r3
 8004188:	0010      	movs	r0, r2
 800418a:	f7ff ff03 	bl	8003f94 <crc_get>
 800418e:	0003      	movs	r3, r0
 8004190:	001a      	movs	r2, r3
 8004192:	210a      	movs	r1, #10
 8004194:	187b      	adds	r3, r7, r1
 8004196:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8004198:	200c      	movs	r0, #12
 800419a:	183b      	adds	r3, r7, r0
 800419c:	187a      	adds	r2, r7, r1
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	801a      	strh	r2, [r3, #0]
	buff[size++] = crc_frame[0];
 80041a2:	1cfb      	adds	r3, r7, #3
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	1cfa      	adds	r2, r7, #3
 80041a8:	1c59      	adds	r1, r3, #1
 80041aa:	7011      	strb	r1, [r2, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	183a      	adds	r2, r7, r0
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 80041b8:	1cfb      	adds	r3, r7, #3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	1cfa      	adds	r2, r7, #3
 80041be:	1c59      	adds	r1, r3, #1
 80041c0:	7011      	strb	r1, [r2, #0]
 80041c2:	001a      	movs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	183a      	adds	r2, r7, r0
 80041ca:	7852      	ldrb	r2, [r2, #1]
 80041cc:	701a      	strb	r2, [r3, #0]
	return 2;
 80041ce:	2302      	movs	r3, #2
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b004      	add	sp, #16
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80041e2:	210f      	movs	r1, #15
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
	if (rdss->cmd == 0)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <setRdssStartData+0x20>
		return i;
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	e040      	b.n	800427a <setRdssStartData+0xa2>
	if (rdss->id == 0)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	223a      	movs	r2, #58	; 0x3a
 80041fc:	5c9b      	ldrb	r3, [r3, r2]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <setRdssStartData+0x32>
		return i;
 8004202:	230f      	movs	r3, #15
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	e037      	b.n	800427a <setRdssStartData+0xa2>
	buffer[i++] = LTEL_START_MARK;
 800420a:	200f      	movs	r0, #15
 800420c:	183b      	adds	r3, r7, r0
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	183a      	adds	r2, r7, r0
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	7011      	strb	r1, [r2, #0]
 8004216:	001a      	movs	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	189b      	adds	r3, r3, r2
 800421c:	227e      	movs	r2, #126	; 0x7e
 800421e:	701a      	strb	r2, [r3, #0]
	buffer[i++] = VLADR;
 8004220:	183b      	adds	r3, r7, r0
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	183a      	adds	r2, r7, r0
 8004226:	1c59      	adds	r1, r3, #1
 8004228:	7011      	strb	r1, [r2, #0]
 800422a:	001a      	movs	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	189b      	adds	r3, r3, r2
 8004230:	2205      	movs	r2, #5
 8004232:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8004234:	183b      	adds	r3, r7, r0
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	183a      	adds	r2, r7, r0
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	7011      	strb	r1, [r2, #0]
 800423e:	001a      	movs	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	189b      	adds	r3, r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	213a      	movs	r1, #58	; 0x3a
 8004248:	5c52      	ldrb	r2, [r2, r1]
 800424a:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 800424c:	183b      	adds	r3, r7, r0
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	183a      	adds	r2, r7, r0
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	7011      	strb	r1, [r2, #0]
 8004256:	001a      	movs	r2, r3
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	189b      	adds	r3, r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8004262:	183b      	adds	r3, r7, r0
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	183a      	adds	r2, r7, r0
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	7011      	strb	r1, [r2, #0]
 800426c:	001a      	movs	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	189b      	adds	r3, r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
	return i;
 8004276:	183b      	adds	r3, r7, r0
 8004278:	781b      	ldrb	r3, [r3, #0]
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <freqDecode>:

uint32_t freqDecode(uint8_t *buffer) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	3201      	adds	r2, #1
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	0212      	lsls	r2, r2, #8
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	3202      	adds	r2, #2
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	0412      	lsls	r2, r2, #16
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	3203      	adds	r2, #3
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	0612      	lsls	r2, r2, #24
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4905      	ldr	r1, [pc, #20]	; (80042dc <freqDecode+0x58>)
 80042c8:	1c18      	adds	r0, r3, #0
 80042ca:	f7fc fc53 	bl	8000b74 <__aeabi_fmul>
 80042ce:	1c03      	adds	r3, r0, #0
 80042d0:	60fb      	str	r3, [r7, #12]

	return freq.i;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	49742400 	.word	0x49742400

080042e0 <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 80042ea:	6838      	ldr	r0, [r7, #0]
 80042ec:	f7fc ff36 	bl	800115c <__aeabi_ui2f>
 80042f0:	1c03      	adds	r3, r0, #0
 80042f2:	4908      	ldr	r1, [pc, #32]	; (8004314 <freqEncode+0x34>)
 80042f4:	1c18      	adds	r0, r3, #0
 80042f6:	f7fc fa75 	bl	80007e4 <__aeabi_fdiv>
 80042fa:	1c03      	adds	r3, r0, #0
 80042fc:	60fb      	str	r3, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 80042fe:	230c      	movs	r3, #12
 8004300:	18f9      	adds	r1, r7, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2204      	movs	r2, #4
 8004306:	0018      	movs	r0, r3
 8004308:	f002 f9e0 	bl	80066cc <memcpy>
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b004      	add	sp, #16
 8004312:	bd80      	pop	{r7, pc}
 8004314:	49742400 	.word	0x49742400

08004318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <HAL_MspInit+0x44>)
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_MspInit+0x44>)
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_MspInit+0x44>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_MspInit+0x44>)
 8004338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_MspInit+0x44>)
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	0549      	lsls	r1, r1, #21
 8004340:	430a      	orrs	r2, r1
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_MspInit+0x44>)
 8004346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	055b      	lsls	r3, r3, #21
 800434c:	4013      	ands	r3, r2
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b002      	add	sp, #8
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40021000 	.word	0x40021000

08004360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b08b      	sub	sp, #44	; 0x2c
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	2414      	movs	r4, #20
 800436a:	193b      	adds	r3, r7, r4
 800436c:	0018      	movs	r0, r3
 800436e:	2314      	movs	r3, #20
 8004370:	001a      	movs	r2, r3
 8004372:	2100      	movs	r1, #0
 8004374:	f002 f9b3 	bl	80066de <memset>
  if(hspi->Instance==SPI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <HAL_SPI_MspInit+0xd0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d152      	bne.n	8004428 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 8004384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	0149      	lsls	r1, r1, #5
 800438c:	430a      	orrs	r2, r1
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 8004392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	015b      	lsls	r3, r3, #5
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a2:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043a4:	2101      	movs	r1, #1
 80043a6:	430a      	orrs	r2, r1
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	2201      	movs	r2, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043bc:	2102      	movs	r1, #2
 80043be:	430a      	orrs	r2, r1
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_SPI_MspInit+0xd4>)
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	2202      	movs	r2, #2
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	22c0      	movs	r2, #192	; 0xc0
 80043d2:	0152      	lsls	r2, r2, #5
 80043d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d6:	193b      	adds	r3, r7, r4
 80043d8:	2202      	movs	r2, #2
 80043da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	193b      	adds	r3, r7, r4
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80043e8:	193b      	adds	r3, r7, r4
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ee:	193a      	adds	r2, r7, r4
 80043f0:	23a0      	movs	r3, #160	; 0xa0
 80043f2:	05db      	lsls	r3, r3, #23
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 fbb6 	bl	8004b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 80043fc:	0021      	movs	r1, r4
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	2208      	movs	r2, #8
 8004402:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	187b      	adds	r3, r7, r1
 8004406:	2202      	movs	r2, #2
 8004408:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004410:	187b      	adds	r3, r7, r1
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 800441c:	187b      	adds	r3, r7, r1
 800441e:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_SPI_MspInit+0xd8>)
 8004420:	0019      	movs	r1, r3
 8004422:	0010      	movs	r0, r2
 8004424:	f000 fba0 	bl	8004b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b00b      	add	sp, #44	; 0x2c
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	40013000 	.word	0x40013000
 8004434:	40021000 	.word	0x40021000
 8004438:	50000400 	.word	0x50000400

0800443c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <NMI_Handler+0x4>

08004442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004446:	e7fe      	b.n	8004446 <HardFault_Handler+0x4>

08004448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004460:	f000 fa8e 	bl	8004980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004474:	4a14      	ldr	r2, [pc, #80]	; (80044c8 <_sbrk+0x5c>)
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <_sbrk+0x60>)
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <_sbrk+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <_sbrk+0x64>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <_sbrk+0x68>)
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <_sbrk+0x64>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d207      	bcs.n	80044ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800449c:	f002 f8de 	bl	800665c <__errno>
 80044a0:	0003      	movs	r3, r0
 80044a2:	220c      	movs	r2, #12
 80044a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	425b      	negs	r3, r3
 80044aa:	e009      	b.n	80044c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_sbrk+0x64>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <_sbrk+0x64>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	18d2      	adds	r2, r2, r3
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_sbrk+0x64>)
 80044bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20002000 	.word	0x20002000
 80044cc:	00000400 	.word	0x00000400
 80044d0:	20000104 	.word	0x20000104
 80044d4:	20000120 	.word	0x20000120

080044d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	0002      	movs	r2, r0
 80044ec:	1dfb      	adds	r3, r7, #7
 80044ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b7f      	cmp	r3, #127	; 0x7f
 80044f6:	d809      	bhi.n	800450c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	001a      	movs	r2, r3
 80044fe:	231f      	movs	r3, #31
 8004500:	401a      	ands	r2, r3
 8004502:	4b04      	ldr	r3, [pc, #16]	; (8004514 <__NVIC_EnableIRQ+0x30>)
 8004504:	2101      	movs	r1, #1
 8004506:	4091      	lsls	r1, r2
 8004508:	000a      	movs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000e100 	.word	0xe000e100

08004518 <uart1_gpio_init>:
		return 1;
	}
	return 0;
}

void uart1_gpio_init() {
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 800451c:	23a0      	movs	r3, #160	; 0xa0
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	23a0      	movs	r3, #160	; 0xa0
 8004524:	05db      	lsls	r3, r3, #23
 8004526:	4930      	ldr	r1, [pc, #192]	; (80045e8 <uart1_gpio_init+0xd0>)
 8004528:	400a      	ands	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 800452c:	23a0      	movs	r3, #160	; 0xa0
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	23a0      	movs	r3, #160	; 0xa0
 8004534:	05db      	lsls	r3, r3, #23
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	0389      	lsls	r1, r1, #14
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800453e:	23a0      	movs	r3, #160	; 0xa0
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	23a0      	movs	r3, #160	; 0xa0
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	4928      	ldr	r1, [pc, #160]	; (80045ec <uart1_gpio_init+0xd4>)
 800454a:	400a      	ands	r2, r1
 800454c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800454e:	23a0      	movs	r3, #160	; 0xa0
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	23a0      	movs	r3, #160	; 0xa0
 8004556:	05db      	lsls	r3, r3, #23
 8004558:	2180      	movs	r1, #128	; 0x80
 800455a:	0309      	lsls	r1, r1, #12
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8004560:	23a0      	movs	r3, #160	; 0xa0
 8004562:	05db      	lsls	r3, r3, #23
 8004564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004566:	23a0      	movs	r3, #160	; 0xa0
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	0049      	lsls	r1, r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 8004572:	23a0      	movs	r3, #160	; 0xa0
 8004574:	05db      	lsls	r3, r3, #23
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	23a0      	movs	r3, #160	; 0xa0
 800457a:	05db      	lsls	r3, r3, #23
 800457c:	491c      	ldr	r1, [pc, #112]	; (80045f0 <uart1_gpio_init+0xd8>)
 800457e:	400a      	ands	r2, r1
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 8004582:	23a0      	movs	r3, #160	; 0xa0
 8004584:	05db      	lsls	r3, r3, #23
 8004586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004588:	23a0      	movs	r3, #160	; 0xa0
 800458a:	05db      	lsls	r3, r3, #23
 800458c:	4919      	ldr	r1, [pc, #100]	; (80045f4 <uart1_gpio_init+0xdc>)
 800458e:	400a      	ands	r2, r1
 8004590:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 8004592:	23a0      	movs	r3, #160	; 0xa0
 8004594:	05db      	lsls	r3, r3, #23
 8004596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004598:	23a0      	movs	r3, #160	; 0xa0
 800459a:	05db      	lsls	r3, r3, #23
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <uart1_gpio_init+0xe0>)
 800459e:	400a      	ands	r2, r1
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 80045a2:	23a0      	movs	r3, #160	; 0xa0
 80045a4:	05db      	lsls	r3, r3, #23
 80045a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a8:	23a0      	movs	r3, #160	; 0xa0
 80045aa:	05db      	lsls	r3, r3, #23
 80045ac:	2110      	movs	r1, #16
 80045ae:	430a      	orrs	r2, r1
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 80045b2:	23a0      	movs	r3, #160	; 0xa0
 80045b4:	05db      	lsls	r3, r3, #23
 80045b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b8:	23a0      	movs	r3, #160	; 0xa0
 80045ba:	05db      	lsls	r3, r3, #23
 80045bc:	2120      	movs	r1, #32
 80045be:	438a      	bics	r2, r1
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 80045c2:	23a0      	movs	r3, #160	; 0xa0
 80045c4:	05db      	lsls	r3, r3, #23
 80045c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c8:	23a0      	movs	r3, #160	; 0xa0
 80045ca:	05db      	lsls	r3, r3, #23
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	438a      	bics	r2, r1
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 80045d2:	23a0      	movs	r3, #160	; 0xa0
 80045d4:	05db      	lsls	r3, r3, #23
 80045d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d8:	23a0      	movs	r3, #160	; 0xa0
 80045da:	05db      	lsls	r3, r3, #23
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	438a      	bics	r2, r1
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	ffefffff 	.word	0xffefffff
 80045ec:	fffbffff 	.word	0xfffbffff
 80045f0:	fffffdff 	.word	0xfffffdff
 80045f4:	fffffbff 	.word	0xfffffbff
 80045f8:	fffff7ff 	.word	0xfffff7ff

080045fc <uart1Init>:

UART1_t* uart1Init(uint32_t pclk, uint32_t baud_rate) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	uint32_t br_value = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
	UART1_t * u1;
	u1 = malloc(sizeof(UART1_t));
 800460a:	2070      	movs	r0, #112	; 0x70
 800460c:	f002 f854 	bl	80066b8 <malloc>
 8004610:	0003      	movs	r3, r0
 8004612:	60bb      	str	r3, [r7, #8]

	memset(u1->rx,0,sizeof(u1->rx));
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2232      	movs	r2, #50	; 0x32
 8004618:	2100      	movs	r1, #0
 800461a:	0018      	movs	r0, r3
 800461c:	f002 f85f 	bl	80066de <memset>
	memset(u1->tx,0,sizeof(u1->tx));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3332      	adds	r3, #50	; 0x32
 8004624:	2232      	movs	r2, #50	; 0x32
 8004626:	2100      	movs	r1, #0
 8004628:	0018      	movs	r0, r3
 800462a:	f002 f858 	bl	80066de <memset>

	u1->isReady = false;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	226c      	movs	r2, #108	; 0x6c
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

	uart1_gpio_init();
 8004636:	f7ff ff6f 	bl	8004518 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 800463a:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <uart1Init+0xb8>)
 800463c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <uart1Init+0xb8>)
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	01c9      	lsls	r1, r1, #7
 8004644:	430a      	orrs	r2, r1
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <uart1Init+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10b      	bne.n	8004668 <uart1Init+0x6c>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <uart1Init+0xb8>)
 8004652:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004654:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <uart1Init+0xb8>)
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <uart1Init+0xb8>)
 800465e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <uart1Init+0xb8>)
 8004662:	2102      	movs	r1, #2
 8004664:	430a      	orrs	r2, r1
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fb fd52 	bl	8000114 <__udivsi3>
 8004670:	0003      	movs	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]
	USART1->BRR = (uint16_t) br_value;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	b29a      	uxth	r2, r3
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <uart1Init+0xc0>)
 800467a:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <uart1Init+0xc0>)
 800467e:	220c      	movs	r2, #12
 8004680:	601a      	str	r2, [r3, #0]
	u1->tx_len = 0;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2264      	movs	r2, #100	; 0x64
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]
	//uart1_clean_buffer(u);

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <uart1Init+0xc0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <uart1Init+0xc0>)
 8004690:	2120      	movs	r1, #32
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8004696:	201b      	movs	r0, #27
 8004698:	f7ff ff24 	bl	80044e4 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <uart1Init+0xc0>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <uart1Init+0xc0>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
	return u1;
 80046a8:	68bb      	ldr	r3, [r7, #8]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	40021000 	.word	0x40021000
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	40013800 	.word	0x40013800

080046c0 <writeTxReg>:
	/* set the destination buffer */
	/*set the source buffer */

}

void writeTxReg(uint8_t ch) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	0002      	movs	r2, r0
 80046c8:	1dfb      	adds	r3, r7, #7
 80046ca:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <writeTxReg+0x50>)
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <writeTxReg+0x50>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0089      	lsls	r1, r1, #2
 80046d6:	430a      	orrs	r2, r1
 80046d8:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <writeTxReg+0x54>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	4013      	ands	r3, r2
 80046e4:	d0fa      	beq.n	80046dc <writeTxReg+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <writeTxReg+0x54>)
 80046e8:	1dfa      	adds	r2, r7, #7
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <writeTxReg+0x54>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	4013      	ands	r3, r2
 80046f8:	d0fa      	beq.n	80046f0 <writeTxReg+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <writeTxReg+0x50>)
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <writeTxReg+0x50>)
 8004700:	4905      	ldr	r1, [pc, #20]	; (8004718 <writeTxReg+0x58>)
 8004702:	400a      	ands	r2, r1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	50000400 	.word	0x50000400
 8004714:	40013800 	.word	0x40013800
 8004718:	fffffdff 	.word	0xfffffdff

0800471c <readRxReg>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t readRxReg(void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <readRxReg+0x68>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	2208      	movs	r2, #8
 8004728:	401a      	ands	r2, r3
 800472a:	1dfb      	adds	r3, r7, #7
 800472c:	1e51      	subs	r1, r2, #1
 800472e:	418a      	sbcs	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <readRxReg+0x68>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2220      	movs	r2, #32
 8004738:	401a      	ands	r2, r3
 800473a:	1dbb      	adds	r3, r7, #6
 800473c:	1e51      	subs	r1, r2, #1
 800473e:	418a      	sbcs	r2, r1
 8004740:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8004742:	1dbb      	adds	r3, r7, #6
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <readRxReg+0x36>
 800474a:	1dfb      	adds	r3, r7, #7
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d012      	beq.n	8004778 <readRxReg+0x5c>
		if (override)
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <readRxReg+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <readRxReg+0x68>)
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <readRxReg+0x68>)
 8004760:	2108      	movs	r1, #8
 8004762:	430a      	orrs	r2, r1
 8004764:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <readRxReg+0x68>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	b2da      	uxtb	r2, r3
 800476c:	1d7b      	adds	r3, r7, #5
 800476e:	701a      	strb	r2, [r3, #0]
		return data;
 8004770:	1d7b      	adds	r3, r7, #5
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e000      	b.n	800477a <readRxReg+0x5e>
	} else
		return '\0';
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40013800 	.word	0x40013800

08004788 <writeTxBuffer>:
void writeTxStr(char *str) {
	for (uint8_t i = 0; str[i] != '\0'; i++)
		writeTxReg(str[i]);
}

void writeTxBuffer(uint8_t *str, uint8_t len) {
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	000a      	movs	r2, r1
 8004792:	1cfb      	adds	r3, r7, #3
 8004794:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8004796:	230f      	movs	r3, #15
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e014      	b.n	80047ca <writeTxBuffer+0x42>
		writeTxReg(str[i]);
 80047a0:	240f      	movs	r4, #15
 80047a2:	193b      	adds	r3, r7, r4
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7ff ff87 	bl	80046c0 <writeTxReg>
		str[i] = '\0';
 80047b2:	0021      	movs	r1, r4
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80047c0:	187b      	adds	r3, r7, r1
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	3201      	adds	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	230f      	movs	r3, #15
 80047cc:	18fa      	adds	r2, r7, r3
 80047ce:	1cfb      	adds	r3, r7, #3
 80047d0:	7812      	ldrb	r2, [r2, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d3e3      	bcc.n	80047a0 <writeTxBuffer+0x18>
	}
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b005      	add	sp, #20
 80047e0:	bd90      	pop	{r4, r7, pc}

080047e2 <writeTx>:

void writeTx(UART1_t *uart1) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
	writeTxBuffer(uart1->tx, uart1->tx_len);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	001a      	movs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2164      	movs	r1, #100	; 0x64
 80047f4:	5c5b      	ldrb	r3, [r3, r1]
 80047f6:	0019      	movs	r1, r3
 80047f8:	0010      	movs	r0, r2
 80047fa:	f7ff ffc5 	bl	8004788 <writeTxBuffer>
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}

08004806 <cleanRx>:

void cleanRx(UART1_t *u) {
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
	memset(u->rx, 0, sizeof(u->rx));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2232      	movs	r2, #50	; 0x32
 8004812:	2100      	movs	r1, #0
 8004814:	0018      	movs	r0, r3
 8004816:	f001 ff62 	bl	80066de <memset>
	u->rxLen = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2265      	movs	r2, #101	; 0x65
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]
	u->isReady = false;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	226c      	movs	r2, #108	; 0x6c
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]
}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b002      	add	sp, #8
 8004830:	bd80      	pop	{r7, pc}

08004832 <cleanTx>:

void cleanTx(UART1_t *u) {
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
	memset(u->tx, 0, sizeof(u->tx));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3332      	adds	r3, #50	; 0x32
 800483e:	2232      	movs	r2, #50	; 0x32
 8004840:	2100      	movs	r1, #0
 8004842:	0018      	movs	r0, r3
 8004844:	f001 ff4b 	bl	80066de <memset>
	u->tx_len = 0;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2264      	movs	r2, #100	; 0x64
 800484c:	2100      	movs	r1, #0
 800484e:	5499      	strb	r1, [r3, r2]
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8004858:	480d      	ldr	r0, [pc, #52]	; (8004890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800485a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800485c:	f7ff fe3c 	bl	80044d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <LoopForever+0x6>)
  ldr r1, =_edata
 8004862:	490d      	ldr	r1, [pc, #52]	; (8004898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004864:	4a0d      	ldr	r2, [pc, #52]	; (800489c <LoopForever+0xe>)
  movs r3, #0
 8004866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004868:	e002      	b.n	8004870 <LoopCopyDataInit>

0800486a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800486a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800486c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800486e:	3304      	adds	r3, #4

08004870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004874:	d3f9      	bcc.n	800486a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004878:	4c0a      	ldr	r4, [pc, #40]	; (80048a4 <LoopForever+0x16>)
  movs r3, #0
 800487a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800487c:	e001      	b.n	8004882 <LoopFillZerobss>

0800487e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800487e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004880:	3204      	adds	r2, #4

08004882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004884:	d3fb      	bcc.n	800487e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004886:	f001 fef3 	bl	8006670 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800488a:	f7fd fd31 	bl	80022f0 <main>

0800488e <LoopForever>:

LoopForever:
  b LoopForever
 800488e:	e7fe      	b.n	800488e <LoopForever>
  ldr   r0, =_estack
 8004890:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004898:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800489c:	08007560 	.word	0x08007560
  ldr r2, =_sbss
 80048a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80048a4:	2000011c 	.word	0x2000011c

080048a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048a8:	e7fe      	b.n	80048a8 <ADC1_IRQHandler>
	...

080048ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048b2:	1dfb      	adds	r3, r7, #7
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_Init+0x3c>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_Init+0x3c>)
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	0049      	lsls	r1, r1, #1
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048c6:	2003      	movs	r0, #3
 80048c8:	f000 f810 	bl	80048ec <HAL_InitTick>
 80048cc:	1e03      	subs	r3, r0, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e001      	b.n	80048dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80048d8:	f7ff fd1e 	bl	8004318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	781b      	ldrb	r3, [r3, #0]
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40022000 	.word	0x40022000

080048ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_InitTick+0x88>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d02b      	beq.n	800495c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_InitTick+0x8c>)
 8004906:	681c      	ldr	r4, [r3, #0]
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <HAL_InitTick+0x88>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	0019      	movs	r1, r3
 800490e:	23fa      	movs	r3, #250	; 0xfa
 8004910:	0098      	lsls	r0, r3, #2
 8004912:	f7fb fbff 	bl	8000114 <__udivsi3>
 8004916:	0003      	movs	r3, r0
 8004918:	0019      	movs	r1, r3
 800491a:	0020      	movs	r0, r4
 800491c:	f7fb fbfa 	bl	8000114 <__udivsi3>
 8004920:	0003      	movs	r3, r0
 8004922:	0018      	movs	r0, r3
 8004924:	f000 f913 	bl	8004b4e <HAL_SYSTICK_Config>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d112      	bne.n	8004952 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d80a      	bhi.n	8004948 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	2301      	movs	r3, #1
 8004936:	425b      	negs	r3, r3
 8004938:	2200      	movs	r2, #0
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f8f2 	bl	8004b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_InitTick+0x90>)
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00d      	b.n	8004964 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004948:	230f      	movs	r3, #15
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e008      	b.n	8004964 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004952:	230f      	movs	r3, #15
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e003      	b.n	8004964 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800495c:	230f      	movs	r3, #15
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004964:	230f      	movs	r3, #15
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	781b      	ldrb	r3, [r3, #0]
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b005      	add	sp, #20
 8004970:	bd90      	pop	{r4, r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	20000008 	.word	0x20000008
 8004978:	20000000 	.word	0x20000000
 800497c:	20000004 	.word	0x20000004

08004980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_IncTick+0x1c>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	001a      	movs	r2, r3
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_IncTick+0x20>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	18d2      	adds	r2, r2, r3
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_IncTick+0x20>)
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20000008 	.word	0x20000008
 80049a0:	20000108 	.word	0x20000108

080049a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  return uwTick;
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <HAL_GetTick+0x10>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	20000108 	.word	0x20000108

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff fff0 	bl	80049a4 <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	d005      	beq.n	80049de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_Delay+0x44>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	001a      	movs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	f7ff ffe0 	bl	80049a4 <HAL_GetTick>
 80049e4:	0002      	movs	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d8f7      	bhi.n	80049e0 <HAL_Delay+0x28>
  {
  }
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b004      	add	sp, #16
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	20000008 	.word	0x20000008

08004a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	0002      	movs	r2, r0
 8004a08:	6039      	str	r1, [r7, #0]
 8004a0a:	1dfb      	adds	r3, r7, #7
 8004a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b7f      	cmp	r3, #127	; 0x7f
 8004a14:	d828      	bhi.n	8004a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a16:	4a2f      	ldr	r2, [pc, #188]	; (8004ad4 <__NVIC_SetPriority+0xd4>)
 8004a18:	1dfb      	adds	r3, r7, #7
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b25b      	sxtb	r3, r3
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	33c0      	adds	r3, #192	; 0xc0
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	589b      	ldr	r3, [r3, r2]
 8004a26:	1dfa      	adds	r2, r7, #7
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	400a      	ands	r2, r1
 8004a30:	00d2      	lsls	r2, r2, #3
 8004a32:	21ff      	movs	r1, #255	; 0xff
 8004a34:	4091      	lsls	r1, r2
 8004a36:	000a      	movs	r2, r1
 8004a38:	43d2      	mvns	r2, r2
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	401a      	ands	r2, r3
 8004a46:	1dfb      	adds	r3, r7, #7
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	4003      	ands	r3, r0
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a54:	481f      	ldr	r0, [pc, #124]	; (8004ad4 <__NVIC_SetPriority+0xd4>)
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	33c0      	adds	r3, #192	; 0xc0
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a66:	e031      	b.n	8004acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <__NVIC_SetPriority+0xd8>)
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	0019      	movs	r1, r3
 8004a70:	230f      	movs	r3, #15
 8004a72:	400b      	ands	r3, r1
 8004a74:	3b08      	subs	r3, #8
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3306      	adds	r3, #6
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	18d3      	adds	r3, r2, r3
 8004a7e:	3304      	adds	r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1dfa      	adds	r2, r7, #7
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	0011      	movs	r1, r2
 8004a88:	2203      	movs	r2, #3
 8004a8a:	400a      	ands	r2, r1
 8004a8c:	00d2      	lsls	r2, r2, #3
 8004a8e:	21ff      	movs	r1, #255	; 0xff
 8004a90:	4091      	lsls	r1, r2
 8004a92:	000a      	movs	r2, r1
 8004a94:	43d2      	mvns	r2, r2
 8004a96:	401a      	ands	r2, r3
 8004a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	019b      	lsls	r3, r3, #6
 8004a9e:	22ff      	movs	r2, #255	; 0xff
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	1dfb      	adds	r3, r7, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	4003      	ands	r3, r0
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <__NVIC_SetPriority+0xd8>)
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	001c      	movs	r4, r3
 8004ab8:	230f      	movs	r3, #15
 8004aba:	4023      	ands	r3, r4
 8004abc:	3b08      	subs	r3, #8
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	3306      	adds	r3, #6
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18c3      	adds	r3, r0, r3
 8004ac8:	3304      	adds	r3, #4
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bd90      	pop	{r4, r7, pc}
 8004ad4:	e000e100 	.word	0xe000e100
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	045b      	lsls	r3, r3, #17
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d301      	bcc.n	8004af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004af0:	2301      	movs	r3, #1
 8004af2:	e010      	b.n	8004b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <SysTick_Config+0x44>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	3a01      	subs	r2, #1
 8004afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afc:	2301      	movs	r3, #1
 8004afe:	425b      	negs	r3, r3
 8004b00:	2103      	movs	r1, #3
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7ff ff7c 	bl	8004a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <SysTick_Config+0x44>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <SysTick_Config+0x44>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b002      	add	sp, #8
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	e000e010 	.word	0xe000e010

08004b24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	210f      	movs	r1, #15
 8004b30:	187b      	adds	r3, r7, r1
 8004b32:	1c02      	adds	r2, r0, #0
 8004b34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	0011      	movs	r1, r2
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7ff ff5d 	bl	8004a00 <__NVIC_SetPriority>
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b004      	add	sp, #16
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff ffbf 	bl	8004adc <SysTick_Config>
 8004b5e:	0003      	movs	r3, r0
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b76:	e147      	b.n	8004e08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4091      	lsls	r1, r2
 8004b82:	000a      	movs	r2, r1
 8004b84:	4013      	ands	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d100      	bne.n	8004b90 <HAL_GPIO_Init+0x28>
 8004b8e:	e138      	b.n	8004e02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d005      	beq.n	8004ba8 <HAL_GPIO_Init+0x40>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d130      	bne.n	8004c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	43da      	mvns	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	0013      	movs	r3, r2
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bde:	2201      	movs	r2, #1
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	409a      	lsls	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	43da      	mvns	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d017      	beq.n	8004c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2203      	movs	r2, #3
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	409a      	lsls	r2, r3
 8004c38:	0013      	movs	r3, r2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d123      	bne.n	8004c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	08da      	lsrs	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3208      	adds	r2, #8
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	58d3      	ldr	r3, [r2, r3]
 8004c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2207      	movs	r2, #7
 8004c64:	4013      	ands	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	220f      	movs	r2, #15
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2107      	movs	r1, #7
 8004c7e:	400b      	ands	r3, r1
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	08da      	lsrs	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3208      	adds	r2, #8
 8004c94:	0092      	lsls	r2, r2, #2
 8004c96:	6939      	ldr	r1, [r7, #16]
 8004c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	0013      	movs	r3, r2
 8004caa:	43da      	mvns	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	401a      	ands	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	23c0      	movs	r3, #192	; 0xc0
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d100      	bne.n	8004cdc <HAL_GPIO_Init+0x174>
 8004cda:	e092      	b.n	8004e02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004cdc:	4a50      	ldr	r2, [pc, #320]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	3318      	adds	r3, #24
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	589b      	ldr	r3, [r3, r2]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2203      	movs	r2, #3
 8004cee:	4013      	ands	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	23a0      	movs	r3, #160	; 0xa0
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d013      	beq.n	8004d32 <HAL_GPIO_Init+0x1ca>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a45      	ldr	r2, [pc, #276]	; (8004e24 <HAL_GPIO_Init+0x2bc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00d      	beq.n	8004d2e <HAL_GPIO_Init+0x1c6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a44      	ldr	r2, [pc, #272]	; (8004e28 <HAL_GPIO_Init+0x2c0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <HAL_GPIO_Init+0x1c2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a43      	ldr	r2, [pc, #268]	; (8004e2c <HAL_GPIO_Init+0x2c4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_GPIO_Init+0x1be>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e006      	b.n	8004d34 <HAL_GPIO_Init+0x1cc>
 8004d26:	2305      	movs	r3, #5
 8004d28:	e004      	b.n	8004d34 <HAL_GPIO_Init+0x1cc>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e002      	b.n	8004d34 <HAL_GPIO_Init+0x1cc>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_GPIO_Init+0x1cc>
 8004d32:	2300      	movs	r3, #0
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	2103      	movs	r1, #3
 8004d38:	400a      	ands	r2, r1
 8004d3a:	00d2      	lsls	r2, r2, #3
 8004d3c:	4093      	lsls	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004d44:	4936      	ldr	r1, [pc, #216]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d52:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	035b      	lsls	r3, r3, #13
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d76:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	039b      	lsls	r3, r3, #14
 8004d94:	4013      	ands	r3, r2
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004da8:	2384      	movs	r3, #132	; 0x84
 8004daa:	58d3      	ldr	r3, [r2, r3]
 8004dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4013      	ands	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dcc:	4914      	ldr	r1, [pc, #80]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004dce:	2284      	movs	r2, #132	; 0x84
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004dd4:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	58d3      	ldr	r3, [r2, r3]
 8004dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	4013      	ands	r3, r2
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dfa:	4909      	ldr	r1, [pc, #36]	; (8004e20 <HAL_GPIO_Init+0x2b8>)
 8004dfc:	2280      	movs	r2, #128	; 0x80
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3301      	adds	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	40da      	lsrs	r2, r3
 8004e10:	1e13      	subs	r3, r2, #0
 8004e12:	d000      	beq.n	8004e16 <HAL_GPIO_Init+0x2ae>
 8004e14:	e6b0      	b.n	8004b78 <HAL_GPIO_Init+0x10>
  }
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b006      	add	sp, #24
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021800 	.word	0x40021800
 8004e24:	50000400 	.word	0x50000400
 8004e28:	50000800 	.word	0x50000800
 8004e2c:	50000c00 	.word	0x50000c00

08004e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	000a      	movs	r2, r1
 8004e3a:	1cbb      	adds	r3, r7, #2
 8004e3c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	1cba      	adds	r2, r7, #2
 8004e44:	8812      	ldrh	r2, [r2, #0]
 8004e46:	4013      	ands	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004e4a:	230f      	movs	r3, #15
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e003      	b.n	8004e5c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e54:	230f      	movs	r3, #15
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	781b      	ldrb	r3, [r3, #0]
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	0008      	movs	r0, r1
 8004e74:	0011      	movs	r1, r2
 8004e76:	1cbb      	adds	r3, r7, #2
 8004e78:	1c02      	adds	r2, r0, #0
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	1c7b      	adds	r3, r7, #1
 8004e7e:	1c0a      	adds	r2, r1, #0
 8004e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e82:	1c7b      	adds	r3, r7, #1
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e8a:	1cbb      	adds	r3, r7, #2
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e92:	e003      	b.n	8004e9c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e94:	1cbb      	adds	r3, r7, #2
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d11f      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	0013      	movs	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4912      	ldr	r1, [pc, #72]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fb f91c 	bl	8000114 <__udivsi3>
 8004edc:	0003      	movs	r3, r0
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ee2:	e008      	b.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e001      	b.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e009      	b.n	8004f0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	401a      	ands	r2, r3
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d0ed      	beq.n	8004ee4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b004      	add	sp, #16
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	40007000 	.word	0x40007000
 8004f18:	fffff9ff 	.word	0xfffff9ff
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	000f4240 	.word	0x000f4240

08004f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e2f3      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <HAL_RCC_OscConfig+0x1e>
 8004f40:	e07c      	b.n	800503c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	4bc3      	ldr	r3, [pc, #780]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2238      	movs	r2, #56	; 0x38
 8004f48:	4013      	ands	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4c:	4bc0      	ldr	r3, [pc, #768]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2203      	movs	r2, #3
 8004f52:	4013      	ands	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_OscConfig+0x3e>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	4bb9      	ldr	r3, [pc, #740]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	029b      	lsls	r3, r3, #10
 8004f70:	4013      	ands	r3, r2
 8004f72:	d062      	beq.n	800503a <HAL_RCC_OscConfig+0x116>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d15e      	bne.n	800503a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e2ce      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	025b      	lsls	r3, r3, #9
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCC_OscConfig+0x78>
 8004f8c:	4bb0      	ldr	r3, [pc, #704]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4baf      	ldr	r3, [pc, #700]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	0249      	lsls	r1, r1, #9
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e020      	b.n	8004fde <HAL_RCC_OscConfig+0xba>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	23a0      	movs	r3, #160	; 0xa0
 8004fa2:	02db      	lsls	r3, r3, #11
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_RCC_OscConfig+0xa2>
 8004fa8:	4ba9      	ldr	r3, [pc, #676]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4ba8      	ldr	r3, [pc, #672]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	02c9      	lsls	r1, r1, #11
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4ba6      	ldr	r3, [pc, #664]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4ba5      	ldr	r3, [pc, #660]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	0249      	lsls	r1, r1, #9
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e00b      	b.n	8004fde <HAL_RCC_OscConfig+0xba>
 8004fc6:	4ba2      	ldr	r3, [pc, #648]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4ba1      	ldr	r3, [pc, #644]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fcc:	49a1      	ldr	r1, [pc, #644]	; (8005254 <HAL_RCC_OscConfig+0x330>)
 8004fce:	400a      	ands	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	4b9f      	ldr	r3, [pc, #636]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b9e      	ldr	r3, [pc, #632]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8004fd8:	499f      	ldr	r1, [pc, #636]	; (8005258 <HAL_RCC_OscConfig+0x334>)
 8004fda:	400a      	ands	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d014      	beq.n	8005010 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7ff fcdd 	bl	80049a4 <HAL_GetTick>
 8004fea:	0003      	movs	r3, r0
 8004fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7ff fcd8 	bl	80049a4 <HAL_GetTick>
 8004ff4:	0002      	movs	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e28d      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005002:	4b93      	ldr	r3, [pc, #588]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	029b      	lsls	r3, r3, #10
 800500a:	4013      	ands	r3, r2
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xcc>
 800500e:	e015      	b.n	800503c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7ff fcc8 	bl	80049a4 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800501a:	f7ff fcc3 	bl	80049a4 <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b64      	cmp	r3, #100	; 0x64
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e278      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800502c:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	4013      	ands	r3, r2
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0xf6>
 8005038:	e000      	b.n	800503c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2202      	movs	r2, #2
 8005042:	4013      	ands	r3, r2
 8005044:	d100      	bne.n	8005048 <HAL_RCC_OscConfig+0x124>
 8005046:	e099      	b.n	800517c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005048:	4b81      	ldr	r3, [pc, #516]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2238      	movs	r2, #56	; 0x38
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005052:	4b7f      	ldr	r3, [pc, #508]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2203      	movs	r2, #3
 8005058:	4013      	ands	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b10      	cmp	r3, #16
 8005060:	d102      	bne.n	8005068 <HAL_RCC_OscConfig+0x144>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d002      	beq.n	800506e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d135      	bne.n	80050da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800506e:	4b78      	ldr	r3, [pc, #480]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4013      	ands	r3, r2
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x162>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e24b      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b72      	ldr	r3, [pc, #456]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4a74      	ldr	r2, [pc, #464]	; (800525c <HAL_RCC_OscConfig+0x338>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	021a      	lsls	r2, r3, #8
 8005096:	4b6e      	ldr	r3, [pc, #440]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d112      	bne.n	80050c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050a2:	4b6b      	ldr	r3, [pc, #428]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6e      	ldr	r2, [pc, #440]	; (8005260 <HAL_RCC_OscConfig+0x33c>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	4b67      	ldr	r3, [pc, #412]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80050b6:	4b66      	ldr	r3, [pc, #408]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	0adb      	lsrs	r3, r3, #11
 80050bc:	2207      	movs	r2, #7
 80050be:	4013      	ands	r3, r2
 80050c0:	4a68      	ldr	r2, [pc, #416]	; (8005264 <HAL_RCC_OscConfig+0x340>)
 80050c2:	40da      	lsrs	r2, r3
 80050c4:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_RCC_OscConfig+0x344>)
 80050c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050c8:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCC_OscConfig+0x348>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7ff fc0d 	bl	80048ec <HAL_InitTick>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d051      	beq.n	800517a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e221      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d030      	beq.n	8005144 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050e2:	4b5b      	ldr	r3, [pc, #364]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5e      	ldr	r2, [pc, #376]	; (8005260 <HAL_RCC_OscConfig+0x33c>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	0019      	movs	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	4b57      	ldr	r3, [pc, #348]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050f6:	4b56      	ldr	r3, [pc, #344]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b55      	ldr	r3, [pc, #340]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	0049      	lsls	r1, r1, #1
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7ff fc4e 	bl	80049a4 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510e:	f7ff fc49 	bl	80049a4 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1fe      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	4b4b      	ldr	r3, [pc, #300]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4013      	ands	r3, r2
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	4b48      	ldr	r3, [pc, #288]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a4a      	ldr	r2, [pc, #296]	; (800525c <HAL_RCC_OscConfig+0x338>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	021a      	lsls	r2, r3, #8
 800513c:	4b44      	ldr	r3, [pc, #272]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
 8005142:	e01b      	b.n	800517c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800514a:	4949      	ldr	r1, [pc, #292]	; (8005270 <HAL_RCC_OscConfig+0x34c>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7ff fc28 	bl	80049a4 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515a:	f7ff fc23 	bl	80049a4 <HAL_GetTick>
 800515e:	0002      	movs	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e1d8      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516c:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4013      	ands	r3, r2
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x236>
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800517a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2208      	movs	r2, #8
 8005182:	4013      	ands	r3, r2
 8005184:	d047      	beq.n	8005216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005186:	4b32      	ldr	r3, [pc, #200]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2238      	movs	r2, #56	; 0x38
 800518c:	4013      	ands	r3, r2
 800518e:	2b18      	cmp	r3, #24
 8005190:	d10a      	bne.n	80051a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	2202      	movs	r2, #2
 8005198:	4013      	ands	r3, r2
 800519a:	d03c      	beq.n	8005216 <HAL_RCC_OscConfig+0x2f2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d138      	bne.n	8005216 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e1ba      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d019      	beq.n	80051e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80051b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051b4:	4b26      	ldr	r3, [pc, #152]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80051b6:	2101      	movs	r1, #1
 80051b8:	430a      	orrs	r2, r1
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7ff fbf2 	bl	80049a4 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c6:	f7ff fbed 	bl	80049a4 <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e1a2      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80051da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051dc:	2202      	movs	r2, #2
 80051de:	4013      	ands	r3, r2
 80051e0:	d0f1      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2a2>
 80051e2:	e018      	b.n	8005216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80051e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	438a      	bics	r2, r1
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7ff fbd8 	bl	80049a4 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fa:	f7ff fbd3 	bl	80049a4 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e188      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005210:	2202      	movs	r2, #2
 8005212:	4013      	ands	r3, r2
 8005214:	d1f1      	bne.n	80051fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2204      	movs	r2, #4
 800521c:	4013      	ands	r3, r2
 800521e:	d100      	bne.n	8005222 <HAL_RCC_OscConfig+0x2fe>
 8005220:	e0c6      	b.n	80053b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	231f      	movs	r3, #31
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2238      	movs	r2, #56	; 0x38
 8005230:	4013      	ands	r3, r2
 8005232:	2b20      	cmp	r3, #32
 8005234:	d11e      	bne.n	8005274 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_OscConfig+0x32c>)
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	2202      	movs	r2, #2
 800523c:	4013      	ands	r3, r2
 800523e:	d100      	bne.n	8005242 <HAL_RCC_OscConfig+0x31e>
 8005240:	e0b6      	b.n	80053b0 <HAL_RCC_OscConfig+0x48c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d000      	beq.n	800524c <HAL_RCC_OscConfig+0x328>
 800524a:	e0b1      	b.n	80053b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e166      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
 8005250:	40021000 	.word	0x40021000
 8005254:	fffeffff 	.word	0xfffeffff
 8005258:	fffbffff 	.word	0xfffbffff
 800525c:	ffff80ff 	.word	0xffff80ff
 8005260:	ffffc7ff 	.word	0xffffc7ff
 8005264:	00f42400 	.word	0x00f42400
 8005268:	20000000 	.word	0x20000000
 800526c:	20000004 	.word	0x20000004
 8005270:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005274:	4bac      	ldr	r3, [pc, #688]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	055b      	lsls	r3, r3, #21
 800527c:	4013      	ands	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_RCC_OscConfig+0x360>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCC_OscConfig+0x362>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d011      	beq.n	80052ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4ba7      	ldr	r3, [pc, #668]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800528c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528e:	4ba6      	ldr	r3, [pc, #664]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	0549      	lsls	r1, r1, #21
 8005294:	430a      	orrs	r2, r1
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c
 8005298:	4ba3      	ldr	r3, [pc, #652]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800529a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	055b      	lsls	r3, r3, #21
 80052a0:	4013      	ands	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80052a6:	231f      	movs	r3, #31
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ae:	4b9f      	ldr	r3, [pc, #636]	; (800552c <HAL_RCC_OscConfig+0x608>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	d11a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ba:	4b9c      	ldr	r3, [pc, #624]	; (800552c <HAL_RCC_OscConfig+0x608>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b9b      	ldr	r3, [pc, #620]	; (800552c <HAL_RCC_OscConfig+0x608>)
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	0049      	lsls	r1, r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80052c8:	f7ff fb6c 	bl	80049a4 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7ff fb67 	bl	80049a4 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e11c      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e4:	4b91      	ldr	r3, [pc, #580]	; (800552c <HAL_RCC_OscConfig+0x608>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x3e2>
 80052f8:	4b8b      	ldr	r3, [pc, #556]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80052fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052fc:	4b8a      	ldr	r3, [pc, #552]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80052fe:	2101      	movs	r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	65da      	str	r2, [r3, #92]	; 0x5c
 8005304:	e01c      	b.n	8005340 <HAL_RCC_OscConfig+0x41c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x404>
 800530e:	4b86      	ldr	r3, [pc, #536]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005312:	4b85      	ldr	r3, [pc, #532]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005314:	2104      	movs	r1, #4
 8005316:	430a      	orrs	r2, r1
 8005318:	65da      	str	r2, [r3, #92]	; 0x5c
 800531a:	4b83      	ldr	r3, [pc, #524]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800531c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531e:	4b82      	ldr	r3, [pc, #520]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005320:	2101      	movs	r1, #1
 8005322:	430a      	orrs	r2, r1
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x41c>
 8005328:	4b7f      	ldr	r3, [pc, #508]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800532a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800532c:	4b7e      	ldr	r3, [pc, #504]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800532e:	2101      	movs	r1, #1
 8005330:	438a      	bics	r2, r1
 8005332:	65da      	str	r2, [r3, #92]	; 0x5c
 8005334:	4b7c      	ldr	r3, [pc, #496]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005338:	4b7b      	ldr	r3, [pc, #492]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800533a:	2104      	movs	r1, #4
 800533c:	438a      	bics	r2, r1
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7ff fb2c 	bl	80049a4 <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005350:	e009      	b.n	8005366 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7ff fb27 	bl	80049a4 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	4a74      	ldr	r2, [pc, #464]	; (8005530 <HAL_RCC_OscConfig+0x60c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0db      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005366:	4b70      	ldr	r3, [pc, #448]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	2202      	movs	r2, #2
 800536c:	4013      	ands	r3, r2
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x42e>
 8005370:	e013      	b.n	800539a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7ff fb17 	bl	80049a4 <HAL_GetTick>
 8005376:	0003      	movs	r3, r0
 8005378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800537a:	e009      	b.n	8005390 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7ff fb12 	bl	80049a4 <HAL_GetTick>
 8005380:	0002      	movs	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	4a6a      	ldr	r2, [pc, #424]	; (8005530 <HAL_RCC_OscConfig+0x60c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e0c6      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005390:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	2202      	movs	r2, #2
 8005396:	4013      	ands	r3, r2
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800539a:	231f      	movs	r3, #31
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80053a4:	4b60      	ldr	r3, [pc, #384]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a8:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053aa:	4962      	ldr	r1, [pc, #392]	; (8005534 <HAL_RCC_OscConfig+0x610>)
 80053ac:	400a      	ands	r2, r1
 80053ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d100      	bne.n	80053ba <HAL_RCC_OscConfig+0x496>
 80053b8:	e0b0      	b.n	800551c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ba:	4b5b      	ldr	r3, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2238      	movs	r2, #56	; 0x38
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d100      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4a4>
 80053c6:	e078      	b.n	80054ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d153      	bne.n	8005478 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d0:	4b55      	ldr	r3, [pc, #340]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b54      	ldr	r3, [pc, #336]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053d6:	4958      	ldr	r1, [pc, #352]	; (8005538 <HAL_RCC_OscConfig+0x614>)
 80053d8:	400a      	ands	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7ff fae2 	bl	80049a4 <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e6:	f7ff fadd 	bl	80049a4 <HAL_GetTick>
 80053ea:	0002      	movs	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e092      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f8:	4b4b      	ldr	r3, [pc, #300]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	049b      	lsls	r3, r3, #18
 8005400:	4013      	ands	r3, r2
 8005402:	d1f0      	bne.n	80053e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005404:	4b48      	ldr	r3, [pc, #288]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a4c      	ldr	r2, [pc, #304]	; (800553c <HAL_RCC_OscConfig+0x618>)
 800540a:	4013      	ands	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	431a      	orrs	r2, r3
 800542c:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800542e:	430a      	orrs	r2, r1
 8005430:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b3c      	ldr	r3, [pc, #240]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005438:	2180      	movs	r1, #128	; 0x80
 800543a:	0449      	lsls	r1, r1, #17
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	4b38      	ldr	r3, [pc, #224]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 8005446:	2180      	movs	r1, #128	; 0x80
 8005448:	0549      	lsls	r1, r1, #21
 800544a:	430a      	orrs	r2, r1
 800544c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7ff faa9 	bl	80049a4 <HAL_GetTick>
 8005452:	0003      	movs	r3, r0
 8005454:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7ff faa4 	bl	80049a4 <HAL_GetTick>
 800545c:	0002      	movs	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e059      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	049b      	lsls	r3, r3, #18
 8005472:	4013      	ands	r3, r2
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x534>
 8005476:	e051      	b.n	800551c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005478:	4b2b      	ldr	r3, [pc, #172]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 800547e:	492e      	ldr	r1, [pc, #184]	; (8005538 <HAL_RCC_OscConfig+0x614>)
 8005480:	400a      	ands	r2, r1
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7ff fa8e 	bl	80049a4 <HAL_GetTick>
 8005488:	0003      	movs	r3, r0
 800548a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7ff fa89 	bl	80049a4 <HAL_GetTick>
 8005492:	0002      	movs	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e03e      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	049b      	lsls	r3, r3, #18
 80054a8:	4013      	ands	r3, r2
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80054ac:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80054b2:	4923      	ldr	r1, [pc, #140]	; (8005540 <HAL_RCC_OscConfig+0x61c>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	e030      	b.n	800551c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e02b      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <HAL_RCC_OscConfig+0x604>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2203      	movs	r2, #3
 80054d0:	401a      	ands	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d11e      	bne.n	8005518 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2270      	movs	r2, #112	; 0x70
 80054de:	401a      	ands	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d117      	bne.n	8005518 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	23fe      	movs	r3, #254	; 0xfe
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	401a      	ands	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d10e      	bne.n	8005518 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	23f8      	movs	r3, #248	; 0xf8
 80054fe:	039b      	lsls	r3, r3, #14
 8005500:	401a      	ands	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d106      	bne.n	8005518 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	0f5b      	lsrs	r3, r3, #29
 800550e:	075a      	lsls	r2, r3, #29
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	0018      	movs	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	b008      	add	sp, #32
 8005524:	bd80      	pop	{r7, pc}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
 8005530:	00001388 	.word	0x00001388
 8005534:	efffffff 	.word	0xefffffff
 8005538:	feffffff 	.word	0xfeffffff
 800553c:	1fc1808c 	.word	0x1fc1808c
 8005540:	effefffc 	.word	0xeffefffc

08005544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0e9      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	4b76      	ldr	r3, [pc, #472]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2207      	movs	r2, #7
 800555e:	4013      	ands	r3, r2
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d91e      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b73      	ldr	r3, [pc, #460]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2207      	movs	r2, #7
 800556c:	4393      	bics	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005578:	f7ff fa14 	bl	80049a4 <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005580:	e009      	b.n	8005596 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005582:	f7ff fa0f 	bl	80049a4 <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <HAL_RCC_ClockConfig+0x1f4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e0ca      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005596:	4b67      	ldr	r3, [pc, #412]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2207      	movs	r2, #7
 800559c:	4013      	ands	r3, r2
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1ee      	bne.n	8005582 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d015      	beq.n	80055da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2204      	movs	r2, #4
 80055b4:	4013      	ands	r3, r2
 80055b6:	d006      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055b8:	4b60      	ldr	r3, [pc, #384]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	4b5f      	ldr	r3, [pc, #380]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80055be:	21e0      	movs	r1, #224	; 0xe0
 80055c0:	01c9      	lsls	r1, r1, #7
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c6:	4b5d      	ldr	r3, [pc, #372]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	4a5d      	ldr	r2, [pc, #372]	; (8005740 <HAL_RCC_ClockConfig+0x1fc>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d057      	beq.n	8005694 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ec:	4b53      	ldr	r3, [pc, #332]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	4013      	ands	r3, r2
 80055f6:	d12b      	bne.n	8005650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e097      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d107      	bne.n	8005614 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005604:	4b4d      	ldr	r3, [pc, #308]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	049b      	lsls	r3, r3, #18
 800560c:	4013      	ands	r3, r2
 800560e:	d11f      	bne.n	8005650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e08b      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800561c:	4b47      	ldr	r3, [pc, #284]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4013      	ands	r3, r2
 8005626:	d113      	bne.n	8005650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e07f      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d106      	bne.n	8005642 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005634:	4b41      	ldr	r3, [pc, #260]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	2202      	movs	r2, #2
 800563a:	4013      	ands	r3, r2
 800563c:	d108      	bne.n	8005650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e074      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005646:	2202      	movs	r2, #2
 8005648:	4013      	ands	r3, r2
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e06d      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005650:	4b3a      	ldr	r3, [pc, #232]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2207      	movs	r2, #7
 8005656:	4393      	bics	r3, r2
 8005658:	0019      	movs	r1, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005664:	f7ff f99e 	bl	80049a4 <HAL_GetTick>
 8005668:	0003      	movs	r3, r0
 800566a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566c:	e009      	b.n	8005682 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800566e:	f7ff f999 	bl	80049a4 <HAL_GetTick>
 8005672:	0002      	movs	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <HAL_RCC_ClockConfig+0x1f4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e054      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	4b2e      	ldr	r3, [pc, #184]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2238      	movs	r2, #56	; 0x38
 8005688:	401a      	ands	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	429a      	cmp	r2, r3
 8005692:	d1ec      	bne.n	800566e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2207      	movs	r2, #7
 800569a:	4013      	ands	r3, r2
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d21e      	bcs.n	80056e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2207      	movs	r2, #7
 80056a8:	4393      	bics	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056b4:	f7ff f976 	bl	80049a4 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056bc:	e009      	b.n	80056d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056be:	f7ff f971 	bl	80049a4 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <HAL_RCC_ClockConfig+0x1f4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e02c      	b.n	800572c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056d2:	4b18      	ldr	r3, [pc, #96]	; (8005734 <HAL_RCC_ClockConfig+0x1f0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2207      	movs	r2, #7
 80056d8:	4013      	ands	r3, r2
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1ee      	bne.n	80056be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2204      	movs	r2, #4
 80056e6:	4013      	ands	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4a15      	ldr	r2, [pc, #84]	; (8005744 <HAL_RCC_ClockConfig+0x200>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056fe:	f000 f829 	bl	8005754 <HAL_RCC_GetSysClockFreq>
 8005702:	0001      	movs	r1, r0
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_RCC_ClockConfig+0x1f8>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	220f      	movs	r2, #15
 800570c:	401a      	ands	r2, r3
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_RCC_ClockConfig+0x204>)
 8005710:	0092      	lsls	r2, r2, #2
 8005712:	58d3      	ldr	r3, [r2, r3]
 8005714:	221f      	movs	r2, #31
 8005716:	4013      	ands	r3, r2
 8005718:	000a      	movs	r2, r1
 800571a:	40da      	lsrs	r2, r3
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_ClockConfig+0x208>)
 800571e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_ClockConfig+0x20c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff f8e1 	bl	80048ec <HAL_InitTick>
 800572a:	0003      	movs	r3, r0
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40022000 	.word	0x40022000
 8005738:	00001388 	.word	0x00001388
 800573c:	40021000 	.word	0x40021000
 8005740:	fffff0ff 	.word	0xfffff0ff
 8005744:	ffff8fff 	.word	0xffff8fff
 8005748:	0800747c 	.word	0x0800747c
 800574c:	20000000 	.word	0x20000000
 8005750:	20000004 	.word	0x20000004

08005754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800575a:	4b3c      	ldr	r3, [pc, #240]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2238      	movs	r2, #56	; 0x38
 8005760:	4013      	ands	r3, r2
 8005762:	d10f      	bne.n	8005784 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	0adb      	lsrs	r3, r3, #11
 800576a:	2207      	movs	r2, #7
 800576c:	4013      	ands	r3, r2
 800576e:	2201      	movs	r2, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	0013      	movs	r3, r2
 8005774:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	4835      	ldr	r0, [pc, #212]	; (8005850 <HAL_RCC_GetSysClockFreq+0xfc>)
 800577a:	f7fa fccb 	bl	8000114 <__udivsi3>
 800577e:	0003      	movs	r3, r0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e05d      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005784:	4b31      	ldr	r3, [pc, #196]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2238      	movs	r2, #56	; 0x38
 800578a:	4013      	ands	r3, r2
 800578c:	2b08      	cmp	r3, #8
 800578e:	d102      	bne.n	8005796 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005790:	4b30      	ldr	r3, [pc, #192]	; (8005854 <HAL_RCC_GetSysClockFreq+0x100>)
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	e054      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2238      	movs	r2, #56	; 0x38
 800579c:	4013      	ands	r3, r2
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d138      	bne.n	8005814 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057a2:	4b2a      	ldr	r3, [pc, #168]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2203      	movs	r2, #3
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057ac:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	2207      	movs	r2, #7
 80057b4:	4013      	ands	r3, r2
 80057b6:	3301      	adds	r3, #1
 80057b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d10d      	bne.n	80057dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4824      	ldr	r0, [pc, #144]	; (8005854 <HAL_RCC_GetSysClockFreq+0x100>)
 80057c4:	f7fa fca6 	bl	8000114 <__udivsi3>
 80057c8:	0003      	movs	r3, r0
 80057ca:	0019      	movs	r1, r3
 80057cc:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	227f      	movs	r2, #127	; 0x7f
 80057d4:	4013      	ands	r3, r2
 80057d6:	434b      	muls	r3, r1
 80057d8:	617b      	str	r3, [r7, #20]
        break;
 80057da:	e00d      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	481c      	ldr	r0, [pc, #112]	; (8005850 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057e0:	f7fa fc98 	bl	8000114 <__udivsi3>
 80057e4:	0003      	movs	r3, r0
 80057e6:	0019      	movs	r1, r3
 80057e8:	4b18      	ldr	r3, [pc, #96]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	227f      	movs	r2, #127	; 0x7f
 80057f0:	4013      	ands	r3, r2
 80057f2:	434b      	muls	r3, r1
 80057f4:	617b      	str	r3, [r7, #20]
        break;
 80057f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057f8:	4b14      	ldr	r3, [pc, #80]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	0f5b      	lsrs	r3, r3, #29
 80057fe:	2207      	movs	r2, #7
 8005800:	4013      	ands	r3, r2
 8005802:	3301      	adds	r3, #1
 8005804:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	6978      	ldr	r0, [r7, #20]
 800580a:	f7fa fc83 	bl	8000114 <__udivsi3>
 800580e:	0003      	movs	r3, r0
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e015      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2238      	movs	r2, #56	; 0x38
 800581a:	4013      	ands	r3, r2
 800581c:	2b20      	cmp	r3, #32
 800581e:	d103      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e00b      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <HAL_RCC_GetSysClockFreq+0xf8>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2238      	movs	r2, #56	; 0x38
 800582e:	4013      	ands	r3, r2
 8005830:	2b18      	cmp	r3, #24
 8005832:	d103      	bne.n	800583c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005834:	23fa      	movs	r3, #250	; 0xfa
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	e001      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005840:	693b      	ldr	r3, [r7, #16]
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b006      	add	sp, #24
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40021000 	.word	0x40021000
 8005850:	00f42400 	.word	0x00f42400
 8005854:	007a1200 	.word	0x007a1200

08005858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0a8      	b.n	80059bc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	2382      	movs	r3, #130	; 0x82
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	429a      	cmp	r2, r3
 800587c:	d009      	beq.n	8005892 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	61da      	str	r2, [r3, #28]
 8005884:	e005      	b.n	8005892 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	225d      	movs	r2, #93	; 0x5d
 800589c:	5c9b      	ldrb	r3, [r3, r2]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	225c      	movs	r2, #92	; 0x5c
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fe fd56 	bl	8004360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	225d      	movs	r2, #93	; 0x5d
 80058b8:	2102      	movs	r1, #2
 80058ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	438a      	bics	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	23e0      	movs	r3, #224	; 0xe0
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d902      	bls.n	80058de <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e002      	b.n	80058e4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	015b      	lsls	r3, r3, #5
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	23f0      	movs	r3, #240	; 0xf0
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d008      	beq.n	8005902 <HAL_SPI_Init+0xaa>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	23e0      	movs	r3, #224	; 0xe0
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d002      	beq.n	8005902 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	2382      	movs	r3, #130	; 0x82
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	401a      	ands	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	2384      	movs	r3, #132	; 0x84
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	400b      	ands	r3, r1
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2102      	movs	r1, #2
 800591e:	400b      	ands	r3, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2101      	movs	r1, #1
 8005928:	400b      	ands	r3, r1
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6999      	ldr	r1, [r3, #24]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	400b      	ands	r3, r1
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	2138      	movs	r1, #56	; 0x38
 800593e:	400b      	ands	r3, r1
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	400b      	ands	r3, r1
 800594a:	431a      	orrs	r2, r3
 800594c:	0011      	movs	r1, r2
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	401a      	ands	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	2204      	movs	r2, #4
 8005968:	401a      	ands	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2110      	movs	r1, #16
 8005970:	400b      	ands	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	2108      	movs	r1, #8
 800597a:	400b      	ands	r3, r1
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	23f0      	movs	r3, #240	; 0xf0
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	400b      	ands	r3, r1
 8005988:	431a      	orrs	r2, r3
 800598a:	0011      	movs	r1, r2
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	401a      	ands	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4907      	ldr	r1, [pc, #28]	; (80059c4 <HAL_SPI_Init+0x16c>)
 80059a8:	400a      	ands	r2, r1
 80059aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	225d      	movs	r2, #93	; 0x5d
 80059b6:	2101      	movs	r1, #1
 80059b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b004      	add	sp, #16
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	fffff7ff 	.word	0xfffff7ff

080059c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	1dbb      	adds	r3, r7, #6
 80059d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d8:	231f      	movs	r3, #31
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	225c      	movs	r2, #92	; 0x5c
 80059e4:	5c9b      	ldrb	r3, [r3, r2]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_SPI_Transmit+0x26>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e140      	b.n	8005c70 <HAL_SPI_Transmit+0x2a8>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	225c      	movs	r2, #92	; 0x5c
 80059f2:	2101      	movs	r1, #1
 80059f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f6:	f7fe ffd5 	bl	80049a4 <HAL_GetTick>
 80059fa:	0003      	movs	r3, r0
 80059fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80059fe:	2316      	movs	r3, #22
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	1dba      	adds	r2, r7, #6
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	225d      	movs	r2, #93	; 0x5d
 8005a0c:	5c9b      	ldrb	r3, [r3, r2]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d004      	beq.n	8005a1e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a14:	231f      	movs	r3, #31
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2202      	movs	r2, #2
 8005a1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a1c:	e11d      	b.n	8005c5a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_SPI_Transmit+0x64>
 8005a24:	1dbb      	adds	r3, r7, #6
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a2c:	231f      	movs	r3, #31
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a34:	e111      	b.n	8005c5a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	225d      	movs	r2, #93	; 0x5d
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1dba      	adds	r2, r7, #6
 8005a4e:	8812      	ldrh	r2, [r2, #0]
 8005a50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1dba      	adds	r2, r7, #6
 8005a56:	8812      	ldrh	r2, [r2, #0]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2244      	movs	r2, #68	; 0x44
 8005a64:	2100      	movs	r1, #0
 8005a66:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2246      	movs	r2, #70	; 0x46
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d110      	bne.n	8005aaa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2140      	movs	r1, #64	; 0x40
 8005a94:	438a      	bics	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	01c9      	lsls	r1, r1, #7
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d007      	beq.n	8005ac8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2140      	movs	r1, #64	; 0x40
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	23e0      	movs	r3, #224	; 0xe0
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d94e      	bls.n	8005b72 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d004      	beq.n	8005ae6 <HAL_SPI_Transmit+0x11e>
 8005adc:	2316      	movs	r3, #22
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d13f      	bne.n	8005b66 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b0a:	e02c      	b.n	8005b66 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2202      	movs	r2, #2
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d112      	bne.n	8005b40 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	1c9a      	adds	r2, r3, #2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b3e:	e012      	b.n	8005b66 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b40:	f7fe ff30 	bl	80049a4 <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d802      	bhi.n	8005b56 <HAL_SPI_Transmit+0x18e>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	d102      	bne.n	8005b5c <HAL_SPI_Transmit+0x194>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005b5c:	231f      	movs	r3, #31
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	2203      	movs	r2, #3
 8005b62:	701a      	strb	r2, [r3, #0]
          goto error;
 8005b64:	e079      	b.n	8005c5a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1cd      	bne.n	8005b0c <HAL_SPI_Transmit+0x144>
 8005b70:	e04f      	b.n	8005c12 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_SPI_Transmit+0x1bc>
 8005b7a:	2316      	movs	r3, #22
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d141      	bne.n	8005c08 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005baa:	e02d      	b.n	8005c08 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d113      	bne.n	8005be2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be0:	e012      	b.n	8005c08 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be2:	f7fe fedf 	bl	80049a4 <HAL_GetTick>
 8005be6:	0002      	movs	r2, r0
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d802      	bhi.n	8005bf8 <HAL_SPI_Transmit+0x230>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	d102      	bne.n	8005bfe <HAL_SPI_Transmit+0x236>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005bfe:	231f      	movs	r3, #31
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2203      	movs	r2, #3
 8005c04:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c06:	e028      	b.n	8005c5a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1cc      	bne.n	8005bac <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 fcd9 	bl	80065d0 <SPI_EndRxTxTransaction>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005c4e:	231f      	movs	r3, #31
 8005c50:	18fb      	adds	r3, r7, r3
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e000      	b.n	8005c5a <HAL_SPI_Transmit+0x292>
  }

error:
 8005c58:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	225d      	movs	r2, #93	; 0x5d
 8005c5e:	2101      	movs	r1, #1
 8005c60:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	225c      	movs	r2, #92	; 0x5c
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c6a:	231f      	movs	r3, #31
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	781b      	ldrb	r3, [r3, #0]
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b008      	add	sp, #32
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	1dbb      	adds	r3, r7, #6
 8005c86:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c88:	2317      	movs	r3, #23
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	2382      	movs	r3, #130	; 0x82
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d113      	bne.n	8005cc4 <HAL_SPI_Receive+0x4c>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	225d      	movs	r2, #93	; 0x5d
 8005ca8:	2104      	movs	r1, #4
 8005caa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cac:	1dbb      	adds	r3, r7, #6
 8005cae:	881c      	ldrh	r4, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	0023      	movs	r3, r4
 8005cbc:	f000 f928 	bl	8005f10 <HAL_SPI_TransmitReceive>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	e11c      	b.n	8005efe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	225c      	movs	r2, #92	; 0x5c
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_SPI_Receive+0x5a>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e115      	b.n	8005efe <HAL_SPI_Receive+0x286>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	225c      	movs	r2, #92	; 0x5c
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cda:	f7fe fe63 	bl	80049a4 <HAL_GetTick>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	225d      	movs	r2, #93	; 0x5d
 8005ce6:	5c9b      	ldrb	r3, [r3, r2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d004      	beq.n	8005cf8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005cee:	2317      	movs	r3, #23
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005cf6:	e0f7      	b.n	8005ee8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_SPI_Receive+0x8e>
 8005cfe:	1dbb      	adds	r3, r7, #6
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005d06:	2317      	movs	r3, #23
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d0e:	e0eb      	b.n	8005ee8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	225d      	movs	r2, #93	; 0x5d
 8005d14:	2104      	movs	r1, #4
 8005d16:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1dba      	adds	r2, r7, #6
 8005d28:	2144      	movs	r1, #68	; 0x44
 8005d2a:	8812      	ldrh	r2, [r2, #0]
 8005d2c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1dba      	adds	r2, r7, #6
 8005d32:	2146      	movs	r1, #70	; 0x46
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	23e0      	movs	r3, #224	; 0xe0
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d908      	bls.n	8005d74 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4966      	ldr	r1, [pc, #408]	; (8005f08 <HAL_SPI_Receive+0x290>)
 8005d6e:	400a      	ands	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	e008      	b.n	8005d86 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	0149      	lsls	r1, r1, #5
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d10f      	bne.n	8005db2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	438a      	bics	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4957      	ldr	r1, [pc, #348]	; (8005f0c <HAL_SPI_Receive+0x294>)
 8005dae:	400a      	ands	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2240      	movs	r2, #64	; 0x40
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d007      	beq.n	8005dd0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2140      	movs	r1, #64	; 0x40
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	23e0      	movs	r3, #224	; 0xe0
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d900      	bls.n	8005dde <HAL_SPI_Receive+0x166>
 8005ddc:	e069      	b.n	8005eb2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dde:	e031      	b.n	8005e44 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2201      	movs	r2, #1
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d117      	bne.n	8005e1e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	001a      	movs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2246      	movs	r2, #70	; 0x46
 8005e0e:	5a9b      	ldrh	r3, [r3, r2]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b299      	uxth	r1, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2246      	movs	r2, #70	; 0x46
 8005e1a:	5299      	strh	r1, [r3, r2]
 8005e1c:	e012      	b.n	8005e44 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1e:	f7fe fdc1 	bl	80049a4 <HAL_GetTick>
 8005e22:	0002      	movs	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d802      	bhi.n	8005e34 <HAL_SPI_Receive+0x1bc>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_Receive+0x1c2>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005e3a:	2317      	movs	r3, #23
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	2203      	movs	r2, #3
 8005e40:	701a      	strb	r2, [r3, #0]
          goto error;
 8005e42:	e051      	b.n	8005ee8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2246      	movs	r2, #70	; 0x46
 8005e48:	5a9b      	ldrh	r3, [r3, r2]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1c7      	bne.n	8005de0 <HAL_SPI_Receive+0x168>
 8005e50:	e035      	b.n	8005ebe <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d115      	bne.n	8005e8c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	b292      	uxth	r2, r2
 8005e6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2246      	movs	r2, #70	; 0x46
 8005e7c:	5a9b      	ldrh	r3, [r3, r2]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b299      	uxth	r1, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2246      	movs	r2, #70	; 0x46
 8005e88:	5299      	strh	r1, [r3, r2]
 8005e8a:	e012      	b.n	8005eb2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8c:	f7fe fd8a 	bl	80049a4 <HAL_GetTick>
 8005e90:	0002      	movs	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d802      	bhi.n	8005ea2 <HAL_SPI_Receive+0x22a>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Receive+0x230>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005ea8:	2317      	movs	r3, #23
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	2203      	movs	r2, #3
 8005eae:	701a      	strb	r2, [r3, #0]
          goto error;
 8005eb0:	e01a      	b.n	8005ee8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2246      	movs	r2, #70	; 0x46
 8005eb6:	5a9b      	ldrh	r3, [r3, r2]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1c9      	bne.n	8005e52 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 fb25 	bl	8006514 <SPI_EndRxTransaction>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005edc:	2317      	movs	r3, #23
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e000      	b.n	8005ee8 <HAL_SPI_Receive+0x270>
  }

error :
 8005ee6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	225d      	movs	r2, #93	; 0x5d
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	225c      	movs	r2, #92	; 0x5c
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005ef8:	2317      	movs	r3, #23
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	781b      	ldrb	r3, [r3, #0]
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b007      	add	sp, #28
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	ffffefff 	.word	0xffffefff
 8005f0c:	ffffbfff 	.word	0xffffbfff

08005f10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	1cbb      	adds	r3, r7, #2
 8005f20:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f22:	2301      	movs	r3, #1
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f26:	2323      	movs	r3, #35	; 0x23
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	225c      	movs	r2, #92	; 0x5c
 8005f32:	5c9b      	ldrb	r3, [r3, r2]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x2c>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e1b5      	b.n	80062a8 <HAL_SPI_TransmitReceive+0x398>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	225c      	movs	r2, #92	; 0x5c
 8005f40:	2101      	movs	r1, #1
 8005f42:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f44:	f7fe fd2e 	bl	80049a4 <HAL_GetTick>
 8005f48:	0003      	movs	r3, r0
 8005f4a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f4c:	201b      	movs	r0, #27
 8005f4e:	183b      	adds	r3, r7, r0
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	215d      	movs	r1, #93	; 0x5d
 8005f54:	5c52      	ldrb	r2, [r2, r1]
 8005f56:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f5e:	2312      	movs	r3, #18
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	1cba      	adds	r2, r7, #2
 8005f64:	8812      	ldrh	r2, [r2, #0]
 8005f66:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f68:	183b      	adds	r3, r7, r0
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d011      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x84>
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	2382      	movs	r3, #130	; 0x82
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d107      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x7a>
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d004      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005f8a:	2323      	movs	r3, #35	; 0x23
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f92:	e17e      	b.n	8006292 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x98>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x98>
 8005fa0:	1cbb      	adds	r3, r7, #2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005fa8:	2323      	movs	r3, #35	; 0x23
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fb0:	e16f      	b.n	8006292 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	225d      	movs	r2, #93	; 0x5d
 8005fb6:	5c9b      	ldrb	r3, [r3, r2]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d003      	beq.n	8005fc6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	225d      	movs	r2, #93	; 0x5d
 8005fc2:	2105      	movs	r1, #5
 8005fc4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1cba      	adds	r2, r7, #2
 8005fd6:	2146      	movs	r1, #70	; 0x46
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1cba      	adds	r2, r7, #2
 8005fe0:	2144      	movs	r1, #68	; 0x44
 8005fe2:	8812      	ldrh	r2, [r2, #0]
 8005fe4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1cba      	adds	r2, r7, #2
 8005ff0:	8812      	ldrh	r2, [r2, #0]
 8005ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	1cba      	adds	r2, r7, #2
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	23e0      	movs	r3, #224	; 0xe0
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	429a      	cmp	r2, r3
 8006012:	d908      	bls.n	8006026 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	49a4      	ldr	r1, [pc, #656]	; (80062b0 <HAL_SPI_TransmitReceive+0x3a0>)
 8006020:	400a      	ands	r2, r1
 8006022:	605a      	str	r2, [r3, #4]
 8006024:	e008      	b.n	8006038 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2180      	movs	r1, #128	; 0x80
 8006032:	0149      	lsls	r1, r1, #5
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2240      	movs	r2, #64	; 0x40
 8006040:	4013      	ands	r3, r2
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d007      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	430a      	orrs	r2, r1
 8006054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	23e0      	movs	r3, #224	; 0xe0
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	429a      	cmp	r2, r3
 8006060:	d800      	bhi.n	8006064 <HAL_SPI_TransmitReceive+0x154>
 8006062:	e07f      	b.n	8006164 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x168>
 800606c:	2312      	movs	r3, #18
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d000      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x168>
 8006076:	e069      	b.n	800614c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800609c:	e056      	b.n	800614c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2202      	movs	r2, #2
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d11b      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x1d4>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_SPI_TransmitReceive+0x1d4>
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d113      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2201      	movs	r2, #1
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d11c      	bne.n	800612c <HAL_SPI_TransmitReceive+0x21c>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2246      	movs	r2, #70	; 0x46
 80060f6:	5a9b      	ldrh	r3, [r3, r2]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d016      	beq.n	800612c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	b292      	uxth	r2, r2
 800610a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2246      	movs	r2, #70	; 0x46
 800611a:	5a9b      	ldrh	r3, [r3, r2]
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b299      	uxth	r1, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2246      	movs	r2, #70	; 0x46
 8006126:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006128:	2301      	movs	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800612c:	f7fe fc3a 	bl	80049a4 <HAL_GetTick>
 8006130:	0002      	movs	r2, r0
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	429a      	cmp	r2, r3
 800613a:	d807      	bhi.n	800614c <HAL_SPI_TransmitReceive+0x23c>
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	3301      	adds	r3, #1
 8006140:	d004      	beq.n	800614c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006142:	2323      	movs	r3, #35	; 0x23
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	2203      	movs	r2, #3
 8006148:	701a      	strb	r2, [r3, #0]
        goto error;
 800614a:	e0a2      	b.n	8006292 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1a3      	bne.n	800609e <HAL_SPI_TransmitReceive+0x18e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2246      	movs	r2, #70	; 0x46
 800615a:	5a9b      	ldrh	r3, [r3, r2]
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d19d      	bne.n	800609e <HAL_SPI_TransmitReceive+0x18e>
 8006162:	e085      	b.n	8006270 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_SPI_TransmitReceive+0x268>
 800616c:	2312      	movs	r3, #18
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d000      	beq.n	8006178 <HAL_SPI_TransmitReceive+0x268>
 8006176:	e070      	b.n	800625a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619e:	e05c      	b.n	800625a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2202      	movs	r2, #2
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d11c      	bne.n	80061e8 <HAL_SPI_TransmitReceive+0x2d8>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x2d8>
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d114      	bne.n	80061e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2201      	movs	r2, #1
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d11e      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x324>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2246      	movs	r2, #70	; 0x46
 80061fa:	5a9b      	ldrh	r3, [r3, r2]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	001a      	movs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2246      	movs	r2, #70	; 0x46
 8006222:	5a9b      	ldrh	r3, [r3, r2]
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b299      	uxth	r1, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2246      	movs	r2, #70	; 0x46
 800622e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006234:	f7fe fbb6 	bl	80049a4 <HAL_GetTick>
 8006238:	0002      	movs	r2, r0
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006240:	429a      	cmp	r2, r3
 8006242:	d802      	bhi.n	800624a <HAL_SPI_TransmitReceive+0x33a>
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	3301      	adds	r3, #1
 8006248:	d102      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x340>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006250:	2323      	movs	r3, #35	; 0x23
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	2203      	movs	r2, #3
 8006256:	701a      	strb	r2, [r3, #0]
        goto error;
 8006258:	e01b      	b.n	8006292 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d19d      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x290>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2246      	movs	r2, #70	; 0x46
 8006268:	5a9b      	ldrh	r3, [r3, r2]
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d197      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0018      	movs	r0, r3
 8006278:	f000 f9aa 	bl	80065d0 <SPI_EndRxTxTransaction>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d007      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006280:	2323      	movs	r3, #35	; 0x23
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
 800628e:	e000      	b.n	8006292 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006290:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	225d      	movs	r2, #93	; 0x5d
 8006296:	2101      	movs	r1, #1
 8006298:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	225c      	movs	r2, #92	; 0x5c
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80062a2:	2323      	movs	r3, #35	; 0x23
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b00a      	add	sp, #40	; 0x28
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	ffffefff 	.word	0xffffefff

080062b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	1dfb      	adds	r3, r7, #7
 80062c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062c4:	f7fe fb6e 	bl	80049a4 <HAL_GetTick>
 80062c8:	0002      	movs	r2, r0
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062d4:	f7fe fb66 	bl	80049a4 <HAL_GetTick>
 80062d8:	0003      	movs	r3, r0
 80062da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062dc:	4b3a      	ldr	r3, [pc, #232]	; (80063c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	015b      	lsls	r3, r3, #5
 80062e2:	0d1b      	lsrs	r3, r3, #20
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	4353      	muls	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ea:	e058      	b.n	800639e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	3301      	adds	r3, #1
 80062f0:	d055      	beq.n	800639e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f2:	f7fe fb57 	bl	80049a4 <HAL_GetTick>
 80062f6:	0002      	movs	r2, r0
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d902      	bls.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d142      	bne.n	800638e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	21e0      	movs	r1, #224	; 0xe0
 8006314:	438a      	bics	r2, r1
 8006316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	2382      	movs	r3, #130	; 0x82
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	429a      	cmp	r2, r3
 8006322:	d113      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	2380      	movs	r3, #128	; 0x80
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	429a      	cmp	r2, r3
 800632e:	d005      	beq.n	800633c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	429a      	cmp	r2, r3
 800633a:	d107      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2140      	movs	r1, #64	; 0x40
 8006348:	438a      	bics	r2, r1
 800634a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	019b      	lsls	r3, r3, #6
 8006354:	429a      	cmp	r2, r3
 8006356:	d110      	bne.n	800637a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	491a      	ldr	r1, [pc, #104]	; (80063cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006364:	400a      	ands	r2, r1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	0189      	lsls	r1, r1, #6
 8006376:	430a      	orrs	r2, r1
 8006378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	225d      	movs	r2, #93	; 0x5d
 800637e:	2101      	movs	r1, #1
 8006380:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	225c      	movs	r2, #92	; 0x5c
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e017      	b.n	80063be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	3b01      	subs	r3, #1
 800639c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	4013      	ands	r3, r2
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	425a      	negs	r2, r3
 80063ae:	4153      	adcs	r3, r2
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	001a      	movs	r2, r3
 80063b4:	1dfb      	adds	r3, r7, #7
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d197      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b008      	add	sp, #32
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	20000000 	.word	0x20000000
 80063cc:	ffffdfff 	.word	0xffffdfff

080063d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063de:	2317      	movs	r3, #23
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063e6:	f7fe fadd 	bl	80049a4 <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	18d3      	adds	r3, r2, r3
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063f6:	f7fe fad5 	bl	80049a4 <HAL_GetTick>
 80063fa:	0003      	movs	r3, r0
 80063fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	0013      	movs	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	189b      	adds	r3, r3, r2
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	4353      	muls	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800641c:	e068      	b.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	23c0      	movs	r3, #192	; 0xc0
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	429a      	cmp	r2, r3
 8006426:	d10a      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b2da      	uxtb	r2, r3
 8006434:	2117      	movs	r1, #23
 8006436:	187b      	adds	r3, r7, r1
 8006438:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800643a:	187b      	adds	r3, r7, r1
 800643c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	d055      	beq.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006444:	f7fe faae 	bl	80049a4 <HAL_GetTick>
 8006448:	0002      	movs	r2, r0
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	429a      	cmp	r2, r3
 8006452:	d902      	bls.n	800645a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d142      	bne.n	80064e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	21e0      	movs	r1, #224	; 0xe0
 8006466:	438a      	bics	r2, r1
 8006468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	2382      	movs	r3, #130	; 0x82
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	429a      	cmp	r2, r3
 8006474:	d113      	bne.n	800649e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	429a      	cmp	r2, r3
 8006480:	d005      	beq.n	800648e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	2380      	movs	r3, #128	; 0x80
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	429a      	cmp	r2, r3
 800648c:	d107      	bne.n	800649e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	438a      	bics	r2, r1
 800649c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	019b      	lsls	r3, r3, #6
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d110      	bne.n	80064cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4916      	ldr	r1, [pc, #88]	; (8006510 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2180      	movs	r1, #128	; 0x80
 80064c6:	0189      	lsls	r1, r1, #6
 80064c8:	430a      	orrs	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	225d      	movs	r2, #93	; 0x5d
 80064d0:	2101      	movs	r1, #1
 80064d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	225c      	movs	r2, #92	; 0x5c
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e010      	b.n	8006502 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d18e      	bne.n	800641e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b00a      	add	sp, #40	; 0x28
 8006508:	bd80      	pop	{r7, pc}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	20000000 	.word	0x20000000
 8006510:	ffffdfff 	.word	0xffffdfff

08006514 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	2382      	movs	r3, #130	; 0x82
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	429a      	cmp	r2, r3
 800652a:	d113      	bne.n	8006554 <SPI_EndRxTransaction+0x40>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	429a      	cmp	r2, r3
 8006536:	d005      	beq.n	8006544 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	429a      	cmp	r2, r3
 8006542:	d107      	bne.n	8006554 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2140      	movs	r1, #64	; 0x40
 8006550:	438a      	bics	r2, r1
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	0013      	movs	r3, r2
 800655e:	2200      	movs	r2, #0
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	f7ff fea7 	bl	80062b4 <SPI_WaitFlagStateUntilTimeout>
 8006566:	1e03      	subs	r3, r0, #0
 8006568:	d007      	beq.n	800657a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656e:	2220      	movs	r2, #32
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e026      	b.n	80065c8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	2382      	movs	r3, #130	; 0x82
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	d11f      	bne.n	80065c6 <SPI_EndRxTransaction+0xb2>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	429a      	cmp	r2, r3
 8006590:	d005      	beq.n	800659e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	429a      	cmp	r2, r3
 800659c:	d113      	bne.n	80065c6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	23c0      	movs	r3, #192	; 0xc0
 80065a2:	00d9      	lsls	r1, r3, #3
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	0013      	movs	r3, r2
 80065ac:	2200      	movs	r2, #0
 80065ae:	f7ff ff0f 	bl	80063d0 <SPI_WaitFifoStateUntilTimeout>
 80065b2:	1e03      	subs	r3, r0, #0
 80065b4:	d007      	beq.n	80065c6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	2220      	movs	r2, #32
 80065bc:	431a      	orrs	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e000      	b.n	80065c8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	0018      	movs	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b004      	add	sp, #16
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	23c0      	movs	r3, #192	; 0xc0
 80065e0:	0159      	lsls	r1, r3, #5
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	0013      	movs	r3, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7ff fef0 	bl	80063d0 <SPI_WaitFifoStateUntilTimeout>
 80065f0:	1e03      	subs	r3, r0, #0
 80065f2:	d007      	beq.n	8006604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	2220      	movs	r2, #32
 80065fa:	431a      	orrs	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e027      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	0013      	movs	r3, r2
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	f7ff fe4f 	bl	80062b4 <SPI_WaitFlagStateUntilTimeout>
 8006616:	1e03      	subs	r3, r0, #0
 8006618:	d007      	beq.n	800662a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	2220      	movs	r2, #32
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e014      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	23c0      	movs	r3, #192	; 0xc0
 800662e:	00d9      	lsls	r1, r3, #3
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	0013      	movs	r3, r2
 8006638:	2200      	movs	r2, #0
 800663a:	f7ff fec9 	bl	80063d0 <SPI_WaitFifoStateUntilTimeout>
 800663e:	1e03      	subs	r3, r0, #0
 8006640:	d007      	beq.n	8006652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006646:	2220      	movs	r2, #32
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e000      	b.n	8006654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	0018      	movs	r0, r3
 8006656:	46bd      	mov	sp, r7
 8006658:	b004      	add	sp, #16
 800665a:	bd80      	pop	{r7, pc}

0800665c <__errno>:
 800665c:	4b01      	ldr	r3, [pc, #4]	; (8006664 <__errno+0x8>)
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	4770      	bx	lr
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	2000000c 	.word	0x2000000c

08006668 <index>:
 8006668:	b510      	push	{r4, lr}
 800666a:	f000 f955 	bl	8006918 <strchr>
 800666e:	bd10      	pop	{r4, pc}

08006670 <__libc_init_array>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	2600      	movs	r6, #0
 8006674:	4d0c      	ldr	r5, [pc, #48]	; (80066a8 <__libc_init_array+0x38>)
 8006676:	4c0d      	ldr	r4, [pc, #52]	; (80066ac <__libc_init_array+0x3c>)
 8006678:	1b64      	subs	r4, r4, r5
 800667a:	10a4      	asrs	r4, r4, #2
 800667c:	42a6      	cmp	r6, r4
 800667e:	d109      	bne.n	8006694 <__libc_init_array+0x24>
 8006680:	2600      	movs	r6, #0
 8006682:	f000 fca3 	bl	8006fcc <_init>
 8006686:	4d0a      	ldr	r5, [pc, #40]	; (80066b0 <__libc_init_array+0x40>)
 8006688:	4c0a      	ldr	r4, [pc, #40]	; (80066b4 <__libc_init_array+0x44>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	42a6      	cmp	r6, r4
 8006690:	d105      	bne.n	800669e <__libc_init_array+0x2e>
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	00b3      	lsls	r3, r6, #2
 8006696:	58eb      	ldr	r3, [r5, r3]
 8006698:	4798      	blx	r3
 800669a:	3601      	adds	r6, #1
 800669c:	e7ee      	b.n	800667c <__libc_init_array+0xc>
 800669e:	00b3      	lsls	r3, r6, #2
 80066a0:	58eb      	ldr	r3, [r5, r3]
 80066a2:	4798      	blx	r3
 80066a4:	3601      	adds	r6, #1
 80066a6:	e7f2      	b.n	800668e <__libc_init_array+0x1e>
 80066a8:	08007558 	.word	0x08007558
 80066ac:	08007558 	.word	0x08007558
 80066b0:	08007558 	.word	0x08007558
 80066b4:	0800755c 	.word	0x0800755c

080066b8 <malloc>:
 80066b8:	b510      	push	{r4, lr}
 80066ba:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <malloc+0x10>)
 80066bc:	0001      	movs	r1, r0
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	f000 f882 	bl	80067c8 <_malloc_r>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	2000000c 	.word	0x2000000c

080066cc <memcpy>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b510      	push	{r4, lr}
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d100      	bne.n	80066d6 <memcpy+0xa>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	5ccc      	ldrb	r4, [r1, r3]
 80066d8:	54c4      	strb	r4, [r0, r3]
 80066da:	3301      	adds	r3, #1
 80066dc:	e7f8      	b.n	80066d0 <memcpy+0x4>

080066de <memset>:
 80066de:	0003      	movs	r3, r0
 80066e0:	1882      	adds	r2, r0, r2
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d100      	bne.n	80066e8 <memset+0xa>
 80066e6:	4770      	bx	lr
 80066e8:	7019      	strb	r1, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	e7f9      	b.n	80066e2 <memset+0x4>
	...

080066f0 <_free_r>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	0005      	movs	r5, r0
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d010      	beq.n	800671a <_free_r+0x2a>
 80066f8:	1f0c      	subs	r4, r1, #4
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da00      	bge.n	8006702 <_free_r+0x12>
 8006700:	18e4      	adds	r4, r4, r3
 8006702:	0028      	movs	r0, r5
 8006704:	f000 f916 	bl	8006934 <__malloc_lock>
 8006708:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <_free_r+0x90>)
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <_free_r+0x2c>
 8006710:	6063      	str	r3, [r4, #4]
 8006712:	6014      	str	r4, [r2, #0]
 8006714:	0028      	movs	r0, r5
 8006716:	f000 f915 	bl	8006944 <__malloc_unlock>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	42a3      	cmp	r3, r4
 800671e:	d908      	bls.n	8006732 <_free_r+0x42>
 8006720:	6821      	ldr	r1, [r4, #0]
 8006722:	1860      	adds	r0, r4, r1
 8006724:	4283      	cmp	r3, r0
 8006726:	d1f3      	bne.n	8006710 <_free_r+0x20>
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	1841      	adds	r1, r0, r1
 800672e:	6021      	str	r1, [r4, #0]
 8006730:	e7ee      	b.n	8006710 <_free_r+0x20>
 8006732:	001a      	movs	r2, r3
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <_free_r+0x4e>
 800673a:	42a3      	cmp	r3, r4
 800673c:	d9f9      	bls.n	8006732 <_free_r+0x42>
 800673e:	6811      	ldr	r1, [r2, #0]
 8006740:	1850      	adds	r0, r2, r1
 8006742:	42a0      	cmp	r0, r4
 8006744:	d10b      	bne.n	800675e <_free_r+0x6e>
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1809      	adds	r1, r1, r0
 800674a:	1850      	adds	r0, r2, r1
 800674c:	6011      	str	r1, [r2, #0]
 800674e:	4283      	cmp	r3, r0
 8006750:	d1e0      	bne.n	8006714 <_free_r+0x24>
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	1841      	adds	r1, r0, r1
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	6053      	str	r3, [r2, #4]
 800675c:	e7da      	b.n	8006714 <_free_r+0x24>
 800675e:	42a0      	cmp	r0, r4
 8006760:	d902      	bls.n	8006768 <_free_r+0x78>
 8006762:	230c      	movs	r3, #12
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	e7d5      	b.n	8006714 <_free_r+0x24>
 8006768:	6821      	ldr	r1, [r4, #0]
 800676a:	1860      	adds	r0, r4, r1
 800676c:	4283      	cmp	r3, r0
 800676e:	d103      	bne.n	8006778 <_free_r+0x88>
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	1841      	adds	r1, r0, r1
 8006776:	6021      	str	r1, [r4, #0]
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	6054      	str	r4, [r2, #4]
 800677c:	e7ca      	b.n	8006714 <_free_r+0x24>
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	2000010c 	.word	0x2000010c

08006784 <sbrk_aligned>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4e0f      	ldr	r6, [pc, #60]	; (80067c4 <sbrk_aligned+0x40>)
 8006788:	000d      	movs	r5, r1
 800678a:	6831      	ldr	r1, [r6, #0]
 800678c:	0004      	movs	r4, r0
 800678e:	2900      	cmp	r1, #0
 8006790:	d102      	bne.n	8006798 <sbrk_aligned+0x14>
 8006792:	f000 f88f 	bl	80068b4 <_sbrk_r>
 8006796:	6030      	str	r0, [r6, #0]
 8006798:	0029      	movs	r1, r5
 800679a:	0020      	movs	r0, r4
 800679c:	f000 f88a 	bl	80068b4 <_sbrk_r>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d00a      	beq.n	80067ba <sbrk_aligned+0x36>
 80067a4:	2303      	movs	r3, #3
 80067a6:	1cc5      	adds	r5, r0, #3
 80067a8:	439d      	bics	r5, r3
 80067aa:	42a8      	cmp	r0, r5
 80067ac:	d007      	beq.n	80067be <sbrk_aligned+0x3a>
 80067ae:	1a29      	subs	r1, r5, r0
 80067b0:	0020      	movs	r0, r4
 80067b2:	f000 f87f 	bl	80068b4 <_sbrk_r>
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	d101      	bne.n	80067be <sbrk_aligned+0x3a>
 80067ba:	2501      	movs	r5, #1
 80067bc:	426d      	negs	r5, r5
 80067be:	0028      	movs	r0, r5
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	20000110 	.word	0x20000110

080067c8 <_malloc_r>:
 80067c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ca:	2203      	movs	r2, #3
 80067cc:	1ccb      	adds	r3, r1, #3
 80067ce:	4393      	bics	r3, r2
 80067d0:	3308      	adds	r3, #8
 80067d2:	0006      	movs	r6, r0
 80067d4:	001f      	movs	r7, r3
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d232      	bcs.n	8006840 <_malloc_r+0x78>
 80067da:	270c      	movs	r7, #12
 80067dc:	42b9      	cmp	r1, r7
 80067de:	d831      	bhi.n	8006844 <_malloc_r+0x7c>
 80067e0:	0030      	movs	r0, r6
 80067e2:	f000 f8a7 	bl	8006934 <__malloc_lock>
 80067e6:	4d32      	ldr	r5, [pc, #200]	; (80068b0 <_malloc_r+0xe8>)
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	001c      	movs	r4, r3
 80067ec:	2c00      	cmp	r4, #0
 80067ee:	d12e      	bne.n	800684e <_malloc_r+0x86>
 80067f0:	0039      	movs	r1, r7
 80067f2:	0030      	movs	r0, r6
 80067f4:	f7ff ffc6 	bl	8006784 <sbrk_aligned>
 80067f8:	0004      	movs	r4, r0
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d11e      	bne.n	800683c <_malloc_r+0x74>
 80067fe:	682c      	ldr	r4, [r5, #0]
 8006800:	0025      	movs	r5, r4
 8006802:	2d00      	cmp	r5, #0
 8006804:	d14a      	bne.n	800689c <_malloc_r+0xd4>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	0029      	movs	r1, r5
 800680a:	18e3      	adds	r3, r4, r3
 800680c:	0030      	movs	r0, r6
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	f000 f850 	bl	80068b4 <_sbrk_r>
 8006814:	9b01      	ldr	r3, [sp, #4]
 8006816:	4283      	cmp	r3, r0
 8006818:	d143      	bne.n	80068a2 <_malloc_r+0xda>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	3703      	adds	r7, #3
 800681e:	1aff      	subs	r7, r7, r3
 8006820:	2303      	movs	r3, #3
 8006822:	439f      	bics	r7, r3
 8006824:	3708      	adds	r7, #8
 8006826:	2f0c      	cmp	r7, #12
 8006828:	d200      	bcs.n	800682c <_malloc_r+0x64>
 800682a:	270c      	movs	r7, #12
 800682c:	0039      	movs	r1, r7
 800682e:	0030      	movs	r0, r6
 8006830:	f7ff ffa8 	bl	8006784 <sbrk_aligned>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d034      	beq.n	80068a2 <_malloc_r+0xda>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	19df      	adds	r7, r3, r7
 800683c:	6027      	str	r7, [r4, #0]
 800683e:	e013      	b.n	8006868 <_malloc_r+0xa0>
 8006840:	2b00      	cmp	r3, #0
 8006842:	dacb      	bge.n	80067dc <_malloc_r+0x14>
 8006844:	230c      	movs	r3, #12
 8006846:	2500      	movs	r5, #0
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	0028      	movs	r0, r5
 800684c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	1bd1      	subs	r1, r2, r7
 8006852:	d420      	bmi.n	8006896 <_malloc_r+0xce>
 8006854:	290b      	cmp	r1, #11
 8006856:	d917      	bls.n	8006888 <_malloc_r+0xc0>
 8006858:	19e2      	adds	r2, r4, r7
 800685a:	6027      	str	r7, [r4, #0]
 800685c:	42a3      	cmp	r3, r4
 800685e:	d111      	bne.n	8006884 <_malloc_r+0xbc>
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	0030      	movs	r0, r6
 800686a:	0025      	movs	r5, r4
 800686c:	f000 f86a 	bl	8006944 <__malloc_unlock>
 8006870:	2207      	movs	r2, #7
 8006872:	350b      	adds	r5, #11
 8006874:	1d23      	adds	r3, r4, #4
 8006876:	4395      	bics	r5, r2
 8006878:	1aea      	subs	r2, r5, r3
 800687a:	429d      	cmp	r5, r3
 800687c:	d0e5      	beq.n	800684a <_malloc_r+0x82>
 800687e:	1b5b      	subs	r3, r3, r5
 8006880:	50a3      	str	r3, [r4, r2]
 8006882:	e7e2      	b.n	800684a <_malloc_r+0x82>
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	e7ec      	b.n	8006862 <_malloc_r+0x9a>
 8006888:	6862      	ldr	r2, [r4, #4]
 800688a:	42a3      	cmp	r3, r4
 800688c:	d101      	bne.n	8006892 <_malloc_r+0xca>
 800688e:	602a      	str	r2, [r5, #0]
 8006890:	e7ea      	b.n	8006868 <_malloc_r+0xa0>
 8006892:	605a      	str	r2, [r3, #4]
 8006894:	e7e8      	b.n	8006868 <_malloc_r+0xa0>
 8006896:	0023      	movs	r3, r4
 8006898:	6864      	ldr	r4, [r4, #4]
 800689a:	e7a7      	b.n	80067ec <_malloc_r+0x24>
 800689c:	002c      	movs	r4, r5
 800689e:	686d      	ldr	r5, [r5, #4]
 80068a0:	e7af      	b.n	8006802 <_malloc_r+0x3a>
 80068a2:	230c      	movs	r3, #12
 80068a4:	0030      	movs	r0, r6
 80068a6:	6033      	str	r3, [r6, #0]
 80068a8:	f000 f84c 	bl	8006944 <__malloc_unlock>
 80068ac:	e7cd      	b.n	800684a <_malloc_r+0x82>
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	2000010c 	.word	0x2000010c

080068b4 <_sbrk_r>:
 80068b4:	2300      	movs	r3, #0
 80068b6:	b570      	push	{r4, r5, r6, lr}
 80068b8:	4d06      	ldr	r5, [pc, #24]	; (80068d4 <_sbrk_r+0x20>)
 80068ba:	0004      	movs	r4, r0
 80068bc:	0008      	movs	r0, r1
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	f7fd fdd4 	bl	800446c <_sbrk>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d103      	bne.n	80068d0 <_sbrk_r+0x1c>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d000      	beq.n	80068d0 <_sbrk_r+0x1c>
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	20000114 	.word	0x20000114

080068d8 <siprintf>:
 80068d8:	b40e      	push	{r1, r2, r3}
 80068da:	b500      	push	{lr}
 80068dc:	490b      	ldr	r1, [pc, #44]	; (800690c <siprintf+0x34>)
 80068de:	b09c      	sub	sp, #112	; 0x70
 80068e0:	ab1d      	add	r3, sp, #116	; 0x74
 80068e2:	9002      	str	r0, [sp, #8]
 80068e4:	9006      	str	r0, [sp, #24]
 80068e6:	9107      	str	r1, [sp, #28]
 80068e8:	9104      	str	r1, [sp, #16]
 80068ea:	4809      	ldr	r0, [pc, #36]	; (8006910 <siprintf+0x38>)
 80068ec:	4909      	ldr	r1, [pc, #36]	; (8006914 <siprintf+0x3c>)
 80068ee:	cb04      	ldmia	r3!, {r2}
 80068f0:	9105      	str	r1, [sp, #20]
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	a902      	add	r1, sp, #8
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f000 f88e 	bl	8006a18 <_svfiprintf_r>
 80068fc:	2300      	movs	r3, #0
 80068fe:	9a02      	ldr	r2, [sp, #8]
 8006900:	7013      	strb	r3, [r2, #0]
 8006902:	b01c      	add	sp, #112	; 0x70
 8006904:	bc08      	pop	{r3}
 8006906:	b003      	add	sp, #12
 8006908:	4718      	bx	r3
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	7fffffff 	.word	0x7fffffff
 8006910:	2000000c 	.word	0x2000000c
 8006914:	ffff0208 	.word	0xffff0208

08006918 <strchr>:
 8006918:	b2c9      	uxtb	r1, r1
 800691a:	7803      	ldrb	r3, [r0, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <strchr+0x12>
 8006920:	428b      	cmp	r3, r1
 8006922:	d100      	bne.n	8006926 <strchr+0xe>
 8006924:	4770      	bx	lr
 8006926:	3001      	adds	r0, #1
 8006928:	e7f7      	b.n	800691a <strchr+0x2>
 800692a:	424b      	negs	r3, r1
 800692c:	4159      	adcs	r1, r3
 800692e:	4249      	negs	r1, r1
 8006930:	4008      	ands	r0, r1
 8006932:	e7f7      	b.n	8006924 <strchr+0xc>

08006934 <__malloc_lock>:
 8006934:	b510      	push	{r4, lr}
 8006936:	4802      	ldr	r0, [pc, #8]	; (8006940 <__malloc_lock+0xc>)
 8006938:	f000 faf0 	bl	8006f1c <__retarget_lock_acquire_recursive>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000118 	.word	0x20000118

08006944 <__malloc_unlock>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4802      	ldr	r0, [pc, #8]	; (8006950 <__malloc_unlock+0xc>)
 8006948:	f000 fae9 	bl	8006f1e <__retarget_lock_release_recursive>
 800694c:	bd10      	pop	{r4, pc}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	20000118 	.word	0x20000118

08006954 <__ssputs_r>:
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	688e      	ldr	r6, [r1, #8]
 8006958:	b085      	sub	sp, #20
 800695a:	0007      	movs	r7, r0
 800695c:	000c      	movs	r4, r1
 800695e:	9203      	str	r2, [sp, #12]
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	429e      	cmp	r6, r3
 8006964:	d83c      	bhi.n	80069e0 <__ssputs_r+0x8c>
 8006966:	2390      	movs	r3, #144	; 0x90
 8006968:	898a      	ldrh	r2, [r1, #12]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	421a      	tst	r2, r3
 800696e:	d034      	beq.n	80069da <__ssputs_r+0x86>
 8006970:	6909      	ldr	r1, [r1, #16]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	6960      	ldr	r0, [r4, #20]
 8006976:	1a5b      	subs	r3, r3, r1
 8006978:	9302      	str	r3, [sp, #8]
 800697a:	2303      	movs	r3, #3
 800697c:	4343      	muls	r3, r0
 800697e:	0fdd      	lsrs	r5, r3, #31
 8006980:	18ed      	adds	r5, r5, r3
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	9802      	ldr	r0, [sp, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	181b      	adds	r3, r3, r0
 800698a:	106d      	asrs	r5, r5, #1
 800698c:	42ab      	cmp	r3, r5
 800698e:	d900      	bls.n	8006992 <__ssputs_r+0x3e>
 8006990:	001d      	movs	r5, r3
 8006992:	0553      	lsls	r3, r2, #21
 8006994:	d532      	bpl.n	80069fc <__ssputs_r+0xa8>
 8006996:	0029      	movs	r1, r5
 8006998:	0038      	movs	r0, r7
 800699a:	f7ff ff15 	bl	80067c8 <_malloc_r>
 800699e:	1e06      	subs	r6, r0, #0
 80069a0:	d109      	bne.n	80069b6 <__ssputs_r+0x62>
 80069a2:	230c      	movs	r3, #12
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	2340      	movs	r3, #64	; 0x40
 80069a8:	2001      	movs	r0, #1
 80069aa:	89a2      	ldrh	r2, [r4, #12]
 80069ac:	4240      	negs	r0, r0
 80069ae:	4313      	orrs	r3, r2
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	b005      	add	sp, #20
 80069b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b6:	9a02      	ldr	r2, [sp, #8]
 80069b8:	6921      	ldr	r1, [r4, #16]
 80069ba:	f7ff fe87 	bl	80066cc <memcpy>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	4a14      	ldr	r2, [pc, #80]	; (8006a14 <__ssputs_r+0xc0>)
 80069c2:	401a      	ands	r2, r3
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	4313      	orrs	r3, r2
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	9b02      	ldr	r3, [sp, #8]
 80069cc:	6126      	str	r6, [r4, #16]
 80069ce:	18f6      	adds	r6, r6, r3
 80069d0:	6026      	str	r6, [r4, #0]
 80069d2:	6165      	str	r5, [r4, #20]
 80069d4:	9e01      	ldr	r6, [sp, #4]
 80069d6:	1aed      	subs	r5, r5, r3
 80069d8:	60a5      	str	r5, [r4, #8]
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	429e      	cmp	r6, r3
 80069de:	d900      	bls.n	80069e2 <__ssputs_r+0x8e>
 80069e0:	9e01      	ldr	r6, [sp, #4]
 80069e2:	0032      	movs	r2, r6
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	6820      	ldr	r0, [r4, #0]
 80069e8:	f000 faa5 	bl	8006f36 <memmove>
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	2000      	movs	r0, #0
 80069f0:	1b9b      	subs	r3, r3, r6
 80069f2:	60a3      	str	r3, [r4, #8]
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	199e      	adds	r6, r3, r6
 80069f8:	6026      	str	r6, [r4, #0]
 80069fa:	e7da      	b.n	80069b2 <__ssputs_r+0x5e>
 80069fc:	002a      	movs	r2, r5
 80069fe:	0038      	movs	r0, r7
 8006a00:	f000 faac 	bl	8006f5c <_realloc_r>
 8006a04:	1e06      	subs	r6, r0, #0
 8006a06:	d1e0      	bne.n	80069ca <__ssputs_r+0x76>
 8006a08:	0038      	movs	r0, r7
 8006a0a:	6921      	ldr	r1, [r4, #16]
 8006a0c:	f7ff fe70 	bl	80066f0 <_free_r>
 8006a10:	e7c7      	b.n	80069a2 <__ssputs_r+0x4e>
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	fffffb7f 	.word	0xfffffb7f

08006a18 <_svfiprintf_r>:
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	b0a1      	sub	sp, #132	; 0x84
 8006a1c:	9003      	str	r0, [sp, #12]
 8006a1e:	001d      	movs	r5, r3
 8006a20:	898b      	ldrh	r3, [r1, #12]
 8006a22:	000f      	movs	r7, r1
 8006a24:	0016      	movs	r6, r2
 8006a26:	061b      	lsls	r3, r3, #24
 8006a28:	d511      	bpl.n	8006a4e <_svfiprintf_r+0x36>
 8006a2a:	690b      	ldr	r3, [r1, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10e      	bne.n	8006a4e <_svfiprintf_r+0x36>
 8006a30:	2140      	movs	r1, #64	; 0x40
 8006a32:	f7ff fec9 	bl	80067c8 <_malloc_r>
 8006a36:	6038      	str	r0, [r7, #0]
 8006a38:	6138      	str	r0, [r7, #16]
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d105      	bne.n	8006a4a <_svfiprintf_r+0x32>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	9a03      	ldr	r2, [sp, #12]
 8006a42:	3801      	subs	r0, #1
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	b021      	add	sp, #132	; 0x84
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	ac08      	add	r4, sp, #32
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	3320      	adds	r3, #32
 8006a56:	7663      	strb	r3, [r4, #25]
 8006a58:	3310      	adds	r3, #16
 8006a5a:	76a3      	strb	r3, [r4, #26]
 8006a5c:	9507      	str	r5, [sp, #28]
 8006a5e:	0035      	movs	r5, r6
 8006a60:	782b      	ldrb	r3, [r5, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <_svfiprintf_r+0x52>
 8006a66:	2b25      	cmp	r3, #37	; 0x25
 8006a68:	d147      	bne.n	8006afa <_svfiprintf_r+0xe2>
 8006a6a:	1bab      	subs	r3, r5, r6
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	42b5      	cmp	r5, r6
 8006a70:	d00c      	beq.n	8006a8c <_svfiprintf_r+0x74>
 8006a72:	0032      	movs	r2, r6
 8006a74:	0039      	movs	r1, r7
 8006a76:	9803      	ldr	r0, [sp, #12]
 8006a78:	f7ff ff6c 	bl	8006954 <__ssputs_r>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d100      	bne.n	8006a82 <_svfiprintf_r+0x6a>
 8006a80:	e0ae      	b.n	8006be0 <_svfiprintf_r+0x1c8>
 8006a82:	6962      	ldr	r2, [r4, #20]
 8006a84:	9b05      	ldr	r3, [sp, #20]
 8006a86:	4694      	mov	ip, r2
 8006a88:	4463      	add	r3, ip
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	782b      	ldrb	r3, [r5, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d100      	bne.n	8006a94 <_svfiprintf_r+0x7c>
 8006a92:	e0a5      	b.n	8006be0 <_svfiprintf_r+0x1c8>
 8006a94:	2201      	movs	r2, #1
 8006a96:	2300      	movs	r3, #0
 8006a98:	4252      	negs	r2, r2
 8006a9a:	6062      	str	r2, [r4, #4]
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	3254      	adds	r2, #84	; 0x54
 8006aa0:	1852      	adds	r2, r2, r1
 8006aa2:	1c6e      	adds	r6, r5, #1
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	60e3      	str	r3, [r4, #12]
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	7013      	strb	r3, [r2, #0]
 8006aac:	65a3      	str	r3, [r4, #88]	; 0x58
 8006aae:	2205      	movs	r2, #5
 8006ab0:	7831      	ldrb	r1, [r6, #0]
 8006ab2:	4854      	ldr	r0, [pc, #336]	; (8006c04 <_svfiprintf_r+0x1ec>)
 8006ab4:	f000 fa34 	bl	8006f20 <memchr>
 8006ab8:	1c75      	adds	r5, r6, #1
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d11f      	bne.n	8006afe <_svfiprintf_r+0xe6>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	06d3      	lsls	r3, r2, #27
 8006ac2:	d504      	bpl.n	8006ace <_svfiprintf_r+0xb6>
 8006ac4:	2353      	movs	r3, #83	; 0x53
 8006ac6:	a904      	add	r1, sp, #16
 8006ac8:	185b      	adds	r3, r3, r1
 8006aca:	2120      	movs	r1, #32
 8006acc:	7019      	strb	r1, [r3, #0]
 8006ace:	0713      	lsls	r3, r2, #28
 8006ad0:	d504      	bpl.n	8006adc <_svfiprintf_r+0xc4>
 8006ad2:	2353      	movs	r3, #83	; 0x53
 8006ad4:	a904      	add	r1, sp, #16
 8006ad6:	185b      	adds	r3, r3, r1
 8006ad8:	212b      	movs	r1, #43	; 0x2b
 8006ada:	7019      	strb	r1, [r3, #0]
 8006adc:	7833      	ldrb	r3, [r6, #0]
 8006ade:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae0:	d016      	beq.n	8006b10 <_svfiprintf_r+0xf8>
 8006ae2:	0035      	movs	r5, r6
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	200a      	movs	r0, #10
 8006ae8:	68e3      	ldr	r3, [r4, #12]
 8006aea:	782a      	ldrb	r2, [r5, #0]
 8006aec:	1c6e      	adds	r6, r5, #1
 8006aee:	3a30      	subs	r2, #48	; 0x30
 8006af0:	2a09      	cmp	r2, #9
 8006af2:	d94e      	bls.n	8006b92 <_svfiprintf_r+0x17a>
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d111      	bne.n	8006b1c <_svfiprintf_r+0x104>
 8006af8:	e017      	b.n	8006b2a <_svfiprintf_r+0x112>
 8006afa:	3501      	adds	r5, #1
 8006afc:	e7b0      	b.n	8006a60 <_svfiprintf_r+0x48>
 8006afe:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <_svfiprintf_r+0x1ec>)
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	1ac0      	subs	r0, r0, r3
 8006b04:	2301      	movs	r3, #1
 8006b06:	4083      	lsls	r3, r0
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	002e      	movs	r6, r5
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	e7ce      	b.n	8006aae <_svfiprintf_r+0x96>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	1d19      	adds	r1, r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	9107      	str	r1, [sp, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db01      	blt.n	8006b20 <_svfiprintf_r+0x108>
 8006b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1e:	e004      	b.n	8006b2a <_svfiprintf_r+0x112>
 8006b20:	425b      	negs	r3, r3
 8006b22:	60e3      	str	r3, [r4, #12]
 8006b24:	2302      	movs	r3, #2
 8006b26:	4313      	orrs	r3, r2
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	782b      	ldrb	r3, [r5, #0]
 8006b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2e:	d10a      	bne.n	8006b46 <_svfiprintf_r+0x12e>
 8006b30:	786b      	ldrb	r3, [r5, #1]
 8006b32:	2b2a      	cmp	r3, #42	; 0x2a
 8006b34:	d135      	bne.n	8006ba2 <_svfiprintf_r+0x18a>
 8006b36:	9b07      	ldr	r3, [sp, #28]
 8006b38:	3502      	adds	r5, #2
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9207      	str	r2, [sp, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	db2b      	blt.n	8006b9c <_svfiprintf_r+0x184>
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	4e30      	ldr	r6, [pc, #192]	; (8006c08 <_svfiprintf_r+0x1f0>)
 8006b48:	2203      	movs	r2, #3
 8006b4a:	0030      	movs	r0, r6
 8006b4c:	7829      	ldrb	r1, [r5, #0]
 8006b4e:	f000 f9e7 	bl	8006f20 <memchr>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d006      	beq.n	8006b64 <_svfiprintf_r+0x14c>
 8006b56:	2340      	movs	r3, #64	; 0x40
 8006b58:	1b80      	subs	r0, r0, r6
 8006b5a:	4083      	lsls	r3, r0
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	3501      	adds	r5, #1
 8006b60:	4313      	orrs	r3, r2
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	7829      	ldrb	r1, [r5, #0]
 8006b66:	2206      	movs	r2, #6
 8006b68:	4828      	ldr	r0, [pc, #160]	; (8006c0c <_svfiprintf_r+0x1f4>)
 8006b6a:	1c6e      	adds	r6, r5, #1
 8006b6c:	7621      	strb	r1, [r4, #24]
 8006b6e:	f000 f9d7 	bl	8006f20 <memchr>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d03c      	beq.n	8006bf0 <_svfiprintf_r+0x1d8>
 8006b76:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <_svfiprintf_r+0x1f8>)
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d125      	bne.n	8006bc8 <_svfiprintf_r+0x1b0>
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	3307      	adds	r3, #7
 8006b82:	4393      	bics	r3, r2
 8006b84:	3308      	adds	r3, #8
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	6963      	ldr	r3, [r4, #20]
 8006b8a:	9a04      	ldr	r2, [sp, #16]
 8006b8c:	189b      	adds	r3, r3, r2
 8006b8e:	6163      	str	r3, [r4, #20]
 8006b90:	e765      	b.n	8006a5e <_svfiprintf_r+0x46>
 8006b92:	4343      	muls	r3, r0
 8006b94:	0035      	movs	r5, r6
 8006b96:	2101      	movs	r1, #1
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	e7a6      	b.n	8006aea <_svfiprintf_r+0xd2>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	425b      	negs	r3, r3
 8006ba0:	e7d0      	b.n	8006b44 <_svfiprintf_r+0x12c>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	200a      	movs	r0, #10
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	3501      	adds	r5, #1
 8006baa:	6063      	str	r3, [r4, #4]
 8006bac:	7829      	ldrb	r1, [r5, #0]
 8006bae:	1c6e      	adds	r6, r5, #1
 8006bb0:	3930      	subs	r1, #48	; 0x30
 8006bb2:	2909      	cmp	r1, #9
 8006bb4:	d903      	bls.n	8006bbe <_svfiprintf_r+0x1a6>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0c5      	beq.n	8006b46 <_svfiprintf_r+0x12e>
 8006bba:	9209      	str	r2, [sp, #36]	; 0x24
 8006bbc:	e7c3      	b.n	8006b46 <_svfiprintf_r+0x12e>
 8006bbe:	4342      	muls	r2, r0
 8006bc0:	0035      	movs	r5, r6
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	1852      	adds	r2, r2, r1
 8006bc6:	e7f1      	b.n	8006bac <_svfiprintf_r+0x194>
 8006bc8:	ab07      	add	r3, sp, #28
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	003a      	movs	r2, r7
 8006bce:	0021      	movs	r1, r4
 8006bd0:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <_svfiprintf_r+0x1fc>)
 8006bd2:	9803      	ldr	r0, [sp, #12]
 8006bd4:	e000      	b.n	8006bd8 <_svfiprintf_r+0x1c0>
 8006bd6:	bf00      	nop
 8006bd8:	9004      	str	r0, [sp, #16]
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	d1d3      	bne.n	8006b88 <_svfiprintf_r+0x170>
 8006be0:	89bb      	ldrh	r3, [r7, #12]
 8006be2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006be4:	065b      	lsls	r3, r3, #25
 8006be6:	d400      	bmi.n	8006bea <_svfiprintf_r+0x1d2>
 8006be8:	e72d      	b.n	8006a46 <_svfiprintf_r+0x2e>
 8006bea:	2001      	movs	r0, #1
 8006bec:	4240      	negs	r0, r0
 8006bee:	e72a      	b.n	8006a46 <_svfiprintf_r+0x2e>
 8006bf0:	ab07      	add	r3, sp, #28
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	003a      	movs	r2, r7
 8006bf6:	0021      	movs	r1, r4
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <_svfiprintf_r+0x1fc>)
 8006bfa:	9803      	ldr	r0, [sp, #12]
 8006bfc:	f000 f87c 	bl	8006cf8 <_printf_i>
 8006c00:	e7ea      	b.n	8006bd8 <_svfiprintf_r+0x1c0>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	080074bc 	.word	0x080074bc
 8006c08:	080074c2 	.word	0x080074c2
 8006c0c:	080074c6 	.word	0x080074c6
 8006c10:	00000000 	.word	0x00000000
 8006c14:	08006955 	.word	0x08006955

08006c18 <_printf_common>:
 8006c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1a:	0015      	movs	r5, r2
 8006c1c:	9301      	str	r3, [sp, #4]
 8006c1e:	688a      	ldr	r2, [r1, #8]
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	000c      	movs	r4, r1
 8006c24:	9000      	str	r0, [sp, #0]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	da00      	bge.n	8006c2c <_printf_common+0x14>
 8006c2a:	0013      	movs	r3, r2
 8006c2c:	0022      	movs	r2, r4
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	3243      	adds	r2, #67	; 0x43
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d001      	beq.n	8006c3c <_printf_common+0x24>
 8006c38:	3301      	adds	r3, #1
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	069b      	lsls	r3, r3, #26
 8006c40:	d502      	bpl.n	8006c48 <_printf_common+0x30>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	3302      	adds	r3, #2
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	0017      	movs	r7, r2
 8006c4e:	401f      	ands	r7, r3
 8006c50:	421a      	tst	r2, r3
 8006c52:	d027      	beq.n	8006ca4 <_printf_common+0x8c>
 8006c54:	0023      	movs	r3, r4
 8006c56:	3343      	adds	r3, #67	; 0x43
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	4193      	sbcs	r3, r2
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	0692      	lsls	r2, r2, #26
 8006c62:	d430      	bmi.n	8006cc6 <_printf_common+0xae>
 8006c64:	0022      	movs	r2, r4
 8006c66:	9901      	ldr	r1, [sp, #4]
 8006c68:	9800      	ldr	r0, [sp, #0]
 8006c6a:	9e08      	ldr	r6, [sp, #32]
 8006c6c:	3243      	adds	r2, #67	; 0x43
 8006c6e:	47b0      	blx	r6
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d025      	beq.n	8006cc0 <_printf_common+0xa8>
 8006c74:	2306      	movs	r3, #6
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	682a      	ldr	r2, [r5, #0]
 8006c7a:	68e1      	ldr	r1, [r4, #12]
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	4003      	ands	r3, r0
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d103      	bne.n	8006c8c <_printf_common+0x74>
 8006c84:	1a8d      	subs	r5, r1, r2
 8006c86:	43eb      	mvns	r3, r5
 8006c88:	17db      	asrs	r3, r3, #31
 8006c8a:	401d      	ands	r5, r3
 8006c8c:	68a3      	ldr	r3, [r4, #8]
 8006c8e:	6922      	ldr	r2, [r4, #16]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	dd01      	ble.n	8006c98 <_printf_common+0x80>
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	18ed      	adds	r5, r5, r3
 8006c98:	2700      	movs	r7, #0
 8006c9a:	42bd      	cmp	r5, r7
 8006c9c:	d120      	bne.n	8006ce0 <_printf_common+0xc8>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e010      	b.n	8006cc4 <_printf_common+0xac>
 8006ca2:	3701      	adds	r7, #1
 8006ca4:	68e3      	ldr	r3, [r4, #12]
 8006ca6:	682a      	ldr	r2, [r5, #0]
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	ddd2      	ble.n	8006c54 <_printf_common+0x3c>
 8006cae:	0022      	movs	r2, r4
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	9901      	ldr	r1, [sp, #4]
 8006cb4:	9800      	ldr	r0, [sp, #0]
 8006cb6:	9e08      	ldr	r6, [sp, #32]
 8006cb8:	3219      	adds	r2, #25
 8006cba:	47b0      	blx	r6
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d1f0      	bne.n	8006ca2 <_printf_common+0x8a>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4240      	negs	r0, r0
 8006cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc6:	2030      	movs	r0, #48	; 0x30
 8006cc8:	18e1      	adds	r1, r4, r3
 8006cca:	3143      	adds	r1, #67	; 0x43
 8006ccc:	7008      	strb	r0, [r1, #0]
 8006cce:	0021      	movs	r1, r4
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	3145      	adds	r1, #69	; 0x45
 8006cd4:	7809      	ldrb	r1, [r1, #0]
 8006cd6:	18a2      	adds	r2, r4, r2
 8006cd8:	3243      	adds	r2, #67	; 0x43
 8006cda:	3302      	adds	r3, #2
 8006cdc:	7011      	strb	r1, [r2, #0]
 8006cde:	e7c1      	b.n	8006c64 <_printf_common+0x4c>
 8006ce0:	0022      	movs	r2, r4
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	9901      	ldr	r1, [sp, #4]
 8006ce6:	9800      	ldr	r0, [sp, #0]
 8006ce8:	9e08      	ldr	r6, [sp, #32]
 8006cea:	321a      	adds	r2, #26
 8006cec:	47b0      	blx	r6
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d0e6      	beq.n	8006cc0 <_printf_common+0xa8>
 8006cf2:	3701      	adds	r7, #1
 8006cf4:	e7d1      	b.n	8006c9a <_printf_common+0x82>
	...

08006cf8 <_printf_i>:
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	b08b      	sub	sp, #44	; 0x2c
 8006cfc:	9206      	str	r2, [sp, #24]
 8006cfe:	000a      	movs	r2, r1
 8006d00:	3243      	adds	r2, #67	; 0x43
 8006d02:	9307      	str	r3, [sp, #28]
 8006d04:	9005      	str	r0, [sp, #20]
 8006d06:	9204      	str	r2, [sp, #16]
 8006d08:	7e0a      	ldrb	r2, [r1, #24]
 8006d0a:	000c      	movs	r4, r1
 8006d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d0e:	2a78      	cmp	r2, #120	; 0x78
 8006d10:	d807      	bhi.n	8006d22 <_printf_i+0x2a>
 8006d12:	2a62      	cmp	r2, #98	; 0x62
 8006d14:	d809      	bhi.n	8006d2a <_printf_i+0x32>
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d100      	bne.n	8006d1c <_printf_i+0x24>
 8006d1a:	e0c1      	b.n	8006ea0 <_printf_i+0x1a8>
 8006d1c:	2a58      	cmp	r2, #88	; 0x58
 8006d1e:	d100      	bne.n	8006d22 <_printf_i+0x2a>
 8006d20:	e08c      	b.n	8006e3c <_printf_i+0x144>
 8006d22:	0026      	movs	r6, r4
 8006d24:	3642      	adds	r6, #66	; 0x42
 8006d26:	7032      	strb	r2, [r6, #0]
 8006d28:	e022      	b.n	8006d70 <_printf_i+0x78>
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	3863      	subs	r0, #99	; 0x63
 8006d2e:	2815      	cmp	r0, #21
 8006d30:	d8f7      	bhi.n	8006d22 <_printf_i+0x2a>
 8006d32:	f7f9 f9e5 	bl	8000100 <__gnu_thumb1_case_shi>
 8006d36:	0016      	.short	0x0016
 8006d38:	fff6001f 	.word	0xfff6001f
 8006d3c:	fff6fff6 	.word	0xfff6fff6
 8006d40:	001ffff6 	.word	0x001ffff6
 8006d44:	fff6fff6 	.word	0xfff6fff6
 8006d48:	fff6fff6 	.word	0xfff6fff6
 8006d4c:	003600a8 	.word	0x003600a8
 8006d50:	fff6009a 	.word	0xfff6009a
 8006d54:	00b9fff6 	.word	0x00b9fff6
 8006d58:	0036fff6 	.word	0x0036fff6
 8006d5c:	fff6fff6 	.word	0xfff6fff6
 8006d60:	009e      	.short	0x009e
 8006d62:	0026      	movs	r6, r4
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	3642      	adds	r6, #66	; 0x42
 8006d68:	1d11      	adds	r1, r2, #4
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	6813      	ldr	r3, [r2, #0]
 8006d6e:	7033      	strb	r3, [r6, #0]
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0a7      	b.n	8006ec4 <_printf_i+0x1cc>
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	6819      	ldr	r1, [r3, #0]
 8006d78:	1d0a      	adds	r2, r1, #4
 8006d7a:	0605      	lsls	r5, r0, #24
 8006d7c:	d50b      	bpl.n	8006d96 <_printf_i+0x9e>
 8006d7e:	680d      	ldr	r5, [r1, #0]
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	da03      	bge.n	8006d8e <_printf_i+0x96>
 8006d86:	232d      	movs	r3, #45	; 0x2d
 8006d88:	9a04      	ldr	r2, [sp, #16]
 8006d8a:	426d      	negs	r5, r5
 8006d8c:	7013      	strb	r3, [r2, #0]
 8006d8e:	4b61      	ldr	r3, [pc, #388]	; (8006f14 <_printf_i+0x21c>)
 8006d90:	270a      	movs	r7, #10
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	e01b      	b.n	8006dce <_printf_i+0xd6>
 8006d96:	680d      	ldr	r5, [r1, #0]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	0641      	lsls	r1, r0, #25
 8006d9c:	d5f1      	bpl.n	8006d82 <_printf_i+0x8a>
 8006d9e:	b22d      	sxth	r5, r5
 8006da0:	e7ef      	b.n	8006d82 <_printf_i+0x8a>
 8006da2:	680d      	ldr	r5, [r1, #0]
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	1d08      	adds	r0, r1, #4
 8006da8:	6018      	str	r0, [r3, #0]
 8006daa:	062e      	lsls	r6, r5, #24
 8006dac:	d501      	bpl.n	8006db2 <_printf_i+0xba>
 8006dae:	680d      	ldr	r5, [r1, #0]
 8006db0:	e003      	b.n	8006dba <_printf_i+0xc2>
 8006db2:	066d      	lsls	r5, r5, #25
 8006db4:	d5fb      	bpl.n	8006dae <_printf_i+0xb6>
 8006db6:	680d      	ldr	r5, [r1, #0]
 8006db8:	b2ad      	uxth	r5, r5
 8006dba:	4b56      	ldr	r3, [pc, #344]	; (8006f14 <_printf_i+0x21c>)
 8006dbc:	2708      	movs	r7, #8
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	2a6f      	cmp	r2, #111	; 0x6f
 8006dc2:	d000      	beq.n	8006dc6 <_printf_i+0xce>
 8006dc4:	3702      	adds	r7, #2
 8006dc6:	0023      	movs	r3, r4
 8006dc8:	2200      	movs	r2, #0
 8006dca:	3343      	adds	r3, #67	; 0x43
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	60a3      	str	r3, [r4, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	db03      	blt.n	8006dde <_printf_i+0xe6>
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	6821      	ldr	r1, [r4, #0]
 8006dda:	4391      	bics	r1, r2
 8006ddc:	6021      	str	r1, [r4, #0]
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	d102      	bne.n	8006de8 <_printf_i+0xf0>
 8006de2:	9e04      	ldr	r6, [sp, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00c      	beq.n	8006e02 <_printf_i+0x10a>
 8006de8:	9e04      	ldr	r6, [sp, #16]
 8006dea:	0028      	movs	r0, r5
 8006dec:	0039      	movs	r1, r7
 8006dee:	f7f9 fa17 	bl	8000220 <__aeabi_uidivmod>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	3e01      	subs	r6, #1
 8006df6:	5c5b      	ldrb	r3, [r3, r1]
 8006df8:	7033      	strb	r3, [r6, #0]
 8006dfa:	002b      	movs	r3, r5
 8006dfc:	0005      	movs	r5, r0
 8006dfe:	429f      	cmp	r7, r3
 8006e00:	d9f3      	bls.n	8006dea <_printf_i+0xf2>
 8006e02:	2f08      	cmp	r7, #8
 8006e04:	d109      	bne.n	8006e1a <_printf_i+0x122>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d506      	bpl.n	8006e1a <_printf_i+0x122>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	6922      	ldr	r2, [r4, #16]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	dc02      	bgt.n	8006e1a <_printf_i+0x122>
 8006e14:	2330      	movs	r3, #48	; 0x30
 8006e16:	3e01      	subs	r6, #1
 8006e18:	7033      	strb	r3, [r6, #0]
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	1b9b      	subs	r3, r3, r6
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	0021      	movs	r1, r4
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	9805      	ldr	r0, [sp, #20]
 8006e28:	9b06      	ldr	r3, [sp, #24]
 8006e2a:	aa09      	add	r2, sp, #36	; 0x24
 8006e2c:	f7ff fef4 	bl	8006c18 <_printf_common>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d14c      	bne.n	8006ece <_printf_i+0x1d6>
 8006e34:	2001      	movs	r0, #1
 8006e36:	4240      	negs	r0, r0
 8006e38:	b00b      	add	sp, #44	; 0x2c
 8006e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3c:	3145      	adds	r1, #69	; 0x45
 8006e3e:	700a      	strb	r2, [r1, #0]
 8006e40:	4a34      	ldr	r2, [pc, #208]	; (8006f14 <_printf_i+0x21c>)
 8006e42:	9203      	str	r2, [sp, #12]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	ca20      	ldmia	r2!, {r5}
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	0608      	lsls	r0, r1, #24
 8006e4e:	d516      	bpl.n	8006e7e <_printf_i+0x186>
 8006e50:	07cb      	lsls	r3, r1, #31
 8006e52:	d502      	bpl.n	8006e5a <_printf_i+0x162>
 8006e54:	2320      	movs	r3, #32
 8006e56:	4319      	orrs	r1, r3
 8006e58:	6021      	str	r1, [r4, #0]
 8006e5a:	2710      	movs	r7, #16
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	d1b2      	bne.n	8006dc6 <_printf_i+0xce>
 8006e60:	2320      	movs	r3, #32
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	439a      	bics	r2, r3
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	e7ad      	b.n	8006dc6 <_printf_i+0xce>
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	6809      	ldr	r1, [r1, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	0022      	movs	r2, r4
 8006e74:	2178      	movs	r1, #120	; 0x78
 8006e76:	3245      	adds	r2, #69	; 0x45
 8006e78:	7011      	strb	r1, [r2, #0]
 8006e7a:	4a27      	ldr	r2, [pc, #156]	; (8006f18 <_printf_i+0x220>)
 8006e7c:	e7e1      	b.n	8006e42 <_printf_i+0x14a>
 8006e7e:	0648      	lsls	r0, r1, #25
 8006e80:	d5e6      	bpl.n	8006e50 <_printf_i+0x158>
 8006e82:	b2ad      	uxth	r5, r5
 8006e84:	e7e4      	b.n	8006e50 <_printf_i+0x158>
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	680d      	ldr	r5, [r1, #0]
 8006e8a:	1d10      	adds	r0, r2, #4
 8006e8c:	6949      	ldr	r1, [r1, #20]
 8006e8e:	6018      	str	r0, [r3, #0]
 8006e90:	6813      	ldr	r3, [r2, #0]
 8006e92:	062e      	lsls	r6, r5, #24
 8006e94:	d501      	bpl.n	8006e9a <_printf_i+0x1a2>
 8006e96:	6019      	str	r1, [r3, #0]
 8006e98:	e002      	b.n	8006ea0 <_printf_i+0x1a8>
 8006e9a:	066d      	lsls	r5, r5, #25
 8006e9c:	d5fb      	bpl.n	8006e96 <_printf_i+0x19e>
 8006e9e:	8019      	strh	r1, [r3, #0]
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9e04      	ldr	r6, [sp, #16]
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	e7bb      	b.n	8006e20 <_printf_i+0x128>
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	1d11      	adds	r1, r2, #4
 8006eac:	6019      	str	r1, [r3, #0]
 8006eae:	6816      	ldr	r6, [r2, #0]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	0030      	movs	r0, r6
 8006eb4:	6862      	ldr	r2, [r4, #4]
 8006eb6:	f000 f833 	bl	8006f20 <memchr>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d001      	beq.n	8006ec2 <_printf_i+0x1ca>
 8006ebe:	1b80      	subs	r0, r0, r6
 8006ec0:	6060      	str	r0, [r4, #4]
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9a04      	ldr	r2, [sp, #16]
 8006eca:	7013      	strb	r3, [r2, #0]
 8006ecc:	e7a8      	b.n	8006e20 <_printf_i+0x128>
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	0032      	movs	r2, r6
 8006ed2:	9906      	ldr	r1, [sp, #24]
 8006ed4:	9805      	ldr	r0, [sp, #20]
 8006ed6:	9d07      	ldr	r5, [sp, #28]
 8006ed8:	47a8      	blx	r5
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d0aa      	beq.n	8006e34 <_printf_i+0x13c>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	079b      	lsls	r3, r3, #30
 8006ee2:	d415      	bmi.n	8006f10 <_printf_i+0x218>
 8006ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee6:	68e0      	ldr	r0, [r4, #12]
 8006ee8:	4298      	cmp	r0, r3
 8006eea:	daa5      	bge.n	8006e38 <_printf_i+0x140>
 8006eec:	0018      	movs	r0, r3
 8006eee:	e7a3      	b.n	8006e38 <_printf_i+0x140>
 8006ef0:	0022      	movs	r2, r4
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9906      	ldr	r1, [sp, #24]
 8006ef6:	9805      	ldr	r0, [sp, #20]
 8006ef8:	9e07      	ldr	r6, [sp, #28]
 8006efa:	3219      	adds	r2, #25
 8006efc:	47b0      	blx	r6
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	d098      	beq.n	8006e34 <_printf_i+0x13c>
 8006f02:	3501      	adds	r5, #1
 8006f04:	68e3      	ldr	r3, [r4, #12]
 8006f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	42ab      	cmp	r3, r5
 8006f0c:	dcf0      	bgt.n	8006ef0 <_printf_i+0x1f8>
 8006f0e:	e7e9      	b.n	8006ee4 <_printf_i+0x1ec>
 8006f10:	2500      	movs	r5, #0
 8006f12:	e7f7      	b.n	8006f04 <_printf_i+0x20c>
 8006f14:	080074cd 	.word	0x080074cd
 8006f18:	080074de 	.word	0x080074de

08006f1c <__retarget_lock_acquire_recursive>:
 8006f1c:	4770      	bx	lr

08006f1e <__retarget_lock_release_recursive>:
 8006f1e:	4770      	bx	lr

08006f20 <memchr>:
 8006f20:	b2c9      	uxtb	r1, r1
 8006f22:	1882      	adds	r2, r0, r2
 8006f24:	4290      	cmp	r0, r2
 8006f26:	d101      	bne.n	8006f2c <memchr+0xc>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	4770      	bx	lr
 8006f2c:	7803      	ldrb	r3, [r0, #0]
 8006f2e:	428b      	cmp	r3, r1
 8006f30:	d0fb      	beq.n	8006f2a <memchr+0xa>
 8006f32:	3001      	adds	r0, #1
 8006f34:	e7f6      	b.n	8006f24 <memchr+0x4>

08006f36 <memmove>:
 8006f36:	b510      	push	{r4, lr}
 8006f38:	4288      	cmp	r0, r1
 8006f3a:	d902      	bls.n	8006f42 <memmove+0xc>
 8006f3c:	188b      	adds	r3, r1, r2
 8006f3e:	4298      	cmp	r0, r3
 8006f40:	d303      	bcc.n	8006f4a <memmove+0x14>
 8006f42:	2300      	movs	r3, #0
 8006f44:	e007      	b.n	8006f56 <memmove+0x20>
 8006f46:	5c8b      	ldrb	r3, [r1, r2]
 8006f48:	5483      	strb	r3, [r0, r2]
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	d2fb      	bcs.n	8006f46 <memmove+0x10>
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	5ccc      	ldrb	r4, [r1, r3]
 8006f52:	54c4      	strb	r4, [r0, r3]
 8006f54:	3301      	adds	r3, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d1fa      	bne.n	8006f50 <memmove+0x1a>
 8006f5a:	e7f8      	b.n	8006f4e <memmove+0x18>

08006f5c <_realloc_r>:
 8006f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f5e:	0007      	movs	r7, r0
 8006f60:	000e      	movs	r6, r1
 8006f62:	0014      	movs	r4, r2
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d105      	bne.n	8006f74 <_realloc_r+0x18>
 8006f68:	0011      	movs	r1, r2
 8006f6a:	f7ff fc2d 	bl	80067c8 <_malloc_r>
 8006f6e:	0005      	movs	r5, r0
 8006f70:	0028      	movs	r0, r5
 8006f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	d103      	bne.n	8006f80 <_realloc_r+0x24>
 8006f78:	f7ff fbba 	bl	80066f0 <_free_r>
 8006f7c:	0025      	movs	r5, r4
 8006f7e:	e7f7      	b.n	8006f70 <_realloc_r+0x14>
 8006f80:	f000 f81b 	bl	8006fba <_malloc_usable_size_r>
 8006f84:	9001      	str	r0, [sp, #4]
 8006f86:	4284      	cmp	r4, r0
 8006f88:	d803      	bhi.n	8006f92 <_realloc_r+0x36>
 8006f8a:	0035      	movs	r5, r6
 8006f8c:	0843      	lsrs	r3, r0, #1
 8006f8e:	42a3      	cmp	r3, r4
 8006f90:	d3ee      	bcc.n	8006f70 <_realloc_r+0x14>
 8006f92:	0021      	movs	r1, r4
 8006f94:	0038      	movs	r0, r7
 8006f96:	f7ff fc17 	bl	80067c8 <_malloc_r>
 8006f9a:	1e05      	subs	r5, r0, #0
 8006f9c:	d0e8      	beq.n	8006f70 <_realloc_r+0x14>
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	0022      	movs	r2, r4
 8006fa2:	429c      	cmp	r4, r3
 8006fa4:	d900      	bls.n	8006fa8 <_realloc_r+0x4c>
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	0031      	movs	r1, r6
 8006faa:	0028      	movs	r0, r5
 8006fac:	f7ff fb8e 	bl	80066cc <memcpy>
 8006fb0:	0031      	movs	r1, r6
 8006fb2:	0038      	movs	r0, r7
 8006fb4:	f7ff fb9c 	bl	80066f0 <_free_r>
 8006fb8:	e7da      	b.n	8006f70 <_realloc_r+0x14>

08006fba <_malloc_usable_size_r>:
 8006fba:	1f0b      	subs	r3, r1, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	1f18      	subs	r0, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da01      	bge.n	8006fc8 <_malloc_usable_size_r+0xe>
 8006fc4:	580b      	ldr	r3, [r1, r0]
 8006fc6:	18c0      	adds	r0, r0, r3
 8006fc8:	4770      	bx	lr
	...

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
