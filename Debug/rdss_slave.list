
rdss_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b5c  08005b5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08005bd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005bd4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed3a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  0002edd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e86  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f930  00000000  00000000  0004adf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e4a1  00000000  00000000  0005a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd4  00000000  00000000  000e8c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080058a0 	.word	0x080058a0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080058a0 	.word	0x080058a0

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uldivmod>:
 800022c:	2b00      	cmp	r3, #0
 800022e:	d111      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000230:	2a00      	cmp	r2, #0
 8000232:	d10f      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000234:	2900      	cmp	r1, #0
 8000236:	d100      	bne.n	800023a <__aeabi_uldivmod+0xe>
 8000238:	2800      	cmp	r0, #0
 800023a:	d002      	beq.n	8000242 <__aeabi_uldivmod+0x16>
 800023c:	2100      	movs	r1, #0
 800023e:	43c9      	mvns	r1, r1
 8000240:	0008      	movs	r0, r1
 8000242:	b407      	push	{r0, r1, r2}
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <__aeabi_uldivmod+0x24>)
 8000246:	a102      	add	r1, pc, #8	; (adr r1, 8000250 <__aeabi_uldivmod+0x24>)
 8000248:	1840      	adds	r0, r0, r1
 800024a:	9002      	str	r0, [sp, #8]
 800024c:	bd03      	pop	{r0, r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	ffffffd9 	.word	0xffffffd9
 8000254:	b403      	push	{r0, r1}
 8000256:	4668      	mov	r0, sp
 8000258:	b501      	push	{r0, lr}
 800025a:	9802      	ldr	r0, [sp, #8]
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	9b01      	ldr	r3, [sp, #4]
 8000262:	469e      	mov	lr, r3
 8000264:	b002      	add	sp, #8
 8000266:	bc0c      	pop	{r2, r3}
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__udivmoddi4>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	0004      	movs	r4, r0
 800027a:	000d      	movs	r5, r1
 800027c:	4692      	mov	sl, r2
 800027e:	4699      	mov	r9, r3
 8000280:	b083      	sub	sp, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d830      	bhi.n	80002e8 <__udivmoddi4+0x7c>
 8000286:	d02d      	beq.n	80002e4 <__udivmoddi4+0x78>
 8000288:	4649      	mov	r1, r9
 800028a:	4650      	mov	r0, sl
 800028c:	f000 f8d8 	bl	8000440 <__clzdi2>
 8000290:	0029      	movs	r1, r5
 8000292:	0006      	movs	r6, r0
 8000294:	0020      	movs	r0, r4
 8000296:	f000 f8d3 	bl	8000440 <__clzdi2>
 800029a:	1a33      	subs	r3, r6, r0
 800029c:	4698      	mov	r8, r3
 800029e:	3b20      	subs	r3, #32
 80002a0:	469b      	mov	fp, r3
 80002a2:	d433      	bmi.n	800030c <__udivmoddi4+0xa0>
 80002a4:	465a      	mov	r2, fp
 80002a6:	4653      	mov	r3, sl
 80002a8:	4093      	lsls	r3, r2
 80002aa:	4642      	mov	r2, r8
 80002ac:	001f      	movs	r7, r3
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	001e      	movs	r6, r3
 80002b4:	42af      	cmp	r7, r5
 80002b6:	d83a      	bhi.n	800032e <__udivmoddi4+0xc2>
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d100      	bne.n	80002be <__udivmoddi4+0x52>
 80002bc:	e078      	b.n	80003b0 <__udivmoddi4+0x144>
 80002be:	465b      	mov	r3, fp
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5e>
 80002c8:	e075      	b.n	80003b6 <__udivmoddi4+0x14a>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e028      	b.n	8000336 <__udivmoddi4+0xca>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9cf      	bls.n	8000288 <__udivmoddi4+0x1c>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8e>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b003      	add	sp, #12
 8000300:	bcf0      	pop	{r4, r5, r6, r7}
 8000302:	46bb      	mov	fp, r7
 8000304:	46b2      	mov	sl, r6
 8000306:	46a9      	mov	r9, r5
 8000308:	46a0      	mov	r8, r4
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	4642      	mov	r2, r8
 800030e:	2320      	movs	r3, #32
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	4652      	mov	r2, sl
 8000314:	40da      	lsrs	r2, r3
 8000316:	4641      	mov	r1, r8
 8000318:	0013      	movs	r3, r2
 800031a:	464a      	mov	r2, r9
 800031c:	408a      	lsls	r2, r1
 800031e:	0017      	movs	r7, r2
 8000320:	4642      	mov	r2, r8
 8000322:	431f      	orrs	r7, r3
 8000324:	4653      	mov	r3, sl
 8000326:	4093      	lsls	r3, r2
 8000328:	001e      	movs	r6, r3
 800032a:	42af      	cmp	r7, r5
 800032c:	d9c4      	bls.n	80002b8 <__udivmoddi4+0x4c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0d9      	beq.n	80002f0 <__udivmoddi4+0x84>
 800033c:	07fb      	lsls	r3, r7, #31
 800033e:	0872      	lsrs	r2, r6, #1
 8000340:	431a      	orrs	r2, r3
 8000342:	4646      	mov	r6, r8
 8000344:	087b      	lsrs	r3, r7, #1
 8000346:	e00e      	b.n	8000366 <__udivmoddi4+0xfa>
 8000348:	42ab      	cmp	r3, r5
 800034a:	d101      	bne.n	8000350 <__udivmoddi4+0xe4>
 800034c:	42a2      	cmp	r2, r4
 800034e:	d80c      	bhi.n	800036a <__udivmoddi4+0xfe>
 8000350:	1aa4      	subs	r4, r4, r2
 8000352:	419d      	sbcs	r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	1924      	adds	r4, r4, r4
 8000358:	416d      	adcs	r5, r5
 800035a:	2100      	movs	r1, #0
 800035c:	3e01      	subs	r6, #1
 800035e:	1824      	adds	r4, r4, r0
 8000360:	414d      	adcs	r5, r1
 8000362:	2e00      	cmp	r6, #0
 8000364:	d006      	beq.n	8000374 <__udivmoddi4+0x108>
 8000366:	42ab      	cmp	r3, r5
 8000368:	d9ee      	bls.n	8000348 <__udivmoddi4+0xdc>
 800036a:	3e01      	subs	r6, #1
 800036c:	1924      	adds	r4, r4, r4
 800036e:	416d      	adcs	r5, r5
 8000370:	2e00      	cmp	r6, #0
 8000372:	d1f8      	bne.n	8000366 <__udivmoddi4+0xfa>
 8000374:	9800      	ldr	r0, [sp, #0]
 8000376:	9901      	ldr	r1, [sp, #4]
 8000378:	465b      	mov	r3, fp
 800037a:	1900      	adds	r0, r0, r4
 800037c:	4169      	adcs	r1, r5
 800037e:	2b00      	cmp	r3, #0
 8000380:	db24      	blt.n	80003cc <__udivmoddi4+0x160>
 8000382:	002b      	movs	r3, r5
 8000384:	465a      	mov	r2, fp
 8000386:	4644      	mov	r4, r8
 8000388:	40d3      	lsrs	r3, r2
 800038a:	002a      	movs	r2, r5
 800038c:	40e2      	lsrs	r2, r4
 800038e:	001c      	movs	r4, r3
 8000390:	465b      	mov	r3, fp
 8000392:	0015      	movs	r5, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	db2a      	blt.n	80003ee <__udivmoddi4+0x182>
 8000398:	0026      	movs	r6, r4
 800039a:	409e      	lsls	r6, r3
 800039c:	0033      	movs	r3, r6
 800039e:	0026      	movs	r6, r4
 80003a0:	4647      	mov	r7, r8
 80003a2:	40be      	lsls	r6, r7
 80003a4:	0032      	movs	r2, r6
 80003a6:	1a80      	subs	r0, r0, r2
 80003a8:	4199      	sbcs	r1, r3
 80003aa:	9000      	str	r0, [sp, #0]
 80003ac:	9101      	str	r1, [sp, #4]
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x84>
 80003b0:	42a3      	cmp	r3, r4
 80003b2:	d8bc      	bhi.n	800032e <__udivmoddi4+0xc2>
 80003b4:	e783      	b.n	80002be <__udivmoddi4+0x52>
 80003b6:	4642      	mov	r2, r8
 80003b8:	2320      	movs	r3, #32
 80003ba:	2100      	movs	r1, #0
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	2200      	movs	r2, #0
 80003c0:	9100      	str	r1, [sp, #0]
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	2201      	movs	r2, #1
 80003c6:	40da      	lsrs	r2, r3
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	e786      	b.n	80002da <__udivmoddi4+0x6e>
 80003cc:	4642      	mov	r2, r8
 80003ce:	2320      	movs	r3, #32
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	4646      	mov	r6, r8
 80003d6:	409a      	lsls	r2, r3
 80003d8:	0023      	movs	r3, r4
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	4644      	mov	r4, r8
 80003de:	4313      	orrs	r3, r2
 80003e0:	002a      	movs	r2, r5
 80003e2:	40e2      	lsrs	r2, r4
 80003e4:	001c      	movs	r4, r3
 80003e6:	465b      	mov	r3, fp
 80003e8:	0015      	movs	r5, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dad4      	bge.n	8000398 <__udivmoddi4+0x12c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	002f      	movs	r7, r5
 80003f2:	2320      	movs	r3, #32
 80003f4:	0026      	movs	r6, r4
 80003f6:	4097      	lsls	r7, r2
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	40de      	lsrs	r6, r3
 80003fc:	003b      	movs	r3, r7
 80003fe:	4333      	orrs	r3, r6
 8000400:	e7cd      	b.n	800039e <__udivmoddi4+0x132>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__clzsi2>:
 8000404:	211c      	movs	r1, #28
 8000406:	2301      	movs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	4298      	cmp	r0, r3
 800040c:	d301      	bcc.n	8000412 <__clzsi2+0xe>
 800040e:	0c00      	lsrs	r0, r0, #16
 8000410:	3910      	subs	r1, #16
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	4298      	cmp	r0, r3
 8000416:	d301      	bcc.n	800041c <__clzsi2+0x18>
 8000418:	0a00      	lsrs	r0, r0, #8
 800041a:	3908      	subs	r1, #8
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	4298      	cmp	r0, r3
 8000420:	d301      	bcc.n	8000426 <__clzsi2+0x22>
 8000422:	0900      	lsrs	r0, r0, #4
 8000424:	3904      	subs	r1, #4
 8000426:	a202      	add	r2, pc, #8	; (adr r2, 8000430 <__clzsi2+0x2c>)
 8000428:	5c10      	ldrb	r0, [r2, r0]
 800042a:	1840      	adds	r0, r0, r1
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	02020304 	.word	0x02020304
 8000434:	01010101 	.word	0x01010101
	...

08000440 <__clzdi2>:
 8000440:	b510      	push	{r4, lr}
 8000442:	2900      	cmp	r1, #0
 8000444:	d103      	bne.n	800044e <__clzdi2+0xe>
 8000446:	f7ff ffdd 	bl	8000404 <__clzsi2>
 800044a:	3020      	adds	r0, #32
 800044c:	e002      	b.n	8000454 <__clzdi2+0x14>
 800044e:	0008      	movs	r0, r1
 8000450:	f7ff ffd8 	bl	8000404 <__clzsi2>
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	000a      	movs	r2, r1
 8000462:	1cfb      	adds	r3, r7, #3
 8000464:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <readRegister+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	2101      	movs	r1, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f003 f982 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f002 f9d4 	bl	8002820 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000478:	1cf9      	adds	r1, r7, #3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	2201      	movs	r2, #1
 8000480:	f003 ff28 	bl	80042d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000484:	240f      	movs	r4, #15
 8000486:	1939      	adds	r1, r7, r4
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	2364      	movs	r3, #100	; 0x64
 800048c:	2201      	movs	r2, #1
 800048e:	f004 f879 	bl	8004584 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f002 f9c4 	bl	8002820 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <readRegister+0x58>)
 800049a:	2201      	movs	r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	0018      	movs	r0, r3
 80004a0:	f003 f969 	bl	8003776 <HAL_GPIO_WritePin>
	return rec;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	781b      	ldrb	r3, [r3, #0]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b005      	add	sp, #20
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	50000400 	.word	0x50000400

080004b4 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004b4:	b5b0      	push	{r4, r5, r7, lr}
 80004b6:	b08e      	sub	sp, #56	; 0x38
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	0008      	movs	r0, r1
 80004be:	607a      	str	r2, [r7, #4]
 80004c0:	0019      	movs	r1, r3
 80004c2:	240b      	movs	r4, #11
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	1c02      	adds	r2, r0, #0
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	230a      	movs	r3, #10
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	1c0a      	adds	r2, r1, #0
 80004d0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 80004d2:	2510      	movs	r5, #16
 80004d4:	197b      	adds	r3, r7, r5
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	3304      	adds	r3, #4
 80004dc:	221a      	movs	r2, #26
 80004de:	2100      	movs	r1, #0
 80004e0:	0018      	movs	r0, r3
 80004e2:	f004 fd74 	bl	8004fce <memset>
	tx_data[0] = address | 0x80;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	4252      	negs	r2, r2
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	197b      	adds	r3, r7, r5
 80004f4:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004fa:	2301      	movs	r3, #1
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
 80004fe:	e00f      	b.n	8000520 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 8000500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	637a      	str	r2, [r7, #52]	; 0x34
 8000506:	001a      	movs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	189b      	adds	r3, r3, r2
 800050c:	7819      	ldrb	r1, [r3, #0]
 800050e:	2310      	movs	r3, #16
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	1c0a      	adds	r2, r1, #0
 8000518:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 800051a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800051c:	3301      	adds	r3, #1
 800051e:	633b      	str	r3, [r7, #48]	; 0x30
 8000520:	240a      	movs	r4, #10
 8000522:	193b      	adds	r3, r7, r4
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000528:	429a      	cmp	r2, r3
 800052a:	dde9      	ble.n	8000500 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <writeRegister+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	0018      	movs	r0, r3
 8000534:	f003 f91f 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	3301      	adds	r3, #1
 8000540:	b29a      	uxth	r2, r3
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	2110      	movs	r1, #16
 8000548:	1879      	adds	r1, r7, r1
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f003 fec2 	bl	80042d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <writeRegister+0xbc>)
 8000552:	2201      	movs	r2, #1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f003 f90d 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f002 f95f 	bl	8002820 <HAL_Delay>
	return cmd;  // pull the pin high
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b00e      	add	sp, #56	; 0x38
 800056c:	bdb0      	pop	{r4, r5, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	50000400 	.word	0x50000400

08000574 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	0b51      	lsrs	r1, r2, #13
 8000584:	04dd      	lsls	r5, r3, #19
 8000586:	430d      	orrs	r5, r1
 8000588:	04d4      	lsls	r4, r2, #19
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <setRFFrequency+0x98>)
 800058c:	2300      	movs	r3, #0
 800058e:	0020      	movs	r0, r4
 8000590:	0029      	movs	r1, r5
 8000592:	f7ff fe4b 	bl	800022c <__aeabi_uldivmod>
 8000596:	0002      	movs	r2, r0
 8000598:	000b      	movs	r3, r1
 800059a:	623a      	str	r2, [r7, #32]
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	6a3a      	ldr	r2, [r7, #32]
 80005a4:	0c12      	lsrs	r2, r2, #16
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	431a      	orrs	r2, r3
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	0c1b      	lsrs	r3, r3, #16
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	7a3a      	ldrb	r2, [r7, #8]
 80005b6:	210c      	movs	r1, #12
 80005b8:	2010      	movs	r0, #16
 80005ba:	180b      	adds	r3, r1, r0
 80005bc:	19db      	adds	r3, r3, r7
 80005be:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	061b      	lsls	r3, r3, #24
 80005c4:	6a3a      	ldr	r2, [r7, #32]
 80005c6:	0a12      	lsrs	r2, r2, #8
 80005c8:	603a      	str	r2, [r7, #0]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	431a      	orrs	r2, r3
 80005ce:	603a      	str	r2, [r7, #0]
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	783a      	ldrb	r2, [r7, #0]
 80005d8:	180b      	adds	r3, r1, r0
 80005da:	19db      	adds	r3, r3, r7
 80005dc:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005de:	6a3a      	ldr	r2, [r7, #32]
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	1c13      	adds	r3, r2, #0
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	0004      	movs	r4, r0
 80005e8:	180b      	adds	r3, r1, r0
 80005ea:	19db      	adds	r3, r3, r7
 80005ec:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	2394      	movs	r3, #148	; 0x94
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	58d0      	ldr	r0, [r2, r3]
 80005f6:	190b      	adds	r3, r1, r4
 80005f8:	19da      	adds	r2, r3, r7
 80005fa:	2303      	movs	r3, #3
 80005fc:	2106      	movs	r1, #6
 80005fe:	f7ff ff59 	bl	80004b4 <writeRegister>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00a      	add	sp, #40	; 0x28
 8000608:	bdb0      	pop	{r4, r5, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	01e84800 	.word	0x01e84800

08000610 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	2394      	movs	r3, #148	; 0x94
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	58d0      	ldr	r0, [r2, r3]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3310      	adds	r3, #16
 8000624:	001a      	movs	r2, r3
 8000626:	2301      	movs	r3, #1
 8000628:	2109      	movs	r1, #9
 800062a:	f7ff ff43 	bl	80004b4 <writeRegister>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	2394      	movs	r3, #148	; 0x94
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	58d0      	ldr	r0, [r2, r3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3316      	adds	r3, #22
 800064a:	001a      	movs	r2, r3
 800064c:	2301      	movs	r3, #1
 800064e:	2139      	movs	r1, #57	; 0x39
 8000650:	f7ff ff30 	bl	80004b4 <writeRegister>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}

0800065c <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	2394      	movs	r3, #148	; 0x94
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	58d0      	ldr	r0, [r2, r3]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3317      	adds	r3, #23
 8000670:	001a      	movs	r2, r3
 8000672:	2301      	movs	r3, #1
 8000674:	210b      	movs	r1, #11
 8000676:	f7ff ff1d 	bl	80004b4 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}

08000682 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	2394      	movs	r3, #148	; 0x94
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	58d0      	ldr	r0, [r2, r3]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	331a      	adds	r3, #26
 8000696:	001a      	movs	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	211f      	movs	r1, #31
 800069c:	f7ff ff0a 	bl	80004b4 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	2394      	movs	r3, #148	; 0x94
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	58d0      	ldr	r0, [r2, r3]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	331c      	adds	r3, #28
 80006ac:	001a      	movs	r2, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	f7ff feff 	bl	80004b4 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	2394      	movs	r3, #148	; 0x94
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	58d0      	ldr	r0, [r2, r3]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	331d      	adds	r3, #29
 80006c2:	001a      	movs	r2, r3
 80006c4:	2301      	movs	r3, #1
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	f7ff fef4 	bl	80004b4 <writeRegister>
			1);
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80006dc:	210f      	movs	r1, #15
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c9b      	ldrb	r3, [r3, #18]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7cdb      	ldrb	r3, [r3, #19]
 80006f4:	18db      	adds	r3, r3, r3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	000c      	movs	r4, r1
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	18d3      	adds	r3, r2, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	193b      	adds	r3, r7, r4
 8000704:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2221      	movs	r2, #33	; 0x21
 800070a:	5c9a      	ldrb	r2, [r3, r2]
 800070c:	193b      	adds	r3, r7, r4
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	18d3      	adds	r3, r2, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	193b      	adds	r3, r7, r4
 8000716:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	2394      	movs	r3, #148	; 0x94
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	58d0      	ldr	r0, [r2, r3]
 8000720:	193a      	adds	r2, r7, r4
 8000722:	2301      	movs	r3, #1
 8000724:	211d      	movs	r1, #29
 8000726:	f7ff fec5 	bl	80004b4 <writeRegister>

	cmd = module->LoRa_SF << 4;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7c5b      	ldrb	r3, [r3, #17]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2da      	uxtb	r2, r3
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d1b      	ldrb	r3, [r3, #20]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	187b      	adds	r3, r7, r1
 800074a:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7eda      	ldrb	r2, [r3, #27]
 8000750:	187b      	adds	r3, r7, r1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	2394      	movs	r3, #148	; 0x94
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	58d0      	ldr	r0, [r2, r3]
 8000764:	187a      	adds	r2, r7, r1
 8000766:	2301      	movs	r3, #1
 8000768:	211e      	movs	r1, #30
 800076a:	f7ff fea3 	bl	80004b4 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	2394      	movs	r3, #148	; 0x94
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	58d0      	ldr	r0, [r2, r3]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3319      	adds	r3, #25
 800077a:	001a      	movs	r2, r3
 800077c:	2301      	movs	r3, #1
 800077e:	2126      	movs	r1, #38	; 0x26
 8000780:	f7ff fe98 	bl	80004b4 <writeRegister>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b005      	add	sp, #20
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	2394      	movs	r3, #148	; 0x94
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	58d3      	ldr	r3, [r2, r3]
 800079c:	2131      	movs	r1, #49	; 0x31
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fe5a 	bl	8000458 <readRegister>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	210f      	movs	r1, #15
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2207      	movs	r2, #7
 80007b4:	4393      	bics	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2205      	movs	r2, #5
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	2394      	movs	r3, #148	; 0x94
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	58d0      	ldr	r0, [r2, r3]
 80007d2:	000c      	movs	r4, r1
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	2301      	movs	r3, #1
 80007d8:	2131      	movs	r1, #49	; 0x31
 80007da:	f7ff fe6b 	bl	80004b4 <writeRegister>
	tmp = 0x0C;
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	220c      	movs	r2, #12
 80007e4:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	2394      	movs	r3, #148	; 0x94
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	58d0      	ldr	r0, [r2, r3]
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	2301      	movs	r3, #1
 80007f2:	2137      	movs	r1, #55	; 0x37
 80007f4:	f7ff fe5e 	bl	80004b4 <writeRegister>
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b005      	add	sp, #20
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	2394      	movs	r3, #148	; 0x94
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	58d3      	ldr	r3, [r2, r3]
 8000810:	2101      	movs	r1, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fe20 	bl	8000458 <readRegister>
 8000818:	0003      	movs	r3, r0
 800081a:	001a      	movs	r2, r3
 800081c:	2307      	movs	r3, #7
 800081e:	4013      	ands	r3, r2
 8000820:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}

0800082a <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	000a      	movs	r2, r1
 8000834:	1cfb      	adds	r3, r7, #3
 8000836:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2278      	movs	r2, #120	; 0x78
 800083e:	4252      	negs	r2, r2
 8000840:	4313      	orrs	r3, r2
 8000842:	b2da      	uxtb	r2, r3
 8000844:	210f      	movs	r1, #15
 8000846:	187b      	adds	r3, r7, r1
 8000848:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	2394      	movs	r3, #148	; 0x94
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	58d0      	ldr	r0, [r2, r3]
 8000852:	187a      	adds	r2, r7, r1
 8000854:	2301      	movs	r3, #1
 8000856:	2101      	movs	r1, #1
 8000858:	f7ff fe2c 	bl	80004b4 <writeRegister>
	module->operatingMode = mode;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1cfa      	adds	r2, r7, #3
 8000860:	2123      	movs	r1, #35	; 0x23
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	545a      	strb	r2, [r3, r1]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b004      	add	sp, #16
 800086c:	bd80      	pop	{r7, pc}

0800086e <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000876:	210f      	movs	r1, #15
 8000878:	187b      	adds	r3, r7, r1
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	2394      	movs	r3, #148	; 0x94
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	58d0      	ldr	r0, [r2, r3]
 8000886:	187a      	adds	r2, r7, r1
 8000888:	2301      	movs	r3, #1
 800088a:	2112      	movs	r1, #18
 800088c:	f7ff fe12 	bl	80004b4 <writeRegister>
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b004      	add	sp, #16
 8000896:	bd80      	pop	{r7, pc}

08000898 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f002 ff45 	bl	800373c <HAL_GPIO_ReadPin>
 80008b2:	0003      	movs	r3, r0
 80008b4:	3b01      	subs	r3, #1
 80008b6:	425a      	negs	r2, r3
 80008b8:	4153      	adcs	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	01c9      	lsls	r1, r1, #7
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	4911      	ldr	r1, [pc, #68]	; (8000930 <ledInit+0x6c>)
 80008ea:	400a      	ands	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <ledInit+0x70>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <ledInit+0x70>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <ledInit+0x70>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <ledInit+0x70>)
 8000900:	2102      	movs	r1, #2
 8000902:	438a      	bics	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <ledInit+0x70>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <ledInit+0x70>)
 800090c:	2104      	movs	r1, #4
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <ledInit+0x70>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <ledInit+0x70>)
 8000918:	2108      	movs	r1, #8
 800091a:	438a      	bics	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
	led_reset(led);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	0018      	movs	r0, r3
 8000922:	f000 f809 	bl	8000938 <led_reset>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	ffff7fff 	.word	0xffff7fff
 8000934:	50000400 	.word	0x50000400

08000938 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000952:	f001 ff5b 	bl	800280c <HAL_GetTick>
 8000956:	0002      	movs	r2, r0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <USART1_IRQHandler>:
/* USER CODE BEGIN 0 */
UART1_t *uart1_ptr;
Vlad_t *vlad_ptr;
RS485_t *rs485_ptr;

void USART1_IRQHandler(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <USART1_IRQHandler+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fe09 	bl	8002598 <uart1_read_to_frame>
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000178 	.word	0x20000178

08000990 <setTxBaseParameters>:
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000998:	200f      	movs	r0, #15
 800099a:	183b      	adds	r3, r7, r0
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 80009a0:	240e      	movs	r4, #14
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 80009a8:	250d      	movs	r5, #13
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 80009b0:	260c      	movs	r6, #12
 80009b2:	19bb      	adds	r3, r7, r6
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]

	loraTx->frequency = UPLINK_FREQ; //
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <setTxBaseParameters+0xc8>)
 80009bc:	2300      	movs	r3, #0
 80009be:	608a      	str	r2, [r1, #8]
 80009c0:	60cb      	str	r3, [r1, #12]
	loraTx->power = SX1278_POWER_17DBM;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	22fc      	movs	r2, #252	; 0xfc
 80009c6:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	220a      	movs	r2, #10
 80009cc:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2206      	movs	r2, #6
 80009d2:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2202      	movs	r2, #2
 80009d8:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2234      	movs	r2, #52	; 0x34
 80009e4:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	220b      	movs	r2, #11
 80009ea:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2223      	movs	r2, #35	; 0x23
 80009f0:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2204      	movs	r2, #4
 80009f6:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2208      	movs	r2, #8
 80009fc:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2208      	movs	r2, #8
 8000a08:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3; //
 8000a0a:	183a      	adds	r2, r7, r0
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	7812      	ldrb	r2, [r2, #0]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	197b      	adds	r3, r7, r5
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	19bb      	adds	r3, r7, r6
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	77da      	strb	r2, [r3, #31]

	loraTx->flagsMode = 0xff; //
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	21ff      	movs	r1, #255	; 0xff
 8000a30:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraTx->flagsMode, TX_DONE_MASK);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2220      	movs	r2, #32
 8000a36:	5c9b      	ldrb	r3, [r3, r2]
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4393      	bics	r3, r2
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2220      	movs	r2, #32
 8000a42:	5499      	strb	r1, [r3, r2]

	loraTx->fhssValue = HOPS_PERIOD;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	779a      	strb	r2, [r3, #30]
	loraTx->len = SX1278_MAX_PACKET;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	755a      	strb	r2, [r3, #21]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b005      	add	sp, #20
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a58:	0a21fe80 	.word	0x0a21fe80

08000a5c <saveTx>:

void saveTx(SX1278_t *module) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fede 	bl	800082a <updateLoraLowFreq>
	HAL_Delay(15);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f001 fed6 	bl	8002820 <HAL_Delay>
	setRFFrequency(module); // lo mismo
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fd7c 	bl	8000574 <setRFFrequency>
	setLORAWAN(module); //lo mismo
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fdd9 	bl	8000636 <setLORAWAN>
	setOutputPower(module); //lo mismo
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fdc2 	bl	8000610 <setOutputPower>
	setOvercurrentProtect(module); // lo mismo
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fde4 	bl	800065c <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1); // lo mismo
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	2394      	movs	r3, #148	; 0x94
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	58d0      	ldr	r0, [r2, r3]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3318      	adds	r3, #24
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	210c      	movs	r1, #12
 8000aa6:	f7ff fd05 	bl	80004b4 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7c5b      	ldrb	r3, [r3, #17]
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d10b      	bne.n	8000aca <saveTx+0x6e>
		module->headerMode = IMPLICIT;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2221      	movs	r2, #33	; 0x21
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2203      	movs	r2, #3
 8000abe:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module); // lo mismo
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fe62 	bl	800078c <setDetectionParameters>
 8000ac8:	e006      	b.n	8000ad8 <saveTx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2221      	movs	r2, #33	; 0x21
 8000ace:	2100      	movs	r1, #0
 8000ad0:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module); // lo mismo
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fdfa 	bl	80006d4 <setReModemConfig>
	setPreambleParameters(module); // lo mismo
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fdcd 	bl	8000682 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	2394      	movs	r3, #148	; 0x94
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	58d0      	ldr	r0, [r2, r3]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	331e      	adds	r3, #30
 8000af4:	001a      	movs	r2, r3
 8000af6:	2301      	movs	r3, #1
 8000af8:	2124      	movs	r1, #36	; 0x24
 8000afa:	f7ff fcdb 	bl	80004b4 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	2394      	movs	r3, #148	; 0x94
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	58d0      	ldr	r0, [r2, r3]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	331f      	adds	r3, #31
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	f7ff fcd0 	bl	80004b4 <writeRegister>
	clearIrqFlags(module);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fea9 	bl	800086e <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	2394      	movs	r3, #148	; 0x94
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	58d0      	ldr	r0, [r2, r3]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3320      	adds	r3, #32
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2111      	movs	r1, #17
 8000b2e:	f7ff fcc1 	bl	80004b4 <writeRegister>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <txMode>:
void txMode(SX1278_t *module) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, STANDBY);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2101      	movs	r1, #1
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fe6f 	bl	800082a <updateLoraLowFreq>
	HAL_Delay(15);
 8000b4c:	200f      	movs	r0, #15
 8000b4e:	f001 fe67 	bl	8002820 <HAL_Delay>
	setRFFrequency(module); // lo mismo
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fd0d 	bl	8000574 <setRFFrequency>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	2394      	movs	r3, #148	; 0x94
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	58d0      	ldr	r0, [r2, r3]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	331f      	adds	r3, #31
 8000b66:	001a      	movs	r2, r3
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	f7ff fca2 	bl	80004b4 <writeRegister>
	clearIrqFlags(module);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fe7b 	bl	800086e <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	2394      	movs	r3, #148	; 0x94
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	58d0      	ldr	r0, [r2, r3]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3320      	adds	r3, #32
 8000b84:	001a      	movs	r2, r3
 8000b86:	2301      	movs	r3, #1
 8000b88:	2111      	movs	r1, #17
 8000b8a:	f7ff fc93 	bl	80004b4 <writeRegister>

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <setTxParameters>:
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);

}


void setTxParameters(SX1278_t *module) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7d5a      	ldrb	r2, [r3, #21]
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	2394      	movs	r3, #148	; 0x94
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	58d0      	ldr	r0, [r2, r3]
 8000bb0:	187a      	adds	r2, r7, r1
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	2122      	movs	r1, #34	; 0x22
 8000bb6:	f7ff fc7d 	bl	80004b4 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	2394      	movs	r3, #148	; 0x94
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	58d3      	ldr	r3, [r2, r3]
 8000bc2:	210e      	movs	r1, #14
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fc47 	bl	8000458 <readRegister>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	001a      	movs	r2, r3
 8000bce:	210e      	movs	r1, #14
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
	addr = 0x80;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	2394      	movs	r3, #148	; 0x94
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	58d0      	ldr	r0, [r2, r3]
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	2301      	movs	r3, #1
 8000be6:	210d      	movs	r1, #13
 8000be8:	f7ff fc64 	bl	80004b4 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	2394      	movs	r3, #148	; 0x94
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	58d3      	ldr	r3, [r2, r3]
 8000bf4:	2122      	movs	r1, #34	; 0x22
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fc2e 	bl	8000458 <readRegister>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	001a      	movs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	755a      	strb	r2, [r3, #21]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <sx1278Reset>:

void sx1278Reset() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <sx1278Reset+0x3c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	2101      	movs	r1, #1
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 fdad 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <sx1278Reset+0x3c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fda7 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f001 fdf9 	bl	8002820 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <sx1278Reset+0x3c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	2101      	movs	r1, #1
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 fd9e 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 fdf0 	bl	8002820 <HAL_Delay>
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	50000400 	.word	0x50000400

08000c4c <transmit>:

void transmit(const UART1_t *uart1, SX1278_t *loraTx) {
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	if (loraTx->status == UNKNOW) {
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2224      	movs	r2, #36	; 0x24
 8000c5a:	5c9b      	ldrb	r3, [r3, r2]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d118      	bne.n	8000c92 <transmit+0x46>
		sprintf(uart1->txBuffer, "Configuring Slave LoRa module: Tx Mode\r\n");
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3364      	adds	r3, #100	; 0x64
 8000c64:	4a71      	ldr	r2, [pc, #452]	; (8000e2c <transmit+0x1e0>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f004 f9b9 	bl	8004fe0 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3364      	adds	r3, #100	; 0x64
 8000c72:	2164      	movs	r1, #100	; 0x64
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fcd7 	bl	8002628 <uart1_send_frame>
		setTxBaseParameters(loraTx);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fe87 	bl	8000990 <setTxBaseParameters>
		saveTx(loraTx);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fee9 	bl	8000a5c <saveTx>
		loraTx->status = TX_READY;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2224      	movs	r2, #36	; 0x24
 8000c8e:	2101      	movs	r1, #1
 8000c90:	5499      	strb	r1, [r3, r2]
	}
	if (loraTx->status == TX_READY) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2224      	movs	r2, #36	; 0x24
 8000c96:	5c9b      	ldrb	r3, [r3, r2]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d000      	beq.n	8000c9e <transmit+0x52>
 8000c9c:	e0c3      	b.n	8000e26 <transmit+0x1da>

		setTxParameters(loraTx);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff78 	bl	8000b96 <setTxParameters>

		for (int i = 0; i < loraTx->len; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	e014      	b.n	8000cd6 <transmit+0x8a>
			uint8_t data = loraTx->buffer[i];
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	2125      	movs	r1, #37	; 0x25
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	18d3      	adds	r3, r2, r3
 8000cb4:	185b      	adds	r3, r3, r1
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	210f      	movs	r1, #15
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	2394      	movs	r3, #148	; 0x94
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	58d0      	ldr	r0, [r2, r3]
 8000cc6:	187a      	adds	r2, r7, r1
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f7ff fbf2 	bl	80004b4 <writeRegister>
		for (int i = 0; i < loraTx->len; i++) {
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	7d5b      	ldrb	r3, [r3, #21]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	dbe4      	blt.n	8000cac <transmit+0x60>
		}
		uint8_t len = loraTx->len;
 8000ce2:	241f      	movs	r4, #31
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	7d52      	ldrb	r2, [r2, #21]
 8000cea:	701a      	strb	r2, [r3, #0]
		memset(loraTx->buffer, 0, sizeof(loraTx->len));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	3325      	adds	r3, #37	; 0x25
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f004 f96a 	bl	8004fce <memset>
		getLoraPacket(loraTx);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fa35 	bl	800116c <getLoraPacket>
		loraTx->len = len;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	193a      	adds	r2, r7, r4
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	755a      	strb	r2, [r3, #21]
		len = sprintf(uart1->txBuffer, "Sending message: ", loraTx->buffer);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3364      	adds	r3, #100	; 0x64
 8000d0e:	0018      	movs	r0, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3325      	adds	r3, #37	; 0x25
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <transmit+0x1e4>)
 8000d18:	0019      	movs	r1, r3
 8000d1a:	f004 f961 	bl	8004fe0 <siprintf>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(uart1->txBuffer, len);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3364      	adds	r3, #100	; 0x64
 8000d28:	001a      	movs	r2, r3
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	0010      	movs	r0, r2
 8000d32:	f001 fc79 	bl	8002628 <uart1_send_frame>
		for (int i = 0; i < loraTx->len; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	e01d      	b.n	8000d78 <transmit+0x12c>
			len = sprintf(uart1->txBuffer, "%02X", loraTx->buffer[i]);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3364      	adds	r3, #100	; 0x64
 8000d40:	0018      	movs	r0, r3
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	2125      	movs	r1, #37	; 0x25
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	185b      	adds	r3, r3, r1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	001a      	movs	r2, r3
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <transmit+0x1e8>)
 8000d52:	0019      	movs	r1, r3
 8000d54:	f004 f944 	bl	8004fe0 <siprintf>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	211f      	movs	r1, #31
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
			uart1_send_frame(uart1->txBuffer, len);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3364      	adds	r3, #100	; 0x64
 8000d64:	001a      	movs	r2, r3
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	0010      	movs	r0, r2
 8000d6e:	f001 fc5b 	bl	8002628 <uart1_send_frame>
		for (int i = 0; i < loraTx->len; i++) {
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	3301      	adds	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	7d5b      	ldrb	r3, [r3, #21]
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	dbdb      	blt.n	8000d3c <transmit+0xf0>
		}
		updateLoraLowFreq(loraTx, TX);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2103      	movs	r1, #3
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff fd4e 	bl	800082a <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8000d8e:	f001 fd3d 	bl	800280c <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	61bb      	str	r3, [r7, #24]
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f7ff fd7c 	bl	8000898 <SX1278_hw_GetDIO0>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d023      	beq.n	8000dec <transmit+0x1a0>
				int timeEnd = HAL_GetTick();
 8000da4:	f001 fd32 	bl	800280c <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	617b      	str	r3, [r7, #20]
				int tiempoTransmision = timeEnd - timeStart;
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	613b      	str	r3, [r7, #16]
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	2394      	movs	r3, #148	; 0x94
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	58d3      	ldr	r3, [r2, r3]
 8000dbc:	2112      	movs	r1, #18
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fb4a 	bl	8000458 <readRegister>
				clearIrqFlags(loraTx);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fd51 	bl	800086e <clearIrqFlags>
				sprintf(uart1->txBuffer, "- Tx Ok: %d ms %d bytes\n",
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3364      	adds	r3, #100	; 0x64
 8000dd0:	0018      	movs	r0, r3
						tiempoTransmision, loraTx->len);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	7d5b      	ldrb	r3, [r3, #21]
				sprintf(uart1->txBuffer, "- Tx Ok: %d ms %d bytes\n",
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4917      	ldr	r1, [pc, #92]	; (8000e38 <transmit+0x1ec>)
 8000dda:	f004 f901 	bl	8004fe0 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3364      	adds	r3, #100	; 0x64
 8000de2:	2164      	movs	r1, #100	; 0x64
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 fc1f 	bl	8002628 <uart1_send_frame>
				return;
 8000dea:	e01c      	b.n	8000e26 <transmit+0x1da>
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000dec:	f001 fd0e 	bl	800280c <HAL_GetTick>
 8000df0:	0002      	movs	r2, r0
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	23fa      	movs	r3, #250	; 0xfa
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d90f      	bls.n	8000e1e <transmit+0x1d2>
				sx1278Reset();
 8000dfe:	f7ff ff05 	bl	8000c0c <sx1278Reset>
				sprintf(uart1->txBuffer, "EntryTx failed, timeout reset!\r\n");
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3364      	adds	r3, #100	; 0x64
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <transmit+0x1f0>)
 8000e08:	0011      	movs	r1, r2
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f004 f8e8 	bl	8004fe0 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3364      	adds	r3, #100	; 0x64
 8000e14:	2164      	movs	r1, #100	; 0x64
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fc06 	bl	8002628 <uart1_send_frame>
				return;
 8000e1c:	e003      	b.n	8000e26 <transmit+0x1da>
			}

			HAL_Delay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f001 fcfe 	bl	8002820 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000e24:	e7b7      	b.n	8000d96 <transmit+0x14a>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b00b      	add	sp, #44	; 0x2c
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	080058b8 	.word	0x080058b8
 8000e30:	080058e4 	.word	0x080058e4
 8000e34:	080058f8 	.word	0x080058f8
 8000e38:	08005900 	.word	0x08005900
 8000e3c:	0800591c 	.word	0x0800591c

08000e40 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8000e48:	200f      	movs	r0, #15
 8000e4a:	183b      	adds	r3, r7, r0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000e50:	240e      	movs	r4, #14
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000e58:	250d      	movs	r5, #13
 8000e5a:	197b      	adds	r3, r7, r5
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000e60:	260c      	movs	r6, #12
 8000e62:	19bb      	adds	r3, r7, r6
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
	////////////////////////////////////////
	loraRx->frequency = DOWNLINK_FREQ;
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <setRxBaseParameters+0xdc>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	608a      	str	r2, [r1, #8]
 8000e70:	60cb      	str	r3, [r1, #12]
	loraRx->power = SX1278_POWER_17DBM;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	22fc      	movs	r2, #252	; 0xfc
 8000e76:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	220a      	movs	r2, #10
 8000e7c:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2206      	movs	r2, #6
 8000e82:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	220b      	movs	r2, #11
 8000e9a:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2223      	movs	r2, #35	; 0x23
 8000ea0:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2208      	movs	r2, #8
 8000eac:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000eba:	183a      	adds	r2, r7, r0
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	197b      	adds	r3, r7, r5
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	19bb      	adds	r3, r7, r6
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2220      	movs	r2, #32
 8000ede:	21ff      	movs	r1, #255	; 0xff
 8000ee0:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	2240      	movs	r2, #64	; 0x40
 8000eea:	4393      	bics	r3, r2
 8000eec:	b2d9      	uxtb	r1, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	5499      	strb	r1, [r3, r2]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	5c9b      	ldrb	r3, [r3, r2]
 8000efa:	2220      	movs	r2, #32
 8000efc:	4393      	bics	r3, r2
 8000efe:	b2d9      	uxtb	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	5499      	strb	r1, [r3, r2]

	loraRx->fhssValue = HOPS_PERIOD;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	779a      	strb	r2, [r3, #30]
	loraRx->len = SX1278_MAX_PACKET;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	755a      	strb	r2, [r3, #21]
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b005      	add	sp, #20
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	08f0d180 	.word	0x08f0d180

08000f20 <saveRx>:

void saveRx(SX1278_t *module) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fc7c 	bl	800082a <updateLoraLowFreq>
	HAL_Delay(15);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f001 fc74 	bl	8002820 <HAL_Delay>
	setRFFrequency(module);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fb1a 	bl	8000574 <setRFFrequency>
	setLORAWAN(module);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff fb77 	bl	8000636 <setLORAWAN>
	setOutputPower(module);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff fb60 	bl	8000610 <setOutputPower>
	setOvercurrentProtect(module);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fb82 	bl	800065c <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	2394      	movs	r3, #148	; 0x94
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	58d0      	ldr	r0, [r2, r3]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3318      	adds	r3, #24
 8000f64:	001a      	movs	r2, r3
 8000f66:	2301      	movs	r3, #1
 8000f68:	210c      	movs	r1, #12
 8000f6a:	f7ff faa3 	bl	80004b4 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7c5b      	ldrb	r3, [r3, #17]
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d10b      	bne.n	8000f8e <saveRx+0x6e>
		module->headerMode = IMPLICIT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2221      	movs	r2, #33	; 0x21
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fc00 	bl	800078c <setDetectionParameters>
 8000f8c:	e006      	b.n	8000f9c <saveRx+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2221      	movs	r2, #33	; 0x21
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff fb98 	bl	80006d4 <setReModemConfig>
	setPreambleParameters(module);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff fb6b 	bl	8000682 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	2394      	movs	r3, #148	; 0x94
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	58d0      	ldr	r0, [r2, r3]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	331e      	adds	r3, #30
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2124      	movs	r1, #36	; 0x24
 8000fbe:	f7ff fa79 	bl	80004b4 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	2394      	movs	r3, #148	; 0x94
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	58d0      	ldr	r0, [r2, r3]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	331f      	adds	r3, #31
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	f7ff fa6e 	bl	80004b4 <writeRegister>
	clearIrqFlags(module);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff fc47 	bl	800086e <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	2394      	movs	r3, #148	; 0x94
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	58d0      	ldr	r0, [r2, r3]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3320      	adds	r3, #32
 8000fec:	001a      	movs	r2, r3
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2111      	movs	r1, #17
 8000ff2:	f7ff fa5f 	bl	80004b4 <writeRegister>
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2100      	movs	r1, #0
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff fc0d 	bl	800082a <updateLoraLowFreq>
	uint8_t cmd = module->len;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7d5a      	ldrb	r2, [r3, #21]
 8001014:	210f      	movs	r1, #15
 8001016:	187b      	adds	r3, r7, r1
 8001018:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	2394      	movs	r3, #148	; 0x94
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	58d0      	ldr	r0, [r2, r3]
 8001022:	187a      	adds	r2, r7, r1
 8001024:	2301      	movs	r3, #1
 8001026:	2122      	movs	r1, #34	; 0x22
 8001028:	f7ff fa44 	bl	80004b4 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	2394      	movs	r3, #148	; 0x94
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	58d3      	ldr	r3, [r2, r3]
 8001034:	210f      	movs	r1, #15
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fa0e 	bl	8000458 <readRegister>
 800103c:	0003      	movs	r3, r0
 800103e:	001a      	movs	r2, r3
 8001040:	210e      	movs	r1, #14
 8001042:	187b      	adds	r3, r7, r1
 8001044:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	2394      	movs	r3, #148	; 0x94
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	58d0      	ldr	r0, [r2, r3]
 800104e:	187a      	adds	r2, r7, r1
 8001050:	2301      	movs	r3, #1
 8001052:	210d      	movs	r1, #13
 8001054:	f7ff fa2e 	bl	80004b4 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	2394      	movs	r3, #148	; 0x94
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	58d3      	ldr	r3, [r2, r3]
 8001060:	2122      	movs	r1, #34	; 0x22
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff f9f8 	bl	8000458 <readRegister>
 8001068:	0003      	movs	r3, r0
 800106a:	001a      	movs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	755a      	strb	r2, [r3, #21]
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b004      	add	sp, #16
 8001076:	bd80      	pop	{r7, pc}

08001078 <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2224      	movs	r2, #36	; 0x24
 8001084:	5c9b      	ldrb	r3, [r3, r2]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d107      	bne.n	800109a <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, sizeof(loraRx->buffer));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3325      	adds	r3, #37	; 0x25
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0052      	lsls	r2, r2, #1
 8001092:	2100      	movs	r1, #0
 8001094:	0018      	movs	r0, r3
 8001096:	f003 ff9a 	bl	8004fce <memset>
	}
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <configInit>:
	}

	return 0;
}

void configInit(const UART1_t *uart1, SX1278_t *loraRx) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	sprintf(uart1->txBuffer, "Configuring Slave LoRa module: Rx Mode\r\n");
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3364      	adds	r3, #100	; 0x64
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <configInit+0x4c>)
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f003 ff92 	bl	8004fe0 <siprintf>
	uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3364      	adds	r3, #100	; 0x64
 80010c0:	2164      	movs	r1, #100	; 0x64
 80010c2:	0018      	movs	r0, r3
 80010c4:	f001 fab0 	bl	8002628 <uart1_send_frame>
	setRxBaseParameters(&*loraRx);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff feb8 	bl	8000e40 <setRxBaseParameters>
	saveRx(loraRx);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff ff24 	bl	8000f20 <saveRx>
	loraRx->status = RX_READY;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2224      	movs	r2, #36	; 0x24
 80010dc:	2102      	movs	r1, #2
 80010de:	5499      	strb	r1, [r3, r2]
	setRxParameters(loraRx);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	0018      	movs	r0, r3
 80010e4:	f7ff ff8b 	bl	8000ffe <setRxParameters>
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08005940 	.word	0x08005940

080010f4 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	2394      	movs	r3, #148	; 0x94
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	58d3      	ldr	r3, [r2, r3]
 8001104:	2517      	movs	r5, #23
 8001106:	197c      	adds	r4, r7, r5
 8001108:	2112      	movs	r1, #18
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff f9a4 	bl	8000458 <readRegister>
 8001110:	0003      	movs	r3, r0
 8001112:	7023      	strb	r3, [r4, #0]
	SET_BIT(flags2, RX_DONE_MASK);
 8001114:	0028      	movs	r0, r5
 8001116:	183b      	adds	r3, r7, r0
 8001118:	183a      	adds	r2, r7, r0
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	2140      	movs	r1, #64	; 0x40
 800111e:	430a      	orrs	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = flags2;
 8001122:	210f      	movs	r1, #15
 8001124:	187b      	adds	r3, r7, r1
 8001126:	183a      	adds	r2, r7, r0
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	701a      	strb	r2, [r3, #0]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	2394      	movs	r3, #148	; 0x94
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	58d0      	ldr	r0, [r2, r3]
 8001134:	187a      	adds	r2, r7, r1
 8001136:	2301      	movs	r3, #1
 8001138:	2112      	movs	r1, #18
 800113a:	f7ff f9bb 	bl	80004b4 <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	2394      	movs	r3, #148	; 0x94
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	58d3      	ldr	r3, [r2, r3]
 8001146:	2516      	movs	r5, #22
 8001148:	197c      	adds	r4, r7, r5
 800114a:	2112      	movs	r1, #18
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff f983 	bl	8000458 <readRegister>
 8001152:	0003      	movs	r3, r0
 8001154:	7023      	strb	r3, [r4, #0]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8001156:	197b      	adds	r3, r7, r5
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2220      	movs	r2, #32
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
	return errorActivation;
 8001160:	693b      	ldr	r3, [r7, #16]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b006      	add	sp, #24
 8001168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800116c <getLoraPacket>:

void getLoraPacket(SX1278_t *lora) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	lora->len = readRegister(lora->spi, LR_RegRxNbBytes); //Number for received bytes
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	2394      	movs	r3, #148	; 0x94
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	58d3      	ldr	r3, [r2, r3]
 800117c:	2113      	movs	r1, #19
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff f96a 	bl	8000458 <readRegister>
 8001184:	0003      	movs	r3, r0
 8001186:	001a      	movs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 800118c:	240f      	movs	r4, #15
 800118e:	193b      	adds	r3, r7, r4
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <getLoraPacket+0x80>)
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	0018      	movs	r0, r3
 800119c:	f002 faeb 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f001 fb3d 	bl	8002820 <HAL_Delay>
	HAL_SPI_Transmit(lora->spi, &addr, 1, 100); // send address
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	2394      	movs	r3, #148	; 0x94
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	58d0      	ldr	r0, [r2, r3]
 80011ae:	1939      	adds	r1, r7, r4
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2201      	movs	r2, #1
 80011b4:	f003 f88e 	bl	80042d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(lora->spi, lora->buffer, lora->len, 100); // receive 6 bytes data
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	2394      	movs	r3, #148	; 0x94
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	58d0      	ldr	r0, [r2, r3]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3325      	adds	r3, #37	; 0x25
 80011c4:	0019      	movs	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7d5b      	ldrb	r3, [r3, #21]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	f003 f9d9 	bl	8004584 <HAL_SPI_Receive>
	HAL_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f001 fb24 	bl	8002820 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <getLoraPacket+0x80>)
 80011da:	2201      	movs	r2, #1
 80011dc:	2101      	movs	r1, #1
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fac9 	bl	8003776 <HAL_GPIO_WritePin>
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b005      	add	sp, #20
 80011ea:	bd90      	pop	{r4, r7, pc}
 80011ec:	50000400 	.word	0x50000400

080011f0 <printParameters>:

void printParameters(int timeRx, const UART1_t *uart1, SX1278_t *loraRx) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	if (loraRx->len == 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7d5b      	ldrb	r3, [r3, #21]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d036      	beq.n	8001272 <printParameters+0x82>
		return;
	for (int i = 0; i < loraRx->len; i++) {
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e01d      	b.n	8001246 <printParameters+0x56>
		uint8_t len = sprintf(uart1->txBuffer, "%02X", loraRx->buffer[i]);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3364      	adds	r3, #100	; 0x64
 800120e:	0018      	movs	r0, r3
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	2125      	movs	r1, #37	; 0x25
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	18d3      	adds	r3, r2, r3
 8001218:	185b      	adds	r3, r3, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <printParameters+0x8c>)
 8001220:	0019      	movs	r1, r3
 8001222:	f003 fedd 	bl	8004fe0 <siprintf>
 8001226:	0002      	movs	r2, r0
 8001228:	2113      	movs	r1, #19
 800122a:	187b      	adds	r3, r7, r1
 800122c:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(uart1->txBuffer, len);
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3364      	adds	r3, #100	; 0x64
 8001232:	001a      	movs	r2, r3
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	0010      	movs	r0, r2
 800123c:	f001 f9f4 	bl	8002628 <uart1_send_frame>
	for (int i = 0; i < loraRx->len; i++) {
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7d5b      	ldrb	r3, [r3, #21]
 800124a:	001a      	movs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4293      	cmp	r3, r2
 8001250:	dbdb      	blt.n	800120a <printParameters+0x1a>
	}
	sprintf(uart1->txBuffer, " - Rx Ok: %d ms %d bytes\n", timeRx, loraRx->len);
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3364      	adds	r3, #100	; 0x64
 8001256:	0018      	movs	r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7d5b      	ldrb	r3, [r3, #21]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <printParameters+0x90>)
 8001260:	f003 febe 	bl	8004fe0 <siprintf>
	uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3364      	adds	r3, #100	; 0x64
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	0018      	movs	r0, r3
 800126c:	f001 f9dc 	bl	8002628 <uart1_send_frame>
 8001270:	e000      	b.n	8001274 <printParameters+0x84>
		return;
 8001272:	46c0      	nop			; (mov r8, r8)
}
 8001274:	46bd      	mov	sp, r7
 8001276:	b006      	add	sp, #24
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	080058f8 	.word	0x080058f8
 8001280:	0800596c 	.word	0x0800596c

08001284 <read>:

void read(const UART1_t *uart1, SX1278_t *loraRx) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2224      	movs	r2, #36	; 0x24
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10a      	bne.n	80012ae <read+0x2a>
		configInit(uart1, loraRx);
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff ff00 	bl	80010a4 <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2105      	movs	r1, #5
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fabe 	bl	800082a <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fee1 	bl	8001078 <clearMemForRx>
	int timeStart = HAL_GetTick();
 80012b6:	f001 faa9 	bl	800280c <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	617b      	str	r3, [r7, #20]
	//if (waitForRxDone(loraRx) < 0)
	if ((!SX1278_hw_GetDIO0(loraRx->hw)))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	f7ff fae8 	bl	8000898 <SX1278_hw_GetDIO0>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d02d      	beq.n	8001328 <read+0xa4>
		return;
	int timeEnd = HAL_GetTick();
 80012cc:	f001 fa9e 	bl	800280c <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff08 	bl	80010f4 <crcErrorActivation>
 80012e4:	0003      	movs	r3, r0
 80012e6:	60bb      	str	r3, [r7, #8]
	if (errorActivation == 1) {
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d01e      	beq.n	800132c <read+0xa8>
		return;
	}
	getLoraPacket(loraRx);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff3b 	bl	800116c <getLoraPacket>
	printParameters(timeRx, uart1, loraRx);
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ff77 	bl	80011f0 <printParameters>
	setRxParameters(loraRx);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff fe7a 	bl	8000ffe <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2105      	movs	r1, #5
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff fa8b 	bl	800082a <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff fa72 	bl	8000800 <readMode>
 800131c:	0003      	movs	r3, r0
 800131e:	0019      	movs	r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2223      	movs	r2, #35	; 0x23
 8001324:	5499      	strb	r1, [r3, r2]
 8001326:	e002      	b.n	800132e <read+0xaa>
		return;
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	e000      	b.n	800132e <read+0xaa>
		return;
 800132c:	46c0      	nop			; (mov r8, r8)
}
 800132e:	46bd      	mov	sp, r7
 8001330:	b006      	add	sp, #24
 8001332:	bd80      	pop	{r7, pc}

08001334 <modeCmdUpdate>:

bool TX_MODE;
bool RX_MODE;

void modeCmdUpdate(const UART1_t *uart1, SX1278_t *loraRx, SX1278_t *loraTx) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
	receiveValue = uart1->rxBuffer[4] << 8;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	617b      	str	r3, [r7, #20]
	receiveValue |= uart1->rxBuffer[5];
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	795b      	ldrb	r3, [r3, #5]
 8001350:	001a      	movs	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
	if (receiveValue == 0) {
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <modeCmdUpdate+0x3e>
		RX_MODE = true;
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <modeCmdUpdate+0x60>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		TX_MODE = false;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <modeCmdUpdate+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		loraRx->status = UNKNOW;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2224      	movs	r2, #36	; 0x24
 800136e:	2100      	movs	r1, #0
 8001370:	5499      	strb	r1, [r3, r2]
	}
	if (receiveValue == 1) {
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d109      	bne.n	800138c <modeCmdUpdate+0x58>
		TX_MODE = true;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <modeCmdUpdate+0x64>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
		RX_MODE = false;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <modeCmdUpdate+0x60>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		loraTx->status = UNKNOW;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	; 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	5499      	strb	r1, [r3, r2]
	}
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000189 	.word	0x20000189
 8001398:	20000188 	.word	0x20000188

0800139c <encodeVLAD>:

void encodeVLAD(uint8_t *frame) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint8_t crc_frame[2];
	uint16_t crc;
	uint8_t data_length = 12;
 80013a4:	210f      	movs	r1, #15
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	220c      	movs	r2, #12
 80013aa:	701a      	strb	r2, [r3, #0]

	frame[0] = LTEL_START_MARK;
 80013ac:	227e      	movs	r2, #126	; 0x7e
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	701a      	strb	r2, [r3, #0]
	frame[1] = VLAD;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3301      	adds	r3, #1
 80013b6:	2205      	movs	r2, #5
 80013b8:	701a      	strb	r2, [r3, #0]
	frame[2] = ID1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3302      	adds	r3, #2
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
	frame[3] = QUERY_PARAMETERS_VLAD;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3303      	adds	r3, #3
 80013c6:	2211      	movs	r2, #17
 80013c8:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x00;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
	frame[5] = data_length;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3305      	adds	r3, #5
 80013d6:	187a      	adds	r2, r7, r1
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	701a      	strb	r2, [r3, #0]
	frame[6] = 0x00;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3306      	adds	r3, #6
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	frame[7] = 12;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3307      	adds	r3, #7
 80013e8:	220c      	movs	r2, #12
 80013ea:	701a      	strb	r2, [r3, #0]
	frame[8] = 0x00;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3308      	adds	r3, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	frame[9] = 200;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3309      	adds	r3, #9
 80013f8:	22c8      	movs	r2, #200	; 0xc8
 80013fa:	701a      	strb	r2, [r3, #0]
	frame[10] = 0x00;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	330a      	adds	r3, #10
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	frame[11] = 230;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	330b      	adds	r3, #11
 8001408:	22e6      	movs	r2, #230	; 0xe6
 800140a:	701a      	strb	r2, [r3, #0]
	frame[12] = 0x00;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	330c      	adds	r3, #12
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
	frame[13] = 112;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	330d      	adds	r3, #13
 8001418:	2270      	movs	r2, #112	; 0x70
 800141a:	701a      	strb	r2, [r3, #0]
	frame[14] = 10;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	330e      	adds	r3, #14
 8001420:	220a      	movs	r2, #10
 8001422:	701a      	strb	r2, [r3, #0]
	frame[15] = 4;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	330f      	adds	r3, #15
 8001428:	2204      	movs	r2, #4
 800142a:	701a      	strb	r2, [r3, #0]
	frame[16] = 5;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3310      	adds	r3, #16
 8001430:	2205      	movs	r2, #5
 8001432:	701a      	strb	r2, [r3, #0]
	frame[17] = 6;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3311      	adds	r3, #17
 8001438:	2206      	movs	r2, #6
 800143a:	701a      	strb	r2, [r3, #0]

	crc = crc_get(&(frame[1]), 17);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	2111      	movs	r1, #17
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fc96 	bl	8001d74 <crc_get>
 8001448:	0003      	movs	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	200a      	movs	r0, #10
 800144e:	183b      	adds	r3, r7, r0
 8001450:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8001452:	210c      	movs	r1, #12
 8001454:	187b      	adds	r3, r7, r1
 8001456:	183a      	adds	r2, r7, r0
 8001458:	8812      	ldrh	r2, [r2, #0]
 800145a:	801a      	strh	r2, [r3, #0]
	frame[18] = crc_frame[0];
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3312      	adds	r3, #18
 8001460:	187a      	adds	r2, r7, r1
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]
	frame[19] = crc_frame[1];
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3313      	adds	r3, #19
 800146a:	187a      	adds	r2, r7, r1
 800146c:	7852      	ldrb	r2, [r2, #1]
 800146e:	701a      	strb	r2, [r3, #0]
	frame[20] = LTEL_END_MARK;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3314      	adds	r3, #20
 8001474:	227f      	movs	r2, #127	; 0x7f
 8001476:	701a      	strb	r2, [r3, #0]

}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}

08001480 <modeRs485Update>:

void modeRs485Update(const UART1_t *uart1, RS485_t *rs485, SX1278_t *loraRx,
		SX1278_t *loraTx) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]

	switch (rs485->cmd) {
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b11      	cmp	r3, #17
 8001494:	d00f      	beq.n	80014b6 <modeRs485Update+0x36>
 8001496:	2b12      	cmp	r3, #18
 8001498:	d109      	bne.n	80014ae <modeRs485Update+0x2e>
	case QUERY_PARAMETERS_VLAD: //cmd = 11

		break;
	case SET_VLAD_MODE: //cmd = 12
		modeCmdUpdate(uart1, loraRx, loraTx);
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff47 	bl	8001334 <modeCmdUpdate>
		rs485->cmd = NONE;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		break;
 80014ac:	e004      	b.n	80014b8 <modeRs485Update+0x38>
	default:
		rs485->cmd = NONE;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
		break;
 80014b4:	e000      	b.n	80014b8 <modeRs485Update+0x38>
		break;
 80014b6:	46c0      	nop			; (mov r8, r8)
	}
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b004      	add	sp, #16
 80014be:	bd80      	pop	{r7, pc}

080014c0 <printStatus>:

void printStatus(UART1_t *uart1, Rs485_status_t status) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b0d7      	sub	sp, #348	; 0x15c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	000a      	movs	r2, r1
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <printStatus+0x54>)
 80014cc:	24ac      	movs	r4, #172	; 0xac
 80014ce:	0064      	lsls	r4, r4, #1
 80014d0:	191b      	adds	r3, r3, r4
 80014d2:	19db      	adds	r3, r3, r7
 80014d4:	701a      	strb	r2, [r3, #0]
	char rs485_msgs[11][30] = { "DATA OK", "START READING", "VALID FRAME",
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <printStatus+0x58>)
 80014d8:	191b      	adds	r3, r3, r4
 80014da:	19da      	adds	r2, r3, r7
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <printStatus+0x5c>)
 80014de:	0010      	movs	r0, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	23a5      	movs	r3, #165	; 0xa5
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	001a      	movs	r2, r3
 80014e8:	f003 fd68 	bl	8004fbc <memcpy>
			"NOT VALID FRAME", "WRONG MODULE FUNCTION", "WRONG MODULE ID",
			"CRC ERROR", "DONE", "WAITING", "VALID MODULE", "CHECK LORA DATA" };
	cleanByTimeout(uart1, rs485_msgs[status]);
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <printStatus+0x54>)
 80014ee:	191b      	adds	r3, r3, r4
 80014f0:	19db      	adds	r3, r3, r7
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	230c      	movs	r3, #12
 80014f6:	18f9      	adds	r1, r7, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	18ca      	adds	r2, r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0011      	movs	r1, r2
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fef4 	bl	80022f4 <cleanByTimeout>

}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b057      	add	sp, #348	; 0x15c
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	fffffeab 	.word	0xfffffeab
 8001518:	fffffeb4 	.word	0xfffffeb4
 800151c:	08005988 	.word	0x08005988

08001520 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	4c72      	ldr	r4, [pc, #456]	; (80016ec <main+0x1cc>)
 8001524:	44a5      	add	sp, r4
 8001526:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Vlad_t vlad;
	uart1_ptr = &uart1;
 8001528:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <main+0x1d0>)
 800152a:	24af      	movs	r4, #175	; 0xaf
 800152c:	00a4      	lsls	r4, r4, #2
 800152e:	193a      	adds	r2, r7, r4
 8001530:	601a      	str	r2, [r3, #0]
	vlad_ptr = &vlad;
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <main+0x1d4>)
 8001534:	25a4      	movs	r5, #164	; 0xa4
 8001536:	00ad      	lsls	r5, r5, #2
 8001538:	197a      	adds	r2, r7, r5
 800153a:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 800153c:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <main+0x1d8>)
 800153e:	26e4      	movs	r6, #228	; 0xe4
 8001540:	00b6      	lsls	r6, r6, #2
 8001542:	19ba      	adds	r2, r7, r6
 8001544:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001546:	f001 f8e5 	bl	8002714 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800154a:	f000 fa0d 	bl	8001968 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800154e:	f000 fb1f 	bl	8001b90 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001552:	f000 fa51 	bl	80019f8 <MX_ADC1_Init>
	MX_SPI1_Init();
 8001556:	f000 fadd 	bl	8001b14 <MX_SPI1_Init>
	//MX_USART1_UART_Init();
	MX_CRC_Init();
 800155a:	f000 fab7 	bl	8001acc <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vladInit(VLAD, ID1, &vlad);
 800155e:	197b      	adds	r3, r7, r5
 8001560:	001a      	movs	r2, r3
 8001562:	2101      	movs	r1, #1
 8001564:	2005      	movs	r0, #5
 8001566:	f000 fbb1 	bl	8001ccc <vladInit>
	rs485Init(&rs485);
 800156a:	19bb      	adds	r3, r7, r6
 800156c:	0018      	movs	r0, r3
 800156e:	f000 fc63 	bl	8001e38 <rs485Init>
	uart1Init(HS16_CLK, BAUD_RATE, &uart1);
 8001572:	193a      	adds	r2, r7, r4
 8001574:	23e1      	movs	r3, #225	; 0xe1
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	4860      	ldr	r0, [pc, #384]	; (80016fc <main+0x1dc>)
 800157a:	0019      	movs	r1, r3
 800157c:	f000 ff5c 	bl	8002438 <uart1Init>
	ledInit(&led);
 8001580:	23fe      	movs	r3, #254	; 0xfe
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	0018      	movs	r0, r3
 8001588:	f7ff f99c 	bl	80008c4 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <main+0x1e0>)
 800158e:	22a4      	movs	r2, #164	; 0xa4
 8001590:	0052      	lsls	r2, r2, #1
 8001592:	18ba      	adds	r2, r7, r2
 8001594:	601a      	str	r2, [r3, #0]
	lora_ptr = &loraRx;
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <main+0x1e0>)
 8001598:	2218      	movs	r2, #24
 800159a:	18ba      	adds	r2, r7, r2
 800159c:	601a      	str	r2, [r3, #0]

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 800159e:	4b59      	ldr	r3, [pc, #356]	; (8001704 <main+0x1e4>)
 80015a0:	2484      	movs	r4, #132	; 0x84
 80015a2:	00e4      	lsls	r4, r4, #3
 80015a4:	191b      	adds	r3, r3, r4
 80015a6:	19db      	adds	r3, r3, r7
 80015a8:	4a57      	ldr	r2, [pc, #348]	; (8001708 <main+0x1e8>)
 80015aa:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 80015ac:	4b55      	ldr	r3, [pc, #340]	; (8001704 <main+0x1e4>)
 80015ae:	191b      	adds	r3, r3, r4
 80015b0:	19db      	adds	r3, r3, r7
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <main+0x1e4>)
 80015b8:	191b      	adds	r3, r3, r4
 80015ba:	19db      	adds	r3, r3, r7
 80015bc:	4a53      	ldr	r2, [pc, #332]	; (800170c <main+0x1ec>)
 80015be:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <main+0x1e4>)
 80015c2:	191b      	adds	r3, r3, r4
 80015c4:	19db      	adds	r3, r3, r7
 80015c6:	2201      	movs	r2, #1
 80015c8:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <main+0x1e4>)
 80015cc:	191b      	adds	r3, r3, r4
 80015ce:	19db      	adds	r3, r3, r7
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <main+0x1ec>)
 80015d2:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <main+0x1e4>)
 80015d6:	191b      	adds	r3, r3, r4
 80015d8:	19db      	adds	r3, r3, r7
 80015da:	2202      	movs	r2, #2
 80015dc:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <main+0x1f0>)
 80015e0:	191b      	adds	r3, r3, r4
 80015e2:	19db      	adds	r3, r3, r7
 80015e4:	219e      	movs	r1, #158	; 0x9e
 80015e6:	0089      	lsls	r1, r1, #2
 80015e8:	187a      	adds	r2, r7, r1
 80015ea:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 80015ec:	4b49      	ldr	r3, [pc, #292]	; (8001714 <main+0x1f4>)
 80015ee:	191b      	adds	r3, r3, r4
 80015f0:	19db      	adds	r3, r3, r7
 80015f2:	187a      	adds	r2, r7, r1
 80015f4:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <main+0x1f0>)
 80015f8:	191b      	adds	r3, r3, r4
 80015fa:	19da      	adds	r2, r3, r7
 80015fc:	2394      	movs	r3, #148	; 0x94
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4945      	ldr	r1, [pc, #276]	; (8001718 <main+0x1f8>)
 8001602:	50d1      	str	r1, [r2, r3]
	loraRx.spi = &hspi1;
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <main+0x1f4>)
 8001606:	191b      	adds	r3, r3, r4
 8001608:	19da      	adds	r2, r3, r7
 800160a:	2394      	movs	r3, #148	; 0x94
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4942      	ldr	r1, [pc, #264]	; (8001718 <main+0x1f8>)
 8001610:	50d1      	str	r1, [r2, r3]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001612:	4b3e      	ldr	r3, [pc, #248]	; (800170c <main+0x1ec>)
 8001614:	2201      	movs	r2, #1
 8001616:	2101      	movs	r1, #1
 8001618:	0018      	movs	r0, r3
 800161a:	f002 f8ac 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <main+0x1ec>)
 8001620:	2201      	movs	r2, #1
 8001622:	2102      	movs	r1, #2
 8001624:	0018      	movs	r0, r3
 8001626:	f002 f8a6 	bl	8003776 <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <main+0x1f8>)
 800162c:	2101      	movs	r1, #1
 800162e:	0018      	movs	r0, r3
 8001630:	f7fe ff12 	bl	8000458 <readRegister>
 8001634:	0003      	movs	r3, r0
 8001636:	0019      	movs	r1, r3
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <main+0x1f0>)
 800163a:	191b      	adds	r3, r3, r4
 800163c:	19db      	adds	r3, r3, r7
 800163e:	2223      	movs	r2, #35	; 0x23
 8001640:	5499      	strb	r1, [r3, r2]
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <main+0x1f8>)
 8001644:	2101      	movs	r1, #1
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe ff06 	bl	8000458 <readRegister>
 800164c:	0003      	movs	r3, r0
 800164e:	0019      	movs	r1, r3
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <main+0x1f4>)
 8001652:	191b      	adds	r3, r3, r4
 8001654:	19db      	adds	r3, r3, r7
 8001656:	2223      	movs	r2, #35	; 0x23
 8001658:	5499      	strb	r1, [r3, r2]
	loraTx.status = UNKNOW;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <main+0x1f0>)
 800165c:	191b      	adds	r3, r3, r4
 800165e:	19db      	adds	r3, r3, r7
 8001660:	2224      	movs	r2, #36	; 0x24
 8001662:	2100      	movs	r1, #0
 8001664:	5499      	strb	r1, [r3, r2]
	loraRx.status = UNKNOW;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <main+0x1f4>)
 8001668:	191b      	adds	r3, r3, r4
 800166a:	19db      	adds	r3, r3, r7
 800166c:	2224      	movs	r2, #36	; 0x24
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]
	loraRx.len = 0;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <main+0x1f4>)
 8001674:	0021      	movs	r1, r4
 8001676:	185b      	adds	r3, r3, r1
 8001678:	19db      	adds	r3, r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	755a      	strb	r2, [r3, #21]
	loraTx.len = 0;
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <main+0x1f0>)
 8001680:	185b      	adds	r3, r3, r1
 8001682:	19db      	adds	r3, r3, r7
 8001684:	2200      	movs	r2, #0
 8001686:	755a      	strb	r2, [r3, #21]
	TX_MODE = false;
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <main+0x1fc>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
	RX_MODE = true;
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <main+0x200>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
	int counter = HAL_GetTick();
 8001694:	f001 f8ba 	bl	800280c <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	4a22      	ldr	r2, [pc, #136]	; (8001724 <main+0x204>)
 800169c:	18ba      	adds	r2, r7, r2
 800169e:	6013      	str	r3, [r2, #0]
	int change = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	2283      	movs	r2, #131	; 0x83
 80016a4:	00d2      	lsls	r2, r2, #3
 80016a6:	18ba      	adds	r2, r7, r2
 80016a8:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (uart1.len > 0) {
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <main+0x208>)
 80016ac:	2184      	movs	r1, #132	; 0x84
 80016ae:	00c9      	lsls	r1, r1, #3
 80016b0:	185b      	adds	r3, r3, r1
 80016b2:	19db      	adds	r3, r3, r7
 80016b4:	22c8      	movs	r2, #200	; 0xc8
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d037      	beq.n	800172c <main+0x20c>
			rs485.len = uart1.len;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <main+0x208>)
 80016be:	185b      	adds	r3, r3, r1
 80016c0:	19db      	adds	r3, r3, r7
 80016c2:	22c8      	movs	r2, #200	; 0xc8
 80016c4:	5c9a      	ldrb	r2, [r3, r2]
 80016c6:	20e4      	movs	r0, #228	; 0xe4
 80016c8:	0080      	lsls	r0, r0, #2
 80016ca:	183b      	adds	r3, r7, r0
 80016cc:	705a      	strb	r2, [r3, #1]
			memcpy(rs485.buffer, uart1.rxBuffer, uart1.len);
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <main+0x208>)
 80016d0:	185b      	adds	r3, r3, r1
 80016d2:	19db      	adds	r3, r3, r7
 80016d4:	22c8      	movs	r2, #200	; 0xc8
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	001a      	movs	r2, r3
 80016da:	23af      	movs	r3, #175	; 0xaf
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	18f9      	adds	r1, r7, r3
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	3302      	adds	r3, #2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f003 fc69 	bl	8004fbc <memcpy>
 80016ea:	e03d      	b.n	8001768 <main+0x248>
 80016ec:	fffffbdc 	.word	0xfffffbdc
 80016f0:	20000178 	.word	0x20000178
 80016f4:	2000017c 	.word	0x2000017c
 80016f8:	20000180 	.word	0x20000180
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	20000184 	.word	0x20000184
 8001704:	fffffe58 	.word	0xfffffe58
 8001708:	50000800 	.word	0x50000800
 800170c:	50000400 	.word	0x50000400
 8001710:	fffffd28 	.word	0xfffffd28
 8001714:	fffffbf8 	.word	0xfffffbf8
 8001718:	20000114 	.word	0x20000114
 800171c:	20000188 	.word	0x20000188
 8001720:	20000189 	.word	0x20000189
 8001724:	0000041c 	.word	0x0000041c
 8001728:	fffffe9c 	.word	0xfffffe9c

		} else if (loraRx.len > 0) {
 800172c:	4b86      	ldr	r3, [pc, #536]	; (8001948 <main+0x428>)
 800172e:	2184      	movs	r1, #132	; 0x84
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	185b      	adds	r3, r3, r1
 8001734:	19db      	adds	r3, r3, r7
 8001736:	7d5b      	ldrb	r3, [r3, #21]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d015      	beq.n	8001768 <main+0x248>
			rs485.len = loraRx.len;
 800173c:	4b82      	ldr	r3, [pc, #520]	; (8001948 <main+0x428>)
 800173e:	185b      	adds	r3, r3, r1
 8001740:	19db      	adds	r3, r3, r7
 8001742:	7d5a      	ldrb	r2, [r3, #21]
 8001744:	20e4      	movs	r0, #228	; 0xe4
 8001746:	0080      	lsls	r0, r0, #2
 8001748:	183b      	adds	r3, r7, r0
 800174a:	705a      	strb	r2, [r3, #1]
			memcpy(rs485.buffer, loraRx.buffer, loraRx.len);
 800174c:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <main+0x428>)
 800174e:	185b      	adds	r3, r3, r1
 8001750:	19db      	adds	r3, r3, r7
 8001752:	7d5b      	ldrb	r3, [r3, #21]
 8001754:	001a      	movs	r2, r3
 8001756:	2318      	movs	r3, #24
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	3325      	adds	r3, #37	; 0x25
 800175c:	0019      	movs	r1, r3
 800175e:	183b      	adds	r3, r7, r0
 8001760:	3302      	adds	r3, #2
 8001762:	0018      	movs	r0, r3
 8001764:	f003 fc2a 	bl	8004fbc <memcpy>
		}

		if (rs485.len > 0) {
 8001768:	24e4      	movs	r4, #228	; 0xe4
 800176a:	00a4      	lsls	r4, r4, #2
 800176c:	193b      	adds	r3, r7, r4
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d027      	beq.n	80017c4 <main+0x2a4>
			status = checkBuffer(&rs485);
 8001774:	193b      	adds	r3, r7, r4
 8001776:	0018      	movs	r0, r3
 8001778:	f000 fc0b 	bl	8001f92 <checkBuffer>
 800177c:	0002      	movs	r2, r0
 800177e:	4b73      	ldr	r3, [pc, #460]	; (800194c <main+0x42c>)
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	701a      	strb	r2, [r3, #0]
			if (rs485.status == DATA_OK) {
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2266      	movs	r2, #102	; 0x66
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11a      	bne.n	80017c4 <main+0x2a4>
				rs485.cmd = rs485.buffer[3];
 800178e:	193b      	adds	r3, r7, r4
 8001790:	795a      	ldrb	r2, [r3, #5]
 8001792:	193b      	adds	r3, r7, r4
 8001794:	701a      	strb	r2, [r3, #0]
				rs485.status = WAITING;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2266      	movs	r2, #102	; 0x66
 800179a:	2108      	movs	r1, #8
 800179c:	5499      	strb	r1, [r3, r2]
				cleanRxBuffer(&uart1);
 800179e:	23af      	movs	r3, #175	; 0xaf
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 ff65 	bl	8002674 <cleanRxBuffer>
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <main+0x428>)
 80017ac:	2084      	movs	r0, #132	; 0x84
 80017ae:	00c0      	lsls	r0, r0, #3
 80017b0:	181b      	adds	r3, r3, r0
 80017b2:	19db      	adds	r3, r3, r7
 80017b4:	2225      	movs	r2, #37	; 0x25
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]
				memset(loraRx.buffer, 0, sizeof(loraRx.len));
				loraRx.len = 0;
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <main+0x428>)
 80017bc:	181b      	adds	r3, r3, r0
 80017be:	19db      	adds	r3, r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	755a      	strb	r2, [r3, #21]
			}
		}
		if (status != rs485.status)
 80017c4:	21e4      	movs	r1, #228	; 0xe4
 80017c6:	0089      	lsls	r1, r1, #2
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2266      	movs	r2, #102	; 0x66
 80017cc:	5c9b      	ldrb	r3, [r3, r2]
 80017ce:	4a5f      	ldr	r2, [pc, #380]	; (800194c <main+0x42c>)
 80017d0:	18ba      	adds	r2, r7, r2
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d009      	beq.n	80017ec <main+0x2cc>
			printStatus(&uart1, rs485.status);
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2266      	movs	r2, #102	; 0x66
 80017dc:	5c9a      	ldrb	r2, [r3, r2]
 80017de:	23af      	movs	r3, #175	; 0xaf
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fe6a 	bl	80014c0 <printStatus>
		//rs485Uart1Decode(&rs485, &uart1);
		modeRs485Update(&uart1, &rs485, &loraRx, &loraTx);
 80017ec:	26a4      	movs	r6, #164	; 0xa4
 80017ee:	0076      	lsls	r6, r6, #1
 80017f0:	19bb      	adds	r3, r7, r6
 80017f2:	2218      	movs	r2, #24
 80017f4:	18ba      	adds	r2, r7, r2
 80017f6:	25e4      	movs	r5, #228	; 0xe4
 80017f8:	00ad      	lsls	r5, r5, #2
 80017fa:	1979      	adds	r1, r7, r5
 80017fc:	20af      	movs	r0, #175	; 0xaf
 80017fe:	0080      	lsls	r0, r0, #2
 8001800:	1838      	adds	r0, r7, r0
 8001802:	f7ff fe3d 	bl	8001480 <modeRs485Update>
		if (rs485.cmd == QUERY_PARAMETERS_VLAD) {
 8001806:	197b      	adds	r3, r7, r5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b11      	cmp	r3, #17
 800180c:	d14c      	bne.n	80018a8 <main+0x388>
			uint8_t frame[21] = { 0 };
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <main+0x430>)
 8001810:	2484      	movs	r4, #132	; 0x84
 8001812:	00e4      	lsls	r4, r4, #3
 8001814:	191b      	adds	r3, r3, r4
 8001816:	19db      	adds	r3, r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	3304      	adds	r3, #4
 800181e:	2211      	movs	r2, #17
 8001820:	2100      	movs	r1, #0
 8001822:	0018      	movs	r0, r3
 8001824:	f003 fbd3 	bl	8004fce <memset>
			encodeVLAD(frame);
 8001828:	003b      	movs	r3, r7
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fdb6 	bl	800139c <encodeVLAD>
			memcpy(loraTx.buffer, frame, 21);
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <main+0x434>)
 8001832:	191b      	adds	r3, r3, r4
 8001834:	19db      	adds	r3, r3, r7
 8001836:	2225      	movs	r2, #37	; 0x25
 8001838:	4945      	ldr	r1, [pc, #276]	; (8001950 <main+0x430>)
 800183a:	1909      	adds	r1, r1, r4
 800183c:	19c9      	adds	r1, r1, r7
 800183e:	189b      	adds	r3, r3, r2
 8001840:	2215      	movs	r2, #21
 8001842:	0018      	movs	r0, r3
 8001844:	f003 fbba 	bl	8004fbc <memcpy>
			loraTx.len = 21;
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <main+0x434>)
 800184a:	191b      	adds	r3, r3, r4
 800184c:	19db      	adds	r3, r3, r7
 800184e:	2215      	movs	r2, #21
 8001850:	755a      	strb	r2, [r3, #21]
			txMode(&loraTx);
 8001852:	19bb      	adds	r3, r7, r6
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff f970 	bl	8000b3a <txMode>
			transmit(&uart1, &loraTx);
 800185a:	19ba      	adds	r2, r7, r6
 800185c:	20af      	movs	r0, #175	; 0xaf
 800185e:	0080      	lsls	r0, r0, #2
 8001860:	183b      	adds	r3, r7, r0
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff f9f1 	bl	8000c4c <transmit>
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <main+0x434>)
 800186c:	191b      	adds	r3, r3, r4
 800186e:	19db      	adds	r3, r3, r7
 8001870:	2225      	movs	r2, #37	; 0x25
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]
			memset(loraTx.buffer, 0, sizeof(loraTx.len));
			loraTx.len = 0;
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <main+0x434>)
 8001878:	191b      	adds	r3, r3, r4
 800187a:	19db      	adds	r3, r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	755a      	strb	r2, [r3, #21]
			loraRx.status = UNKNOW;
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <main+0x428>)
 8001882:	191b      	adds	r3, r3, r4
 8001884:	19db      	adds	r3, r3, r7
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]
			change = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	2283      	movs	r2, #131	; 0x83
 8001890:	00d2      	lsls	r2, r2, #3
 8001892:	18ba      	adds	r2, r7, r2
 8001894:	6013      	str	r3, [r2, #0]
			rs485.cmd = NONE;
 8001896:	197b      	adds	r3, r7, r5
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	197b      	adds	r3, r7, r5
 800189e:	2200      	movs	r2, #0
 80018a0:	709a      	strb	r2, [r3, #2]
			memset(rs485.buffer, 0, sizeof(rs485.len));
			rs485.len = 0;
 80018a2:	197b      	adds	r3, r7, r5
 80018a4:	2200      	movs	r2, #0
 80018a6:	705a      	strb	r2, [r3, #1]
		}

		if (RX_MODE) {
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <main+0x438>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00f      	beq.n	80018d0 <main+0x3b0>
			read(&uart1, &loraRx);
 80018b0:	2318      	movs	r3, #24
 80018b2:	18fa      	adds	r2, r7, r3
 80018b4:	23af      	movs	r3, #175	; 0xaf
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	0011      	movs	r1, r2
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fce1 	bl	8001284 <read>
			change += 1;
 80018c2:	2283      	movs	r2, #131	; 0x83
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	18bb      	adds	r3, r7, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	3301      	adds	r3, #1
 80018cc:	18ba      	adds	r2, r7, r2
 80018ce:	6013      	str	r3, [r2, #0]
		}
		if (TX_MODE) {
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <main+0x43c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d100      	bne.n	80018da <main+0x3ba>
 80018d8:	e6e7      	b.n	80016aa <main+0x18a>
			//if (HAL_GetTick() - counter > 700){
			//counter = HAL_GetTick();
			if (change == 255)
 80018da:	2283      	movs	r2, #131	; 0x83
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	18bb      	adds	r3, r7, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d102      	bne.n	80018ec <main+0x3cc>
				change = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	18ba      	adds	r2, r7, r2
 80018ea:	6013      	str	r3, [r2, #0]
			loraTx.buffer[change] = change;
 80018ec:	2483      	movs	r4, #131	; 0x83
 80018ee:	00e4      	lsls	r4, r4, #3
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b2d8      	uxtb	r0, r3
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <main+0x434>)
 80018f8:	2584      	movs	r5, #132	; 0x84
 80018fa:	00ed      	lsls	r5, r5, #3
 80018fc:	195b      	adds	r3, r3, r5
 80018fe:	19da      	adds	r2, r3, r7
 8001900:	2125      	movs	r1, #37	; 0x25
 8001902:	193b      	adds	r3, r7, r4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	18d3      	adds	r3, r2, r3
 8001908:	185b      	adds	r3, r3, r1
 800190a:	1c02      	adds	r2, r0, #0
 800190c:	701a      	strb	r2, [r3, #0]
			loraTx.len = change;
 800190e:	193b      	adds	r3, r7, r4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <main+0x434>)
 8001916:	195b      	adds	r3, r3, r5
 8001918:	19db      	adds	r3, r3, r7
 800191a:	755a      	strb	r2, [r3, #21]

			if (HAL_GetTick() - counter > 10000) {
 800191c:	f000 ff76 	bl	800280c <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	4d0f      	ldr	r5, [pc, #60]	; (8001960 <main+0x440>)
 8001924:	197b      	adds	r3, r7, r5
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <main+0x444>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d800      	bhi.n	8001932 <main+0x412>
 8001930:	e6bb      	b.n	80016aa <main+0x18a>
				counter = HAL_GetTick();
 8001932:	f000 ff6b 	bl	800280c <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	197a      	adds	r2, r7, r5
 800193a:	6013      	str	r3, [r2, #0]
				//transmit(&uart1, &loraTx);
				change += 1;
 800193c:	193b      	adds	r3, r7, r4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	193a      	adds	r2, r7, r4
 8001944:	6013      	str	r3, [r2, #0]
		if (uart1.len > 0) {
 8001946:	e6b0      	b.n	80016aa <main+0x18a>
 8001948:	fffffbf8 	.word	0xfffffbf8
 800194c:	00000417 	.word	0x00000417
 8001950:	fffffbe0 	.word	0xfffffbe0
 8001954:	fffffd28 	.word	0xfffffd28
 8001958:	20000189 	.word	0x20000189
 800195c:	20000188 	.word	0x20000188
 8001960:	0000041c 	.word	0x0000041c
 8001964:	00002710 	.word	0x00002710

08001968 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b093      	sub	sp, #76	; 0x4c
 800196c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800196e:	2414      	movs	r4, #20
 8001970:	193b      	adds	r3, r7, r4
 8001972:	0018      	movs	r0, r3
 8001974:	2334      	movs	r3, #52	; 0x34
 8001976:	001a      	movs	r2, r3
 8001978:	2100      	movs	r1, #0
 800197a:	f003 fb28 	bl	8004fce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	0018      	movs	r0, r3
 8001982:	2310      	movs	r3, #16
 8001984:	001a      	movs	r2, r3
 8001986:	2100      	movs	r1, #0
 8001988:	f003 fb21 	bl	8004fce <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	0018      	movs	r0, r3
 8001992:	f001 ff0d 	bl	80037b0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2202      	movs	r2, #2
 800199a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	0052      	lsls	r2, r2, #1
 80019a2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019a4:	193b      	adds	r3, r7, r4
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	0018      	movs	r0, r3
 80019ba:	f001 ff39 	bl	8003830 <HAL_RCC_OscConfig>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x5e>
		Error_Handler();
 80019c2:	f000 f97d 	bl	8001cc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2100      	movs	r1, #0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f002 fa34 	bl	8003e50 <HAL_RCC_ClockConfig>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x88>
		Error_Handler();
 80019ec:	f000 f968 	bl	8001cc0 <Error_Handler>
	}
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b013      	add	sp, #76	; 0x4c
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	0018      	movs	r0, r3
 8001a02:	230c      	movs	r3, #12
 8001a04:	001a      	movs	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	f003 fae1 	bl	8004fce <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <MX_ADC1_Init+0xd0>)
 8001a10:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	05d2      	lsls	r2, r2, #23
 8001a18:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a26:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a2e:	2204      	movs	r2, #4
 8001a30:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	2100      	movs	r1, #0
 8001a50:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a60:	222c      	movs	r2, #44	; 0x2c
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a7a:	223c      	movs	r2, #60	; 0x3c
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 ffeb 	bl	8002a64 <HAL_ADC_Init>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <MX_ADC1_Init+0x9e>
		Error_Handler();
 8001a92:	f000 f915 	bl	8001cc0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aa8:	1d3a      	adds	r2, r7, #4
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_ADC1_Init+0xcc>)
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f001 f980 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001ab4:	1e03      	subs	r3, r0, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0xc4>
		Error_Handler();
 8001ab8:	f000 f902 	bl	8001cc0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000008c 	.word	0x2000008c
 8001ac8:	40012400 	.word	0x40012400

08001acc <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_CRC_Init+0x40>)
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <MX_CRC_Init+0x44>)
 8001ad4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_CRC_Init+0x40>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <MX_CRC_Init+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_CRC_Init+0x40>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <MX_CRC_Init+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_CRC_Init+0x40>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <MX_CRC_Init+0x40>)
 8001af6:	0018      	movs	r0, r3
 8001af8:	f001 fbe8 	bl	80032cc <HAL_CRC_Init>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_CRC_Init+0x38>
		Error_Handler();
 8001b00:	f000 f8de 	bl	8001cc0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	200000f0 	.word	0x200000f0
 8001b10:	40023000 	.word	0x40023000

08001b14 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <MX_SPI1_Init+0x78>)
 8001b1c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b20:	2282      	movs	r2, #130	; 0x82
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b2e:	22e0      	movs	r2, #224	; 0xe0
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b4a:	2218      	movs	r2, #24
 8001b4c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b62:	2207      	movs	r2, #7
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <MX_SPI1_Init+0x74>)
 8001b74:	0018      	movs	r0, r3
 8001b76:	f002 faf5 	bl	8004164 <HAL_SPI_Init>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001b7e:	f000 f89f 	bl	8001cc0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000114 	.word	0x20000114
 8001b8c:	40013000 	.word	0x40013000

08001b90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b96:	240c      	movs	r4, #12
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2314      	movs	r3, #20
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f003 fa14 	bl	8004fce <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001bdc:	2104      	movs	r1, #4
 8001bde:	430a      	orrs	r2, r1
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <MX_GPIO_Init+0x124>)
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	2204      	movs	r2, #4
 8001be8:	4013      	ands	r3, r2
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <MX_GPIO_Init+0x128>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f001 fdbe 	bl	8003776 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	0059      	lsls	r1, r3, #1
 8001bfe:	23a0      	movs	r3, #160	; 0xa0
 8001c00:	05db      	lsls	r3, r3, #23
 8001c02:	2200      	movs	r2, #0
 8001c04:	0018      	movs	r0, r3
 8001c06:	f001 fdb6 	bl	8003776 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <MX_GPIO_Init+0x12c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	0018      	movs	r0, r3
 8001c12:	f001 fdb0 	bl	8003776 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2203      	movs	r2, #3
 8001c1a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	2201      	movs	r2, #1
 8001c20:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <MX_GPIO_Init+0x128>)
 8001c32:	0019      	movs	r1, r3
 8001c34:	0010      	movs	r0, r2
 8001c36:	f001 fc1d 	bl	8003474 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	193b      	adds	r3, r7, r4
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <MX_GPIO_Init+0x128>)
 8001c50:	0019      	movs	r1, r3
 8001c52:	0010      	movs	r0, r2
 8001c54:	f001 fc0e 	bl	8003474 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8001c58:	0021      	movs	r1, r4
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	0052      	lsls	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	000c      	movs	r4, r1
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2201      	movs	r2, #1
 8001c68:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001c76:	193a      	adds	r2, r7, r4
 8001c78:	23a0      	movs	r3, #160	; 0xa0
 8001c7a:	05db      	lsls	r3, r3, #23
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f001 fbf8 	bl	8003474 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 8001c84:	0021      	movs	r1, r4
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2201      	movs	r2, #1
 8001c90:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <MX_GPIO_Init+0x12c>)
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f001 fbe5 	bl	8003474 <HAL_GPIO_Init>

}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b009      	add	sp, #36	; 0x24
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	50000400 	.word	0x50000400
 8001cbc:	50000800 	.word	0x50000800

08001cc0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

void vladInit(Function_t funcion, Id_t id, Vlad_t *vlad) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	603a      	str	r2, [r7, #0]
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	1c02      	adds	r2, r0, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	1dbb      	adds	r3, r7, #6
 8001cdc:	1c0a      	adds	r2, r1, #0
 8001cde:	701a      	strb	r2, [r3, #0]
	vlad->agc150m = 10;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	220a      	movs	r2, #10
 8001ce4:	801a      	strh	r2, [r3, #0]
	vlad->ref150m = 0;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	805a      	strh	r2, [r3, #2]
	vlad->level150m = 3;  // downlink 150 mhz
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	809a      	strh	r2, [r3, #4]
	vlad->agc170m = 0x07;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	80da      	strh	r2, [r3, #6]
	vlad->ref170m = 5;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	811a      	strh	r2, [r3, #8]
	vlad->level170m = 6; //uplink 170 mhz
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2206      	movs	r2, #6
 8001d02:	815a      	strh	r2, [r3, #10]
	vlad->tone_level = 7;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2207      	movs	r2, #7
 8001d08:	819a      	strh	r2, [r3, #12]
	vlad->v_5v = 8;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	81da      	strh	r2, [r3, #14]
	vlad->vin = 0x06;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2206      	movs	r2, #6
 8001d14:	821a      	strh	r2, [r3, #16]
	vlad->current = 0x08;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	825a      	strh	r2, [r3, #18]
	vlad->v_5v_real = 11;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <vladInit+0x9c>)
 8001d20:	615a      	str	r2, [r3, #20]
	vlad->vin_real = 12;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <vladInit+0xa0>)
 8001d26:	619a      	str	r2, [r3, #24]
	vlad->current_real = 13;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <vladInit+0xa4>)
 8001d2c:	61da      	str	r2, [r3, #28]
	vlad->uc_temperature = 14;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	220e      	movs	r2, #14
 8001d32:	621a      	str	r2, [r3, #32]
	vlad->remote_attenuation = 15;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	210f      	movs	r1, #15
 8001d3a:	5499      	strb	r1, [r3, r2]
	vlad->is_remote_attenuation = true;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2225      	movs	r2, #37	; 0x25
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]
    vlad->is_attenuation_updated = true;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2226      	movs	r2, #38	; 0x26
 8001d48:	2101      	movs	r1, #1
 8001d4a:	5499      	strb	r1, [r3, r2]
	vlad->calc_en;
	vlad->function = funcion;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	1dfa      	adds	r2, r7, #7
 8001d50:	2128      	movs	r1, #40	; 0x28
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	545a      	strb	r2, [r3, r1]
	vlad->id = id;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	1dba      	adds	r2, r7, #6
 8001d5a:	2127      	movs	r1, #39	; 0x27
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	545a      	strb	r2, [r3, r1]
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	41300000 	.word	0x41300000
 8001d6c:	41400000 	.word	0x41400000
 8001d70:	41500000 	.word	0x41500000

08001d74 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	1cfb      	adds	r3, r7, #3
 8001d80:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001d82:	230a      	movs	r3, #10
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	4a2b      	ldr	r2, [pc, #172]	; (8001e34 <crc_get+0xc0>)
 8001d88:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 8001d92:	230f      	movs	r3, #15
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e03d      	b.n	8001e18 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	18d3      	adds	r3, r2, r3
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b299      	uxth	r1, r3
 8001dae:	220c      	movs	r2, #12
 8001db0:	18bb      	adds	r3, r7, r2
 8001db2:	18ba      	adds	r2, r7, r2
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	404a      	eors	r2, r1
 8001db8:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8001dba:	230e      	movs	r3, #14
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e01e      	b.n	8001e02 <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001dc4:	210c      	movs	r1, #12
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	5e9b      	ldrsh	r3, [r3, r2]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da0c      	bge.n	8001dea <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	230a      	movs	r3, #10
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2000      	movs	r0, #0
 8001dde:	5e1b      	ldrsh	r3, [r3, r0]
 8001de0:	4053      	eors	r3, r2
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	801a      	strh	r2, [r3, #0]
 8001de8:	e005      	b.n	8001df6 <crc_get+0x82>
			else
				crc <<= 1;
 8001dea:	230c      	movs	r3, #12
 8001dec:	18fa      	adds	r2, r7, r3
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	18db      	adds	r3, r3, r3
 8001df4:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8001df6:	210e      	movs	r1, #14
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	3201      	adds	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	230e      	movs	r3, #14
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	d9db      	bls.n	8001dc4 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	3201      	adds	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	230f      	movs	r3, #15
 8001e1a:	18fa      	adds	r2, r7, r3
 8001e1c:	1cfb      	adds	r3, r7, #3
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3ba      	bcc.n	8001d9c <crc_get+0x28>
		}
	}
	return crc;
 8001e26:	230c      	movs	r3, #12
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	881b      	ldrh	r3, [r3, #0]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	00001021 	.word	0x00001021

08001e38 <rs485Init>:

void rs485Init(RS485_t *r) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2266      	movs	r2, #102	; 0x66
 8001e4a:	2107      	movs	r1, #7
 8001e4c:	5499      	strb	r1, [r3, r2]
	r->cmd = NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
	memset(r->buffer, 0, 100);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3302      	adds	r3, #2
 8001e58:	2264      	movs	r2, #100	; 0x64
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f003 f8b6 	bl	8004fce <memset>
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <rs485Init+0x4c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <rs485Init+0x4c>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	02c9      	lsls	r1, r1, #11
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <rs485Init+0x4c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <rs485Init+0x4c>)
 8001e76:	4904      	ldr	r1, [pc, #16]	; (8001e88 <rs485Init+0x50>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	50000400 	.word	0x50000400
 8001e88:	fff7ffff 	.word	0xfff7ffff

08001e8c <check_valid_module>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t check_valid_module(uint8_t *frame, uint8_t lenght) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	000a      	movs	r2, r1
 8001e96:	1cfb      	adds	r3, r7, #3
 8001e98:	701a      	strb	r2, [r3, #0]
	if (frame[1] == VLAD) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d11b      	bne.n	8001edc <check_valid_module+0x50>
		if (frame[2] == ID1) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d114      	bne.n	8001ed8 <check_valid_module+0x4c>
			for (int i = 3; i < lenght; i++)
 8001eae:	2303      	movs	r3, #3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e00b      	b.n	8001ecc <check_valid_module+0x40>
				if (frame[i] == LTEL_END_MARK)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	18d3      	adds	r3, r2, r3
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	227f      	movs	r2, #127	; 0x7f
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <check_valid_module+0x3a>
					return VALID_MODULE;
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	e00d      	b.n	8001ee2 <check_valid_module+0x56>
			for (int i = 3; i < lenght; i++)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	1cfb      	adds	r3, r7, #3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbee      	blt.n	8001eb4 <check_valid_module+0x28>
 8001ed6:	e003      	b.n	8001ee0 <check_valid_module+0x54>
		} else
			return WRONG_MODULE_ID;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	e002      	b.n	8001ee2 <check_valid_module+0x56>
	} else
		return WRONG_MODULE_FUNCTION;
 8001edc:	2304      	movs	r3, #4
 8001ede:	e000      	b.n	8001ee2 <check_valid_module+0x56>
	return WRONG_MODULE_FUNCTION;
 8001ee0:	2304      	movs	r3, #4
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <check_frame>:

Rs485_status_t check_frame(uint8_t *frame, uint8_t lenght) {
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	1cfb      	adds	r3, r7, #3
 8001ef6:	701a      	strb	r2, [r3, #0]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8001ef8:	1cfb      	adds	r3, r7, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	d913      	bls.n	8001f28 <check_frame+0x3e>
		if (frame[0] == LTEL_START_MARK) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	227e      	movs	r2, #126	; 0x7e
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10c      	bne.n	8001f24 <check_frame+0x3a>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8001f0a:	1cfb      	adds	r3, r7, #3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	18d3      	adds	r3, r2, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	227f      	movs	r2, #127	; 0x7f
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <check_frame+0x36>
				return VALID_FRAME;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e004      	b.n	8001f2a <check_frame+0x40>
			else
				return START_READING;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e002      	b.n	8001f2a <check_frame+0x40>
		} else
			return NOT_VALID_FRAME;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e000      	b.n	8001f2a <check_frame+0x40>
	} else

		return WAITING;
 8001f28:	2308      	movs	r3, #8
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <check_CRC_module>:

Rs485_status_t check_CRC_module(uint8_t *frame, uint8_t len) {
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	000a      	movs	r2, r1
 8001f3c:	1cfb      	adds	r3, r7, #3
 8001f3e:	701a      	strb	r2, [r3, #0]

	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = frame[(len - 2)] << 8;
 8001f40:	1cfb      	adds	r3, r7, #3
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3b02      	subs	r3, #2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
	crc_save |= frame[(len - 3)];
 8001f50:	1cfb      	adds	r3, r7, #3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	18d3      	adds	r3, r2, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(frame[1]), (len - 4));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	1cfb      	adds	r3, r7, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3b04      	subs	r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	0019      	movs	r1, r3
 8001f72:	0010      	movs	r0, r2
 8001f74:	f7ff fefe 	bl	8001d74 <crc_get>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d101      	bne.n	8001f88 <check_CRC_module+0x56>
		return DATA_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <check_CRC_module+0x58>
	return CRC_ERROR;
 8001f88:	2306      	movs	r3, #6
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <checkBuffer>:

Rs485_status_t checkBuffer(RS485_t *rs485){
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	rs485->status = check_frame(rs485->buffer,rs485->len);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	1c9a      	adds	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	f7ff ffa0 	bl	8001eea <check_frame>
 8001faa:	0003      	movs	r3, r0
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2266      	movs	r2, #102	; 0x66
 8001fb2:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == VALID_FRAME))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2266      	movs	r2, #102	; 0x66
 8001fb8:	5c9b      	ldrb	r3, [r3, r2]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <checkBuffer+0x34>
		return rs485->status;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2266      	movs	r2, #102	; 0x66
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	e02e      	b.n	8002024 <checkBuffer+0x92>
	rs485->status = check_valid_module(rs485->buffer, rs485->len);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1c9a      	adds	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	0019      	movs	r1, r3
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	f7ff ff5b 	bl	8001e8c <check_valid_module>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2266      	movs	r2, #102	; 0x66
 8001fde:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == VALID_MODULE))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2266      	movs	r2, #102	; 0x66
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d003      	beq.n	8001ff2 <checkBuffer+0x60>
		return rs485->status;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2266      	movs	r2, #102	; 0x66
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	e018      	b.n	8002024 <checkBuffer+0x92>
	rs485->status = check_CRC_module(rs485->buffer, rs485->len);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1c9a      	adds	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f7ff ff98 	bl	8001f32 <check_CRC_module>
 8002002:	0003      	movs	r3, r0
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2266      	movs	r2, #102	; 0x66
 800200a:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == DATA_OK))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2266      	movs	r2, #102	; 0x66
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <checkBuffer+0x8c>
		return rs485->status;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2266      	movs	r2, #102	; 0x66
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	e002      	b.n	8002024 <checkBuffer+0x92>
	return rs485->status;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2266      	movs	r2, #102	; 0x66
 8002022:	5c9b      	ldrb	r3, [r3, r2]
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_MspInit+0x44>)
 8002034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_MspInit+0x44>)
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_MspInit+0x44>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2201      	movs	r2, #1
 8002044:	4013      	ands	r3, r2
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_MspInit+0x44>)
 800204c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_MspInit+0x44>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0549      	lsls	r1, r1, #21
 8002054:	430a      	orrs	r2, r1
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_MspInit+0x44>)
 800205a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	4013      	ands	r3, r2
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	2414      	movs	r4, #20
 800207e:	193b      	adds	r3, r7, r4
 8002080:	0018      	movs	r0, r3
 8002082:	2314      	movs	r3, #20
 8002084:	001a      	movs	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	f002 ffa1 	bl	8004fce <memset>
  if(hadc->Instance==ADC1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_ADC_MspInit+0x80>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d129      	bne.n	80020ea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 8002098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0349      	lsls	r1, r1, #13
 80020a0:	430a      	orrs	r2, r1
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 80020a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	035b      	lsls	r3, r3, #13
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_ADC_MspInit+0x84>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	2203      	movs	r2, #3
 80020d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	193a      	adds	r2, r7, r4
 80020de:	23a0      	movs	r3, #160	; 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f001 f9c5 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b00b      	add	sp, #44	; 0x2c
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40012400 	.word	0x40012400
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_CRC_MspInit+0x38>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_CRC_MspInit+0x3c>)
 8002110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_CRC_MspInit+0x3c>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0149      	lsls	r1, r1, #5
 8002118:	430a      	orrs	r2, r1
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_CRC_MspInit+0x3c>)
 800211e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	015b      	lsls	r3, r3, #5
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40023000 	.word	0x40023000
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	2414      	movs	r4, #20
 8002146:	193b      	adds	r3, r7, r4
 8002148:	0018      	movs	r0, r3
 800214a:	2314      	movs	r3, #20
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f002 ff3d 	bl	8004fce <memset>
  if(hspi->Instance==SPI1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <HAL_SPI_MspInit+0xd0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d152      	bne.n	8002204 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0149      	lsls	r1, r1, #5
 8002168:	430a      	orrs	r2, r1
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 800216e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	015b      	lsls	r3, r3, #5
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	2201      	movs	r2, #1
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 8002198:	2102      	movs	r1, #2
 800219a:	430a      	orrs	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	; 0x34
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_SPI_MspInit+0xd4>)
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	22c0      	movs	r2, #192	; 0xc0
 80021ae:	0152      	lsls	r2, r2, #5
 80021b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	193b      	adds	r3, r7, r4
 80021b4:	2202      	movs	r2, #2
 80021b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	193b      	adds	r3, r7, r4
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	193a      	adds	r2, r7, r4
 80021cc:	23a0      	movs	r3, #160	; 0xa0
 80021ce:	05db      	lsls	r3, r3, #23
 80021d0:	0011      	movs	r1, r2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f001 f94e 	bl	8003474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 80021d8:	0021      	movs	r1, r4
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2208      	movs	r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2202      	movs	r2, #2
 80021e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_SPI_MspInit+0xd8>)
 80021fc:	0019      	movs	r1, r3
 80021fe:	0010      	movs	r0, r2
 8002200:	f001 f938 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b00b      	add	sp, #44	; 0x2c
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	40013000 	.word	0x40013000
 8002210:	40021000 	.word	0x40021000
 8002214:	50000400 	.word	0x50000400

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 fad4 	bl	80027e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f002 fe76 	bl	8004f68 <__errno>
 800227c:	0003      	movs	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	2301      	movs	r3, #1
 8002284:	425b      	negs	r3, r3
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b006      	add	sp, #24
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20002000 	.word	0x20002000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	2000018c 	.word	0x2000018c
 80022b0:	200001a8 	.word	0x200001a8

080022b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	0002      	movs	r2, r0
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b7f      	cmp	r3, #127	; 0x7f
 80022d2:	d809      	bhi.n	80022e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	001a      	movs	r2, r3
 80022da:	231f      	movs	r3, #31
 80022dc:	401a      	ands	r2, r3
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_EnableIRQ+0x30>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	4091      	lsls	r1, r2
 80022e4:	000a      	movs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <cleanByTimeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  cleanByTimeout(UART1_t* uart1,const char* str){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 80022fe:	f000 fa85 	bl	800280c <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	21cc      	movs	r1, #204	; 0xcc
 8002308:	585b      	ldr	r3, [r3, r1]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <cleanByTimeout+0x58>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d917      	bls.n	8002342 <cleanByTimeout+0x4e>
			uart1_send_str((char*)str);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 f963 	bl	80025e0 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <cleanByTimeout+0x5c>)
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f95f 	bl	80025e0 <uart1_send_str>
			if(strlen(str)>0)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <cleanByTimeout+0x3e>
				cleanTxBuffer(uart1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 f9b3 	bl	8002698 <cleanTxBuffer>
			uart1->timeout = HAL_GetTick();
 8002332:	f000 fa6b 	bl	800280c <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	21cc      	movs	r1, #204	; 0xcc
 800233c:	505a      	str	r2, [r3, r1]
			return 1;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <cleanByTimeout+0x50>
		}
		return 0;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}
 800234c:	00001388 	.word	0x00001388
 8002350:	08005ad4 	.word	0x08005ad4

08002354 <uart1_gpio_init>:

void uart1_gpio_init() {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8002358:	23a0      	movs	r3, #160	; 0xa0
 800235a:	05db      	lsls	r3, r3, #23
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	23a0      	movs	r3, #160	; 0xa0
 8002360:	05db      	lsls	r3, r3, #23
 8002362:	4930      	ldr	r1, [pc, #192]	; (8002424 <uart1_gpio_init+0xd0>)
 8002364:	400a      	ands	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8002368:	23a0      	movs	r3, #160	; 0xa0
 800236a:	05db      	lsls	r3, r3, #23
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	23a0      	movs	r3, #160	; 0xa0
 8002370:	05db      	lsls	r3, r3, #23
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0389      	lsls	r1, r1, #14
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 800237a:	23a0      	movs	r3, #160	; 0xa0
 800237c:	05db      	lsls	r3, r3, #23
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	23a0      	movs	r3, #160	; 0xa0
 8002382:	05db      	lsls	r3, r3, #23
 8002384:	4928      	ldr	r1, [pc, #160]	; (8002428 <uart1_gpio_init+0xd4>)
 8002386:	400a      	ands	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800238a:	23a0      	movs	r3, #160	; 0xa0
 800238c:	05db      	lsls	r3, r3, #23
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	23a0      	movs	r3, #160	; 0xa0
 8002392:	05db      	lsls	r3, r3, #23
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0309      	lsls	r1, r1, #12
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a2:	23a0      	movs	r3, #160	; 0xa0
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0049      	lsls	r1, r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 80023ae:	23a0      	movs	r3, #160	; 0xa0
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b4:	23a0      	movs	r3, #160	; 0xa0
 80023b6:	05db      	lsls	r3, r3, #23
 80023b8:	491c      	ldr	r1, [pc, #112]	; (800242c <uart1_gpio_init+0xd8>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 80023be:	23a0      	movs	r3, #160	; 0xa0
 80023c0:	05db      	lsls	r3, r3, #23
 80023c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c4:	23a0      	movs	r3, #160	; 0xa0
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	4919      	ldr	r1, [pc, #100]	; (8002430 <uart1_gpio_init+0xdc>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 80023ce:	23a0      	movs	r3, #160	; 0xa0
 80023d0:	05db      	lsls	r3, r3, #23
 80023d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d4:	23a0      	movs	r3, #160	; 0xa0
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	4916      	ldr	r1, [pc, #88]	; (8002434 <uart1_gpio_init+0xe0>)
 80023da:	400a      	ands	r2, r1
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 80023de:	23a0      	movs	r3, #160	; 0xa0
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	05db      	lsls	r3, r3, #23
 80023e8:	2110      	movs	r1, #16
 80023ea:	430a      	orrs	r2, r1
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 80023ee:	23a0      	movs	r3, #160	; 0xa0
 80023f0:	05db      	lsls	r3, r3, #23
 80023f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f4:	23a0      	movs	r3, #160	; 0xa0
 80023f6:	05db      	lsls	r3, r3, #23
 80023f8:	2120      	movs	r1, #32
 80023fa:	438a      	bics	r2, r1
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 80023fe:	23a0      	movs	r3, #160	; 0xa0
 8002400:	05db      	lsls	r3, r3, #23
 8002402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002404:	23a0      	movs	r3, #160	; 0xa0
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	2140      	movs	r1, #64	; 0x40
 800240a:	438a      	bics	r2, r1
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 800240e:	23a0      	movs	r3, #160	; 0xa0
 8002410:	05db      	lsls	r3, r3, #23
 8002412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002414:	23a0      	movs	r3, #160	; 0xa0
 8002416:	05db      	lsls	r3, r3, #23
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	438a      	bics	r2, r1
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	ffefffff 	.word	0xffefffff
 8002428:	fffbffff 	.word	0xfffbffff
 800242c:	fffffdff 	.word	0xfffffdff
 8002430:	fffffbff 	.word	0xfffffbff
 8002434:	fffff7ff 	.word	0xfffff7ff

08002438 <uart1Init>:

void uart1Init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8002448:	f7ff ff84 	bl	8002354 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <uart1Init+0x8c>)
 800244e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <uart1Init+0x8c>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	01c9      	lsls	r1, r1, #7
 8002456:	430a      	orrs	r2, r1
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <uart1Init+0x90>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10b      	bne.n	800247a <uart1Init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <uart1Init+0x8c>)
 8002464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <uart1Init+0x8c>)
 8002468:	2101      	movs	r1, #1
 800246a:	438a      	bics	r2, r1
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <uart1Init+0x8c>)
 8002470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <uart1Init+0x8c>)
 8002474:	2102      	movs	r1, #2
 8002476:	430a      	orrs	r2, r1
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7fd fe49 	bl	8000114 <__udivsi3>
 8002482:	0003      	movs	r3, r0
 8002484:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <uart1Init+0x94>)
 800248c:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <uart1Init+0x94>)
 8002490:	220c      	movs	r2, #12
 8002492:	601a      	str	r2, [r3, #0]
	u->len = 0;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	22c8      	movs	r2, #200	; 0xc8
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]
	//uart1_clean_buffer(u);

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <uart1Init+0x94>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <uart1Init+0x94>)
 80024a2:	2120      	movs	r1, #32
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80024a8:	201b      	movs	r0, #27
 80024aa:	f7ff ff09 	bl	80022c0 <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <uart1Init+0x94>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <uart1Init+0x94>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	40013800 	.word	0x40013800

080024d0 <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	0002      	movs	r2, r0
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <uart1_write+0x50>)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <uart1_write+0x50>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0089      	lsls	r1, r1, #2
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <uart1_write+0x54>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0fa      	beq.n	80024ec <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <uart1_write+0x54>)
 80024f8:	1dfa      	adds	r2, r7, #7
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <uart1_write+0x54>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2240      	movs	r2, #64	; 0x40
 8002506:	4013      	ands	r3, r2
 8002508:	d0fa      	beq.n	8002500 <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <uart1_write+0x50>)
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <uart1_write+0x50>)
 8002510:	4905      	ldr	r1, [pc, #20]	; (8002528 <uart1_write+0x58>)
 8002512:	400a      	ands	r2, r1
 8002514:	615a      	str	r2, [r3, #20]
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	50000400 	.word	0x50000400
 8002524:	40013800 	.word	0x40013800
 8002528:	fffffdff 	.word	0xfffffdff

0800252c <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <uart1_1byte_read+0x68>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2208      	movs	r2, #8
 8002538:	401a      	ands	r2, r3
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	1e51      	subs	r1, r2, #1
 800253e:	418a      	sbcs	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <uart1_1byte_read+0x68>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2220      	movs	r2, #32
 8002548:	401a      	ands	r2, r3
 800254a:	1dbb      	adds	r3, r7, #6
 800254c:	1e51      	subs	r1, r2, #1
 800254e:	418a      	sbcs	r2, r1
 8002550:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <uart1_1byte_read+0x36>
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <uart1_1byte_read+0x5c>
		if (override)
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <uart1_1byte_read+0x68>)
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <uart1_1byte_read+0x68>)
 8002570:	2108      	movs	r1, #8
 8002572:	430a      	orrs	r2, r1
 8002574:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <uart1_1byte_read+0x68>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	b2da      	uxtb	r2, r3
 800257c:	1d7b      	adds	r3, r7, #5
 800257e:	701a      	strb	r2, [r3, #0]
		return data;
 8002580:	1d7b      	adds	r3, r7, #5
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e000      	b.n	800258a <uart1_1byte_read+0x5e>
	} else
		return '\0';
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40013800 	.word	0x40013800

08002598 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	if (u->len >= RX_BUFFLEN) {
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	22c8      	movs	r2, #200	; 0xc8
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	2b63      	cmp	r3, #99	; 0x63
 80025a8:	d907      	bls.n	80025ba <uart1_read_to_frame+0x22>
		cleanRxBuffer(u);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 f861 	bl	8002674 <cleanRxBuffer>
		u->len = 0;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	22c8      	movs	r2, #200	; 0xc8
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]
	}
	u->rxBuffer[u->len++] = uart1_1byte_read();
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	22c8      	movs	r2, #200	; 0xc8
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	b2d0      	uxtb	r0, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	21c8      	movs	r1, #200	; 0xc8
 80025c8:	5450      	strb	r0, [r2, r1]
 80025ca:	001c      	movs	r4, r3
 80025cc:	f7ff ffae 	bl	800252c <uart1_1byte_read>
 80025d0:	0003      	movs	r3, r0
 80025d2:	001a      	movs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	551a      	strb	r2, [r3, r4]
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b003      	add	sp, #12
 80025de:	bd90      	pop	{r4, r7, pc}

080025e0 <uart1_send_str>:

void uart1_send_str(char *str) {
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e00d      	b.n	800260e <uart1_send_str+0x2e>
		uart1_write(str[i]);
 80025f2:	240f      	movs	r4, #15
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	18d3      	adds	r3, r2, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff ff66 	bl	80024d0 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002604:	193b      	adds	r3, r7, r4
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	193b      	adds	r3, r7, r4
 800260a:	3201      	adds	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	230f      	movs	r3, #15
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e9      	bne.n	80025f2 <uart1_send_str+0x12>
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b005      	add	sp, #20
 8002626:	bd90      	pop	{r4, r7, pc}

08002628 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	000a      	movs	r2, r1
 8002632:	1cfb      	adds	r3, r7, #3
 8002634:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8002636:	1cfb      	adds	r3, r7, #3
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e00e      	b.n	8002662 <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	18d3      	adds	r3, r2, r3
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff ff3f 	bl	80024d0 <uart1_write>
			str[i] = (char) '\0';
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	18d3      	adds	r3, r2, r3
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	1cfb      	adds	r3, r7, #3
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbeb      	blt.n	8002644 <uart1_send_frame+0x1c>
		}
	}
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}

08002674 <cleanRxBuffer>:

void cleanRxBuffer(UART1_t *u) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	memset(u->rxBuffer, 0, sizeof(u->len));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	2100      	movs	r1, #0
 8002682:	0018      	movs	r0, r3
 8002684:	f002 fca3 	bl	8004fce <memset>
	u->len = 0;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	22c8      	movs	r2, #200	; 0xc8
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <cleanTxBuffer>:

void cleanTxBuffer(UART1_t *u) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	memset(u->txBuffer, 0, sizeof(u->len));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3364      	adds	r3, #100	; 0x64
 80026a4:	2201      	movs	r2, #1
 80026a6:	2100      	movs	r1, #0
 80026a8:	0018      	movs	r0, r3
 80026aa:	f002 fc90 	bl	8004fce <memset>
	u->len = 0;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	22c8      	movs	r2, #200	; 0xc8
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c4:	f7ff fdf6 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <LoopForever+0x6>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	; (8002700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <LoopForever+0xe>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <LoopForever+0x16>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ee:	f002 fc41 	bl	8004f74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026f2:	f7fe ff15 	bl	8001520 <main>

080026f6 <LoopForever>:

LoopForever:
  b LoopForever
 80026f6:	e7fe      	b.n	80026f6 <LoopForever>
  ldr   r0, =_estack
 80026f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002704:	08005b64 	.word	0x08005b64
  ldr r2, =_sbss
 8002708:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800270c:	200001a4 	.word	0x200001a4

08002710 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_IRQHandler>
	...

08002714 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_Init+0x3c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_Init+0x3c>)
 8002726:	2180      	movs	r1, #128	; 0x80
 8002728:	0049      	lsls	r1, r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272e:	2003      	movs	r0, #3
 8002730:	f000 f810 	bl	8002754 <HAL_InitTick>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d003      	beq.n	8002740 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e001      	b.n	8002744 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff fc74 	bl	800202c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40022000 	.word	0x40022000

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_InitTick+0x88>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_InitTick+0x8c>)
 800276e:	681c      	ldr	r4, [r3, #0]
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_InitTick+0x88>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	0019      	movs	r1, r3
 8002776:	23fa      	movs	r3, #250	; 0xfa
 8002778:	0098      	lsls	r0, r3, #2
 800277a:	f7fd fccb 	bl	8000114 <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	0019      	movs	r1, r3
 8002782:	0020      	movs	r0, r4
 8002784:	f7fd fcc6 	bl	8000114 <__udivsi3>
 8002788:	0003      	movs	r3, r0
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fd91 	bl	80032b2 <HAL_SYSTICK_Config>
 8002790:	1e03      	subs	r3, r0, #0
 8002792:	d112      	bne.n	80027ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d80a      	bhi.n	80027b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	2301      	movs	r3, #1
 800279e:	425b      	negs	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 fd70 	bl	8003288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_InitTick+0x90>)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00d      	b.n	80027cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e008      	b.n	80027cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e003      	b.n	80027cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b005      	add	sp, #20
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_IncTick+0x1c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	001a      	movs	r2, r3
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_IncTick+0x20>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	18d2      	adds	r2, r2, r3
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_IncTick+0x20>)
 80027fa:	601a      	str	r2, [r3, #0]
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	20000008 	.word	0x20000008
 8002808:	20000190 	.word	0x20000190

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b02      	ldr	r3, [pc, #8]	; (800281c <HAL_GetTick+0x10>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	20000190 	.word	0x20000190

08002820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff fff0 	bl	800280c <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_Delay+0x44>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	001a      	movs	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	189b      	adds	r3, r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	f7ff ffe0 	bl	800280c <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d8f7      	bhi.n	8002848 <HAL_Delay+0x28>
  {
  }
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000008 	.word	0x20000008

08002868 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002878:	401a      	ands	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	fe3fffff 	.word	0xfe3fffff

08002890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	23e0      	movs	r3, #224	; 0xe0
 800289e:	045b      	lsls	r3, r3, #17
 80028a0:	4013      	ands	r3, r2
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b002      	add	sp, #8
 80028a8:	bd80      	pop	{r7, pc}

080028aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	2104      	movs	r1, #4
 80028be:	400a      	ands	r2, r1
 80028c0:	2107      	movs	r1, #7
 80028c2:	4091      	lsls	r1, r2
 80028c4:	000a      	movs	r2, r1
 80028c6:	43d2      	mvns	r2, r2
 80028c8:	401a      	ands	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2104      	movs	r1, #4
 80028ce:	400b      	ands	r3, r1
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4099      	lsls	r1, r3
 80028d4:	000b      	movs	r3, r1
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	2104      	movs	r1, #4
 80028f6:	400a      	ands	r2, r1
 80028f8:	2107      	movs	r1, #7
 80028fa:	4091      	lsls	r1, r2
 80028fc:	000a      	movs	r2, r1
 80028fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2104      	movs	r1, #4
 8002904:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002906:	40da      	lsrs	r2, r3
 8002908:	0013      	movs	r3, r2
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	211f      	movs	r1, #31
 8002926:	400a      	ands	r2, r1
 8002928:	210f      	movs	r1, #15
 800292a:	4091      	lsls	r1, r2
 800292c:	000a      	movs	r2, r1
 800292e:	43d2      	mvns	r2, r2
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	210f      	movs	r1, #15
 8002938:	4019      	ands	r1, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	201f      	movs	r0, #31
 800293e:	4003      	ands	r3, r0
 8002940:	4099      	lsls	r1, r3
 8002942:	000b      	movs	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}

08002952 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	035b      	lsls	r3, r3, #13
 8002964:	0b5b      	lsrs	r3, r3, #13
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	0352      	lsls	r2, r2, #13
 8002986:	0b52      	lsrs	r2, r2, #13
 8002988:	43d2      	mvns	r2, r2
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}

08002998 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	0212      	lsls	r2, r2, #8
 80029ac:	43d2      	mvns	r2, r2
 80029ae:	401a      	ands	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	400b      	ands	r3, r1
 80029b8:	4904      	ldr	r1, [pc, #16]	; (80029cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	07ffff00 	.word	0x07ffff00

080029d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80029de:	4013      	ands	r3, r2
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	0552      	lsls	r2, r2, #21
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	6fffffe8 	.word	0x6fffffe8

080029f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	055b      	lsls	r3, r3, #21
 8002a08:	401a      	ands	r2, r3
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	055b      	lsls	r3, r3, #21
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d101      	bne.n	8002a16 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <LL_ADC_IsEnabled+0x18>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <LL_ADC_IsEnabled+0x1a>
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e17f      	b.n	8002d8a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7ff faed 	bl	8002074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2254      	movs	r2, #84	; 0x54
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff ffa3 	bl	80029f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff88 	bl	80029d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac0:	4bb4      	ldr	r3, [pc, #720]	; (8002d94 <HAL_ADC_Init+0x330>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	49b4      	ldr	r1, [pc, #720]	; (8002d98 <HAL_ADC_Init+0x334>)
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fd fb24 	bl	8000114 <__udivsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ad4:	e002      	b.n	8002adc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f9      	bne.n	8002ad6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7ff ff86 	bl	80029f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d10f      	bne.n	8002b10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	2210      	movs	r2, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2201      	movs	r2, #1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b08:	231f      	movs	r3, #31
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff ff94 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	2210      	movs	r2, #16
 8002b24:	4013      	ands	r3, r2
 8002b26:	d000      	beq.n	8002b2a <HAL_ADC_Init+0xc6>
 8002b28:	e122      	b.n	8002d70 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d000      	beq.n	8002b32 <HAL_ADC_Init+0xce>
 8002b30:	e11e      	b.n	8002d70 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	4a99      	ldr	r2, [pc, #612]	; (8002d9c <HAL_ADC_Init+0x338>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff ff6a 	bl	8002a20 <LL_ADC_IsEnabled>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d000      	beq.n	8002b52 <HAL_ADC_Init+0xee>
 8002b50:	e0ad      	b.n	8002cae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7e1b      	ldrb	r3, [r3, #24]
 8002b5a:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b5c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7e5b      	ldrb	r3, [r3, #25]
 8002b62:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b64:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7e9b      	ldrb	r3, [r3, #26]
 8002b6a:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b6c:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_ADC_Init+0x118>
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	015b      	lsls	r3, r3, #5
 8002b7a:	e000      	b.n	8002b7e <HAL_ADC_Init+0x11a>
 8002b7c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b7e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b84:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da04      	bge.n	8002b98 <HAL_ADC_Init+0x134>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	e001      	b.n	8002b9c <HAL_ADC_Init+0x138>
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002b9c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	5c5b      	ldrb	r3, [r3, r1]
 8002ba4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ba6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	5c9b      	ldrb	r3, [r3, r2]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d115      	bne.n	8002be4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e9b      	ldrb	r3, [r3, #26]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	0252      	lsls	r2, r2, #9
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	e00b      	b.n	8002be4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	23e0      	movs	r3, #224	; 0xe0
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <HAL_ADC_Init+0x33c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0f9b      	lsrs	r3, r3, #30
 8002c1e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	223c      	movs	r2, #60	; 0x3c
 8002c30:	5c9b      	ldrb	r3, [r3, r2]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d111      	bne.n	8002c5a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0f9b      	lsrs	r3, r3, #30
 8002c3c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c42:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c48:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c4e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	2201      	movs	r2, #1
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_ADC_Init+0x340>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	05db      	lsls	r3, r3, #23
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d012      	beq.n	8002cae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d00c      	beq.n	8002cae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002c94:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <HAL_ADC_Init+0x344>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a44      	ldr	r2, [pc, #272]	; (8002dac <HAL_ADC_Init+0x348>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	23f0      	movs	r3, #240	; 0xf0
 8002ca4:	039b      	lsls	r3, r3, #14
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_ADC_Init+0x344>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f7ff fdf6 	bl	80028aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	493a      	ldr	r1, [pc, #232]	; (8002db0 <HAL_ADC_Init+0x34c>)
 8002cc8:	001a      	movs	r2, r3
 8002cca:	f7ff fdee 	bl	80028aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2110      	movs	r1, #16
 8002ce2:	4249      	negs	r1, r1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce8:	e018      	b.n	8002d1c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	039b      	lsls	r3, r3, #14
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d112      	bne.n	8002d1c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	221c      	movs	r2, #28
 8002d06:	4013      	ands	r3, r2
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	0011      	movs	r1, r2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2100      	movs	r1, #0
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff fdde 	bl	80028e4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002d28:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4393      	bics	r3, r2
 8002d40:	2201      	movs	r2, #1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d48:	e01c      	b.n	8002d84 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	2212      	movs	r2, #18
 8002d50:	4393      	bics	r3, r2
 8002d52:	2210      	movs	r2, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2201      	movs	r2, #1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002d66:	231f      	movs	r3, #31
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d6e:	e009      	b.n	8002d84 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	2210      	movs	r2, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002d84:	231f      	movs	r3, #31
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b008      	add	sp, #32
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000000 	.word	0x20000000
 8002d98:	00030d40 	.word	0x00030d40
 8002d9c:	fffffefd 	.word	0xfffffefd
 8002da0:	fffe0201 	.word	0xfffe0201
 8002da4:	1ffffc02 	.word	0x1ffffc02
 8002da8:	40012708 	.word	0x40012708
 8002dac:	ffc3ffff 	.word	0xffc3ffff
 8002db0:	07ffff04 	.word	0x07ffff04

08002db4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2317      	movs	r3, #23
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2254      	movs	r2, #84	; 0x54
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x24>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e1c0      	b.n	800315a <HAL_ADC_ConfigChannel+0x3a6>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2254      	movs	r2, #84	; 0x54
 8002ddc:	2101      	movs	r1, #1
 8002dde:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff fe2c 	bl	8002a42 <LL_ADC_REG_IsConversionOngoing>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d000      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x3c>
 8002dee:	e1a3      	b.n	8003138 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d100      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x46>
 8002df8:	e143      	b.n	8003082 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e0a:	4ac1      	ldr	r2, [pc, #772]	; (8003110 <HAL_ADC_ConfigChannel+0x35c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0019      	movs	r1, r3
 8002e1a:	0010      	movs	r0, r2
 8002e1c:	f7ff fd99 	bl	8002952 <LL_ADC_REG_SetSequencerChAdd>
 8002e20:	e0c9      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	211f      	movs	r1, #31
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	210f      	movs	r1, #15
 8002e30:	4099      	lsls	r1, r3
 8002e32:	000b      	movs	r3, r1
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	035b      	lsls	r3, r3, #13
 8002e40:	0b5b      	lsrs	r3, r3, #13
 8002e42:	d105      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x9c>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	e098      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d000      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0xa8>
 8002e5a:	e091      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1cc>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d000      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0xb4>
 8002e66:	e089      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x1c8>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d000      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0xc0>
 8002e72:	e081      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x1c4>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d000      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0xcc>
 8002e7e:	e079      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x1c0>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2210      	movs	r2, #16
 8002e86:	4013      	ands	r3, r2
 8002e88:	d000      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0xd8>
 8002e8a:	e071      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1bc>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	d000      	beq.n	8002e98 <HAL_ADC_ConfigChannel+0xe4>
 8002e96:	e069      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x1b8>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d000      	beq.n	8002ea4 <HAL_ADC_ConfigChannel+0xf0>
 8002ea2:	e061      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1b4>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d000      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0xfc>
 8002eae:	e059      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1b0>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d151      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1ac>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d149      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1a8>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d141      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1a4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	d139      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1a0>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d131      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x19c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	019b      	lsls	r3, r3, #6
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d129      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x198>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	01db      	lsls	r3, r3, #7
 8002f00:	4013      	ands	r3, r2
 8002f02:	d121      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x194>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d119      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x190>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	025b      	lsls	r3, r3, #9
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d111      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x18c>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x188>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	02db      	lsls	r3, r3, #11
 8002f30:	4013      	ands	r3, r2
 8002f32:	d001      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x184>
 8002f34:	2312      	movs	r3, #18
 8002f36:	e024      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e022      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f3c:	2311      	movs	r3, #17
 8002f3e:	e020      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f40:	2310      	movs	r3, #16
 8002f42:	e01e      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f44:	230f      	movs	r3, #15
 8002f46:	e01c      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f48:	230e      	movs	r3, #14
 8002f4a:	e01a      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f4c:	230d      	movs	r3, #13
 8002f4e:	e018      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f50:	230c      	movs	r3, #12
 8002f52:	e016      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f54:	230b      	movs	r3, #11
 8002f56:	e014      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f58:	230a      	movs	r3, #10
 8002f5a:	e012      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	e010      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f60:	2308      	movs	r3, #8
 8002f62:	e00e      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f64:	2307      	movs	r3, #7
 8002f66:	e00c      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f68:	2306      	movs	r3, #6
 8002f6a:	e00a      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	e008      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f70:	2304      	movs	r3, #4
 8002f72:	e006      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f74:	2303      	movs	r3, #3
 8002f76:	e004      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x1ce>
 8002f80:	2300      	movs	r3, #0
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6852      	ldr	r2, [r2, #4]
 8002f86:	201f      	movs	r0, #31
 8002f88:	4002      	ands	r2, r0
 8002f8a:	4093      	lsls	r3, r2
 8002f8c:	000a      	movs	r2, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d808      	bhi.n	8002fb6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	f7ff fcae 	bl	8002912 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	f7ff fce8 	bl	8002998 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db00      	blt.n	8002fd2 <HAL_ADC_ConfigChannel+0x21e>
 8002fd0:	e0bc      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd2:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fc5b 	bl	8002890 <LL_ADC_GetCommonPathInternalCh>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4d      	ldr	r2, [pc, #308]	; (8003118 <HAL_ADC_ConfigChannel+0x364>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d122      	bne.n	800302e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ff0:	d11d      	bne.n	800302e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	0412      	lsls	r2, r2, #16
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	4a46      	ldr	r2, [pc, #280]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0010      	movs	r0, r2
 8003000:	f7ff fc32 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003004:	4b45      	ldr	r3, [pc, #276]	; (800311c <HAL_ADC_ConfigChannel+0x368>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4945      	ldr	r1, [pc, #276]	; (8003120 <HAL_ADC_ConfigChannel+0x36c>)
 800300a:	0018      	movs	r0, r3
 800300c:	f7fd f882 	bl	8000114 <__udivsi3>
 8003010:	0003      	movs	r3, r0
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	0013      	movs	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	189b      	adds	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800301e:	e002      	b.n	8003026 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800302c:	e08e      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <HAL_ADC_ConfigChannel+0x370>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10e      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	045b      	lsls	r3, r3, #17
 800303e:	4013      	ands	r3, r2
 8003040:	d109      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	0452      	lsls	r2, r2, #17
 8003048:	4313      	orrs	r3, r2
 800304a:	4a32      	ldr	r2, [pc, #200]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f7ff fc0a 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
 8003054:	e07a      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_ADC_ConfigChannel+0x374>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d000      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x2ae>
 8003060:	e074      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	03db      	lsls	r3, r3, #15
 8003068:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800306a:	d000      	beq.n	800306e <HAL_ADC_ConfigChannel+0x2ba>
 800306c:	e06e      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	03d2      	lsls	r2, r2, #15
 8003074:	4313      	orrs	r3, r2
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 8003078:	0019      	movs	r1, r3
 800307a:	0010      	movs	r0, r2
 800307c:	f7ff fbf4 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
 8003080:	e064      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	429a      	cmp	r2, r3
 800308c:	d004      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_ADC_ConfigChannel+0x35c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d107      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0019      	movs	r1, r3
 80030a2:	0010      	movs	r0, r2
 80030a4:	f7ff fc66 	bl	8002974 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da4d      	bge.n	800314c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff fbec 	bl	8002890 <LL_ADC_GetCommonPathInternalCh>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_ADC_ConfigChannel+0x364>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_ADC_ConfigChannel+0x378>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 80030ce:	0019      	movs	r1, r3
 80030d0:	0010      	movs	r0, r2
 80030d2:	f7ff fbc9 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
 80030d6:	e039      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <HAL_ADC_ConfigChannel+0x370>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4a12      	ldr	r2, [pc, #72]	; (8003130 <HAL_ADC_ConfigChannel+0x37c>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 80030ea:	0019      	movs	r1, r3
 80030ec:	0010      	movs	r0, r2
 80030ee:	f7ff fbbb 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
 80030f2:	e02b      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <HAL_ADC_ConfigChannel+0x374>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d126      	bne.n	800314c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_ADC_ConfigChannel+0x380>)
 8003102:	4013      	ands	r3, r2
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <HAL_ADC_ConfigChannel+0x360>)
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f7ff fbad 	bl	8002868 <LL_ADC_SetCommonPathInternalCh>
 800310e:	e01d      	b.n	800314c <HAL_ADC_ConfigChannel+0x398>
 8003110:	80000004 	.word	0x80000004
 8003114:	40012708 	.word	0x40012708
 8003118:	b0001000 	.word	0xb0001000
 800311c:	20000000 	.word	0x20000000
 8003120:	00030d40 	.word	0x00030d40
 8003124:	b8004000 	.word	0xb8004000
 8003128:	b4002000 	.word	0xb4002000
 800312c:	ff7fffff 	.word	0xff7fffff
 8003130:	feffffff 	.word	0xfeffffff
 8003134:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	2220      	movs	r2, #32
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003144:	2317      	movs	r3, #23
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2254      	movs	r2, #84	; 0x54
 8003150:	2100      	movs	r1, #0
 8003152:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003154:	2317      	movs	r3, #23
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b006      	add	sp, #24
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	0002      	movs	r2, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b7f      	cmp	r3, #127	; 0x7f
 8003178:	d828      	bhi.n	80031cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800317a:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <__NVIC_SetPriority+0xd4>)
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b25b      	sxtb	r3, r3
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	33c0      	adds	r3, #192	; 0xc0
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	589b      	ldr	r3, [r3, r2]
 800318a:	1dfa      	adds	r2, r7, #7
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	0011      	movs	r1, r2
 8003190:	2203      	movs	r2, #3
 8003192:	400a      	ands	r2, r1
 8003194:	00d2      	lsls	r2, r2, #3
 8003196:	21ff      	movs	r1, #255	; 0xff
 8003198:	4091      	lsls	r1, r2
 800319a:	000a      	movs	r2, r1
 800319c:	43d2      	mvns	r2, r2
 800319e:	401a      	ands	r2, r3
 80031a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	22ff      	movs	r2, #255	; 0xff
 80031a8:	401a      	ands	r2, r3
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	0018      	movs	r0, r3
 80031b0:	2303      	movs	r3, #3
 80031b2:	4003      	ands	r3, r0
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031b8:	481f      	ldr	r0, [pc, #124]	; (8003238 <__NVIC_SetPriority+0xd4>)
 80031ba:	1dfb      	adds	r3, r7, #7
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	430a      	orrs	r2, r1
 80031c4:	33c0      	adds	r3, #192	; 0xc0
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031ca:	e031      	b.n	8003230 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <__NVIC_SetPriority+0xd8>)
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	0019      	movs	r1, r3
 80031d4:	230f      	movs	r3, #15
 80031d6:	400b      	ands	r3, r1
 80031d8:	3b08      	subs	r3, #8
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	3306      	adds	r3, #6
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	18d3      	adds	r3, r2, r3
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1dfa      	adds	r2, r7, #7
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	0011      	movs	r1, r2
 80031ec:	2203      	movs	r2, #3
 80031ee:	400a      	ands	r2, r1
 80031f0:	00d2      	lsls	r2, r2, #3
 80031f2:	21ff      	movs	r1, #255	; 0xff
 80031f4:	4091      	lsls	r1, r2
 80031f6:	000a      	movs	r2, r1
 80031f8:	43d2      	mvns	r2, r2
 80031fa:	401a      	ands	r2, r3
 80031fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	22ff      	movs	r2, #255	; 0xff
 8003204:	401a      	ands	r2, r3
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	0018      	movs	r0, r3
 800320c:	2303      	movs	r3, #3
 800320e:	4003      	ands	r3, r0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003214:	4809      	ldr	r0, [pc, #36]	; (800323c <__NVIC_SetPriority+0xd8>)
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001c      	movs	r4, r3
 800321c:	230f      	movs	r3, #15
 800321e:	4023      	ands	r3, r4
 8003220:	3b08      	subs	r3, #8
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	430a      	orrs	r2, r1
 8003226:	3306      	adds	r3, #6
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	18c3      	adds	r3, r0, r3
 800322c:	3304      	adds	r3, #4
 800322e:	601a      	str	r2, [r3, #0]
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b003      	add	sp, #12
 8003236:	bd90      	pop	{r4, r7, pc}
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	045b      	lsls	r3, r3, #17
 8003250:	429a      	cmp	r2, r3
 8003252:	d301      	bcc.n	8003258 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003254:	2301      	movs	r3, #1
 8003256:	e010      	b.n	800327a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <SysTick_Config+0x44>)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	3a01      	subs	r2, #1
 800325e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003260:	2301      	movs	r3, #1
 8003262:	425b      	negs	r3, r3
 8003264:	2103      	movs	r1, #3
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff ff7c 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <SysTick_Config+0x44>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <SysTick_Config+0x44>)
 8003274:	2207      	movs	r2, #7
 8003276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	210f      	movs	r1, #15
 8003294:	187b      	adds	r3, r7, r1
 8003296:	1c02      	adds	r2, r0, #0
 8003298:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	187b      	adds	r3, r7, r1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	0011      	movs	r1, r2
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7ff ffbf 	bl	8003240 <SysTick_Config>
 80032c2:	0003      	movs	r3, r0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e056      	b.n	800338c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7f5b      	ldrb	r3, [r3, #29]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fe ff03 	bl	80020fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	791b      	ldrb	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10c      	bne.n	800331e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_CRC_Init+0xc8>)
 800330a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2118      	movs	r1, #24
 8003318:	438a      	bics	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	e00b      	b.n	8003336 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f835 	bl	8003398 <HAL_CRCEx_Polynomial_Set>
 800332e:	1e03      	subs	r3, r0, #0
 8003330:	d001      	beq.n	8003336 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02a      	b.n	800338c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	795b      	ldrb	r3, [r3, #5]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2201      	movs	r2, #1
 8003344:	4252      	negs	r2, r2
 8003346:	611a      	str	r2, [r3, #16]
 8003348:	e004      	b.n	8003354 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6912      	ldr	r2, [r2, #16]
 8003352:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2260      	movs	r2, #96	; 0x60
 800335c:	4393      	bics	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	4393      	bics	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}
 8003394:	04c11db7 	.word	0x04c11db7

08003398 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2317      	movs	r3, #23
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80033ac:	231f      	movs	r3, #31
 80033ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	613a      	str	r2, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_CRCEx_Polynomial_Set+0x36>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	221f      	movs	r2, #31
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	40da      	lsrs	r2, r3
 80033c6:	0013      	movs	r3, r2
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	d0f1      	beq.n	80033b2 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	d00f      	beq.n	80033f4 <HAL_CRCEx_Polynomial_Set+0x5c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b18      	cmp	r3, #24
 80033d8:	d824      	bhi.n	8003424 <HAL_CRCEx_Polynomial_Set+0x8c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d011      	beq.n	8003404 <HAL_CRCEx_Polynomial_Set+0x6c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d81e      	bhi.n	8003424 <HAL_CRCEx_Polynomial_Set+0x8c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_CRCEx_Polynomial_Set+0x96>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d010      	beq.n	8003414 <HAL_CRCEx_Polynomial_Set+0x7c>
 80033f2:	e017      	b.n	8003424 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d91b      	bls.n	8003432 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80033fa:	2317      	movs	r3, #23
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003402:	e016      	b.n	8003432 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d915      	bls.n	8003436 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003412:	e010      	b.n	8003436 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d90f      	bls.n	800343a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800341a:	2317      	movs	r3, #23
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003422:	e00a      	b.n	800343a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003424:	2317      	movs	r3, #23
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
      break;
 800342c:	e006      	b.n	800343c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	e004      	b.n	800343c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	e002      	b.n	800343c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	e000      	b.n	800343c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800343a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800343c:	2317      	movs	r3, #23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2218      	movs	r2, #24
 8003456:	4393      	bics	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003464:	2317      	movs	r3, #23
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	781b      	ldrb	r3, [r3, #0]
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	b006      	add	sp, #24
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003482:	e147      	b.n	8003714 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4091      	lsls	r1, r2
 800348e:	000a      	movs	r2, r1
 8003490:	4013      	ands	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d100      	bne.n	800349c <HAL_GPIO_Init+0x28>
 800349a:	e138      	b.n	800370e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d005      	beq.n	80034b4 <HAL_GPIO_Init+0x40>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d130      	bne.n	8003516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	43da      	mvns	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	409a      	lsls	r2, r3
 80034d6:	0013      	movs	r3, r2
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ea:	2201      	movs	r2, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
 80034f0:	0013      	movs	r3, r2
 80034f2:	43da      	mvns	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	2201      	movs	r2, #1
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
 8003508:	0013      	movs	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2203      	movs	r2, #3
 800351c:	4013      	ands	r3, r2
 800351e:	2b03      	cmp	r3, #3
 8003520:	d017      	beq.n	8003552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	0013      	movs	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2203      	movs	r2, #3
 8003558:	4013      	ands	r3, r2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d123      	bne.n	80035a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	58d3      	ldr	r3, [r2, r3]
 800356a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2207      	movs	r2, #7
 8003570:	4013      	ands	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	409a      	lsls	r2, r3
 8003578:	0013      	movs	r3, r2
 800357a:	43da      	mvns	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2107      	movs	r1, #7
 800358a:	400b      	ands	r3, r1
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	08da      	lsrs	r2, r3, #3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3208      	adds	r2, #8
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	6939      	ldr	r1, [r7, #16]
 80035a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	409a      	lsls	r2, r3
 80035b4:	0013      	movs	r3, r2
 80035b6:	43da      	mvns	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2203      	movs	r2, #3
 80035c4:	401a      	ands	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	0013      	movs	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	23c0      	movs	r3, #192	; 0xc0
 80035e0:	029b      	lsls	r3, r3, #10
 80035e2:	4013      	ands	r3, r2
 80035e4:	d100      	bne.n	80035e8 <HAL_GPIO_Init+0x174>
 80035e6:	e092      	b.n	800370e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035e8:	4a50      	ldr	r2, [pc, #320]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3318      	adds	r3, #24
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	589b      	ldr	r3, [r3, r2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4013      	ands	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	220f      	movs	r2, #15
 8003600:	409a      	lsls	r2, r3
 8003602:	0013      	movs	r3, r2
 8003604:	43da      	mvns	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	23a0      	movs	r3, #160	; 0xa0
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	429a      	cmp	r2, r3
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x1ca>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a45      	ldr	r2, [pc, #276]	; (8003730 <HAL_GPIO_Init+0x2bc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00d      	beq.n	800363a <HAL_GPIO_Init+0x1c6>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a44      	ldr	r2, [pc, #272]	; (8003734 <HAL_GPIO_Init+0x2c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <HAL_GPIO_Init+0x1c2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a43      	ldr	r2, [pc, #268]	; (8003738 <HAL_GPIO_Init+0x2c4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_GPIO_Init+0x1be>
 800362e:	2303      	movs	r3, #3
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 8003632:	2305      	movs	r3, #5
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x1cc>
 800363e:	2300      	movs	r3, #0
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	2103      	movs	r1, #3
 8003644:	400a      	ands	r2, r1
 8003646:	00d2      	lsls	r2, r2, #3
 8003648:	4093      	lsls	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003650:	4936      	ldr	r1, [pc, #216]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3318      	adds	r3, #24
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800365e:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43da      	mvns	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	035b      	lsls	r3, r3, #13
 8003676:	4013      	ands	r3, r2
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003688:	4b28      	ldr	r3, [pc, #160]	; (800372c <HAL_GPIO_Init+0x2b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43da      	mvns	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	039b      	lsls	r3, r3, #14
 80036a0:	4013      	ands	r3, r2
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036b4:	2384      	movs	r3, #132	; 0x84
 80036b6:	58d3      	ldr	r3, [r2, r3]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43da      	mvns	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	029b      	lsls	r3, r3, #10
 80036cc:	4013      	ands	r3, r2
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d8:	4914      	ldr	r1, [pc, #80]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036da:	2284      	movs	r2, #132	; 0x84
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <HAL_GPIO_Init+0x2b8>)
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	58d3      	ldr	r3, [r2, r3]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	4013      	ands	r3, r2
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003706:	4909      	ldr	r1, [pc, #36]	; (800372c <HAL_GPIO_Init+0x2b8>)
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	40da      	lsrs	r2, r3
 800371c:	1e13      	subs	r3, r2, #0
 800371e:	d000      	beq.n	8003722 <HAL_GPIO_Init+0x2ae>
 8003720:	e6b0      	b.n	8003484 <HAL_GPIO_Init+0x10>
  }
}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b006      	add	sp, #24
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021800 	.word	0x40021800
 8003730:	50000400 	.word	0x50000400
 8003734:	50000800 	.word	0x50000800
 8003738:	50000c00 	.word	0x50000c00

0800373c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	000a      	movs	r2, r1
 8003746:	1cbb      	adds	r3, r7, #2
 8003748:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	1cba      	adds	r2, r7, #2
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	4013      	ands	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003756:	230f      	movs	r3, #15
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e003      	b.n	8003768 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003760:	230f      	movs	r3, #15
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003768:	230f      	movs	r3, #15
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	781b      	ldrb	r3, [r3, #0]
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b004      	add	sp, #16
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	0008      	movs	r0, r1
 8003780:	0011      	movs	r1, r2
 8003782:	1cbb      	adds	r3, r7, #2
 8003784:	1c02      	adds	r2, r0, #0
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	1c7b      	adds	r3, r7, #1
 800378a:	1c0a      	adds	r2, r1, #0
 800378c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800378e:	1c7b      	adds	r3, r7, #1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003796:	1cbb      	adds	r3, r7, #2
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800379e:	e003      	b.n	80037a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037a0:	1cbb      	adds	r3, r7, #2
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80037be:	4013      	ands	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d11f      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	0013      	movs	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4912      	ldr	r1, [pc, #72]	; (800382c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fc fc96 	bl	8000114 <__udivsi3>
 80037e8:	0003      	movs	r3, r0
 80037ea:	3301      	adds	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ee:	e008      	b.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e001      	b.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e009      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	401a      	ands	r2, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	429a      	cmp	r2, r3
 8003812:	d0ed      	beq.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40007000 	.word	0x40007000
 8003824:	fffff9ff 	.word	0xfffff9ff
 8003828:	20000000 	.word	0x20000000
 800382c:	000f4240 	.word	0x000f4240

08003830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e2f3      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	4013      	ands	r3, r2
 800384a:	d100      	bne.n	800384e <HAL_RCC_OscConfig+0x1e>
 800384c:	e07c      	b.n	8003948 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4bc3      	ldr	r3, [pc, #780]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2238      	movs	r2, #56	; 0x38
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4bc0      	ldr	r3, [pc, #768]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2203      	movs	r2, #3
 800385e:	4013      	ands	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b10      	cmp	r3, #16
 8003866:	d102      	bne.n	800386e <HAL_RCC_OscConfig+0x3e>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d002      	beq.n	8003874 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4bb9      	ldr	r3, [pc, #740]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	029b      	lsls	r3, r3, #10
 800387c:	4013      	ands	r3, r2
 800387e:	d062      	beq.n	8003946 <HAL_RCC_OscConfig+0x116>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d15e      	bne.n	8003946 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e2ce      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	025b      	lsls	r3, r3, #9
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x78>
 8003898:	4bb0      	ldr	r3, [pc, #704]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4baf      	ldr	r3, [pc, #700]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0249      	lsls	r1, r1, #9
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e020      	b.n	80038ea <HAL_RCC_OscConfig+0xba>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	02db      	lsls	r3, r3, #11
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10e      	bne.n	80038d2 <HAL_RCC_OscConfig+0xa2>
 80038b4:	4ba9      	ldr	r3, [pc, #676]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4ba8      	ldr	r3, [pc, #672]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	02c9      	lsls	r1, r1, #11
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	4ba6      	ldr	r3, [pc, #664]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4ba5      	ldr	r3, [pc, #660]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	0249      	lsls	r1, r1, #9
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e00b      	b.n	80038ea <HAL_RCC_OscConfig+0xba>
 80038d2:	4ba2      	ldr	r3, [pc, #648]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4ba1      	ldr	r3, [pc, #644]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038d8:	49a1      	ldr	r1, [pc, #644]	; (8003b60 <HAL_RCC_OscConfig+0x330>)
 80038da:	400a      	ands	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	4b9f      	ldr	r3, [pc, #636]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b9e      	ldr	r3, [pc, #632]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80038e4:	499f      	ldr	r1, [pc, #636]	; (8003b64 <HAL_RCC_OscConfig+0x334>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d014      	beq.n	800391c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe ff8b 	bl	800280c <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fe ff86 	bl	800280c <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e28d      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390e:	4b93      	ldr	r3, [pc, #588]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	029b      	lsls	r3, r3, #10
 8003916:	4013      	ands	r3, r2
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0xcc>
 800391a:	e015      	b.n	8003948 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe ff76 	bl	800280c <HAL_GetTick>
 8003920:	0003      	movs	r3, r0
 8003922:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003926:	f7fe ff71 	bl	800280c <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	; 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e278      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003938:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0xf6>
 8003944:	e000      	b.n	8003948 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003946:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d100      	bne.n	8003954 <HAL_RCC_OscConfig+0x124>
 8003952:	e099      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003954:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2238      	movs	r2, #56	; 0x38
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395e:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2203      	movs	r2, #3
 8003964:	4013      	ands	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d102      	bne.n	8003974 <HAL_RCC_OscConfig+0x144>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d002      	beq.n	800397a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d135      	bne.n	80039e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397a:	4b78      	ldr	r3, [pc, #480]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4013      	ands	r3, r2
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x162>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e24b      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b72      	ldr	r3, [pc, #456]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4a74      	ldr	r2, [pc, #464]	; (8003b68 <HAL_RCC_OscConfig+0x338>)
 8003998:	4013      	ands	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	4b6e      	ldr	r3, [pc, #440]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039ae:	4b6b      	ldr	r3, [pc, #428]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x33c>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80039c2:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0adb      	lsrs	r3, r3, #11
 80039c8:	2207      	movs	r2, #7
 80039ca:	4013      	ands	r3, r2
 80039cc:	4a68      	ldr	r2, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x340>)
 80039ce:	40da      	lsrs	r2, r3
 80039d0:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <HAL_RCC_OscConfig+0x344>)
 80039d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x348>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fe febb 	bl	8002754 <HAL_InitTick>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d051      	beq.n	8003a86 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e221      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d030      	beq.n	8003a50 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x33c>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	0019      	movs	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a02:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0049      	lsls	r1, r1, #1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe fefc 	bl	800280c <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1a:	f7fe fef7 	bl	800280c <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1fe      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4013      	ands	r3, r2
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a38:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a4a      	ldr	r2, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x338>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a56:	4949      	ldr	r1, [pc, #292]	; (8003b7c <HAL_RCC_OscConfig+0x34c>)
 8003a58:	400a      	ands	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fed6 	bl	800280c <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7fe fed1 	bl	800280c <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1d8      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a78:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x236>
 8003a84:	e000      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d047      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2238      	movs	r2, #56	; 0x38
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b18      	cmp	r3, #24
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d03c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d138      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e1ba      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d019      	beq.n	8003af0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fea0 	bl	800280c <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fe9b 	bl	800280c <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a2      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d0f1      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2a2>
 8003aee:	e018      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003af6:	2101      	movs	r1, #1
 8003af8:	438a      	bics	r2, r1
 8003afa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fe86 	bl	800280c <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fe fe81 	bl	800280c <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e188      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d1f1      	bne.n	8003b06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2204      	movs	r2, #4
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2fe>
 8003b2c:	e0c6      	b.n	8003cbc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	231f      	movs	r3, #31
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2238      	movs	r2, #56	; 0x38
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d11e      	bne.n	8003b80 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_OscConfig+0x32c>)
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	2202      	movs	r2, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <HAL_RCC_OscConfig+0x31e>
 8003b4c:	e0b6      	b.n	8003cbc <HAL_RCC_OscConfig+0x48c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d000      	beq.n	8003b58 <HAL_RCC_OscConfig+0x328>
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e166      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	fffeffff 	.word	0xfffeffff
 8003b64:	fffbffff 	.word	0xfffbffff
 8003b68:	ffff80ff 	.word	0xffff80ff
 8003b6c:	ffffc7ff 	.word	0xffffc7ff
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b80:	4bac      	ldr	r3, [pc, #688]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	055b      	lsls	r3, r3, #21
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x360>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x362>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d011      	beq.n	8003bba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	4ba7      	ldr	r3, [pc, #668]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9a:	4ba6      	ldr	r3, [pc, #664]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	0549      	lsls	r1, r1, #21
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ba4:	4ba3      	ldr	r3, [pc, #652]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	055b      	lsls	r3, r3, #21
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003bb2:	231f      	movs	r3, #31
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bba:	4b9f      	ldr	r3, [pc, #636]	; (8003e38 <HAL_RCC_OscConfig+0x608>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d11a      	bne.n	8003bfc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc6:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <HAL_RCC_OscConfig+0x608>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b9b      	ldr	r3, [pc, #620]	; (8003e38 <HAL_RCC_OscConfig+0x608>)
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	0049      	lsls	r1, r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fe1a 	bl	800280c <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fe fe15 	bl	800280c <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e11c      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf0:	4b91      	ldr	r3, [pc, #580]	; (8003e38 <HAL_RCC_OscConfig+0x608>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3e2>
 8003c04:	4b8b      	ldr	r3, [pc, #556]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c08:	4b8a      	ldr	r3, [pc, #552]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x41c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x404>
 8003c1a:	4b86      	ldr	r3, [pc, #536]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c20:	2104      	movs	r1, #4
 8003c22:	430a      	orrs	r2, r1
 8003c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c26:	4b83      	ldr	r3, [pc, #524]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x41c>
 8003c34:	4b7f      	ldr	r3, [pc, #508]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	438a      	bics	r2, r1
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c40:	4b7c      	ldr	r3, [pc, #496]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c46:	2104      	movs	r1, #4
 8003c48:	438a      	bics	r2, r1
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d014      	beq.n	8003c7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fdda 	bl	800280c <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5c:	e009      	b.n	8003c72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe fdd5 	bl	800280c <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	4a74      	ldr	r2, [pc, #464]	; (8003e3c <HAL_RCC_OscConfig+0x60c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0db      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	2202      	movs	r2, #2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x42e>
 8003c7c:	e013      	b.n	8003ca6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fdc5 	bl	800280c <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c86:	e009      	b.n	8003c9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fdc0 	bl	800280c <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <HAL_RCC_OscConfig+0x60c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0c6      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ca6:	231f      	movs	r3, #31
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b60      	ldr	r3, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb4:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003cb6:	4962      	ldr	r1, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x610>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d100      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x496>
 8003cc4:	e0b0      	b.n	8003e28 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2238      	movs	r2, #56	; 0x38
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d100      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4a4>
 8003cd2:	e078      	b.n	8003dc6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d153      	bne.n	8003d84 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b55      	ldr	r3, [pc, #340]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003ce2:	4958      	ldr	r1, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x614>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fd90 	bl	800280c <HAL_GetTick>
 8003cec:	0003      	movs	r3, r0
 8003cee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fe fd8b 	bl	800280c <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e092      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	049b      	lsls	r3, r3, #18
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d1f0      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d10:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	; (8003e48 <HAL_RCC_OscConfig+0x618>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	431a      	orrs	r2, r3
 8003d38:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0449      	lsls	r1, r1, #17
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d4c:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	0549      	lsls	r1, r1, #21
 8003d56:	430a      	orrs	r2, r1
 8003d58:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fd57 	bl	800280c <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fd52 	bl	800280c <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e059      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	049b      	lsls	r3, r3, #18
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x534>
 8003d82:	e051      	b.n	8003e28 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003d8a:	492e      	ldr	r1, [pc, #184]	; (8003e44 <HAL_RCC_OscConfig+0x614>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd3c 	bl	800280c <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe fd37 	bl	800280c <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e03e      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	049b      	lsls	r3, r3, #18
 8003db4:	4013      	ands	r3, r2
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003dbe:	4923      	ldr	r1, [pc, #140]	; (8003e4c <HAL_RCC_OscConfig+0x61c>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	e030      	b.n	8003e28 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e02b      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x604>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2203      	movs	r2, #3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d11e      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2270      	movs	r2, #112	; 0x70
 8003dea:	401a      	ands	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d117      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	23fe      	movs	r3, #254	; 0xfe
 8003df8:	01db      	lsls	r3, r3, #7
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d10e      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	23f8      	movs	r3, #248	; 0xf8
 8003e0a:	039b      	lsls	r3, r3, #14
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	0f5b      	lsrs	r3, r3, #29
 8003e1a:	075a      	lsls	r2, r3, #29
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b008      	add	sp, #32
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	00001388 	.word	0x00001388
 8003e40:	efffffff 	.word	0xefffffff
 8003e44:	feffffff 	.word	0xfeffffff
 8003e48:	1fc1808c 	.word	0x1fc1808c
 8003e4c:	effefffc 	.word	0xeffefffc

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0e9      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b76      	ldr	r3, [pc, #472]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2207      	movs	r2, #7
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d91e      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2207      	movs	r2, #7
 8003e78:	4393      	bics	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e84:	f7fe fcc2 	bl	800280c <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8e:	f7fe fcbd 	bl	800280c <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	4a6a      	ldr	r2, [pc, #424]	; (8004044 <HAL_RCC_ClockConfig+0x1f4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0ca      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ea2:	4b67      	ldr	r3, [pc, #412]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2207      	movs	r2, #7
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d1ee      	bne.n	8003e8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d015      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d006      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ec4:	4b60      	ldr	r3, [pc, #384]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003eca:	21e0      	movs	r1, #224	; 0xe0
 8003ecc:	01c9      	lsls	r1, r1, #7
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_RCC_ClockConfig+0x1fc>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2201      	movs	r2, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	d057      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	029b      	lsls	r3, r3, #10
 8003f00:	4013      	ands	r3, r2
 8003f02:	d12b      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e097      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	049b      	lsls	r3, r3, #18
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d11f      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e08b      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f28:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4013      	ands	r3, r2
 8003f32:	d113      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e07f      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f40:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	2202      	movs	r2, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	d108      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e074      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	2202      	movs	r2, #2
 8003f54:	4013      	ands	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e06d      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2207      	movs	r2, #7
 8003f62:	4393      	bics	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fe fc4c 	bl	800280c <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f78:	e009      	b.n	8003f8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7a:	f7fe fc47 	bl	800280c <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <HAL_RCC_ClockConfig+0x1f4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e054      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2238      	movs	r2, #56	; 0x38
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1ec      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b27      	ldr	r3, [pc, #156]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d21e      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2207      	movs	r2, #7
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fc24 	bl	800280c <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fc8:	e009      	b.n	8003fde <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fca:	f7fe fc1f 	bl	800280c <HAL_GetTick>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_RCC_ClockConfig+0x1f4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e02c      	b.n	8004038 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_RCC_ClockConfig+0x200>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	0019      	movs	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800400a:	f000 f829 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800400e:	0001      	movs	r1, r0
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCC_ClockConfig+0x1f8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	220f      	movs	r2, #15
 8004018:	401a      	ands	r2, r3
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_RCC_ClockConfig+0x204>)
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	58d3      	ldr	r3, [r2, r3]
 8004020:	221f      	movs	r2, #31
 8004022:	4013      	ands	r3, r2
 8004024:	000a      	movs	r2, r1
 8004026:	40da      	lsrs	r2, r3
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_ClockConfig+0x208>)
 800402a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x20c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0018      	movs	r0, r3
 8004032:	f7fe fb8f 	bl	8002754 <HAL_InitTick>
 8004036:	0003      	movs	r3, r0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b004      	add	sp, #16
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40022000 	.word	0x40022000
 8004044:	00001388 	.word	0x00001388
 8004048:	40021000 	.word	0x40021000
 800404c:	fffff0ff 	.word	0xfffff0ff
 8004050:	ffff8fff 	.word	0xffff8fff
 8004054:	08005ae0 	.word	0x08005ae0
 8004058:	20000000 	.word	0x20000000
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004066:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2238      	movs	r2, #56	; 0x38
 800406c:	4013      	ands	r3, r2
 800406e:	d10f      	bne.n	8004090 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0adb      	lsrs	r3, r3, #11
 8004076:	2207      	movs	r2, #7
 8004078:	4013      	ands	r3, r2
 800407a:	2201      	movs	r2, #1
 800407c:	409a      	lsls	r2, r3
 800407e:	0013      	movs	r3, r2
 8004080:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	4835      	ldr	r0, [pc, #212]	; (800415c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004086:	f7fc f845 	bl	8000114 <__udivsi3>
 800408a:	0003      	movs	r3, r0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	e05d      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2238      	movs	r2, #56	; 0x38
 8004096:	4013      	ands	r3, r2
 8004098:	2b08      	cmp	r3, #8
 800409a:	d102      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800409c:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_RCC_GetSysClockFreq+0x100>)
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	e054      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a2:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2238      	movs	r2, #56	; 0x38
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d138      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2203      	movs	r2, #3
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	2207      	movs	r2, #7
 80040c0:	4013      	ands	r3, r2
 80040c2:	3301      	adds	r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d10d      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4824      	ldr	r0, [pc, #144]	; (8004160 <HAL_RCC_GetSysClockFreq+0x100>)
 80040d0:	f7fc f820 	bl	8000114 <__udivsi3>
 80040d4:	0003      	movs	r3, r0
 80040d6:	0019      	movs	r1, r3
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	227f      	movs	r2, #127	; 0x7f
 80040e0:	4013      	ands	r3, r2
 80040e2:	434b      	muls	r3, r1
 80040e4:	617b      	str	r3, [r7, #20]
        break;
 80040e6:	e00d      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	481c      	ldr	r0, [pc, #112]	; (800415c <HAL_RCC_GetSysClockFreq+0xfc>)
 80040ec:	f7fc f812 	bl	8000114 <__udivsi3>
 80040f0:	0003      	movs	r3, r0
 80040f2:	0019      	movs	r1, r3
 80040f4:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	227f      	movs	r2, #127	; 0x7f
 80040fc:	4013      	ands	r3, r2
 80040fe:	434b      	muls	r3, r1
 8004100:	617b      	str	r3, [r7, #20]
        break;
 8004102:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0f5b      	lsrs	r3, r3, #29
 800410a:	2207      	movs	r2, #7
 800410c:	4013      	ands	r3, r2
 800410e:	3301      	adds	r3, #1
 8004110:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	6978      	ldr	r0, [r7, #20]
 8004116:	f7fb fffd 	bl	8000114 <__udivsi3>
 800411a:	0003      	movs	r3, r0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e015      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2238      	movs	r2, #56	; 0x38
 8004126:	4013      	ands	r3, r2
 8004128:	2b20      	cmp	r3, #32
 800412a:	d103      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	e00b      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2238      	movs	r2, #56	; 0x38
 800413a:	4013      	ands	r3, r2
 800413c:	2b18      	cmp	r3, #24
 800413e:	d103      	bne.n	8004148 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004140:	23fa      	movs	r3, #250	; 0xfa
 8004142:	01db      	lsls	r3, r3, #7
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	e001      	b.n	800414c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800414c:	693b      	ldr	r3, [r7, #16]
}
 800414e:	0018      	movs	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	b006      	add	sp, #24
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	00f42400 	.word	0x00f42400
 8004160:	007a1200 	.word	0x007a1200

08004164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0a8      	b.n	80042c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2382      	movs	r3, #130	; 0x82
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	429a      	cmp	r2, r3
 8004188:	d009      	beq.n	800419e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	61da      	str	r2, [r3, #28]
 8004190:	e005      	b.n	800419e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	225d      	movs	r2, #93	; 0x5d
 80041a8:	5c9b      	ldrb	r3, [r3, r2]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	225c      	movs	r2, #92	; 0x5c
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fd ffbe 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	225d      	movs	r2, #93	; 0x5d
 80041c4:	2102      	movs	r1, #2
 80041c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	438a      	bics	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	23e0      	movs	r3, #224	; 0xe0
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e002      	b.n	80041f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	015b      	lsls	r3, r3, #5
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	23f0      	movs	r3, #240	; 0xf0
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d008      	beq.n	800420e <HAL_SPI_Init+0xaa>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	23e0      	movs	r3, #224	; 0xe0
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	429a      	cmp	r2, r3
 8004206:	d002      	beq.n	800420e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	2382      	movs	r3, #130	; 0x82
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	401a      	ands	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	2384      	movs	r3, #132	; 0x84
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	400b      	ands	r3, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2102      	movs	r1, #2
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2101      	movs	r1, #1
 8004234:	400b      	ands	r3, r1
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6999      	ldr	r1, [r3, #24]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	400b      	ands	r3, r1
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2138      	movs	r1, #56	; 0x38
 800424a:	400b      	ands	r3, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	400b      	ands	r3, r1
 8004256:	431a      	orrs	r2, r3
 8004258:	0011      	movs	r1, r2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	401a      	ands	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	2204      	movs	r2, #4
 8004274:	401a      	ands	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2110      	movs	r1, #16
 800427c:	400b      	ands	r3, r1
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	2108      	movs	r1, #8
 8004286:	400b      	ands	r3, r1
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68d9      	ldr	r1, [r3, #12]
 800428e:	23f0      	movs	r3, #240	; 0xf0
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	400b      	ands	r3, r1
 8004294:	431a      	orrs	r2, r3
 8004296:	0011      	movs	r1, r2
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	015b      	lsls	r3, r3, #5
 800429e:	401a      	ands	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4907      	ldr	r1, [pc, #28]	; (80042d0 <HAL_SPI_Init+0x16c>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	225d      	movs	r2, #93	; 0x5d
 80042c2:	2101      	movs	r1, #1
 80042c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	fffff7ff 	.word	0xfffff7ff

080042d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042e4:	231f      	movs	r3, #31
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	225c      	movs	r2, #92	; 0x5c
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Transmit+0x26>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e140      	b.n	800457c <HAL_SPI_Transmit+0x2a8>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	225c      	movs	r2, #92	; 0x5c
 80042fe:	2101      	movs	r1, #1
 8004300:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004302:	f7fe fa83 	bl	800280c <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800430a:	2316      	movs	r3, #22
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	1dba      	adds	r2, r7, #6
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	225d      	movs	r2, #93	; 0x5d
 8004318:	5c9b      	ldrb	r3, [r3, r2]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d004      	beq.n	800432a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004320:	231f      	movs	r3, #31
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]
    goto error;
 8004328:	e11d      	b.n	8004566 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_SPI_Transmit+0x64>
 8004330:	1dbb      	adds	r3, r7, #6
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004338:	231f      	movs	r3, #31
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004340:	e111      	b.n	8004566 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	225d      	movs	r2, #93	; 0x5d
 8004346:	2103      	movs	r1, #3
 8004348:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1dba      	adds	r2, r7, #6
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1dba      	adds	r2, r7, #6
 8004362:	8812      	ldrh	r2, [r2, #0]
 8004364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2244      	movs	r2, #68	; 0x44
 8004370:	2100      	movs	r1, #0
 8004372:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2246      	movs	r2, #70	; 0x46
 8004378:	2100      	movs	r1, #0
 800437a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	429a      	cmp	r2, r3
 8004392:	d110      	bne.n	80043b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2140      	movs	r1, #64	; 0x40
 80043a0:	438a      	bics	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	01c9      	lsls	r1, r1, #7
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	4013      	ands	r3, r2
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d007      	beq.n	80043d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2140      	movs	r1, #64	; 0x40
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	23e0      	movs	r3, #224	; 0xe0
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	429a      	cmp	r2, r3
 80043de:	d94e      	bls.n	800447e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_SPI_Transmit+0x11e>
 80043e8:	2316      	movs	r3, #22
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d13f      	bne.n	8004472 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004416:	e02c      	b.n	8004472 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2202      	movs	r2, #2
 8004420:	4013      	ands	r3, r2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d112      	bne.n	800444c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c9a      	adds	r2, r3, #2
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444a:	e012      	b.n	8004472 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800444c:	f7fe f9de 	bl	800280c <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d802      	bhi.n	8004462 <HAL_SPI_Transmit+0x18e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	d102      	bne.n	8004468 <HAL_SPI_Transmit+0x194>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004468:	231f      	movs	r3, #31
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2203      	movs	r2, #3
 800446e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004470:	e079      	b.n	8004566 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1cd      	bne.n	8004418 <HAL_SPI_Transmit+0x144>
 800447c:	e04f      	b.n	800451e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_SPI_Transmit+0x1bc>
 8004486:	2316      	movs	r3, #22
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d141      	bne.n	8004514 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80044b6:	e02d      	b.n	8004514 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2202      	movs	r2, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d113      	bne.n	80044ee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ec:	e012      	b.n	8004514 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ee:	f7fe f98d 	bl	800280c <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d802      	bhi.n	8004504 <HAL_SPI_Transmit+0x230>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	d102      	bne.n	800450a <HAL_SPI_Transmit+0x236>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800450a:	231f      	movs	r3, #31
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2203      	movs	r2, #3
 8004510:	701a      	strb	r2, [r3, #0]
          goto error;
 8004512:	e028      	b.n	8004566 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cc      	bne.n	80044b8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 fcd9 	bl	8004edc <SPI_EndRxTxTransaction>
 800452a:	1e03      	subs	r3, r0, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800455a:	231f      	movs	r3, #31
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e000      	b.n	8004566 <HAL_SPI_Transmit+0x292>
  }

error:
 8004564:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	225d      	movs	r2, #93	; 0x5d
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	225c      	movs	r2, #92	; 0x5c
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004576:	231f      	movs	r3, #31
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	781b      	ldrb	r3, [r3, #0]
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b008      	add	sp, #32
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	1dbb      	adds	r3, r7, #6
 8004592:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004594:	2317      	movs	r3, #23
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	2382      	movs	r3, #130	; 0x82
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d113      	bne.n	80045d0 <HAL_SPI_Receive+0x4c>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	225d      	movs	r2, #93	; 0x5d
 80045b4:	2104      	movs	r1, #4
 80045b6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045b8:	1dbb      	adds	r3, r7, #6
 80045ba:	881c      	ldrh	r4, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	0023      	movs	r3, r4
 80045c8:	f000 f928 	bl	800481c <HAL_SPI_TransmitReceive>
 80045cc:	0003      	movs	r3, r0
 80045ce:	e11c      	b.n	800480a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	225c      	movs	r2, #92	; 0x5c
 80045d4:	5c9b      	ldrb	r3, [r3, r2]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_SPI_Receive+0x5a>
 80045da:	2302      	movs	r3, #2
 80045dc:	e115      	b.n	800480a <HAL_SPI_Receive+0x286>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	225c      	movs	r2, #92	; 0x5c
 80045e2:	2101      	movs	r1, #1
 80045e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e6:	f7fe f911 	bl	800280c <HAL_GetTick>
 80045ea:	0003      	movs	r3, r0
 80045ec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	225d      	movs	r2, #93	; 0x5d
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d004      	beq.n	8004604 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80045fa:	2317      	movs	r3, #23
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	2202      	movs	r2, #2
 8004600:	701a      	strb	r2, [r3, #0]
    goto error;
 8004602:	e0f7      	b.n	80047f4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_SPI_Receive+0x8e>
 800460a:	1dbb      	adds	r3, r7, #6
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004612:	2317      	movs	r3, #23
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
    goto error;
 800461a:	e0eb      	b.n	80047f4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	225d      	movs	r2, #93	; 0x5d
 8004620:	2104      	movs	r1, #4
 8004622:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1dba      	adds	r2, r7, #6
 8004634:	2144      	movs	r1, #68	; 0x44
 8004636:	8812      	ldrh	r2, [r2, #0]
 8004638:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1dba      	adds	r2, r7, #6
 800463e:	2146      	movs	r1, #70	; 0x46
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	23e0      	movs	r3, #224	; 0xe0
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	429a      	cmp	r2, r3
 800466c:	d908      	bls.n	8004680 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4966      	ldr	r1, [pc, #408]	; (8004814 <HAL_SPI_Receive+0x290>)
 800467a:	400a      	ands	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	e008      	b.n	8004692 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	0149      	lsls	r1, r1, #5
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	429a      	cmp	r2, r3
 800469c:	d10f      	bne.n	80046be <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2140      	movs	r1, #64	; 0x40
 80046aa:	438a      	bics	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4957      	ldr	r1, [pc, #348]	; (8004818 <HAL_SPI_Receive+0x294>)
 80046ba:	400a      	ands	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2240      	movs	r2, #64	; 0x40
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2140      	movs	r1, #64	; 0x40
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	23e0      	movs	r3, #224	; 0xe0
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d900      	bls.n	80046ea <HAL_SPI_Receive+0x166>
 80046e8:	e069      	b.n	80047be <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046ea:	e031      	b.n	8004750 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2201      	movs	r2, #1
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d117      	bne.n	800472a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	001a      	movs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2246      	movs	r2, #70	; 0x46
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b299      	uxth	r1, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2246      	movs	r2, #70	; 0x46
 8004726:	5299      	strh	r1, [r3, r2]
 8004728:	e012      	b.n	8004750 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fe f86f 	bl	800280c <HAL_GetTick>
 800472e:	0002      	movs	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d802      	bhi.n	8004740 <HAL_SPI_Receive+0x1bc>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	d102      	bne.n	8004746 <HAL_SPI_Receive+0x1c2>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004746:	2317      	movs	r3, #23
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2203      	movs	r2, #3
 800474c:	701a      	strb	r2, [r3, #0]
          goto error;
 800474e:	e051      	b.n	80047f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2246      	movs	r2, #70	; 0x46
 8004754:	5a9b      	ldrh	r3, [r3, r2]
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1c7      	bne.n	80046ec <HAL_SPI_Receive+0x168>
 800475c:	e035      	b.n	80047ca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2201      	movs	r2, #1
 8004766:	4013      	ands	r3, r2
 8004768:	2b01      	cmp	r3, #1
 800476a:	d115      	bne.n	8004798 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	b292      	uxth	r2, r2
 8004778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	1c9a      	adds	r2, r3, #2
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2246      	movs	r2, #70	; 0x46
 8004788:	5a9b      	ldrh	r3, [r3, r2]
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b299      	uxth	r1, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2246      	movs	r2, #70	; 0x46
 8004794:	5299      	strh	r1, [r3, r2]
 8004796:	e012      	b.n	80047be <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004798:	f7fe f838 	bl	800280c <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d802      	bhi.n	80047ae <HAL_SPI_Receive+0x22a>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_SPI_Receive+0x230>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80047b4:	2317      	movs	r3, #23
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	2203      	movs	r2, #3
 80047ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80047bc:	e01a      	b.n	80047f4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2246      	movs	r2, #70	; 0x46
 80047c2:	5a9b      	ldrh	r3, [r3, r2]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1c9      	bne.n	800475e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fb25 	bl	8004e20 <SPI_EndRxTransaction>
 80047d6:	1e03      	subs	r3, r0, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80047e8:	2317      	movs	r3, #23
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e000      	b.n	80047f4 <HAL_SPI_Receive+0x270>
  }

error :
 80047f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	225d      	movs	r2, #93	; 0x5d
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	225c      	movs	r2, #92	; 0x5c
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004804:	2317      	movs	r3, #23
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b007      	add	sp, #28
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	ffffefff 	.word	0xffffefff
 8004818:	ffffbfff 	.word	0xffffbfff

0800481c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	001a      	movs	r2, r3
 800482a:	1cbb      	adds	r3, r7, #2
 800482c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800482e:	2301      	movs	r3, #1
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004832:	2323      	movs	r3, #35	; 0x23
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	225c      	movs	r2, #92	; 0x5c
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x2c>
 8004844:	2302      	movs	r3, #2
 8004846:	e1b5      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x398>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	225c      	movs	r2, #92	; 0x5c
 800484c:	2101      	movs	r1, #1
 800484e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004850:	f7fd ffdc 	bl	800280c <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004858:	201b      	movs	r0, #27
 800485a:	183b      	adds	r3, r7, r0
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	215d      	movs	r1, #93	; 0x5d
 8004860:	5c52      	ldrb	r2, [r2, r1]
 8004862:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800486a:	2312      	movs	r3, #18
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	1cba      	adds	r2, r7, #2
 8004870:	8812      	ldrh	r2, [r2, #0]
 8004872:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004874:	183b      	adds	r3, r7, r0
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d011      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x84>
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	2382      	movs	r3, #130	; 0x82
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	429a      	cmp	r2, r3
 8004884:	d107      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x7a>
 800488e:	183b      	adds	r3, r7, r0
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d004      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004896:	2323      	movs	r3, #35	; 0x23
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2202      	movs	r2, #2
 800489c:	701a      	strb	r2, [r3, #0]
    goto error;
 800489e:	e17e      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x98>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x98>
 80048ac:	1cbb      	adds	r3, r7, #2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80048b4:	2323      	movs	r3, #35	; 0x23
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80048bc:	e16f      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	225d      	movs	r2, #93	; 0x5d
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d003      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	225d      	movs	r2, #93	; 0x5d
 80048ce:	2105      	movs	r1, #5
 80048d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1cba      	adds	r2, r7, #2
 80048e2:	2146      	movs	r1, #70	; 0x46
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1cba      	adds	r2, r7, #2
 80048ec:	2144      	movs	r1, #68	; 0x44
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1cba      	adds	r2, r7, #2
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1cba      	adds	r2, r7, #2
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	23e0      	movs	r3, #224	; 0xe0
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	429a      	cmp	r2, r3
 800491e:	d908      	bls.n	8004932 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	49a4      	ldr	r1, [pc, #656]	; (8004bbc <HAL_SPI_TransmitReceive+0x3a0>)
 800492c:	400a      	ands	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e008      	b.n	8004944 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	0149      	lsls	r1, r1, #5
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	4013      	ands	r3, r2
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d007      	beq.n	8004962 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2140      	movs	r1, #64	; 0x40
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	23e0      	movs	r3, #224	; 0xe0
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	429a      	cmp	r2, r3
 800496c:	d800      	bhi.n	8004970 <HAL_SPI_TransmitReceive+0x154>
 800496e:	e07f      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x168>
 8004978:	2312      	movs	r3, #18
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d000      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x168>
 8004982:	e069      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a8:	e056      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2202      	movs	r2, #2
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d11b      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x1d4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x1d4>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d113      	bne.n	80049f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2201      	movs	r2, #1
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d11c      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x21c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2246      	movs	r2, #70	; 0x46
 8004a02:	5a9b      	ldrh	r3, [r3, r2]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	b292      	uxth	r2, r2
 8004a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2246      	movs	r2, #70	; 0x46
 8004a26:	5a9b      	ldrh	r3, [r3, r2]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b299      	uxth	r1, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2246      	movs	r2, #70	; 0x46
 8004a32:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a34:	2301      	movs	r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a38:	f7fd fee8 	bl	800280c <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d807      	bhi.n	8004a58 <HAL_SPI_TransmitReceive+0x23c>
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	d004      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004a4e:	2323      	movs	r3, #35	; 0x23
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	2203      	movs	r2, #3
 8004a54:	701a      	strb	r2, [r3, #0]
        goto error;
 8004a56:	e0a2      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1a3      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x18e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2246      	movs	r2, #70	; 0x46
 8004a66:	5a9b      	ldrh	r3, [r3, r2]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d19d      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x18e>
 8004a6e:	e085      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x268>
 8004a78:	2312      	movs	r3, #18
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d000      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x268>
 8004a82:	e070      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aaa:	e05c      	b.n	8004b66 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d11c      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x2d8>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d017      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x2d8>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d114      	bne.n	8004af4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d11e      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x324>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2246      	movs	r2, #70	; 0x46
 8004b06:	5a9b      	ldrh	r3, [r3, r2]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	001a      	movs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2246      	movs	r2, #70	; 0x46
 8004b2e:	5a9b      	ldrh	r3, [r3, r2]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b299      	uxth	r1, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2246      	movs	r2, #70	; 0x46
 8004b3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b40:	f7fd fe64 	bl	800280c <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d802      	bhi.n	8004b56 <HAL_SPI_TransmitReceive+0x33a>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	3301      	adds	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x340>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004b5c:	2323      	movs	r3, #35	; 0x23
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2203      	movs	r2, #3
 8004b62:	701a      	strb	r2, [r3, #0]
        goto error;
 8004b64:	e01b      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d19d      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x290>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2246      	movs	r2, #70	; 0x46
 8004b74:	5a9b      	ldrh	r3, [r3, r2]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d197      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 f9aa 	bl	8004edc <SPI_EndRxTxTransaction>
 8004b88:	1e03      	subs	r3, r0, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004b8c:	2323      	movs	r3, #35	; 0x23
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	661a      	str	r2, [r3, #96]	; 0x60
 8004b9a:	e000      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004b9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	225d      	movs	r2, #93	; 0x5d
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	225c      	movs	r2, #92	; 0x5c
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004bae:	2323      	movs	r3, #35	; 0x23
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	781b      	ldrb	r3, [r3, #0]
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b00a      	add	sp, #40	; 0x28
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	ffffefff 	.word	0xffffefff

08004bc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd0:	f7fd fe1c 	bl	800280c <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be0:	f7fd fe14 	bl	800280c <HAL_GetTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	015b      	lsls	r3, r3, #5
 8004bee:	0d1b      	lsrs	r3, r3, #20
 8004bf0:	69fa      	ldr	r2, [r7, #28]
 8004bf2:	4353      	muls	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	e058      	b.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	d055      	beq.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bfe:	f7fd fe05 	bl	800280c <HAL_GetTick>
 8004c02:	0002      	movs	r2, r0
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d902      	bls.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d142      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	21e0      	movs	r1, #224	; 0xe0
 8004c20:	438a      	bics	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	2382      	movs	r3, #130	; 0x82
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d113      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d005      	beq.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2140      	movs	r1, #64	; 0x40
 8004c54:	438a      	bics	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	019b      	lsls	r3, r3, #6
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d110      	bne.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	491a      	ldr	r1, [pc, #104]	; (8004cd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	0189      	lsls	r1, r1, #6
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	225d      	movs	r2, #93	; 0x5d
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	225c      	movs	r2, #92	; 0x5c
 8004c92:	2100      	movs	r1, #0
 8004c94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e017      	b.n	8004cca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	425a      	negs	r2, r3
 8004cba:	4153      	adcs	r3, r2
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	1dfb      	adds	r3, r7, #7
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d197      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b008      	add	sp, #32
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	ffffdfff 	.word	0xffffdfff

08004cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cea:	2317      	movs	r3, #23
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cf2:	f7fd fd8b 	bl	800280c <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	18d3      	adds	r3, r2, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004d02:	f7fd fd83 	bl	800280c <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	0013      	movs	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	00da      	lsls	r2, r3, #3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	4353      	muls	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d28:	e068      	b.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	23c0      	movs	r3, #192	; 0xc0
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d10a      	bne.n	8004d4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	2117      	movs	r1, #23
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d46:	187b      	adds	r3, r7, r1
 8004d48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	d055      	beq.n	8004dfc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d50:	f7fd fd5c 	bl	800280c <HAL_GetTick>
 8004d54:	0002      	movs	r2, r0
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d902      	bls.n	8004d66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d142      	bne.n	8004dec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	21e0      	movs	r1, #224	; 0xe0
 8004d72:	438a      	bics	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	2382      	movs	r3, #130	; 0x82
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d113      	bne.n	8004daa <SPI_WaitFifoStateUntilTimeout+0xce>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d005      	beq.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d107      	bne.n	8004daa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	438a      	bics	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d110      	bne.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4916      	ldr	r1, [pc, #88]	; (8004e1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0189      	lsls	r1, r1, #6
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	225d      	movs	r2, #93	; 0x5d
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	225c      	movs	r2, #92	; 0x5c
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e010      	b.n	8004e0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d18e      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b00a      	add	sp, #40	; 0x28
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	ffffdfff 	.word	0xffffdfff

08004e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	2382      	movs	r3, #130	; 0x82
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d113      	bne.n	8004e60 <SPI_EndRxTransaction+0x40>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d005      	beq.n	8004e50 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	438a      	bics	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	0013      	movs	r3, r2
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	f7ff fea7 	bl	8004bc0 <SPI_WaitFlagStateUntilTimeout>
 8004e72:	1e03      	subs	r3, r0, #0
 8004e74:	d007      	beq.n	8004e86 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e026      	b.n	8004ed4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	2382      	movs	r3, #130	; 0x82
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d11f      	bne.n	8004ed2 <SPI_EndRxTransaction+0xb2>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d005      	beq.n	8004eaa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d113      	bne.n	8004ed2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	23c0      	movs	r3, #192	; 0xc0
 8004eae:	00d9      	lsls	r1, r3, #3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	0013      	movs	r3, r2
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f7ff ff0f 	bl	8004cdc <SPI_WaitFifoStateUntilTimeout>
 8004ebe:	1e03      	subs	r3, r0, #0
 8004ec0:	d007      	beq.n	8004ed2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e000      	b.n	8004ed4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	23c0      	movs	r3, #192	; 0xc0
 8004eec:	0159      	lsls	r1, r3, #5
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	0013      	movs	r3, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f7ff fef0 	bl	8004cdc <SPI_WaitFifoStateUntilTimeout>
 8004efc:	1e03      	subs	r3, r0, #0
 8004efe:	d007      	beq.n	8004f10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f04:	2220      	movs	r2, #32
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e027      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	0013      	movs	r3, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	f7ff fe4f 	bl	8004bc0 <SPI_WaitFlagStateUntilTimeout>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d007      	beq.n	8004f36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e014      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	23c0      	movs	r3, #192	; 0xc0
 8004f3a:	00d9      	lsls	r1, r3, #3
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	0013      	movs	r3, r2
 8004f44:	2200      	movs	r2, #0
 8004f46:	f7ff fec9 	bl	8004cdc <SPI_WaitFifoStateUntilTimeout>
 8004f4a:	1e03      	subs	r3, r0, #0
 8004f4c:	d007      	beq.n	8004f5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	2220      	movs	r2, #32
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e000      	b.n	8004f60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <__errno>:
 8004f68:	4b01      	ldr	r3, [pc, #4]	; (8004f70 <__errno+0x8>)
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	4770      	bx	lr
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	2000000c 	.word	0x2000000c

08004f74 <__libc_init_array>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	2600      	movs	r6, #0
 8004f78:	4d0c      	ldr	r5, [pc, #48]	; (8004fac <__libc_init_array+0x38>)
 8004f7a:	4c0d      	ldr	r4, [pc, #52]	; (8004fb0 <__libc_init_array+0x3c>)
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	42a6      	cmp	r6, r4
 8004f82:	d109      	bne.n	8004f98 <__libc_init_array+0x24>
 8004f84:	2600      	movs	r6, #0
 8004f86:	f000 fc8b 	bl	80058a0 <_init>
 8004f8a:	4d0a      	ldr	r5, [pc, #40]	; (8004fb4 <__libc_init_array+0x40>)
 8004f8c:	4c0a      	ldr	r4, [pc, #40]	; (8004fb8 <__libc_init_array+0x44>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	42a6      	cmp	r6, r4
 8004f94:	d105      	bne.n	8004fa2 <__libc_init_array+0x2e>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	00b3      	lsls	r3, r6, #2
 8004f9a:	58eb      	ldr	r3, [r5, r3]
 8004f9c:	4798      	blx	r3
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7ee      	b.n	8004f80 <__libc_init_array+0xc>
 8004fa2:	00b3      	lsls	r3, r6, #2
 8004fa4:	58eb      	ldr	r3, [r5, r3]
 8004fa6:	4798      	blx	r3
 8004fa8:	3601      	adds	r6, #1
 8004faa:	e7f2      	b.n	8004f92 <__libc_init_array+0x1e>
 8004fac:	08005b5c 	.word	0x08005b5c
 8004fb0:	08005b5c 	.word	0x08005b5c
 8004fb4:	08005b5c 	.word	0x08005b5c
 8004fb8:	08005b60 	.word	0x08005b60

08004fbc <memcpy>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d100      	bne.n	8004fc6 <memcpy+0xa>
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	5ccc      	ldrb	r4, [r1, r3]
 8004fc8:	54c4      	strb	r4, [r0, r3]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	e7f8      	b.n	8004fc0 <memcpy+0x4>

08004fce <memset>:
 8004fce:	0003      	movs	r3, r0
 8004fd0:	1882      	adds	r2, r0, r2
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d100      	bne.n	8004fd8 <memset+0xa>
 8004fd6:	4770      	bx	lr
 8004fd8:	7019      	strb	r1, [r3, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	e7f9      	b.n	8004fd2 <memset+0x4>
	...

08004fe0 <siprintf>:
 8004fe0:	b40e      	push	{r1, r2, r3}
 8004fe2:	b500      	push	{lr}
 8004fe4:	490b      	ldr	r1, [pc, #44]	; (8005014 <siprintf+0x34>)
 8004fe6:	b09c      	sub	sp, #112	; 0x70
 8004fe8:	ab1d      	add	r3, sp, #116	; 0x74
 8004fea:	9002      	str	r0, [sp, #8]
 8004fec:	9006      	str	r0, [sp, #24]
 8004fee:	9107      	str	r1, [sp, #28]
 8004ff0:	9104      	str	r1, [sp, #16]
 8004ff2:	4809      	ldr	r0, [pc, #36]	; (8005018 <siprintf+0x38>)
 8004ff4:	4909      	ldr	r1, [pc, #36]	; (800501c <siprintf+0x3c>)
 8004ff6:	cb04      	ldmia	r3!, {r2}
 8004ff8:	9105      	str	r1, [sp, #20]
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	a902      	add	r1, sp, #8
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	f000 f870 	bl	80050e4 <_svfiprintf_r>
 8005004:	2300      	movs	r3, #0
 8005006:	9a02      	ldr	r2, [sp, #8]
 8005008:	7013      	strb	r3, [r2, #0]
 800500a:	b01c      	add	sp, #112	; 0x70
 800500c:	bc08      	pop	{r3}
 800500e:	b003      	add	sp, #12
 8005010:	4718      	bx	r3
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	7fffffff 	.word	0x7fffffff
 8005018:	2000000c 	.word	0x2000000c
 800501c:	ffff0208 	.word	0xffff0208

08005020 <__ssputs_r>:
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	688e      	ldr	r6, [r1, #8]
 8005024:	b085      	sub	sp, #20
 8005026:	0007      	movs	r7, r0
 8005028:	000c      	movs	r4, r1
 800502a:	9203      	str	r2, [sp, #12]
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	429e      	cmp	r6, r3
 8005030:	d83c      	bhi.n	80050ac <__ssputs_r+0x8c>
 8005032:	2390      	movs	r3, #144	; 0x90
 8005034:	898a      	ldrh	r2, [r1, #12]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	421a      	tst	r2, r3
 800503a:	d034      	beq.n	80050a6 <__ssputs_r+0x86>
 800503c:	6909      	ldr	r1, [r1, #16]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	6960      	ldr	r0, [r4, #20]
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	9302      	str	r3, [sp, #8]
 8005046:	2303      	movs	r3, #3
 8005048:	4343      	muls	r3, r0
 800504a:	0fdd      	lsrs	r5, r3, #31
 800504c:	18ed      	adds	r5, r5, r3
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	9802      	ldr	r0, [sp, #8]
 8005052:	3301      	adds	r3, #1
 8005054:	181b      	adds	r3, r3, r0
 8005056:	106d      	asrs	r5, r5, #1
 8005058:	42ab      	cmp	r3, r5
 800505a:	d900      	bls.n	800505e <__ssputs_r+0x3e>
 800505c:	001d      	movs	r5, r3
 800505e:	0553      	lsls	r3, r2, #21
 8005060:	d532      	bpl.n	80050c8 <__ssputs_r+0xa8>
 8005062:	0029      	movs	r1, r5
 8005064:	0038      	movs	r0, r7
 8005066:	f000 fb49 	bl	80056fc <_malloc_r>
 800506a:	1e06      	subs	r6, r0, #0
 800506c:	d109      	bne.n	8005082 <__ssputs_r+0x62>
 800506e:	230c      	movs	r3, #12
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	2001      	movs	r0, #1
 8005076:	89a2      	ldrh	r2, [r4, #12]
 8005078:	4240      	negs	r0, r0
 800507a:	4313      	orrs	r3, r2
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	b005      	add	sp, #20
 8005080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005082:	9a02      	ldr	r2, [sp, #8]
 8005084:	6921      	ldr	r1, [r4, #16]
 8005086:	f7ff ff99 	bl	8004fbc <memcpy>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <__ssputs_r+0xc0>)
 800508e:	401a      	ands	r2, r3
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	4313      	orrs	r3, r2
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	9b02      	ldr	r3, [sp, #8]
 8005098:	6126      	str	r6, [r4, #16]
 800509a:	18f6      	adds	r6, r6, r3
 800509c:	6026      	str	r6, [r4, #0]
 800509e:	6165      	str	r5, [r4, #20]
 80050a0:	9e01      	ldr	r6, [sp, #4]
 80050a2:	1aed      	subs	r5, r5, r3
 80050a4:	60a5      	str	r5, [r4, #8]
 80050a6:	9b01      	ldr	r3, [sp, #4]
 80050a8:	429e      	cmp	r6, r3
 80050aa:	d900      	bls.n	80050ae <__ssputs_r+0x8e>
 80050ac:	9e01      	ldr	r6, [sp, #4]
 80050ae:	0032      	movs	r2, r6
 80050b0:	9903      	ldr	r1, [sp, #12]
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	f000 faa3 	bl	80055fe <memmove>
 80050b8:	68a3      	ldr	r3, [r4, #8]
 80050ba:	2000      	movs	r0, #0
 80050bc:	1b9b      	subs	r3, r3, r6
 80050be:	60a3      	str	r3, [r4, #8]
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	199e      	adds	r6, r3, r6
 80050c4:	6026      	str	r6, [r4, #0]
 80050c6:	e7da      	b.n	800507e <__ssputs_r+0x5e>
 80050c8:	002a      	movs	r2, r5
 80050ca:	0038      	movs	r0, r7
 80050cc:	f000 fb8c 	bl	80057e8 <_realloc_r>
 80050d0:	1e06      	subs	r6, r0, #0
 80050d2:	d1e0      	bne.n	8005096 <__ssputs_r+0x76>
 80050d4:	0038      	movs	r0, r7
 80050d6:	6921      	ldr	r1, [r4, #16]
 80050d8:	f000 faa4 	bl	8005624 <_free_r>
 80050dc:	e7c7      	b.n	800506e <__ssputs_r+0x4e>
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	fffffb7f 	.word	0xfffffb7f

080050e4 <_svfiprintf_r>:
 80050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e6:	b0a1      	sub	sp, #132	; 0x84
 80050e8:	9003      	str	r0, [sp, #12]
 80050ea:	001d      	movs	r5, r3
 80050ec:	898b      	ldrh	r3, [r1, #12]
 80050ee:	000f      	movs	r7, r1
 80050f0:	0016      	movs	r6, r2
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	d511      	bpl.n	800511a <_svfiprintf_r+0x36>
 80050f6:	690b      	ldr	r3, [r1, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10e      	bne.n	800511a <_svfiprintf_r+0x36>
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	f000 fafd 	bl	80056fc <_malloc_r>
 8005102:	6038      	str	r0, [r7, #0]
 8005104:	6138      	str	r0, [r7, #16]
 8005106:	2800      	cmp	r0, #0
 8005108:	d105      	bne.n	8005116 <_svfiprintf_r+0x32>
 800510a:	230c      	movs	r3, #12
 800510c:	9a03      	ldr	r2, [sp, #12]
 800510e:	3801      	subs	r0, #1
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	b021      	add	sp, #132	; 0x84
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	2300      	movs	r3, #0
 800511c:	ac08      	add	r4, sp, #32
 800511e:	6163      	str	r3, [r4, #20]
 8005120:	3320      	adds	r3, #32
 8005122:	7663      	strb	r3, [r4, #25]
 8005124:	3310      	adds	r3, #16
 8005126:	76a3      	strb	r3, [r4, #26]
 8005128:	9507      	str	r5, [sp, #28]
 800512a:	0035      	movs	r5, r6
 800512c:	782b      	ldrb	r3, [r5, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <_svfiprintf_r+0x52>
 8005132:	2b25      	cmp	r3, #37	; 0x25
 8005134:	d147      	bne.n	80051c6 <_svfiprintf_r+0xe2>
 8005136:	1bab      	subs	r3, r5, r6
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	42b5      	cmp	r5, r6
 800513c:	d00c      	beq.n	8005158 <_svfiprintf_r+0x74>
 800513e:	0032      	movs	r2, r6
 8005140:	0039      	movs	r1, r7
 8005142:	9803      	ldr	r0, [sp, #12]
 8005144:	f7ff ff6c 	bl	8005020 <__ssputs_r>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d100      	bne.n	800514e <_svfiprintf_r+0x6a>
 800514c:	e0ae      	b.n	80052ac <_svfiprintf_r+0x1c8>
 800514e:	6962      	ldr	r2, [r4, #20]
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	4694      	mov	ip, r2
 8005154:	4463      	add	r3, ip
 8005156:	6163      	str	r3, [r4, #20]
 8005158:	782b      	ldrb	r3, [r5, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d100      	bne.n	8005160 <_svfiprintf_r+0x7c>
 800515e:	e0a5      	b.n	80052ac <_svfiprintf_r+0x1c8>
 8005160:	2201      	movs	r2, #1
 8005162:	2300      	movs	r3, #0
 8005164:	4252      	negs	r2, r2
 8005166:	6062      	str	r2, [r4, #4]
 8005168:	a904      	add	r1, sp, #16
 800516a:	3254      	adds	r2, #84	; 0x54
 800516c:	1852      	adds	r2, r2, r1
 800516e:	1c6e      	adds	r6, r5, #1
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	60e3      	str	r3, [r4, #12]
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	7013      	strb	r3, [r2, #0]
 8005178:	65a3      	str	r3, [r4, #88]	; 0x58
 800517a:	2205      	movs	r2, #5
 800517c:	7831      	ldrb	r1, [r6, #0]
 800517e:	4854      	ldr	r0, [pc, #336]	; (80052d0 <_svfiprintf_r+0x1ec>)
 8005180:	f000 fa32 	bl	80055e8 <memchr>
 8005184:	1c75      	adds	r5, r6, #1
 8005186:	2800      	cmp	r0, #0
 8005188:	d11f      	bne.n	80051ca <_svfiprintf_r+0xe6>
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	06d3      	lsls	r3, r2, #27
 800518e:	d504      	bpl.n	800519a <_svfiprintf_r+0xb6>
 8005190:	2353      	movs	r3, #83	; 0x53
 8005192:	a904      	add	r1, sp, #16
 8005194:	185b      	adds	r3, r3, r1
 8005196:	2120      	movs	r1, #32
 8005198:	7019      	strb	r1, [r3, #0]
 800519a:	0713      	lsls	r3, r2, #28
 800519c:	d504      	bpl.n	80051a8 <_svfiprintf_r+0xc4>
 800519e:	2353      	movs	r3, #83	; 0x53
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	185b      	adds	r3, r3, r1
 80051a4:	212b      	movs	r1, #43	; 0x2b
 80051a6:	7019      	strb	r1, [r3, #0]
 80051a8:	7833      	ldrb	r3, [r6, #0]
 80051aa:	2b2a      	cmp	r3, #42	; 0x2a
 80051ac:	d016      	beq.n	80051dc <_svfiprintf_r+0xf8>
 80051ae:	0035      	movs	r5, r6
 80051b0:	2100      	movs	r1, #0
 80051b2:	200a      	movs	r0, #10
 80051b4:	68e3      	ldr	r3, [r4, #12]
 80051b6:	782a      	ldrb	r2, [r5, #0]
 80051b8:	1c6e      	adds	r6, r5, #1
 80051ba:	3a30      	subs	r2, #48	; 0x30
 80051bc:	2a09      	cmp	r2, #9
 80051be:	d94e      	bls.n	800525e <_svfiprintf_r+0x17a>
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d111      	bne.n	80051e8 <_svfiprintf_r+0x104>
 80051c4:	e017      	b.n	80051f6 <_svfiprintf_r+0x112>
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7b0      	b.n	800512c <_svfiprintf_r+0x48>
 80051ca:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <_svfiprintf_r+0x1ec>)
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	1ac0      	subs	r0, r0, r3
 80051d0:	2301      	movs	r3, #1
 80051d2:	4083      	lsls	r3, r0
 80051d4:	4313      	orrs	r3, r2
 80051d6:	002e      	movs	r6, r5
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	e7ce      	b.n	800517a <_svfiprintf_r+0x96>
 80051dc:	9b07      	ldr	r3, [sp, #28]
 80051de:	1d19      	adds	r1, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	9107      	str	r1, [sp, #28]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db01      	blt.n	80051ec <_svfiprintf_r+0x108>
 80051e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ea:	e004      	b.n	80051f6 <_svfiprintf_r+0x112>
 80051ec:	425b      	negs	r3, r3
 80051ee:	60e3      	str	r3, [r4, #12]
 80051f0:	2302      	movs	r3, #2
 80051f2:	4313      	orrs	r3, r2
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	782b      	ldrb	r3, [r5, #0]
 80051f8:	2b2e      	cmp	r3, #46	; 0x2e
 80051fa:	d10a      	bne.n	8005212 <_svfiprintf_r+0x12e>
 80051fc:	786b      	ldrb	r3, [r5, #1]
 80051fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005200:	d135      	bne.n	800526e <_svfiprintf_r+0x18a>
 8005202:	9b07      	ldr	r3, [sp, #28]
 8005204:	3502      	adds	r5, #2
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	9207      	str	r2, [sp, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	db2b      	blt.n	8005268 <_svfiprintf_r+0x184>
 8005210:	9309      	str	r3, [sp, #36]	; 0x24
 8005212:	4e30      	ldr	r6, [pc, #192]	; (80052d4 <_svfiprintf_r+0x1f0>)
 8005214:	2203      	movs	r2, #3
 8005216:	0030      	movs	r0, r6
 8005218:	7829      	ldrb	r1, [r5, #0]
 800521a:	f000 f9e5 	bl	80055e8 <memchr>
 800521e:	2800      	cmp	r0, #0
 8005220:	d006      	beq.n	8005230 <_svfiprintf_r+0x14c>
 8005222:	2340      	movs	r3, #64	; 0x40
 8005224:	1b80      	subs	r0, r0, r6
 8005226:	4083      	lsls	r3, r0
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	3501      	adds	r5, #1
 800522c:	4313      	orrs	r3, r2
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	7829      	ldrb	r1, [r5, #0]
 8005232:	2206      	movs	r2, #6
 8005234:	4828      	ldr	r0, [pc, #160]	; (80052d8 <_svfiprintf_r+0x1f4>)
 8005236:	1c6e      	adds	r6, r5, #1
 8005238:	7621      	strb	r1, [r4, #24]
 800523a:	f000 f9d5 	bl	80055e8 <memchr>
 800523e:	2800      	cmp	r0, #0
 8005240:	d03c      	beq.n	80052bc <_svfiprintf_r+0x1d8>
 8005242:	4b26      	ldr	r3, [pc, #152]	; (80052dc <_svfiprintf_r+0x1f8>)
 8005244:	2b00      	cmp	r3, #0
 8005246:	d125      	bne.n	8005294 <_svfiprintf_r+0x1b0>
 8005248:	2207      	movs	r2, #7
 800524a:	9b07      	ldr	r3, [sp, #28]
 800524c:	3307      	adds	r3, #7
 800524e:	4393      	bics	r3, r2
 8005250:	3308      	adds	r3, #8
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	6963      	ldr	r3, [r4, #20]
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	189b      	adds	r3, r3, r2
 800525a:	6163      	str	r3, [r4, #20]
 800525c:	e765      	b.n	800512a <_svfiprintf_r+0x46>
 800525e:	4343      	muls	r3, r0
 8005260:	0035      	movs	r5, r6
 8005262:	2101      	movs	r1, #1
 8005264:	189b      	adds	r3, r3, r2
 8005266:	e7a6      	b.n	80051b6 <_svfiprintf_r+0xd2>
 8005268:	2301      	movs	r3, #1
 800526a:	425b      	negs	r3, r3
 800526c:	e7d0      	b.n	8005210 <_svfiprintf_r+0x12c>
 800526e:	2300      	movs	r3, #0
 8005270:	200a      	movs	r0, #10
 8005272:	001a      	movs	r2, r3
 8005274:	3501      	adds	r5, #1
 8005276:	6063      	str	r3, [r4, #4]
 8005278:	7829      	ldrb	r1, [r5, #0]
 800527a:	1c6e      	adds	r6, r5, #1
 800527c:	3930      	subs	r1, #48	; 0x30
 800527e:	2909      	cmp	r1, #9
 8005280:	d903      	bls.n	800528a <_svfiprintf_r+0x1a6>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0c5      	beq.n	8005212 <_svfiprintf_r+0x12e>
 8005286:	9209      	str	r2, [sp, #36]	; 0x24
 8005288:	e7c3      	b.n	8005212 <_svfiprintf_r+0x12e>
 800528a:	4342      	muls	r2, r0
 800528c:	0035      	movs	r5, r6
 800528e:	2301      	movs	r3, #1
 8005290:	1852      	adds	r2, r2, r1
 8005292:	e7f1      	b.n	8005278 <_svfiprintf_r+0x194>
 8005294:	ab07      	add	r3, sp, #28
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	003a      	movs	r2, r7
 800529a:	0021      	movs	r1, r4
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <_svfiprintf_r+0x1fc>)
 800529e:	9803      	ldr	r0, [sp, #12]
 80052a0:	e000      	b.n	80052a4 <_svfiprintf_r+0x1c0>
 80052a2:	bf00      	nop
 80052a4:	9004      	str	r0, [sp, #16]
 80052a6:	9b04      	ldr	r3, [sp, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	d1d3      	bne.n	8005254 <_svfiprintf_r+0x170>
 80052ac:	89bb      	ldrh	r3, [r7, #12]
 80052ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80052b0:	065b      	lsls	r3, r3, #25
 80052b2:	d400      	bmi.n	80052b6 <_svfiprintf_r+0x1d2>
 80052b4:	e72d      	b.n	8005112 <_svfiprintf_r+0x2e>
 80052b6:	2001      	movs	r0, #1
 80052b8:	4240      	negs	r0, r0
 80052ba:	e72a      	b.n	8005112 <_svfiprintf_r+0x2e>
 80052bc:	ab07      	add	r3, sp, #28
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	003a      	movs	r2, r7
 80052c2:	0021      	movs	r1, r4
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <_svfiprintf_r+0x1fc>)
 80052c6:	9803      	ldr	r0, [sp, #12]
 80052c8:	f000 f87c 	bl	80053c4 <_printf_i>
 80052cc:	e7ea      	b.n	80052a4 <_svfiprintf_r+0x1c0>
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	08005b20 	.word	0x08005b20
 80052d4:	08005b26 	.word	0x08005b26
 80052d8:	08005b2a 	.word	0x08005b2a
 80052dc:	00000000 	.word	0x00000000
 80052e0:	08005021 	.word	0x08005021

080052e4 <_printf_common>:
 80052e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e6:	0015      	movs	r5, r2
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	688a      	ldr	r2, [r1, #8]
 80052ec:	690b      	ldr	r3, [r1, #16]
 80052ee:	000c      	movs	r4, r1
 80052f0:	9000      	str	r0, [sp, #0]
 80052f2:	4293      	cmp	r3, r2
 80052f4:	da00      	bge.n	80052f8 <_printf_common+0x14>
 80052f6:	0013      	movs	r3, r2
 80052f8:	0022      	movs	r2, r4
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	3243      	adds	r2, #67	; 0x43
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	2a00      	cmp	r2, #0
 8005302:	d001      	beq.n	8005308 <_printf_common+0x24>
 8005304:	3301      	adds	r3, #1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	069b      	lsls	r3, r3, #26
 800530c:	d502      	bpl.n	8005314 <_printf_common+0x30>
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	3302      	adds	r3, #2
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	2306      	movs	r3, #6
 8005318:	0017      	movs	r7, r2
 800531a:	401f      	ands	r7, r3
 800531c:	421a      	tst	r2, r3
 800531e:	d027      	beq.n	8005370 <_printf_common+0x8c>
 8005320:	0023      	movs	r3, r4
 8005322:	3343      	adds	r3, #67	; 0x43
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	4193      	sbcs	r3, r2
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	0692      	lsls	r2, r2, #26
 800532e:	d430      	bmi.n	8005392 <_printf_common+0xae>
 8005330:	0022      	movs	r2, r4
 8005332:	9901      	ldr	r1, [sp, #4]
 8005334:	9800      	ldr	r0, [sp, #0]
 8005336:	9e08      	ldr	r6, [sp, #32]
 8005338:	3243      	adds	r2, #67	; 0x43
 800533a:	47b0      	blx	r6
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d025      	beq.n	800538c <_printf_common+0xa8>
 8005340:	2306      	movs	r3, #6
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	682a      	ldr	r2, [r5, #0]
 8005346:	68e1      	ldr	r1, [r4, #12]
 8005348:	2500      	movs	r5, #0
 800534a:	4003      	ands	r3, r0
 800534c:	2b04      	cmp	r3, #4
 800534e:	d103      	bne.n	8005358 <_printf_common+0x74>
 8005350:	1a8d      	subs	r5, r1, r2
 8005352:	43eb      	mvns	r3, r5
 8005354:	17db      	asrs	r3, r3, #31
 8005356:	401d      	ands	r5, r3
 8005358:	68a3      	ldr	r3, [r4, #8]
 800535a:	6922      	ldr	r2, [r4, #16]
 800535c:	4293      	cmp	r3, r2
 800535e:	dd01      	ble.n	8005364 <_printf_common+0x80>
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	18ed      	adds	r5, r5, r3
 8005364:	2700      	movs	r7, #0
 8005366:	42bd      	cmp	r5, r7
 8005368:	d120      	bne.n	80053ac <_printf_common+0xc8>
 800536a:	2000      	movs	r0, #0
 800536c:	e010      	b.n	8005390 <_printf_common+0xac>
 800536e:	3701      	adds	r7, #1
 8005370:	68e3      	ldr	r3, [r4, #12]
 8005372:	682a      	ldr	r2, [r5, #0]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	42bb      	cmp	r3, r7
 8005378:	ddd2      	ble.n	8005320 <_printf_common+0x3c>
 800537a:	0022      	movs	r2, r4
 800537c:	2301      	movs	r3, #1
 800537e:	9901      	ldr	r1, [sp, #4]
 8005380:	9800      	ldr	r0, [sp, #0]
 8005382:	9e08      	ldr	r6, [sp, #32]
 8005384:	3219      	adds	r2, #25
 8005386:	47b0      	blx	r6
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d1f0      	bne.n	800536e <_printf_common+0x8a>
 800538c:	2001      	movs	r0, #1
 800538e:	4240      	negs	r0, r0
 8005390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005392:	2030      	movs	r0, #48	; 0x30
 8005394:	18e1      	adds	r1, r4, r3
 8005396:	3143      	adds	r1, #67	; 0x43
 8005398:	7008      	strb	r0, [r1, #0]
 800539a:	0021      	movs	r1, r4
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	3145      	adds	r1, #69	; 0x45
 80053a0:	7809      	ldrb	r1, [r1, #0]
 80053a2:	18a2      	adds	r2, r4, r2
 80053a4:	3243      	adds	r2, #67	; 0x43
 80053a6:	3302      	adds	r3, #2
 80053a8:	7011      	strb	r1, [r2, #0]
 80053aa:	e7c1      	b.n	8005330 <_printf_common+0x4c>
 80053ac:	0022      	movs	r2, r4
 80053ae:	2301      	movs	r3, #1
 80053b0:	9901      	ldr	r1, [sp, #4]
 80053b2:	9800      	ldr	r0, [sp, #0]
 80053b4:	9e08      	ldr	r6, [sp, #32]
 80053b6:	321a      	adds	r2, #26
 80053b8:	47b0      	blx	r6
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	d0e6      	beq.n	800538c <_printf_common+0xa8>
 80053be:	3701      	adds	r7, #1
 80053c0:	e7d1      	b.n	8005366 <_printf_common+0x82>
	...

080053c4 <_printf_i>:
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b08b      	sub	sp, #44	; 0x2c
 80053c8:	9206      	str	r2, [sp, #24]
 80053ca:	000a      	movs	r2, r1
 80053cc:	3243      	adds	r2, #67	; 0x43
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	9005      	str	r0, [sp, #20]
 80053d2:	9204      	str	r2, [sp, #16]
 80053d4:	7e0a      	ldrb	r2, [r1, #24]
 80053d6:	000c      	movs	r4, r1
 80053d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053da:	2a78      	cmp	r2, #120	; 0x78
 80053dc:	d807      	bhi.n	80053ee <_printf_i+0x2a>
 80053de:	2a62      	cmp	r2, #98	; 0x62
 80053e0:	d809      	bhi.n	80053f6 <_printf_i+0x32>
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	d100      	bne.n	80053e8 <_printf_i+0x24>
 80053e6:	e0c1      	b.n	800556c <_printf_i+0x1a8>
 80053e8:	2a58      	cmp	r2, #88	; 0x58
 80053ea:	d100      	bne.n	80053ee <_printf_i+0x2a>
 80053ec:	e08c      	b.n	8005508 <_printf_i+0x144>
 80053ee:	0026      	movs	r6, r4
 80053f0:	3642      	adds	r6, #66	; 0x42
 80053f2:	7032      	strb	r2, [r6, #0]
 80053f4:	e022      	b.n	800543c <_printf_i+0x78>
 80053f6:	0010      	movs	r0, r2
 80053f8:	3863      	subs	r0, #99	; 0x63
 80053fa:	2815      	cmp	r0, #21
 80053fc:	d8f7      	bhi.n	80053ee <_printf_i+0x2a>
 80053fe:	f7fa fe7f 	bl	8000100 <__gnu_thumb1_case_shi>
 8005402:	0016      	.short	0x0016
 8005404:	fff6001f 	.word	0xfff6001f
 8005408:	fff6fff6 	.word	0xfff6fff6
 800540c:	001ffff6 	.word	0x001ffff6
 8005410:	fff6fff6 	.word	0xfff6fff6
 8005414:	fff6fff6 	.word	0xfff6fff6
 8005418:	003600a8 	.word	0x003600a8
 800541c:	fff6009a 	.word	0xfff6009a
 8005420:	00b9fff6 	.word	0x00b9fff6
 8005424:	0036fff6 	.word	0x0036fff6
 8005428:	fff6fff6 	.word	0xfff6fff6
 800542c:	009e      	.short	0x009e
 800542e:	0026      	movs	r6, r4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	3642      	adds	r6, #66	; 0x42
 8005434:	1d11      	adds	r1, r2, #4
 8005436:	6019      	str	r1, [r3, #0]
 8005438:	6813      	ldr	r3, [r2, #0]
 800543a:	7033      	strb	r3, [r6, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	e0a7      	b.n	8005590 <_printf_i+0x1cc>
 8005440:	6808      	ldr	r0, [r1, #0]
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	1d0a      	adds	r2, r1, #4
 8005446:	0605      	lsls	r5, r0, #24
 8005448:	d50b      	bpl.n	8005462 <_printf_i+0x9e>
 800544a:	680d      	ldr	r5, [r1, #0]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	2d00      	cmp	r5, #0
 8005450:	da03      	bge.n	800545a <_printf_i+0x96>
 8005452:	232d      	movs	r3, #45	; 0x2d
 8005454:	9a04      	ldr	r2, [sp, #16]
 8005456:	426d      	negs	r5, r5
 8005458:	7013      	strb	r3, [r2, #0]
 800545a:	4b61      	ldr	r3, [pc, #388]	; (80055e0 <_printf_i+0x21c>)
 800545c:	270a      	movs	r7, #10
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	e01b      	b.n	800549a <_printf_i+0xd6>
 8005462:	680d      	ldr	r5, [r1, #0]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	0641      	lsls	r1, r0, #25
 8005468:	d5f1      	bpl.n	800544e <_printf_i+0x8a>
 800546a:	b22d      	sxth	r5, r5
 800546c:	e7ef      	b.n	800544e <_printf_i+0x8a>
 800546e:	680d      	ldr	r5, [r1, #0]
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	1d08      	adds	r0, r1, #4
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	062e      	lsls	r6, r5, #24
 8005478:	d501      	bpl.n	800547e <_printf_i+0xba>
 800547a:	680d      	ldr	r5, [r1, #0]
 800547c:	e003      	b.n	8005486 <_printf_i+0xc2>
 800547e:	066d      	lsls	r5, r5, #25
 8005480:	d5fb      	bpl.n	800547a <_printf_i+0xb6>
 8005482:	680d      	ldr	r5, [r1, #0]
 8005484:	b2ad      	uxth	r5, r5
 8005486:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <_printf_i+0x21c>)
 8005488:	2708      	movs	r7, #8
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	2a6f      	cmp	r2, #111	; 0x6f
 800548e:	d000      	beq.n	8005492 <_printf_i+0xce>
 8005490:	3702      	adds	r7, #2
 8005492:	0023      	movs	r3, r4
 8005494:	2200      	movs	r2, #0
 8005496:	3343      	adds	r3, #67	; 0x43
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db03      	blt.n	80054aa <_printf_i+0xe6>
 80054a2:	2204      	movs	r2, #4
 80054a4:	6821      	ldr	r1, [r4, #0]
 80054a6:	4391      	bics	r1, r2
 80054a8:	6021      	str	r1, [r4, #0]
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	d102      	bne.n	80054b4 <_printf_i+0xf0>
 80054ae:	9e04      	ldr	r6, [sp, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <_printf_i+0x10a>
 80054b4:	9e04      	ldr	r6, [sp, #16]
 80054b6:	0028      	movs	r0, r5
 80054b8:	0039      	movs	r1, r7
 80054ba:	f7fa feb1 	bl	8000220 <__aeabi_uidivmod>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	3e01      	subs	r6, #1
 80054c2:	5c5b      	ldrb	r3, [r3, r1]
 80054c4:	7033      	strb	r3, [r6, #0]
 80054c6:	002b      	movs	r3, r5
 80054c8:	0005      	movs	r5, r0
 80054ca:	429f      	cmp	r7, r3
 80054cc:	d9f3      	bls.n	80054b6 <_printf_i+0xf2>
 80054ce:	2f08      	cmp	r7, #8
 80054d0:	d109      	bne.n	80054e6 <_printf_i+0x122>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	07db      	lsls	r3, r3, #31
 80054d6:	d506      	bpl.n	80054e6 <_printf_i+0x122>
 80054d8:	6863      	ldr	r3, [r4, #4]
 80054da:	6922      	ldr	r2, [r4, #16]
 80054dc:	4293      	cmp	r3, r2
 80054de:	dc02      	bgt.n	80054e6 <_printf_i+0x122>
 80054e0:	2330      	movs	r3, #48	; 0x30
 80054e2:	3e01      	subs	r6, #1
 80054e4:	7033      	strb	r3, [r6, #0]
 80054e6:	9b04      	ldr	r3, [sp, #16]
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	0021      	movs	r1, r4
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	9805      	ldr	r0, [sp, #20]
 80054f4:	9b06      	ldr	r3, [sp, #24]
 80054f6:	aa09      	add	r2, sp, #36	; 0x24
 80054f8:	f7ff fef4 	bl	80052e4 <_printf_common>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d14c      	bne.n	800559a <_printf_i+0x1d6>
 8005500:	2001      	movs	r0, #1
 8005502:	4240      	negs	r0, r0
 8005504:	b00b      	add	sp, #44	; 0x2c
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005508:	3145      	adds	r1, #69	; 0x45
 800550a:	700a      	strb	r2, [r1, #0]
 800550c:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <_printf_i+0x21c>)
 800550e:	9203      	str	r2, [sp, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	6821      	ldr	r1, [r4, #0]
 8005514:	ca20      	ldmia	r2!, {r5}
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	0608      	lsls	r0, r1, #24
 800551a:	d516      	bpl.n	800554a <_printf_i+0x186>
 800551c:	07cb      	lsls	r3, r1, #31
 800551e:	d502      	bpl.n	8005526 <_printf_i+0x162>
 8005520:	2320      	movs	r3, #32
 8005522:	4319      	orrs	r1, r3
 8005524:	6021      	str	r1, [r4, #0]
 8005526:	2710      	movs	r7, #16
 8005528:	2d00      	cmp	r5, #0
 800552a:	d1b2      	bne.n	8005492 <_printf_i+0xce>
 800552c:	2320      	movs	r3, #32
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	439a      	bics	r2, r3
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	e7ad      	b.n	8005492 <_printf_i+0xce>
 8005536:	2220      	movs	r2, #32
 8005538:	6809      	ldr	r1, [r1, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	6022      	str	r2, [r4, #0]
 800553e:	0022      	movs	r2, r4
 8005540:	2178      	movs	r1, #120	; 0x78
 8005542:	3245      	adds	r2, #69	; 0x45
 8005544:	7011      	strb	r1, [r2, #0]
 8005546:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <_printf_i+0x220>)
 8005548:	e7e1      	b.n	800550e <_printf_i+0x14a>
 800554a:	0648      	lsls	r0, r1, #25
 800554c:	d5e6      	bpl.n	800551c <_printf_i+0x158>
 800554e:	b2ad      	uxth	r5, r5
 8005550:	e7e4      	b.n	800551c <_printf_i+0x158>
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	680d      	ldr	r5, [r1, #0]
 8005556:	1d10      	adds	r0, r2, #4
 8005558:	6949      	ldr	r1, [r1, #20]
 800555a:	6018      	str	r0, [r3, #0]
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	062e      	lsls	r6, r5, #24
 8005560:	d501      	bpl.n	8005566 <_printf_i+0x1a2>
 8005562:	6019      	str	r1, [r3, #0]
 8005564:	e002      	b.n	800556c <_printf_i+0x1a8>
 8005566:	066d      	lsls	r5, r5, #25
 8005568:	d5fb      	bpl.n	8005562 <_printf_i+0x19e>
 800556a:	8019      	strh	r1, [r3, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	9e04      	ldr	r6, [sp, #16]
 8005570:	6123      	str	r3, [r4, #16]
 8005572:	e7bb      	b.n	80054ec <_printf_i+0x128>
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	1d11      	adds	r1, r2, #4
 8005578:	6019      	str	r1, [r3, #0]
 800557a:	6816      	ldr	r6, [r2, #0]
 800557c:	2100      	movs	r1, #0
 800557e:	0030      	movs	r0, r6
 8005580:	6862      	ldr	r2, [r4, #4]
 8005582:	f000 f831 	bl	80055e8 <memchr>
 8005586:	2800      	cmp	r0, #0
 8005588:	d001      	beq.n	800558e <_printf_i+0x1ca>
 800558a:	1b80      	subs	r0, r0, r6
 800558c:	6060      	str	r0, [r4, #4]
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	2300      	movs	r3, #0
 8005594:	9a04      	ldr	r2, [sp, #16]
 8005596:	7013      	strb	r3, [r2, #0]
 8005598:	e7a8      	b.n	80054ec <_printf_i+0x128>
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	0032      	movs	r2, r6
 800559e:	9906      	ldr	r1, [sp, #24]
 80055a0:	9805      	ldr	r0, [sp, #20]
 80055a2:	9d07      	ldr	r5, [sp, #28]
 80055a4:	47a8      	blx	r5
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d0aa      	beq.n	8005500 <_printf_i+0x13c>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	079b      	lsls	r3, r3, #30
 80055ae:	d415      	bmi.n	80055dc <_printf_i+0x218>
 80055b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b2:	68e0      	ldr	r0, [r4, #12]
 80055b4:	4298      	cmp	r0, r3
 80055b6:	daa5      	bge.n	8005504 <_printf_i+0x140>
 80055b8:	0018      	movs	r0, r3
 80055ba:	e7a3      	b.n	8005504 <_printf_i+0x140>
 80055bc:	0022      	movs	r2, r4
 80055be:	2301      	movs	r3, #1
 80055c0:	9906      	ldr	r1, [sp, #24]
 80055c2:	9805      	ldr	r0, [sp, #20]
 80055c4:	9e07      	ldr	r6, [sp, #28]
 80055c6:	3219      	adds	r2, #25
 80055c8:	47b0      	blx	r6
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d098      	beq.n	8005500 <_printf_i+0x13c>
 80055ce:	3501      	adds	r5, #1
 80055d0:	68e3      	ldr	r3, [r4, #12]
 80055d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	42ab      	cmp	r3, r5
 80055d8:	dcf0      	bgt.n	80055bc <_printf_i+0x1f8>
 80055da:	e7e9      	b.n	80055b0 <_printf_i+0x1ec>
 80055dc:	2500      	movs	r5, #0
 80055de:	e7f7      	b.n	80055d0 <_printf_i+0x20c>
 80055e0:	08005b31 	.word	0x08005b31
 80055e4:	08005b42 	.word	0x08005b42

080055e8 <memchr>:
 80055e8:	b2c9      	uxtb	r1, r1
 80055ea:	1882      	adds	r2, r0, r2
 80055ec:	4290      	cmp	r0, r2
 80055ee:	d101      	bne.n	80055f4 <memchr+0xc>
 80055f0:	2000      	movs	r0, #0
 80055f2:	4770      	bx	lr
 80055f4:	7803      	ldrb	r3, [r0, #0]
 80055f6:	428b      	cmp	r3, r1
 80055f8:	d0fb      	beq.n	80055f2 <memchr+0xa>
 80055fa:	3001      	adds	r0, #1
 80055fc:	e7f6      	b.n	80055ec <memchr+0x4>

080055fe <memmove>:
 80055fe:	b510      	push	{r4, lr}
 8005600:	4288      	cmp	r0, r1
 8005602:	d902      	bls.n	800560a <memmove+0xc>
 8005604:	188b      	adds	r3, r1, r2
 8005606:	4298      	cmp	r0, r3
 8005608:	d303      	bcc.n	8005612 <memmove+0x14>
 800560a:	2300      	movs	r3, #0
 800560c:	e007      	b.n	800561e <memmove+0x20>
 800560e:	5c8b      	ldrb	r3, [r1, r2]
 8005610:	5483      	strb	r3, [r0, r2]
 8005612:	3a01      	subs	r2, #1
 8005614:	d2fb      	bcs.n	800560e <memmove+0x10>
 8005616:	bd10      	pop	{r4, pc}
 8005618:	5ccc      	ldrb	r4, [r1, r3]
 800561a:	54c4      	strb	r4, [r0, r3]
 800561c:	3301      	adds	r3, #1
 800561e:	429a      	cmp	r2, r3
 8005620:	d1fa      	bne.n	8005618 <memmove+0x1a>
 8005622:	e7f8      	b.n	8005616 <memmove+0x18>

08005624 <_free_r>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	0005      	movs	r5, r0
 8005628:	2900      	cmp	r1, #0
 800562a:	d010      	beq.n	800564e <_free_r+0x2a>
 800562c:	1f0c      	subs	r4, r1, #4
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	da00      	bge.n	8005636 <_free_r+0x12>
 8005634:	18e4      	adds	r4, r4, r3
 8005636:	0028      	movs	r0, r5
 8005638:	f000 f918 	bl	800586c <__malloc_lock>
 800563c:	4a1d      	ldr	r2, [pc, #116]	; (80056b4 <_free_r+0x90>)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <_free_r+0x2c>
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6014      	str	r4, [r2, #0]
 8005648:	0028      	movs	r0, r5
 800564a:	f000 f917 	bl	800587c <__malloc_unlock>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	42a3      	cmp	r3, r4
 8005652:	d908      	bls.n	8005666 <_free_r+0x42>
 8005654:	6821      	ldr	r1, [r4, #0]
 8005656:	1860      	adds	r0, r4, r1
 8005658:	4283      	cmp	r3, r0
 800565a:	d1f3      	bne.n	8005644 <_free_r+0x20>
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	1841      	adds	r1, r0, r1
 8005662:	6021      	str	r1, [r4, #0]
 8005664:	e7ee      	b.n	8005644 <_free_r+0x20>
 8005666:	001a      	movs	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <_free_r+0x4e>
 800566e:	42a3      	cmp	r3, r4
 8005670:	d9f9      	bls.n	8005666 <_free_r+0x42>
 8005672:	6811      	ldr	r1, [r2, #0]
 8005674:	1850      	adds	r0, r2, r1
 8005676:	42a0      	cmp	r0, r4
 8005678:	d10b      	bne.n	8005692 <_free_r+0x6e>
 800567a:	6820      	ldr	r0, [r4, #0]
 800567c:	1809      	adds	r1, r1, r0
 800567e:	1850      	adds	r0, r2, r1
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	4283      	cmp	r3, r0
 8005684:	d1e0      	bne.n	8005648 <_free_r+0x24>
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	1841      	adds	r1, r0, r1
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	6053      	str	r3, [r2, #4]
 8005690:	e7da      	b.n	8005648 <_free_r+0x24>
 8005692:	42a0      	cmp	r0, r4
 8005694:	d902      	bls.n	800569c <_free_r+0x78>
 8005696:	230c      	movs	r3, #12
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	e7d5      	b.n	8005648 <_free_r+0x24>
 800569c:	6821      	ldr	r1, [r4, #0]
 800569e:	1860      	adds	r0, r4, r1
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d103      	bne.n	80056ac <_free_r+0x88>
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1841      	adds	r1, r0, r1
 80056aa:	6021      	str	r1, [r4, #0]
 80056ac:	6063      	str	r3, [r4, #4]
 80056ae:	6054      	str	r4, [r2, #4]
 80056b0:	e7ca      	b.n	8005648 <_free_r+0x24>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	20000194 	.word	0x20000194

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0f      	ldr	r6, [pc, #60]	; (80056f8 <sbrk_aligned+0x40>)
 80056bc:	000d      	movs	r5, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	0004      	movs	r4, r0
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d102      	bne.n	80056cc <sbrk_aligned+0x14>
 80056c6:	f000 f8bf 	bl	8005848 <_sbrk_r>
 80056ca:	6030      	str	r0, [r6, #0]
 80056cc:	0029      	movs	r1, r5
 80056ce:	0020      	movs	r0, r4
 80056d0:	f000 f8ba 	bl	8005848 <_sbrk_r>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d00a      	beq.n	80056ee <sbrk_aligned+0x36>
 80056d8:	2303      	movs	r3, #3
 80056da:	1cc5      	adds	r5, r0, #3
 80056dc:	439d      	bics	r5, r3
 80056de:	42a8      	cmp	r0, r5
 80056e0:	d007      	beq.n	80056f2 <sbrk_aligned+0x3a>
 80056e2:	1a29      	subs	r1, r5, r0
 80056e4:	0020      	movs	r0, r4
 80056e6:	f000 f8af 	bl	8005848 <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d101      	bne.n	80056f2 <sbrk_aligned+0x3a>
 80056ee:	2501      	movs	r5, #1
 80056f0:	426d      	negs	r5, r5
 80056f2:	0028      	movs	r0, r5
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	20000198 	.word	0x20000198

080056fc <_malloc_r>:
 80056fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056fe:	2203      	movs	r2, #3
 8005700:	1ccb      	adds	r3, r1, #3
 8005702:	4393      	bics	r3, r2
 8005704:	3308      	adds	r3, #8
 8005706:	0006      	movs	r6, r0
 8005708:	001f      	movs	r7, r3
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d232      	bcs.n	8005774 <_malloc_r+0x78>
 800570e:	270c      	movs	r7, #12
 8005710:	42b9      	cmp	r1, r7
 8005712:	d831      	bhi.n	8005778 <_malloc_r+0x7c>
 8005714:	0030      	movs	r0, r6
 8005716:	f000 f8a9 	bl	800586c <__malloc_lock>
 800571a:	4d32      	ldr	r5, [pc, #200]	; (80057e4 <_malloc_r+0xe8>)
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	001c      	movs	r4, r3
 8005720:	2c00      	cmp	r4, #0
 8005722:	d12e      	bne.n	8005782 <_malloc_r+0x86>
 8005724:	0039      	movs	r1, r7
 8005726:	0030      	movs	r0, r6
 8005728:	f7ff ffc6 	bl	80056b8 <sbrk_aligned>
 800572c:	0004      	movs	r4, r0
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d11e      	bne.n	8005770 <_malloc_r+0x74>
 8005732:	682c      	ldr	r4, [r5, #0]
 8005734:	0025      	movs	r5, r4
 8005736:	2d00      	cmp	r5, #0
 8005738:	d14a      	bne.n	80057d0 <_malloc_r+0xd4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	0029      	movs	r1, r5
 800573e:	18e3      	adds	r3, r4, r3
 8005740:	0030      	movs	r0, r6
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f000 f880 	bl	8005848 <_sbrk_r>
 8005748:	9b01      	ldr	r3, [sp, #4]
 800574a:	4283      	cmp	r3, r0
 800574c:	d143      	bne.n	80057d6 <_malloc_r+0xda>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	3703      	adds	r7, #3
 8005752:	1aff      	subs	r7, r7, r3
 8005754:	2303      	movs	r3, #3
 8005756:	439f      	bics	r7, r3
 8005758:	3708      	adds	r7, #8
 800575a:	2f0c      	cmp	r7, #12
 800575c:	d200      	bcs.n	8005760 <_malloc_r+0x64>
 800575e:	270c      	movs	r7, #12
 8005760:	0039      	movs	r1, r7
 8005762:	0030      	movs	r0, r6
 8005764:	f7ff ffa8 	bl	80056b8 <sbrk_aligned>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d034      	beq.n	80057d6 <_malloc_r+0xda>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	19df      	adds	r7, r3, r7
 8005770:	6027      	str	r7, [r4, #0]
 8005772:	e013      	b.n	800579c <_malloc_r+0xa0>
 8005774:	2b00      	cmp	r3, #0
 8005776:	dacb      	bge.n	8005710 <_malloc_r+0x14>
 8005778:	230c      	movs	r3, #12
 800577a:	2500      	movs	r5, #0
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	0028      	movs	r0, r5
 8005780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	1bd1      	subs	r1, r2, r7
 8005786:	d420      	bmi.n	80057ca <_malloc_r+0xce>
 8005788:	290b      	cmp	r1, #11
 800578a:	d917      	bls.n	80057bc <_malloc_r+0xc0>
 800578c:	19e2      	adds	r2, r4, r7
 800578e:	6027      	str	r7, [r4, #0]
 8005790:	42a3      	cmp	r3, r4
 8005792:	d111      	bne.n	80057b8 <_malloc_r+0xbc>
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	6863      	ldr	r3, [r4, #4]
 8005798:	6011      	str	r1, [r2, #0]
 800579a:	6053      	str	r3, [r2, #4]
 800579c:	0030      	movs	r0, r6
 800579e:	0025      	movs	r5, r4
 80057a0:	f000 f86c 	bl	800587c <__malloc_unlock>
 80057a4:	2207      	movs	r2, #7
 80057a6:	350b      	adds	r5, #11
 80057a8:	1d23      	adds	r3, r4, #4
 80057aa:	4395      	bics	r5, r2
 80057ac:	1aea      	subs	r2, r5, r3
 80057ae:	429d      	cmp	r5, r3
 80057b0:	d0e5      	beq.n	800577e <_malloc_r+0x82>
 80057b2:	1b5b      	subs	r3, r3, r5
 80057b4:	50a3      	str	r3, [r4, r2]
 80057b6:	e7e2      	b.n	800577e <_malloc_r+0x82>
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	e7ec      	b.n	8005796 <_malloc_r+0x9a>
 80057bc:	6862      	ldr	r2, [r4, #4]
 80057be:	42a3      	cmp	r3, r4
 80057c0:	d101      	bne.n	80057c6 <_malloc_r+0xca>
 80057c2:	602a      	str	r2, [r5, #0]
 80057c4:	e7ea      	b.n	800579c <_malloc_r+0xa0>
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	e7e8      	b.n	800579c <_malloc_r+0xa0>
 80057ca:	0023      	movs	r3, r4
 80057cc:	6864      	ldr	r4, [r4, #4]
 80057ce:	e7a7      	b.n	8005720 <_malloc_r+0x24>
 80057d0:	002c      	movs	r4, r5
 80057d2:	686d      	ldr	r5, [r5, #4]
 80057d4:	e7af      	b.n	8005736 <_malloc_r+0x3a>
 80057d6:	230c      	movs	r3, #12
 80057d8:	0030      	movs	r0, r6
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f000 f84e 	bl	800587c <__malloc_unlock>
 80057e0:	e7cd      	b.n	800577e <_malloc_r+0x82>
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	20000194 	.word	0x20000194

080057e8 <_realloc_r>:
 80057e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ea:	0007      	movs	r7, r0
 80057ec:	000e      	movs	r6, r1
 80057ee:	0014      	movs	r4, r2
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d105      	bne.n	8005800 <_realloc_r+0x18>
 80057f4:	0011      	movs	r1, r2
 80057f6:	f7ff ff81 	bl	80056fc <_malloc_r>
 80057fa:	0005      	movs	r5, r0
 80057fc:	0028      	movs	r0, r5
 80057fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005800:	2a00      	cmp	r2, #0
 8005802:	d103      	bne.n	800580c <_realloc_r+0x24>
 8005804:	f7ff ff0e 	bl	8005624 <_free_r>
 8005808:	0025      	movs	r5, r4
 800580a:	e7f7      	b.n	80057fc <_realloc_r+0x14>
 800580c:	f000 f83e 	bl	800588c <_malloc_usable_size_r>
 8005810:	9001      	str	r0, [sp, #4]
 8005812:	4284      	cmp	r4, r0
 8005814:	d803      	bhi.n	800581e <_realloc_r+0x36>
 8005816:	0035      	movs	r5, r6
 8005818:	0843      	lsrs	r3, r0, #1
 800581a:	42a3      	cmp	r3, r4
 800581c:	d3ee      	bcc.n	80057fc <_realloc_r+0x14>
 800581e:	0021      	movs	r1, r4
 8005820:	0038      	movs	r0, r7
 8005822:	f7ff ff6b 	bl	80056fc <_malloc_r>
 8005826:	1e05      	subs	r5, r0, #0
 8005828:	d0e8      	beq.n	80057fc <_realloc_r+0x14>
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	0022      	movs	r2, r4
 800582e:	429c      	cmp	r4, r3
 8005830:	d900      	bls.n	8005834 <_realloc_r+0x4c>
 8005832:	001a      	movs	r2, r3
 8005834:	0031      	movs	r1, r6
 8005836:	0028      	movs	r0, r5
 8005838:	f7ff fbc0 	bl	8004fbc <memcpy>
 800583c:	0031      	movs	r1, r6
 800583e:	0038      	movs	r0, r7
 8005840:	f7ff fef0 	bl	8005624 <_free_r>
 8005844:	e7da      	b.n	80057fc <_realloc_r+0x14>
	...

08005848 <_sbrk_r>:
 8005848:	2300      	movs	r3, #0
 800584a:	b570      	push	{r4, r5, r6, lr}
 800584c:	4d06      	ldr	r5, [pc, #24]	; (8005868 <_sbrk_r+0x20>)
 800584e:	0004      	movs	r4, r0
 8005850:	0008      	movs	r0, r1
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	f7fc fcf8 	bl	8002248 <_sbrk>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d103      	bne.n	8005864 <_sbrk_r+0x1c>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d000      	beq.n	8005864 <_sbrk_r+0x1c>
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	2000019c 	.word	0x2000019c

0800586c <__malloc_lock>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4802      	ldr	r0, [pc, #8]	; (8005878 <__malloc_lock+0xc>)
 8005870:	f000 f814 	bl	800589c <__retarget_lock_acquire_recursive>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	200001a0 	.word	0x200001a0

0800587c <__malloc_unlock>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4802      	ldr	r0, [pc, #8]	; (8005888 <__malloc_unlock+0xc>)
 8005880:	f000 f80d 	bl	800589e <__retarget_lock_release_recursive>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	200001a0 	.word	0x200001a0

0800588c <_malloc_usable_size_r>:
 800588c:	1f0b      	subs	r3, r1, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1f18      	subs	r0, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	da01      	bge.n	800589a <_malloc_usable_size_r+0xe>
 8005896:	580b      	ldr	r3, [r1, r0]
 8005898:	18c0      	adds	r0, r0, r3
 800589a:	4770      	bx	lr

0800589c <__retarget_lock_acquire_recursive>:
 800589c:	4770      	bx	lr

0800589e <__retarget_lock_release_recursive>:
 800589e:	4770      	bx	lr

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
