
rdss_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa8  08005aa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08005b20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005b20  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de5e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271d  00000000  00000000  0002def6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  000311e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b83  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed29  00000000  00000000  00049803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e362  00000000  00000000  0005852c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e688e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000e68e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080057cc 	.word	0x080057cc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080057cc 	.word	0x080057cc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uldivmod>:
 800022c:	2b00      	cmp	r3, #0
 800022e:	d111      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000230:	2a00      	cmp	r2, #0
 8000232:	d10f      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000234:	2900      	cmp	r1, #0
 8000236:	d100      	bne.n	800023a <__aeabi_uldivmod+0xe>
 8000238:	2800      	cmp	r0, #0
 800023a:	d002      	beq.n	8000242 <__aeabi_uldivmod+0x16>
 800023c:	2100      	movs	r1, #0
 800023e:	43c9      	mvns	r1, r1
 8000240:	0008      	movs	r0, r1
 8000242:	b407      	push	{r0, r1, r2}
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <__aeabi_uldivmod+0x24>)
 8000246:	a102      	add	r1, pc, #8	; (adr r1, 8000250 <__aeabi_uldivmod+0x24>)
 8000248:	1840      	adds	r0, r0, r1
 800024a:	9002      	str	r0, [sp, #8]
 800024c:	bd03      	pop	{r0, r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	ffffffd9 	.word	0xffffffd9
 8000254:	b403      	push	{r0, r1}
 8000256:	4668      	mov	r0, sp
 8000258:	b501      	push	{r0, lr}
 800025a:	9802      	ldr	r0, [sp, #8]
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	9b01      	ldr	r3, [sp, #4]
 8000262:	469e      	mov	lr, r3
 8000264:	b002      	add	sp, #8
 8000266:	bc0c      	pop	{r2, r3}
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__udivmoddi4>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	0004      	movs	r4, r0
 800027a:	000d      	movs	r5, r1
 800027c:	4692      	mov	sl, r2
 800027e:	4699      	mov	r9, r3
 8000280:	b083      	sub	sp, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d830      	bhi.n	80002e8 <__udivmoddi4+0x7c>
 8000286:	d02d      	beq.n	80002e4 <__udivmoddi4+0x78>
 8000288:	4649      	mov	r1, r9
 800028a:	4650      	mov	r0, sl
 800028c:	f000 f8d8 	bl	8000440 <__clzdi2>
 8000290:	0029      	movs	r1, r5
 8000292:	0006      	movs	r6, r0
 8000294:	0020      	movs	r0, r4
 8000296:	f000 f8d3 	bl	8000440 <__clzdi2>
 800029a:	1a33      	subs	r3, r6, r0
 800029c:	4698      	mov	r8, r3
 800029e:	3b20      	subs	r3, #32
 80002a0:	469b      	mov	fp, r3
 80002a2:	d433      	bmi.n	800030c <__udivmoddi4+0xa0>
 80002a4:	465a      	mov	r2, fp
 80002a6:	4653      	mov	r3, sl
 80002a8:	4093      	lsls	r3, r2
 80002aa:	4642      	mov	r2, r8
 80002ac:	001f      	movs	r7, r3
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	001e      	movs	r6, r3
 80002b4:	42af      	cmp	r7, r5
 80002b6:	d83a      	bhi.n	800032e <__udivmoddi4+0xc2>
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d100      	bne.n	80002be <__udivmoddi4+0x52>
 80002bc:	e078      	b.n	80003b0 <__udivmoddi4+0x144>
 80002be:	465b      	mov	r3, fp
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5e>
 80002c8:	e075      	b.n	80003b6 <__udivmoddi4+0x14a>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e028      	b.n	8000336 <__udivmoddi4+0xca>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9cf      	bls.n	8000288 <__udivmoddi4+0x1c>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8e>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b003      	add	sp, #12
 8000300:	bcf0      	pop	{r4, r5, r6, r7}
 8000302:	46bb      	mov	fp, r7
 8000304:	46b2      	mov	sl, r6
 8000306:	46a9      	mov	r9, r5
 8000308:	46a0      	mov	r8, r4
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	4642      	mov	r2, r8
 800030e:	2320      	movs	r3, #32
 8000310:	1a9b      	subs	r3, r3, r2
 8000312:	4652      	mov	r2, sl
 8000314:	40da      	lsrs	r2, r3
 8000316:	4641      	mov	r1, r8
 8000318:	0013      	movs	r3, r2
 800031a:	464a      	mov	r2, r9
 800031c:	408a      	lsls	r2, r1
 800031e:	0017      	movs	r7, r2
 8000320:	4642      	mov	r2, r8
 8000322:	431f      	orrs	r7, r3
 8000324:	4653      	mov	r3, sl
 8000326:	4093      	lsls	r3, r2
 8000328:	001e      	movs	r6, r3
 800032a:	42af      	cmp	r7, r5
 800032c:	d9c4      	bls.n	80002b8 <__udivmoddi4+0x4c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0d9      	beq.n	80002f0 <__udivmoddi4+0x84>
 800033c:	07fb      	lsls	r3, r7, #31
 800033e:	0872      	lsrs	r2, r6, #1
 8000340:	431a      	orrs	r2, r3
 8000342:	4646      	mov	r6, r8
 8000344:	087b      	lsrs	r3, r7, #1
 8000346:	e00e      	b.n	8000366 <__udivmoddi4+0xfa>
 8000348:	42ab      	cmp	r3, r5
 800034a:	d101      	bne.n	8000350 <__udivmoddi4+0xe4>
 800034c:	42a2      	cmp	r2, r4
 800034e:	d80c      	bhi.n	800036a <__udivmoddi4+0xfe>
 8000350:	1aa4      	subs	r4, r4, r2
 8000352:	419d      	sbcs	r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	1924      	adds	r4, r4, r4
 8000358:	416d      	adcs	r5, r5
 800035a:	2100      	movs	r1, #0
 800035c:	3e01      	subs	r6, #1
 800035e:	1824      	adds	r4, r4, r0
 8000360:	414d      	adcs	r5, r1
 8000362:	2e00      	cmp	r6, #0
 8000364:	d006      	beq.n	8000374 <__udivmoddi4+0x108>
 8000366:	42ab      	cmp	r3, r5
 8000368:	d9ee      	bls.n	8000348 <__udivmoddi4+0xdc>
 800036a:	3e01      	subs	r6, #1
 800036c:	1924      	adds	r4, r4, r4
 800036e:	416d      	adcs	r5, r5
 8000370:	2e00      	cmp	r6, #0
 8000372:	d1f8      	bne.n	8000366 <__udivmoddi4+0xfa>
 8000374:	9800      	ldr	r0, [sp, #0]
 8000376:	9901      	ldr	r1, [sp, #4]
 8000378:	465b      	mov	r3, fp
 800037a:	1900      	adds	r0, r0, r4
 800037c:	4169      	adcs	r1, r5
 800037e:	2b00      	cmp	r3, #0
 8000380:	db24      	blt.n	80003cc <__udivmoddi4+0x160>
 8000382:	002b      	movs	r3, r5
 8000384:	465a      	mov	r2, fp
 8000386:	4644      	mov	r4, r8
 8000388:	40d3      	lsrs	r3, r2
 800038a:	002a      	movs	r2, r5
 800038c:	40e2      	lsrs	r2, r4
 800038e:	001c      	movs	r4, r3
 8000390:	465b      	mov	r3, fp
 8000392:	0015      	movs	r5, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	db2a      	blt.n	80003ee <__udivmoddi4+0x182>
 8000398:	0026      	movs	r6, r4
 800039a:	409e      	lsls	r6, r3
 800039c:	0033      	movs	r3, r6
 800039e:	0026      	movs	r6, r4
 80003a0:	4647      	mov	r7, r8
 80003a2:	40be      	lsls	r6, r7
 80003a4:	0032      	movs	r2, r6
 80003a6:	1a80      	subs	r0, r0, r2
 80003a8:	4199      	sbcs	r1, r3
 80003aa:	9000      	str	r0, [sp, #0]
 80003ac:	9101      	str	r1, [sp, #4]
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x84>
 80003b0:	42a3      	cmp	r3, r4
 80003b2:	d8bc      	bhi.n	800032e <__udivmoddi4+0xc2>
 80003b4:	e783      	b.n	80002be <__udivmoddi4+0x52>
 80003b6:	4642      	mov	r2, r8
 80003b8:	2320      	movs	r3, #32
 80003ba:	2100      	movs	r1, #0
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	2200      	movs	r2, #0
 80003c0:	9100      	str	r1, [sp, #0]
 80003c2:	9201      	str	r2, [sp, #4]
 80003c4:	2201      	movs	r2, #1
 80003c6:	40da      	lsrs	r2, r3
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	e786      	b.n	80002da <__udivmoddi4+0x6e>
 80003cc:	4642      	mov	r2, r8
 80003ce:	2320      	movs	r3, #32
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	4646      	mov	r6, r8
 80003d6:	409a      	lsls	r2, r3
 80003d8:	0023      	movs	r3, r4
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	4644      	mov	r4, r8
 80003de:	4313      	orrs	r3, r2
 80003e0:	002a      	movs	r2, r5
 80003e2:	40e2      	lsrs	r2, r4
 80003e4:	001c      	movs	r4, r3
 80003e6:	465b      	mov	r3, fp
 80003e8:	0015      	movs	r5, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dad4      	bge.n	8000398 <__udivmoddi4+0x12c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	002f      	movs	r7, r5
 80003f2:	2320      	movs	r3, #32
 80003f4:	0026      	movs	r6, r4
 80003f6:	4097      	lsls	r7, r2
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	40de      	lsrs	r6, r3
 80003fc:	003b      	movs	r3, r7
 80003fe:	4333      	orrs	r3, r6
 8000400:	e7cd      	b.n	800039e <__udivmoddi4+0x132>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__clzsi2>:
 8000404:	211c      	movs	r1, #28
 8000406:	2301      	movs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	4298      	cmp	r0, r3
 800040c:	d301      	bcc.n	8000412 <__clzsi2+0xe>
 800040e:	0c00      	lsrs	r0, r0, #16
 8000410:	3910      	subs	r1, #16
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	4298      	cmp	r0, r3
 8000416:	d301      	bcc.n	800041c <__clzsi2+0x18>
 8000418:	0a00      	lsrs	r0, r0, #8
 800041a:	3908      	subs	r1, #8
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	4298      	cmp	r0, r3
 8000420:	d301      	bcc.n	8000426 <__clzsi2+0x22>
 8000422:	0900      	lsrs	r0, r0, #4
 8000424:	3904      	subs	r1, #4
 8000426:	a202      	add	r2, pc, #8	; (adr r2, 8000430 <__clzsi2+0x2c>)
 8000428:	5c10      	ldrb	r0, [r2, r0]
 800042a:	1840      	adds	r0, r0, r1
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	02020304 	.word	0x02020304
 8000434:	01010101 	.word	0x01010101
	...

08000440 <__clzdi2>:
 8000440:	b510      	push	{r4, lr}
 8000442:	2900      	cmp	r1, #0
 8000444:	d103      	bne.n	800044e <__clzdi2+0xe>
 8000446:	f7ff ffdd 	bl	8000404 <__clzsi2>
 800044a:	3020      	adds	r0, #32
 800044c:	e002      	b.n	8000454 <__clzdi2+0x14>
 800044e:	0008      	movs	r0, r1
 8000450:	f7ff ffd8 	bl	8000404 <__clzsi2>
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	000a      	movs	r2, r1
 8000462:	1cfb      	adds	r3, r7, #3
 8000464:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <readRegister+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	2101      	movs	r1, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f003 f918 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000472:	2001      	movs	r0, #1
 8000474:	f002 f96a 	bl	800274c <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000478:	1cf9      	adds	r1, r7, #3
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	2201      	movs	r2, #1
 8000480:	f003 febe 	bl	8004200 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000484:	240f      	movs	r4, #15
 8000486:	1939      	adds	r1, r7, r4
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	2364      	movs	r3, #100	; 0x64
 800048c:	2201      	movs	r2, #1
 800048e:	f004 f80f 	bl	80044b0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f002 f95a 	bl	800274c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <readRegister+0x58>)
 800049a:	2201      	movs	r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	0018      	movs	r0, r3
 80004a0:	f003 f8ff 	bl	80036a2 <HAL_GPIO_WritePin>
	return rec;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	781b      	ldrb	r3, [r3, #0]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b005      	add	sp, #20
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	50000400 	.word	0x50000400

080004b4 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004b4:	b5b0      	push	{r4, r5, r7, lr}
 80004b6:	b08e      	sub	sp, #56	; 0x38
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	0008      	movs	r0, r1
 80004be:	607a      	str	r2, [r7, #4]
 80004c0:	0019      	movs	r1, r3
 80004c2:	240b      	movs	r4, #11
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	1c02      	adds	r2, r0, #0
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	230a      	movs	r3, #10
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	1c0a      	adds	r2, r1, #0
 80004d0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[30] = { 0 };
 80004d2:	2510      	movs	r5, #16
 80004d4:	197b      	adds	r3, r7, r5
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	3304      	adds	r3, #4
 80004dc:	221a      	movs	r2, #26
 80004de:	2100      	movs	r1, #0
 80004e0:	0018      	movs	r0, r3
 80004e2:	f004 fd0a 	bl	8004efa <memset>
	tx_data[0] = address | 0x80;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	4252      	negs	r2, r2
 80004ee:	4313      	orrs	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	197b      	adds	r3, r7, r5
 80004f4:	701a      	strb	r2, [r3, #0]
	int j = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004fa:	2301      	movs	r3, #1
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
 80004fe:	e00f      	b.n	8000520 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 8000500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	637a      	str	r2, [r7, #52]	; 0x34
 8000506:	001a      	movs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	189b      	adds	r3, r3, r2
 800050c:	7819      	ldrb	r1, [r3, #0]
 800050e:	2310      	movs	r3, #16
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	1c0a      	adds	r2, r1, #0
 8000518:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 800051a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800051c:	3301      	adds	r3, #1
 800051e:	633b      	str	r3, [r7, #48]	; 0x30
 8000520:	240a      	movs	r4, #10
 8000522:	193b      	adds	r3, r7, r4
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000528:	429a      	cmp	r2, r3
 800052a:	dde9      	ble.n	8000500 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <writeRegister+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	0018      	movs	r0, r3
 8000534:	f003 f8b5 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	3301      	adds	r3, #1
 8000540:	b29a      	uxth	r2, r3
 8000542:	23fa      	movs	r3, #250	; 0xfa
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	2110      	movs	r1, #16
 8000548:	1879      	adds	r1, r7, r1
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f003 fe58 	bl	8004200 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <writeRegister+0xbc>)
 8000552:	2201      	movs	r2, #1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f003 f8a3 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f002 f8f5 	bl	800274c <HAL_Delay>
	return cmd;  // pull the pin high
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	b2db      	uxtb	r3, r3
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b00e      	add	sp, #56	; 0x38
 800056c:	bdb0      	pop	{r4, r5, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	50000400 	.word	0x50000400

08000574 <setRFFrequency>:

void setRFFrequency(SX1278_t *module) {
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	0b51      	lsrs	r1, r2, #13
 8000584:	04dd      	lsls	r5, r3, #19
 8000586:	430d      	orrs	r5, r1
 8000588:	04d4      	lsls	r4, r2, #19
 800058a:	4a20      	ldr	r2, [pc, #128]	; (800060c <setRFFrequency+0x98>)
 800058c:	2300      	movs	r3, #0
 800058e:	0020      	movs	r0, r4
 8000590:	0029      	movs	r1, r5
 8000592:	f7ff fe4b 	bl	800022c <__aeabi_uldivmod>
 8000596:	0002      	movs	r2, r0
 8000598:	000b      	movs	r3, r1
 800059a:	623a      	str	r2, [r7, #32]
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	6a3a      	ldr	r2, [r7, #32]
 80005a4:	0c12      	lsrs	r2, r2, #16
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	431a      	orrs	r2, r3
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	0c1b      	lsrs	r3, r3, #16
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	7a3a      	ldrb	r2, [r7, #8]
 80005b6:	210c      	movs	r1, #12
 80005b8:	2010      	movs	r0, #16
 80005ba:	180b      	adds	r3, r1, r0
 80005bc:	19db      	adds	r3, r3, r7
 80005be:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	061b      	lsls	r3, r3, #24
 80005c4:	6a3a      	ldr	r2, [r7, #32]
 80005c6:	0a12      	lsrs	r2, r2, #8
 80005c8:	603a      	str	r2, [r7, #0]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	431a      	orrs	r2, r3
 80005ce:	603a      	str	r2, [r7, #0]
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	0a1b      	lsrs	r3, r3, #8
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	783a      	ldrb	r2, [r7, #0]
 80005d8:	180b      	adds	r3, r1, r0
 80005da:	19db      	adds	r3, r3, r7
 80005dc:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005de:	6a3a      	ldr	r2, [r7, #32]
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	1c13      	adds	r3, r2, #0
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	0004      	movs	r4, r0
 80005e8:	180b      	adds	r3, r1, r0
 80005ea:	19db      	adds	r3, r3, r7
 80005ec:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	239a      	movs	r3, #154	; 0x9a
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	58d0      	ldr	r0, [r2, r3]
 80005f6:	190b      	adds	r3, r1, r4
 80005f8:	19da      	adds	r2, r3, r7
 80005fa:	2303      	movs	r3, #3
 80005fc:	2106      	movs	r1, #6
 80005fe:	f7ff ff59 	bl	80004b4 <writeRegister>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b00a      	add	sp, #40	; 0x28
 8000608:	bdb0      	pop	{r4, r5, r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	01e84800 	.word	0x01e84800

08000610 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	239a      	movs	r3, #154	; 0x9a
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	58d0      	ldr	r0, [r2, r3]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3310      	adds	r3, #16
 8000624:	001a      	movs	r2, r3
 8000626:	2301      	movs	r3, #1
 8000628:	2109      	movs	r1, #9
 800062a:	f7ff ff43 	bl	80004b4 <writeRegister>
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b002      	add	sp, #8
 8000634:	bd80      	pop	{r7, pc}

08000636 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	239a      	movs	r3, #154	; 0x9a
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	58d0      	ldr	r0, [r2, r3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3316      	adds	r3, #22
 800064a:	001a      	movs	r2, r3
 800064c:	2301      	movs	r3, #1
 800064e:	2139      	movs	r1, #57	; 0x39
 8000650:	f7ff ff30 	bl	80004b4 <writeRegister>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}

0800065c <setOvercurrentProtect>:

void setOvercurrentProtect(SX1278_t *module) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	239a      	movs	r3, #154	; 0x9a
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	58d0      	ldr	r0, [r2, r3]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3317      	adds	r3, #23
 8000670:	001a      	movs	r2, r3
 8000672:	2301      	movs	r3, #1
 8000674:	210b      	movs	r1, #11
 8000676:	f7ff ff1d 	bl	80004b4 <writeRegister>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}

08000682 <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	239a      	movs	r3, #154	; 0x9a
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	58d0      	ldr	r0, [r2, r3]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	331a      	adds	r3, #26
 8000696:	001a      	movs	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	211f      	movs	r1, #31
 800069c:	f7ff ff0a 	bl	80004b4 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	239a      	movs	r3, #154	; 0x9a
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	58d0      	ldr	r0, [r2, r3]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	331c      	adds	r3, #28
 80006ac:	001a      	movs	r2, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	f7ff feff 	bl	80004b4 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	239a      	movs	r3, #154	; 0x9a
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	58d0      	ldr	r0, [r2, r3]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	331d      	adds	r3, #29
 80006c2:	001a      	movs	r2, r3
 80006c4:	2301      	movs	r3, #1
 80006c6:	2121      	movs	r1, #33	; 0x21
 80006c8:	f7ff fef4 	bl	80004b4 <writeRegister>
			1);
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 80006dc:	210f      	movs	r1, #15
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	cmd = module->LoRa_BW << 4;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c9b      	ldrb	r3, [r3, #18]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CR << 1;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7cdb      	ldrb	r3, [r3, #19]
 80006f4:	18db      	adds	r3, r3, r3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	000c      	movs	r4, r1
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	18d3      	adds	r3, r2, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	193b      	adds	r3, r7, r4
 8000704:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2221      	movs	r2, #33	; 0x21
 800070a:	5c9a      	ldrb	r2, [r3, r2]
 800070c:	193b      	adds	r3, r7, r4
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	18d3      	adds	r3, r2, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	193b      	adds	r3, r7, r4
 8000716:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	239a      	movs	r3, #154	; 0x9a
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	58d0      	ldr	r0, [r2, r3]
 8000720:	193a      	adds	r2, r7, r4
 8000722:	2301      	movs	r3, #1
 8000724:	211d      	movs	r1, #29
 8000726:	f7ff fec5 	bl	80004b4 <writeRegister>

	cmd = module->LoRa_SF << 4;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7c5b      	ldrb	r3, [r3, #17]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2da      	uxtb	r2, r3
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d1b      	ldrb	r3, [r3, #20]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	18d3      	adds	r3, r2, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	187b      	adds	r3, r7, r1
 800074a:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7eda      	ldrb	r2, [r3, #27]
 8000750:	187b      	adds	r3, r7, r1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	239a      	movs	r3, #154	; 0x9a
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	58d0      	ldr	r0, [r2, r3]
 8000764:	187a      	adds	r2, r7, r1
 8000766:	2301      	movs	r3, #1
 8000768:	211e      	movs	r1, #30
 800076a:	f7ff fea3 	bl	80004b4 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	239a      	movs	r3, #154	; 0x9a
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	58d0      	ldr	r0, [r2, r3]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3319      	adds	r3, #25
 800077a:	001a      	movs	r2, r3
 800077c:	2301      	movs	r3, #1
 800077e:	2126      	movs	r1, #38	; 0x26
 8000780:	f7ff fe98 	bl	80004b4 <writeRegister>
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b005      	add	sp, #20
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <setDetectionParameters>:

void setDetectionParameters(SX1278_t *module) {
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	239a      	movs	r3, #154	; 0x9a
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	58d3      	ldr	r3, [r2, r3]
 800079c:	2131      	movs	r1, #49	; 0x31
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fe5a 	bl	8000458 <readRegister>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	210f      	movs	r1, #15
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2207      	movs	r2, #7
 80007b4:	4393      	bics	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2205      	movs	r2, #5
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	239a      	movs	r3, #154	; 0x9a
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	58d0      	ldr	r0, [r2, r3]
 80007d2:	000c      	movs	r4, r1
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	2301      	movs	r3, #1
 80007d8:	2131      	movs	r1, #49	; 0x31
 80007da:	f7ff fe6b 	bl	80004b4 <writeRegister>
	tmp = 0x0C;
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	220c      	movs	r2, #12
 80007e4:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	239a      	movs	r3, #154	; 0x9a
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	58d0      	ldr	r0, [r2, r3]
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	2301      	movs	r3, #1
 80007f2:	2137      	movs	r1, #55	; 0x37
 80007f4:	f7ff fe5e 	bl	80004b4 <writeRegister>
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b005      	add	sp, #20
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <readOperatingMode>:

SX1278_Status_t readOperatingMode(SX1278_t *module) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	module->operatingMode = (0x07 & readRegister(module->spi,
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	239a      	movs	r3, #154	; 0x9a
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	58d3      	ldr	r3, [r2, r3]
 8000810:	2101      	movs	r1, #1
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fe20 	bl	8000458 <readRegister>
 8000818:	0003      	movs	r3, r0
 800081a:	001a      	movs	r2, r3
 800081c:	2307      	movs	r3, #7
 800081e:	4013      	ands	r3, r2
 8000820:	b2d9      	uxtb	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	222c      	movs	r2, #44	; 0x2c
 8000826:	5499      	strb	r1, [r3, r2]
	LR_RegOpMode));
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}

08000832 <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	000a      	movs	r2, r1
 800083c:	1cfb      	adds	r3, r7, #3
 800083e:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2278      	movs	r2, #120	; 0x78
 8000846:	4252      	negs	r2, r2
 8000848:	4313      	orrs	r3, r2
 800084a:	b2da      	uxtb	r2, r3
 800084c:	210f      	movs	r1, #15
 800084e:	187b      	adds	r3, r7, r1
 8000850:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	239a      	movs	r3, #154	; 0x9a
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	58d0      	ldr	r0, [r2, r3]
 800085a:	187a      	adds	r2, r7, r1
 800085c:	2301      	movs	r3, #1
 800085e:	2101      	movs	r1, #1
 8000860:	f7ff fe28 	bl	80004b4 <writeRegister>
	module->operatingMode = mode;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1cfa      	adds	r2, r7, #3
 8000868:	212c      	movs	r1, #44	; 0x2c
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	545a      	strb	r2, [r3, r1]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}

08000876 <clearIrqFlags>:

void clearIrqFlags(SX1278_t *module) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 800087e:	210f      	movs	r1, #15
 8000880:	187b      	adds	r3, r7, r1
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	239a      	movs	r3, #154	; 0x9a
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	58d0      	ldr	r0, [r2, r3]
 800088e:	187a      	adds	r2, r7, r1
 8000890:	2301      	movs	r3, #1
 8000892:	2112      	movs	r1, #18
 8000894:	f7ff fe0e 	bl	80004b4 <writeRegister>
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b004      	add	sp, #16
 800089e:	bd80      	pop	{r7, pc}

080008a0 <writeLoRaParameters>:

void writeLoRaParameters(SX1278_t *module) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2100      	movs	r1, #0
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff ffc0 	bl	8000832 <updateLoraLowFreq>
	HAL_Delay(15);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f001 ff4a 	bl	800274c <HAL_Delay>
	setRFFrequency(module);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff fe5a 	bl	8000574 <setRFFrequency>
	setLORAWAN(module);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff feb7 	bl	8000636 <setLORAWAN>
	setOutputPower(module);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fea0 	bl	8000610 <setOutputPower>
	setOvercurrentProtect(module);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fec2 	bl	800065c <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	239a      	movs	r3, #154	; 0x9a
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	58d0      	ldr	r0, [r2, r3]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3318      	adds	r3, #24
 80008e4:	001a      	movs	r2, r3
 80008e6:	2301      	movs	r3, #1
 80008e8:	210c      	movs	r1, #12
 80008ea:	f7ff fde3 	bl	80004b4 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7c5b      	ldrb	r3, [r3, #17]
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d10b      	bne.n	800090e <writeLoRaParameters+0x6e>
		module->headerMode = IMPLICIT;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2221      	movs	r2, #33	; 0x21
 80008fa:	2101      	movs	r1, #1
 80008fc:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x03;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2203      	movs	r2, #3
 8000902:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff ff40 	bl	800078c <setDetectionParameters>
 800090c:	e006      	b.n	800091c <writeLoRaParameters+0x7c>
	} else {
		module->headerMode = EXPLICIT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2221      	movs	r2, #33	; 0x21
 8000912:	2100      	movs	r1, #0
 8000914:	5499      	strb	r1, [r3, r2]
		module->symbTimeoutMsb = 0x00;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fed8 	bl	80006d4 <setReModemConfig>
	setPreambleParameters(module);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff feab 	bl	8000682 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	239a      	movs	r3, #154	; 0x9a
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	58d0      	ldr	r0, [r2, r3]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	331e      	adds	r3, #30
 8000938:	001a      	movs	r2, r3
 800093a:	2301      	movs	r3, #1
 800093c:	2124      	movs	r1, #36	; 0x24
 800093e:	f7ff fdb9 	bl	80004b4 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	239a      	movs	r3, #154	; 0x9a
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	58d0      	ldr	r0, [r2, r3]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	331f      	adds	r3, #31
 800094e:	001a      	movs	r2, r3
 8000950:	2301      	movs	r3, #1
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	f7ff fdae 	bl	80004b4 <writeRegister>
	clearIrqFlags(module);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff ff8b 	bl	8000876 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	239a      	movs	r3, #154	; 0x9a
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	58d0      	ldr	r0, [r2, r3]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3320      	adds	r3, #32
 800096c:	001a      	movs	r2, r3
 800096e:	2301      	movs	r3, #1
 8000970:	2111      	movs	r1, #17
 8000972:	f7ff fd9f 	bl	80004b4 <writeRegister>
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <updateMode>:

void updateMode(SX1278_t *module, Lora_Mode_t mode) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	000a      	movs	r2, r1
 800098a:	1cfb      	adds	r3, r7, #3
 800098c:	701a      	strb	r2, [r3, #0]
	if (mode == MASTER) {
 800098e:	1cfb      	adds	r3, r7, #3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11e      	bne.n	80009d4 <updateMode+0x54>
		module->frequency = UPLINK_FREQ;
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <updateMode+0x100>)
 800099a:	2300      	movs	r3, #0
 800099c:	608a      	str	r2, [r1, #8]
 800099e:	60cb      	str	r3, [r1, #12]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2241      	movs	r2, #65	; 0x41
 80009a4:	77da      	strb	r2, [r3, #31]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2220      	movs	r2, #32
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	5499      	strb	r1, [r3, r2]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2220      	movs	r2, #32
 80009b2:	5c9b      	ldrb	r3, [r3, r2]
 80009b4:	2208      	movs	r2, #8
 80009b6:	4393      	bics	r3, r2
 80009b8:	b2d9      	uxtb	r1, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2220      	movs	r2, #32
 80009be:	5499      	strb	r1, [r3, r2]
		module->mode = mode;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	1cfa      	adds	r2, r7, #3
 80009c4:	212d      	movs	r1, #45	; 0x2d
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	545a      	strb	r2, [r3, r1]
		module->currentStatus = TX_READY;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	222e      	movs	r2, #46	; 0x2e
 80009ce:	2101      	movs	r1, #1
 80009d0:	5499      	strb	r1, [r3, r2]
 80009d2:	e02a      	b.n	8000a2a <updateMode+0xaa>

	} else if (mode == SLAVE) {
 80009d4:	1cfb      	adds	r3, r7, #3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d126      	bne.n	8000a2a <updateMode+0xaa>
		module->frequency = DOWNLINK_FREQ;
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <updateMode+0x104>)
 80009e0:	2300      	movs	r3, #0
 80009e2:	608a      	str	r2, [r1, #8]
 80009e4:	60cb      	str	r3, [r1, #12]
		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2201      	movs	r2, #1
 80009ea:	77da      	strb	r2, [r3, #31]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2220      	movs	r2, #32
 80009f0:	21ff      	movs	r1, #255	; 0xff
 80009f2:	5499      	strb	r1, [r3, r2]
		CLEAR_BIT(module->flagsMode, RX_DONE_MASK);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2220      	movs	r2, #32
 80009f8:	5c9b      	ldrb	r3, [r3, r2]
 80009fa:	2240      	movs	r2, #64	; 0x40
 80009fc:	4393      	bics	r3, r2
 80009fe:	b2d9      	uxtb	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2220      	movs	r2, #32
 8000a04:	5499      	strb	r1, [r3, r2]
		CLEAR_BIT(module->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2220      	movs	r2, #32
 8000a0a:	5c9b      	ldrb	r3, [r3, r2]
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	4393      	bics	r3, r2
 8000a10:	b2d9      	uxtb	r1, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2220      	movs	r2, #32
 8000a16:	5499      	strb	r1, [r3, r2]
		module->mode = mode;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1cfa      	adds	r2, r7, #3
 8000a1c:	212d      	movs	r1, #45	; 0x2d
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	545a      	strb	r2, [r3, r1]
		module->currentStatus = RX_READY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	222e      	movs	r2, #46	; 0x2e
 8000a26:	2102      	movs	r1, #2
 8000a28:	5499      	strb	r1, [r3, r2]
	}
	updateLoraLowFreq(module, STANDBY);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff feff 	bl	8000832 <updateLoraLowFreq>
	HAL_Delay(15);
 8000a34:	200f      	movs	r0, #15
 8000a36:	f001 fe89 	bl	800274c <HAL_Delay>
	setRFFrequency(module);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff fd99 	bl	8000574 <setRFFrequency>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	239a      	movs	r3, #154	; 0x9a
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	58d0      	ldr	r0, [r2, r3]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	331f      	adds	r3, #31
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	f7ff fd2e 	bl	80004b4 <writeRegister>
	clearIrqFlags(module);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff0b 	bl	8000876 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	239a      	movs	r3, #154	; 0x9a
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	58d0      	ldr	r0, [r2, r3]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3320      	adds	r3, #32
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2111      	movs	r1, #17
 8000a72:	f7ff fd1f 	bl	80004b4 <writeRegister>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	0a21fe80 	.word	0x0a21fe80
 8000a84:	08f0d180 	.word	0x08f0d180

08000a88 <initLoRaParameters>:

void initLoRaParameters(SX1278_t *module, Lora_Mode_t mode) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	000a      	movs	r2, r1
 8000a92:	1cfb      	adds	r3, r7, #3
 8000a94:	701a      	strb	r2, [r3, #0]
	module->power = SX1278_POWER_17DBM;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	22fc      	movs	r2, #252	; 0xfc
 8000a9a:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = SF_10;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LORABW_62_5KHZ;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LORA_CR_4_6;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2202      	movs	r2, #2
 8000aac:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = CRC_ENABLE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	751a      	strb	r2, [r3, #20]
	module->syncWord = LORAWAN;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2234      	movs	r2, #52	; 0x34
 8000ab8:	759a      	strb	r2, [r3, #22]
	module->ocp = OVERCURRENTPROTECT;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	220b      	movs	r2, #11
 8000abe:	75da      	strb	r2, [r3, #23]
	module->lnaGain = LNAGAIN;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2223      	movs	r2, #35	; 0x23
 8000ac4:	761a      	strb	r2, [r3, #24]
	module->AgcAutoOn = LNA_SET_BY_AGC;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2204      	movs	r2, #4
 8000aca:	765a      	strb	r2, [r3, #25]
	module->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2208      	movs	r2, #8
 8000ad0:	769a      	strb	r2, [r3, #26]
	module->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	771a      	strb	r2, [r3, #28]
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2208      	movs	r2, #8
 8000adc:	775a      	strb	r2, [r3, #29]
	module->fhssValue = HOPS_PERIOD;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	779a      	strb	r2, [r3, #30]
	module->len = SX1278_MAX_PACKET;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
	updateMode(module, mode);
 8000aea:	1cfb      	adds	r3, r7, #3
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff ff44 	bl	8000980 <updateMode>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <setRxFifoAddr>:

void setRxFifoAddr(SX1278_t *module) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff fe90 	bl	8000832 <updateLoraLowFreq>
	uint8_t cmd = module->len;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7d5a      	ldrb	r2, [r3, #21]
 8000b16:	210f      	movs	r1, #15
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	239a      	movs	r3, #154	; 0x9a
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	58d0      	ldr	r0, [r2, r3]
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	2301      	movs	r3, #1
 8000b28:	2122      	movs	r1, #34	; 0x22
 8000b2a:	f7ff fcc3 	bl	80004b4 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	239a      	movs	r3, #154	; 0x9a
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	58d3      	ldr	r3, [r2, r3]
 8000b36:	210f      	movs	r1, #15
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fc8d 	bl	8000458 <readRegister>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	001a      	movs	r2, r3
 8000b42:	210e      	movs	r1, #14
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	239a      	movs	r3, #154	; 0x9a
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	58d0      	ldr	r0, [r2, r3]
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	2301      	movs	r3, #1
 8000b54:	210d      	movs	r1, #13
 8000b56:	f7ff fcad 	bl	80004b4 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	239a      	movs	r3, #154	; 0x9a
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	58d3      	ldr	r3, [r2, r3]
 8000b62:	2122      	movs	r1, #34	; 0x22
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff fc77 	bl	8000458 <readRegister>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	755a      	strb	r2, [r3, #21]
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <crcErrorActivation>:

int crcErrorActivation(SX1278_t *module) {
 8000b7a:	b5b0      	push	{r4, r5, r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(module->spi, LR_RegIrqFlags);
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	239a      	movs	r3, #154	; 0x9a
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	58d3      	ldr	r3, [r2, r3]
 8000b8a:	2517      	movs	r5, #23
 8000b8c:	197c      	adds	r4, r7, r5
 8000b8e:	2112      	movs	r1, #18
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fc61 	bl	8000458 <readRegister>
 8000b96:	0003      	movs	r3, r0
 8000b98:	7023      	strb	r3, [r4, #0]
	SET_BIT(flags2, RX_DONE_MASK);
 8000b9a:	0028      	movs	r0, r5
 8000b9c:	183b      	adds	r3, r7, r0
 8000b9e:	183a      	adds	r2, r7, r0
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = flags2;
 8000ba8:	210f      	movs	r1, #15
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	183a      	adds	r2, r7, r0
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	239a      	movs	r3, #154	; 0x9a
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	58d0      	ldr	r0, [r2, r3]
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2112      	movs	r1, #18
 8000bc0:	f7ff fc78 	bl	80004b4 <writeRegister>
	uint8_t flags = readRegister(module->spi, LR_RegIrqFlags);
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	239a      	movs	r3, #154	; 0x9a
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	58d3      	ldr	r3, [r2, r3]
 8000bcc:	2516      	movs	r5, #22
 8000bce:	197c      	adds	r4, r7, r5
 8000bd0:	2112      	movs	r1, #18
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff fc40 	bl	8000458 <readRegister>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	7023      	strb	r3, [r4, #0]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8000bdc:	197b      	adds	r3, r7, r5
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2220      	movs	r2, #32
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
	return errorActivation;
 8000be6:	693b      	ldr	r3, [r7, #16]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bdb0      	pop	{r4, r5, r7, pc}

08000bf0 <getRxFifoData>:

void getRxFifoData(SX1278_t *module) {
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	module->len = readRegister(module->spi, LR_RegRxNbBytes); //Number for received bytes
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	239a      	movs	r3, #154	; 0x9a
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	58d3      	ldr	r3, [r2, r3]
 8000c00:	2113      	movs	r1, #19
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fc28 	bl	8000458 <readRegister>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 8000c10:	240f      	movs	r4, #15
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <getRxFifoData+0x88>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 fd3f 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f001 fd91 	bl	800274c <HAL_Delay>
	HAL_SPI_Transmit(module->spi, &addr, 1, 100); // send address
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	239a      	movs	r3, #154	; 0x9a
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	58d0      	ldr	r0, [r2, r3]
 8000c32:	1939      	adds	r1, r7, r4
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	2201      	movs	r2, #1
 8000c38:	f003 fae2 	bl	8004200 <HAL_SPI_Transmit>
	HAL_SPI_Receive(module->spi, module->buffer, module->len, 100); // receive 6 bytes data
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	239a      	movs	r3, #154	; 0x9a
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	58d0      	ldr	r0, [r2, r3]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3330      	adds	r3, #48	; 0x30
 8000c48:	0019      	movs	r1, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7d5b      	ldrb	r3, [r3, #21]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	f003 fc2d 	bl	80044b0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f001 fd78 	bl	800274c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <getRxFifoData+0x88>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2101      	movs	r1, #1
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fd1d 	bl	80036a2 <HAL_GPIO_WritePin>
	module->currentStatus = RX_DONE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	222e      	movs	r2, #46	; 0x2e
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	5499      	strb	r1, [r3, r2]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b005      	add	sp, #20
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	50000400 	.word	0x50000400

08000c7c <setTxFifoAddr>:

void setTxFifoAddr(SX1278_t *module) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7d5a      	ldrb	r2, [r3, #21]
 8000c88:	210f      	movs	r1, #15
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	239a      	movs	r3, #154	; 0x9a
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	58d0      	ldr	r0, [r2, r3]
 8000c96:	187a      	adds	r2, r7, r1
 8000c98:	2301      	movs	r3, #1
 8000c9a:	2122      	movs	r1, #34	; 0x22
 8000c9c:	f7ff fc0a 	bl	80004b4 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	239a      	movs	r3, #154	; 0x9a
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	210e      	movs	r1, #14
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fbd4 	bl	8000458 <readRegister>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	210e      	movs	r1, #14
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
	addr = 0x80;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	239a      	movs	r3, #154	; 0x9a
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	58d0      	ldr	r0, [r2, r3]
 8000cc8:	187a      	adds	r2, r7, r1
 8000cca:	2301      	movs	r3, #1
 8000ccc:	210d      	movs	r1, #13
 8000cce:	f7ff fbf1 	bl	80004b4 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	239a      	movs	r3, #154	; 0x9a
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	2122      	movs	r1, #34	; 0x22
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fbbb 	bl	8000458 <readRegister>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	755a      	strb	r2, [r3, #21]
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <setTxFifoData>:

void setTxFifoData(SX1278_t *module) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	setTxFifoAddr(module);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ffbd 	bl	8000c7c <setTxFifoAddr>
	for (int i = 0; i < module->len; i++) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e014      	b.n	8000d32 <setTxFifoData+0x40>
		uint8_t data = module->buffer[i];
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	2130      	movs	r1, #48	; 0x30
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	18d3      	adds	r3, r2, r3
 8000d10:	185b      	adds	r3, r3, r1
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	210b      	movs	r1, #11
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	701a      	strb	r2, [r3, #0]
		writeRegister(module->spi, 0x00, &data, 1);
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	239a      	movs	r3, #154	; 0x9a
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	58d0      	ldr	r0, [r2, r3]
 8000d22:	187a      	adds	r2, r7, r1
 8000d24:	2301      	movs	r3, #1
 8000d26:	2100      	movs	r1, #0
 8000d28:	f7ff fbc4 	bl	80004b4 <writeRegister>
	for (int i = 0; i < module->len; i++) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7d5b      	ldrb	r3, [r3, #21]
 8000d36:	001a      	movs	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dbe4      	blt.n	8000d08 <setTxFifoData+0x16>
	}
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <clearMemForRx>:

void clearMemForRx(SX1278_t *module) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if (module->currentStatus == RX_READY) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	222e      	movs	r2, #46	; 0x2e
 8000d54:	5c9b      	ldrb	r3, [r3, r2]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d107      	bne.n	8000d6a <clearMemForRx+0x22>
		memset(module->buffer, 0, SX1278_MAX_PACKET);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3330      	adds	r3, #48	; 0x30
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	0052      	lsls	r2, r2, #1
 8000d62:	2100      	movs	r1, #0
 8000d64:	0018      	movs	r0, r3
 8000d66:	f004 f8c8 	bl	8004efa <memset>
	}
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE7_0);
 8000d7c:	23a0      	movs	r3, #160	; 0xa0
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	01c9      	lsls	r1, r1, #7
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE7_1);
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	23a0      	movs	r3, #160	; 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	4911      	ldr	r1, [pc, #68]	; (8000de0 <ledInit+0x6c>)
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE0_0);
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <ledInit+0x70>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <ledInit+0x70>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE0_1);
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <ledInit+0x70>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <ledInit+0x70>)
 8000db0:	2102      	movs	r1, #2
 8000db2:	438a      	bics	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE1_0);
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <ledInit+0x70>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <ledInit+0x70>)
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE1_1);
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <ledInit+0x70>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <ledInit+0x70>)
 8000dc8:	2108      	movs	r1, #8
 8000dca:	438a      	bics	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
	led_reset(led);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f809 	bl	8000de8 <led_reset>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	ffff7fff 	.word	0xffff7fff
 8000de4:	50000400 	.word	0x50000400

08000de8 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000e02:	f001 fc99 	bl	8002738 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <USART1_IRQHandler>:
UART1_t *uart1_ptr;
Vlad_t *vlad_ptr;
RS485_t *rs485_ptr;
SX1278_t *lora_ptr;

void USART1_IRQHandler(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <USART1_IRQHandler+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 fb47 	bl	80024c4 <uart1_read_to_frame>
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000178 	.word	0x20000178

08000e40 <sx1278Reset>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void sx1278Reset() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <sx1278Reset+0x3c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f002 fc29 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <sx1278Reset+0x3c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f002 fc23 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f001 fc75 	bl	800274c <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <sx1278Reset+0x3c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 fc1a 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f001 fc6c 	bl	800274c <HAL_Delay>
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	50000400 	.word	0x50000400

08000e80 <modeCmdUpdate>:
}

bool TX_MODE;
bool RX_MODE;

void modeCmdUpdate(const UART1_t *uart1, SX1278_t *loRa) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	unsigned long receiveValue;
	receiveValue = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 8;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5];
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <modeCmdUpdate+0x3c>
		RX_MODE = true;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <modeCmdUpdate+0x60>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
		TX_MODE = false;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <modeCmdUpdate+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
		loRa->currentStatus = UNKNOW;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	222e      	movs	r2, #46	; 0x2e
 8000eb8:	2100      	movs	r1, #0
 8000eba:	5499      	strb	r1, [r3, r2]
	}
	if (receiveValue == 1) {
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <modeCmdUpdate+0x56>
		TX_MODE = true;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <modeCmdUpdate+0x64>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		RX_MODE = false;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <modeCmdUpdate+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
		loRa->currentStatus = UNKNOW;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	222e      	movs	r2, #46	; 0x2e
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]
	}
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	20000189 	.word	0x20000189
 8000ee4:	20000188 	.word	0x20000188

08000ee8 <encodeVLAD>:

void encodeVLAD(uint8_t *frame) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t crc_frame[2];
	uint16_t crc;
	uint8_t data_length = 12;
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	701a      	strb	r2, [r3, #0]
	uint8_t id = ID1;
 8000ef8:	200e      	movs	r0, #14
 8000efa:	183b      	adds	r3, r7, r0
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
if (id == ID1){
 8000f00:	183b      	adds	r3, r7, r0
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d165      	bne.n	8000fd4 <encodeVLAD+0xec>
	frame[0] = LTEL_START_MARK;
 8000f08:	227e      	movs	r2, #126	; 0x7e
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	701a      	strb	r2, [r3, #0]
	frame[1] = VLAD;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	2205      	movs	r2, #5
 8000f14:	701a      	strb	r2, [r3, #0]
	frame[2] = ID1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
	frame[3] = QUERY_PARAMETERS_VLAD;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3303      	adds	r3, #3
 8000f22:	2211      	movs	r2, #17
 8000f24:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x00;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
	frame[5] = data_length;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3305      	adds	r3, #5
 8000f32:	187a      	adds	r2, r7, r1
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	701a      	strb	r2, [r3, #0]
	frame[6] = 0x00;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3306      	adds	r3, #6
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	frame[7] = 12;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3307      	adds	r3, #7
 8000f44:	220c      	movs	r2, #12
 8000f46:	701a      	strb	r2, [r3, #0]
	frame[8] = 0x00;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	frame[9] = 200;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3309      	adds	r3, #9
 8000f54:	22c8      	movs	r2, #200	; 0xc8
 8000f56:	701a      	strb	r2, [r3, #0]
	frame[10] = 0x00;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	330a      	adds	r3, #10
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
	frame[11] = 230;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	330b      	adds	r3, #11
 8000f64:	22e6      	movs	r2, #230	; 0xe6
 8000f66:	701a      	strb	r2, [r3, #0]
	frame[12] = 0x00;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	330c      	adds	r3, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	frame[13] = 112;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	330d      	adds	r3, #13
 8000f74:	2270      	movs	r2, #112	; 0x70
 8000f76:	701a      	strb	r2, [r3, #0]
	frame[14] = 10;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	330e      	adds	r3, #14
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	701a      	strb	r2, [r3, #0]
	frame[15] = 4;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	330f      	adds	r3, #15
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
	frame[16] = 5;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	701a      	strb	r2, [r3, #0]
	frame[17] = 6;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3311      	adds	r3, #17
 8000f94:	2206      	movs	r2, #6
 8000f96:	701a      	strb	r2, [r3, #0]

	crc = crc_get(&(frame[1]), 17);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	2111      	movs	r1, #17
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fe7e 	bl	8001ca0 <crc_get>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	200a      	movs	r0, #10
 8000faa:	183b      	adds	r3, r7, r0
 8000fac:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8000fae:	210c      	movs	r1, #12
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	183a      	adds	r2, r7, r0
 8000fb4:	8812      	ldrh	r2, [r2, #0]
 8000fb6:	801a      	strh	r2, [r3, #0]
	frame[18] = crc_frame[0];
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3312      	adds	r3, #18
 8000fbc:	187a      	adds	r2, r7, r1
 8000fbe:	7812      	ldrb	r2, [r2, #0]
 8000fc0:	701a      	strb	r2, [r3, #0]
	frame[19] = crc_frame[1];
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3313      	adds	r3, #19
 8000fc6:	187a      	adds	r2, r7, r1
 8000fc8:	7852      	ldrb	r2, [r2, #1]
 8000fca:	701a      	strb	r2, [r3, #0]
	frame[20] = LTEL_END_MARK;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	227f      	movs	r2, #127	; 0x7f
 8000fd2:	701a      	strb	r2, [r3, #0]
}
if(id == ID2){
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d166      	bne.n	80010ac <encodeVLAD+0x1c4>
	frame[0] = LTEL_START_MARK;
 8000fde:	227e      	movs	r2, #126	; 0x7e
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	701a      	strb	r2, [r3, #0]
	frame[1] = VLAD;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	2205      	movs	r2, #5
 8000fea:	701a      	strb	r2, [r3, #0]
	frame[2] = ID2;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	701a      	strb	r2, [r3, #0]
	frame[3] = QUERY_PARAMETERS_VLAD;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	2211      	movs	r2, #17
 8000ffa:	701a      	strb	r2, [r3, #0]
	frame[4] = 0x00;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3304      	adds	r3, #4
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	frame[5] = data_length;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3305      	adds	r3, #5
 8001008:	220f      	movs	r2, #15
 800100a:	18ba      	adds	r2, r7, r2
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	701a      	strb	r2, [r3, #0]
	frame[6] = 0x00;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3306      	adds	r3, #6
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	frame[7] = 28;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3307      	adds	r3, #7
 800101c:	221c      	movs	r2, #28
 800101e:	701a      	strb	r2, [r3, #0]
	frame[8] = 0x00;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3308      	adds	r3, #8
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	frame[9] = 250;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3309      	adds	r3, #9
 800102c:	22fa      	movs	r2, #250	; 0xfa
 800102e:	701a      	strb	r2, [r3, #0]
	frame[10] = 0x00;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	330a      	adds	r3, #10
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	frame[11] = 333;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	330b      	adds	r3, #11
 800103c:	224d      	movs	r2, #77	; 0x4d
 800103e:	701a      	strb	r2, [r3, #0]
	frame[12] = 0x00;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	330c      	adds	r3, #12
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	frame[13] = 101;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	330d      	adds	r3, #13
 800104c:	2265      	movs	r2, #101	; 0x65
 800104e:	701a      	strb	r2, [r3, #0]
	frame[14] = 20;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	330e      	adds	r3, #14
 8001054:	2214      	movs	r2, #20
 8001056:	701a      	strb	r2, [r3, #0]
	frame[15] = 19;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	330f      	adds	r3, #15
 800105c:	2213      	movs	r2, #19
 800105e:	701a      	strb	r2, [r3, #0]
	frame[16] = 10;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3310      	adds	r3, #16
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]
	frame[17] = 8;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3311      	adds	r3, #17
 800106c:	2208      	movs	r2, #8
 800106e:	701a      	strb	r2, [r3, #0]

	crc = crc_get(&(frame[1]), 17);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3301      	adds	r3, #1
 8001074:	2111      	movs	r1, #17
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fe12 	bl	8001ca0 <crc_get>
 800107c:	0003      	movs	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	200a      	movs	r0, #10
 8001082:	183b      	adds	r3, r7, r0
 8001084:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8001086:	210c      	movs	r1, #12
 8001088:	187b      	adds	r3, r7, r1
 800108a:	183a      	adds	r2, r7, r0
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	801a      	strh	r2, [r3, #0]
	frame[18] = crc_frame[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3312      	adds	r3, #18
 8001094:	187a      	adds	r2, r7, r1
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	701a      	strb	r2, [r3, #0]
	frame[19] = crc_frame[1];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3313      	adds	r3, #19
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	7852      	ldrb	r2, [r2, #1]
 80010a2:	701a      	strb	r2, [r3, #0]
	frame[20] = LTEL_END_MARK;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3314      	adds	r3, #20
 80010a8:	227f      	movs	r2, #127	; 0x7f
 80010aa:	701a      	strb	r2, [r3, #0]
}
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <modeRs485Update>:

void modeRs485Update(const UART1_t *uart1, RS485_t *rs485, SX1278_t *loRa) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	switch (rs485->cmd) {
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b11      	cmp	r3, #17
 80010c6:	d00f      	beq.n	80010e8 <modeRs485Update+0x34>
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d109      	bne.n	80010e0 <modeRs485Update+0x2c>
	case QUERY_PARAMETERS_VLAD: //cmd = 11
		break;
	case SET_VLAD_MODE: //cmd = 12
		modeCmdUpdate(uart1, loRa);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fed4 	bl	8000e80 <modeCmdUpdate>
		rs485->cmd = NONE;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		break;
 80010de:	e004      	b.n	80010ea <modeRs485Update+0x36>
	default:
		rs485->cmd = NONE;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		break;
 80010e6:	e000      	b.n	80010ea <modeRs485Update+0x36>
		break;
 80010e8:	46c0      	nop			; (mov r8, r8)
	}
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <printStatus>:

void printStatus(UART1_t *uart1, Rs485_status_t status, RS485_t *rs485) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b0d9      	sub	sp, #356	; 0x164
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <printStatus+0x74>)
 8001100:	24b0      	movs	r4, #176	; 0xb0
 8001102:	0064      	lsls	r4, r4, #1
 8001104:	191b      	adds	r3, r3, r4
 8001106:	19db      	adds	r3, r3, r7
 8001108:	1c0a      	adds	r2, r1, #0
 800110a:	701a      	strb	r2, [r3, #0]
	char rs485_msgs[11][30] = { "DATA OK", "START READING", "VALID FRAME",
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <printStatus+0x78>)
 800110e:	191b      	adds	r3, r3, r4
 8001110:	19da      	adds	r2, r3, r7
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <printStatus+0x7c>)
 8001114:	0010      	movs	r0, r2
 8001116:	0019      	movs	r1, r3
 8001118:	23a5      	movs	r3, #165	; 0xa5
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	001a      	movs	r2, r3
 800111e:	f003 fee3 	bl	8004ee8 <memcpy>
			"NOT VALID FRAME", "WRONG MODULE FUNCTION", "WRONG MODULE ID",
			"CRC ERROR", "DONE", "WAITING", "VALID MODULE", "CHECK LORA DATA" };
	if (rs485->status == rs485->lastStatus)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2266      	movs	r2, #102	; 0x66
 8001126:	5c9a      	ldrb	r2, [r3, r2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2167      	movs	r1, #103	; 0x67
 800112c:	5c5b      	ldrb	r3, [r3, r1]
 800112e:	429a      	cmp	r2, r3
 8001130:	d016      	beq.n	8001160 <printStatus+0x6c>
		return;
	rs485->lastStatus = rs485->status;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2266      	movs	r2, #102	; 0x66
 8001136:	5c99      	ldrb	r1, [r3, r2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2267      	movs	r2, #103	; 0x67
 800113c:	5499      	strb	r1, [r3, r2]
	cleanByTimeout(uart1, rs485_msgs[status]);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <printStatus+0x74>)
 8001140:	191b      	adds	r3, r3, r4
 8001142:	19db      	adds	r3, r3, r7
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	2314      	movs	r3, #20
 8001148:	18f9      	adds	r1, r7, r3
 800114a:	0013      	movs	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	18ca      	adds	r2, r1, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f001 f861 	bl	8002220 <cleanByTimeout>
 800115e:	e000      	b.n	8001162 <printStatus+0x6e>
		return;
 8001160:	46c0      	nop			; (mov r8, r8)
}
 8001162:	46bd      	mov	sp, r7
 8001164:	b059      	add	sp, #356	; 0x164
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	fffffeab 	.word	0xfffffeab
 800116c:	fffffeb4 	.word	0xfffffeb4
 8001170:	08005808 	.word	0x08005808

08001174 <printLoRaStatus>:

void printLoRaStatus(UART1_t *uart1, SX1278_t *loRa) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b08b      	sub	sp, #44	; 0x2c
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	SX1278_Status_t status = loRa->currentStatus;
 800117e:	201f      	movs	r0, #31
 8001180:	183b      	adds	r3, r7, r0
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	212e      	movs	r1, #46	; 0x2e
 8001186:	5c52      	ldrb	r2, [r2, r1]
 8001188:	701a      	strb	r2, [r3, #0]
	uint8_t len = 0;
 800118a:	241e      	movs	r4, #30
 800118c:	193b      	adds	r3, r7, r4
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	char *buff = uart1->txBuffer;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3364      	adds	r3, #100	; 0x64
 8001196:	61bb      	str	r3, [r7, #24]

//	if (loRa->currentStatus == loRa->lastStatus)
//		return;
	loRa->lastStatus = loRa->currentStatus;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	222e      	movs	r2, #46	; 0x2e
 800119c:	5c99      	ldrb	r1, [r3, r2]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	222f      	movs	r2, #47	; 0x2f
 80011a2:	5499      	strb	r1, [r3, r2]
	if (status == TX_TIMEOUT) {
 80011a4:	183b      	adds	r3, r7, r0
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d110      	bne.n	80011ce <printLoRaStatus+0x5a>
		len = sprintf(buff, "Transmission Fail: %d seconds Timeout\r\n",
 80011ac:	4971      	ldr	r1, [pc, #452]	; (8001374 <printLoRaStatus+0x200>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2200      	movs	r2, #0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f003 feaa 	bl	8004f0c <siprintf>
 80011b8:	0002      	movs	r2, r0
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	701a      	strb	r2, [r3, #0]
				TX_TIMEOUT / 1000);
		uart1_send_frame(buff, len);
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	0011      	movs	r1, r2
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 f9c4 	bl	8002554 <uart1_send_frame>
		return;
 80011cc:	e0cf      	b.n	800136e <printLoRaStatus+0x1fa>
	}
	if (status == TX_DONE) {
 80011ce:	231f      	movs	r3, #31
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d141      	bne.n	800125c <printLoRaStatus+0xe8>
		uint8_t bytesLen = loRa->len;
 80011d8:	2115      	movs	r1, #21
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	7d52      	ldrb	r2, [r2, #21]
 80011e0:	701a      	strb	r2, [r3, #0]
		uint32_t time = loRa->lastTxTime;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	613b      	str	r3, [r7, #16]
		len = sprintf(buff, "\nTransmission Done: %d ms %d bytes\r\n", time,
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4962      	ldr	r1, [pc, #392]	; (8001378 <printLoRaStatus+0x204>)
 80011f0:	69b8      	ldr	r0, [r7, #24]
 80011f2:	f003 fe8b 	bl	8004f0c <siprintf>
 80011f6:	0002      	movs	r2, r0
 80011f8:	211e      	movs	r1, #30
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	701a      	strb	r2, [r3, #0]
				bytesLen);
		uart1_send_frame(buff, len);
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	0011      	movs	r1, r2
 8001206:	0018      	movs	r0, r3
 8001208:	f001 f9a4 	bl	8002554 <uart1_send_frame>
		for (int i = 0; i < loRa->len; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
 8001210:	e01d      	b.n	800124e <printLoRaStatus+0xda>
			uint8_t len = sprintf(uart1->txBuffer, "%02X", loRa->buffer[i]);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3364      	adds	r3, #100	; 0x64
 8001216:	0018      	movs	r0, r3
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	2130      	movs	r1, #48	; 0x30
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	18d3      	adds	r3, r2, r3
 8001220:	185b      	adds	r3, r3, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	001a      	movs	r2, r3
 8001226:	4b55      	ldr	r3, [pc, #340]	; (800137c <printLoRaStatus+0x208>)
 8001228:	0019      	movs	r1, r3
 800122a:	f003 fe6f 	bl	8004f0c <siprintf>
 800122e:	0002      	movs	r2, r0
 8001230:	210f      	movs	r1, #15
 8001232:	187b      	adds	r3, r7, r1
 8001234:	701a      	strb	r2, [r3, #0]
			uart1_send_frame(uart1->txBuffer, len);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3364      	adds	r3, #100	; 0x64
 800123a:	001a      	movs	r2, r3
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	0019      	movs	r1, r3
 8001242:	0010      	movs	r0, r2
 8001244:	f001 f986 	bl	8002554 <uart1_send_frame>
		for (int i = 0; i < loRa->len; i++) {
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	3301      	adds	r3, #1
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7d5b      	ldrb	r3, [r3, #21]
 8001252:	001a      	movs	r2, r3
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	4293      	cmp	r3, r2
 8001258:	dbdb      	blt.n	8001212 <printLoRaStatus+0x9e>
		}
		return;
 800125a:	e088      	b.n	800136e <printLoRaStatus+0x1fa>
	}
	if (status == TX_READY) {
 800125c:	231f      	movs	r3, #31
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <printLoRaStatus+0x116>
		len = sprintf(buff, "\nMaster Mode\r");
 8001266:	4a46      	ldr	r2, [pc, #280]	; (8001380 <printLoRaStatus+0x20c>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f003 fe4d 	bl	8004f0c <siprintf>
 8001272:	0002      	movs	r2, r0
 8001274:	211e      	movs	r1, #30
 8001276:	187b      	adds	r3, r7, r1
 8001278:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(buff, len);
 800127a:	187b      	adds	r3, r7, r1
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0011      	movs	r1, r2
 8001282:	0018      	movs	r0, r3
 8001284:	f001 f966 	bl	8002554 <uart1_send_frame>
		return;
 8001288:	e071      	b.n	800136e <printLoRaStatus+0x1fa>
	}
	if (status == RX_DONE) {
 800128a:	231f      	movs	r3, #31
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d13e      	bne.n	8001312 <printLoRaStatus+0x19e>
		uint8_t bytesLen = loRa->len;
 8001294:	2117      	movs	r1, #23
 8001296:	187b      	adds	r3, r7, r1
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	7d52      	ldrb	r2, [r2, #21]
 800129c:	701a      	strb	r2, [r3, #0]
		len = sprintf(buff, "\nReception Done: %d bytes\r\n", bytesLen);
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4938      	ldr	r1, [pc, #224]	; (8001384 <printLoRaStatus+0x210>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fe30 	bl	8004f0c <siprintf>
 80012ac:	0002      	movs	r2, r0
 80012ae:	211e      	movs	r1, #30
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(buff, len);
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 f949 	bl	8002554 <uart1_send_frame>
		for (int i = 0; i < loRa->len; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	e01d      	b.n	8001304 <printLoRaStatus+0x190>
			uint8_t len = sprintf(uart1->txBuffer, "%02X", loRa->buffer[i]);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3364      	adds	r3, #100	; 0x64
 80012cc:	0018      	movs	r0, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	2130      	movs	r1, #48	; 0x30
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	185b      	adds	r3, r3, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001a      	movs	r2, r3
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <printLoRaStatus+0x208>)
 80012de:	0019      	movs	r1, r3
 80012e0:	f003 fe14 	bl	8004f0c <siprintf>
 80012e4:	0002      	movs	r2, r0
 80012e6:	2116      	movs	r1, #22
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	701a      	strb	r2, [r3, #0]
			uart1_send_frame(uart1->txBuffer, len);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3364      	adds	r3, #100	; 0x64
 80012f0:	001a      	movs	r2, r3
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f001 f92b 	bl	8002554 <uart1_send_frame>
		for (int i = 0; i < loRa->len; i++) {
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	3301      	adds	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	7d5b      	ldrb	r3, [r3, #21]
 8001308:	001a      	movs	r2, r3
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	4293      	cmp	r3, r2
 800130e:	dbdb      	blt.n	80012c8 <printLoRaStatus+0x154>
		}
		return;
 8001310:	e02d      	b.n	800136e <printLoRaStatus+0x1fa>
	}
	if (status == RX_READY) {
 8001312:	231f      	movs	r3, #31
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d111      	bne.n	8001340 <printLoRaStatus+0x1cc>
		len = sprintf(buff, "\nSlave Mode\r");
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <printLoRaStatus+0x214>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f003 fdf2 	bl	8004f0c <siprintf>
 8001328:	0002      	movs	r2, r0
 800132a:	211e      	movs	r1, #30
 800132c:	187b      	adds	r3, r7, r1
 800132e:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(buff, len);
 8001330:	187b      	adds	r3, r7, r1
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f001 f90b 	bl	8002554 <uart1_send_frame>
		return;
 800133e:	e016      	b.n	800136e <printLoRaStatus+0x1fa>
	}
	if (status == CRC_ERROR_ACTIVATION) {
 8001340:	231f      	movs	r3, #31
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d111      	bne.n	800136e <printLoRaStatus+0x1fa>
		len = sprintf(buff, "Reception Fail: Crc error activation\r\n");
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <printLoRaStatus+0x218>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f003 fddb 	bl	8004f0c <siprintf>
 8001356:	0002      	movs	r2, r0
 8001358:	211e      	movs	r1, #30
 800135a:	187b      	adds	r3, r7, r1
 800135c:	701a      	strb	r2, [r3, #0]
		uart1_send_frame(buff, len);
 800135e:	187b      	adds	r3, r7, r1
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f001 f8f4 	bl	8002554 <uart1_send_frame>
		return;
 800136c:	46c0      	nop			; (mov r8, r8)
	}
}
 800136e:	46bd      	mov	sp, r7
 8001370:	b00b      	add	sp, #44	; 0x2c
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	08005954 	.word	0x08005954
 8001378:	0800597c 	.word	0x0800597c
 800137c:	080057e4 	.word	0x080057e4
 8001380:	080059a4 	.word	0x080059a4
 8001384:	080059b4 	.word	0x080059b4
 8001388:	080059d0 	.word	0x080059d0
 800138c:	080059e0 	.word	0x080059e0

08001390 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8001398:	f001 f9ce 	bl	8002738 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (HAL_GPIO_ReadPin(BUSSY_GPIO_Port, BUSSY_Pin)) {
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <waitForTxEnd+0x84>)
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 f95f 	bl	8003668 <HAL_GPIO_ReadPin>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d01a      	beq.n	80013e4 <waitForTxEnd+0x54>
			int timeEnd = HAL_GetTick();
 80013ae:	f001 f9c3 	bl	8002738 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	60bb      	str	r3, [r7, #8]
			loRa->lastTxTime = timeEnd - timeStart;
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	001a      	movs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
			readRegister(loRa->spi, LR_RegIrqFlags);
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	239a      	movs	r3, #154	; 0x9a
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	58d3      	ldr	r3, [r2, r3]
 80013ca:	2112      	movs	r1, #18
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff f843 	bl	8000458 <readRegister>
			clearIrqFlags(loRa);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff fa4e 	bl	8000876 <clearIrqFlags>
			loRa->currentStatus = TX_DONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	222e      	movs	r2, #46	; 0x2e
 80013de:	2103      	movs	r1, #3
 80013e0:	5499      	strb	r1, [r3, r2]
			return;
 80013e2:	e013      	b.n	800140c <waitForTxEnd+0x7c>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 80013e4:	f001 f9a8 	bl	8002738 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad2      	subs	r2, r2, r3
 80013ee:	23fa      	movs	r3, #250	; 0xfa
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d906      	bls.n	8001404 <waitForTxEnd+0x74>
			sx1278Reset();
 80013f6:	f7ff fd23 	bl	8000e40 <sx1278Reset>
			loRa->currentStatus = TX_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	222e      	movs	r2, #46	; 0x2e
 80013fe:	2105      	movs	r1, #5
 8001400:	5499      	strb	r1, [r3, r2]
			return;
 8001402:	e003      	b.n	800140c <waitForTxEnd+0x7c>
		}
		HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f001 f9a1 	bl	800274c <HAL_Delay>
		if (HAL_GPIO_ReadPin(BUSSY_GPIO_Port, BUSSY_Pin)) {
 800140a:	e7c9      	b.n	80013a0 <waitForTxEnd+0x10>
	}
}
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	50000800 	.word	0x50000800

08001418 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	4c6c      	ldr	r4, [pc, #432]	; (80015cc <main+0x1b4>)
 800141c:	44a5      	add	sp, r4
 800141e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Vlad_t vlad;
	uart1_ptr = &uart1;
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <main+0x1b8>)
 8001422:	25cc      	movs	r5, #204	; 0xcc
 8001424:	006d      	lsls	r5, r5, #1
 8001426:	197a      	adds	r2, r7, r5
 8001428:	601a      	str	r2, [r3, #0]
	vlad_ptr = &vlad;
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <main+0x1bc>)
 800142c:	24b6      	movs	r4, #182	; 0xb6
 800142e:	0064      	lsls	r4, r4, #1
 8001430:	193a      	adds	r2, r7, r4
 8001432:	601a      	str	r2, [r3, #0]
	rs485_ptr = &rs485;
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <main+0x1c0>)
 8001436:	269b      	movs	r6, #155	; 0x9b
 8001438:	00b6      	lsls	r6, r6, #2
 800143a:	19ba      	adds	r2, r7, r6
 800143c:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800143e:	f001 f8ff 	bl	8002640 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001442:	f000 fa2d 	bl	80018a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001446:	f000 fb3f 	bl	8001ac8 <MX_GPIO_Init>
	MX_ADC1_Init();
 800144a:	f000 fa71 	bl	8001930 <MX_ADC1_Init>
	MX_SPI1_Init();
 800144e:	f000 fafd 	bl	8001a4c <MX_SPI1_Init>
	//MX_USART1_UART_Init();
	MX_CRC_Init();
 8001452:	f000 fad7 	bl	8001a04 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vladInit(VLAD, ID2, &vlad);
 8001456:	193b      	adds	r3, r7, r4
 8001458:	001a      	movs	r2, r3
 800145a:	2102      	movs	r1, #2
 800145c:	2005      	movs	r0, #5
 800145e:	f000 fbd0 	bl	8001c02 <vladInit>
	rs485Init(&rs485);
 8001462:	19bb      	adds	r3, r7, r6
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fc7d 	bl	8001d64 <rs485Init>
	uart1Init(HS16_CLK, BAUD_RATE, &uart1);
 800146a:	197a      	adds	r2, r7, r5
 800146c:	23e1      	movs	r3, #225	; 0xe1
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	485a      	ldr	r0, [pc, #360]	; (80015dc <main+0x1c4>)
 8001472:	0019      	movs	r1, r3
 8001474:	f000 ff76 	bl	8002364 <uart1Init>
	ledInit(&led);
 8001478:	23b5      	movs	r3, #181	; 0xb5
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fc78 	bl	8000d74 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loRa;

	lora_ptr = &loRa;
 8001484:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <main+0x1c8>)
 8001486:	2618      	movs	r6, #24
 8001488:	19ba      	adds	r2, r7, r6
 800148a:	601a      	str	r2, [r3, #0]

	lora_hw.dio0.port = BUSSY_GPIO_Port;
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <main+0x1cc>)
 800148e:	24c0      	movs	r4, #192	; 0xc0
 8001490:	00a4      	lsls	r4, r4, #2
 8001492:	191b      	adds	r3, r3, r4
 8001494:	19db      	adds	r3, r3, r7
 8001496:	4a54      	ldr	r2, [pc, #336]	; (80015e8 <main+0x1d0>)
 8001498:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = BUSSY_Pin;
 800149a:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <main+0x1cc>)
 800149c:	191b      	adds	r3, r3, r4
 800149e:	19db      	adds	r3, r3, r7
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <main+0x1cc>)
 80014a6:	191b      	adds	r3, r3, r4
 80014a8:	19db      	adds	r3, r3, r7
 80014aa:	4a50      	ldr	r2, [pc, #320]	; (80015ec <main+0x1d4>)
 80014ac:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 80014ae:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <main+0x1cc>)
 80014b0:	191b      	adds	r3, r3, r4
 80014b2:	19db      	adds	r3, r3, r7
 80014b4:	2201      	movs	r2, #1
 80014b6:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 80014b8:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <main+0x1cc>)
 80014ba:	191b      	adds	r3, r3, r4
 80014bc:	19db      	adds	r3, r3, r7
 80014be:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <main+0x1d4>)
 80014c0:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <main+0x1cc>)
 80014c4:	191b      	adds	r3, r3, r4
 80014c6:	19db      	adds	r3, r3, r7
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
	loRa.hw = &lora_hw;
 80014cc:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <main+0x1d8>)
 80014ce:	191b      	adds	r3, r3, r4
 80014d0:	19db      	adds	r3, r3, r7
 80014d2:	22aa      	movs	r2, #170	; 0xaa
 80014d4:	0052      	lsls	r2, r2, #1
 80014d6:	18ba      	adds	r2, r7, r2
 80014d8:	601a      	str	r2, [r3, #0]
	loRa.spi = &hspi1;
 80014da:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <main+0x1d8>)
 80014dc:	191b      	adds	r3, r3, r4
 80014de:	19da      	adds	r2, r3, r7
 80014e0:	239a      	movs	r3, #154	; 0x9a
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4943      	ldr	r1, [pc, #268]	; (80015f4 <main+0x1dc>)
 80014e6:	50d1      	str	r1, [r2, r3]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <main+0x1d4>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	2101      	movs	r1, #1
 80014ee:	0018      	movs	r0, r3
 80014f0:	f002 f8d7 	bl	80036a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <main+0x1d4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	2102      	movs	r1, #2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 f8d1 	bl	80036a2 <HAL_GPIO_WritePin>
	loRa.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <main+0x1dc>)
 8001502:	2101      	movs	r1, #1
 8001504:	0018      	movs	r0, r3
 8001506:	f7fe ffa7 	bl	8000458 <readRegister>
 800150a:	0003      	movs	r3, r0
 800150c:	0019      	movs	r1, r3
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <main+0x1d8>)
 8001510:	191b      	adds	r3, r3, r4
 8001512:	19db      	adds	r3, r3, r7
 8001514:	222c      	movs	r2, #44	; 0x2c
 8001516:	5499      	strb	r1, [r3, r2]
	loRa.currentStatus = UNKNOW;
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <main+0x1d8>)
 800151a:	191b      	adds	r3, r3, r4
 800151c:	19db      	adds	r3, r3, r7
 800151e:	222e      	movs	r2, #46	; 0x2e
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]
	loRa.len = 0;
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <main+0x1d8>)
 8001526:	191b      	adds	r3, r3, r4
 8001528:	19db      	adds	r3, r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	755a      	strb	r2, [r3, #21]
	TX_MODE = false;
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <main+0x1e0>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	RX_MODE = true;
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <main+0x1e4>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]

	initLoRaParameters(&loRa, SLAVE);
 800153a:	19bb      	adds	r3, r7, r6
 800153c:	2101      	movs	r1, #1
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff faa2 	bl	8000a88 <initLoRaParameters>
	writeLoRaParameters(&loRa);
 8001544:	19bb      	adds	r3, r7, r6
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff f9aa 	bl	80008a0 <writeLoRaParameters>
	uint8_t len = sprintf(uart1.txBuffer, "\nSlave init completed\n");
 800154c:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <main+0x1e8>)
 800154e:	197b      	adds	r3, r7, r5
 8001550:	3364      	adds	r3, #100	; 0x64
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f003 fcd9 	bl	8004f0c <siprintf>
 800155a:	0002      	movs	r2, r0
 800155c:	4929      	ldr	r1, [pc, #164]	; (8001604 <main+0x1ec>)
 800155e:	187b      	adds	r3, r7, r1
 8001560:	701a      	strb	r2, [r3, #0]
	uart1_send_frame(uart1.txBuffer, len);
 8001562:	187b      	adds	r3, r7, r1
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	197b      	adds	r3, r7, r5
 8001568:	3364      	adds	r3, #100	; 0x64
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f000 fff1 	bl	8002554 <uart1_send_frame>
	int counter = HAL_GetTick();
 8001572:	f001 f8e1 	bl	8002738 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	22be      	movs	r2, #190	; 0xbe
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	18ba      	adds	r2, r7, r2
 800157e:	6013      	str	r3, [r2, #0]
	int change = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	22bd      	movs	r2, #189	; 0xbd
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	18ba      	adds	r2, r7, r2
 8001588:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (uart1.len > 0) {
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <main+0x1f0>)
 800158c:	21c0      	movs	r1, #192	; 0xc0
 800158e:	0089      	lsls	r1, r1, #2
 8001590:	185b      	adds	r3, r3, r1
 8001592:	19db      	adds	r3, r3, r7
 8001594:	22c8      	movs	r2, #200	; 0xc8
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d037      	beq.n	800160c <main+0x1f4>
			rs485.len = uart1.len;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <main+0x1f0>)
 800159e:	185b      	adds	r3, r3, r1
 80015a0:	19db      	adds	r3, r3, r7
 80015a2:	22c8      	movs	r2, #200	; 0xc8
 80015a4:	5c9a      	ldrb	r2, [r3, r2]
 80015a6:	209b      	movs	r0, #155	; 0x9b
 80015a8:	0080      	lsls	r0, r0, #2
 80015aa:	183b      	adds	r3, r7, r0
 80015ac:	705a      	strb	r2, [r3, #1]
			memcpy(rs485.buffer, uart1.rxBuffer, uart1.len);
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <main+0x1f0>)
 80015b0:	185b      	adds	r3, r3, r1
 80015b2:	19db      	adds	r3, r3, r7
 80015b4:	22c8      	movs	r2, #200	; 0xc8
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	001a      	movs	r2, r3
 80015ba:	23cc      	movs	r3, #204	; 0xcc
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	18f9      	adds	r1, r7, r3
 80015c0:	183b      	adds	r3, r7, r0
 80015c2:	3302      	adds	r3, #2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 fc8f 	bl	8004ee8 <memcpy>
 80015ca:	e03d      	b.n	8001648 <main+0x230>
 80015cc:	fffffcfc 	.word	0xfffffcfc
 80015d0:	20000178 	.word	0x20000178
 80015d4:	2000017c 	.word	0x2000017c
 80015d8:	20000180 	.word	0x20000180
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	20000184 	.word	0x20000184
 80015e4:	fffffe54 	.word	0xfffffe54
 80015e8:	50000800 	.word	0x50000800
 80015ec:	50000400 	.word	0x50000400
 80015f0:	fffffd18 	.word	0xfffffd18
 80015f4:	20000114 	.word	0x20000114
 80015f8:	20000188 	.word	0x20000188
 80015fc:	20000189 	.word	0x20000189
 8001600:	08005a08 	.word	0x08005a08
 8001604:	000002fe 	.word	0x000002fe
 8001608:	fffffe98 	.word	0xfffffe98

		} else if (loRa.len > 0) {
 800160c:	4b9e      	ldr	r3, [pc, #632]	; (8001888 <main+0x470>)
 800160e:	21c0      	movs	r1, #192	; 0xc0
 8001610:	0089      	lsls	r1, r1, #2
 8001612:	185b      	adds	r3, r3, r1
 8001614:	19db      	adds	r3, r3, r7
 8001616:	7d5b      	ldrb	r3, [r3, #21]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d015      	beq.n	8001648 <main+0x230>
			rs485.len = loRa.len;
 800161c:	4b9a      	ldr	r3, [pc, #616]	; (8001888 <main+0x470>)
 800161e:	185b      	adds	r3, r3, r1
 8001620:	19db      	adds	r3, r3, r7
 8001622:	7d5a      	ldrb	r2, [r3, #21]
 8001624:	209b      	movs	r0, #155	; 0x9b
 8001626:	0080      	lsls	r0, r0, #2
 8001628:	183b      	adds	r3, r7, r0
 800162a:	705a      	strb	r2, [r3, #1]
			memcpy(rs485.buffer, loRa.buffer, loRa.len);
 800162c:	4b96      	ldr	r3, [pc, #600]	; (8001888 <main+0x470>)
 800162e:	185b      	adds	r3, r3, r1
 8001630:	19db      	adds	r3, r3, r7
 8001632:	7d5b      	ldrb	r3, [r3, #21]
 8001634:	001a      	movs	r2, r3
 8001636:	2318      	movs	r3, #24
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	3330      	adds	r3, #48	; 0x30
 800163c:	0019      	movs	r1, r3
 800163e:	183b      	adds	r3, r7, r0
 8001640:	3302      	adds	r3, #2
 8001642:	0018      	movs	r0, r3
 8001644:	f003 fc50 	bl	8004ee8 <memcpy>
		}

		if (rs485.len > 0) {
 8001648:	249b      	movs	r4, #155	; 0x9b
 800164a:	00a4      	lsls	r4, r4, #2
 800164c:	193b      	adds	r3, r7, r4
 800164e:	785b      	ldrb	r3, [r3, #1]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02a      	beq.n	80016aa <main+0x292>
			status = checkBuffer(&rs485);
 8001654:	193b      	adds	r3, r7, r4
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fc31 	bl	8001ebe <checkBuffer>
 800165c:	0002      	movs	r2, r0
 800165e:	4b8b      	ldr	r3, [pc, #556]	; (800188c <main+0x474>)
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	701a      	strb	r2, [r3, #0]
			if (rs485.status == DATA_OK) {
 8001664:	193b      	adds	r3, r7, r4
 8001666:	2266      	movs	r2, #102	; 0x66
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d11d      	bne.n	80016aa <main+0x292>
				rs485.cmd = rs485.buffer[3];
 800166e:	193b      	adds	r3, r7, r4
 8001670:	795a      	ldrb	r2, [r3, #5]
 8001672:	193b      	adds	r3, r7, r4
 8001674:	701a      	strb	r2, [r3, #0]
				rs485.status = WAITING;
 8001676:	193b      	adds	r3, r7, r4
 8001678:	2266      	movs	r2, #102	; 0x66
 800167a:	2108      	movs	r1, #8
 800167c:	5499      	strb	r1, [r3, r2]
				cleanRxBuffer(&uart1);
 800167e:	23cc      	movs	r3, #204	; 0xcc
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	0018      	movs	r0, r3
 8001686:	f000 ff8b 	bl	80025a0 <cleanRxBuffer>
				memset(loRa.buffer, 0, sizeof(loRa.buffer));
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	005a      	lsls	r2, r3, #1
 800168e:	2318      	movs	r3, #24
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	3330      	adds	r3, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	0018      	movs	r0, r3
 8001698:	f003 fc2f 	bl	8004efa <memset>
				loRa.len = 0;
 800169c:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <main+0x470>)
 800169e:	22c0      	movs	r2, #192	; 0xc0
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	19db      	adds	r3, r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	755a      	strb	r2, [r3, #21]
			}
		}
		if (status != rs485.status)
 80016aa:	219b      	movs	r1, #155	; 0x9b
 80016ac:	0089      	lsls	r1, r1, #2
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2266      	movs	r2, #102	; 0x66
 80016b2:	5c9b      	ldrb	r3, [r3, r2]
 80016b4:	4a75      	ldr	r2, [pc, #468]	; (800188c <main+0x474>)
 80016b6:	18ba      	adds	r2, r7, r2
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d00a      	beq.n	80016d4 <main+0x2bc>
			printStatus(&uart1, rs485.status, &rs485);
 80016be:	0008      	movs	r0, r1
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2266      	movs	r2, #102	; 0x66
 80016c4:	5c99      	ldrb	r1, [r3, r2]
 80016c6:	183a      	adds	r2, r7, r0
 80016c8:	23cc      	movs	r3, #204	; 0xcc
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff fd10 	bl	80010f4 <printStatus>
		modeRs485Update(&uart1, &rs485, &loRa);
 80016d4:	2418      	movs	r4, #24
 80016d6:	193a      	adds	r2, r7, r4
 80016d8:	269b      	movs	r6, #155	; 0x9b
 80016da:	00b6      	lsls	r6, r6, #2
 80016dc:	19b9      	adds	r1, r7, r6
 80016de:	23cc      	movs	r3, #204	; 0xcc
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fce5 	bl	80010b4 <modeRs485Update>
		if (rs485.cmd == QUERY_PARAMETERS_VLAD) {
 80016ea:	19bb      	adds	r3, r7, r6
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b11      	cmp	r3, #17
 80016f0:	d168      	bne.n	80017c4 <main+0x3ac>
			uint8_t frame[21] = { 0 };
 80016f2:	4b67      	ldr	r3, [pc, #412]	; (8001890 <main+0x478>)
 80016f4:	25c0      	movs	r5, #192	; 0xc0
 80016f6:	00ad      	lsls	r5, r5, #2
 80016f8:	195a      	adds	r2, r3, r5
 80016fa:	19d3      	adds	r3, r2, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	2211      	movs	r2, #17
 8001704:	2100      	movs	r1, #0
 8001706:	0018      	movs	r0, r3
 8001708:	f003 fbf7 	bl	8004efa <memset>
			encodeVLAD(frame);
 800170c:	003b      	movs	r3, r7
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fbea 	bl	8000ee8 <encodeVLAD>
			memcpy(loRa.buffer, frame, 21);
 8001714:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <main+0x470>)
 8001716:	195a      	adds	r2, r3, r5
 8001718:	19d3      	adds	r3, r2, r7
 800171a:	4a5d      	ldr	r2, [pc, #372]	; (8001890 <main+0x478>)
 800171c:	1952      	adds	r2, r2, r5
 800171e:	19d2      	adds	r2, r2, r7
 8001720:	3330      	adds	r3, #48	; 0x30
 8001722:	0011      	movs	r1, r2
 8001724:	2215      	movs	r2, #21
 8001726:	0018      	movs	r0, r3
 8001728:	f003 fbde 	bl	8004ee8 <memcpy>
			loRa.len = 21;
 800172c:	4b56      	ldr	r3, [pc, #344]	; (8001888 <main+0x470>)
 800172e:	195a      	adds	r2, r3, r5
 8001730:	19d3      	adds	r3, r2, r7
 8001732:	2215      	movs	r2, #21
 8001734:	755a      	strb	r2, [r3, #21]
			updateMode(&loRa, MASTER);
 8001736:	193b      	adds	r3, r7, r4
 8001738:	2100      	movs	r1, #0
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff f920 	bl	8000980 <updateMode>
			printLoRaStatus(&uart1, &loRa);
 8001740:	193a      	adds	r2, r7, r4
 8001742:	23cc      	movs	r3, #204	; 0xcc
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	0011      	movs	r1, r2
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff fd12 	bl	8001174 <printLoRaStatus>
			setTxFifoData(&loRa);
 8001750:	193b      	adds	r3, r7, r4
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff facd 	bl	8000cf2 <setTxFifoData>
			updateLoraLowFreq(&loRa, TX);
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2103      	movs	r1, #3
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff f868 	bl	8000832 <updateLoraLowFreq>
			waitForTxEnd(&loRa);
 8001762:	193b      	adds	r3, r7, r4
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fe13 	bl	8001390 <waitForTxEnd>
			printLoRaStatus(&uart1, &loRa);
 800176a:	193a      	adds	r2, r7, r4
 800176c:	23cc      	movs	r3, #204	; 0xcc
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff fcfd 	bl	8001174 <printLoRaStatus>
			memset(loRa.buffer, 0, sizeof(loRa.buffer));
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	193b      	adds	r3, r7, r4
 8001780:	3330      	adds	r3, #48	; 0x30
 8001782:	2100      	movs	r1, #0
 8001784:	0018      	movs	r0, r3
 8001786:	f003 fbb8 	bl	8004efa <memset>
			loRa.len = 0;
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <main+0x470>)
 800178c:	195b      	adds	r3, r3, r5
 800178e:	19db      	adds	r3, r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	755a      	strb	r2, [r3, #21]
			loRa.currentStatus = UNKNOW;
 8001794:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <main+0x470>)
 8001796:	195b      	adds	r3, r3, r5
 8001798:	19db      	adds	r3, r3, r7
 800179a:	222e      	movs	r2, #46	; 0x2e
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]
			change = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	22bd      	movs	r2, #189	; 0xbd
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	18ba      	adds	r2, r7, r2
 80017a8:	6013      	str	r3, [r2, #0]
			rs485.cmd = NONE;
 80017aa:	19bb      	adds	r3, r7, r6
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
			memset(rs485.buffer, 0, sizeof(rs485.buffer));
 80017b0:	19bb      	adds	r3, r7, r6
 80017b2:	3302      	adds	r3, #2
 80017b4:	2264      	movs	r2, #100	; 0x64
 80017b6:	2100      	movs	r1, #0
 80017b8:	0018      	movs	r0, r3
 80017ba:	f003 fb9e 	bl	8004efa <memset>
			rs485.len = 0;
 80017be:	19bb      	adds	r3, r7, r6
 80017c0:	2200      	movs	r2, #0
 80017c2:	705a      	strb	r2, [r3, #1]
		}

		if (RX_MODE) {
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <main+0x47c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d100      	bne.n	80017ce <main+0x3b6>
 80017cc:	e6dd      	b.n	800158a <main+0x172>
			if (loRa.operatingMode != RX_CONTINUOUS) {
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <main+0x470>)
 80017d0:	22c0      	movs	r2, #192	; 0xc0
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	189b      	adds	r3, r3, r2
 80017d6:	19db      	adds	r3, r3, r7
 80017d8:	222c      	movs	r2, #44	; 0x2c
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d00e      	beq.n	80017fe <main+0x3e6>
				updateMode(&loRa, SLAVE);
 80017e0:	2418      	movs	r4, #24
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	2101      	movs	r1, #1
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff f8ca 	bl	8000980 <updateMode>
				setRxFifoAddr(&loRa);
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7ff f986 	bl	8000b00 <setRxFifoAddr>
				updateLoraLowFreq(&loRa, RX_CONTINUOUS);
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	2105      	movs	r1, #5
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff f81a 	bl	8000832 <updateLoraLowFreq>
			}
			clearMemForRx(&loRa);
 80017fe:	2518      	movs	r5, #24
 8001800:	197b      	adds	r3, r7, r5
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff faa0 	bl	8000d48 <clearMemForRx>
			GPIO_PinState bussy = HAL_GPIO_ReadPin(BUSSY_GPIO_Port, BUSSY_Pin);
 8001808:	4e23      	ldr	r6, [pc, #140]	; (8001898 <main+0x480>)
 800180a:	19bc      	adds	r4, r7, r6
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <main+0x484>)
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	0018      	movs	r0, r3
 8001812:	f001 ff29 	bl	8003668 <HAL_GPIO_ReadPin>
 8001816:	0003      	movs	r3, r0
 8001818:	7023      	strb	r3, [r4, #0]
			if (bussy == GPIO_PIN_SET)
 800181a:	19bb      	adds	r3, r7, r6
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10a      	bne.n	8001838 <main+0x420>
				if (crcErrorActivation(&loRa) != 1)
 8001822:	197b      	adds	r3, r7, r5
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff f9a8 	bl	8000b7a <crcErrorActivation>
 800182a:	0003      	movs	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d003      	beq.n	8001838 <main+0x420>
					getRxFifoData(&loRa);
 8001830:	197b      	adds	r3, r7, r5
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff f9dc 	bl	8000bf0 <getRxFifoData>

			if (loRa.currentStatus == RX_DONE) {
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <main+0x470>)
 800183a:	25c0      	movs	r5, #192	; 0xc0
 800183c:	00ad      	lsls	r5, r5, #2
 800183e:	195b      	adds	r3, r3, r5
 8001840:	19db      	adds	r3, r3, r7
 8001842:	222e      	movs	r2, #46	; 0x2e
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d000      	beq.n	800184c <main+0x434>
 800184a:	e69e      	b.n	800158a <main+0x172>
				setRxFifoAddr(&loRa);
 800184c:	2418      	movs	r4, #24
 800184e:	193b      	adds	r3, r7, r4
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff f955 	bl	8000b00 <setRxFifoAddr>
				updateLoraLowFreq(&loRa, RX_CONTINUOUS);
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2105      	movs	r1, #5
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe ffe9 	bl	8000832 <updateLoraLowFreq>
				readOperatingMode(&loRa);
 8001860:	193b      	adds	r3, r7, r4
 8001862:	0018      	movs	r0, r3
 8001864:	f7fe ffcc 	bl	8000800 <readOperatingMode>
				printLoRaStatus(&uart1, &loRa);
 8001868:	193a      	adds	r2, r7, r4
 800186a:	23cc      	movs	r3, #204	; 0xcc
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff fc7e 	bl	8001174 <printLoRaStatus>
				loRa.currentStatus = RX_READY;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <main+0x470>)
 800187a:	195b      	adds	r3, r3, r5
 800187c:	19db      	adds	r3, r3, r7
 800187e:	222e      	movs	r2, #46	; 0x2e
 8001880:	2102      	movs	r1, #2
 8001882:	5499      	strb	r1, [r3, r2]
		if (uart1.len > 0) {
 8001884:	e681      	b.n	800158a <main+0x172>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	fffffd18 	.word	0xfffffd18
 800188c:	000002ff 	.word	0x000002ff
 8001890:	fffffd00 	.word	0xfffffd00
 8001894:	20000189 	.word	0x20000189
 8001898:	000002f3 	.word	0x000002f3
 800189c:	50000800 	.word	0x50000800

080018a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b093      	sub	sp, #76	; 0x4c
 80018a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018a6:	2414      	movs	r4, #20
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	0018      	movs	r0, r3
 80018ac:	2334      	movs	r3, #52	; 0x34
 80018ae:	001a      	movs	r2, r3
 80018b0:	2100      	movs	r1, #0
 80018b2:	f003 fb22 	bl	8004efa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	0018      	movs	r0, r3
 80018ba:	2310      	movs	r3, #16
 80018bc:	001a      	movs	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f003 fb1b 	bl	8004efa <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f001 ff07 	bl	80036dc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	0052      	lsls	r2, r2, #1
 80018da:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2240      	movs	r2, #64	; 0x40
 80018e6:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	0018      	movs	r0, r3
 80018f2:	f001 ff33 	bl	800375c <HAL_RCC_OscConfig>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x5e>
		Error_Handler();
 80018fa:	f000 f97d 	bl	8001bf8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2100      	movs	r1, #0
 800191a:	0018      	movs	r0, r3
 800191c:	f002 fa2e 	bl	8003d7c <HAL_RCC_ClockConfig>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0x88>
		Error_Handler();
 8001924:	f000 f968 	bl	8001bf8 <Error_Handler>
	}
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b013      	add	sp, #76	; 0x4c
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	0018      	movs	r0, r3
 800193a:	230c      	movs	r3, #12
 800193c:	001a      	movs	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f003 fadb 	bl	8004efa <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <MX_ADC1_Init+0xd0>)
 8001948:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <MX_ADC1_Init+0xcc>)
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	05d2      	lsls	r2, r2, #23
 8001950:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_ADC1_Init+0xcc>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001966:	2204      	movs	r2, #4
 8001968:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <MX_ADC1_Init+0xcc>)
 800196c:	2200      	movs	r2, #0
 800196e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001972:	2200      	movs	r2, #0
 8001974:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001978:	2200      	movs	r2, #0
 800197a:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_ADC1_Init+0xcc>)
 800197e:	2201      	movs	r2, #1
 8001980:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001984:	2220      	movs	r2, #32
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_ADC1_Init+0xcc>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001992:	2200      	movs	r2, #0
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_ADC1_Init+0xcc>)
 8001998:	222c      	movs	r2, #44	; 0x2c
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
	hadc1.Init.OversamplingMode = DISABLE;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019b2:	223c      	movs	r2, #60	; 0x3c
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 ffe5 	bl	8002990 <HAL_ADC_Init>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <MX_ADC1_Init+0x9e>
		Error_Handler();
 80019ca:	f000 f915 	bl	8001bf8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019e0:	1d3a      	adds	r2, r7, #4
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_ADC1_Init+0xcc>)
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 f97a 	bl	8002ce0 <HAL_ADC_ConfigChannel>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0xc4>
		Error_Handler();
 80019f0:	f000 f902 	bl	8001bf8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000008c 	.word	0x2000008c
 8001a00:	40012400 	.word	0x40012400

08001a04 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <MX_CRC_Init+0x44>)
 8001a0c:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <MX_CRC_Init+0x40>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 fbe2 	bl	80031f8 <HAL_CRC_Init>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <MX_CRC_Init+0x38>
		Error_Handler();
 8001a38:	f000 f8de 	bl	8001bf8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	200000f0 	.word	0x200000f0
 8001a48:	40023000 	.word	0x40023000

08001a4c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <MX_SPI1_Init+0x78>)
 8001a54:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a58:	2282      	movs	r2, #130	; 0x82
 8001a5a:	0052      	lsls	r2, r2, #1
 8001a5c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a66:	22e0      	movs	r2, #224	; 0xe0
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a82:	2218      	movs	r2, #24
 8001a84:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <MX_SPI1_Init+0x74>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f002 faef 	bl	8004090 <HAL_SPI_Init>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001ab6:	f000 f89f 	bl	8001bf8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000114 	.word	0x20000114
 8001ac4:	40013000 	.word	0x40013000

08001ac8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ace:	240c      	movs	r4, #12
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	2314      	movs	r3, #20
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f003 fa0e 	bl	8004efa <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <MX_GPIO_Init+0x124>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <MX_GPIO_Init+0x124>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <MX_GPIO_Init+0x124>)
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <MX_GPIO_Init+0x124>)
 8001af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <MX_GPIO_Init+0x124>)
 8001afc:	2102      	movs	r1, #2
 8001afe:	430a      	orrs	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <MX_GPIO_Init+0x124>)
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <MX_GPIO_Init+0x124>)
 8001b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <MX_GPIO_Init+0x124>)
 8001b14:	2104      	movs	r1, #4
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <MX_GPIO_Init+0x124>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4013      	ands	r3, r2
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin | LORA_RST_Pin, GPIO_PIN_RESET);
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <MX_GPIO_Init+0x128>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f001 fdb8 	bl	80036a2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DIO1_GPIO_Port, DIO1_Pin, GPIO_PIN_RESET);
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	0059      	lsls	r1, r3, #1
 8001b36:	23a0      	movs	r3, #160	; 0xa0
 8001b38:	05db      	lsls	r3, r3, #23
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f001 fdb0 	bl	80036a2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUSSY_GPIO_Port, BUSSY_Pin, GPIO_PIN_RESET);
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x12c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f001 fdaa 	bl	80036a2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin;
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	2203      	movs	r2, #3
 8001b52:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	2201      	movs	r2, #1
 8001b58:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <MX_GPIO_Init+0x128>)
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	0010      	movs	r0, r2
 8001b6e:	f001 fc17 	bl	80033a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO3_Pin */
	GPIO_InitStruct.Pin = DIO3_Pin;
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	2204      	movs	r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	193b      	adds	r3, r7, r4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <MX_GPIO_Init+0x128>)
 8001b88:	0019      	movs	r1, r3
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	f001 fc08 	bl	80033a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO1_Pin */
	GPIO_InitStruct.Pin = DIO1_Pin;
 8001b90:	0021      	movs	r1, r4
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	0052      	lsls	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	000c      	movs	r4, r1
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001bae:	193a      	adds	r2, r7, r4
 8001bb0:	23a0      	movs	r3, #160	; 0xa0
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f001 fbf2 	bl	80033a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUSSY_Pin */
	GPIO_InitStruct.Pin = BUSSY_Pin;
 8001bbc:	0021      	movs	r1, r4
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <MX_GPIO_Init+0x12c>)
 8001bda:	0019      	movs	r1, r3
 8001bdc:	0010      	movs	r0, r2
 8001bde:	f001 fbdf 	bl	80033a0 <HAL_GPIO_Init>

}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b009      	add	sp, #36	; 0x24
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	50000400 	.word	0x50000400
 8001bf4:	50000800 	.word	0x50000800

08001bf8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfc:	b672      	cpsid	i
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c00:	e7fe      	b.n	8001c00 <Error_Handler+0x8>

08001c02 <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

void vladInit(Function_t funcion, Id_t id, Vlad_t *vlad) {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	603a      	str	r2, [r7, #0]
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	1c02      	adds	r2, r0, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	1dbb      	adds	r3, r7, #6
 8001c12:	1c0a      	adds	r2, r1, #0
 8001c14:	701a      	strb	r2, [r3, #0]
	vlad->agc150m = 0;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
	vlad->ref150m = 0;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	805a      	strh	r2, [r3, #2]
	vlad->level150m = 0;  // downlink 150 mhz
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	809a      	strh	r2, [r3, #4]
	vlad->agc170m = 0;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	80da      	strh	r2, [r3, #6]
	vlad->ref170m = 0;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	811a      	strh	r2, [r3, #8]
	vlad->level170m = 0; //uplink 170 mhz
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	815a      	strh	r2, [r3, #10]
	vlad->tone_level = 0;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	819a      	strh	r2, [r3, #12]
	vlad->v_5v = 0;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	81da      	strh	r2, [r3, #14]
	vlad->vin = 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	821a      	strh	r2, [r3, #16]
	vlad->current = 0;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	825a      	strh	r2, [r3, #18]
	vlad->v_5v_real = 0;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
	vlad->vin_real = 0;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
	vlad->current_real = 0;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	61da      	str	r2, [r3, #28]
	vlad->uc_temperature = 0;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	621a      	str	r2, [r3, #32]
	vlad->remote_attenuation = 0;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2224      	movs	r2, #36	; 0x24
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]
	vlad->is_remote_attenuation = false;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2225      	movs	r2, #37	; 0x25
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]
    vlad->is_attenuation_updated = false;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2226      	movs	r2, #38	; 0x26
 8001c7e:	2100      	movs	r1, #0
 8001c80:	5499      	strb	r1, [r3, r2]
	vlad->calc_en;
	vlad->function = funcion;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	1dfa      	adds	r2, r7, #7
 8001c86:	2128      	movs	r1, #40	; 0x28
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	545a      	strb	r2, [r3, r1]
	vlad->id = id;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	1dba      	adds	r2, r7, #6
 8001c90:	2127      	movs	r1, #39	; 0x27
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	545a      	strb	r2, [r3, r1]
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	000a      	movs	r2, r1
 8001caa:	1cfb      	adds	r3, r7, #3
 8001cac:	701a      	strb	r2, [r3, #0]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001cae:	230a      	movs	r3, #10
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	4a2b      	ldr	r2, [pc, #172]	; (8001d60 <crc_get+0xc0>)
 8001cb4:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2200      	movs	r2, #0
 8001cbc:	801a      	strh	r2, [r3, #0]

	for (b = 0; b < buff_len; b++) {
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e03d      	b.n	8001d44 <crc_get+0xa4>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	220c      	movs	r2, #12
 8001cdc:	18bb      	adds	r3, r7, r2
 8001cde:	18ba      	adds	r2, r7, r2
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	404a      	eors	r2, r1
 8001ce4:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 8; i++) {
 8001ce6:	230e      	movs	r3, #14
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e01e      	b.n	8001d2e <crc_get+0x8e>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001cf0:	210c      	movs	r1, #12
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	5e9b      	ldrsh	r3, [r3, r2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da0c      	bge.n	8001d16 <crc_get+0x76>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	230a      	movs	r3, #10
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2000      	movs	r0, #0
 8001d0a:	5e1b      	ldrsh	r3, [r3, r0]
 8001d0c:	4053      	eors	r3, r2
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	801a      	strh	r2, [r3, #0]
 8001d14:	e005      	b.n	8001d22 <crc_get+0x82>
			else
				crc <<= 1;
 8001d16:	230c      	movs	r3, #12
 8001d18:	18fa      	adds	r2, r7, r3
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	18db      	adds	r3, r3, r3
 8001d20:	8013      	strh	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
 8001d22:	210e      	movs	r1, #14
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	3201      	adds	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	230e      	movs	r3, #14
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b07      	cmp	r3, #7
 8001d36:	d9db      	bls.n	8001cf0 <crc_get+0x50>
	for (b = 0; b < buff_len; b++) {
 8001d38:	210f      	movs	r1, #15
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	3201      	adds	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	230f      	movs	r3, #15
 8001d46:	18fa      	adds	r2, r7, r3
 8001d48:	1cfb      	adds	r3, r7, #3
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3ba      	bcc.n	8001cc8 <crc_get+0x28>
		}
	}
	return crc;
 8001d52:	230c      	movs	r3, #12
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	881b      	ldrh	r3, [r3, #0]
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	00001021 	.word	0x00001021

08001d64 <rs485Init>:

void rs485Init(RS485_t *r) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2266      	movs	r2, #102	; 0x66
 8001d76:	2107      	movs	r1, #7
 8001d78:	5499      	strb	r1, [r3, r2]
	r->cmd = NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
	memset(r->buffer, 0, 100);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3302      	adds	r3, #2
 8001d84:	2264      	movs	r2, #100	; 0x64
 8001d86:	2100      	movs	r1, #0
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f003 f8b6 	bl	8004efa <memset>
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <rs485Init+0x4c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <rs485Init+0x4c>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	02c9      	lsls	r1, r1, #11
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <rs485Init+0x4c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <rs485Init+0x4c>)
 8001da2:	4904      	ldr	r1, [pc, #16]	; (8001db4 <rs485Init+0x50>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	50000400 	.word	0x50000400
 8001db4:	fff7ffff 	.word	0xfff7ffff

08001db8 <check_valid_module>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t check_valid_module(uint8_t *frame, uint8_t lenght) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	1cfb      	adds	r3, r7, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
	if (frame[1] == VLAD) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d11b      	bne.n	8001e08 <check_valid_module+0x50>
		if (frame[2] == ID1) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d114      	bne.n	8001e04 <check_valid_module+0x4c>
			for (int i = 3; i < lenght; i++)
 8001dda:	2303      	movs	r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e00b      	b.n	8001df8 <check_valid_module+0x40>
				if (frame[i] == LTEL_END_MARK)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	18d3      	adds	r3, r2, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	227f      	movs	r2, #127	; 0x7f
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <check_valid_module+0x3a>
					return VALID_MODULE;
 8001dee:	2309      	movs	r3, #9
 8001df0:	e00d      	b.n	8001e0e <check_valid_module+0x56>
			for (int i = 3; i < lenght; i++)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	1cfb      	adds	r3, r7, #3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbee      	blt.n	8001de0 <check_valid_module+0x28>
 8001e02:	e003      	b.n	8001e0c <check_valid_module+0x54>
		} else
			return WRONG_MODULE_ID;
 8001e04:	2305      	movs	r3, #5
 8001e06:	e002      	b.n	8001e0e <check_valid_module+0x56>
	} else
		return WRONG_MODULE_FUNCTION;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	e000      	b.n	8001e0e <check_valid_module+0x56>
	return WRONG_MODULE_FUNCTION;
 8001e0c:	2304      	movs	r3, #4
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <check_frame>:

Rs485_status_t check_frame(uint8_t *frame, uint8_t lenght) {
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	000a      	movs	r2, r1
 8001e20:	1cfb      	adds	r3, r7, #3
 8001e22:	701a      	strb	r2, [r3, #0]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8001e24:	1cfb      	adds	r3, r7, #3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d913      	bls.n	8001e54 <check_frame+0x3e>
		if (frame[0] == LTEL_START_MARK) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	227e      	movs	r2, #126	; 0x7e
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10c      	bne.n	8001e50 <check_frame+0x3a>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8001e36:	1cfb      	adds	r3, r7, #3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	18d3      	adds	r3, r2, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	227f      	movs	r2, #127	; 0x7f
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <check_frame+0x36>
				return VALID_FRAME;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e004      	b.n	8001e56 <check_frame+0x40>
			else
				return START_READING;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e002      	b.n	8001e56 <check_frame+0x40>
		} else
			return NOT_VALID_FRAME;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e000      	b.n	8001e56 <check_frame+0x40>
	} else

		return WAITING;
 8001e54:	2308      	movs	r3, #8
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <check_CRC_module>:

Rs485_status_t check_CRC_module(uint8_t *frame, uint8_t len) {
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	000a      	movs	r2, r1
 8001e68:	1cfb      	adds	r3, r7, #3
 8001e6a:	701a      	strb	r2, [r3, #0]

	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = frame[(len - 2)] << 8;
 8001e6c:	1cfb      	adds	r3, r7, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3b02      	subs	r3, #2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	60fb      	str	r3, [r7, #12]
	crc_save |= frame[(len - 3)];
 8001e7c:	1cfb      	adds	r3, r7, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(frame[1]), (len - 4));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	1cfb      	adds	r3, r7, #3
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b04      	subs	r3, #4
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff fefe 	bl	8001ca0 <crc_get>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d101      	bne.n	8001eb4 <check_CRC_module+0x56>
		return DATA_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <check_CRC_module+0x58>
	return CRC_ERROR;
 8001eb4:	2306      	movs	r3, #6
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <checkBuffer>:

Rs485_status_t checkBuffer(RS485_t *rs485){
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	rs485->status = check_frame(rs485->buffer,rs485->len);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	0019      	movs	r1, r3
 8001ed0:	0010      	movs	r0, r2
 8001ed2:	f7ff ffa0 	bl	8001e16 <check_frame>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2266      	movs	r2, #102	; 0x66
 8001ede:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == VALID_FRAME))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2266      	movs	r2, #102	; 0x66
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <checkBuffer+0x34>
		return rs485->status;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2266      	movs	r2, #102	; 0x66
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	e02e      	b.n	8001f50 <checkBuffer+0x92>
	rs485->status = check_valid_module(rs485->buffer, rs485->len);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1c9a      	adds	r2, r3, #2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	0019      	movs	r1, r3
 8001efc:	0010      	movs	r0, r2
 8001efe:	f7ff ff5b 	bl	8001db8 <check_valid_module>
 8001f02:	0003      	movs	r3, r0
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2266      	movs	r2, #102	; 0x66
 8001f0a:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == VALID_MODULE))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2266      	movs	r2, #102	; 0x66
 8001f10:	5c9b      	ldrb	r3, [r3, r2]
 8001f12:	2b09      	cmp	r3, #9
 8001f14:	d003      	beq.n	8001f1e <checkBuffer+0x60>
		return rs485->status;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2266      	movs	r2, #102	; 0x66
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	e018      	b.n	8001f50 <checkBuffer+0x92>
	rs485->status = check_CRC_module(rs485->buffer, rs485->len);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	0019      	movs	r1, r3
 8001f28:	0010      	movs	r0, r2
 8001f2a:	f7ff ff98 	bl	8001e5e <check_CRC_module>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2266      	movs	r2, #102	; 0x66
 8001f36:	5499      	strb	r1, [r3, r2]
	if (!(rs485->status == DATA_OK))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2266      	movs	r2, #102	; 0x66
 8001f3c:	5c9b      	ldrb	r3, [r3, r2]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <checkBuffer+0x8c>
		return rs485->status;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2266      	movs	r2, #102	; 0x66
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	e002      	b.n	8001f50 <checkBuffer+0x92>
	return rs485->status;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2266      	movs	r2, #102	; 0x66
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x44>)
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_MspInit+0x44>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_MspInit+0x44>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x44>)
 8001f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_MspInit+0x44>)
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	0549      	lsls	r1, r1, #21
 8001f80:	430a      	orrs	r2, r1
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_MspInit+0x44>)
 8001f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	055b      	lsls	r3, r3, #21
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	2414      	movs	r4, #20
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	0018      	movs	r0, r3
 8001fae:	2314      	movs	r3, #20
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f002 ffa1 	bl	8004efa <memset>
  if(hadc->Instance==ADC1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_ADC_MspInit+0x80>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d129      	bne.n	8002016 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0349      	lsls	r1, r1, #13
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	035b      	lsls	r3, r3, #13
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_ADC_MspInit+0x84>)
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	2203      	movs	r2, #3
 8002000:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	193b      	adds	r3, r7, r4
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	193a      	adds	r2, r7, r4
 800200a:	23a0      	movs	r3, #160	; 0xa0
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	0011      	movs	r1, r2
 8002010:	0018      	movs	r0, r3
 8002012:	f001 f9c5 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b00b      	add	sp, #44	; 0x2c
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40012400 	.word	0x40012400
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_CRC_MspInit+0x38>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10d      	bne.n	8002056 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_CRC_MspInit+0x3c>)
 800203c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_CRC_MspInit+0x3c>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0149      	lsls	r1, r1, #5
 8002044:	430a      	orrs	r2, r1
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_CRC_MspInit+0x3c>)
 800204a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40023000 	.word	0x40023000
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	2414      	movs	r4, #20
 8002072:	193b      	adds	r3, r7, r4
 8002074:	0018      	movs	r0, r3
 8002076:	2314      	movs	r3, #20
 8002078:	001a      	movs	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f002 ff3d 	bl	8004efa <memset>
  if(hspi->Instance==SPI1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <HAL_SPI_MspInit+0xd0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d152      	bne.n	8002130 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_SPI_MspInit+0xd4>)
 800208c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_SPI_MspInit+0xd4>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0149      	lsls	r1, r1, #5
 8002094:	430a      	orrs	r2, r1
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_SPI_MspInit+0xd4>)
 800209a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020ac:	2101      	movs	r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020c4:	2102      	movs	r1, #2
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_SPI_MspInit+0xd4>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	22c0      	movs	r2, #192	; 0xc0
 80020da:	0152      	lsls	r2, r2, #5
 80020dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	2202      	movs	r2, #2
 80020e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	193a      	adds	r2, r7, r4
 80020f8:	23a0      	movs	r3, #160	; 0xa0
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f001 f94e 	bl	80033a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 8002104:	0021      	movs	r1, r4
 8002106:	187b      	adds	r3, r7, r1
 8002108:	2208      	movs	r2, #8
 800210a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	187b      	adds	r3, r7, r1
 800210e:	2202      	movs	r2, #2
 8002110:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8002124:	187b      	adds	r3, r7, r1
 8002126:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_SPI_MspInit+0xd8>)
 8002128:	0019      	movs	r1, r3
 800212a:	0010      	movs	r0, r2
 800212c:	f001 f938 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b00b      	add	sp, #44	; 0x2c
 8002136:	bd90      	pop	{r4, r7, pc}
 8002138:	40013000 	.word	0x40013000
 800213c:	40021000 	.word	0x40021000
 8002140:	50000400 	.word	0x50000400

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002168:	f000 fad4 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f002 fe76 	bl	8004e94 <__errno>
 80021a8:	0003      	movs	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	425b      	negs	r3, r3
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	18d2      	adds	r2, r2, r3
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <_sbrk+0x64>)
 80021c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b006      	add	sp, #24
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20002000 	.word	0x20002000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	2000018c 	.word	0x2000018c
 80021dc:	200001a8 	.word	0x200001a8

080021e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b7f      	cmp	r3, #127	; 0x7f
 80021fe:	d809      	bhi.n	8002214 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	001a      	movs	r2, r3
 8002206:	231f      	movs	r3, #31
 8002208:	401a      	ands	r2, r3
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <__NVIC_EnableIRQ+0x30>)
 800220c:	2101      	movs	r1, #1
 800220e:	4091      	lsls	r1, r2
 8002210:	000a      	movs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	e000e100 	.word	0xe000e100

08002220 <cleanByTimeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  cleanByTimeout(UART1_t* uart1,const char* str){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 800222a:	f000 fa85 	bl	8002738 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	21cc      	movs	r1, #204	; 0xcc
 8002234:	585b      	ldr	r3, [r3, r1]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <cleanByTimeout+0x58>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d917      	bls.n	800226e <cleanByTimeout+0x4e>
			uart1_send_str((char*)str);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f963 	bl	800250c <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <cleanByTimeout+0x5c>)
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f95f 	bl	800250c <uart1_send_str>
			if(strlen(str)>0)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <cleanByTimeout+0x3e>
				cleanTxBuffer(uart1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f9b3 	bl	80025c4 <cleanTxBuffer>
			uart1->timeout = HAL_GetTick();
 800225e:	f000 fa6b 	bl	8002738 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	21cc      	movs	r1, #204	; 0xcc
 8002268:	505a      	str	r2, [r3, r1]
			return 1;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <cleanByTimeout+0x50>
		}
		return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}
 8002278:	00001388 	.word	0x00001388
 800227c:	08005a20 	.word	0x08005a20

08002280 <uart1_gpio_init>:

void uart1_gpio_init() {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 8002284:	23a0      	movs	r3, #160	; 0xa0
 8002286:	05db      	lsls	r3, r3, #23
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	23a0      	movs	r3, #160	; 0xa0
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <uart1_gpio_init+0xd0>)
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 8002294:	23a0      	movs	r3, #160	; 0xa0
 8002296:	05db      	lsls	r3, r3, #23
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	23a0      	movs	r3, #160	; 0xa0
 800229c:	05db      	lsls	r3, r3, #23
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	0389      	lsls	r1, r1, #14
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 80022a6:	23a0      	movs	r3, #160	; 0xa0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	23a0      	movs	r3, #160	; 0xa0
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	4928      	ldr	r1, [pc, #160]	; (8002354 <uart1_gpio_init+0xd4>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 80022b6:	23a0      	movs	r3, #160	; 0xa0
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	23a0      	movs	r3, #160	; 0xa0
 80022be:	05db      	lsls	r3, r3, #23
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0309      	lsls	r1, r1, #12
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 80022c8:	23a0      	movs	r3, #160	; 0xa0
 80022ca:	05db      	lsls	r3, r3, #23
 80022cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ce:	23a0      	movs	r3, #160	; 0xa0
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0049      	lsls	r1, r1, #1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e0:	23a0      	movs	r3, #160	; 0xa0
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	491c      	ldr	r1, [pc, #112]	; (8002358 <uart1_gpio_init+0xd8>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f0:	23a0      	movs	r3, #160	; 0xa0
 80022f2:	05db      	lsls	r3, r3, #23
 80022f4:	4919      	ldr	r1, [pc, #100]	; (800235c <uart1_gpio_init+0xdc>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 80022fa:	23a0      	movs	r3, #160	; 0xa0
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	05db      	lsls	r3, r3, #23
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <uart1_gpio_init+0xe0>)
 8002306:	400a      	ands	r2, r1
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 800230a:	23a0      	movs	r3, #160	; 0xa0
 800230c:	05db      	lsls	r3, r3, #23
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	23a0      	movs	r3, #160	; 0xa0
 8002312:	05db      	lsls	r3, r3, #23
 8002314:	2110      	movs	r1, #16
 8002316:	430a      	orrs	r2, r1
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 800231a:	23a0      	movs	r3, #160	; 0xa0
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002320:	23a0      	movs	r3, #160	; 0xa0
 8002322:	05db      	lsls	r3, r3, #23
 8002324:	2120      	movs	r1, #32
 8002326:	438a      	bics	r2, r1
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 800232a:	23a0      	movs	r3, #160	; 0xa0
 800232c:	05db      	lsls	r3, r3, #23
 800232e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002330:	23a0      	movs	r3, #160	; 0xa0
 8002332:	05db      	lsls	r3, r3, #23
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	438a      	bics	r2, r1
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 800233a:	23a0      	movs	r3, #160	; 0xa0
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002340:	23a0      	movs	r3, #160	; 0xa0
 8002342:	05db      	lsls	r3, r3, #23
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	438a      	bics	r2, r1
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	ffefffff 	.word	0xffefffff
 8002354:	fffbffff 	.word	0xfffbffff
 8002358:	fffffdff 	.word	0xfffffdff
 800235c:	fffffbff 	.word	0xfffffbff
 8002360:	fffff7ff 	.word	0xfffff7ff

08002364 <uart1Init>:

void uart1Init(uint32_t pclk, uint32_t baud_rate, UART1_t *u) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
	uint32_t br_value = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

	uart1_gpio_init();
 8002374:	f7ff ff84 	bl	8002280 <uart1_gpio_init>

	/*enable clock access to USART1 */
	SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <uart1Init+0x8c>)
 800237a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <uart1Init+0x8c>)
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	01c9      	lsls	r1, r1, #7
 8002382:	430a      	orrs	r2, r1
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
	if (pclk == 16000000) {
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <uart1Init+0x90>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10b      	bne.n	80023a6 <uart1Init+0x42>
		/*set HSI 16 CLK */
		CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <uart1Init+0x8c>)
 8002390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <uart1Init+0x8c>)
 8002394:	2101      	movs	r1, #1
 8002396:	438a      	bics	r2, r1
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
		SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <uart1Init+0x8c>)
 800239c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <uart1Init+0x8c>)
 80023a0:	2102      	movs	r1, #2
 80023a2:	430a      	orrs	r2, r1
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
	/* set baud rate */
	br_value = (pclk) / baud_rate;
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fd feb3 	bl	8000114 <__udivsi3>
 80023ae:	0003      	movs	r3, r0
 80023b0:	617b      	str	r3, [r7, #20]
	USART1->BRR = (uint16_t) br_value;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <uart1Init+0x94>)
 80023b8:	60da      	str	r2, [r3, #12]
	/* transmitter enable*/
	USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <uart1Init+0x94>)
 80023bc:	220c      	movs	r2, #12
 80023be:	601a      	str	r2, [r3, #0]
	u->len = 0;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	22c8      	movs	r2, #200	; 0xc8
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]
	//uart1_clean_buffer(u);

	/* enable FIFO */
	//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
	/* Enable interrupt */
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <uart1Init+0x94>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <uart1Init+0x94>)
 80023ce:	2120      	movs	r1, #32
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80023d4:	201b      	movs	r0, #27
 80023d6:	f7ff ff09 	bl	80021ec <__NVIC_EnableIRQ>
	SET_BIT(USART1->CR1, USART_CR1_UE);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <uart1Init+0x94>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <uart1Init+0x94>)
 80023e0:	2101      	movs	r1, #1
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b006      	add	sp, #24
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	40013800 	.word	0x40013800

080023fc <uart1_write>:
	/* set the destination buffer */
	/*set the source buffer */

}

void uart1_write(char ch) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	0002      	movs	r2, r0
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <uart1_write+0x50>)
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <uart1_write+0x50>)
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	0089      	lsls	r1, r1, #2
 8002412:	430a      	orrs	r2, r1
 8002414:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <uart1_write+0x54>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	4013      	ands	r3, r2
 8002420:	d0fa      	beq.n	8002418 <uart1_write+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <uart1_write+0x54>)
 8002424:	1dfa      	adds	r2, r7, #7
 8002426:	7812      	ldrb	r2, [r2, #0]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <uart1_write+0x54>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	4013      	ands	r3, r2
 8002434:	d0fa      	beq.n	800242c <uart1_write+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <uart1_write+0x50>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <uart1_write+0x50>)
 800243c:	4905      	ldr	r1, [pc, #20]	; (8002454 <uart1_write+0x58>)
 800243e:	400a      	ands	r2, r1
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	50000400 	.word	0x50000400
 8002450:	40013800 	.word	0x40013800
 8002454:	fffffdff 	.word	0xfffffdff

08002458 <uart1_1byte_read>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t uart1_1byte_read(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <uart1_1byte_read+0x68>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2208      	movs	r2, #8
 8002464:	401a      	ands	r2, r3
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	1e51      	subs	r1, r2, #1
 800246a:	418a      	sbcs	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <uart1_1byte_read+0x68>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2220      	movs	r2, #32
 8002474:	401a      	ands	r2, r3
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	1e51      	subs	r1, r2, #1
 800247a:	418a      	sbcs	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 800247e:	1dbb      	adds	r3, r7, #6
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <uart1_1byte_read+0x36>
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <uart1_1byte_read+0x5c>
		if (override)
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <uart1_1byte_read+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <uart1_1byte_read+0x68>)
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <uart1_1byte_read+0x68>)
 800249c:	2108      	movs	r1, #8
 800249e:	430a      	orrs	r2, r1
 80024a0:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <uart1_1byte_read+0x68>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	1d7b      	adds	r3, r7, #5
 80024aa:	701a      	strb	r2, [r3, #0]
		return data;
 80024ac:	1d7b      	adds	r3, r7, #5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e000      	b.n	80024b6 <uart1_1byte_read+0x5e>
	} else
		return '\0';
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40013800 	.word	0x40013800

080024c4 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	if (u->len >= RX_BUFFLEN) {
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	22c8      	movs	r2, #200	; 0xc8
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	2b63      	cmp	r3, #99	; 0x63
 80024d4:	d907      	bls.n	80024e6 <uart1_read_to_frame+0x22>
		cleanRxBuffer(u);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f861 	bl	80025a0 <cleanRxBuffer>
		u->len = 0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	22c8      	movs	r2, #200	; 0xc8
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]
	}
	u->rxBuffer[u->len++] = uart1_1byte_read();
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	22c8      	movs	r2, #200	; 0xc8
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	b2d0      	uxtb	r0, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	5450      	strb	r0, [r2, r1]
 80024f6:	001c      	movs	r4, r3
 80024f8:	f7ff ffae 	bl	8002458 <uart1_1byte_read>
 80024fc:	0003      	movs	r3, r0
 80024fe:	001a      	movs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	551a      	strb	r2, [r3, r4]
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b003      	add	sp, #12
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <uart1_send_str>:

void uart1_send_str(char *str) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002514:	230f      	movs	r3, #15
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e00d      	b.n	800253a <uart1_send_str+0x2e>
		uart1_write(str[i]);
 800251e:	240f      	movs	r4, #15
 8002520:	193b      	adds	r3, r7, r4
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	18d3      	adds	r3, r2, r3
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ff66 	bl	80023fc <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002530:	193b      	adds	r3, r7, r4
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	193b      	adds	r3, r7, r4
 8002536:	3201      	adds	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	230f      	movs	r3, #15
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	18d3      	adds	r3, r2, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e9      	bne.n	800251e <uart1_send_str+0x12>
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b005      	add	sp, #20
 8002552:	bd90      	pop	{r4, r7, pc}

08002554 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	000a      	movs	r2, r1
 800255e:	1cfb      	adds	r3, r7, #3
 8002560:	701a      	strb	r2, [r3, #0]

	if (len > 0) {
 8002562:	1cfb      	adds	r3, r7, #3
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <uart1_send_frame+0x44>
		for (int i = 0; i < len; i++){
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e00e      	b.n	800258e <uart1_send_frame+0x3a>
			uart1_write(str[i]);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff3f 	bl	80023fc <uart1_write>
			str[i] = (char) '\0';
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	18d3      	adds	r3, r2, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	1cfb      	adds	r3, r7, #3
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	dbeb      	blt.n	8002570 <uart1_send_frame+0x1c>
		}
	}
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}

080025a0 <cleanRxBuffer>:

void cleanRxBuffer(UART1_t *u) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	memset(u->rxBuffer, 0, sizeof(u->len));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	2100      	movs	r1, #0
 80025ae:	0018      	movs	r0, r3
 80025b0:	f002 fca3 	bl	8004efa <memset>
	u->len = 0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	22c8      	movs	r2, #200	; 0xc8
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <cleanTxBuffer>:

void cleanTxBuffer(UART1_t *u) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	memset(u->txBuffer, 0, sizeof(u->len));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3364      	adds	r3, #100	; 0x64
 80025d0:	2201      	movs	r2, #1
 80025d2:	2100      	movs	r1, #0
 80025d4:	0018      	movs	r0, r3
 80025d6:	f002 fc90 	bl	8004efa <memset>
	u->len = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	22c8      	movs	r2, #200	; 0xc8
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80025ec:	480d      	ldr	r0, [pc, #52]	; (8002624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025f0:	f7ff fdf6 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <LoopForever+0xe>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <LoopForever+0x16>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800261a:	f002 fc41 	bl	8004ea0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800261e:	f7fe fefb 	bl	8001418 <main>

08002622 <LoopForever>:

LoopForever:
  b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   r0, =_estack
 8002624:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002630:	08005ab0 	.word	0x08005ab0
  ldr r2, =_sbss
 8002634:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002638:	200001a4 	.word	0x200001a4

0800263c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC1_IRQHandler>
	...

08002640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_Init+0x3c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_Init+0x3c>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0049      	lsls	r1, r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265a:	2003      	movs	r0, #3
 800265c:	f000 f810 	bl	8002680 <HAL_InitTick>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d003      	beq.n	800266c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e001      	b.n	8002670 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800266c:	f7ff fc74 	bl	8001f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	781b      	ldrb	r3, [r3, #0]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40022000 	.word	0x40022000

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_InitTick+0x88>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02b      	beq.n	80026f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_InitTick+0x8c>)
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_InitTick+0x88>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	0019      	movs	r1, r3
 80026a2:	23fa      	movs	r3, #250	; 0xfa
 80026a4:	0098      	lsls	r0, r3, #2
 80026a6:	f7fd fd35 	bl	8000114 <__udivsi3>
 80026aa:	0003      	movs	r3, r0
 80026ac:	0019      	movs	r1, r3
 80026ae:	0020      	movs	r0, r4
 80026b0:	f7fd fd30 	bl	8000114 <__udivsi3>
 80026b4:	0003      	movs	r3, r0
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 fd91 	bl	80031de <HAL_SYSTICK_Config>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d112      	bne.n	80026e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d80a      	bhi.n	80026dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	2301      	movs	r3, #1
 80026ca:	425b      	negs	r3, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 fd70 	bl	80031b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <HAL_InitTick+0x90>)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00d      	b.n	80026f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80026dc:	230f      	movs	r3, #15
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e008      	b.n	80026f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e6:	230f      	movs	r3, #15
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e003      	b.n	80026f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026f0:	230f      	movs	r3, #15
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80026f8:	230f      	movs	r3, #15
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b005      	add	sp, #20
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000008 	.word	0x20000008
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_IncTick+0x1c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	001a      	movs	r2, r3
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x20>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	18d2      	adds	r2, r2, r3
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_IncTick+0x20>)
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	20000008 	.word	0x20000008
 8002734:	20000190 	.word	0x20000190

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <HAL_GetTick+0x10>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000190 	.word	0x20000190

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff fff0 	bl	8002738 <HAL_GetTick>
 8002758:	0003      	movs	r3, r0
 800275a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3301      	adds	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	001a      	movs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	189b      	adds	r3, r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	f7ff ffe0 	bl	8002738 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	20000008 	.word	0x20000008

08002794 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80027a4:	401a      	ands	r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	fe3fffff 	.word	0xfe3fffff

080027bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	23e0      	movs	r3, #224	; 0xe0
 80027ca:	045b      	lsls	r3, r3, #17
 80027cc:	4013      	ands	r3, r2
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	2104      	movs	r1, #4
 80027ea:	400a      	ands	r2, r1
 80027ec:	2107      	movs	r1, #7
 80027ee:	4091      	lsls	r1, r2
 80027f0:	000a      	movs	r2, r1
 80027f2:	43d2      	mvns	r2, r2
 80027f4:	401a      	ands	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2104      	movs	r1, #4
 80027fa:	400b      	ands	r3, r1
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4099      	lsls	r1, r3
 8002800:	000b      	movs	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}

08002810 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	2104      	movs	r1, #4
 8002822:	400a      	ands	r2, r1
 8002824:	2107      	movs	r1, #7
 8002826:	4091      	lsls	r1, r2
 8002828:	000a      	movs	r2, r1
 800282a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2104      	movs	r1, #4
 8002830:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002832:	40da      	lsrs	r2, r3
 8002834:	0013      	movs	r3, r2
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}

0800283e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	211f      	movs	r1, #31
 8002852:	400a      	ands	r2, r1
 8002854:	210f      	movs	r1, #15
 8002856:	4091      	lsls	r1, r2
 8002858:	000a      	movs	r2, r1
 800285a:	43d2      	mvns	r2, r2
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	210f      	movs	r1, #15
 8002864:	4019      	ands	r1, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	201f      	movs	r0, #31
 800286a:	4003      	ands	r3, r0
 800286c:	4099      	lsls	r1, r3
 800286e:	000b      	movs	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b004      	add	sp, #16
 800287c:	bd80      	pop	{r7, pc}

0800287e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	035b      	lsls	r3, r3, #13
 8002890:	0b5b      	lsrs	r3, r3, #13
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	0352      	lsls	r2, r2, #13
 80028b2:	0b52      	lsrs	r2, r2, #13
 80028b4:	43d2      	mvns	r2, r2
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	43d2      	mvns	r2, r2
 80028da:	401a      	ands	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	400b      	ands	r3, r1
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	07ffff00 	.word	0x07ffff00

080028fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a05      	ldr	r2, [pc, #20]	; (8002920 <LL_ADC_EnableInternalRegulator+0x24>)
 800290a:	4013      	ands	r3, r2
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	0552      	lsls	r2, r2, #21
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b002      	add	sp, #8
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	6fffffe8 	.word	0x6fffffe8

08002924 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	055b      	lsls	r3, r3, #21
 8002934:	401a      	ands	r2, r3
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	055b      	lsls	r3, r3, #21
 800293a:	429a      	cmp	r2, r3
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002942:	2300      	movs	r3, #0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2201      	movs	r2, #1
 800295a:	4013      	ands	r3, r2
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsEnabled+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsEnabled+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}

0800296e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	2b04      	cmp	r3, #4
 8002980:	d101      	bne.n	8002986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002986:	2300      	movs	r3, #0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002998:	231f      	movs	r3, #31
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e17f      	b.n	8002cb6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff faed 	bl	8001fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2254      	movs	r2, #84	; 0x54
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff ffa3 	bl	8002924 <LL_ADC_IsInternalRegulatorEnabled>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d115      	bne.n	8002a0e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff ff88 	bl	80028fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ec:	4bb4      	ldr	r3, [pc, #720]	; (8002cc0 <HAL_ADC_Init+0x330>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	49b4      	ldr	r1, [pc, #720]	; (8002cc4 <HAL_ADC_Init+0x334>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7fd fb8e 	bl	8000114 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a00:	e002      	b.n	8002a08 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f9      	bne.n	8002a02 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff ff86 	bl	8002924 <LL_ADC_IsInternalRegulatorEnabled>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	2210      	movs	r2, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a34:	231f      	movs	r3, #31
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff ff94 	bl	800296e <LL_ADC_REG_IsConversionOngoing>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	2210      	movs	r2, #16
 8002a50:	4013      	ands	r3, r2
 8002a52:	d000      	beq.n	8002a56 <HAL_ADC_Init+0xc6>
 8002a54:	e122      	b.n	8002c9c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d000      	beq.n	8002a5e <HAL_ADC_Init+0xce>
 8002a5c:	e11e      	b.n	8002c9c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a99      	ldr	r2, [pc, #612]	; (8002cc8 <HAL_ADC_Init+0x338>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	2202      	movs	r2, #2
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff ff6a 	bl	800294c <LL_ADC_IsEnabled>
 8002a78:	1e03      	subs	r3, r0, #0
 8002a7a:	d000      	beq.n	8002a7e <HAL_ADC_Init+0xee>
 8002a7c:	e0ad      	b.n	8002bda <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e1b      	ldrb	r3, [r3, #24]
 8002a86:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002a88:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7e5b      	ldrb	r3, [r3, #25]
 8002a8e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a90:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7e9b      	ldrb	r3, [r3, #26]
 8002a96:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a98:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_ADC_Init+0x118>
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	e000      	b.n	8002aaa <HAL_ADC_Init+0x11a>
 8002aa8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002aaa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ab0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da04      	bge.n	8002ac4 <HAL_ADC_Init+0x134>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	e001      	b.n	8002ac8 <HAL_ADC_Init+0x138>
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002ac8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	5c5b      	ldrb	r3, [r3, r1]
 8002ad0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ad2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d115      	bne.n	8002b10 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7e9b      	ldrb	r3, [r3, #26]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	0252      	lsls	r2, r2, #9
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e00b      	b.n	8002b10 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	2220      	movs	r2, #32
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1c:	23e0      	movs	r3, #224	; 0xe0
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b26:	4313      	orrs	r3, r2
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a65      	ldr	r2, [pc, #404]	; (8002ccc <HAL_ADC_Init+0x33c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0f9b      	lsrs	r3, r3, #30
 8002b4a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223c      	movs	r2, #60	; 0x3c
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d111      	bne.n	8002b86 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0f9b      	lsrs	r3, r3, #30
 8002b68:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b6e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002b74:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002b7a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	2201      	movs	r2, #1
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_ADC_Init+0x340>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	23c0      	movs	r3, #192	; 0xc0
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d018      	beq.n	8002bda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	05db      	lsls	r3, r3, #23
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d012      	beq.n	8002bda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d00c      	beq.n	8002bda <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002bc0:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_ADC_Init+0x344>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a44      	ldr	r2, [pc, #272]	; (8002cd8 <HAL_ADC_Init+0x348>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	23f0      	movs	r3, #240	; 0xf0
 8002bd0:	039b      	lsls	r3, r3, #14
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <HAL_ADC_Init+0x344>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be2:	001a      	movs	r2, r3
 8002be4:	2100      	movs	r1, #0
 8002be6:	f7ff fdf6 	bl	80027d6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	493a      	ldr	r1, [pc, #232]	; (8002cdc <HAL_ADC_Init+0x34c>)
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	f7ff fdee 	bl	80027d6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	4249      	negs	r1, r1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e018      	b.n	8002c48 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	039b      	lsls	r3, r3, #14
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d112      	bne.n	8002c48 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	221c      	movs	r2, #28
 8002c32:	4013      	ands	r3, r2
 8002c34:	2210      	movs	r2, #16
 8002c36:	4252      	negs	r2, r2
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff fdde 	bl	8002810 <LL_ADC_GetSamplingTimeCommonChannels>
 8002c54:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10b      	bne.n	8002c76 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4393      	bics	r3, r2
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c74:	e01c      	b.n	8002cb0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	2212      	movs	r2, #18
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	2210      	movs	r2, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c92:	231f      	movs	r3, #31
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c9a:	e009      	b.n	8002cb0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ca8:	231f      	movs	r3, #31
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b008      	add	sp, #32
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	00030d40 	.word	0x00030d40
 8002cc8:	fffffefd 	.word	0xfffffefd
 8002ccc:	fffe0201 	.word	0xfffe0201
 8002cd0:	1ffffc02 	.word	0x1ffffc02
 8002cd4:	40012708 	.word	0x40012708
 8002cd8:	ffc3ffff 	.word	0xffc3ffff
 8002cdc:	07ffff04 	.word	0x07ffff04

08002ce0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cea:	2317      	movs	r3, #23
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2254      	movs	r2, #84	; 0x54
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x24>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e1c0      	b.n	8003086 <HAL_ADC_ConfigChannel+0x3a6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2254      	movs	r2, #84	; 0x54
 8002d08:	2101      	movs	r1, #1
 8002d0a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fe2c 	bl	800296e <LL_ADC_REG_IsConversionOngoing>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d000      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x3c>
 8002d1a:	e1a3      	b.n	8003064 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d100      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x46>
 8002d24:	e143      	b.n	8002fae <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d004      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d36:	4ac1      	ldr	r2, [pc, #772]	; (800303c <HAL_ADC_ConfigChannel+0x35c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0019      	movs	r1, r3
 8002d46:	0010      	movs	r0, r2
 8002d48:	f7ff fd99 	bl	800287e <LL_ADC_REG_SetSequencerChAdd>
 8002d4c:	e0c9      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	211f      	movs	r1, #31
 8002d58:	400b      	ands	r3, r1
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	4099      	lsls	r1, r3
 8002d5e:	000b      	movs	r3, r1
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	035b      	lsls	r3, r3, #13
 8002d6c:	0b5b      	lsrs	r3, r3, #13
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x9c>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	221f      	movs	r2, #31
 8002d78:	4013      	ands	r3, r2
 8002d7a:	e098      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	d000      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0xa8>
 8002d86:	e091      	b.n	8002eac <HAL_ADC_ConfigChannel+0x1cc>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d000      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0xb4>
 8002d92:	e089      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x1c8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d000      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0xc0>
 8002d9e:	e081      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x1c4>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2208      	movs	r2, #8
 8002da6:	4013      	ands	r3, r2
 8002da8:	d000      	beq.n	8002dac <HAL_ADC_ConfigChannel+0xcc>
 8002daa:	e079      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x1c0>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2210      	movs	r2, #16
 8002db2:	4013      	ands	r3, r2
 8002db4:	d000      	beq.n	8002db8 <HAL_ADC_ConfigChannel+0xd8>
 8002db6:	e071      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1bc>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d000      	beq.n	8002dc4 <HAL_ADC_ConfigChannel+0xe4>
 8002dc2:	e069      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x1b8>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d000      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0xf0>
 8002dce:	e061      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1b4>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d000      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0xfc>
 8002dda:	e059      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x1b0>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d151      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1ac>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d149      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1a8>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d141      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1a4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d139      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1a0>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	015b      	lsls	r3, r3, #5
 8002e14:	4013      	ands	r3, r2
 8002e16:	d131      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x19c>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	4013      	ands	r3, r2
 8002e22:	d129      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x198>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d121      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x194>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d119      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x190>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	4013      	ands	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x18c>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	4013      	ands	r3, r2
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x188>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	02db      	lsls	r3, r3, #11
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d001      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x184>
 8002e60:	2312      	movs	r3, #18
 8002e62:	e024      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e64:	2300      	movs	r3, #0
 8002e66:	e022      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e68:	2311      	movs	r3, #17
 8002e6a:	e020      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	e01e      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e70:	230f      	movs	r3, #15
 8002e72:	e01c      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e74:	230e      	movs	r3, #14
 8002e76:	e01a      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e78:	230d      	movs	r3, #13
 8002e7a:	e018      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	e016      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e80:	230b      	movs	r3, #11
 8002e82:	e014      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e84:	230a      	movs	r3, #10
 8002e86:	e012      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e88:	2309      	movs	r3, #9
 8002e8a:	e010      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	e00e      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e90:	2307      	movs	r3, #7
 8002e92:	e00c      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e94:	2306      	movs	r3, #6
 8002e96:	e00a      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e98:	2305      	movs	r3, #5
 8002e9a:	e008      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e006      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e004      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e002      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_ADC_ConfigChannel+0x1ce>
 8002eac:	2300      	movs	r3, #0
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	6852      	ldr	r2, [r2, #4]
 8002eb2:	201f      	movs	r0, #31
 8002eb4:	4002      	ands	r2, r0
 8002eb6:	4093      	lsls	r3, r2
 8002eb8:	000a      	movs	r2, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d808      	bhi.n	8002ee2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	001a      	movs	r2, r3
 8002ede:	f7ff fcae 	bl	800283e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	f7ff fce8 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	db00      	blt.n	8002efe <HAL_ADC_ConfigChannel+0x21e>
 8002efc:	e0bc      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002efe:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff fc5b 	bl	80027bc <LL_ADC_GetCommonPathInternalCh>
 8002f06:	0003      	movs	r3, r0
 8002f08:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_ADC_ConfigChannel+0x364>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d122      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f1c:	d11d      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	0412      	lsls	r2, r2, #16
 8002f24:	4313      	orrs	r3, r2
 8002f26:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002f28:	0019      	movs	r1, r3
 8002f2a:	0010      	movs	r0, r2
 8002f2c:	f7ff fc32 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f30:	4b45      	ldr	r3, [pc, #276]	; (8003048 <HAL_ADC_ConfigChannel+0x368>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4945      	ldr	r1, [pc, #276]	; (800304c <HAL_ADC_ConfigChannel+0x36c>)
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd f8ec 	bl	8000114 <__udivsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	0013      	movs	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f9      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f58:	e08e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_ADC_ConfigChannel+0x370>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10e      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	045b      	lsls	r3, r3, #17
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0452      	lsls	r2, r2, #17
 8002f74:	4313      	orrs	r3, r2
 8002f76:	4a32      	ldr	r2, [pc, #200]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002f78:	0019      	movs	r1, r3
 8002f7a:	0010      	movs	r0, r2
 8002f7c:	f7ff fc0a 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
 8002f80:	e07a      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <HAL_ADC_ConfigChannel+0x374>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d000      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x2ae>
 8002f8c:	e074      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	03db      	lsls	r3, r3, #15
 8002f94:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f96:	d000      	beq.n	8002f9a <HAL_ADC_ConfigChannel+0x2ba>
 8002f98:	e06e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	03d2      	lsls	r2, r2, #15
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f7ff fbf4 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
 8002fac:	e064      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_ADC_ConfigChannel+0x35c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d107      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0019      	movs	r1, r3
 8002fce:	0010      	movs	r0, r2
 8002fd0:	f7ff fc66 	bl	80028a0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da4d      	bge.n	8003078 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff fbec 	bl	80027bc <LL_ADC_GetCommonPathInternalCh>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_ADC_ConfigChannel+0x364>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_ADC_ConfigChannel+0x378>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f7ff fbc9 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
 8003002:	e039      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_ADC_ConfigChannel+0x370>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <HAL_ADC_ConfigChannel+0x37c>)
 8003012:	4013      	ands	r3, r2
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8003016:	0019      	movs	r1, r3
 8003018:	0010      	movs	r0, r2
 800301a:	f7ff fbbb 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
 800301e:	e02b      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <HAL_ADC_ConfigChannel+0x374>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d126      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <HAL_ADC_ConfigChannel+0x380>)
 800302e:	4013      	ands	r3, r2
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <HAL_ADC_ConfigChannel+0x360>)
 8003032:	0019      	movs	r1, r3
 8003034:	0010      	movs	r0, r2
 8003036:	f7ff fbad 	bl	8002794 <LL_ADC_SetCommonPathInternalCh>
 800303a:	e01d      	b.n	8003078 <HAL_ADC_ConfigChannel+0x398>
 800303c:	80000004 	.word	0x80000004
 8003040:	40012708 	.word	0x40012708
 8003044:	b0001000 	.word	0xb0001000
 8003048:	20000000 	.word	0x20000000
 800304c:	00030d40 	.word	0x00030d40
 8003050:	b8004000 	.word	0xb8004000
 8003054:	b4002000 	.word	0xb4002000
 8003058:	ff7fffff 	.word	0xff7fffff
 800305c:	feffffff 	.word	0xfeffffff
 8003060:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	2220      	movs	r2, #32
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003070:	2317      	movs	r3, #23
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2254      	movs	r2, #84	; 0x54
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003080:	2317      	movs	r3, #23
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	1dfb      	adds	r3, r7, #7
 800309c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b7f      	cmp	r3, #127	; 0x7f
 80030a4:	d828      	bhi.n	80030f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <__NVIC_SetPriority+0xd4>)
 80030a8:	1dfb      	adds	r3, r7, #7
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	33c0      	adds	r3, #192	; 0xc0
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	589b      	ldr	r3, [r3, r2]
 80030b6:	1dfa      	adds	r2, r7, #7
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	0011      	movs	r1, r2
 80030bc:	2203      	movs	r2, #3
 80030be:	400a      	ands	r2, r1
 80030c0:	00d2      	lsls	r2, r2, #3
 80030c2:	21ff      	movs	r1, #255	; 0xff
 80030c4:	4091      	lsls	r1, r2
 80030c6:	000a      	movs	r2, r1
 80030c8:	43d2      	mvns	r2, r2
 80030ca:	401a      	ands	r2, r3
 80030cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	401a      	ands	r2, r3
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	0018      	movs	r0, r3
 80030dc:	2303      	movs	r3, #3
 80030de:	4003      	ands	r3, r0
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030e4:	481f      	ldr	r0, [pc, #124]	; (8003164 <__NVIC_SetPriority+0xd4>)
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	430a      	orrs	r2, r1
 80030f0:	33c0      	adds	r3, #192	; 0xc0
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030f6:	e031      	b.n	800315c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <__NVIC_SetPriority+0xd8>)
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0019      	movs	r1, r3
 8003100:	230f      	movs	r3, #15
 8003102:	400b      	ands	r3, r1
 8003104:	3b08      	subs	r3, #8
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3306      	adds	r3, #6
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	3304      	adds	r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1dfa      	adds	r2, r7, #7
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	0011      	movs	r1, r2
 8003118:	2203      	movs	r2, #3
 800311a:	400a      	ands	r2, r1
 800311c:	00d2      	lsls	r2, r2, #3
 800311e:	21ff      	movs	r1, #255	; 0xff
 8003120:	4091      	lsls	r1, r2
 8003122:	000a      	movs	r2, r1
 8003124:	43d2      	mvns	r2, r2
 8003126:	401a      	ands	r2, r3
 8003128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	019b      	lsls	r3, r3, #6
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	401a      	ands	r2, r3
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	0018      	movs	r0, r3
 8003138:	2303      	movs	r3, #3
 800313a:	4003      	ands	r3, r0
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <__NVIC_SetPriority+0xd8>)
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	001c      	movs	r4, r3
 8003148:	230f      	movs	r3, #15
 800314a:	4023      	ands	r3, r4
 800314c:	3b08      	subs	r3, #8
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	430a      	orrs	r2, r1
 8003152:	3306      	adds	r3, #6
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	18c3      	adds	r3, r0, r3
 8003158:	3304      	adds	r3, #4
 800315a:	601a      	str	r2, [r3, #0]
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b003      	add	sp, #12
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	045b      	lsls	r3, r3, #17
 800317c:	429a      	cmp	r2, r3
 800317e:	d301      	bcc.n	8003184 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003180:	2301      	movs	r3, #1
 8003182:	e010      	b.n	80031a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <SysTick_Config+0x44>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	3a01      	subs	r2, #1
 800318a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318c:	2301      	movs	r3, #1
 800318e:	425b      	negs	r3, r3
 8003190:	2103      	movs	r1, #3
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff ff7c 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <SysTick_Config+0x44>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <SysTick_Config+0x44>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	210f      	movs	r1, #15
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	1c02      	adds	r2, r0, #0
 80031c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b004      	add	sp, #16
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff ffbf 	bl	800316c <SysTick_Config>
 80031ee:	0003      	movs	r3, r0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b002      	add	sp, #8
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e056      	b.n	80032b8 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7f5b      	ldrb	r3, [r3, #29]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7fe ff03 	bl	8002028 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10c      	bne.n	800324a <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_CRC_Init+0xc8>)
 8003236:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2118      	movs	r1, #24
 8003244:	438a      	bics	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	e00b      	b.n	8003262 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6899      	ldr	r1, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 f835 	bl	80032c4 <HAL_CRCEx_Polynomial_Set>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02a      	b.n	80032b8 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	795b      	ldrb	r3, [r3, #5]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	4252      	negs	r2, r2
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	e004      	b.n	8003280 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6912      	ldr	r2, [r2, #16]
 800327e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2260      	movs	r2, #96	; 0x60
 8003288:	4393      	bics	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	4393      	bics	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	04c11db7 	.word	0x04c11db7

080032c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2317      	movs	r3, #23
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032d8:	231f      	movs	r3, #31
 80032da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	613a      	str	r2, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_CRCEx_Polynomial_Set+0x36>
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	221f      	movs	r2, #31
 80032ec:	4013      	ands	r3, r2
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	40da      	lsrs	r2, r3
 80032f2:	0013      	movs	r3, r2
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d0f1      	beq.n	80032de <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b18      	cmp	r3, #24
 80032fe:	d00f      	beq.n	8003320 <HAL_CRCEx_Polynomial_Set+0x5c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b18      	cmp	r3, #24
 8003304:	d824      	bhi.n	8003350 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b10      	cmp	r3, #16
 800330a:	d011      	beq.n	8003330 <HAL_CRCEx_Polynomial_Set+0x6c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d81e      	bhi.n	8003350 <HAL_CRCEx_Polynomial_Set+0x8c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_CRCEx_Polynomial_Set+0x96>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d010      	beq.n	8003340 <HAL_CRCEx_Polynomial_Set+0x7c>
 800331e:	e017      	b.n	8003350 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d91b      	bls.n	800335e <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8003326:	2317      	movs	r3, #23
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800332e:	e016      	b.n	800335e <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b07      	cmp	r3, #7
 8003334:	d915      	bls.n	8003362 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8003336:	2317      	movs	r3, #23
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800333e:	e010      	b.n	8003362 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	d90f      	bls.n	8003366 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800334e:	e00a      	b.n	8003366 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003350:	2317      	movs	r3, #23
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
      break;
 8003358:	e006      	b.n	8003368 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	e004      	b.n	8003368 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	e002      	b.n	8003368 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	e000      	b.n	8003368 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8003366:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8003368:	2317      	movs	r3, #23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10e      	bne.n	8003390 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2218      	movs	r2, #24
 8003382:	4393      	bics	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003390:	2317      	movs	r3, #23
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b006      	add	sp, #24
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e147      	b.n	8003640 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4091      	lsls	r1, r2
 80033ba:	000a      	movs	r2, r1
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <HAL_GPIO_Init+0x28>
 80033c6:	e138      	b.n	800363a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x40>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	4013      	ands	r3, r2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	409a      	lsls	r2, r3
 80033ee:	0013      	movs	r3, r2
 80033f0:	43da      	mvns	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	409a      	lsls	r2, r3
 8003402:	0013      	movs	r3, r2
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	43da      	mvns	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	2201      	movs	r2, #1
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	2b03      	cmp	r3, #3
 800344c:	d017      	beq.n	800347e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2203      	movs	r2, #3
 8003484:	4013      	ands	r3, r2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d123      	bne.n	80034d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	58d3      	ldr	r3, [r2, r3]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2207      	movs	r2, #7
 800349c:	4013      	ands	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	409a      	lsls	r2, r3
 80034a4:	0013      	movs	r3, r2
 80034a6:	43da      	mvns	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2107      	movs	r1, #7
 80034b6:	400b      	ands	r3, r1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	409a      	lsls	r2, r3
 80034bc:	0013      	movs	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	43da      	mvns	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	401a      	ands	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	0013      	movs	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	4013      	ands	r3, r2
 8003510:	d100      	bne.n	8003514 <HAL_GPIO_Init+0x174>
 8003512:	e092      	b.n	800363a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003514:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3318      	adds	r3, #24
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	589b      	ldr	r3, [r3, r2]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2203      	movs	r2, #3
 8003526:	4013      	ands	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	220f      	movs	r2, #15
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	23a0      	movs	r3, #160	; 0xa0
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d013      	beq.n	800356a <HAL_GPIO_Init+0x1ca>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a45      	ldr	r2, [pc, #276]	; (800365c <HAL_GPIO_Init+0x2bc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_GPIO_Init+0x1c6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a44      	ldr	r2, [pc, #272]	; (8003660 <HAL_GPIO_Init+0x2c0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_GPIO_Init+0x1c2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a43      	ldr	r2, [pc, #268]	; (8003664 <HAL_GPIO_Init+0x2c4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_GPIO_Init+0x1be>
 800355a:	2303      	movs	r3, #3
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x1cc>
 800355e:	2305      	movs	r3, #5
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x1cc>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x1cc>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x1cc>
 800356a:	2300      	movs	r3, #0
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	2103      	movs	r1, #3
 8003570:	400a      	ands	r2, r1
 8003572:	00d2      	lsls	r2, r2, #3
 8003574:	4093      	lsls	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800357c:	4936      	ldr	r1, [pc, #216]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3318      	adds	r3, #24
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	035b      	lsls	r3, r3, #13
 80035a2:	4013      	ands	r3, r2
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80035b4:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43da      	mvns	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	039b      	lsls	r3, r3, #14
 80035cc:	4013      	ands	r3, r2
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 80035e0:	2384      	movs	r3, #132	; 0x84
 80035e2:	58d3      	ldr	r3, [r2, r3]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	029b      	lsls	r3, r3, #10
 80035f8:	4013      	ands	r3, r2
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003604:	4914      	ldr	r1, [pc, #80]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 8003606:	2284      	movs	r2, #132	; 0x84
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800360c:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	58d3      	ldr	r3, [r2, r3]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	43da      	mvns	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	025b      	lsls	r3, r3, #9
 8003626:	4013      	ands	r3, r2
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003632:	4909      	ldr	r1, [pc, #36]	; (8003658 <HAL_GPIO_Init+0x2b8>)
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	40da      	lsrs	r2, r3
 8003648:	1e13      	subs	r3, r2, #0
 800364a:	d000      	beq.n	800364e <HAL_GPIO_Init+0x2ae>
 800364c:	e6b0      	b.n	80033b0 <HAL_GPIO_Init+0x10>
  }
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b006      	add	sp, #24
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021800 	.word	0x40021800
 800365c:	50000400 	.word	0x50000400
 8003660:	50000800 	.word	0x50000800
 8003664:	50000c00 	.word	0x50000c00

08003668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	000a      	movs	r2, r1
 8003672:	1cbb      	adds	r3, r7, #2
 8003674:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	1cba      	adds	r2, r7, #2
 800367c:	8812      	ldrh	r2, [r2, #0]
 800367e:	4013      	ands	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003682:	230f      	movs	r3, #15
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e003      	b.n	8003694 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003694:	230f      	movs	r3, #15
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	0008      	movs	r0, r1
 80036ac:	0011      	movs	r1, r2
 80036ae:	1cbb      	adds	r3, r7, #2
 80036b0:	1c02      	adds	r2, r0, #0
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	1c7b      	adds	r3, r7, #1
 80036b6:	1c0a      	adds	r2, r1, #0
 80036b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ba:	1c7b      	adds	r3, r7, #1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036c2:	1cbb      	adds	r3, r7, #2
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ca:	e003      	b.n	80036d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036cc:	1cbb      	adds	r3, r7, #2
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d11f      	bne.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	0013      	movs	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	189b      	adds	r3, r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4912      	ldr	r1, [pc, #72]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800370e:	0018      	movs	r0, r3
 8003710:	f7fc fd00 	bl	8000114 <__udivsi3>
 8003714:	0003      	movs	r3, r0
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800371a:	e008      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e001      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e009      	b.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	401a      	ands	r2, r3
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	429a      	cmp	r2, r3
 800373e:	d0ed      	beq.n	800371c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40007000 	.word	0x40007000
 8003750:	fffff9ff 	.word	0xfffff9ff
 8003754:	20000000 	.word	0x20000000
 8003758:	000f4240 	.word	0x000f4240

0800375c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e2f3      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d100      	bne.n	800377a <HAL_RCC_OscConfig+0x1e>
 8003778:	e07c      	b.n	8003874 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4bc3      	ldr	r3, [pc, #780]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4bc0      	ldr	r3, [pc, #768]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2203      	movs	r2, #3
 800378a:	4013      	ands	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0x3e>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4bb9      	ldr	r3, [pc, #740]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	4013      	ands	r3, r2
 80037aa:	d062      	beq.n	8003872 <HAL_RCC_OscConfig+0x116>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d15e      	bne.n	8003872 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e2ce      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	025b      	lsls	r3, r3, #9
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x78>
 80037c4:	4bb0      	ldr	r3, [pc, #704]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4baf      	ldr	r3, [pc, #700]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	0249      	lsls	r1, r1, #9
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	e020      	b.n	8003816 <HAL_RCC_OscConfig+0xba>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	23a0      	movs	r3, #160	; 0xa0
 80037da:	02db      	lsls	r3, r3, #11
 80037dc:	429a      	cmp	r2, r3
 80037de:	d10e      	bne.n	80037fe <HAL_RCC_OscConfig+0xa2>
 80037e0:	4ba9      	ldr	r3, [pc, #676]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4ba8      	ldr	r3, [pc, #672]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	02c9      	lsls	r1, r1, #11
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	4ba6      	ldr	r3, [pc, #664]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4ba5      	ldr	r3, [pc, #660]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0249      	lsls	r1, r1, #9
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0xba>
 80037fe:	4ba2      	ldr	r3, [pc, #648]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4ba1      	ldr	r3, [pc, #644]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003804:	49a1      	ldr	r1, [pc, #644]	; (8003a8c <HAL_RCC_OscConfig+0x330>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	4b9f      	ldr	r3, [pc, #636]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b9e      	ldr	r3, [pc, #632]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003810:	499f      	ldr	r1, [pc, #636]	; (8003a90 <HAL_RCC_OscConfig+0x334>)
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d014      	beq.n	8003848 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe ff8b 	bl	8002738 <HAL_GetTick>
 8003822:	0003      	movs	r3, r0
 8003824:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fe ff86 	bl	8002738 <HAL_GetTick>
 800382c:	0002      	movs	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e28d      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	029b      	lsls	r3, r3, #10
 8003842:	4013      	ands	r3, r2
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xcc>
 8003846:	e015      	b.n	8003874 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe ff76 	bl	8002738 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003852:	f7fe ff71 	bl	8002738 <HAL_GetTick>
 8003856:	0002      	movs	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b64      	cmp	r3, #100	; 0x64
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e278      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	4013      	ands	r3, r2
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0xf6>
 8003870:	e000      	b.n	8003874 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003872:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2202      	movs	r2, #2
 800387a:	4013      	ands	r3, r2
 800387c:	d100      	bne.n	8003880 <HAL_RCC_OscConfig+0x124>
 800387e:	e099      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003880:	4b81      	ldr	r3, [pc, #516]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2238      	movs	r2, #56	; 0x38
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800388a:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	4013      	ands	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b10      	cmp	r3, #16
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0x144>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d002      	beq.n	80038a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d135      	bne.n	8003912 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a6:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4013      	ands	r3, r2
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x162>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e24b      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a74      	ldr	r2, [pc, #464]	; (8003a94 <HAL_RCC_OscConfig+0x338>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	021a      	lsls	r2, r3, #8
 80038ce:	4b6e      	ldr	r3, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038da:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x33c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80038ee:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	0adb      	lsrs	r3, r3, #11
 80038f4:	2207      	movs	r2, #7
 80038f6:	4013      	ands	r3, r2
 80038f8:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x340>)
 80038fa:	40da      	lsrs	r2, r3
 80038fc:	4b68      	ldr	r3, [pc, #416]	; (8003aa0 <HAL_RCC_OscConfig+0x344>)
 80038fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_OscConfig+0x348>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0018      	movs	r0, r3
 8003906:	f7fe febb 	bl	8002680 <HAL_InitTick>
 800390a:	1e03      	subs	r3, r0, #0
 800390c:	d051      	beq.n	80039b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e221      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d030      	beq.n	800397c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x33c>)
 8003920:	4013      	ands	r3, r2
 8003922:	0019      	movs	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0049      	lsls	r1, r1, #1
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fefc 	bl	8002738 <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fe fef7 	bl	8002738 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1fe      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4013      	ands	r3, r2
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b48      	ldr	r3, [pc, #288]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_RCC_OscConfig+0x338>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	e01b      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800397c:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003982:	4949      	ldr	r1, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x34c>)
 8003984:	400a      	ands	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fed6 	bl	8002738 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fed1 	bl	8002738 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1d8      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4013      	ands	r3, r2
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x236>
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2208      	movs	r2, #8
 80039ba:	4013      	ands	r3, r2
 80039bc:	d047      	beq.n	8003a4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039be:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2238      	movs	r2, #56	; 0x38
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b18      	cmp	r3, #24
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	2202      	movs	r2, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d03c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x2f2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d138      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e1ba      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d019      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ec:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe fea0 	bl	8002738 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe fe9b 	bl	8002738 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1a2      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	2202      	movs	r2, #2
 8003a16:	4013      	ands	r3, r2
 8003a18:	d0f1      	beq.n	80039fe <HAL_RCC_OscConfig+0x2a2>
 8003a1a:	e018      	b.n	8003a4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	438a      	bics	r2, r1
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fe86 	bl	8002738 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fe81 	bl	8002738 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e188      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f1      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2204      	movs	r2, #4
 8003a54:	4013      	ands	r3, r2
 8003a56:	d100      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2fe>
 8003a58:	e0c6      	b.n	8003be8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5a:	231f      	movs	r3, #31
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2238      	movs	r2, #56	; 0x38
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d11e      	bne.n	8003aac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_OscConfig+0x32c>)
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d100      	bne.n	8003a7a <HAL_RCC_OscConfig+0x31e>
 8003a78:	e0b6      	b.n	8003be8 <HAL_RCC_OscConfig+0x48c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d000      	beq.n	8003a84 <HAL_RCC_OscConfig+0x328>
 8003a82:	e0b1      	b.n	8003be8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e166      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	fffeffff 	.word	0xfffeffff
 8003a90:	fffbffff 	.word	0xfffbffff
 8003a94:	ffff80ff 	.word	0xffff80ff
 8003a98:	ffffc7ff 	.word	0xffffc7ff
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aac:	4bac      	ldr	r3, [pc, #688]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	055b      	lsls	r3, r3, #21
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_OscConfig+0x360>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x362>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d011      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4ba7      	ldr	r3, [pc, #668]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac6:	4ba6      	ldr	r3, [pc, #664]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	0549      	lsls	r1, r1, #21
 8003acc:	430a      	orrs	r2, r1
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003ade:	231f      	movs	r3, #31
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae6:	4b9f      	ldr	r3, [pc, #636]	; (8003d64 <HAL_RCC_OscConfig+0x608>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af2:	4b9c      	ldr	r3, [pc, #624]	; (8003d64 <HAL_RCC_OscConfig+0x608>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b9b      	ldr	r3, [pc, #620]	; (8003d64 <HAL_RCC_OscConfig+0x608>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0049      	lsls	r1, r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b00:	f7fe fe1a 	bl	8002738 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7fe fe15 	bl	8002738 <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e11c      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1c:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x608>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3e2>
 8003b30:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b34:	4b8a      	ldr	r3, [pc, #552]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b36:	2101      	movs	r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCC_OscConfig+0x41c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x404>
 8003b46:	4b86      	ldr	r3, [pc, #536]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b52:	4b83      	ldr	r3, [pc, #524]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b56:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0x41c>
 8003b60:	4b7f      	ldr	r3, [pc, #508]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	438a      	bics	r2, r1
 8003b6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b6c:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b70:	4b7b      	ldr	r3, [pc, #492]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003b72:	2104      	movs	r1, #4
 8003b74:	438a      	bics	r2, r1
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe fdda 	bl	8002738 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe fdd5 	bl	8002738 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a74      	ldr	r2, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x60c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0db      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x42e>
 8003ba8:	e013      	b.n	8003bd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe fdc5 	bl	8002738 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fdc0 	bl	8002738 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x60c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0c6      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc8:	4b65      	ldr	r3, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bd2:	231f      	movs	r3, #31
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b60      	ldr	r3, [pc, #384]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003be2:	4962      	ldr	r1, [pc, #392]	; (8003d6c <HAL_RCC_OscConfig+0x610>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d100      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x496>
 8003bf0:	e0b0      	b.n	8003d54 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2238      	movs	r2, #56	; 0x38
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d100      	bne.n	8003c00 <HAL_RCC_OscConfig+0x4a4>
 8003bfe:	e078      	b.n	8003cf2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d153      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b54      	ldr	r3, [pc, #336]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c0e:	4958      	ldr	r1, [pc, #352]	; (8003d70 <HAL_RCC_OscConfig+0x614>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fe fd90 	bl	8002738 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fd8b 	bl	8002738 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e092      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	049b      	lsls	r3, r3, #18
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3c:	4b48      	ldr	r3, [pc, #288]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a4c      	ldr	r2, [pc, #304]	; (8003d74 <HAL_RCC_OscConfig+0x618>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	431a      	orrs	r2, r3
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	0449      	lsls	r1, r1, #17
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b38      	ldr	r3, [pc, #224]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	0549      	lsls	r1, r1, #21
 8003c82:	430a      	orrs	r2, r1
 8003c84:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fe fd57 	bl	8002738 <HAL_GetTick>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fe fd52 	bl	8002738 <HAL_GetTick>
 8003c94:	0002      	movs	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e059      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	049b      	lsls	r3, r3, #18
 8003caa:	4013      	ands	r3, r2
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x534>
 8003cae:	e051      	b.n	8003d54 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003cb6:	492e      	ldr	r1, [pc, #184]	; (8003d70 <HAL_RCC_OscConfig+0x614>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe fd3c 	bl	8002738 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe fd37 	bl	8002738 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e03e      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	049b      	lsls	r3, r3, #18
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003cea:	4923      	ldr	r1, [pc, #140]	; (8003d78 <HAL_RCC_OscConfig+0x61c>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e030      	b.n	8003d54 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e02b      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_RCC_OscConfig+0x604>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2203      	movs	r2, #3
 8003d08:	401a      	ands	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11e      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2270      	movs	r2, #112	; 0x70
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d117      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	23fe      	movs	r3, #254	; 0xfe
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	401a      	ands	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d10e      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	23f8      	movs	r3, #248	; 0xf8
 8003d36:	039b      	lsls	r3, r3, #14
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	0f5b      	lsrs	r3, r3, #29
 8003d46:	075a      	lsls	r2, r3, #29
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b008      	add	sp, #32
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	00001388 	.word	0x00001388
 8003d6c:	efffffff 	.word	0xefffffff
 8003d70:	feffffff 	.word	0xfeffffff
 8003d74:	1fc1808c 	.word	0x1fc1808c
 8003d78:	effefffc 	.word	0xeffefffc

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0e9      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2207      	movs	r2, #7
 8003d96:	4013      	ands	r3, r2
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d91e      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2207      	movs	r2, #7
 8003da4:	4393      	bics	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003db0:	f7fe fcc2 	bl	8002738 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003db8:	e009      	b.n	8003dce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dba:	f7fe fcbd 	bl	8002738 <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	4a6a      	ldr	r2, [pc, #424]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0ca      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1ee      	bne.n	8003dba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d015      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2204      	movs	r2, #4
 8003dec:	4013      	ands	r3, r2
 8003dee:	d006      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003df0:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4b5f      	ldr	r3, [pc, #380]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003df6:	21e0      	movs	r1, #224	; 0xe0
 8003df8:	01c9      	lsls	r1, r1, #7
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfe:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_RCC_ClockConfig+0x1fc>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d057      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d12b      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e097      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	049b      	lsls	r3, r3, #18
 8003e44:	4013      	ands	r3, r2
 8003e46:	d11f      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e08b      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e54:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e07f      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e6c:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	2202      	movs	r2, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e074      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e06d      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e88:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	4393      	bics	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fe fc4c 	bl	8002738 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea6:	f7fe fc47 	bl	8002738 <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e054      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2238      	movs	r2, #56	; 0x38
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1ec      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d21e      	bcs.n	8003f18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003eec:	f7fe fc24 	bl	8002738 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ef4:	e009      	b.n	8003f0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef6:	f7fe fc1f 	bl	8002738 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e02c      	b.n	8003f64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <HAL_RCC_ClockConfig+0x200>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f36:	f000 f829 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	220f      	movs	r2, #15
 8003f44:	401a      	ands	r2, r3
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCC_ClockConfig+0x204>)
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	58d3      	ldr	r3, [r2, r3]
 8003f4c:	221f      	movs	r2, #31
 8003f4e:	4013      	ands	r3, r2
 8003f50:	000a      	movs	r2, r1
 8003f52:	40da      	lsrs	r2, r3
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCC_ClockConfig+0x208>)
 8003f56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x20c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7fe fb8f 	bl	8002680 <HAL_InitTick>
 8003f62:	0003      	movs	r3, r0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	00001388 	.word	0x00001388
 8003f74:	40021000 	.word	0x40021000
 8003f78:	fffff0ff 	.word	0xfffff0ff
 8003f7c:	ffff8fff 	.word	0xffff8fff
 8003f80:	08005a2c 	.word	0x08005a2c
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2238      	movs	r2, #56	; 0x38
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d10f      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0adb      	lsrs	r3, r3, #11
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	0013      	movs	r3, r2
 8003fac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	4835      	ldr	r0, [pc, #212]	; (8004088 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fb2:	f7fc f8af 	bl	8000114 <__udivsi3>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e05d      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2238      	movs	r2, #56	; 0x38
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fc8:	4b30      	ldr	r3, [pc, #192]	; (800408c <HAL_RCC_GetSysClockFreq+0x100>)
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e054      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2238      	movs	r2, #56	; 0x38
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d138      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	2207      	movs	r2, #7
 8003fec:	4013      	ands	r3, r2
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4824      	ldr	r0, [pc, #144]	; (800408c <HAL_RCC_GetSysClockFreq+0x100>)
 8003ffc:	f7fc f88a 	bl	8000114 <__udivsi3>
 8004000:	0003      	movs	r3, r0
 8004002:	0019      	movs	r1, r3
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	227f      	movs	r2, #127	; 0x7f
 800400c:	4013      	ands	r3, r2
 800400e:	434b      	muls	r3, r1
 8004010:	617b      	str	r3, [r7, #20]
        break;
 8004012:	e00d      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	481c      	ldr	r0, [pc, #112]	; (8004088 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004018:	f7fc f87c 	bl	8000114 <__udivsi3>
 800401c:	0003      	movs	r3, r0
 800401e:	0019      	movs	r1, r3
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	227f      	movs	r2, #127	; 0x7f
 8004028:	4013      	ands	r3, r2
 800402a:	434b      	muls	r3, r1
 800402c:	617b      	str	r3, [r7, #20]
        break;
 800402e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0f5b      	lsrs	r3, r3, #29
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	6978      	ldr	r0, [r7, #20]
 8004042:	f7fc f867 	bl	8000114 <__udivsi3>
 8004046:	0003      	movs	r3, r0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e015      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2238      	movs	r2, #56	; 0x38
 8004052:	4013      	ands	r3, r2
 8004054:	2b20      	cmp	r3, #32
 8004056:	d103      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2238      	movs	r2, #56	; 0x38
 8004066:	4013      	ands	r3, r2
 8004068:	2b18      	cmp	r3, #24
 800406a:	d103      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800406c:	23fa      	movs	r3, #250	; 0xfa
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e001      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004078:	693b      	ldr	r3, [r7, #16]
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b006      	add	sp, #24
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	40021000 	.word	0x40021000
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0a8      	b.n	80041f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	2382      	movs	r3, #130	; 0x82
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d009      	beq.n	80040ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	61da      	str	r2, [r3, #28]
 80040bc:	e005      	b.n	80040ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	225d      	movs	r2, #93	; 0x5d
 80040d4:	5c9b      	ldrb	r3, [r3, r2]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	225c      	movs	r2, #92	; 0x5c
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fd ffbe 	bl	8002068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	225d      	movs	r2, #93	; 0x5d
 80040f0:	2102      	movs	r1, #2
 80040f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2140      	movs	r1, #64	; 0x40
 8004100:	438a      	bics	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	23e0      	movs	r3, #224	; 0xe0
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	429a      	cmp	r2, r3
 800410e:	d902      	bls.n	8004116 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e002      	b.n	800411c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	23f0      	movs	r3, #240	; 0xf0
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	429a      	cmp	r2, r3
 8004126:	d008      	beq.n	800413a <HAL_SPI_Init+0xaa>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	23e0      	movs	r3, #224	; 0xe0
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	429a      	cmp	r2, r3
 8004132:	d002      	beq.n	800413a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	2382      	movs	r3, #130	; 0x82
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6899      	ldr	r1, [r3, #8]
 8004148:	2384      	movs	r3, #132	; 0x84
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	400b      	ands	r3, r1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2102      	movs	r1, #2
 8004156:	400b      	ands	r3, r1
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2101      	movs	r1, #1
 8004160:	400b      	ands	r3, r1
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6999      	ldr	r1, [r3, #24]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	400b      	ands	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2138      	movs	r1, #56	; 0x38
 8004176:	400b      	ands	r3, r1
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	400b      	ands	r3, r1
 8004182:	431a      	orrs	r2, r3
 8004184:	0011      	movs	r1, r2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	2204      	movs	r2, #4
 80041a0:	401a      	ands	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2110      	movs	r1, #16
 80041a8:	400b      	ands	r3, r1
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	2108      	movs	r1, #8
 80041b2:	400b      	ands	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68d9      	ldr	r1, [r3, #12]
 80041ba:	23f0      	movs	r3, #240	; 0xf0
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	400b      	ands	r3, r1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	0011      	movs	r1, r2
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	015b      	lsls	r3, r3, #5
 80041ca:	401a      	ands	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4907      	ldr	r1, [pc, #28]	; (80041fc <HAL_SPI_Init+0x16c>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	225d      	movs	r2, #93	; 0x5d
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	fffff7ff 	.word	0xfffff7ff

08004200 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	1dbb      	adds	r3, r7, #6
 800420e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004210:	231f      	movs	r3, #31
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	225c      	movs	r2, #92	; 0x5c
 800421c:	5c9b      	ldrb	r3, [r3, r2]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_SPI_Transmit+0x26>
 8004222:	2302      	movs	r3, #2
 8004224:	e140      	b.n	80044a8 <HAL_SPI_Transmit+0x2a8>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	225c      	movs	r2, #92	; 0x5c
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800422e:	f7fe fa83 	bl	8002738 <HAL_GetTick>
 8004232:	0003      	movs	r3, r0
 8004234:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004236:	2316      	movs	r3, #22
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	1dba      	adds	r2, r7, #6
 800423c:	8812      	ldrh	r2, [r2, #0]
 800423e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	225d      	movs	r2, #93	; 0x5d
 8004244:	5c9b      	ldrb	r3, [r3, r2]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d004      	beq.n	8004256 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800424c:	231f      	movs	r3, #31
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	2202      	movs	r2, #2
 8004252:	701a      	strb	r2, [r3, #0]
    goto error;
 8004254:	e11d      	b.n	8004492 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_SPI_Transmit+0x64>
 800425c:	1dbb      	adds	r3, r7, #6
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004264:	231f      	movs	r3, #31
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    goto error;
 800426c:	e111      	b.n	8004492 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	225d      	movs	r2, #93	; 0x5d
 8004272:	2103      	movs	r1, #3
 8004274:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1dba      	adds	r2, r7, #6
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1dba      	adds	r2, r7, #6
 800428e:	8812      	ldrh	r2, [r2, #0]
 8004290:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2244      	movs	r2, #68	; 0x44
 800429c:	2100      	movs	r1, #0
 800429e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2246      	movs	r2, #70	; 0x46
 80042a4:	2100      	movs	r1, #0
 80042a6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	429a      	cmp	r2, r3
 80042be:	d110      	bne.n	80042e2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2140      	movs	r1, #64	; 0x40
 80042cc:	438a      	bics	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	01c9      	lsls	r1, r1, #7
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2240      	movs	r2, #64	; 0x40
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d007      	beq.n	8004300 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2140      	movs	r1, #64	; 0x40
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	23e0      	movs	r3, #224	; 0xe0
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	429a      	cmp	r2, r3
 800430a:	d94e      	bls.n	80043aa <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_SPI_Transmit+0x11e>
 8004314:	2316      	movs	r3, #22
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d13f      	bne.n	800439e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004342:	e02c      	b.n	800439e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d112      	bne.n	8004378 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004376:	e012      	b.n	800439e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004378:	f7fe f9de 	bl	8002738 <HAL_GetTick>
 800437c:	0002      	movs	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d802      	bhi.n	800438e <HAL_SPI_Transmit+0x18e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_SPI_Transmit+0x194>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004394:	231f      	movs	r3, #31
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2203      	movs	r2, #3
 800439a:	701a      	strb	r2, [r3, #0]
          goto error;
 800439c:	e079      	b.n	8004492 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cd      	bne.n	8004344 <HAL_SPI_Transmit+0x144>
 80043a8:	e04f      	b.n	800444a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_SPI_Transmit+0x1bc>
 80043b2:	2316      	movs	r3, #22
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d141      	bne.n	8004440 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80043e2:	e02d      	b.n	8004440 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2202      	movs	r2, #2
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d113      	bne.n	800441a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004418:	e012      	b.n	8004440 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fe f98d 	bl	8002738 <HAL_GetTick>
 800441e:	0002      	movs	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d802      	bhi.n	8004430 <HAL_SPI_Transmit+0x230>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_SPI_Transmit+0x236>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004436:	231f      	movs	r3, #31
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2203      	movs	r2, #3
 800443c:	701a      	strb	r2, [r3, #0]
          goto error;
 800443e:	e028      	b.n	8004492 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1cc      	bne.n	80043e4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fcd9 	bl	8004e08 <SPI_EndRxTxTransaction>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d002      	beq.n	8004460 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8004486:	231f      	movs	r3, #31
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e000      	b.n	8004492 <HAL_SPI_Transmit+0x292>
  }

error:
 8004490:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	225d      	movs	r2, #93	; 0x5d
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	225c      	movs	r2, #92	; 0x5c
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80044a2:	231f      	movs	r3, #31
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b008      	add	sp, #32
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	1dbb      	adds	r3, r7, #6
 80044be:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c0:	2317      	movs	r3, #23
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	2382      	movs	r3, #130	; 0x82
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d113      	bne.n	80044fc <HAL_SPI_Receive+0x4c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10f      	bne.n	80044fc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	225d      	movs	r2, #93	; 0x5d
 80044e0:	2104      	movs	r1, #4
 80044e2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044e4:	1dbb      	adds	r3, r7, #6
 80044e6:	881c      	ldrh	r4, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	0023      	movs	r3, r4
 80044f4:	f000 f928 	bl	8004748 <HAL_SPI_TransmitReceive>
 80044f8:	0003      	movs	r3, r0
 80044fa:	e11c      	b.n	8004736 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	225c      	movs	r2, #92	; 0x5c
 8004500:	5c9b      	ldrb	r3, [r3, r2]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_SPI_Receive+0x5a>
 8004506:	2302      	movs	r3, #2
 8004508:	e115      	b.n	8004736 <HAL_SPI_Receive+0x286>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	225c      	movs	r2, #92	; 0x5c
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004512:	f7fe f911 	bl	8002738 <HAL_GetTick>
 8004516:	0003      	movs	r3, r0
 8004518:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	225d      	movs	r2, #93	; 0x5d
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d004      	beq.n	8004530 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004526:	2317      	movs	r3, #23
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2202      	movs	r2, #2
 800452c:	701a      	strb	r2, [r3, #0]
    goto error;
 800452e:	e0f7      	b.n	8004720 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_SPI_Receive+0x8e>
 8004536:	1dbb      	adds	r3, r7, #6
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800453e:	2317      	movs	r3, #23
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
    goto error;
 8004546:	e0eb      	b.n	8004720 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	225d      	movs	r2, #93	; 0x5d
 800454c:	2104      	movs	r1, #4
 800454e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1dba      	adds	r2, r7, #6
 8004560:	2144      	movs	r1, #68	; 0x44
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1dba      	adds	r2, r7, #6
 800456a:	2146      	movs	r1, #70	; 0x46
 800456c:	8812      	ldrh	r2, [r2, #0]
 800456e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	23e0      	movs	r3, #224	; 0xe0
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	429a      	cmp	r2, r3
 8004598:	d908      	bls.n	80045ac <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4966      	ldr	r1, [pc, #408]	; (8004740 <HAL_SPI_Receive+0x290>)
 80045a6:	400a      	ands	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	e008      	b.n	80045be <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	0149      	lsls	r1, r1, #5
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d10f      	bne.n	80045ea <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2140      	movs	r1, #64	; 0x40
 80045d6:	438a      	bics	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4957      	ldr	r1, [pc, #348]	; (8004744 <HAL_SPI_Receive+0x294>)
 80045e6:	400a      	ands	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d007      	beq.n	8004608 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	23e0      	movs	r3, #224	; 0xe0
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	429a      	cmp	r2, r3
 8004612:	d900      	bls.n	8004616 <HAL_SPI_Receive+0x166>
 8004614:	e069      	b.n	80046ea <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004616:	e031      	b.n	800467c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2201      	movs	r2, #1
 8004620:	4013      	ands	r3, r2
 8004622:	2b01      	cmp	r3, #1
 8004624:	d117      	bne.n	8004656 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	001a      	movs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2246      	movs	r2, #70	; 0x46
 8004646:	5a9b      	ldrh	r3, [r3, r2]
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b299      	uxth	r1, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2246      	movs	r2, #70	; 0x46
 8004652:	5299      	strh	r1, [r3, r2]
 8004654:	e012      	b.n	800467c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004656:	f7fe f86f 	bl	8002738 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d802      	bhi.n	800466c <HAL_SPI_Receive+0x1bc>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	d102      	bne.n	8004672 <HAL_SPI_Receive+0x1c2>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004672:	2317      	movs	r3, #23
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2203      	movs	r2, #3
 8004678:	701a      	strb	r2, [r3, #0]
          goto error;
 800467a:	e051      	b.n	8004720 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2246      	movs	r2, #70	; 0x46
 8004680:	5a9b      	ldrh	r3, [r3, r2]
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1c7      	bne.n	8004618 <HAL_SPI_Receive+0x168>
 8004688:	e035      	b.n	80046f6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	2b01      	cmp	r3, #1
 8004696:	d115      	bne.n	80046c4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	b292      	uxth	r2, r2
 80046a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2246      	movs	r2, #70	; 0x46
 80046b4:	5a9b      	ldrh	r3, [r3, r2]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b299      	uxth	r1, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2246      	movs	r2, #70	; 0x46
 80046c0:	5299      	strh	r1, [r3, r2]
 80046c2:	e012      	b.n	80046ea <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c4:	f7fe f838 	bl	8002738 <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d802      	bhi.n	80046da <HAL_SPI_Receive+0x22a>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	d102      	bne.n	80046e0 <HAL_SPI_Receive+0x230>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80046e0:	2317      	movs	r3, #23
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2203      	movs	r2, #3
 80046e6:	701a      	strb	r2, [r3, #0]
          goto error;
 80046e8:	e01a      	b.n	8004720 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2246      	movs	r2, #70	; 0x46
 80046ee:	5a9b      	ldrh	r3, [r3, r2]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1c9      	bne.n	800468a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fb25 	bl	8004d4c <SPI_EndRxTransaction>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d002      	beq.n	800470c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004714:	2317      	movs	r3, #23
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e000      	b.n	8004720 <HAL_SPI_Receive+0x270>
  }

error :
 800471e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	225d      	movs	r2, #93	; 0x5d
 8004724:	2101      	movs	r1, #1
 8004726:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	225c      	movs	r2, #92	; 0x5c
 800472c:	2100      	movs	r1, #0
 800472e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004730:	2317      	movs	r3, #23
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	781b      	ldrb	r3, [r3, #0]
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b007      	add	sp, #28
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	ffffefff 	.word	0xffffefff
 8004744:	ffffbfff 	.word	0xffffbfff

08004748 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	001a      	movs	r2, r3
 8004756:	1cbb      	adds	r3, r7, #2
 8004758:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800475e:	2323      	movs	r3, #35	; 0x23
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	225c      	movs	r2, #92	; 0x5c
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x2c>
 8004770:	2302      	movs	r3, #2
 8004772:	e1b5      	b.n	8004ae0 <HAL_SPI_TransmitReceive+0x398>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	225c      	movs	r2, #92	; 0x5c
 8004778:	2101      	movs	r1, #1
 800477a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477c:	f7fd ffdc 	bl	8002738 <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004784:	201b      	movs	r0, #27
 8004786:	183b      	adds	r3, r7, r0
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	215d      	movs	r1, #93	; 0x5d
 800478c:	5c52      	ldrb	r2, [r2, r1]
 800478e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004796:	2312      	movs	r3, #18
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	1cba      	adds	r2, r7, #2
 800479c:	8812      	ldrh	r2, [r2, #0]
 800479e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d011      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x84>
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	2382      	movs	r3, #130	; 0x82
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d107      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x7a>
 80047ba:	183b      	adds	r3, r7, r0
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d004      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80047c2:	2323      	movs	r3, #35	; 0x23
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80047ca:	e17e      	b.n	8004aca <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x98>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x98>
 80047d8:	1cbb      	adds	r3, r7, #2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80047e0:	2323      	movs	r3, #35	; 0x23
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80047e8:	e16f      	b.n	8004aca <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	225d      	movs	r2, #93	; 0x5d
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d003      	beq.n	80047fe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	225d      	movs	r2, #93	; 0x5d
 80047fa:	2105      	movs	r1, #5
 80047fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1cba      	adds	r2, r7, #2
 800480e:	2146      	movs	r1, #70	; 0x46
 8004810:	8812      	ldrh	r2, [r2, #0]
 8004812:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1cba      	adds	r2, r7, #2
 8004818:	2144      	movs	r1, #68	; 0x44
 800481a:	8812      	ldrh	r2, [r2, #0]
 800481c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1cba      	adds	r2, r7, #2
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1cba      	adds	r2, r7, #2
 8004830:	8812      	ldrh	r2, [r2, #0]
 8004832:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	23e0      	movs	r3, #224	; 0xe0
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	429a      	cmp	r2, r3
 800484a:	d908      	bls.n	800485e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	49a4      	ldr	r1, [pc, #656]	; (8004ae8 <HAL_SPI_TransmitReceive+0x3a0>)
 8004858:	400a      	ands	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	e008      	b.n	8004870 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2180      	movs	r1, #128	; 0x80
 800486a:	0149      	lsls	r1, r1, #5
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2240      	movs	r2, #64	; 0x40
 8004878:	4013      	ands	r3, r2
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d007      	beq.n	800488e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	23e0      	movs	r3, #224	; 0xe0
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	429a      	cmp	r2, r3
 8004898:	d800      	bhi.n	800489c <HAL_SPI_TransmitReceive+0x154>
 800489a:	e07f      	b.n	800499c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x168>
 80048a4:	2312      	movs	r3, #18
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d000      	beq.n	80048b0 <HAL_SPI_TransmitReceive+0x168>
 80048ae:	e069      	b.n	8004984 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d4:	e056      	b.n	8004984 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2202      	movs	r2, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_SPI_TransmitReceive+0x1d4>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_SPI_TransmitReceive+0x1d4>
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d113      	bne.n	800491c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	881a      	ldrh	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	2b01      	cmp	r3, #1
 8004928:	d11c      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2246      	movs	r2, #70	; 0x46
 800492e:	5a9b      	ldrh	r3, [r3, r2]
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	b292      	uxth	r2, r2
 8004942:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2246      	movs	r2, #70	; 0x46
 8004952:	5a9b      	ldrh	r3, [r3, r2]
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b299      	uxth	r1, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2246      	movs	r2, #70	; 0x46
 800495e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004960:	2301      	movs	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004964:	f7fd fee8 	bl	8002738 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004970:	429a      	cmp	r2, r3
 8004972:	d807      	bhi.n	8004984 <HAL_SPI_TransmitReceive+0x23c>
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	3301      	adds	r3, #1
 8004978:	d004      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800497a:	2323      	movs	r3, #35	; 0x23
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	2203      	movs	r2, #3
 8004980:	701a      	strb	r2, [r3, #0]
        goto error;
 8004982:	e0a2      	b.n	8004aca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1a3      	bne.n	80048d6 <HAL_SPI_TransmitReceive+0x18e>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2246      	movs	r2, #70	; 0x46
 8004992:	5a9b      	ldrh	r3, [r3, r2]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d19d      	bne.n	80048d6 <HAL_SPI_TransmitReceive+0x18e>
 800499a:	e085      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x268>
 80049a4:	2312      	movs	r3, #18
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d000      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x268>
 80049ae:	e070      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d6:	e05c      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2202      	movs	r2, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d11c      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d114      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d11e      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x324>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2246      	movs	r2, #70	; 0x46
 8004a32:	5a9b      	ldrh	r3, [r3, r2]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	001a      	movs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2246      	movs	r2, #70	; 0x46
 8004a5a:	5a9b      	ldrh	r3, [r3, r2]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b299      	uxth	r1, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2246      	movs	r2, #70	; 0x46
 8004a66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a6c:	f7fd fe64 	bl	8002738 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d802      	bhi.n	8004a82 <HAL_SPI_TransmitReceive+0x33a>
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d102      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x340>
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004a88:	2323      	movs	r3, #35	; 0x23
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004a90:	e01b      	b.n	8004aca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d19d      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x290>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2246      	movs	r2, #70	; 0x46
 8004aa0:	5a9b      	ldrh	r3, [r3, r2]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d197      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f9aa 	bl	8004e08 <SPI_EndRxTxTransaction>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004ab8:	2323      	movs	r3, #35	; 0x23
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ac6:	e000      	b.n	8004aca <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004ac8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	225d      	movs	r2, #93	; 0x5d
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	225c      	movs	r2, #92	; 0x5c
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004ada:	2323      	movs	r3, #35	; 0x23
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b00a      	add	sp, #40	; 0x28
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	ffffefff 	.word	0xffffefff

08004aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	1dfb      	adds	r3, r7, #7
 8004afa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004afc:	f7fd fe1c 	bl	8002738 <HAL_GetTick>
 8004b00:	0002      	movs	r2, r0
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b0c:	f7fd fe14 	bl	8002738 <HAL_GetTick>
 8004b10:	0003      	movs	r3, r0
 8004b12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b14:	4b3a      	ldr	r3, [pc, #232]	; (8004c00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	015b      	lsls	r3, r3, #5
 8004b1a:	0d1b      	lsrs	r3, r3, #20
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4353      	muls	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b22:	e058      	b.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	d055      	beq.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b2a:	f7fd fe05 	bl	8002738 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d902      	bls.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d142      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	21e0      	movs	r1, #224	; 0xe0
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	2382      	movs	r3, #130	; 0x82
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d113      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d005      	beq.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d107      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2140      	movs	r1, #64	; 0x40
 8004b80:	438a      	bics	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	019b      	lsls	r3, r3, #6
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d110      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	491a      	ldr	r1, [pc, #104]	; (8004c04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0189      	lsls	r1, r1, #6
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	225d      	movs	r2, #93	; 0x5d
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	225c      	movs	r2, #92	; 0x5c
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e017      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	425a      	negs	r2, r3
 8004be6:	4153      	adcs	r3, r2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d197      	bne.n	8004b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b008      	add	sp, #32
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	20000000 	.word	0x20000000
 8004c04:	ffffdfff 	.word	0xffffdfff

08004c08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c16:	2317      	movs	r3, #23
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c1e:	f7fd fd8b 	bl	8002738 <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c2e:	f7fd fd83 	bl	8002738 <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c3e:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	0013      	movs	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	00da      	lsls	r2, r3, #3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	0d1b      	lsrs	r3, r3, #20
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	4353      	muls	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c54:	e068      	b.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	23c0      	movs	r3, #192	; 0xc0
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d10a      	bne.n	8004c76 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	2117      	movs	r1, #23
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	d055      	beq.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c7c:	f7fd fd5c 	bl	8002738 <HAL_GetTick>
 8004c80:	0002      	movs	r2, r0
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d902      	bls.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d142      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	21e0      	movs	r1, #224	; 0xe0
 8004c9e:	438a      	bics	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	2382      	movs	r3, #130	; 0x82
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d113      	bne.n	8004cd6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d005      	beq.n	8004cc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d107      	bne.n	8004cd6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2140      	movs	r1, #64	; 0x40
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d110      	bne.n	8004d04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4916      	ldr	r1, [pc, #88]	; (8004d48 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	0189      	lsls	r1, r1, #6
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	225d      	movs	r2, #93	; 0x5d
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	225c      	movs	r2, #92	; 0x5c
 8004d10:	2100      	movs	r1, #0
 8004d12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e010      	b.n	8004d3a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d18e      	bne.n	8004c56 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b00a      	add	sp, #40	; 0x28
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	20000000 	.word	0x20000000
 8004d48:	ffffdfff 	.word	0xffffdfff

08004d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	2382      	movs	r3, #130	; 0x82
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d113      	bne.n	8004d8c <SPI_EndRxTransaction+0x40>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d005      	beq.n	8004d7c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d107      	bne.n	8004d8c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2140      	movs	r1, #64	; 0x40
 8004d88:	438a      	bics	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0013      	movs	r3, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	f7ff fea7 	bl	8004aec <SPI_WaitFlagStateUntilTimeout>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	2220      	movs	r2, #32
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e026      	b.n	8004e00 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	2382      	movs	r3, #130	; 0x82
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11f      	bne.n	8004dfe <SPI_EndRxTransaction+0xb2>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d005      	beq.n	8004dd6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d113      	bne.n	8004dfe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	23c0      	movs	r3, #192	; 0xc0
 8004dda:	00d9      	lsls	r1, r3, #3
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	0013      	movs	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	f7ff ff0f 	bl	8004c08 <SPI_WaitFifoStateUntilTimeout>
 8004dea:	1e03      	subs	r3, r0, #0
 8004dec:	d007      	beq.n	8004dfe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	2220      	movs	r2, #32
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e000      	b.n	8004e00 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b004      	add	sp, #16
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	23c0      	movs	r3, #192	; 0xc0
 8004e18:	0159      	lsls	r1, r3, #5
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	0013      	movs	r3, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	f7ff fef0 	bl	8004c08 <SPI_WaitFifoStateUntilTimeout>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d007      	beq.n	8004e3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e30:	2220      	movs	r2, #32
 8004e32:	431a      	orrs	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e027      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	0013      	movs	r3, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	f7ff fe4f 	bl	8004aec <SPI_WaitFlagStateUntilTimeout>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d007      	beq.n	8004e62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	2220      	movs	r2, #32
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e014      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	23c0      	movs	r3, #192	; 0xc0
 8004e66:	00d9      	lsls	r1, r3, #3
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	0013      	movs	r3, r2
 8004e70:	2200      	movs	r2, #0
 8004e72:	f7ff fec9 	bl	8004c08 <SPI_WaitFifoStateUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d007      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	2220      	movs	r2, #32
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e000      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <__errno>:
 8004e94:	4b01      	ldr	r3, [pc, #4]	; (8004e9c <__errno+0x8>)
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	4770      	bx	lr
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	2000000c 	.word	0x2000000c

08004ea0 <__libc_init_array>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	4d0c      	ldr	r5, [pc, #48]	; (8004ed8 <__libc_init_array+0x38>)
 8004ea6:	4c0d      	ldr	r4, [pc, #52]	; (8004edc <__libc_init_array+0x3c>)
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	42a6      	cmp	r6, r4
 8004eae:	d109      	bne.n	8004ec4 <__libc_init_array+0x24>
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	f000 fc8b 	bl	80057cc <_init>
 8004eb6:	4d0a      	ldr	r5, [pc, #40]	; (8004ee0 <__libc_init_array+0x40>)
 8004eb8:	4c0a      	ldr	r4, [pc, #40]	; (8004ee4 <__libc_init_array+0x44>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	d105      	bne.n	8004ece <__libc_init_array+0x2e>
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	00b3      	lsls	r3, r6, #2
 8004ec6:	58eb      	ldr	r3, [r5, r3]
 8004ec8:	4798      	blx	r3
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7ee      	b.n	8004eac <__libc_init_array+0xc>
 8004ece:	00b3      	lsls	r3, r6, #2
 8004ed0:	58eb      	ldr	r3, [r5, r3]
 8004ed2:	4798      	blx	r3
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	e7f2      	b.n	8004ebe <__libc_init_array+0x1e>
 8004ed8:	08005aa8 	.word	0x08005aa8
 8004edc:	08005aa8 	.word	0x08005aa8
 8004ee0:	08005aa8 	.word	0x08005aa8
 8004ee4:	08005aac 	.word	0x08005aac

08004ee8 <memcpy>:
 8004ee8:	2300      	movs	r3, #0
 8004eea:	b510      	push	{r4, lr}
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d100      	bne.n	8004ef2 <memcpy+0xa>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	5ccc      	ldrb	r4, [r1, r3]
 8004ef4:	54c4      	strb	r4, [r0, r3]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	e7f8      	b.n	8004eec <memcpy+0x4>

08004efa <memset>:
 8004efa:	0003      	movs	r3, r0
 8004efc:	1882      	adds	r2, r0, r2
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d100      	bne.n	8004f04 <memset+0xa>
 8004f02:	4770      	bx	lr
 8004f04:	7019      	strb	r1, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	e7f9      	b.n	8004efe <memset+0x4>
	...

08004f0c <siprintf>:
 8004f0c:	b40e      	push	{r1, r2, r3}
 8004f0e:	b500      	push	{lr}
 8004f10:	490b      	ldr	r1, [pc, #44]	; (8004f40 <siprintf+0x34>)
 8004f12:	b09c      	sub	sp, #112	; 0x70
 8004f14:	ab1d      	add	r3, sp, #116	; 0x74
 8004f16:	9002      	str	r0, [sp, #8]
 8004f18:	9006      	str	r0, [sp, #24]
 8004f1a:	9107      	str	r1, [sp, #28]
 8004f1c:	9104      	str	r1, [sp, #16]
 8004f1e:	4809      	ldr	r0, [pc, #36]	; (8004f44 <siprintf+0x38>)
 8004f20:	4909      	ldr	r1, [pc, #36]	; (8004f48 <siprintf+0x3c>)
 8004f22:	cb04      	ldmia	r3!, {r2}
 8004f24:	9105      	str	r1, [sp, #20]
 8004f26:	6800      	ldr	r0, [r0, #0]
 8004f28:	a902      	add	r1, sp, #8
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	f000 f870 	bl	8005010 <_svfiprintf_r>
 8004f30:	2300      	movs	r3, #0
 8004f32:	9a02      	ldr	r2, [sp, #8]
 8004f34:	7013      	strb	r3, [r2, #0]
 8004f36:	b01c      	add	sp, #112	; 0x70
 8004f38:	bc08      	pop	{r3}
 8004f3a:	b003      	add	sp, #12
 8004f3c:	4718      	bx	r3
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	7fffffff 	.word	0x7fffffff
 8004f44:	2000000c 	.word	0x2000000c
 8004f48:	ffff0208 	.word	0xffff0208

08004f4c <__ssputs_r>:
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	688e      	ldr	r6, [r1, #8]
 8004f50:	b085      	sub	sp, #20
 8004f52:	0007      	movs	r7, r0
 8004f54:	000c      	movs	r4, r1
 8004f56:	9203      	str	r2, [sp, #12]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	429e      	cmp	r6, r3
 8004f5c:	d83c      	bhi.n	8004fd8 <__ssputs_r+0x8c>
 8004f5e:	2390      	movs	r3, #144	; 0x90
 8004f60:	898a      	ldrh	r2, [r1, #12]
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	421a      	tst	r2, r3
 8004f66:	d034      	beq.n	8004fd2 <__ssputs_r+0x86>
 8004f68:	6909      	ldr	r1, [r1, #16]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	6960      	ldr	r0, [r4, #20]
 8004f6e:	1a5b      	subs	r3, r3, r1
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	2303      	movs	r3, #3
 8004f74:	4343      	muls	r3, r0
 8004f76:	0fdd      	lsrs	r5, r3, #31
 8004f78:	18ed      	adds	r5, r5, r3
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	9802      	ldr	r0, [sp, #8]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	181b      	adds	r3, r3, r0
 8004f82:	106d      	asrs	r5, r5, #1
 8004f84:	42ab      	cmp	r3, r5
 8004f86:	d900      	bls.n	8004f8a <__ssputs_r+0x3e>
 8004f88:	001d      	movs	r5, r3
 8004f8a:	0553      	lsls	r3, r2, #21
 8004f8c:	d532      	bpl.n	8004ff4 <__ssputs_r+0xa8>
 8004f8e:	0029      	movs	r1, r5
 8004f90:	0038      	movs	r0, r7
 8004f92:	f000 fb49 	bl	8005628 <_malloc_r>
 8004f96:	1e06      	subs	r6, r0, #0
 8004f98:	d109      	bne.n	8004fae <__ssputs_r+0x62>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	2340      	movs	r3, #64	; 0x40
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	89a2      	ldrh	r2, [r4, #12]
 8004fa4:	4240      	negs	r0, r0
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	b005      	add	sp, #20
 8004fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fae:	9a02      	ldr	r2, [sp, #8]
 8004fb0:	6921      	ldr	r1, [r4, #16]
 8004fb2:	f7ff ff99 	bl	8004ee8 <memcpy>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	4a14      	ldr	r2, [pc, #80]	; (800500c <__ssputs_r+0xc0>)
 8004fba:	401a      	ands	r2, r3
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	81a3      	strh	r3, [r4, #12]
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	6126      	str	r6, [r4, #16]
 8004fc6:	18f6      	adds	r6, r6, r3
 8004fc8:	6026      	str	r6, [r4, #0]
 8004fca:	6165      	str	r5, [r4, #20]
 8004fcc:	9e01      	ldr	r6, [sp, #4]
 8004fce:	1aed      	subs	r5, r5, r3
 8004fd0:	60a5      	str	r5, [r4, #8]
 8004fd2:	9b01      	ldr	r3, [sp, #4]
 8004fd4:	429e      	cmp	r6, r3
 8004fd6:	d900      	bls.n	8004fda <__ssputs_r+0x8e>
 8004fd8:	9e01      	ldr	r6, [sp, #4]
 8004fda:	0032      	movs	r2, r6
 8004fdc:	9903      	ldr	r1, [sp, #12]
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	f000 faa3 	bl	800552a <memmove>
 8004fe4:	68a3      	ldr	r3, [r4, #8]
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	1b9b      	subs	r3, r3, r6
 8004fea:	60a3      	str	r3, [r4, #8]
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	199e      	adds	r6, r3, r6
 8004ff0:	6026      	str	r6, [r4, #0]
 8004ff2:	e7da      	b.n	8004faa <__ssputs_r+0x5e>
 8004ff4:	002a      	movs	r2, r5
 8004ff6:	0038      	movs	r0, r7
 8004ff8:	f000 fb8c 	bl	8005714 <_realloc_r>
 8004ffc:	1e06      	subs	r6, r0, #0
 8004ffe:	d1e0      	bne.n	8004fc2 <__ssputs_r+0x76>
 8005000:	0038      	movs	r0, r7
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	f000 faa4 	bl	8005550 <_free_r>
 8005008:	e7c7      	b.n	8004f9a <__ssputs_r+0x4e>
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	fffffb7f 	.word	0xfffffb7f

08005010 <_svfiprintf_r>:
 8005010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005012:	b0a1      	sub	sp, #132	; 0x84
 8005014:	9003      	str	r0, [sp, #12]
 8005016:	001d      	movs	r5, r3
 8005018:	898b      	ldrh	r3, [r1, #12]
 800501a:	000f      	movs	r7, r1
 800501c:	0016      	movs	r6, r2
 800501e:	061b      	lsls	r3, r3, #24
 8005020:	d511      	bpl.n	8005046 <_svfiprintf_r+0x36>
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10e      	bne.n	8005046 <_svfiprintf_r+0x36>
 8005028:	2140      	movs	r1, #64	; 0x40
 800502a:	f000 fafd 	bl	8005628 <_malloc_r>
 800502e:	6038      	str	r0, [r7, #0]
 8005030:	6138      	str	r0, [r7, #16]
 8005032:	2800      	cmp	r0, #0
 8005034:	d105      	bne.n	8005042 <_svfiprintf_r+0x32>
 8005036:	230c      	movs	r3, #12
 8005038:	9a03      	ldr	r2, [sp, #12]
 800503a:	3801      	subs	r0, #1
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	b021      	add	sp, #132	; 0x84
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	ac08      	add	r4, sp, #32
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	3320      	adds	r3, #32
 800504e:	7663      	strb	r3, [r4, #25]
 8005050:	3310      	adds	r3, #16
 8005052:	76a3      	strb	r3, [r4, #26]
 8005054:	9507      	str	r5, [sp, #28]
 8005056:	0035      	movs	r5, r6
 8005058:	782b      	ldrb	r3, [r5, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <_svfiprintf_r+0x52>
 800505e:	2b25      	cmp	r3, #37	; 0x25
 8005060:	d147      	bne.n	80050f2 <_svfiprintf_r+0xe2>
 8005062:	1bab      	subs	r3, r5, r6
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	42b5      	cmp	r5, r6
 8005068:	d00c      	beq.n	8005084 <_svfiprintf_r+0x74>
 800506a:	0032      	movs	r2, r6
 800506c:	0039      	movs	r1, r7
 800506e:	9803      	ldr	r0, [sp, #12]
 8005070:	f7ff ff6c 	bl	8004f4c <__ssputs_r>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d100      	bne.n	800507a <_svfiprintf_r+0x6a>
 8005078:	e0ae      	b.n	80051d8 <_svfiprintf_r+0x1c8>
 800507a:	6962      	ldr	r2, [r4, #20]
 800507c:	9b05      	ldr	r3, [sp, #20]
 800507e:	4694      	mov	ip, r2
 8005080:	4463      	add	r3, ip
 8005082:	6163      	str	r3, [r4, #20]
 8005084:	782b      	ldrb	r3, [r5, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d100      	bne.n	800508c <_svfiprintf_r+0x7c>
 800508a:	e0a5      	b.n	80051d8 <_svfiprintf_r+0x1c8>
 800508c:	2201      	movs	r2, #1
 800508e:	2300      	movs	r3, #0
 8005090:	4252      	negs	r2, r2
 8005092:	6062      	str	r2, [r4, #4]
 8005094:	a904      	add	r1, sp, #16
 8005096:	3254      	adds	r2, #84	; 0x54
 8005098:	1852      	adds	r2, r2, r1
 800509a:	1c6e      	adds	r6, r5, #1
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	60e3      	str	r3, [r4, #12]
 80050a0:	60a3      	str	r3, [r4, #8]
 80050a2:	7013      	strb	r3, [r2, #0]
 80050a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80050a6:	2205      	movs	r2, #5
 80050a8:	7831      	ldrb	r1, [r6, #0]
 80050aa:	4854      	ldr	r0, [pc, #336]	; (80051fc <_svfiprintf_r+0x1ec>)
 80050ac:	f000 fa32 	bl	8005514 <memchr>
 80050b0:	1c75      	adds	r5, r6, #1
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d11f      	bne.n	80050f6 <_svfiprintf_r+0xe6>
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	06d3      	lsls	r3, r2, #27
 80050ba:	d504      	bpl.n	80050c6 <_svfiprintf_r+0xb6>
 80050bc:	2353      	movs	r3, #83	; 0x53
 80050be:	a904      	add	r1, sp, #16
 80050c0:	185b      	adds	r3, r3, r1
 80050c2:	2120      	movs	r1, #32
 80050c4:	7019      	strb	r1, [r3, #0]
 80050c6:	0713      	lsls	r3, r2, #28
 80050c8:	d504      	bpl.n	80050d4 <_svfiprintf_r+0xc4>
 80050ca:	2353      	movs	r3, #83	; 0x53
 80050cc:	a904      	add	r1, sp, #16
 80050ce:	185b      	adds	r3, r3, r1
 80050d0:	212b      	movs	r1, #43	; 0x2b
 80050d2:	7019      	strb	r1, [r3, #0]
 80050d4:	7833      	ldrb	r3, [r6, #0]
 80050d6:	2b2a      	cmp	r3, #42	; 0x2a
 80050d8:	d016      	beq.n	8005108 <_svfiprintf_r+0xf8>
 80050da:	0035      	movs	r5, r6
 80050dc:	2100      	movs	r1, #0
 80050de:	200a      	movs	r0, #10
 80050e0:	68e3      	ldr	r3, [r4, #12]
 80050e2:	782a      	ldrb	r2, [r5, #0]
 80050e4:	1c6e      	adds	r6, r5, #1
 80050e6:	3a30      	subs	r2, #48	; 0x30
 80050e8:	2a09      	cmp	r2, #9
 80050ea:	d94e      	bls.n	800518a <_svfiprintf_r+0x17a>
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d111      	bne.n	8005114 <_svfiprintf_r+0x104>
 80050f0:	e017      	b.n	8005122 <_svfiprintf_r+0x112>
 80050f2:	3501      	adds	r5, #1
 80050f4:	e7b0      	b.n	8005058 <_svfiprintf_r+0x48>
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <_svfiprintf_r+0x1ec>)
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	1ac0      	subs	r0, r0, r3
 80050fc:	2301      	movs	r3, #1
 80050fe:	4083      	lsls	r3, r0
 8005100:	4313      	orrs	r3, r2
 8005102:	002e      	movs	r6, r5
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	e7ce      	b.n	80050a6 <_svfiprintf_r+0x96>
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	1d19      	adds	r1, r3, #4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	9107      	str	r1, [sp, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db01      	blt.n	8005118 <_svfiprintf_r+0x108>
 8005114:	930b      	str	r3, [sp, #44]	; 0x2c
 8005116:	e004      	b.n	8005122 <_svfiprintf_r+0x112>
 8005118:	425b      	negs	r3, r3
 800511a:	60e3      	str	r3, [r4, #12]
 800511c:	2302      	movs	r3, #2
 800511e:	4313      	orrs	r3, r2
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	782b      	ldrb	r3, [r5, #0]
 8005124:	2b2e      	cmp	r3, #46	; 0x2e
 8005126:	d10a      	bne.n	800513e <_svfiprintf_r+0x12e>
 8005128:	786b      	ldrb	r3, [r5, #1]
 800512a:	2b2a      	cmp	r3, #42	; 0x2a
 800512c:	d135      	bne.n	800519a <_svfiprintf_r+0x18a>
 800512e:	9b07      	ldr	r3, [sp, #28]
 8005130:	3502      	adds	r5, #2
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9207      	str	r2, [sp, #28]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db2b      	blt.n	8005194 <_svfiprintf_r+0x184>
 800513c:	9309      	str	r3, [sp, #36]	; 0x24
 800513e:	4e30      	ldr	r6, [pc, #192]	; (8005200 <_svfiprintf_r+0x1f0>)
 8005140:	2203      	movs	r2, #3
 8005142:	0030      	movs	r0, r6
 8005144:	7829      	ldrb	r1, [r5, #0]
 8005146:	f000 f9e5 	bl	8005514 <memchr>
 800514a:	2800      	cmp	r0, #0
 800514c:	d006      	beq.n	800515c <_svfiprintf_r+0x14c>
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	1b80      	subs	r0, r0, r6
 8005152:	4083      	lsls	r3, r0
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	3501      	adds	r5, #1
 8005158:	4313      	orrs	r3, r2
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	7829      	ldrb	r1, [r5, #0]
 800515e:	2206      	movs	r2, #6
 8005160:	4828      	ldr	r0, [pc, #160]	; (8005204 <_svfiprintf_r+0x1f4>)
 8005162:	1c6e      	adds	r6, r5, #1
 8005164:	7621      	strb	r1, [r4, #24]
 8005166:	f000 f9d5 	bl	8005514 <memchr>
 800516a:	2800      	cmp	r0, #0
 800516c:	d03c      	beq.n	80051e8 <_svfiprintf_r+0x1d8>
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <_svfiprintf_r+0x1f8>)
 8005170:	2b00      	cmp	r3, #0
 8005172:	d125      	bne.n	80051c0 <_svfiprintf_r+0x1b0>
 8005174:	2207      	movs	r2, #7
 8005176:	9b07      	ldr	r3, [sp, #28]
 8005178:	3307      	adds	r3, #7
 800517a:	4393      	bics	r3, r2
 800517c:	3308      	adds	r3, #8
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	6963      	ldr	r3, [r4, #20]
 8005182:	9a04      	ldr	r2, [sp, #16]
 8005184:	189b      	adds	r3, r3, r2
 8005186:	6163      	str	r3, [r4, #20]
 8005188:	e765      	b.n	8005056 <_svfiprintf_r+0x46>
 800518a:	4343      	muls	r3, r0
 800518c:	0035      	movs	r5, r6
 800518e:	2101      	movs	r1, #1
 8005190:	189b      	adds	r3, r3, r2
 8005192:	e7a6      	b.n	80050e2 <_svfiprintf_r+0xd2>
 8005194:	2301      	movs	r3, #1
 8005196:	425b      	negs	r3, r3
 8005198:	e7d0      	b.n	800513c <_svfiprintf_r+0x12c>
 800519a:	2300      	movs	r3, #0
 800519c:	200a      	movs	r0, #10
 800519e:	001a      	movs	r2, r3
 80051a0:	3501      	adds	r5, #1
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	7829      	ldrb	r1, [r5, #0]
 80051a6:	1c6e      	adds	r6, r5, #1
 80051a8:	3930      	subs	r1, #48	; 0x30
 80051aa:	2909      	cmp	r1, #9
 80051ac:	d903      	bls.n	80051b6 <_svfiprintf_r+0x1a6>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0c5      	beq.n	800513e <_svfiprintf_r+0x12e>
 80051b2:	9209      	str	r2, [sp, #36]	; 0x24
 80051b4:	e7c3      	b.n	800513e <_svfiprintf_r+0x12e>
 80051b6:	4342      	muls	r2, r0
 80051b8:	0035      	movs	r5, r6
 80051ba:	2301      	movs	r3, #1
 80051bc:	1852      	adds	r2, r2, r1
 80051be:	e7f1      	b.n	80051a4 <_svfiprintf_r+0x194>
 80051c0:	ab07      	add	r3, sp, #28
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	003a      	movs	r2, r7
 80051c6:	0021      	movs	r1, r4
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <_svfiprintf_r+0x1fc>)
 80051ca:	9803      	ldr	r0, [sp, #12]
 80051cc:	e000      	b.n	80051d0 <_svfiprintf_r+0x1c0>
 80051ce:	bf00      	nop
 80051d0:	9004      	str	r0, [sp, #16]
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	3301      	adds	r3, #1
 80051d6:	d1d3      	bne.n	8005180 <_svfiprintf_r+0x170>
 80051d8:	89bb      	ldrh	r3, [r7, #12]
 80051da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051dc:	065b      	lsls	r3, r3, #25
 80051de:	d400      	bmi.n	80051e2 <_svfiprintf_r+0x1d2>
 80051e0:	e72d      	b.n	800503e <_svfiprintf_r+0x2e>
 80051e2:	2001      	movs	r0, #1
 80051e4:	4240      	negs	r0, r0
 80051e6:	e72a      	b.n	800503e <_svfiprintf_r+0x2e>
 80051e8:	ab07      	add	r3, sp, #28
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	003a      	movs	r2, r7
 80051ee:	0021      	movs	r1, r4
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <_svfiprintf_r+0x1fc>)
 80051f2:	9803      	ldr	r0, [sp, #12]
 80051f4:	f000 f87c 	bl	80052f0 <_printf_i>
 80051f8:	e7ea      	b.n	80051d0 <_svfiprintf_r+0x1c0>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	08005a6c 	.word	0x08005a6c
 8005200:	08005a72 	.word	0x08005a72
 8005204:	08005a76 	.word	0x08005a76
 8005208:	00000000 	.word	0x00000000
 800520c:	08004f4d 	.word	0x08004f4d

08005210 <_printf_common>:
 8005210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005212:	0015      	movs	r5, r2
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	688a      	ldr	r2, [r1, #8]
 8005218:	690b      	ldr	r3, [r1, #16]
 800521a:	000c      	movs	r4, r1
 800521c:	9000      	str	r0, [sp, #0]
 800521e:	4293      	cmp	r3, r2
 8005220:	da00      	bge.n	8005224 <_printf_common+0x14>
 8005222:	0013      	movs	r3, r2
 8005224:	0022      	movs	r2, r4
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	3243      	adds	r2, #67	; 0x43
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	2a00      	cmp	r2, #0
 800522e:	d001      	beq.n	8005234 <_printf_common+0x24>
 8005230:	3301      	adds	r3, #1
 8005232:	602b      	str	r3, [r5, #0]
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	069b      	lsls	r3, r3, #26
 8005238:	d502      	bpl.n	8005240 <_printf_common+0x30>
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	3302      	adds	r3, #2
 800523e:	602b      	str	r3, [r5, #0]
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	2306      	movs	r3, #6
 8005244:	0017      	movs	r7, r2
 8005246:	401f      	ands	r7, r3
 8005248:	421a      	tst	r2, r3
 800524a:	d027      	beq.n	800529c <_printf_common+0x8c>
 800524c:	0023      	movs	r3, r4
 800524e:	3343      	adds	r3, #67	; 0x43
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	4193      	sbcs	r3, r2
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	0692      	lsls	r2, r2, #26
 800525a:	d430      	bmi.n	80052be <_printf_common+0xae>
 800525c:	0022      	movs	r2, r4
 800525e:	9901      	ldr	r1, [sp, #4]
 8005260:	9800      	ldr	r0, [sp, #0]
 8005262:	9e08      	ldr	r6, [sp, #32]
 8005264:	3243      	adds	r2, #67	; 0x43
 8005266:	47b0      	blx	r6
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d025      	beq.n	80052b8 <_printf_common+0xa8>
 800526c:	2306      	movs	r3, #6
 800526e:	6820      	ldr	r0, [r4, #0]
 8005270:	682a      	ldr	r2, [r5, #0]
 8005272:	68e1      	ldr	r1, [r4, #12]
 8005274:	2500      	movs	r5, #0
 8005276:	4003      	ands	r3, r0
 8005278:	2b04      	cmp	r3, #4
 800527a:	d103      	bne.n	8005284 <_printf_common+0x74>
 800527c:	1a8d      	subs	r5, r1, r2
 800527e:	43eb      	mvns	r3, r5
 8005280:	17db      	asrs	r3, r3, #31
 8005282:	401d      	ands	r5, r3
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	6922      	ldr	r2, [r4, #16]
 8005288:	4293      	cmp	r3, r2
 800528a:	dd01      	ble.n	8005290 <_printf_common+0x80>
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	18ed      	adds	r5, r5, r3
 8005290:	2700      	movs	r7, #0
 8005292:	42bd      	cmp	r5, r7
 8005294:	d120      	bne.n	80052d8 <_printf_common+0xc8>
 8005296:	2000      	movs	r0, #0
 8005298:	e010      	b.n	80052bc <_printf_common+0xac>
 800529a:	3701      	adds	r7, #1
 800529c:	68e3      	ldr	r3, [r4, #12]
 800529e:	682a      	ldr	r2, [r5, #0]
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	42bb      	cmp	r3, r7
 80052a4:	ddd2      	ble.n	800524c <_printf_common+0x3c>
 80052a6:	0022      	movs	r2, r4
 80052a8:	2301      	movs	r3, #1
 80052aa:	9901      	ldr	r1, [sp, #4]
 80052ac:	9800      	ldr	r0, [sp, #0]
 80052ae:	9e08      	ldr	r6, [sp, #32]
 80052b0:	3219      	adds	r2, #25
 80052b2:	47b0      	blx	r6
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d1f0      	bne.n	800529a <_printf_common+0x8a>
 80052b8:	2001      	movs	r0, #1
 80052ba:	4240      	negs	r0, r0
 80052bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052be:	2030      	movs	r0, #48	; 0x30
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	3143      	adds	r1, #67	; 0x43
 80052c4:	7008      	strb	r0, [r1, #0]
 80052c6:	0021      	movs	r1, r4
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	3145      	adds	r1, #69	; 0x45
 80052cc:	7809      	ldrb	r1, [r1, #0]
 80052ce:	18a2      	adds	r2, r4, r2
 80052d0:	3243      	adds	r2, #67	; 0x43
 80052d2:	3302      	adds	r3, #2
 80052d4:	7011      	strb	r1, [r2, #0]
 80052d6:	e7c1      	b.n	800525c <_printf_common+0x4c>
 80052d8:	0022      	movs	r2, r4
 80052da:	2301      	movs	r3, #1
 80052dc:	9901      	ldr	r1, [sp, #4]
 80052de:	9800      	ldr	r0, [sp, #0]
 80052e0:	9e08      	ldr	r6, [sp, #32]
 80052e2:	321a      	adds	r2, #26
 80052e4:	47b0      	blx	r6
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d0e6      	beq.n	80052b8 <_printf_common+0xa8>
 80052ea:	3701      	adds	r7, #1
 80052ec:	e7d1      	b.n	8005292 <_printf_common+0x82>
	...

080052f0 <_printf_i>:
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	b08b      	sub	sp, #44	; 0x2c
 80052f4:	9206      	str	r2, [sp, #24]
 80052f6:	000a      	movs	r2, r1
 80052f8:	3243      	adds	r2, #67	; 0x43
 80052fa:	9307      	str	r3, [sp, #28]
 80052fc:	9005      	str	r0, [sp, #20]
 80052fe:	9204      	str	r2, [sp, #16]
 8005300:	7e0a      	ldrb	r2, [r1, #24]
 8005302:	000c      	movs	r4, r1
 8005304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005306:	2a78      	cmp	r2, #120	; 0x78
 8005308:	d807      	bhi.n	800531a <_printf_i+0x2a>
 800530a:	2a62      	cmp	r2, #98	; 0x62
 800530c:	d809      	bhi.n	8005322 <_printf_i+0x32>
 800530e:	2a00      	cmp	r2, #0
 8005310:	d100      	bne.n	8005314 <_printf_i+0x24>
 8005312:	e0c1      	b.n	8005498 <_printf_i+0x1a8>
 8005314:	2a58      	cmp	r2, #88	; 0x58
 8005316:	d100      	bne.n	800531a <_printf_i+0x2a>
 8005318:	e08c      	b.n	8005434 <_printf_i+0x144>
 800531a:	0026      	movs	r6, r4
 800531c:	3642      	adds	r6, #66	; 0x42
 800531e:	7032      	strb	r2, [r6, #0]
 8005320:	e022      	b.n	8005368 <_printf_i+0x78>
 8005322:	0010      	movs	r0, r2
 8005324:	3863      	subs	r0, #99	; 0x63
 8005326:	2815      	cmp	r0, #21
 8005328:	d8f7      	bhi.n	800531a <_printf_i+0x2a>
 800532a:	f7fa fee9 	bl	8000100 <__gnu_thumb1_case_shi>
 800532e:	0016      	.short	0x0016
 8005330:	fff6001f 	.word	0xfff6001f
 8005334:	fff6fff6 	.word	0xfff6fff6
 8005338:	001ffff6 	.word	0x001ffff6
 800533c:	fff6fff6 	.word	0xfff6fff6
 8005340:	fff6fff6 	.word	0xfff6fff6
 8005344:	003600a8 	.word	0x003600a8
 8005348:	fff6009a 	.word	0xfff6009a
 800534c:	00b9fff6 	.word	0x00b9fff6
 8005350:	0036fff6 	.word	0x0036fff6
 8005354:	fff6fff6 	.word	0xfff6fff6
 8005358:	009e      	.short	0x009e
 800535a:	0026      	movs	r6, r4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	3642      	adds	r6, #66	; 0x42
 8005360:	1d11      	adds	r1, r2, #4
 8005362:	6019      	str	r1, [r3, #0]
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	7033      	strb	r3, [r6, #0]
 8005368:	2301      	movs	r3, #1
 800536a:	e0a7      	b.n	80054bc <_printf_i+0x1cc>
 800536c:	6808      	ldr	r0, [r1, #0]
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	1d0a      	adds	r2, r1, #4
 8005372:	0605      	lsls	r5, r0, #24
 8005374:	d50b      	bpl.n	800538e <_printf_i+0x9e>
 8005376:	680d      	ldr	r5, [r1, #0]
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	2d00      	cmp	r5, #0
 800537c:	da03      	bge.n	8005386 <_printf_i+0x96>
 800537e:	232d      	movs	r3, #45	; 0x2d
 8005380:	9a04      	ldr	r2, [sp, #16]
 8005382:	426d      	negs	r5, r5
 8005384:	7013      	strb	r3, [r2, #0]
 8005386:	4b61      	ldr	r3, [pc, #388]	; (800550c <_printf_i+0x21c>)
 8005388:	270a      	movs	r7, #10
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	e01b      	b.n	80053c6 <_printf_i+0xd6>
 800538e:	680d      	ldr	r5, [r1, #0]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	0641      	lsls	r1, r0, #25
 8005394:	d5f1      	bpl.n	800537a <_printf_i+0x8a>
 8005396:	b22d      	sxth	r5, r5
 8005398:	e7ef      	b.n	800537a <_printf_i+0x8a>
 800539a:	680d      	ldr	r5, [r1, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	1d08      	adds	r0, r1, #4
 80053a0:	6018      	str	r0, [r3, #0]
 80053a2:	062e      	lsls	r6, r5, #24
 80053a4:	d501      	bpl.n	80053aa <_printf_i+0xba>
 80053a6:	680d      	ldr	r5, [r1, #0]
 80053a8:	e003      	b.n	80053b2 <_printf_i+0xc2>
 80053aa:	066d      	lsls	r5, r5, #25
 80053ac:	d5fb      	bpl.n	80053a6 <_printf_i+0xb6>
 80053ae:	680d      	ldr	r5, [r1, #0]
 80053b0:	b2ad      	uxth	r5, r5
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <_printf_i+0x21c>)
 80053b4:	2708      	movs	r7, #8
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	2a6f      	cmp	r2, #111	; 0x6f
 80053ba:	d000      	beq.n	80053be <_printf_i+0xce>
 80053bc:	3702      	adds	r7, #2
 80053be:	0023      	movs	r3, r4
 80053c0:	2200      	movs	r2, #0
 80053c2:	3343      	adds	r3, #67	; 0x43
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	db03      	blt.n	80053d6 <_printf_i+0xe6>
 80053ce:	2204      	movs	r2, #4
 80053d0:	6821      	ldr	r1, [r4, #0]
 80053d2:	4391      	bics	r1, r2
 80053d4:	6021      	str	r1, [r4, #0]
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	d102      	bne.n	80053e0 <_printf_i+0xf0>
 80053da:	9e04      	ldr	r6, [sp, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <_printf_i+0x10a>
 80053e0:	9e04      	ldr	r6, [sp, #16]
 80053e2:	0028      	movs	r0, r5
 80053e4:	0039      	movs	r1, r7
 80053e6:	f7fa ff1b 	bl	8000220 <__aeabi_uidivmod>
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	3e01      	subs	r6, #1
 80053ee:	5c5b      	ldrb	r3, [r3, r1]
 80053f0:	7033      	strb	r3, [r6, #0]
 80053f2:	002b      	movs	r3, r5
 80053f4:	0005      	movs	r5, r0
 80053f6:	429f      	cmp	r7, r3
 80053f8:	d9f3      	bls.n	80053e2 <_printf_i+0xf2>
 80053fa:	2f08      	cmp	r7, #8
 80053fc:	d109      	bne.n	8005412 <_printf_i+0x122>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	07db      	lsls	r3, r3, #31
 8005402:	d506      	bpl.n	8005412 <_printf_i+0x122>
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	6922      	ldr	r2, [r4, #16]
 8005408:	4293      	cmp	r3, r2
 800540a:	dc02      	bgt.n	8005412 <_printf_i+0x122>
 800540c:	2330      	movs	r3, #48	; 0x30
 800540e:	3e01      	subs	r6, #1
 8005410:	7033      	strb	r3, [r6, #0]
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	1b9b      	subs	r3, r3, r6
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	9b07      	ldr	r3, [sp, #28]
 800541a:	0021      	movs	r1, r4
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	9805      	ldr	r0, [sp, #20]
 8005420:	9b06      	ldr	r3, [sp, #24]
 8005422:	aa09      	add	r2, sp, #36	; 0x24
 8005424:	f7ff fef4 	bl	8005210 <_printf_common>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d14c      	bne.n	80054c6 <_printf_i+0x1d6>
 800542c:	2001      	movs	r0, #1
 800542e:	4240      	negs	r0, r0
 8005430:	b00b      	add	sp, #44	; 0x2c
 8005432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005434:	3145      	adds	r1, #69	; 0x45
 8005436:	700a      	strb	r2, [r1, #0]
 8005438:	4a34      	ldr	r2, [pc, #208]	; (800550c <_printf_i+0x21c>)
 800543a:	9203      	str	r2, [sp, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6821      	ldr	r1, [r4, #0]
 8005440:	ca20      	ldmia	r2!, {r5}
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	0608      	lsls	r0, r1, #24
 8005446:	d516      	bpl.n	8005476 <_printf_i+0x186>
 8005448:	07cb      	lsls	r3, r1, #31
 800544a:	d502      	bpl.n	8005452 <_printf_i+0x162>
 800544c:	2320      	movs	r3, #32
 800544e:	4319      	orrs	r1, r3
 8005450:	6021      	str	r1, [r4, #0]
 8005452:	2710      	movs	r7, #16
 8005454:	2d00      	cmp	r5, #0
 8005456:	d1b2      	bne.n	80053be <_printf_i+0xce>
 8005458:	2320      	movs	r3, #32
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	439a      	bics	r2, r3
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	e7ad      	b.n	80053be <_printf_i+0xce>
 8005462:	2220      	movs	r2, #32
 8005464:	6809      	ldr	r1, [r1, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	0022      	movs	r2, r4
 800546c:	2178      	movs	r1, #120	; 0x78
 800546e:	3245      	adds	r2, #69	; 0x45
 8005470:	7011      	strb	r1, [r2, #0]
 8005472:	4a27      	ldr	r2, [pc, #156]	; (8005510 <_printf_i+0x220>)
 8005474:	e7e1      	b.n	800543a <_printf_i+0x14a>
 8005476:	0648      	lsls	r0, r1, #25
 8005478:	d5e6      	bpl.n	8005448 <_printf_i+0x158>
 800547a:	b2ad      	uxth	r5, r5
 800547c:	e7e4      	b.n	8005448 <_printf_i+0x158>
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	680d      	ldr	r5, [r1, #0]
 8005482:	1d10      	adds	r0, r2, #4
 8005484:	6949      	ldr	r1, [r1, #20]
 8005486:	6018      	str	r0, [r3, #0]
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	062e      	lsls	r6, r5, #24
 800548c:	d501      	bpl.n	8005492 <_printf_i+0x1a2>
 800548e:	6019      	str	r1, [r3, #0]
 8005490:	e002      	b.n	8005498 <_printf_i+0x1a8>
 8005492:	066d      	lsls	r5, r5, #25
 8005494:	d5fb      	bpl.n	800548e <_printf_i+0x19e>
 8005496:	8019      	strh	r1, [r3, #0]
 8005498:	2300      	movs	r3, #0
 800549a:	9e04      	ldr	r6, [sp, #16]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	e7bb      	b.n	8005418 <_printf_i+0x128>
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	1d11      	adds	r1, r2, #4
 80054a4:	6019      	str	r1, [r3, #0]
 80054a6:	6816      	ldr	r6, [r2, #0]
 80054a8:	2100      	movs	r1, #0
 80054aa:	0030      	movs	r0, r6
 80054ac:	6862      	ldr	r2, [r4, #4]
 80054ae:	f000 f831 	bl	8005514 <memchr>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d001      	beq.n	80054ba <_printf_i+0x1ca>
 80054b6:	1b80      	subs	r0, r0, r6
 80054b8:	6060      	str	r0, [r4, #4]
 80054ba:	6863      	ldr	r3, [r4, #4]
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	2300      	movs	r3, #0
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	7013      	strb	r3, [r2, #0]
 80054c4:	e7a8      	b.n	8005418 <_printf_i+0x128>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	0032      	movs	r2, r6
 80054ca:	9906      	ldr	r1, [sp, #24]
 80054cc:	9805      	ldr	r0, [sp, #20]
 80054ce:	9d07      	ldr	r5, [sp, #28]
 80054d0:	47a8      	blx	r5
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d0aa      	beq.n	800542c <_printf_i+0x13c>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	079b      	lsls	r3, r3, #30
 80054da:	d415      	bmi.n	8005508 <_printf_i+0x218>
 80054dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054de:	68e0      	ldr	r0, [r4, #12]
 80054e0:	4298      	cmp	r0, r3
 80054e2:	daa5      	bge.n	8005430 <_printf_i+0x140>
 80054e4:	0018      	movs	r0, r3
 80054e6:	e7a3      	b.n	8005430 <_printf_i+0x140>
 80054e8:	0022      	movs	r2, r4
 80054ea:	2301      	movs	r3, #1
 80054ec:	9906      	ldr	r1, [sp, #24]
 80054ee:	9805      	ldr	r0, [sp, #20]
 80054f0:	9e07      	ldr	r6, [sp, #28]
 80054f2:	3219      	adds	r2, #25
 80054f4:	47b0      	blx	r6
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d098      	beq.n	800542c <_printf_i+0x13c>
 80054fa:	3501      	adds	r5, #1
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	42ab      	cmp	r3, r5
 8005504:	dcf0      	bgt.n	80054e8 <_printf_i+0x1f8>
 8005506:	e7e9      	b.n	80054dc <_printf_i+0x1ec>
 8005508:	2500      	movs	r5, #0
 800550a:	e7f7      	b.n	80054fc <_printf_i+0x20c>
 800550c:	08005a7d 	.word	0x08005a7d
 8005510:	08005a8e 	.word	0x08005a8e

08005514 <memchr>:
 8005514:	b2c9      	uxtb	r1, r1
 8005516:	1882      	adds	r2, r0, r2
 8005518:	4290      	cmp	r0, r2
 800551a:	d101      	bne.n	8005520 <memchr+0xc>
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr
 8005520:	7803      	ldrb	r3, [r0, #0]
 8005522:	428b      	cmp	r3, r1
 8005524:	d0fb      	beq.n	800551e <memchr+0xa>
 8005526:	3001      	adds	r0, #1
 8005528:	e7f6      	b.n	8005518 <memchr+0x4>

0800552a <memmove>:
 800552a:	b510      	push	{r4, lr}
 800552c:	4288      	cmp	r0, r1
 800552e:	d902      	bls.n	8005536 <memmove+0xc>
 8005530:	188b      	adds	r3, r1, r2
 8005532:	4298      	cmp	r0, r3
 8005534:	d303      	bcc.n	800553e <memmove+0x14>
 8005536:	2300      	movs	r3, #0
 8005538:	e007      	b.n	800554a <memmove+0x20>
 800553a:	5c8b      	ldrb	r3, [r1, r2]
 800553c:	5483      	strb	r3, [r0, r2]
 800553e:	3a01      	subs	r2, #1
 8005540:	d2fb      	bcs.n	800553a <memmove+0x10>
 8005542:	bd10      	pop	{r4, pc}
 8005544:	5ccc      	ldrb	r4, [r1, r3]
 8005546:	54c4      	strb	r4, [r0, r3]
 8005548:	3301      	adds	r3, #1
 800554a:	429a      	cmp	r2, r3
 800554c:	d1fa      	bne.n	8005544 <memmove+0x1a>
 800554e:	e7f8      	b.n	8005542 <memmove+0x18>

08005550 <_free_r>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	0005      	movs	r5, r0
 8005554:	2900      	cmp	r1, #0
 8005556:	d010      	beq.n	800557a <_free_r+0x2a>
 8005558:	1f0c      	subs	r4, r1, #4
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da00      	bge.n	8005562 <_free_r+0x12>
 8005560:	18e4      	adds	r4, r4, r3
 8005562:	0028      	movs	r0, r5
 8005564:	f000 f918 	bl	8005798 <__malloc_lock>
 8005568:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <_free_r+0x90>)
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <_free_r+0x2c>
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	6014      	str	r4, [r2, #0]
 8005574:	0028      	movs	r0, r5
 8005576:	f000 f917 	bl	80057a8 <__malloc_unlock>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	42a3      	cmp	r3, r4
 800557e:	d908      	bls.n	8005592 <_free_r+0x42>
 8005580:	6821      	ldr	r1, [r4, #0]
 8005582:	1860      	adds	r0, r4, r1
 8005584:	4283      	cmp	r3, r0
 8005586:	d1f3      	bne.n	8005570 <_free_r+0x20>
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	1841      	adds	r1, r0, r1
 800558e:	6021      	str	r1, [r4, #0]
 8005590:	e7ee      	b.n	8005570 <_free_r+0x20>
 8005592:	001a      	movs	r2, r3
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <_free_r+0x4e>
 800559a:	42a3      	cmp	r3, r4
 800559c:	d9f9      	bls.n	8005592 <_free_r+0x42>
 800559e:	6811      	ldr	r1, [r2, #0]
 80055a0:	1850      	adds	r0, r2, r1
 80055a2:	42a0      	cmp	r0, r4
 80055a4:	d10b      	bne.n	80055be <_free_r+0x6e>
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	1809      	adds	r1, r1, r0
 80055aa:	1850      	adds	r0, r2, r1
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	4283      	cmp	r3, r0
 80055b0:	d1e0      	bne.n	8005574 <_free_r+0x24>
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	1841      	adds	r1, r0, r1
 80055b8:	6011      	str	r1, [r2, #0]
 80055ba:	6053      	str	r3, [r2, #4]
 80055bc:	e7da      	b.n	8005574 <_free_r+0x24>
 80055be:	42a0      	cmp	r0, r4
 80055c0:	d902      	bls.n	80055c8 <_free_r+0x78>
 80055c2:	230c      	movs	r3, #12
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	e7d5      	b.n	8005574 <_free_r+0x24>
 80055c8:	6821      	ldr	r1, [r4, #0]
 80055ca:	1860      	adds	r0, r4, r1
 80055cc:	4283      	cmp	r3, r0
 80055ce:	d103      	bne.n	80055d8 <_free_r+0x88>
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	1841      	adds	r1, r0, r1
 80055d6:	6021      	str	r1, [r4, #0]
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6054      	str	r4, [r2, #4]
 80055dc:	e7ca      	b.n	8005574 <_free_r+0x24>
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	20000194 	.word	0x20000194

080055e4 <sbrk_aligned>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4e0f      	ldr	r6, [pc, #60]	; (8005624 <sbrk_aligned+0x40>)
 80055e8:	000d      	movs	r5, r1
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	0004      	movs	r4, r0
 80055ee:	2900      	cmp	r1, #0
 80055f0:	d102      	bne.n	80055f8 <sbrk_aligned+0x14>
 80055f2:	f000 f8bf 	bl	8005774 <_sbrk_r>
 80055f6:	6030      	str	r0, [r6, #0]
 80055f8:	0029      	movs	r1, r5
 80055fa:	0020      	movs	r0, r4
 80055fc:	f000 f8ba 	bl	8005774 <_sbrk_r>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d00a      	beq.n	800561a <sbrk_aligned+0x36>
 8005604:	2303      	movs	r3, #3
 8005606:	1cc5      	adds	r5, r0, #3
 8005608:	439d      	bics	r5, r3
 800560a:	42a8      	cmp	r0, r5
 800560c:	d007      	beq.n	800561e <sbrk_aligned+0x3a>
 800560e:	1a29      	subs	r1, r5, r0
 8005610:	0020      	movs	r0, r4
 8005612:	f000 f8af 	bl	8005774 <_sbrk_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d101      	bne.n	800561e <sbrk_aligned+0x3a>
 800561a:	2501      	movs	r5, #1
 800561c:	426d      	negs	r5, r5
 800561e:	0028      	movs	r0, r5
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	20000198 	.word	0x20000198

08005628 <_malloc_r>:
 8005628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800562a:	2203      	movs	r2, #3
 800562c:	1ccb      	adds	r3, r1, #3
 800562e:	4393      	bics	r3, r2
 8005630:	3308      	adds	r3, #8
 8005632:	0006      	movs	r6, r0
 8005634:	001f      	movs	r7, r3
 8005636:	2b0c      	cmp	r3, #12
 8005638:	d232      	bcs.n	80056a0 <_malloc_r+0x78>
 800563a:	270c      	movs	r7, #12
 800563c:	42b9      	cmp	r1, r7
 800563e:	d831      	bhi.n	80056a4 <_malloc_r+0x7c>
 8005640:	0030      	movs	r0, r6
 8005642:	f000 f8a9 	bl	8005798 <__malloc_lock>
 8005646:	4d32      	ldr	r5, [pc, #200]	; (8005710 <_malloc_r+0xe8>)
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	001c      	movs	r4, r3
 800564c:	2c00      	cmp	r4, #0
 800564e:	d12e      	bne.n	80056ae <_malloc_r+0x86>
 8005650:	0039      	movs	r1, r7
 8005652:	0030      	movs	r0, r6
 8005654:	f7ff ffc6 	bl	80055e4 <sbrk_aligned>
 8005658:	0004      	movs	r4, r0
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d11e      	bne.n	800569c <_malloc_r+0x74>
 800565e:	682c      	ldr	r4, [r5, #0]
 8005660:	0025      	movs	r5, r4
 8005662:	2d00      	cmp	r5, #0
 8005664:	d14a      	bne.n	80056fc <_malloc_r+0xd4>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	0029      	movs	r1, r5
 800566a:	18e3      	adds	r3, r4, r3
 800566c:	0030      	movs	r0, r6
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	f000 f880 	bl	8005774 <_sbrk_r>
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	4283      	cmp	r3, r0
 8005678:	d143      	bne.n	8005702 <_malloc_r+0xda>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	3703      	adds	r7, #3
 800567e:	1aff      	subs	r7, r7, r3
 8005680:	2303      	movs	r3, #3
 8005682:	439f      	bics	r7, r3
 8005684:	3708      	adds	r7, #8
 8005686:	2f0c      	cmp	r7, #12
 8005688:	d200      	bcs.n	800568c <_malloc_r+0x64>
 800568a:	270c      	movs	r7, #12
 800568c:	0039      	movs	r1, r7
 800568e:	0030      	movs	r0, r6
 8005690:	f7ff ffa8 	bl	80055e4 <sbrk_aligned>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d034      	beq.n	8005702 <_malloc_r+0xda>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	19df      	adds	r7, r3, r7
 800569c:	6027      	str	r7, [r4, #0]
 800569e:	e013      	b.n	80056c8 <_malloc_r+0xa0>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dacb      	bge.n	800563c <_malloc_r+0x14>
 80056a4:	230c      	movs	r3, #12
 80056a6:	2500      	movs	r5, #0
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	0028      	movs	r0, r5
 80056ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	1bd1      	subs	r1, r2, r7
 80056b2:	d420      	bmi.n	80056f6 <_malloc_r+0xce>
 80056b4:	290b      	cmp	r1, #11
 80056b6:	d917      	bls.n	80056e8 <_malloc_r+0xc0>
 80056b8:	19e2      	adds	r2, r4, r7
 80056ba:	6027      	str	r7, [r4, #0]
 80056bc:	42a3      	cmp	r3, r4
 80056be:	d111      	bne.n	80056e4 <_malloc_r+0xbc>
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	6863      	ldr	r3, [r4, #4]
 80056c4:	6011      	str	r1, [r2, #0]
 80056c6:	6053      	str	r3, [r2, #4]
 80056c8:	0030      	movs	r0, r6
 80056ca:	0025      	movs	r5, r4
 80056cc:	f000 f86c 	bl	80057a8 <__malloc_unlock>
 80056d0:	2207      	movs	r2, #7
 80056d2:	350b      	adds	r5, #11
 80056d4:	1d23      	adds	r3, r4, #4
 80056d6:	4395      	bics	r5, r2
 80056d8:	1aea      	subs	r2, r5, r3
 80056da:	429d      	cmp	r5, r3
 80056dc:	d0e5      	beq.n	80056aa <_malloc_r+0x82>
 80056de:	1b5b      	subs	r3, r3, r5
 80056e0:	50a3      	str	r3, [r4, r2]
 80056e2:	e7e2      	b.n	80056aa <_malloc_r+0x82>
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	e7ec      	b.n	80056c2 <_malloc_r+0x9a>
 80056e8:	6862      	ldr	r2, [r4, #4]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	d101      	bne.n	80056f2 <_malloc_r+0xca>
 80056ee:	602a      	str	r2, [r5, #0]
 80056f0:	e7ea      	b.n	80056c8 <_malloc_r+0xa0>
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	e7e8      	b.n	80056c8 <_malloc_r+0xa0>
 80056f6:	0023      	movs	r3, r4
 80056f8:	6864      	ldr	r4, [r4, #4]
 80056fa:	e7a7      	b.n	800564c <_malloc_r+0x24>
 80056fc:	002c      	movs	r4, r5
 80056fe:	686d      	ldr	r5, [r5, #4]
 8005700:	e7af      	b.n	8005662 <_malloc_r+0x3a>
 8005702:	230c      	movs	r3, #12
 8005704:	0030      	movs	r0, r6
 8005706:	6033      	str	r3, [r6, #0]
 8005708:	f000 f84e 	bl	80057a8 <__malloc_unlock>
 800570c:	e7cd      	b.n	80056aa <_malloc_r+0x82>
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	20000194 	.word	0x20000194

08005714 <_realloc_r>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	0007      	movs	r7, r0
 8005718:	000e      	movs	r6, r1
 800571a:	0014      	movs	r4, r2
 800571c:	2900      	cmp	r1, #0
 800571e:	d105      	bne.n	800572c <_realloc_r+0x18>
 8005720:	0011      	movs	r1, r2
 8005722:	f7ff ff81 	bl	8005628 <_malloc_r>
 8005726:	0005      	movs	r5, r0
 8005728:	0028      	movs	r0, r5
 800572a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800572c:	2a00      	cmp	r2, #0
 800572e:	d103      	bne.n	8005738 <_realloc_r+0x24>
 8005730:	f7ff ff0e 	bl	8005550 <_free_r>
 8005734:	0025      	movs	r5, r4
 8005736:	e7f7      	b.n	8005728 <_realloc_r+0x14>
 8005738:	f000 f83e 	bl	80057b8 <_malloc_usable_size_r>
 800573c:	9001      	str	r0, [sp, #4]
 800573e:	4284      	cmp	r4, r0
 8005740:	d803      	bhi.n	800574a <_realloc_r+0x36>
 8005742:	0035      	movs	r5, r6
 8005744:	0843      	lsrs	r3, r0, #1
 8005746:	42a3      	cmp	r3, r4
 8005748:	d3ee      	bcc.n	8005728 <_realloc_r+0x14>
 800574a:	0021      	movs	r1, r4
 800574c:	0038      	movs	r0, r7
 800574e:	f7ff ff6b 	bl	8005628 <_malloc_r>
 8005752:	1e05      	subs	r5, r0, #0
 8005754:	d0e8      	beq.n	8005728 <_realloc_r+0x14>
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	0022      	movs	r2, r4
 800575a:	429c      	cmp	r4, r3
 800575c:	d900      	bls.n	8005760 <_realloc_r+0x4c>
 800575e:	001a      	movs	r2, r3
 8005760:	0031      	movs	r1, r6
 8005762:	0028      	movs	r0, r5
 8005764:	f7ff fbc0 	bl	8004ee8 <memcpy>
 8005768:	0031      	movs	r1, r6
 800576a:	0038      	movs	r0, r7
 800576c:	f7ff fef0 	bl	8005550 <_free_r>
 8005770:	e7da      	b.n	8005728 <_realloc_r+0x14>
	...

08005774 <_sbrk_r>:
 8005774:	2300      	movs	r3, #0
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	4d06      	ldr	r5, [pc, #24]	; (8005794 <_sbrk_r+0x20>)
 800577a:	0004      	movs	r4, r0
 800577c:	0008      	movs	r0, r1
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	f7fc fcf8 	bl	8002174 <_sbrk>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d103      	bne.n	8005790 <_sbrk_r+0x1c>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d000      	beq.n	8005790 <_sbrk_r+0x1c>
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	bd70      	pop	{r4, r5, r6, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	2000019c 	.word	0x2000019c

08005798 <__malloc_lock>:
 8005798:	b510      	push	{r4, lr}
 800579a:	4802      	ldr	r0, [pc, #8]	; (80057a4 <__malloc_lock+0xc>)
 800579c:	f000 f814 	bl	80057c8 <__retarget_lock_acquire_recursive>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	200001a0 	.word	0x200001a0

080057a8 <__malloc_unlock>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4802      	ldr	r0, [pc, #8]	; (80057b4 <__malloc_unlock+0xc>)
 80057ac:	f000 f80d 	bl	80057ca <__retarget_lock_release_recursive>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	200001a0 	.word	0x200001a0

080057b8 <_malloc_usable_size_r>:
 80057b8:	1f0b      	subs	r3, r1, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1f18      	subs	r0, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	da01      	bge.n	80057c6 <_malloc_usable_size_r+0xe>
 80057c2:	580b      	ldr	r3, [r1, r0]
 80057c4:	18c0      	adds	r0, r0, r3
 80057c6:	4770      	bx	lr

080057c8 <__retarget_lock_acquire_recursive>:
 80057c8:	4770      	bx	lr

080057ca <__retarget_lock_release_recursive>:
 80057ca:	4770      	bx	lr

080057cc <_init>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr

080057d8 <_fini>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr
