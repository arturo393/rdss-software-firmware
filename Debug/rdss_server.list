
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006114  08006114  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800611c  0800611c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08006194  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006194  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e2e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f45  00000000  00000000  00031ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00035e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb2  00000000  00000000  00036de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001397e  00000000  00000000  00050c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5b7  00000000  00000000  00064610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  000f2c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ce0 	.word	0x08005ce0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005ce0 	.word	0x08005ce0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <readRegister+0x50>)
 800047a:	f002 feb4 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f002 f906 	bl	8002690 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000484:	1cf9      	adds	r1, r7, #3
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f003 fd5c 	bl	8003f48 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000490:	f107 010f 	add.w	r1, r7, #15
 8000494:	2364      	movs	r3, #100	; 0x64
 8000496:	2201      	movs	r2, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f003 fe91 	bl	80041c0 <HAL_SPI_Receive>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f002 f8f6 	bl	8002690 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <readRegister+0x50>)
 80004aa:	f002 fe9c 	bl	80031e6 <HAL_GPIO_WritePin>
	return rec;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00

080004bc <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	461a      	mov	r2, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	72fb      	strb	r3, [r7, #11]
 80004cc:	4613      	mov	r3, r2
 80004ce:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	743b      	strb	r3, [r7, #16]
	int j = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004f6:	2301      	movs	r3, #1
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
 80004fa:	e00f      	b.n	800051c <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 80004fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	637a      	str	r2, [r7, #52]	; 0x34
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	f107 0210 	add.w	r2, r7, #16
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	4413      	add	r3, r2
 8000512:	460a      	mov	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	3301      	adds	r3, #1
 800051a:	633b      	str	r3, [r7, #48]	; 0x30
 800051c:	7abb      	ldrb	r3, [r7, #10]
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	ddeb      	ble.n	80004fc <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <writeRegister+0xa4>)
 800052a:	f002 fe5c 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b29a      	uxth	r2, r3
 8000536:	f107 0110 	add.w	r1, r7, #16
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f003 fd02 	bl	8003f48 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <writeRegister+0xa4>)
 800054a:	f002 fe4c 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f002 f89e 	bl	8002690 <HAL_Delay>
	return cmd;  // pull the pin high
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	b2db      	uxtb	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	3738      	adds	r7, #56	; 0x38
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010c00 	.word	0x40010c00

08000564 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000572:	f04f 0000 	mov.w	r0, #0
 8000576:	f04f 0100 	mov.w	r1, #0
 800057a:	04d9      	lsls	r1, r3, #19
 800057c:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000580:	04d0      	lsls	r0, r2, #19
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <setRFFrequency+0x80>)
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	f7ff fdea 	bl	8000160 <__aeabi_uldivmod>
 800058c:	4602      	mov	r2, r0
 800058e:	460b      	mov	r3, r1
 8000590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	0c02      	lsrs	r2, r0, #16
 80005a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a6:	0c0b      	lsrs	r3, r1, #16
 80005a8:	b2d3      	uxtb	r3, r2
 80005aa:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	f04f 0300 	mov.w	r3, #0
 80005b8:	0a02      	lsrs	r2, r0, #8
 80005ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005be:	0a0b      	lsrs	r3, r1, #8
 80005c0:	b2d3      	uxtb	r3, r2
 80005c2:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005c4:	7c3b      	ldrb	r3, [r7, #16]
 80005c6:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	2303      	movs	r3, #3
 80005d4:	2106      	movs	r1, #6
 80005d6:	f7ff ff71 	bl	80004bc <writeRegister>
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	01e84800 	.word	0x01e84800

080005e8 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f103 0210 	add.w	r2, r3, #16
 80005fc:	2301      	movs	r3, #1
 80005fe:	2109      	movs	r1, #9
 8000600:	f7ff ff5c 	bl	80004bc <writeRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0216 	add.w	r2, r3, #22
 8000620:	2301      	movs	r3, #1
 8000622:	2139      	movs	r1, #57	; 0x39
 8000624:	f7ff ff4a 	bl	80004bc <writeRegister>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f103 0217 	add.w	r2, r3, #23
 8000644:	2301      	movs	r3, #1
 8000646:	210b      	movs	r1, #11
 8000648:	f7ff ff38 	bl	80004bc <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 021a 	add.w	r2, r3, #26
 8000668:	2301      	movs	r3, #1
 800066a:	211f      	movs	r1, #31
 800066c:	f7ff ff26 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 021c 	add.w	r2, r3, #28
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	f7ff ff1c 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f103 021d 	add.w	r2, r3, #29
 8000690:	2301      	movs	r3, #1
 8000692:	2121      	movs	r1, #33	; 0x21
 8000694:	f7ff ff12 	bl	80004bc <writeRegister>
			1);
	module->readBytes = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7c9b      	ldrb	r3, [r3, #18]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7cdb      	ldrb	r3, [r3, #19]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4413      	add	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80006e2:	f107 020f 	add.w	r2, r7, #15
 80006e6:	2301      	movs	r3, #1
 80006e8:	211d      	movs	r1, #29
 80006ea:	f7ff fee7 	bl	80004bc <writeRegister>

	cmd = module->LoRa_SF << 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7c5b      	ldrb	r3, [r3, #17]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7d1b      	ldrb	r3, [r3, #20]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4413      	add	r3, r2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7eda      	ldrb	r2, [r3, #27]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4413      	add	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800071a:	f107 020f 	add.w	r2, r7, #15
 800071e:	2301      	movs	r3, #1
 8000720:	211e      	movs	r1, #30
 8000722:	f7ff fecb 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 0219 	add.w	r2, r3, #25
 8000732:	2301      	movs	r3, #1
 8000734:	2126      	movs	r1, #38	; 0x26
 8000736:	f7ff fec1 	bl	80004bc <writeRegister>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000750:	2131      	movs	r1, #49	; 0x31
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe88 	bl	8000468 <readRegister>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f023 0307 	bic.w	r3, r3, #7
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	f043 0305 	orr.w	r3, r3, #5
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000776:	f107 020f 	add.w	r2, r7, #15
 800077a:	2301      	movs	r3, #1
 800077c:	2131      	movs	r1, #49	; 0x31
 800077e:	f7ff fe9d 	bl	80004bc <writeRegister>
	tmp = 0x0C;
 8000782:	230c      	movs	r3, #12
 8000784:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800078c:	f107 020f 	add.w	r2, r7, #15
 8000790:	2301      	movs	r3, #1
 8000792:	2137      	movs	r1, #55	; 0x37
 8000794:	f7ff fe92 	bl	80004bc <writeRegister>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe59 	bl	8000468 <readRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80007e2:	f107 020f 	add.w	r2, r7, #15
 80007e6:	2301      	movs	r3, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	f7ff fe67 	bl	80004bc <writeRegister>
	module->operatingMode = mode;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000806:	23ff      	movs	r3, #255	; 0xff
 8000808:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000810:	f107 020f 	add.w	r2, r7, #15
 8000814:	2301      	movs	r3, #1
 8000816:	2112      	movs	r1, #18
 8000818:	f7ff fe50 	bl	80004bc <writeRegister>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	b29b      	uxth	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f002 fcbd 	bl	80031b8 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <ledInit+0x60>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <ledInit+0x60>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <ledInit+0x60>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <ledInit+0x60>)
 800086e:	f023 0320 	bic.w	r3, r3, #32
 8000872:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <ledInit+0x60>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <ledInit+0x60>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <ledInit+0x60>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <ledInit+0x60>)
 8000886:	f023 0310 	bic.w	r3, r3, #16
 800088a:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ledInit+0x60>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <ledInit+0x60>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <ledInit+0x60>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <ledInit+0x60>)
 800089e:	f023 0308 	bic.w	r3, r3, #8
 80008a2:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f835 	bl	8000914 <led_reset>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 80008c0:	f001 fedc 	bl	800267c <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d0:	d90b      	bls.n	80008ea <led_enable_kalive+0x32>
		l->kaCounter = HAL_GetTick();
 80008d2:	f001 fed3 	bl	800267c <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <led_enable_kalive+0x58>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <led_enable_kalive+0x58>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 80008e8:	e00d      	b.n	8000906 <led_enable_kalive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 80008ea:	f001 fec7 	bl	800267c <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b32      	cmp	r3, #50	; 0x32
 80008f8:	d905      	bls.n	8000906 <led_enable_kalive+0x4e>
		SYS_RP_LED_OFF();
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <led_enable_kalive+0x58>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <led_enable_kalive+0x58>)
 8000900:	f023 0320 	bic.w	r3, r3, #32
 8000904:	60d3      	str	r3, [r2, #12]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010c00 	.word	0x40010c00

08000914 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 800092e:	f001 fea5 	bl	800267c <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_UART_RxCpltCallback>:

/* In the interrupt handler, read the received data from the UART1 data register */
/* Enable UART1 interrupt */

uint8_t rxData;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */

	if (uart1_ptr->len >= RX_BUFFLEN) {
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_UART_RxCpltCallback+0x54>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000964:	2b63      	cmp	r3, #99	; 0x63
 8000966:	d909      	bls.n	800097c <HAL_UART_RxCpltCallback+0x28>
		cleanRxBuffer(uart1_ptr);
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_UART_RxCpltCallback+0x54>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fde1 	bl	8002534 <cleanRxBuffer>
		uart1_ptr->len = 0;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_UART_RxCpltCallback+0x54>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}

	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	490b      	ldr	r1, [pc, #44]	; (80009ac <HAL_UART_RxCpltCallback+0x58>)
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <HAL_UART_RxCpltCallback+0x5c>)
 8000982:	f004 f8a8 	bl	8004ad6 <HAL_UART_Receive_IT>
	uart1_ptr->rxBuffer[uart1_ptr->len++] = rxData;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_UART_RxCpltCallback+0x54>)
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_UART_RxCpltCallback+0x54>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 8000992:	1c50      	adds	r0, r2, #1
 8000994:	b2c0      	uxtb	r0, r0
 8000996:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_UART_RxCpltCallback+0x58>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	548b      	strb	r3, [r1, r2]
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000023c 	.word	0x2000023c
 80009ac:	20000248 	.word	0x20000248
 80009b0:	20000170 	.word	0x20000170
 80009b4:	00000000 	.word	0x00000000

080009b8 <setTxBaseParameters>:
	}
	return len;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	75fb      	strb	r3, [r7, #23]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]
	uint8_t dio3 = DIO3_VALID_HEADER;
 80009cc:	2301      	movs	r3, #1
 80009ce:	753b      	strb	r3, [r7, #20]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	74fb      	strb	r3, [r7, #19]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	74bb      	strb	r3, [r7, #18]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 80009d8:	2320      	movs	r3, #32
 80009da:	747b      	strb	r3, [r7, #17]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 80009dc:	2310      	movs	r3, #16
 80009de:	743b      	strb	r3, [r7, #16]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 80009e4:	2304      	movs	r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 80009e8:	2302      	movs	r3, #2
 80009ea:	737b      	strb	r3, [r7, #13]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 80009ec:	2301      	movs	r3, #1
 80009ee:	733b      	strb	r3, [r7, #12]

	loraTx->frequency = DOWNLINK_FREQ;
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	a331      	add	r3, pc, #196	; (adr r3, 8000ab8 <setTxBaseParameters+0x100>)
 80009f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraTx->power = SX1278_POWER_17DBM;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	22fc      	movs	r2, #252	; 0xfc
 8000a00:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	220a      	movs	r2, #10
 8000a06:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2206      	movs	r2, #6
 8000a0c:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2202      	movs	r2, #2
 8000a12:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2234      	movs	r2, #52	; 0x34
 8000a1e:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	220b      	movs	r2, #11
 8000a24:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2223      	movs	r2, #35	; 0x23
 8000a2a:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2204      	movs	r2, #4
 8000a30:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2208      	movs	r2, #8
 8000a36:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2208      	movs	r2, #8
 8000a42:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000a44:	7dfa      	ldrb	r2, [r7, #23]
 8000a46:	7dbb      	ldrb	r3, [r7, #22]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	7d7b      	ldrb	r3, [r7, #21]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	7d3b      	ldrb	r3, [r7, #20]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000a5c:	7cfa      	ldrb	r2, [r7, #19]
 8000a5e:	7cbb      	ldrb	r3, [r7, #18]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	7c7b      	ldrb	r3, [r7, #17]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a76:	7c39      	ldrb	r1, [r7, #16]
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	430b      	orrs	r3, r1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a94:	7b79      	ldrb	r1, [r7, #13]
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->fhssValue = HOPS_PERIOD;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	779a      	strb	r2, [r3, #30]
}
 8000aac:	bf00      	nop
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	08f0d180 	.word	0x08f0d180
 8000abc:	00000000 	.word	0x00000000

08000ac0 <saveTx>:

void saveTx(SX1278_t *module) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe7b 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 fddd 	bl	8002690 <HAL_Delay>
	setRFFrequency(module);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fd44 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fd95 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fd80 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fda1 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f103 0218 	add.w	r2, r3, #24
 8000afa:	2301      	movs	r3, #1
 8000afc:	210c      	movs	r1, #12
 8000afe:	f7ff fcdd 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7c5b      	ldrb	r3, [r3, #17]
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d10a      	bne.n	8000b20 <saveTx+0x60>
		module->headerMode = IMPLICIT;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2203      	movs	r2, #3
 8000b16:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fe12 	bl	8000742 <setDetectionParameters>
 8000b1e:	e006      	b.n	8000b2e <saveTx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fdba 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fd8d 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f103 021e 	add.w	r2, r3, #30
 8000b46:	2301      	movs	r3, #1
 8000b48:	2124      	movs	r1, #36	; 0x24
 8000b4a:	f7ff fcb7 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f103 021f 	add.w	r2, r3, #31
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2140      	movs	r1, #64	; 0x40
 8000b5e:	f7ff fcad 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fe4b 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0220 	add.w	r2, r3, #32
 8000b74:	2301      	movs	r3, #1
 8000b76:	2111      	movs	r1, #17
 8000b78:	f7ff fca0 	bl	80004bc <writeRegister>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7d5b      	ldrb	r3, [r3, #21]
 8000b90:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b98:	f107 020f 	add.w	r2, r7, #15
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	2122      	movs	r1, #34	; 0x22
 8000ba0:	f7ff fc8c 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000baa:	210e      	movs	r1, #14
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc5b 	bl	8000468 <readRegister>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73bb      	strb	r3, [r7, #14]
	addr = 0x80;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000bc0:	f107 020e 	add.w	r2, r7, #14
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	210d      	movs	r1, #13
 8000bc8:	f7ff fc78 	bl	80004bc <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000bd2:	2122      	movs	r1, #34	; 0x22
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc47 	bl	8000468 <readRegister>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	755a      	strb	r2, [r3, #21]
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <sx1278Reset>:

void sx1278Reset() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <sx1278Reset+0x34>)
 8000bf6:	f002 faf6 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <sx1278Reset+0x34>)
 8000c00:	f002 faf1 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f001 fd43 	bl	8002690 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <sx1278Reset+0x34>)
 8000c10:	f002 fae9 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	; 0x64
 8000c16:	f001 fd3b 	bl	8002690 <HAL_Delay>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <transmit>:

int messageCounter = 0;
void transmit(SX1278_t *loraTx) {
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b0a8      	sub	sp, #160	; 0xa0
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (loraTx->status == UNKNOW) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d125      	bne.n	8000c82 <transmit+0x5e>
		uint8_t tmp[] = "Configuring Master LoRa module: Tx Mode\r\n";
 8000c36:	4b7f      	ldr	r3, [pc, #508]	; (8000e34 <transmit+0x210>)
 8000c38:	f107 0408 	add.w	r4, r7, #8
 8000c3c:	461d      	mov	r5, r3
 8000c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4a:	c403      	stmia	r4!, {r0, r1}
 8000c4c:	8022      	strh	r2, [r4, #0]
		size_t len = strlen(tmp);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fa7c 	bl	8000150 <strlen>
 8000c58:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		HAL_UART_Transmit(&huart1, tmp, len, 100);
 8000c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f107 0108 	add.w	r1, r7, #8
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	4873      	ldr	r0, [pc, #460]	; (8000e38 <transmit+0x214>)
 8000c6a:	f003 fea2 	bl	80049b2 <HAL_UART_Transmit>
		setTxBaseParameters(loraTx);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fea2 	bl	80009b8 <setTxBaseParameters>
		saveTx(loraTx);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff23 	bl	8000ac0 <saveTx>
		loraTx->status = TX_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (loraTx->status == TX_READY) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	f040 80cf 	bne.w	8000e2c <transmit+0x208>

		memset(loraTx->buffer, 0, SX1278_MAX_PACKET);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3325      	adds	r3, #37	; 0x25
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fbad 	bl	80053f8 <memset>
		loraTx->len = sprintf((char*) loraTx->buffer, "Hello World"
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3325      	adds	r3, #37	; 0x25
 8000ca2:	4a66      	ldr	r2, [pc, #408]	; (8000e3c <transmit+0x218>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4966      	ldr	r1, [pc, #408]	; (8000e40 <transmit+0x21c>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fbad 	bl	8005408 <siprintf>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	755a      	strb	r2, [r3, #21]
				" %d", messageCounter);

		setTxParameters(loraTx);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff64 	bl	8000b84 <setTxParameters>
		uint8_t tmp2[] = "Sending message: ";
 8000cbc:	4b61      	ldr	r3, [pc, #388]	; (8000e44 <transmit+0x220>)
 8000cbe:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	8023      	strh	r3, [r4, #0]
		size_t len2 = strlen(tmp2);
 8000ccc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fa3d 	bl	8000150 <strlen>
 8000cd6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		HAL_UART_Transmit(&huart1, tmp2, len2, 100);
 8000cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	4854      	ldr	r0, [pc, #336]	; (8000e38 <transmit+0x214>)
 8000ce8:	f003 fe63 	bl	80049b2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, loraTx->buffer, loraTx->len, 100);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7d5b      	ldrb	r3, [r3, #21]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	484f      	ldr	r0, [pc, #316]	; (8000e38 <transmit+0x214>)
 8000cfc:	f003 fe59 	bl	80049b2 <HAL_UART_Transmit>

		for (int i = 0; i < loraTx->len; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000d06:	e015      	b.n	8000d34 <transmit+0x110>
			char data = loraTx->buffer[i];
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d0e:	4413      	add	r3, r2
 8000d10:	3325      	adds	r3, #37	; 0x25
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000d1e:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8000d22:	2301      	movs	r3, #1
 8000d24:	2100      	movs	r1, #0
 8000d26:	f7ff fbc9 	bl	80004bc <writeRegister>
		for (int i = 0; i < loraTx->len; i++) {
 8000d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7d5b      	ldrb	r3, [r3, #21]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	dbe2      	blt.n	8000d08 <transmit+0xe4>
		}
		updateLoraLowFreq(loraTx, TX);
 8000d42:	2103      	movs	r1, #3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fd3e 	bl	80007c6 <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8000d4a:	f001 fc97 	bl	800267c <HAL_GetTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd63 	bl	8000824 <SX1278_hw_GetDIO0>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d039      	beq.n	8000dd8 <transmit+0x1b4>
				int timeEnd = HAL_GetTick();
 8000d64:	f001 fc8a 	bl	800267c <HAL_GetTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				int tiempoTransmision = timeEnd - timeStart;
 8000d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000d82:	2112      	movs	r1, #18
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb6f 	bl	8000468 <readRegister>
				clearIrqFlags(loraTx);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fd37 	bl	80007fe <clearIrqFlags>
				uint8_t tmp3[100] = { 0 };
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2260      	movs	r2, #96	; 0x60
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fb2b 	bl	80053f8 <memset>
				uint8_t len3 = sprintf((char*) tmp3,
						" - Tx Ok: %d ms %d bytes\n", tiempoTransmision,
						loraTx->len);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7d5b      	ldrb	r3, [r3, #21]
				uint8_t len3 = sprintf((char*) tmp3,
 8000da6:	f107 0008 	add.w	r0, r7, #8
 8000daa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000dae:	4926      	ldr	r1, [pc, #152]	; (8000e48 <transmit+0x224>)
 8000db0:	f004 fb2a 	bl	8005408 <siprintf>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

				HAL_UART_Transmit(&huart1, tmp3, len3, 100);
 8000dba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 0108 	add.w	r1, r7, #8
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <transmit+0x214>)
 8000dc8:	f003 fdf3 	bl	80049b2 <HAL_UART_Transmit>
				messageCounter += 1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <transmit+0x218>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <transmit+0x218>)
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e029      	b.n	8000e2c <transmit+0x208>
				return;
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000dd8:	f001 fc50 	bl	800267c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000de8:	d91c      	bls.n	8000e24 <transmit+0x200>
				sx1278Reset();
 8000dea:	f7ff feff 	bl	8000bec <sx1278Reset>
				uint8_t tmp4[] = "EntryTx failed, timeout reset!\r\n";
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <transmit+0x228>)
 8000df0:	f107 0408 	add.w	r4, r7, #8
 8000df4:	461d      	mov	r5, r3
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	7023      	strb	r3, [r4, #0]
				size_t len4 = strlen(tmp4);
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9a2 	bl	8000150 <strlen>
 8000e0c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				HAL_UART_Transmit(&huart1, tmp4, len4, 100);
 8000e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 0108 	add.w	r1, r7, #8
 8000e1a:	2364      	movs	r3, #100	; 0x64
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <transmit+0x214>)
 8000e1e:	f003 fdc8 	bl	80049b2 <HAL_UART_Transmit>
 8000e22:	e003      	b.n	8000e2c <transmit+0x208>

				return;
			}

			HAL_Delay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f001 fc33 	bl	8002690 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000e2a:	e793      	b.n	8000d54 <transmit+0x130>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 8000e2c:	37a0      	adds	r7, #160	; 0xa0
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08005d64 	.word	0x08005d64
 8000e38:	20000170 	.word	0x20000170
 8000e3c:	20000250 	.word	0x20000250
 8000e40:	08005d38 	.word	0x08005d38
 8000e44:	08005d90 	.word	0x08005d90
 8000e48:	08005d48 	.word	0x08005d48
 8000e4c:	08005da4 	.word	0x08005da4

08000e50 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	737b      	strb	r3, [r7, #13]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000e64:	2301      	movs	r3, #1
 8000e66:	733b      	strb	r3, [r7, #12]
	////////////////////////////////////////
	loraRx->frequency = UPLINK_FREQ;
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	a32b      	add	r3, pc, #172	; (adr r3, 8000f18 <setRxBaseParameters+0xc8>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraRx->power = SX1278_POWER_17DBM;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	22fc      	movs	r2, #252	; 0xfc
 8000e78:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2206      	movs	r2, #6
 8000e84:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2234      	movs	r2, #52	; 0x34
 8000e96:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	220b      	movs	r2, #11
 8000e9c:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2223      	movs	r2, #35	; 0x23
 8000ea2:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2208      	movs	r2, #8
 8000eae:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	7b7b      	ldrb	r3, [r7, #13]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	7b3b      	ldrb	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef4:	f023 0320 	bic.w	r3, r3, #32
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]

	loraRx->fhssValue = HOPS_PERIOD;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	779a      	strb	r2, [r3, #30]
	loraRx->len = SX1278_MAX_PACKET;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	755a      	strb	r2, [r3, #21]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	0a21fe80 	.word	0x0a21fe80
 8000f1c:	00000000 	.word	0x00000000

08000f20 <saveRx>:

void saveRx(SX1278_t *module) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000f28:	2100      	movs	r1, #0
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fc4b 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000f30:	200f      	movs	r0, #15
 8000f32:	f001 fbad 	bl	8002690 <HAL_Delay>
	setRFFrequency(module);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fb14 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fb65 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fb50 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fb71 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f103 0218 	add.w	r2, r3, #24
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	210c      	movs	r1, #12
 8000f5e:	f7ff faad 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7c5b      	ldrb	r3, [r3, #17]
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d10a      	bne.n	8000f80 <saveRx+0x60>
		module->headerMode = IMPLICIT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fbe2 	bl	8000742 <setDetectionParameters>
 8000f7e:	e006      	b.n	8000f8e <saveRx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb8a 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fb5d 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 021e 	add.w	r2, r3, #30
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2124      	movs	r1, #36	; 0x24
 8000faa:	f7ff fa87 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 021f 	add.w	r2, r3, #31
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	f7ff fa7d 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fc1b 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f103 0220 	add.w	r2, r3, #32
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2111      	movs	r1, #17
 8000fd8:	f7ff fa70 	bl	80004bc <writeRegister>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fec:	2100      	movs	r1, #0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fbe9 	bl	80007c6 <updateLoraLowFreq>
	uint8_t cmd = module->len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7d5b      	ldrb	r3, [r3, #21]
 8000ff8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001000:	f107 020f 	add.w	r2, r7, #15
 8001004:	2301      	movs	r3, #1
 8001006:	2122      	movs	r1, #34	; 0x22
 8001008:	f7ff fa58 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001012:	210f      	movs	r1, #15
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa27 	bl	8000468 <readRegister>
 800101a:	4603      	mov	r3, r0
 800101c:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001024:	f107 020e 	add.w	r2, r7, #14
 8001028:	2301      	movs	r3, #1
 800102a:	210d      	movs	r1, #13
 800102c:	f7ff fa46 	bl	80004bc <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001036:	2122      	movs	r1, #34	; 0x22
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa15 	bl	8000468 <readRegister>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	755a      	strb	r2, [r3, #21]
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	2b02      	cmp	r3, #2
 800105e:	d107      	bne.n	8001070 <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, SX1278_MAX_PACKET);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3325      	adds	r3, #37	; 0x25
 8001064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f9c4 	bl	80053f8 <memset>
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <waitForRxDone>:

void waitForRxDone(SX1278_t *loraRx) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001080:	e024      	b.n	80010cc <waitForRxDone+0x54>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001088:	2112      	movs	r1, #18
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9ec 	bl	8000468 <readRegister>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	2b00      	cmp	r3, #0
 800109c:	d016      	beq.n	80010cc <waitForRxDone+0x54>
			uint8_t cmd = flags | (1 << 7);
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	73bb      	strb	r3, [r7, #14]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80010ae:	f107 020e 	add.w	r2, r7, #14
 80010b2:	2301      	movs	r3, #1
 80010b4:	2112      	movs	r1, #18
 80010b6:	f7ff fa01 	bl	80004bc <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80010c0:	2112      	movs	r1, #18
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9d0 	bl	8000468 <readRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fba7 	bl	8000824 <SX1278_hw_GetDIO0>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0d2      	beq.n	8001082 <waitForRxDone+0xa>
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <configInit>:

void configInit(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	uint8_t tmp[] = "Configuring Master LoRa module: Rx Mode\r\n";
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <configInit+0x60>)
 80010f4:	f107 0408 	add.w	r4, r7, #8
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001102:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001106:	c403      	stmia	r4!, {r0, r1}
 8001108:	8022      	strh	r2, [r4, #0]
	size_t len = strlen(tmp);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f81e 	bl	8000150 <strlen>
 8001114:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&*huart1, tmp, len, 100);
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	b29a      	uxth	r2, r3
 800111a:	f107 0108 	add.w	r1, r7, #8
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f003 fc46 	bl	80049b2 <HAL_UART_Transmit>
	setRxBaseParameters(&*loraRx);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff fe92 	bl	8000e50 <setRxBaseParameters>
	saveRx(loraRx);
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff fef7 	bl	8000f20 <saveRx>
	loraRx->status = RX_READY;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	setRxParameters(loraRx);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff ff52 	bl	8000fe4 <setRxParameters>
}
 8001140:	bf00      	nop
 8001142:	3738      	adds	r7, #56	; 0x38
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	08005dc8 	.word	0x08005dc8

0800114c <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800115a:	2112      	movs	r1, #18
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f983 	bl	8000468 <readRegister>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	SET_BIT(flags2, RX_DONE_MASK);
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116c:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd = flags2;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	73fb      	strb	r3, [r7, #15]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001178:	f107 020f 	add.w	r2, r7, #15
 800117c:	2301      	movs	r3, #1
 800117e:	2112      	movs	r1, #18
 8001180:	f7ff f99c 	bl	80004bc <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800118a:	2112      	movs	r1, #18
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f96b 	bl	8000468 <readRegister>
 8001192:	4603      	mov	r3, r0
 8001194:	75bb      	strb	r3, [r7, #22]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8001196:	7dbb      	ldrb	r3, [r7, #22]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	613b      	str	r3, [r7, #16]
	return errorActivation;
 800119e:	693b      	ldr	r3, [r7, #16]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <getLoraPacket>:

void getLoraPacket(SX1278_t *loraRx) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	loraRx->len = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80011b6:	2113      	movs	r1, #19
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f955 	bl	8000468 <readRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	4813      	ldr	r0, [pc, #76]	; (800121c <getLoraPacket+0x74>)
 80011d0:	f002 f809 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f001 fa5b 	bl	8002690 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100); // send address
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80011e0:	f107 010f 	add.w	r1, r7, #15
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	2201      	movs	r2, #1
 80011e8:	f002 feae 	bl	8003f48 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->len, 100); // receive 6 bytes data
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7d5b      	ldrb	r3, [r3, #21]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	2364      	movs	r3, #100	; 0x64
 8001200:	f002 ffde 	bl	80041c0 <HAL_SPI_Receive>
	HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f001 fa43 	bl	8002690 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 800120a:	2201      	movs	r2, #1
 800120c:	2101      	movs	r1, #1
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <getLoraPacket+0x74>)
 8001210:	f001 ffe9 	bl	80031e6 <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010c00 	.word	0x40010c00

08001220 <printParameters>:

void printParameters(int timeRx, UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b092      	sub	sp, #72	; 0x48
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	uint8_t tmp[50];
	HAL_UART_Transmit(huart1, loraRx->buffer, loraRx->len, 100);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d5b      	ldrb	r3, [r3, #21]
 8001236:	b29a      	uxth	r2, r3
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f003 fbb9 	bl	80049b2 <HAL_UART_Transmit>
	uint8_t largo = sprintf(tmp, " - Rx Ok: %d ms %d bytes\n", timeRx,
			loraRx->len);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d5b      	ldrb	r3, [r3, #21]
	uint8_t largo = sprintf(tmp, " - Rx Ok: %d ms %d bytes\n", timeRx,
 8001244:	f107 0014 	add.w	r0, r7, #20
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4909      	ldr	r1, [pc, #36]	; (8001270 <printParameters+0x50>)
 800124c:	f004 f8dc 	bl	8005408 <siprintf>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(huart1, tmp, largo, 100);
 8001256:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800125a:	b29a      	uxth	r2, r3
 800125c:	f107 0114 	add.w	r1, r7, #20
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f003 fba5 	bl	80049b2 <HAL_UART_Transmit>
}
 8001268:	bf00      	nop
 800126a:	3748      	adds	r7, #72	; 0x48
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08005df4 	.word	0x08005df4

08001274 <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d107      	bne.n	8001298 <read+0x24>
		configInit(huart1, loraRx);
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff2c 	bl	80010e8 <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 8001290:	2105      	movs	r1, #5
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f7ff fa97 	bl	80007c6 <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f7ff fed8 	bl	800104e <clearMemForRx>
	int timeStart = HAL_GetTick();
 800129e:	f001 f9ed 	bl	800267c <HAL_GetTick>
 80012a2:	4603      	mov	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]
	waitForRxDone(loraRx);
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fee6 	bl	8001078 <waitForRxDone>
	int timeEnd = HAL_GetTick();
 80012ac:	f001 f9e6 	bl	800267c <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7ff ff45 	bl	800114c <crcErrorActivation>
 80012c2:	60b8      	str	r0, [r7, #8]
	if (errorActivation == 1) {
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d017      	beq.n	80012fa <read+0x86>
		return;
	}
	getLoraPacket(loraRx);
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff ff6c 	bl	80011a8 <getLoraPacket>
	printParameters(timeRx, huart1, loraRx);
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff ffa3 	bl	8001220 <printParameters>
	setRxParameters(loraRx);
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff fe82 	bl	8000fe4 <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80012e0:	2105      	movs	r1, #5
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f7ff fa6f 	bl	80007c6 <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f7ff fa59 	bl	80007a0 <readMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80012f8:	e000      	b.n	80012fc <read+0x88>
		return;
 80012fa:	bf00      	nop
}
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <modeCmdUpdate>:
	vlad.agc170m = loraRx->buffer[16];
	vlad.level170m = loraRx->buffer[17];
	return vlad;
}

void modeCmdUpdate(UART_HandleTypeDef *huart1) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1_ptr->rxBuffer[4] << 8;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <modeCmdUpdate+0x4c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1_ptr->rxBuffer[5];
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <modeCmdUpdate+0x4c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	795b      	ldrb	r3, [r3, #5]
 8001320:	461a      	mov	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d104      	bne.n	8001338 <modeCmdUpdate+0x34>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <modeCmdUpdate+0x50>)
 8001334:	f001 ff57 	bl	80031e6 <HAL_GPIO_WritePin>
	}
	if (receiveValue == 1) {
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d104      	bne.n	8001348 <modeCmdUpdate+0x44>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2108      	movs	r1, #8
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <modeCmdUpdate+0x50>)
 8001344:	f001 ff4f 	bl	80031e6 <HAL_GPIO_WritePin>
	}
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000023c 	.word	0x2000023c
 8001354:	40010c00 	.word	0x40010c00

08001358 <modeRs485Update>:

void modeRs485Update(UART1_t *uart1, RS485_t *rs485, SX1278_t *loraRx) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b092      	sub	sp, #72	; 0x48
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	Vlad_t vlad;
	switch (rs485->cmd) {
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b11      	cmp	r3, #17
 800136a:	d015      	beq.n	8001398 <modeRs485Update+0x40>
 800136c:	2b12      	cmp	r3, #18
 800136e:	d000      	beq.n	8001372 <modeRs485Update+0x1a>
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
		rs485->len = 0;
		break;
	default:

		break;
 8001370:	e013      	b.n	800139a <modeRs485Update+0x42>
		modeCmdUpdate(uart1_ptr);
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <modeRs485Update+0x4c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffc4 	bl	8001304 <modeCmdUpdate>
		rs485->cmd = NONE;
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3302      	adds	r3, #2
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 f834 	bl	80053f8 <memset>
		rs485->len = 0;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2200      	movs	r2, #0
 8001394:	705a      	strb	r2, [r3, #1]
		break;
 8001396:	e000      	b.n	800139a <modeRs485Update+0x42>
		break;
 8001398:	bf00      	nop
	}

}
 800139a:	bf00      	nop
 800139c:	3748      	adds	r7, #72	; 0x48
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000023c 	.word	0x2000023c

080013a8 <printStatus>:
	len = sprintf((char*) u->txBuffer, "level170m %d[dBm]\r\n", vlad.level170m);
	uart1_send_frame((char*) u->txBuffer, len);
	cleanRxBuffer(u);
}

void printStatus(UART1_t *uart1, Rs485_status_t status) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0d6      	sub	sp, #344	; 0x158
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80013b6:	6018      	str	r0, [r3, #0]
 80013b8:	460a      	mov	r2, r1
 80013ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013be:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 80013c2:	701a      	strb	r2, [r3, #0]
	char rs485_msgs[11][30] = { "DATA OK", "START READING", "VALID FRAME",
 80013c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <printStatus+0x68>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	4611      	mov	r1, r2
 80013d2:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80013d6:	461a      	mov	r2, r3
 80013d8:	f004 f800 	bl	80053dc <memcpy>
			"NOT VALID FRAME", "WRONG MODULE FUNCTION", "WRONG MODULE ID",
			"CRC ERROR", "DONE", "WAITING", "VALID MODULE", "CHECK LORA DATA" };
	cleanByTimeout(uart1, rs485_msgs[status]);
 80013dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013e0:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	f107 010c 	add.w	r1, r7, #12
 80013ea:	4613      	mov	r3, r2
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	18ca      	adds	r2, r1, r3
 80013f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80013f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80013fc:	4611      	mov	r1, r2
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f001 f824 	bl	800244c <cleanByTimeout>

}
 8001404:	bf00      	nop
 8001406:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08005f00 	.word	0x08005f00

08001414 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 800141a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Vlad_t vlad;
	vlad_ptr = &vlad;
 800141c:	4aa3      	ldr	r2, [pc, #652]	; (80016ac <main+0x298>)
 800141e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001422:	6013      	str	r3, [r2, #0]
	uart1_ptr = &uart1;
 8001424:	4aa2      	ldr	r2, [pc, #648]	; (80016b0 <main+0x29c>)
 8001426:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800142a:	6013      	str	r3, [r2, #0]
	rs485_ptr = &rs485;
 800142c:	4aa1      	ldr	r2, [pc, #644]	; (80016b4 <main+0x2a0>)
 800142e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001432:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001434:	f001 f8ca 	bl	80025cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001438:	f000 fa44 	bl	80018c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800143c:	f000 fbd0 	bl	8001be0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001440:	f000 faec 	bl	8001a1c <MX_I2C1_Init>
	MX_SPI1_Init();
 8001444:	f000 fb18 	bl	8001a78 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001448:	f000 fb4c 	bl	8001ae4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800144c:	f000 fb74 	bl	8001b38 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001450:	f000 fb9c 	bl	8001b8c <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001454:	f000 fa90 	bl	8001978 <MX_ADC1_Init>
	MX_CRC_Init();
 8001458:	f000 facc 	bl	80019f4 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vladInit(VLAD, ID1, &vlad);
 800145c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001460:	461a      	mov	r2, r3
 8001462:	2101      	movs	r1, #1
 8001464:	2005      	movs	r0, #5
 8001466:	f000 fc18 	bl	8001c9a <vladInit>
	ledInit(&led);
 800146a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f9f0 	bl	8000854 <ledInit>
	rs485Init(&rs485);
 8001474:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fcab 	bl	8001dd4 <rs485Init>
	//uart1Init(HS16_CLK, BAUD_RATE, &uart1);

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 800147e:	4a8e      	ldr	r2, [pc, #568]	; (80016b8 <main+0x2a4>)
 8001480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001484:	6013      	str	r3, [r2, #0]
	lora_ptr = &loraRx;
 8001486:	4a8c      	ldr	r2, [pc, #560]	; (80016b8 <main+0x2a4>)
 8001488:	463b      	mov	r3, r7
 800148a:	6013      	str	r3, [r2, #0]

	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 800148c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001490:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001494:	4a89      	ldr	r2, [pc, #548]	; (80016bc <main+0x2a8>)
 8001496:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 8001498:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800149c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80014a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a4:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 80014a6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80014ae:	4a83      	ldr	r2, [pc, #524]	; (80016bc <main+0x2a8>)
 80014b0:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 80014b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80014ba:	2201      	movs	r2, #1
 80014bc:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 80014be:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80014c6:	4a7d      	ldr	r2, [pc, #500]	; (80016bc <main+0x2a8>)
 80014c8:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 80014ca:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 80014d6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014da:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80014de:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80014e2:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 80014e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80014ec:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80014f0:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 80014f2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80014f6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80014fa:	4a71      	ldr	r2, [pc, #452]	; (80016c0 <main+0x2ac>)
 80014fc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	loraRx.spi = &hspi1;
 8001500:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001504:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001508:	4a6d      	ldr	r2, [pc, #436]	; (80016c0 <main+0x2ac>)
 800150a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2101      	movs	r1, #1
 8001512:	486a      	ldr	r0, [pc, #424]	; (80016bc <main+0x2a8>)
 8001514:	f001 fe67 	bl	80031e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2102      	movs	r1, #2
 800151c:	4867      	ldr	r0, [pc, #412]	; (80016bc <main+0x2a8>)
 800151e:	f001 fe62 	bl	80031e6 <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001522:	2101      	movs	r1, #1
 8001524:	4866      	ldr	r0, [pc, #408]	; (80016c0 <main+0x2ac>)
 8001526:	f7fe ff9f 	bl	8000468 <readRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001532:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001536:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 800153a:	2101      	movs	r1, #1
 800153c:	4860      	ldr	r0, [pc, #384]	; (80016c0 <main+0x2ac>)
 800153e:	f7fe ff93 	bl	8000468 <readRegister>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800154a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800154e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraTx.status = UNKNOW;
 8001552:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001556:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	loraRx.status = UNKNOW;
 8001560:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001564:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TX_MODE = true;
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <main+0x2b0>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
	RX_MODE = false;
 8001574:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <main+0x2b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	memset(loraRx.buffer, 0, SX1278_MAX_PACKET);
 800157a:	463b      	mov	r3, r7
 800157c:	3325      	adds	r3, #37	; 0x25
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f003 ff37 	bl	80053f8 <memset>
	memset(loraTx.buffer, 0, SX1278_MAX_PACKET);
 800158a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800158e:	3325      	adds	r3, #37	; 0x25
 8001590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f003 ff2e 	bl	80053f8 <memset>
	loraRx.len = 0;
 800159c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015a0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80015a4:	2200      	movs	r2, #0
 80015a6:	755a      	strb	r2, [r3, #21]
	loraTx.len = 0;
 80015a8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80015ac:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015b0:	2200      	movs	r2, #0
 80015b2:	755a      	strb	r2, [r3, #21]
	int counter = HAL_GetTick();
 80015b4:	f001 f862 	bl	800267c <HAL_GetTick>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int change = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int master;
	int valueTx = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int valueRx = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2025      	movs	r0, #37	; 0x25
 80015d6:	f001 fb68 	bl	8002caa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015da:	2025      	movs	r0, #37	; 0x25
 80015dc:	f001 fb81 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	493a      	ldr	r1, [pc, #232]	; (80016cc <main+0x2b8>)
 80015e4:	483a      	ldr	r0, [pc, #232]	; (80016d0 <main+0x2bc>)
 80015e6:	f003 fa76 	bl	8004ad6 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80015ea:	2108      	movs	r1, #8
 80015ec:	4833      	ldr	r0, [pc, #204]	; (80016bc <main+0x2a8>)
 80015ee:	f001 fde3 	bl	80031b8 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

		if (master == 1) {
 80015f8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d118      	bne.n	8001632 <main+0x21e>
			valueRx = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			TX_MODE = true;
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <main+0x2b0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
			RX_MODE = false;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <main+0x2b4>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
			valueTx += 1;
 8001612:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001616:	3301      	adds	r3, #1
 8001618:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
			if (valueTx == 1) {
 800161c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <main+0x21e>
				loraTx.status = UNKNOW;
 8001624:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001628:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		if (master == 0) {
 8001632:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <main+0x258>
			valueTx = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
			TX_MODE = false;
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <main+0x2b0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
			RX_MODE = true;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <main+0x2b4>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
			valueRx += 1;
 800164c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001650:	3301      	adds	r3, #1
 8001652:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			if (valueRx == 1) {
 8001656:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <main+0x258>
				loraRx.status = UNKNOW;
 800165e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001662:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}

		//rs485Uart1Decode(&rs485, &uart1, &loraRx);
		if (uart1.len > 0) {
 800166c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001670:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001674:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02b      	beq.n	80016d4 <main+0x2c0>
			rs485.len = uart1.len;
 800167c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001680:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001684:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001688:	f887 3381 	strb.w	r3, [r7, #897]	; 0x381
			memcpy(rs485.buffer, uart1.rxBuffer, uart1.len);
 800168c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001690:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001694:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001698:	461a      	mov	r2, r3
 800169a:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 800169e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80016a2:	3302      	adds	r3, #2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fe99 	bl	80053dc <memcpy>
 80016aa:	e030      	b.n	800170e <main+0x2fa>
 80016ac:	20000244 	.word	0x20000244
 80016b0:	2000023c 	.word	0x2000023c
 80016b4:	20000240 	.word	0x20000240
 80016b8:	2000024c 	.word	0x2000024c
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	20000118 	.word	0x20000118
 80016c4:	20000254 	.word	0x20000254
 80016c8:	20000255 	.word	0x20000255
 80016cc:	20000248 	.word	0x20000248
 80016d0:	20000170 	.word	0x20000170

		} else if (loraRx.len > 0) {
 80016d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80016d8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80016dc:	7d5b      	ldrb	r3, [r3, #21]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <main+0x2fa>
			rs485.len = loraRx.len;
 80016e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80016e6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80016ea:	7d5b      	ldrb	r3, [r3, #21]
 80016ec:	f887 3381 	strb.w	r3, [r7, #897]	; 0x381
			memcpy(rs485.buffer, loraRx.buffer, loraRx.len);
 80016f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80016f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80016f8:	7d5b      	ldrb	r3, [r3, #21]
 80016fa:	461a      	mov	r2, r3
 80016fc:	463b      	mov	r3, r7
 80016fe:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001702:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001706:	3302      	adds	r3, #2
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fe67 	bl	80053dc <memcpy>
		}

		if (rs485.len > 0) {
 800170e:	f897 3381 	ldrb.w	r3, [r7, #897]	; 0x381
 8001712:	2b00      	cmp	r3, #0
 8001714:	d021      	beq.n	800175a <main+0x346>
			checkBuffer(&rs485);
 8001716:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fbfe 	bl	8001f1c <checkBuffer>
			if (rs485.status == DATA_OK) {
 8001720:	f897 33e6 	ldrb.w	r3, [r7, #998]	; 0x3e6
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <main+0x346>
				rs485.cmd = rs485.buffer[3];
 8001728:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 800172c:	f887 3380 	strb.w	r3, [r7, #896]	; 0x380
				rs485.status = WAITING;
 8001730:	2308      	movs	r3, #8
 8001732:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
				cleanRxBuffer(&uart1);
 8001736:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fefa 	bl	8002534 <cleanRxBuffer>
 8001740:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001744:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				memset(loraRx.buffer, 0, sizeof(loraRx.len));
				loraRx.len = 0;
 800174e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001752:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001756:	2200      	movs	r2, #0
 8001758:	755a      	strb	r2, [r3, #21]
			}
		}
		printStatus(&uart1, rs485.status);
 800175a:	f897 23e6 	ldrb.w	r2, [r7, #998]	; 0x3e6
 800175e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe1f 	bl	80013a8 <printStatus>

		// validar loraRx frame
		modeRs485Update(&huart1, &rs485, &loraRx);
 800176a:	463a      	mov	r2, r7
 800176c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8001770:	4619      	mov	r1, r3
 8001772:	4850      	ldr	r0, [pc, #320]	; (80018b4 <main+0x4a0>)
 8001774:	f7ff fdf0 	bl	8001358 <modeRs485Update>

		if (rs485.cmd == QUERY_PARAMETERS_VLAD) { //cmd = 11
 8001778:	f897 3380 	ldrb.w	r3, [r7, #896]	; 0x380
 800177c:	2b11      	cmp	r3, #17
 800177e:	d136      	bne.n	80017ee <main+0x3da>
			loraTx.len = rs485.len;
 8001780:	f897 2381 	ldrb.w	r2, [r7, #897]	; 0x381
 8001784:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001788:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800178c:	755a      	strb	r2, [r3, #21]
			memcpy(loraTx.buffer, rs485.buffer, loraTx.len);
 800178e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001792:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001796:	7d5b      	ldrb	r3, [r3, #21]
 8001798:	461a      	mov	r2, r3
 800179a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800179e:	1c99      	adds	r1, r3, #2
 80017a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80017a4:	3325      	adds	r3, #37	; 0x25
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 fe18 	bl	80053dc <memcpy>
			loraTx.status = UNKNOW;
 80017ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80017b0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			transmit(&loraTx);
 80017ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa30 	bl	8000c24 <transmit>
			loraTx.status = UNKNOW;
 80017c4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80017c8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			rs485.cmd = NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3380 	strb.w	r3, [r7, #896]	; 0x380
			memset(rs485.buffer, 0, sizeof(rs485.buffer));
 80017d8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80017dc:	3302      	adds	r3, #2
 80017de:	2264      	movs	r2, #100	; 0x64
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fe08 	bl	80053f8 <memset>
			rs485.len = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3381 	strb.w	r3, [r7, #897]	; 0x381
		}

		if (TX_MODE) {
 80017ee:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <main+0x4a4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <main+0x42c>
			RX_MODE_OFF_LED();
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <main+0x4a8>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a30      	ldr	r2, [pc, #192]	; (80018bc <main+0x4a8>)
 80017fc:	f023 0308 	bic.w	r3, r3, #8
 8001800:	60d3      	str	r3, [r2, #12]
			TX_MODE_ON_LED();
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <main+0x4a8>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <main+0x4a8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	60d3      	str	r3, [r2, #12]
			if (HAL_GetTick() - counter > 10000) {
 800180e:	f000 ff35 	bl	800267c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f242 7210 	movw	r2, #10000	; 0x2710
 800181e:	4293      	cmp	r3, r2
 8001820:	d90e      	bls.n	8001840 <main+0x42c>
				counter = HAL_GetTick();
 8001822:	f000 ff2b 	bl	800267c <HAL_GetTick>
 8001826:	4603      	mov	r3, r0
 8001828:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
				transmit(&loraTx);
 800182c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f9f7 	bl	8000c24 <transmit>
				change += 1;
 8001836:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800183a:	3301      	adds	r3, #1
 800183c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
				 change = 0;
				 loraTx.status = UNKNOW;
				 }*/
			}
		}
		if (RX_MODE) {
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <main+0x4ac>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d02e      	beq.n	80018a6 <main+0x492>
			TX_MODE_OFF_LED();
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <main+0x4a8>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <main+0x4a8>)
 800184e:	f023 0310 	bic.w	r3, r3, #16
 8001852:	60d3      	str	r3, [r2, #12]
			RX_MODE_ON_LED();
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <main+0x4a8>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <main+0x4a8>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	60d3      	str	r3, [r2, #12]
			read(&huart1, &loraRx);
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <main+0x4a0>)
 8001866:	f7ff fd05 	bl	8001274 <read>

			rs485.len = loraRx.len;
 800186a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800186e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001872:	7d5b      	ldrb	r3, [r3, #21]
 8001874:	f887 3381 	strb.w	r3, [r7, #897]	; 0x381
			memcpy(rs485.buffer, loraRx.buffer, loraRx.len);
 8001878:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800187c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001880:	7d5b      	ldrb	r3, [r3, #21]
 8001882:	461a      	mov	r2, r3
 8001884:	463b      	mov	r3, r7
 8001886:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800188a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800188e:	3302      	adds	r3, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fda3 	bl	80053dc <memcpy>
			rs485.status = CHECK_LORA_DATA;
 8001896:	230a      	movs	r3, #10
 8001898:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
			change += 1;
 800189c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80018a0:	3301      	adds	r3, #1
 80018a2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			 loraRx.status = UNKNOW;
			 }*/

		}

		led_enable_kalive(&led);
 80018a6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f804 	bl	80008b8 <led_enable_kalive>
		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80018b0:	e69b      	b.n	80015ea <main+0x1d6>
 80018b2:	bf00      	nop
 80018b4:	20000170 	.word	0x20000170
 80018b8:	20000254 	.word	0x20000254
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	20000255 	.word	0x20000255

080018c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	; 0x50
 80018c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ce:	2228      	movs	r2, #40	; 0x28
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fd90 	bl	80053f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001902:	2301      	movs	r3, #1
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001910:	2300      	movs	r3, #0
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fdc1 	bl	80034a0 <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0x64>
		Error_Handler();
 8001924:	f000 f9b4 	bl	8001c90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001928:	230f      	movs	r3, #15
 800192a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001938:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f002 f82d 	bl	80039a4 <HAL_RCC_ClockConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x90>
		Error_Handler();
 8001950:	f000 f99e 	bl	8001c90 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f9b8 	bl	8003cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xaa>
		Error_Handler();
 800196a:	f000 f991 	bl	8001c90 <Error_Handler>
	}
}
 800196e:	bf00      	nop
 8001970:	3750      	adds	r7, #80	; 0x50
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <MX_ADC1_Init+0x74>)
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <MX_ADC1_Init+0x78>)
 800198c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_ADC1_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_ADC1_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_ADC1_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_ADC1_Init+0x74>)
 80019a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019a6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_ADC1_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_ADC1_Init+0x74>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_ADC1_Init+0x74>)
 80019b6:	f000 fe8f 	bl	80026d8 <HAL_ADC_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80019c0:	f000 f966 	bl	8001c90 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_ADC1_Init+0x74>)
 80019d6:	f000 ff57 	bl	8002888 <HAL_ADC_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80019e0:	f000 f956 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000008c 	.word	0x2000008c
 80019f0:	40012400 	.word	0x40012400

080019f4 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_CRC_Init+0x20>)
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <MX_CRC_Init+0x24>)
 80019fc:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_CRC_Init+0x20>)
 8001a00:	f001 f989 	bl	8002d16 <HAL_CRC_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_CRC_Init+0x1a>
		Error_Handler();
 8001a0a:	f000 f941 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000bc 	.word	0x200000bc
 8001a18:	40023000 	.word	0x40023000

08001a1c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a22:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <MX_I2C1_Init+0x54>)
 8001a24:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_I2C1_Init+0x58>)
 8001a2a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_I2C1_Init+0x50>)
 8001a5a:	f001 fbdd 	bl	8003218 <HAL_I2C_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a64:	f000 f914 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000c4 	.word	0x200000c4
 8001a70:	40005400 	.word	0x40005400
 8001a74:	000186a0 	.word	0x000186a0

08001a78 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <MX_SPI1_Init+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a88:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aac:	2218      	movs	r2, #24
 8001aae:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI1_Init+0x64>)
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <MX_SPI1_Init+0x64>)
 8001aca:	f002 f9b9 	bl	8003e40 <HAL_SPI_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001ad4:	f000 f8dc 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000118 	.word	0x20000118
 8001ae0:	40013000 	.word	0x40013000

08001ae4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <MX_USART1_UART_Init+0x50>)
 8001aec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_USART1_UART_Init+0x4c>)
 8001b1c:	f002 fefc 	bl	8004918 <HAL_UART_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001b26:	f000 f8b3 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000170 	.word	0x20000170
 8001b34:	40013800 	.word	0x40013800

08001b38 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_USART2_UART_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f002 fed2 	bl	8004918 <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001b7a:	f000 f889 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200001b4 	.word	0x200001b4
 8001b88:	40004400 	.word	0x40004400

08001b8c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_USART3_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART3_UART_Init+0x4c>)
 8001bc4:	f002 fea8 	bl	8004918 <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001bce:	f000 f85f 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200001f8 	.word	0x200001f8
 8001bdc:	40004800 	.word	0x40004800

08001be0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_GPIO_Init+0xa8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f247 3133 	movw	r1, #29491	; 0x7333
 8001c42:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_GPIO_Init+0xac>)
 8001c44:	f001 facf 	bl	80031e6 <HAL_GPIO_WritePin>
					| BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED2_Pin LED1_Pin RS485_DE_Pin
	 BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 8001c48:	f247 3333 	movw	r3, #29491	; 0x7333
 8001c4c:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <MX_GPIO_Init+0xac>)
 8001c62:	f001 f925 	bl	8002eb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_Pin */
	GPIO_InitStruct.Pin = MODE_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_GPIO_Init+0xac>)
 8001c7a:	f001 f919 	bl	8002eb0 <HAL_GPIO_Init>

}
 8001c7e:	bf00      	nop
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010c00 	.word	0x40010c00

08001c90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>

08001c9a <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

void vladInit(Function_t funcion, Id_t id, Vlad_t *vlad) {
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	603a      	str	r2, [r7, #0]
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	71bb      	strb	r3, [r7, #6]
	vlad->agc150m = 0;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	801a      	strh	r2, [r3, #0]
	vlad->ref150m = 0;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	805a      	strh	r2, [r3, #2]
	vlad->level150m = 0;  // downlink 152 mhz
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	809a      	strh	r2, [r3, #4]
	vlad->agc170m = 0;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	80da      	strh	r2, [r3, #6]
	vlad->ref170m = 0;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	811a      	strh	r2, [r3, #8]
	vlad->level170m = 0; //uplink 172 mhz
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	815a      	strh	r2, [r3, #10]
	vlad->tone_level = 0;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	819a      	strh	r2, [r3, #12]
	vlad->v_5v = 0;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	81da      	strh	r2, [r3, #14]
	vlad->vin = 0;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	821a      	strh	r2, [r3, #16]
	vlad->current = 0;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	825a      	strh	r2, [r3, #18]
	vlad->v_5v_real = 0;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	615a      	str	r2, [r3, #20]
	vlad->vin_real = 0;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
	vlad->current_real = 0;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
	vlad->uc_temperature = 0;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
	vlad->remote_attenuation = 0;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	vlad->is_remote_attenuation = 0;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    vlad->is_attenuation_updated = 0;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	vlad->calc_en = 0;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	vlad->function = funcion;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	vlad->id = id;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	79ba      	ldrb	r2, [r7, #6]
 8001d30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	vlad->vin2 = 0;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
	vlad->current2 = 0;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	859a      	strh	r2, [r3, #44]	; 0x2c
	vlad->current_real2 = 0;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	85da      	strh	r2, [r3, #46]	; 0x2e
	vlad->tone_level2 = 0;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001d62:	f241 0321 	movw	r3, #4129	; 0x1021
 8001d66:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001d68:	2300      	movs	r3, #0
 8001d6a:	81bb      	strh	r3, [r7, #12]

	for (b = 0; b < buff_len; b++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e025      	b.n	8001dbe <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	89bb      	ldrh	r3, [r7, #12]
 8001d82:	4053      	eors	r3, r2
 8001d84:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	73bb      	strb	r3, [r7, #14]
 8001d8a:	e012      	b.n	8001db2 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001d8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da08      	bge.n	8001da6 <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001d94:	89bb      	ldrh	r3, [r7, #12]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d9e:	4053      	eors	r3, r2
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	81bb      	strh	r3, [r7, #12]
 8001da4:	e002      	b.n	8001dac <crc_get+0x56>
			else
				crc <<= 1;
 8001da6:	89bb      	ldrh	r3, [r7, #12]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73bb      	strb	r3, [r7, #14]
 8001db2:	7bbb      	ldrb	r3, [r7, #14]
 8001db4:	2b07      	cmp	r3, #7
 8001db6:	d9e9      	bls.n	8001d8c <crc_get+0x36>
	for (b = 0; b < buff_len; b++) {
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3d5      	bcc.n	8001d72 <crc_get+0x1c>
		}
	}
	return crc;
 8001dc6:	89bb      	ldrh	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
	...

08001dd4 <rs485Init>:

void rs485Init(RS485_t *r) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2207      	movs	r2, #7
 8001de6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	r->cmd = NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
	memset(r->buffer, 0, 100);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3302      	adds	r3, #2
 8001df4:	2264      	movs	r2, #100	; 0x64
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fafd 	bl	80053f8 <memset>
	/* PB8 DE485 as output  */
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <rs485Init+0x4c>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <rs485Init+0x4c>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <rs485Init+0x4c>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <rs485Init+0x4c>)
 8001e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e14:	60d3      	str	r3, [r2, #12]

}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <check_valid_module>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t check_valid_module(uint8_t *frame, uint8_t lenght) {
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
	if (frame[1] == VLAD) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d11a      	bne.n	8001e70 <check_valid_module+0x4c>
		if (frame[2] == ID1) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d113      	bne.n	8001e6c <check_valid_module+0x48>
			for (int i = 3; i < lenght; i++)
 8001e44:	2303      	movs	r3, #3
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e00b      	b.n	8001e62 <check_valid_module+0x3e>
				if (frame[i] == LTEL_END_MARK)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	227f      	movs	r2, #127	; 0x7f
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <check_valid_module+0x38>
					return VALID_MODULE;
 8001e58:	2309      	movs	r3, #9
 8001e5a:	e00c      	b.n	8001e76 <check_valid_module+0x52>
			for (int i = 3; i < lenght; i++)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbef      	blt.n	8001e4a <check_valid_module+0x26>
 8001e6a:	e003      	b.n	8001e74 <check_valid_module+0x50>
		} else
			return WRONG_MODULE_ID;
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	e002      	b.n	8001e76 <check_valid_module+0x52>
	} else
		return WRONG_MODULE_FUNCTION;
 8001e70:	2304      	movs	r3, #4
 8001e72:	e000      	b.n	8001e76 <check_valid_module+0x52>
	return WRONG_MODULE_FUNCTION;
 8001e74:	2304      	movs	r3, #4
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <check_frame>:

Rs485_status_t check_frame(uint8_t *frame, uint8_t lenght) {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d912      	bls.n	8001eb8 <check_frame+0x38>
		if (frame[0] == LTEL_START_MARK) {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	227e      	movs	r2, #126	; 0x7e
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10b      	bne.n	8001eb4 <check_frame+0x34>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	227f      	movs	r2, #127	; 0x7f
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <check_frame+0x30>
				return VALID_FRAME;
 8001eac:	2302      	movs	r3, #2
 8001eae:	e004      	b.n	8001eba <check_frame+0x3a>
			else
				return START_READING;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e002      	b.n	8001eba <check_frame+0x3a>
		} else
			return NOT_VALID_FRAME;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e000      	b.n	8001eba <check_frame+0x3a>
	} else

		return WAITING;
 8001eb8:	2308      	movs	r3, #8
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <check_CRC_module>:

Rs485_status_t check_CRC_module(uint8_t *frame, uint8_t len) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]

	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = frame[(len - 2)] << 8;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	3b02      	subs	r3, #2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	60fb      	str	r3, [r7, #12]
	crc_save |= frame[(len - 3)];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(frame[1]), (len - 4));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff ff2a 	bl	8001d56 <crc_get>
 8001f02:	4603      	mov	r3, r0
 8001f04:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d101      	bne.n	8001f12 <check_CRC_module+0x4e>
		return DATA_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <check_CRC_module+0x50>
	return CRC_ERROR;
 8001f12:	2306      	movs	r3, #6
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <checkBuffer>:

Rs485_status_t checkBuffer(RS485_t *rs485){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	rs485->status = check_frame(rs485->buffer,rs485->len);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f7ff ffa6 	bl	8001e80 <check_frame>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_FRAME))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d003      	beq.n	8001f50 <checkBuffer+0x34>
		return rs485->status;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f4e:	e02e      	b.n	8001fae <checkBuffer+0x92>
	rs485->status = check_valid_module(rs485->buffer, rs485->len);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1c9a      	adds	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f7ff ff62 	bl	8001e24 <check_valid_module>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_MODULE))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d003      	beq.n	8001f7c <checkBuffer+0x60>
		return rs485->status;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f7a:	e018      	b.n	8001fae <checkBuffer+0x92>
	rs485->status = check_CRC_module(rs485->buffer, rs485->len);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1c9a      	adds	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7ff ff9c 	bl	8001ec4 <check_CRC_module>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == DATA_OK))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <checkBuffer+0x8c>
		return rs485->status;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001fa6:	e002      	b.n	8001fae <checkBuffer+0x92>
	return rs485->status;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x5c>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x5c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_MspInit+0x60>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_MspInit+0x60>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000

0800201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_ADC_MspInit+0x6c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d121      	bne.n	8002080 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_ADC_MspInit+0x70>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_ADC_MspInit+0x70>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_ADC_MspInit+0x70>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_ADC_MspInit+0x70>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_ADC_MspInit+0x70>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_ADC_MspInit+0x70>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800206c:	2313      	movs	r3, #19
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002070:	2303      	movs	r3, #3
 8002072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_ADC_MspInit+0x74>)
 800207c:	f000 ff18 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40012400 	.word	0x40012400
 800208c:	40021000 	.word	0x40021000
 8002090:	40010800 	.word	0x40010800

08002094 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_CRC_MspInit+0x34>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10b      	bne.n	80020be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_CRC_MspInit+0x38>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_CRC_MspInit+0x38>)
 80020ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b0:	6153      	str	r3, [r2, #20]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_CRC_MspInit+0x38>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40023000 	.word	0x40023000
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_I2C_MspInit+0x70>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d123      	bne.n	8002138 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_I2C_MspInit+0x74>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a13      	ldr	r2, [pc, #76]	; (8002144 <HAL_I2C_MspInit+0x74>)
 80020f6:	f043 0308 	orr.w	r3, r3, #8
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_I2C_MspInit+0x74>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210c:	2312      	movs	r3, #18
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <HAL_I2C_MspInit+0x78>)
 800211c:	f000 fec8 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_I2C_MspInit+0x74>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_I2C_MspInit+0x74>)
 8002126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_I2C_MspInit+0x74>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40005400 	.word	0x40005400
 8002144:	40021000 	.word	0x40021000
 8002148:	40010c00 	.word	0x40010c00

0800214c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_SPI_MspInit+0x88>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12f      	bne.n	80021cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_SPI_MspInit+0x8c>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800219c:	23a0      	movs	r3, #160	; 0xa0
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	480b      	ldr	r0, [pc, #44]	; (80021dc <HAL_SPI_MspInit+0x90>)
 80021b0:	f000 fe7e 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021b4:	2340      	movs	r3, #64	; 0x40
 80021b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4619      	mov	r1, r3
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <HAL_SPI_MspInit+0x90>)
 80021c8:	f000 fe72 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013000 	.word	0x40013000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010800 	.word	0x40010800

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_UART_MspInit+0x178>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d13a      	bne.n	8002276 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002200:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a55      	ldr	r2, [pc, #340]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_UART_MspInit+0x17c>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_UART_MspInit+0x17c>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_UART_MspInit+0x17c>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0320 	add.w	r3, r7, #32
 8002242:	4619      	mov	r1, r3
 8002244:	4846      	ldr	r0, [pc, #280]	; (8002360 <HAL_UART_MspInit+0x180>)
 8002246:	f000 fe33 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 800224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 0320 	add.w	r3, r7, #32
 800225c:	4619      	mov	r1, r3
 800225e:	4840      	ldr	r0, [pc, #256]	; (8002360 <HAL_UART_MspInit+0x180>)
 8002260:	f000 fe26 	bl	8002eb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2025      	movs	r0, #37	; 0x25
 800226a:	f000 fd1e 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800226e:	2025      	movs	r0, #37	; 0x25
 8002270:	f000 fd37 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002274:	e06c      	b.n	8002350 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_UART_MspInit+0x184>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d130      	bne.n	80022e2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a35      	ldr	r2, [pc, #212]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b33      	ldr	r3, [pc, #204]	; (800235c <HAL_UART_MspInit+0x17c>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_UART_MspInit+0x17c>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_UART_MspInit+0x17c>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_UART_MspInit+0x17c>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022b0:	2304      	movs	r3, #4
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0320 	add.w	r3, r7, #32
 80022c0:	4619      	mov	r1, r3
 80022c2:	4827      	ldr	r0, [pc, #156]	; (8002360 <HAL_UART_MspInit+0x180>)
 80022c4:	f000 fdf4 	bl	8002eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0320 	add.w	r3, r7, #32
 80022d8:	4619      	mov	r1, r3
 80022da:	4821      	ldr	r0, [pc, #132]	; (8002360 <HAL_UART_MspInit+0x180>)
 80022dc:	f000 fde8 	bl	8002eb0 <HAL_GPIO_Init>
}
 80022e0:	e036      	b.n	8002350 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <HAL_UART_MspInit+0x188>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d131      	bne.n	8002350 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_UART_MspInit+0x17c>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_UART_MspInit+0x17c>)
 80022f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f6:	61d3      	str	r3, [r2, #28]
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_UART_MspInit+0x17c>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_UART_MspInit+0x17c>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_UART_MspInit+0x17c>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 800231c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 0320 	add.w	r3, r7, #32
 800232e:	4619      	mov	r1, r3
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <HAL_UART_MspInit+0x18c>)
 8002332:	f000 fdbd 	bl	8002eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	4619      	mov	r1, r3
 800234a:	4808      	ldr	r0, [pc, #32]	; (800236c <HAL_UART_MspInit+0x18c>)
 800234c:	f000 fdb0 	bl	8002eb0 <HAL_GPIO_Init>
}
 8002350:	bf00      	nop
 8002352:	3730      	adds	r7, #48	; 0x30
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40013800 	.word	0x40013800
 800235c:	40021000 	.word	0x40021000
 8002360:	40010800 	.word	0x40010800
 8002364:	40004400 	.word	0x40004400
 8002368:	40004800 	.word	0x40004800
 800236c:	40010c00 	.word	0x40010c00

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <NMI_Handler+0x4>

08002376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <MemManage_Handler+0x4>

08002382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler+0x4>

0800238e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b6:	f000 f94f 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <USART1_IRQHandler+0x10>)
 80023c6:	f002 fbb7 	bl	8004b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000170 	.word	0x20000170

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f002 ffc0 	bl	8005388 <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20005000 	.word	0x20005000
 8002434:	00000400 	.word	0x00000400
 8002438:	20000258 	.word	0x20000258
 800243c:	20000270 	.word	0x20000270

08002440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <cleanByTimeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  cleanByTimeout(UART1_t* uart1, const char* str){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8002456:	f000 f911 	bl	800267c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d914      	bls.n	8002496 <cleanByTimeout+0x4a>
			uart1_send_str((char*)str);
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	f000 f845 	bl	80024fc <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8002472:	480b      	ldr	r0, [pc, #44]	; (80024a0 <cleanByTimeout+0x54>)
 8002474:	f000 f842 	bl	80024fc <uart1_send_str>
			if(strlen(str)>0)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <cleanByTimeout+0x3a>
				cleanTxBuffer(uart1);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f869 	bl	8002558 <cleanTxBuffer>
			uart1->timeout = HAL_GetTick();
 8002486:	f000 f8f9 	bl	800267c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			return 1;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <cleanByTimeout+0x4c>
		}
		return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0800604c 	.word	0x0800604c

080024a4 <uart1_write>:

	/* set the destination buffer */
	/*set the source buffer */
}

void uart1_write(char ch) {
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <uart1_write+0x50>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <uart1_write+0x50>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 80024ba:	bf00      	nop
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <uart1_write+0x54>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f9      	beq.n	80024bc <uart1_write+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <uart1_write+0x54>)
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 80024ce:	bf00      	nop
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <uart1_write+0x54>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f9      	beq.n	80024d0 <uart1_write+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <uart1_write+0x50>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <uart1_write+0x50>)
 80024e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010c00 	.word	0x40010c00
 80024f8:	40013800 	.word	0x40013800

080024fc <uart1_send_str>:
		u->len = 0;
	}
	u->rxBuffer[u->len++] = uart1_1byte_read();
}

void uart1_send_str(char *str) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e009      	b.n	800251e <uart1_send_str+0x22>
		uart1_write(str[i]);
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ffc6 	bl	80024a4 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	3301      	adds	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ef      	bne.n	800250a <uart1_send_str+0xe>
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <cleanRxBuffer>:
			str[i] = (char) '\0';
		}
	}
}

void cleanRxBuffer(UART1_t *u) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	memset(u->rxBuffer, 0, sizeof(u->len));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f002 ff58 	bl	80053f8 <memset>
	u->len = 0;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <cleanTxBuffer>:

void cleanTxBuffer(UART1_t *u) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	memset(u->txBuffer, 0, sizeof(u->len));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3364      	adds	r3, #100	; 0x64
 8002564:	2201      	movs	r2, #1
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f002 ff45 	bl	80053f8 <memset>
	u->len = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002582:	490d      	ldr	r1, [pc, #52]	; (80025b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002588:	e002      	b.n	8002590 <LoopCopyDataInit>

0800258a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800258c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258e:	3304      	adds	r3, #4

08002590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002594:	d3f9      	bcc.n	800258a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002598:	4c0a      	ldr	r4, [pc, #40]	; (80025c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800259c:	e001      	b.n	80025a2 <LoopFillZerobss>

0800259e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a0:	3204      	adds	r2, #4

080025a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a4:	d3fb      	bcc.n	800259e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025a6:	f7ff ff4b 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025aa:	f002 fef3 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ae:	f7fe ff31 	bl	8001414 <main>
  bx lr
 80025b2:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025bc:	08006124 	.word	0x08006124
  ldr r2, =_sbss
 80025c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025c4:	20000270 	.word	0x20000270

080025c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC1_2_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_Init+0x28>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x28>)
 80025d6:	f043 0310 	orr.w	r3, r3, #16
 80025da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 fb59 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f000 f808 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fce6 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb71 	bl	8002cfe <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d80a      	bhi.n	8002642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f000 fb39 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_InitTick+0x5c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000000 	.word	0x20000000
 8002650:	20000008 	.word	0x20000008
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_IncTick+0x1c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_IncTick+0x20>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_IncTick+0x20>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000008 	.word	0x20000008
 8002678:	2000025c 	.word	0x2000025c

0800267c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <HAL_GetTick+0x10>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	2000025c 	.word	0x2000025c

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff fff0 	bl	800267c <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffe0 	bl	800267c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008

080026d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0be      	b.n	8002878 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fc80 	bl	800201c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f9ab 	bl	8002a78 <ADC_ConversionStop_Disable>
 8002722:	4603      	mov	r3, r0
 8002724:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 8099 	bne.w	8002866 <HAL_ADC_Init+0x18e>
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8095 	bne.w	8002866 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002744:	f023 0302 	bic.w	r3, r3, #2
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002758:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7b1b      	ldrb	r3, [r3, #12]
 800275e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002760:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4313      	orrs	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002770:	d003      	beq.n	800277a <HAL_ADC_Init+0xa2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d102      	bne.n	8002780 <HAL_ADC_Init+0xa8>
 800277a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277e:	e000      	b.n	8002782 <HAL_ADC_Init+0xaa>
 8002780:	2300      	movs	r3, #0
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7d1b      	ldrb	r3, [r3, #20]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d119      	bne.n	80027c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7b1b      	ldrb	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	3b01      	subs	r3, #1
 800279e:	035a      	lsls	r2, r3, #13
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e00b      	b.n	80027c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_ADC_Init+0x1a8>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d003      	beq.n	80027fe <HAL_ADC_Init+0x126>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d104      	bne.n	8002808 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	3b01      	subs	r3, #1
 8002804:	051b      	lsls	r3, r3, #20
 8002806:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	430a      	orrs	r2, r1
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_ADC_Init+0x1ac>)
 8002824:	4013      	ands	r3, r2
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002842:	e018      	b.n	8002876 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f023 0312 	bic.w	r3, r3, #18
 800284c:	f043 0210 	orr.w	r2, r3, #16
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002864:	e007      	b.n	8002876 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f043 0210 	orr.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffe1f7fd 	.word	0xffe1f7fd
 8002884:	ff1f0efe 	.word	0xff1f0efe

08002888 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x20>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0dc      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x1da>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d81c      	bhi.n	80028f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b05      	subs	r3, #5
 80028ca:	221f      	movs	r2, #31
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4019      	ands	r1, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b05      	subs	r3, #5
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
 80028f0:	e03c      	b.n	800296c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d81c      	bhi.n	8002934 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3b23      	subs	r3, #35	; 0x23
 800290c:	221f      	movs	r2, #31
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	4019      	ands	r1, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3b23      	subs	r3, #35	; 0x23
 8002926:	fa00 f203 	lsl.w	r2, r0, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
 8002932:	e01b      	b.n	800296c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3b41      	subs	r3, #65	; 0x41
 8002946:	221f      	movs	r2, #31
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b41      	subs	r3, #65	; 0x41
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b09      	cmp	r3, #9
 8002972:	d91c      	bls.n	80029ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68d9      	ldr	r1, [r3, #12]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	3b1e      	subs	r3, #30
 8002986:	2207      	movs	r2, #7
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4019      	ands	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6898      	ldr	r0, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	3b1e      	subs	r3, #30
 80029a0:	fa00 f203 	lsl.w	r2, r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	e019      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4019      	ands	r1, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6898      	ldr	r0, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	fa00 f203 	lsl.w	r2, r0, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d003      	beq.n	80029f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ee:	2b11      	cmp	r3, #17
 80029f0:	d132      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_ADC_ConfigChannel+0x1e4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d125      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d126      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d11a      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	0c9a      	lsrs	r2, r3, #18
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x1b2>
 8002a46:	e007      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012400 	.word	0x40012400
 8002a70:	20000000 	.word	0x20000000
 8002a74:	431bde83 	.word	0x431bde83

08002a78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d12e      	bne.n	8002af0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa2:	f7ff fdeb 	bl	800267c <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aa8:	e01b      	b.n	8002ae2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aaa:	f7ff fde7 	bl	800267c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d914      	bls.n	8002ae2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10d      	bne.n	8002ae2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f043 0210 	orr.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d0dc      	beq.n	8002aaa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <__NVIC_EnableIRQ+0x34>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff90 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff2d 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff42 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff90 	bl	8002bec <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5f 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff35 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e00e      	b.n	8002d46 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	795b      	ldrb	r3, [r3, #5]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff f9ab 	bl	8002094 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d008      	beq.n	8002d76 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e020      	b.n	8002db8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 020e 	bic.w	r2, r2, #14
 8002d84:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d005      	beq.n	8002de6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e051      	b.n	8002e8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 020e 	bic.w	r2, r2, #14
 8002df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_DMA_Abort_IT+0xd0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d029      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xa0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_DMA_Abort_IT+0xd4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d022      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x9c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_DMA_Abort_IT+0xd8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d01a      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x96>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <HAL_DMA_Abort_IT+0xdc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d012      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x90>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_DMA_Abort_IT+0xe0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00a      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x8a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_DMA_Abort_IT+0xe4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d102      	bne.n	8002e48 <HAL_DMA_Abort_IT+0x84>
 8002e42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e46:	e00e      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4c:	e00b      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e52:	e008      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e58:	e005      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5e:	e002      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e60:	2310      	movs	r3, #16
 8002e62:	e000      	b.n	8002e66 <HAL_DMA_Abort_IT+0xa2>
 8002e64:	2301      	movs	r3, #1
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_DMA_Abort_IT+0xe8>)
 8002e68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    } 
  }
  return status;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40020008 	.word	0x40020008
 8002e98:	4002001c 	.word	0x4002001c
 8002e9c:	40020030 	.word	0x40020030
 8002ea0:	40020044 	.word	0x40020044
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	4002006c 	.word	0x4002006c
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b08b      	sub	sp, #44	; 0x2c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	e169      	b.n	8003198 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8158 	bne.w	8003192 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a9a      	ldr	r2, [pc, #616]	; (8003150 <HAL_GPIO_Init+0x2a0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d05e      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <HAL_GPIO_Init+0x2a0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d875      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002ef2:	4a98      	ldr	r2, [pc, #608]	; (8003154 <HAL_GPIO_Init+0x2a4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d058      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002ef8:	4a96      	ldr	r2, [pc, #600]	; (8003154 <HAL_GPIO_Init+0x2a4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d86f      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002efe:	4a96      	ldr	r2, [pc, #600]	; (8003158 <HAL_GPIO_Init+0x2a8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d052      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f04:	4a94      	ldr	r2, [pc, #592]	; (8003158 <HAL_GPIO_Init+0x2a8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d869      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f0a:	4a94      	ldr	r2, [pc, #592]	; (800315c <HAL_GPIO_Init+0x2ac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04c      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f10:	4a92      	ldr	r2, [pc, #584]	; (800315c <HAL_GPIO_Init+0x2ac>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d863      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f16:	4a92      	ldr	r2, [pc, #584]	; (8003160 <HAL_GPIO_Init+0x2b0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d046      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
 8002f1c:	4a90      	ldr	r2, [pc, #576]	; (8003160 <HAL_GPIO_Init+0x2b0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d85d      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f22:	2b12      	cmp	r3, #18
 8002f24:	d82a      	bhi.n	8002f7c <HAL_GPIO_Init+0xcc>
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d859      	bhi.n	8002fde <HAL_GPIO_Init+0x12e>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_GPIO_Init+0x80>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002fab 	.word	0x08002fab
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002f97 	.word	0x08002f97
 8002f3c:	08002fd9 	.word	0x08002fd9
 8002f40:	08002fdf 	.word	0x08002fdf
 8002f44:	08002fdf 	.word	0x08002fdf
 8002f48:	08002fdf 	.word	0x08002fdf
 8002f4c:	08002fdf 	.word	0x08002fdf
 8002f50:	08002fdf 	.word	0x08002fdf
 8002f54:	08002fdf 	.word	0x08002fdf
 8002f58:	08002fdf 	.word	0x08002fdf
 8002f5c:	08002fdf 	.word	0x08002fdf
 8002f60:	08002fdf 	.word	0x08002fdf
 8002f64:	08002fdf 	.word	0x08002fdf
 8002f68:	08002fdf 	.word	0x08002fdf
 8002f6c:	08002fdf 	.word	0x08002fdf
 8002f70:	08002fdf 	.word	0x08002fdf
 8002f74:	08002f8d 	.word	0x08002f8d
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	4a79      	ldr	r2, [pc, #484]	; (8003164 <HAL_GPIO_Init+0x2b4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f82:	e02c      	b.n	8002fde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	623b      	str	r3, [r7, #32]
          break;
 8002f8a:	e029      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	3304      	adds	r3, #4
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e024      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e01f      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	623b      	str	r3, [r7, #32]
          break;
 8002fa8:	e01a      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	623b      	str	r3, [r7, #32]
          break;
 8002fb6:	e013      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	611a      	str	r2, [r3, #16]
          break;
 8002fca:	e009      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	615a      	str	r2, [r3, #20]
          break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	623b      	str	r3, [r7, #32]
          break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x130>
          break;
 8002fde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2bff      	cmp	r3, #255	; 0xff
 8002fe4:	d801      	bhi.n	8002fea <HAL_GPIO_Init+0x13a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	e001      	b.n	8002fee <HAL_GPIO_Init+0x13e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d802      	bhi.n	8002ffc <HAL_GPIO_Init+0x14c>
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	e002      	b.n	8003002 <HAL_GPIO_Init+0x152>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	3b08      	subs	r3, #8
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	210f      	movs	r1, #15
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	6a39      	ldr	r1, [r7, #32]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80b1 	beq.w	8003192 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003030:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_GPIO_Init+0x2b8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a4c      	ldr	r2, [pc, #304]	; (8003168 <HAL_GPIO_Init+0x2b8>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6193      	str	r3, [r2, #24]
 800303c:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_GPIO_Init+0x2b8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003048:	4a48      	ldr	r2, [pc, #288]	; (800316c <HAL_GPIO_Init+0x2bc>)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a40      	ldr	r2, [pc, #256]	; (8003170 <HAL_GPIO_Init+0x2c0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_GPIO_Init+0x1ec>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3f      	ldr	r2, [pc, #252]	; (8003174 <HAL_GPIO_Init+0x2c4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_GPIO_Init+0x1e8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3e      	ldr	r2, [pc, #248]	; (8003178 <HAL_GPIO_Init+0x2c8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <HAL_GPIO_Init+0x1e4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3d      	ldr	r2, [pc, #244]	; (800317c <HAL_GPIO_Init+0x2cc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_GPIO_Init+0x1e0>
 800308c:	2303      	movs	r3, #3
 800308e:	e006      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003090:	2304      	movs	r3, #4
 8003092:	e004      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003094:	2302      	movs	r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_GPIO_Init+0x1ee>
 800309c:	2300      	movs	r3, #0
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ae:	492f      	ldr	r1, [pc, #188]	; (800316c <HAL_GPIO_Init+0x2bc>)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	492c      	ldr	r1, [pc, #176]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e006      	b.n	80030e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	43db      	mvns	r3, r3
 80030de:	4928      	ldr	r1, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4922      	ldr	r1, [pc, #136]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	43db      	mvns	r3, r3
 8003106:	491e      	ldr	r1, [pc, #120]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003108:	4013      	ands	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	43db      	mvns	r3, r3
 800312e:	4914      	ldr	r1, [pc, #80]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003130:	4013      	ands	r3, r2
 8003132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d021      	beq.n	8003184 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_GPIO_Init+0x2d0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
 800314c:	e021      	b.n	8003192 <HAL_GPIO_Init+0x2e2>
 800314e:	bf00      	nop
 8003150:	10320000 	.word	0x10320000
 8003154:	10310000 	.word	0x10310000
 8003158:	10220000 	.word	0x10220000
 800315c:	10210000 	.word	0x10210000
 8003160:	10120000 	.word	0x10120000
 8003164:	10110000 	.word	0x10110000
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	40010800 	.word	0x40010800
 8003174:	40010c00 	.word	0x40010c00
 8003178:	40011000 	.word	0x40011000
 800317c:	40011400 	.word	0x40011400
 8003180:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_GPIO_Init+0x304>)
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	43db      	mvns	r3, r3
 800318c:	4909      	ldr	r1, [pc, #36]	; (80031b4 <HAL_GPIO_Init+0x304>)
 800318e:	4013      	ands	r3, r2
 8003190:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	3301      	adds	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f47f ae8e 	bne.w	8002ec4 <HAL_GPIO_Init+0x14>
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	372c      	adds	r7, #44	; 0x2c
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e001      	b.n	80031da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	807b      	strh	r3, [r7, #2]
 80031f2:	4613      	mov	r3, r2
 80031f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f6:	787b      	ldrb	r3, [r7, #1]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003202:	e003      	b.n	800320c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	041a      	lsls	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	611a      	str	r2, [r3, #16]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
	...

08003218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e12b      	b.n	8003482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe ff46 	bl	80020d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	; 0x24
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800327a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800327c:	f000 fce4 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8003280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a81      	ldr	r2, [pc, #516]	; (800348c <HAL_I2C_Init+0x274>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d807      	bhi.n	800329c <HAL_I2C_Init+0x84>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a80      	ldr	r2, [pc, #512]	; (8003490 <HAL_I2C_Init+0x278>)
 8003290:	4293      	cmp	r3, r2
 8003292:	bf94      	ite	ls
 8003294:	2301      	movls	r3, #1
 8003296:	2300      	movhi	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e006      	b.n	80032aa <HAL_I2C_Init+0x92>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a7d      	ldr	r2, [pc, #500]	; (8003494 <HAL_I2C_Init+0x27c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0e7      	b.n	8003482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a78      	ldr	r2, [pc, #480]	; (8003498 <HAL_I2C_Init+0x280>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9b      	lsrs	r3, r3, #18
 80032bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_I2C_Init+0x274>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d802      	bhi.n	80032ec <HAL_I2C_Init+0xd4>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3301      	adds	r3, #1
 80032ea:	e009      	b.n	8003300 <HAL_I2C_Init+0xe8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_I2C_Init+0x284>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	3301      	adds	r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	495c      	ldr	r1, [pc, #368]	; (800348c <HAL_I2C_Init+0x274>)
 800331c:	428b      	cmp	r3, r1
 800331e:	d819      	bhi.n	8003354 <HAL_I2C_Init+0x13c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e59      	subs	r1, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fbb1 f3f3 	udiv	r3, r1, r3
 800332e:	1c59      	adds	r1, r3, #1
 8003330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003334:	400b      	ands	r3, r1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_I2C_Init+0x138>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e59      	subs	r1, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fbb1 f3f3 	udiv	r3, r1, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334e:	e051      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003350:	2304      	movs	r3, #4
 8003352:	e04f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d111      	bne.n	8003380 <HAL_I2C_Init+0x168>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e012      	b.n	80033a6 <HAL_I2C_Init+0x18e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Init+0x196>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e022      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10e      	bne.n	80033d4 <HAL_I2C_Init+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e58      	subs	r0, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	440b      	add	r3, r1
 80033c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	e00f      	b.n	80033f4 <HAL_I2C_Init+0x1dc>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	0099      	lsls	r1, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	6809      	ldr	r1, [r1, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6911      	ldr	r1, [r2, #16]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68d2      	ldr	r2, [r2, #12]
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	000186a0 	.word	0x000186a0
 8003490:	001e847f 	.word	0x001e847f
 8003494:	003d08ff 	.word	0x003d08ff
 8003498:	431bde83 	.word	0x431bde83
 800349c:	10624dd3 	.word	0x10624dd3

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e272      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8087 	beq.w	80035ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c0:	4b92      	ldr	r3, [pc, #584]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d00c      	beq.n	80034e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034cc:	4b8f      	ldr	r3, [pc, #572]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d112      	bne.n	80034fe <HAL_RCC_OscConfig+0x5e>
 80034d8:	4b8c      	ldr	r3, [pc, #560]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d10b      	bne.n	80034fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d06c      	beq.n	80035cc <HAL_RCC_OscConfig+0x12c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d168      	bne.n	80035cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e24c      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x76>
 8003508:	4b80      	ldr	r3, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7f      	ldr	r2, [pc, #508]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	e02e      	b.n	8003574 <HAL_RCC_OscConfig+0xd4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x98>
 800351e:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a77      	ldr	r2, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xd4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0xbc>
 8003542:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b6f      	ldr	r3, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6e      	ldr	r2, [pc, #440]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xd4>
 800355c:	4b6b      	ldr	r3, [pc, #428]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a6a      	ldr	r2, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a67      	ldr	r2, [pc, #412]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff f87e 	bl	800267c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff f87a 	bl	800267c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e200      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xe4>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff f86a 	bl	800267c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7ff f866 	bl	800267c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1ec      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x10c>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035da:	4b4c      	ldr	r3, [pc, #304]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d11c      	bne.n	800362c <HAL_RCC_OscConfig+0x18c>
 80035f2:	4b46      	ldr	r3, [pc, #280]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x176>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1c0      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4939      	ldr	r1, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	e03a      	b.n	80036a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_OscConfig+0x270>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7ff f81f 	bl	800267c <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003642:	f7ff f81b 	bl	800267c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1a1      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4927      	ldr	r1, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCC_OscConfig+0x270>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fffe 	bl	800267c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003684:	f7fe fffa 	bl	800267c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e180      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03a      	beq.n	8003724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d019      	beq.n	80036ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe ffde 	bl	800267c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fe ffda 	bl	800267c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e160      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_RCC_OscConfig+0x26c>)
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f000 fad8 	bl	8003c98 <RCC_Delay>
 80036e8:	e01c      	b.n	8003724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_RCC_OscConfig+0x274>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7fe ffc4 	bl	800267c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f6:	e00f      	b.n	8003718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fe ffc0 	bl	800267c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d908      	bls.n	8003718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e146      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	42420000 	.word	0x42420000
 8003714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b92      	ldr	r3, [pc, #584]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e9      	bne.n	80036f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a6 	beq.w	800387e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4a87      	ldr	r2, [pc, #540]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	61d3      	str	r3, [r2, #28]
 800374e:	4b85      	ldr	r3, [pc, #532]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b82      	ldr	r3, [pc, #520]	; (8003968 <HAL_RCC_OscConfig+0x4c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376a:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <HAL_RCC_OscConfig+0x4c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7e      	ldr	r2, [pc, #504]	; (8003968 <HAL_RCC_OscConfig+0x4c8>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fe ff81 	bl	800267c <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe ff7d 	bl	800267c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e103      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b75      	ldr	r3, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x4c8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x312>
 80037a4:	4b6f      	ldr	r3, [pc, #444]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4a6e      	ldr	r2, [pc, #440]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6213      	str	r3, [r2, #32]
 80037b0:	e02d      	b.n	800380e <HAL_RCC_OscConfig+0x36e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x334>
 80037ba:	4b6a      	ldr	r3, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a69      	ldr	r2, [pc, #420]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	6213      	str	r3, [r2, #32]
 80037c6:	4b67      	ldr	r3, [pc, #412]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4a66      	ldr	r2, [pc, #408]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f023 0304 	bic.w	r3, r3, #4
 80037d0:	6213      	str	r3, [r2, #32]
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x36e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x356>
 80037dc:	4b61      	ldr	r3, [pc, #388]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4a60      	ldr	r2, [pc, #384]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6213      	str	r3, [r2, #32]
 80037e8:	4b5e      	ldr	r3, [pc, #376]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a5d      	ldr	r2, [pc, #372]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x36e>
 80037f6:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a5a      	ldr	r2, [pc, #360]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6213      	str	r3, [r2, #32]
 8003802:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe ff31 	bl	800267c <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe ff2d 	bl	800267c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0b1      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x37e>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe ff1b 	bl	800267c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe ff17 	bl	800267c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e09b      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b3c      	ldr	r3, [pc, #240]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d061      	beq.n	8003958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d146      	bne.n	800392a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b33      	ldr	r3, [pc, #204]	; (800396c <HAL_RCC_OscConfig+0x4cc>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe feeb 	bl	800267c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fe fee7 	bl	800267c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e06d      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d108      	bne.n	80038e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4921      	ldr	r1, [pc, #132]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e4:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a19      	ldr	r1, [r3, #32]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	430b      	orrs	r3, r1
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x4cc>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fe febb 	bl	800267c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fe feb7 	bl	800267c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x46a>
 8003928:	e035      	b.n	8003996 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x4cc>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fe fea4 	bl	800267c <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fe fea0 	bl	800267c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e026      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x498>
 8003956:	e01e      	b.n	8003996 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e019      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
 8003964:	40021000 	.word	0x40021000
 8003968:	40007000 	.word	0x40007000
 800396c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x500>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0d0      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d910      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 0207 	bic.w	r2, r3, #7
 80039ce:	4965      	ldr	r1, [pc, #404]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b8      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	494d      	ldr	r1, [pc, #308]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d040      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d115      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e073      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4936      	ldr	r1, [pc, #216]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fe fdf2 	bl	800267c <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fe fdee 	bl	800267c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e053      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 020c 	and.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1eb      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d210      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 0207 	bic.w	r2, r3, #7
 8003ada:	4922      	ldr	r1, [pc, #136]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e032      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4916      	ldr	r1, [pc, #88]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	490e      	ldr	r1, [pc, #56]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b32:	f000 f821 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	490a      	ldr	r1, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_RCC_ClockConfig+0x1cc>)
 8003b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1d0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fd50 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	08006068 	.word	0x08006068
 8003b70:	20000000 	.word	0x20000000
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b78:	b490      	push	{r4, r7}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b80:	1d3c      	adds	r4, r7, #4
 8003b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b88:	f240 2301 	movw	r3, #513	; 0x201
 8003b8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x46>
 8003bb6:	e02b      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bba:	623b      	str	r3, [r7, #32]
      break;
 8003bbc:	e02b      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	0c9b      	lsrs	r3, r3, #18
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	3328      	adds	r3, #40	; 0x28
 8003bc8:	443b      	add	r3, r7
 8003bca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	0c5b      	lsrs	r3, r3, #17
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	3328      	adds	r3, #40	; 0x28
 8003be6:	443b      	add	r3, r7
 8003be8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bf2:	fb03 f202 	mul.w	r2, r3, r2
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	e004      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	623b      	str	r3, [r7, #32]
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c12:	623b      	str	r3, [r7, #32]
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc90      	pop	{r4, r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	08006058 	.word	0x08006058
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	007a1200 	.word	0x007a1200
 8003c30:	003d0900 	.word	0x003d0900

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff2 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08006078 	.word	0x08006078

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0adb      	lsrs	r3, r3, #11
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08006078 	.word	0x08006078

08003c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <RCC_Delay+0x34>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <RCC_Delay+0x38>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0a5b      	lsrs	r3, r3, #9
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cb4:	bf00      	nop
  }
  while (Delay --);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <RCC_Delay+0x1c>
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	10624dd3 	.word	0x10624dd3

08003cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d07d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	61d3      	str	r3, [r2, #28]
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d118      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d28:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d34:	f7fe fca2 	bl	800267c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	e008      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fe fc9e 	bl	800267c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e06d      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02e      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d027      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d8e:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d014      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fc6d 	bl	800267c <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe fc69 	bl	800267c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e036      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ee      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4917      	ldr	r1, [pc, #92]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de0:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	490b      	ldr	r1, [pc, #44]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4904      	ldr	r1, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	42420440 	.word	0x42420440

08003e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e076      	b.n	8003f40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e62:	d009      	beq.n	8003e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
 8003e6a:	e005      	b.n	8003e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f95a 	bl	800214c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	ea42 0103 	orr.w	r1, r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	0c1a      	lsrs	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f002 0204 	and.w	r2, r2, #4
 8003f1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_SPI_Transmit+0x22>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e126      	b.n	80041b8 <HAL_SPI_Transmit+0x270>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f72:	f7fe fb83 	bl	800267c <HAL_GetTick>
 8003f76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f8c:	e10b      	b.n	80041a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x52>
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9e:	e102      	b.n	80041a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d10f      	bne.n	8004008 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d007      	beq.n	8004026 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d14b      	bne.n	80040c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit+0xf6>
 8004038:	8afb      	ldrh	r3, [r7, #22]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d13e      	bne.n	80040bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	1c9a      	adds	r2, r3, #2
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004062:	e02b      	b.n	80040bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d112      	bne.n	8004098 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
 8004096:	e011      	b.n	80040bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004098:	f7fe faf0 	bl	800267c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d803      	bhi.n	80040b0 <HAL_SPI_Transmit+0x168>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Transmit+0x16e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ba:	e074      	b.n	80041a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ce      	bne.n	8004064 <HAL_SPI_Transmit+0x11c>
 80040c6:	e04c      	b.n	8004162 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Transmit+0x18e>
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d140      	bne.n	8004158 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040fc:	e02c      	b.n	8004158 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d113      	bne.n	8004134 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
 8004132:	e011      	b.n	8004158 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004134:	f7fe faa2 	bl	800267c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d803      	bhi.n	800414c <HAL_SPI_Transmit+0x204>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d102      	bne.n	8004152 <HAL_SPI_Transmit+0x20a>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004156:	e026      	b.n	80041a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1cd      	bne.n	80040fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fbb8 	bl	80048dc <SPI_EndRxTxTransaction>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e000      	b.n	80041a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041dc:	d112      	bne.n	8004204 <HAL_SPI_Receive+0x44>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10e      	bne.n	8004204 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2204      	movs	r2, #4
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f8f1 	bl	80043e2 <HAL_SPI_TransmitReceive>
 8004200:	4603      	mov	r3, r0
 8004202:	e0ea      	b.n	80043da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_SPI_Receive+0x52>
 800420e:	2302      	movs	r3, #2
 8004210:	e0e3      	b.n	80043da <HAL_SPI_Receive+0x21a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800421a:	f7fe fa2f 	bl	800267c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800422c:	2302      	movs	r3, #2
 800422e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004230:	e0ca      	b.n	80043c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_SPI_Receive+0x7e>
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004242:	e0c1      	b.n	80043c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2204      	movs	r2, #4
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428a:	d10f      	bne.n	80042ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d007      	beq.n	80042ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d162      	bne.n	8004398 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042d2:	e02e      	b.n	8004332 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d115      	bne.n	800430e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f103 020c 	add.w	r2, r3, #12
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	7812      	ldrb	r2, [r2, #0]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800430c:	e011      	b.n	8004332 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430e:	f7fe f9b5 	bl	800267c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d803      	bhi.n	8004326 <HAL_SPI_Receive+0x166>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d102      	bne.n	800432c <HAL_SPI_Receive+0x16c>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004330:	e04a      	b.n	80043c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cb      	bne.n	80042d4 <HAL_SPI_Receive+0x114>
 800433c:	e031      	b.n	80043a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d113      	bne.n	8004374 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	b292      	uxth	r2, r2
 8004358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004372:	e011      	b.n	8004398 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004374:	f7fe f982 	bl	800267c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d803      	bhi.n	800438c <HAL_SPI_Receive+0x1cc>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d102      	bne.n	8004392 <HAL_SPI_Receive+0x1d2>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004396:	e017      	b.n	80043c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1cd      	bne.n	800433e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa46 	bl	8004838 <SPI_EndRxTransaction>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
 80043c4:	e000      	b.n	80043c8 <HAL_SPI_Receive+0x208>
  }

error :
 80043c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08c      	sub	sp, #48	; 0x30
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043f0:	2301      	movs	r3, #1
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x26>
 8004404:	2302      	movs	r3, #2
 8004406:	e18a      	b.n	800471e <HAL_SPI_TransmitReceive+0x33c>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004410:	f7fe f934 	bl	800267c <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800442a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800442e:	2b01      	cmp	r3, #1
 8004430:	d00f      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x70>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004438:	d107      	bne.n	800444a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_SPI_TransmitReceive+0x68>
 8004442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004446:	2b04      	cmp	r3, #4
 8004448:	d003      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800444a:	2302      	movs	r3, #2
 800444c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004450:	e15b      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x82>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x82>
 800445e:	887b      	ldrh	r3, [r7, #2]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d103      	bne.n	800446c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800446a:	e14e      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b04      	cmp	r3, #4
 8004476:	d003      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2205      	movs	r2, #5
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	887a      	ldrh	r2, [r7, #2]
 8004496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d007      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d178      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x10a>
 80044e6:	8b7b      	ldrh	r3, [r7, #26]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d166      	bne.n	80045ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004510:	e053      	b.n	80045ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d11b      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x176>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x176>
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d113      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	881a      	ldrh	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	1c9a      	adds	r2, r3, #2
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d119      	bne.n	800459a <HAL_SPI_TransmitReceive+0x1b8>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d014      	beq.n	800459a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	b292      	uxth	r2, r2
 800457c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	1c9a      	adds	r2, r3, #2
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004596:	2301      	movs	r3, #1
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800459a:	f7fe f86f 	bl	800267c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d807      	bhi.n	80045ba <HAL_SPI_TransmitReceive+0x1d8>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d003      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045b8:	e0a7      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1a6      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x130>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1a1      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x130>
 80045ce:	e07c      	b.n	80046ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_TransmitReceive+0x1fc>
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d16b      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004604:	e057      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11c      	bne.n	800464e <HAL_SPI_TransmitReceive+0x26c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <HAL_SPI_TransmitReceive+0x26c>
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d114      	bne.n	800464e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d119      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x2ae>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d014      	beq.n	8004690 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004690:	f7fd fff4 	bl	800267c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469c:	429a      	cmp	r2, r3
 800469e:	d803      	bhi.n	80046a8 <HAL_SPI_TransmitReceive+0x2c6>
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x2cc>
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046b4:	e029      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1a2      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x224>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d19d      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f904 	bl	80048dc <SPI_EndRxTxTransaction>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046e6:	e010      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	e000      	b.n	800470a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800471a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800471e:	4618      	mov	r0, r3
 8004720:	3730      	adds	r7, #48	; 0x30
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004738:	f7fd ffa0 	bl	800267c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4413      	add	r3, r2
 8004746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004748:	f7fd ff98 	bl	800267c <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	015b      	lsls	r3, r3, #5
 8004754:	0d1b      	lsrs	r3, r3, #20
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	fb02 f303 	mul.w	r3, r2, r3
 800475c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475e:	e054      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d050      	beq.n	800480a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004768:	f7fd ff88 	bl	800267c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	429a      	cmp	r2, r3
 8004776:	d902      	bls.n	800477e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d13d      	bne.n	80047fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800478c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004796:	d111      	bne.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a0:	d004      	beq.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047aa:	d107      	bne.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d10f      	bne.n	80047e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e017      	b.n	800482a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3b01      	subs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	429a      	cmp	r2, r3
 8004826:	d19b      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000

08004838 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484c:	d111      	bne.n	8004872 <SPI_EndRxTransaction+0x3a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004856:	d004      	beq.n	8004862 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d107      	bne.n	8004872 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487a:	d117      	bne.n	80048ac <SPI_EndRxTransaction+0x74>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d112      	bne.n	80048ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2200      	movs	r2, #0
 800488e:	2101      	movs	r1, #1
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ff49 	bl	8004728 <SPI_WaitFlagStateUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01a      	beq.n	80048d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e013      	b.n	80048d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff ff36 	bl	8004728 <SPI_WaitFlagStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e000      	b.n	80048d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff ff18 	bl	8004728 <SPI_WaitFlagStateUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e000      	b.n	8004910 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e03f      	b.n	80049aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fc4e 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800495a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fc85 	bl	800526c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08a      	sub	sp, #40	; 0x28
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d17c      	bne.n	8004acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Transmit+0x2c>
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e075      	b.n	8004ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Transmit+0x3e>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e06e      	b.n	8004ace <HAL_UART_Transmit+0x11c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2221      	movs	r2, #33	; 0x21
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a06:	f7fd fe39 	bl	800267c <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d108      	bne.n	8004a34 <HAL_UART_Transmit+0x82>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	e003      	b.n	8004a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a44:	e02a      	b.n	8004a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa38 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e036      	b.n	8004ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e007      	b.n	8004a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1cf      	bne.n	8004a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2140      	movs	r1, #64	; 0x40
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fa08 	bl	8004ec6 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e006      	b.n	8004ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d11d      	bne.n	8004b2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_UART_Receive_IT+0x26>
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e016      	b.n	8004b2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Receive_IT+0x38>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e00f      	b.n	8004b2e <HAL_UART_Receive_IT+0x58>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa19 	bl	8004f5a <UART_Start_Receive_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_UART_IRQHandler+0x52>
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fac9 	bl	800511a <UART_Receive_IT>
      return;
 8004b88:	e17b      	b.n	8004e82 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80b1 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x1bc>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x70>
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a6 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x90>
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f043 0201 	orr.w	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0xb0>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0202 	orr.w	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_UART_IRQHandler+0xd0>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00f      	beq.n	8004c32 <HAL_UART_IRQHandler+0xfa>
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_UART_IRQHandler+0xee>
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0208 	orr.w	r2, r3, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 811e 	beq.w	8004e78 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_UART_IRQHandler+0x11e>
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa62 	bl	800511a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_UART_IRQHandler+0x146>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d031      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9a4 	bl	8004fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d023      	beq.n	8004cda <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	4a76      	ldr	r2, [pc, #472]	; (8004e88 <HAL_UART_IRQHandler+0x350>)
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe f884 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00e      	b.n	8004cf0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8e3 	bl	8004e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00a      	b.n	8004cf0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8df 	bl	8004e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e006      	b.n	8004cf0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8db 	bl	8004e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cee:	e0c3      	b.n	8004e78 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	bf00      	nop
    return;
 8004cf2:	e0c1      	b.n	8004e78 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 80a1 	bne.w	8004e40 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 809b 	beq.w	8004e40 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8095 	beq.w	8004e40 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04e      	beq.n	8004dd8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d44:	8a3b      	ldrh	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8098 	beq.w	8004e7c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d50:	8a3a      	ldrh	r2, [r7, #16]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f080 8092 	bcs.w	8004e7c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8a3a      	ldrh	r2, [r7, #16]
 8004d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d02b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d76:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d96:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0210 	bic.w	r2, r2, #16
 8004db4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd ffc7 	bl	8002d4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f86d 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dd6:	e051      	b.n	8004e7c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d047      	beq.n	8004e80 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d044      	beq.n	8004e80 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e04:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0210 	bic.w	r2, r2, #16
 8004e32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e34:	8a7b      	ldrh	r3, [r7, #18]
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f839 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e3e:	e01f      	b.n	8004e80 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_UART_IRQHandler+0x324>
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8f9 	bl	800504c <UART_Transmit_IT>
    return;
 8004e5a:	e012      	b.n	8004e82 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <HAL_UART_IRQHandler+0x34a>
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f93a 	bl	80050ea <UART_EndTransmit_IT>
    return;
 8004e76:	e004      	b.n	8004e82 <HAL_UART_IRQHandler+0x34a>
    return;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e80:	bf00      	nop
  }
}
 8004e82:	3728      	adds	r7, #40	; 0x28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	08005025 	.word	0x08005025

08004e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr

08004e9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed6:	e02c      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d028      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee6:	f7fd fbc9 	bl	800267c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d21d      	bcs.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695a      	ldr	r2, [r3, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0c3      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	4613      	mov	r3, r2
 8004f66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2222      	movs	r2, #34	; 0x22
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0220 	orr.w	r2, r2, #32
 8004fbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fe2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0210 	bic.w	r2, r2, #16
 800500a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ff2d 	bl	8004e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b21      	cmp	r3, #33	; 0x21
 800505e:	d13e      	bne.n	80050de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005068:	d114      	bne.n	8005094 <UART_Transmit_IT+0x48>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d110      	bne.n	8005094 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]
 8005092:	e008      	b.n	80050a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6211      	str	r1, [r2, #32]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4619      	mov	r1, r3
 80050b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff febe 	bl	8004e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b22      	cmp	r3, #34	; 0x22
 800512c:	f040 8099 	bne.w	8005262 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d117      	bne.n	800516a <UART_Receive_IT+0x50>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d113      	bne.n	800516a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	b29b      	uxth	r3, r3
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	b29a      	uxth	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
 8005168:	e026      	b.n	80051b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517c:	d007      	beq.n	800518e <UART_Receive_IT+0x74>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <UART_Receive_IT+0x82>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e008      	b.n	80051ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4619      	mov	r1, r3
 80051c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d148      	bne.n	800525e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0220 	bic.w	r2, r2, #32
 80051da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	2b01      	cmp	r3, #1
 800520a:	d123      	bne.n	8005254 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0210 	bic.w	r2, r2, #16
 8005220:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d10a      	bne.n	8005246 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fe2f 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
 8005252:	e002      	b.n	800525a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fb fb7d 	bl	8000954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e002      	b.n	8005264 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052a6:	f023 030c 	bic.w	r3, r3, #12
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <UART_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d103      	bne.n	80052dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fe fccc 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	e002      	b.n	80052e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7fe fcb4 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 80052e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009a      	lsls	r2, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	4a22      	ldr	r2, [pc, #136]	; (8005384 <UART_SetConfig+0x118>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	0119      	lsls	r1, r3, #4
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009a      	lsls	r2, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	fbb2 f2f3 	udiv	r2, r2, r3
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <UART_SetConfig+0x118>)
 800531a:	fba3 0302 	umull	r0, r3, r3, r2
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2064      	movs	r0, #100	; 0x64
 8005322:	fb00 f303 	mul.w	r3, r0, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	3332      	adds	r3, #50	; 0x32
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <UART_SetConfig+0x118>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005338:	4419      	add	r1, r3
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009a      	lsls	r2, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <UART_SetConfig+0x118>)
 8005352:	fba3 0302 	umull	r0, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2064      	movs	r0, #100	; 0x64
 800535a:	fb00 f303 	mul.w	r3, r0, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	3332      	adds	r3, #50	; 0x32
 8005364:	4a07      	ldr	r2, [pc, #28]	; (8005384 <UART_SetConfig+0x118>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	f003 020f 	and.w	r2, r3, #15
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	440a      	add	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40013800 	.word	0x40013800
 8005384:	51eb851f 	.word	0x51eb851f

08005388 <__errno>:
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <__errno+0x8>)
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	2000000c 	.word	0x2000000c

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	2600      	movs	r6, #0
 8005398:	4d0c      	ldr	r5, [pc, #48]	; (80053cc <__libc_init_array+0x38>)
 800539a:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539c:	1b64      	subs	r4, r4, r5
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	f000 fc9c 	bl	8005ce0 <_init>
 80053a8:	2600      	movs	r6, #0
 80053aa:	4d0a      	ldr	r5, [pc, #40]	; (80053d4 <__libc_init_array+0x40>)
 80053ac:	4c0a      	ldr	r4, [pc, #40]	; (80053d8 <__libc_init_array+0x44>)
 80053ae:	1b64      	subs	r4, r4, r5
 80053b0:	10a4      	asrs	r4, r4, #2
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	0800611c 	.word	0x0800611c
 80053d0:	0800611c 	.word	0x0800611c
 80053d4:	0800611c 	.word	0x0800611c
 80053d8:	08006120 	.word	0x08006120

080053dc <memcpy>:
 80053dc:	440a      	add	r2, r1
 80053de:	4291      	cmp	r1, r2
 80053e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e4:	d100      	bne.n	80053e8 <memcpy+0xc>
 80053e6:	4770      	bx	lr
 80053e8:	b510      	push	{r4, lr}
 80053ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ee:	4291      	cmp	r1, r2
 80053f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f4:	d1f9      	bne.n	80053ea <memcpy+0xe>
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <memset>:
 80053f8:	4603      	mov	r3, r0
 80053fa:	4402      	add	r2, r0
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d100      	bne.n	8005402 <memset+0xa>
 8005400:	4770      	bx	lr
 8005402:	f803 1b01 	strb.w	r1, [r3], #1
 8005406:	e7f9      	b.n	80053fc <memset+0x4>

08005408 <siprintf>:
 8005408:	b40e      	push	{r1, r2, r3}
 800540a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800540e:	b500      	push	{lr}
 8005410:	b09c      	sub	sp, #112	; 0x70
 8005412:	ab1d      	add	r3, sp, #116	; 0x74
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	9006      	str	r0, [sp, #24]
 8005418:	9107      	str	r1, [sp, #28]
 800541a:	9104      	str	r1, [sp, #16]
 800541c:	4808      	ldr	r0, [pc, #32]	; (8005440 <siprintf+0x38>)
 800541e:	4909      	ldr	r1, [pc, #36]	; (8005444 <siprintf+0x3c>)
 8005420:	f853 2b04 	ldr.w	r2, [r3], #4
 8005424:	9105      	str	r1, [sp, #20]
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	a902      	add	r1, sp, #8
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f000 f8fe 	bl	800562c <_svfiprintf_r>
 8005430:	2200      	movs	r2, #0
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	b01c      	add	sp, #112	; 0x70
 8005438:	f85d eb04 	ldr.w	lr, [sp], #4
 800543c:	b003      	add	sp, #12
 800543e:	4770      	bx	lr
 8005440:	2000000c 	.word	0x2000000c
 8005444:	ffff0208 	.word	0xffff0208

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <sbrk_aligned>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4e0e      	ldr	r6, [pc, #56]	; (8005488 <sbrk_aligned+0x3c>)
 8005450:	460c      	mov	r4, r1
 8005452:	6831      	ldr	r1, [r6, #0]
 8005454:	4605      	mov	r5, r0
 8005456:	b911      	cbnz	r1, 800545e <sbrk_aligned+0x12>
 8005458:	f000 fb7e 	bl	8005b58 <_sbrk_r>
 800545c:	6030      	str	r0, [r6, #0]
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fb79 	bl	8005b58 <_sbrk_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d00a      	beq.n	8005480 <sbrk_aligned+0x34>
 800546a:	1cc4      	adds	r4, r0, #3
 800546c:	f024 0403 	bic.w	r4, r4, #3
 8005470:	42a0      	cmp	r0, r4
 8005472:	d007      	beq.n	8005484 <sbrk_aligned+0x38>
 8005474:	1a21      	subs	r1, r4, r0
 8005476:	4628      	mov	r0, r5
 8005478:	f000 fb6e 	bl	8005b58 <_sbrk_r>
 800547c:	3001      	adds	r0, #1
 800547e:	d101      	bne.n	8005484 <sbrk_aligned+0x38>
 8005480:	f04f 34ff 	mov.w	r4, #4294967295
 8005484:	4620      	mov	r0, r4
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	20000268 	.word	0x20000268

0800548c <_malloc_r>:
 800548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005490:	1ccd      	adds	r5, r1, #3
 8005492:	f025 0503 	bic.w	r5, r5, #3
 8005496:	3508      	adds	r5, #8
 8005498:	2d0c      	cmp	r5, #12
 800549a:	bf38      	it	cc
 800549c:	250c      	movcc	r5, #12
 800549e:	2d00      	cmp	r5, #0
 80054a0:	4607      	mov	r7, r0
 80054a2:	db01      	blt.n	80054a8 <_malloc_r+0x1c>
 80054a4:	42a9      	cmp	r1, r5
 80054a6:	d905      	bls.n	80054b4 <_malloc_r+0x28>
 80054a8:	230c      	movs	r3, #12
 80054aa:	2600      	movs	r6, #0
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	4630      	mov	r0, r6
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	4e2e      	ldr	r6, [pc, #184]	; (8005570 <_malloc_r+0xe4>)
 80054b6:	f000 fb87 	bl	8005bc8 <__malloc_lock>
 80054ba:	6833      	ldr	r3, [r6, #0]
 80054bc:	461c      	mov	r4, r3
 80054be:	bb34      	cbnz	r4, 800550e <_malloc_r+0x82>
 80054c0:	4629      	mov	r1, r5
 80054c2:	4638      	mov	r0, r7
 80054c4:	f7ff ffc2 	bl	800544c <sbrk_aligned>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	4604      	mov	r4, r0
 80054cc:	d14d      	bne.n	800556a <_malloc_r+0xde>
 80054ce:	6834      	ldr	r4, [r6, #0]
 80054d0:	4626      	mov	r6, r4
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	d140      	bne.n	8005558 <_malloc_r+0xcc>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	4631      	mov	r1, r6
 80054da:	4638      	mov	r0, r7
 80054dc:	eb04 0803 	add.w	r8, r4, r3
 80054e0:	f000 fb3a 	bl	8005b58 <_sbrk_r>
 80054e4:	4580      	cmp	r8, r0
 80054e6:	d13a      	bne.n	800555e <_malloc_r+0xd2>
 80054e8:	6821      	ldr	r1, [r4, #0]
 80054ea:	3503      	adds	r5, #3
 80054ec:	1a6d      	subs	r5, r5, r1
 80054ee:	f025 0503 	bic.w	r5, r5, #3
 80054f2:	3508      	adds	r5, #8
 80054f4:	2d0c      	cmp	r5, #12
 80054f6:	bf38      	it	cc
 80054f8:	250c      	movcc	r5, #12
 80054fa:	4638      	mov	r0, r7
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7ff ffa5 	bl	800544c <sbrk_aligned>
 8005502:	3001      	adds	r0, #1
 8005504:	d02b      	beq.n	800555e <_malloc_r+0xd2>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	442b      	add	r3, r5
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	e00e      	b.n	800552c <_malloc_r+0xa0>
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	1b52      	subs	r2, r2, r5
 8005512:	d41e      	bmi.n	8005552 <_malloc_r+0xc6>
 8005514:	2a0b      	cmp	r2, #11
 8005516:	d916      	bls.n	8005546 <_malloc_r+0xba>
 8005518:	1961      	adds	r1, r4, r5
 800551a:	42a3      	cmp	r3, r4
 800551c:	6025      	str	r5, [r4, #0]
 800551e:	bf18      	it	ne
 8005520:	6059      	strne	r1, [r3, #4]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	bf08      	it	eq
 8005526:	6031      	streq	r1, [r6, #0]
 8005528:	5162      	str	r2, [r4, r5]
 800552a:	604b      	str	r3, [r1, #4]
 800552c:	4638      	mov	r0, r7
 800552e:	f104 060b 	add.w	r6, r4, #11
 8005532:	f000 fb4f 	bl	8005bd4 <__malloc_unlock>
 8005536:	f026 0607 	bic.w	r6, r6, #7
 800553a:	1d23      	adds	r3, r4, #4
 800553c:	1af2      	subs	r2, r6, r3
 800553e:	d0b6      	beq.n	80054ae <_malloc_r+0x22>
 8005540:	1b9b      	subs	r3, r3, r6
 8005542:	50a3      	str	r3, [r4, r2]
 8005544:	e7b3      	b.n	80054ae <_malloc_r+0x22>
 8005546:	6862      	ldr	r2, [r4, #4]
 8005548:	42a3      	cmp	r3, r4
 800554a:	bf0c      	ite	eq
 800554c:	6032      	streq	r2, [r6, #0]
 800554e:	605a      	strne	r2, [r3, #4]
 8005550:	e7ec      	b.n	800552c <_malloc_r+0xa0>
 8005552:	4623      	mov	r3, r4
 8005554:	6864      	ldr	r4, [r4, #4]
 8005556:	e7b2      	b.n	80054be <_malloc_r+0x32>
 8005558:	4634      	mov	r4, r6
 800555a:	6876      	ldr	r6, [r6, #4]
 800555c:	e7b9      	b.n	80054d2 <_malloc_r+0x46>
 800555e:	230c      	movs	r3, #12
 8005560:	4638      	mov	r0, r7
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	f000 fb36 	bl	8005bd4 <__malloc_unlock>
 8005568:	e7a1      	b.n	80054ae <_malloc_r+0x22>
 800556a:	6025      	str	r5, [r4, #0]
 800556c:	e7de      	b.n	800552c <_malloc_r+0xa0>
 800556e:	bf00      	nop
 8005570:	20000264 	.word	0x20000264

08005574 <__ssputs_r>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	688e      	ldr	r6, [r1, #8]
 800557a:	4682      	mov	sl, r0
 800557c:	429e      	cmp	r6, r3
 800557e:	460c      	mov	r4, r1
 8005580:	4690      	mov	r8, r2
 8005582:	461f      	mov	r7, r3
 8005584:	d838      	bhi.n	80055f8 <__ssputs_r+0x84>
 8005586:	898a      	ldrh	r2, [r1, #12]
 8005588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800558c:	d032      	beq.n	80055f4 <__ssputs_r+0x80>
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	6909      	ldr	r1, [r1, #16]
 8005592:	3301      	adds	r3, #1
 8005594:	eba5 0901 	sub.w	r9, r5, r1
 8005598:	6965      	ldr	r5, [r4, #20]
 800559a:	444b      	add	r3, r9
 800559c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055a4:	106d      	asrs	r5, r5, #1
 80055a6:	429d      	cmp	r5, r3
 80055a8:	bf38      	it	cc
 80055aa:	461d      	movcc	r5, r3
 80055ac:	0553      	lsls	r3, r2, #21
 80055ae:	d531      	bpl.n	8005614 <__ssputs_r+0xa0>
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7ff ff6b 	bl	800548c <_malloc_r>
 80055b6:	4606      	mov	r6, r0
 80055b8:	b950      	cbnz	r0, 80055d0 <__ssputs_r+0x5c>
 80055ba:	230c      	movs	r3, #12
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	f8ca 3000 	str.w	r3, [sl]
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	464a      	mov	r2, r9
 80055d2:	6921      	ldr	r1, [r4, #16]
 80055d4:	f7ff ff02 	bl	80053dc <memcpy>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	6126      	str	r6, [r4, #16]
 80055e6:	444e      	add	r6, r9
 80055e8:	6026      	str	r6, [r4, #0]
 80055ea:	463e      	mov	r6, r7
 80055ec:	6165      	str	r5, [r4, #20]
 80055ee:	eba5 0509 	sub.w	r5, r5, r9
 80055f2:	60a5      	str	r5, [r4, #8]
 80055f4:	42be      	cmp	r6, r7
 80055f6:	d900      	bls.n	80055fa <__ssputs_r+0x86>
 80055f8:	463e      	mov	r6, r7
 80055fa:	4632      	mov	r2, r6
 80055fc:	4641      	mov	r1, r8
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	f000 fac8 	bl	8005b94 <memmove>
 8005604:	68a3      	ldr	r3, [r4, #8]
 8005606:	2000      	movs	r0, #0
 8005608:	1b9b      	subs	r3, r3, r6
 800560a:	60a3      	str	r3, [r4, #8]
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	4433      	add	r3, r6
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	e7db      	b.n	80055cc <__ssputs_r+0x58>
 8005614:	462a      	mov	r2, r5
 8005616:	f000 fb2b 	bl	8005c70 <_realloc_r>
 800561a:	4606      	mov	r6, r0
 800561c:	2800      	cmp	r0, #0
 800561e:	d1e1      	bne.n	80055e4 <__ssputs_r+0x70>
 8005620:	4650      	mov	r0, sl
 8005622:	6921      	ldr	r1, [r4, #16]
 8005624:	f000 fadc 	bl	8005be0 <_free_r>
 8005628:	e7c7      	b.n	80055ba <__ssputs_r+0x46>
	...

0800562c <_svfiprintf_r>:
 800562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005630:	4698      	mov	r8, r3
 8005632:	898b      	ldrh	r3, [r1, #12]
 8005634:	4607      	mov	r7, r0
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	460d      	mov	r5, r1
 800563a:	4614      	mov	r4, r2
 800563c:	b09d      	sub	sp, #116	; 0x74
 800563e:	d50e      	bpl.n	800565e <_svfiprintf_r+0x32>
 8005640:	690b      	ldr	r3, [r1, #16]
 8005642:	b963      	cbnz	r3, 800565e <_svfiprintf_r+0x32>
 8005644:	2140      	movs	r1, #64	; 0x40
 8005646:	f7ff ff21 	bl	800548c <_malloc_r>
 800564a:	6028      	str	r0, [r5, #0]
 800564c:	6128      	str	r0, [r5, #16]
 800564e:	b920      	cbnz	r0, 800565a <_svfiprintf_r+0x2e>
 8005650:	230c      	movs	r3, #12
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	e0d1      	b.n	80057fe <_svfiprintf_r+0x1d2>
 800565a:	2340      	movs	r3, #64	; 0x40
 800565c:	616b      	str	r3, [r5, #20]
 800565e:	2300      	movs	r3, #0
 8005660:	9309      	str	r3, [sp, #36]	; 0x24
 8005662:	2320      	movs	r3, #32
 8005664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005668:	2330      	movs	r3, #48	; 0x30
 800566a:	f04f 0901 	mov.w	r9, #1
 800566e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005672:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005818 <_svfiprintf_r+0x1ec>
 8005676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567a:	4623      	mov	r3, r4
 800567c:	469a      	mov	sl, r3
 800567e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005682:	b10a      	cbz	r2, 8005688 <_svfiprintf_r+0x5c>
 8005684:	2a25      	cmp	r2, #37	; 0x25
 8005686:	d1f9      	bne.n	800567c <_svfiprintf_r+0x50>
 8005688:	ebba 0b04 	subs.w	fp, sl, r4
 800568c:	d00b      	beq.n	80056a6 <_svfiprintf_r+0x7a>
 800568e:	465b      	mov	r3, fp
 8005690:	4622      	mov	r2, r4
 8005692:	4629      	mov	r1, r5
 8005694:	4638      	mov	r0, r7
 8005696:	f7ff ff6d 	bl	8005574 <__ssputs_r>
 800569a:	3001      	adds	r0, #1
 800569c:	f000 80aa 	beq.w	80057f4 <_svfiprintf_r+0x1c8>
 80056a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a2:	445a      	add	r2, fp
 80056a4:	9209      	str	r2, [sp, #36]	; 0x24
 80056a6:	f89a 3000 	ldrb.w	r3, [sl]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a2 	beq.w	80057f4 <_svfiprintf_r+0x1c8>
 80056b0:	2300      	movs	r3, #0
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295
 80056b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ba:	f10a 0a01 	add.w	sl, sl, #1
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c6:	931a      	str	r3, [sp, #104]	; 0x68
 80056c8:	4654      	mov	r4, sl
 80056ca:	2205      	movs	r2, #5
 80056cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d0:	4851      	ldr	r0, [pc, #324]	; (8005818 <_svfiprintf_r+0x1ec>)
 80056d2:	f000 fa51 	bl	8005b78 <memchr>
 80056d6:	9a04      	ldr	r2, [sp, #16]
 80056d8:	b9d8      	cbnz	r0, 8005712 <_svfiprintf_r+0xe6>
 80056da:	06d0      	lsls	r0, r2, #27
 80056dc:	bf44      	itt	mi
 80056de:	2320      	movmi	r3, #32
 80056e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e4:	0711      	lsls	r1, r2, #28
 80056e6:	bf44      	itt	mi
 80056e8:	232b      	movmi	r3, #43	; 0x2b
 80056ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ee:	f89a 3000 	ldrb.w	r3, [sl]
 80056f2:	2b2a      	cmp	r3, #42	; 0x2a
 80056f4:	d015      	beq.n	8005722 <_svfiprintf_r+0xf6>
 80056f6:	4654      	mov	r4, sl
 80056f8:	2000      	movs	r0, #0
 80056fa:	f04f 0c0a 	mov.w	ip, #10
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	4621      	mov	r1, r4
 8005702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005706:	3b30      	subs	r3, #48	; 0x30
 8005708:	2b09      	cmp	r3, #9
 800570a:	d94e      	bls.n	80057aa <_svfiprintf_r+0x17e>
 800570c:	b1b0      	cbz	r0, 800573c <_svfiprintf_r+0x110>
 800570e:	9207      	str	r2, [sp, #28]
 8005710:	e014      	b.n	800573c <_svfiprintf_r+0x110>
 8005712:	eba0 0308 	sub.w	r3, r0, r8
 8005716:	fa09 f303 	lsl.w	r3, r9, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	46a2      	mov	sl, r4
 800571e:	9304      	str	r3, [sp, #16]
 8005720:	e7d2      	b.n	80056c8 <_svfiprintf_r+0x9c>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	1d19      	adds	r1, r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	9103      	str	r1, [sp, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	bfbb      	ittet	lt
 800572e:	425b      	neglt	r3, r3
 8005730:	f042 0202 	orrlt.w	r2, r2, #2
 8005734:	9307      	strge	r3, [sp, #28]
 8005736:	9307      	strlt	r3, [sp, #28]
 8005738:	bfb8      	it	lt
 800573a:	9204      	strlt	r2, [sp, #16]
 800573c:	7823      	ldrb	r3, [r4, #0]
 800573e:	2b2e      	cmp	r3, #46	; 0x2e
 8005740:	d10c      	bne.n	800575c <_svfiprintf_r+0x130>
 8005742:	7863      	ldrb	r3, [r4, #1]
 8005744:	2b2a      	cmp	r3, #42	; 0x2a
 8005746:	d135      	bne.n	80057b4 <_svfiprintf_r+0x188>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	3402      	adds	r4, #2
 800574c:	1d1a      	adds	r2, r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	9203      	str	r2, [sp, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	bfb8      	it	lt
 8005756:	f04f 33ff 	movlt.w	r3, #4294967295
 800575a:	9305      	str	r3, [sp, #20]
 800575c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800581c <_svfiprintf_r+0x1f0>
 8005760:	2203      	movs	r2, #3
 8005762:	4650      	mov	r0, sl
 8005764:	7821      	ldrb	r1, [r4, #0]
 8005766:	f000 fa07 	bl	8005b78 <memchr>
 800576a:	b140      	cbz	r0, 800577e <_svfiprintf_r+0x152>
 800576c:	2340      	movs	r3, #64	; 0x40
 800576e:	eba0 000a 	sub.w	r0, r0, sl
 8005772:	fa03 f000 	lsl.w	r0, r3, r0
 8005776:	9b04      	ldr	r3, [sp, #16]
 8005778:	3401      	adds	r4, #1
 800577a:	4303      	orrs	r3, r0
 800577c:	9304      	str	r3, [sp, #16]
 800577e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005782:	2206      	movs	r2, #6
 8005784:	4826      	ldr	r0, [pc, #152]	; (8005820 <_svfiprintf_r+0x1f4>)
 8005786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800578a:	f000 f9f5 	bl	8005b78 <memchr>
 800578e:	2800      	cmp	r0, #0
 8005790:	d038      	beq.n	8005804 <_svfiprintf_r+0x1d8>
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <_svfiprintf_r+0x1f8>)
 8005794:	bb1b      	cbnz	r3, 80057de <_svfiprintf_r+0x1b2>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	3307      	adds	r3, #7
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	3308      	adds	r3, #8
 80057a0:	9303      	str	r3, [sp, #12]
 80057a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a4:	4433      	add	r3, r6
 80057a6:	9309      	str	r3, [sp, #36]	; 0x24
 80057a8:	e767      	b.n	800567a <_svfiprintf_r+0x4e>
 80057aa:	460c      	mov	r4, r1
 80057ac:	2001      	movs	r0, #1
 80057ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b2:	e7a5      	b.n	8005700 <_svfiprintf_r+0xd4>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f04f 0c0a 	mov.w	ip, #10
 80057ba:	4619      	mov	r1, r3
 80057bc:	3401      	adds	r4, #1
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	4620      	mov	r0, r4
 80057c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c6:	3a30      	subs	r2, #48	; 0x30
 80057c8:	2a09      	cmp	r2, #9
 80057ca:	d903      	bls.n	80057d4 <_svfiprintf_r+0x1a8>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0c5      	beq.n	800575c <_svfiprintf_r+0x130>
 80057d0:	9105      	str	r1, [sp, #20]
 80057d2:	e7c3      	b.n	800575c <_svfiprintf_r+0x130>
 80057d4:	4604      	mov	r4, r0
 80057d6:	2301      	movs	r3, #1
 80057d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057dc:	e7f0      	b.n	80057c0 <_svfiprintf_r+0x194>
 80057de:	ab03      	add	r3, sp, #12
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	462a      	mov	r2, r5
 80057e4:	4638      	mov	r0, r7
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <_svfiprintf_r+0x1fc>)
 80057e8:	a904      	add	r1, sp, #16
 80057ea:	f3af 8000 	nop.w
 80057ee:	1c42      	adds	r2, r0, #1
 80057f0:	4606      	mov	r6, r0
 80057f2:	d1d6      	bne.n	80057a2 <_svfiprintf_r+0x176>
 80057f4:	89ab      	ldrh	r3, [r5, #12]
 80057f6:	065b      	lsls	r3, r3, #25
 80057f8:	f53f af2c 	bmi.w	8005654 <_svfiprintf_r+0x28>
 80057fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057fe:	b01d      	add	sp, #116	; 0x74
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	462a      	mov	r2, r5
 800580a:	4638      	mov	r0, r7
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <_svfiprintf_r+0x1fc>)
 800580e:	a904      	add	r1, sp, #16
 8005810:	f000 f87c 	bl	800590c <_printf_i>
 8005814:	e7eb      	b.n	80057ee <_svfiprintf_r+0x1c2>
 8005816:	bf00      	nop
 8005818:	080060e0 	.word	0x080060e0
 800581c:	080060e6 	.word	0x080060e6
 8005820:	080060ea 	.word	0x080060ea
 8005824:	00000000 	.word	0x00000000
 8005828:	08005575 	.word	0x08005575

0800582c <_printf_common>:
 800582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	4616      	mov	r6, r2
 8005832:	4699      	mov	r9, r3
 8005834:	688a      	ldr	r2, [r1, #8]
 8005836:	690b      	ldr	r3, [r1, #16]
 8005838:	4607      	mov	r7, r0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfb8      	it	lt
 800583e:	4613      	movlt	r3, r2
 8005840:	6033      	str	r3, [r6, #0]
 8005842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005846:	460c      	mov	r4, r1
 8005848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800584c:	b10a      	cbz	r2, 8005852 <_printf_common+0x26>
 800584e:	3301      	adds	r3, #1
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	0699      	lsls	r1, r3, #26
 8005856:	bf42      	ittt	mi
 8005858:	6833      	ldrmi	r3, [r6, #0]
 800585a:	3302      	addmi	r3, #2
 800585c:	6033      	strmi	r3, [r6, #0]
 800585e:	6825      	ldr	r5, [r4, #0]
 8005860:	f015 0506 	ands.w	r5, r5, #6
 8005864:	d106      	bne.n	8005874 <_printf_common+0x48>
 8005866:	f104 0a19 	add.w	sl, r4, #25
 800586a:	68e3      	ldr	r3, [r4, #12]
 800586c:	6832      	ldr	r2, [r6, #0]
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	42ab      	cmp	r3, r5
 8005872:	dc28      	bgt.n	80058c6 <_printf_common+0x9a>
 8005874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005878:	1e13      	subs	r3, r2, #0
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	bf18      	it	ne
 800587e:	2301      	movne	r3, #1
 8005880:	0692      	lsls	r2, r2, #26
 8005882:	d42d      	bmi.n	80058e0 <_printf_common+0xb4>
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588c:	47c0      	blx	r8
 800588e:	3001      	adds	r0, #1
 8005890:	d020      	beq.n	80058d4 <_printf_common+0xa8>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	68e5      	ldr	r5, [r4, #12]
 8005896:	f003 0306 	and.w	r3, r3, #6
 800589a:	2b04      	cmp	r3, #4
 800589c:	bf18      	it	ne
 800589e:	2500      	movne	r5, #0
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	f04f 0600 	mov.w	r6, #0
 80058a6:	68a3      	ldr	r3, [r4, #8]
 80058a8:	bf08      	it	eq
 80058aa:	1aad      	subeq	r5, r5, r2
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	bf08      	it	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	4293      	cmp	r3, r2
 80058b6:	bfc4      	itt	gt
 80058b8:	1a9b      	subgt	r3, r3, r2
 80058ba:	18ed      	addgt	r5, r5, r3
 80058bc:	341a      	adds	r4, #26
 80058be:	42b5      	cmp	r5, r6
 80058c0:	d11a      	bne.n	80058f8 <_printf_common+0xcc>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e008      	b.n	80058d8 <_printf_common+0xac>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	4649      	mov	r1, r9
 80058cc:	4638      	mov	r0, r7
 80058ce:	47c0      	blx	r8
 80058d0:	3001      	adds	r0, #1
 80058d2:	d103      	bne.n	80058dc <_printf_common+0xb0>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	3501      	adds	r5, #1
 80058de:	e7c4      	b.n	800586a <_printf_common+0x3e>
 80058e0:	2030      	movs	r0, #48	; 0x30
 80058e2:	18e1      	adds	r1, r4, r3
 80058e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ee:	4422      	add	r2, r4
 80058f0:	3302      	adds	r3, #2
 80058f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f6:	e7c5      	b.n	8005884 <_printf_common+0x58>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4622      	mov	r2, r4
 80058fc:	4649      	mov	r1, r9
 80058fe:	4638      	mov	r0, r7
 8005900:	47c0      	blx	r8
 8005902:	3001      	adds	r0, #1
 8005904:	d0e6      	beq.n	80058d4 <_printf_common+0xa8>
 8005906:	3601      	adds	r6, #1
 8005908:	e7d9      	b.n	80058be <_printf_common+0x92>
	...

0800590c <_printf_i>:
 800590c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	7e0f      	ldrb	r7, [r1, #24]
 8005912:	4691      	mov	r9, r2
 8005914:	2f78      	cmp	r7, #120	; 0x78
 8005916:	4680      	mov	r8, r0
 8005918:	460c      	mov	r4, r1
 800591a:	469a      	mov	sl, r3
 800591c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800591e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005922:	d807      	bhi.n	8005934 <_printf_i+0x28>
 8005924:	2f62      	cmp	r7, #98	; 0x62
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x32>
 8005928:	2f00      	cmp	r7, #0
 800592a:	f000 80d9 	beq.w	8005ae0 <_printf_i+0x1d4>
 800592e:	2f58      	cmp	r7, #88	; 0x58
 8005930:	f000 80a4 	beq.w	8005a7c <_printf_i+0x170>
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800593c:	e03a      	b.n	80059b4 <_printf_i+0xa8>
 800593e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005942:	2b15      	cmp	r3, #21
 8005944:	d8f6      	bhi.n	8005934 <_printf_i+0x28>
 8005946:	a101      	add	r1, pc, #4	; (adr r1, 800594c <_printf_i+0x40>)
 8005948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005935 	.word	0x08005935
 8005958:	08005935 	.word	0x08005935
 800595c:	08005935 	.word	0x08005935
 8005960:	08005935 	.word	0x08005935
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005935 	.word	0x08005935
 800596c:	08005935 	.word	0x08005935
 8005970:	08005935 	.word	0x08005935
 8005974:	08005935 	.word	0x08005935
 8005978:	08005ac7 	.word	0x08005ac7
 800597c:	080059e9 	.word	0x080059e9
 8005980:	08005aa9 	.word	0x08005aa9
 8005984:	08005935 	.word	0x08005935
 8005988:	08005935 	.word	0x08005935
 800598c:	08005ae9 	.word	0x08005ae9
 8005990:	08005935 	.word	0x08005935
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005935 	.word	0x08005935
 800599c:	08005935 	.word	0x08005935
 80059a0:	08005ab1 	.word	0x08005ab1
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0a4      	b.n	8005b02 <_printf_i+0x1f6>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	6829      	ldr	r1, [r5, #0]
 80059bc:	0606      	lsls	r6, r0, #24
 80059be:	f101 0304 	add.w	r3, r1, #4
 80059c2:	d50a      	bpl.n	80059da <_printf_i+0xce>
 80059c4:	680e      	ldr	r6, [r1, #0]
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	da03      	bge.n	80059d4 <_printf_i+0xc8>
 80059cc:	232d      	movs	r3, #45	; 0x2d
 80059ce:	4276      	negs	r6, r6
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	230a      	movs	r3, #10
 80059d6:	485e      	ldr	r0, [pc, #376]	; (8005b50 <_printf_i+0x244>)
 80059d8:	e019      	b.n	8005a0e <_printf_i+0x102>
 80059da:	680e      	ldr	r6, [r1, #0]
 80059dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	bf18      	it	ne
 80059e4:	b236      	sxthne	r6, r6
 80059e6:	e7ef      	b.n	80059c8 <_printf_i+0xbc>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6820      	ldr	r0, [r4, #0]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	6029      	str	r1, [r5, #0]
 80059f0:	0601      	lsls	r1, r0, #24
 80059f2:	d501      	bpl.n	80059f8 <_printf_i+0xec>
 80059f4:	681e      	ldr	r6, [r3, #0]
 80059f6:	e002      	b.n	80059fe <_printf_i+0xf2>
 80059f8:	0646      	lsls	r6, r0, #25
 80059fa:	d5fb      	bpl.n	80059f4 <_printf_i+0xe8>
 80059fc:	881e      	ldrh	r6, [r3, #0]
 80059fe:	2f6f      	cmp	r7, #111	; 0x6f
 8005a00:	bf0c      	ite	eq
 8005a02:	2308      	moveq	r3, #8
 8005a04:	230a      	movne	r3, #10
 8005a06:	4852      	ldr	r0, [pc, #328]	; (8005b50 <_printf_i+0x244>)
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a0e:	6865      	ldr	r5, [r4, #4]
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	bfa8      	it	ge
 8005a14:	6821      	ldrge	r1, [r4, #0]
 8005a16:	60a5      	str	r5, [r4, #8]
 8005a18:	bfa4      	itt	ge
 8005a1a:	f021 0104 	bicge.w	r1, r1, #4
 8005a1e:	6021      	strge	r1, [r4, #0]
 8005a20:	b90e      	cbnz	r6, 8005a26 <_printf_i+0x11a>
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	d04d      	beq.n	8005ac2 <_printf_i+0x1b6>
 8005a26:	4615      	mov	r5, r2
 8005a28:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a2c:	fb03 6711 	mls	r7, r3, r1, r6
 8005a30:	5dc7      	ldrb	r7, [r0, r7]
 8005a32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a36:	4637      	mov	r7, r6
 8005a38:	42bb      	cmp	r3, r7
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	d9f4      	bls.n	8005a28 <_printf_i+0x11c>
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d10b      	bne.n	8005a5a <_printf_i+0x14e>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	07de      	lsls	r6, r3, #31
 8005a46:	d508      	bpl.n	8005a5a <_printf_i+0x14e>
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	6861      	ldr	r1, [r4, #4]
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	bfde      	ittt	le
 8005a50:	2330      	movle	r3, #48	; 0x30
 8005a52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a5a:	1b52      	subs	r2, r2, r5
 8005a5c:	6122      	str	r2, [r4, #16]
 8005a5e:	464b      	mov	r3, r9
 8005a60:	4621      	mov	r1, r4
 8005a62:	4640      	mov	r0, r8
 8005a64:	f8cd a000 	str.w	sl, [sp]
 8005a68:	aa03      	add	r2, sp, #12
 8005a6a:	f7ff fedf 	bl	800582c <_printf_common>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d14c      	bne.n	8005b0c <_printf_i+0x200>
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	b004      	add	sp, #16
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	4834      	ldr	r0, [pc, #208]	; (8005b50 <_printf_i+0x244>)
 8005a7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a82:	6829      	ldr	r1, [r5, #0]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	061d      	lsls	r5, r3, #24
 8005a8e:	d514      	bpl.n	8005aba <_printf_i+0x1ae>
 8005a90:	07df      	lsls	r7, r3, #31
 8005a92:	bf44      	itt	mi
 8005a94:	f043 0320 	orrmi.w	r3, r3, #32
 8005a98:	6023      	strmi	r3, [r4, #0]
 8005a9a:	b91e      	cbnz	r6, 8005aa4 <_printf_i+0x198>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f023 0320 	bic.w	r3, r3, #32
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	e7af      	b.n	8005a08 <_printf_i+0xfc>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	f043 0320 	orr.w	r3, r3, #32
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	2378      	movs	r3, #120	; 0x78
 8005ab2:	4828      	ldr	r0, [pc, #160]	; (8005b54 <_printf_i+0x248>)
 8005ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab8:	e7e3      	b.n	8005a82 <_printf_i+0x176>
 8005aba:	0659      	lsls	r1, r3, #25
 8005abc:	bf48      	it	mi
 8005abe:	b2b6      	uxthmi	r6, r6
 8005ac0:	e7e6      	b.n	8005a90 <_printf_i+0x184>
 8005ac2:	4615      	mov	r5, r2
 8005ac4:	e7bb      	b.n	8005a3e <_printf_i+0x132>
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	6826      	ldr	r6, [r4, #0]
 8005aca:	1d18      	adds	r0, r3, #4
 8005acc:	6961      	ldr	r1, [r4, #20]
 8005ace:	6028      	str	r0, [r5, #0]
 8005ad0:	0635      	lsls	r5, r6, #24
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	d501      	bpl.n	8005ada <_printf_i+0x1ce>
 8005ad6:	6019      	str	r1, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <_printf_i+0x1d4>
 8005ada:	0670      	lsls	r0, r6, #25
 8005adc:	d5fb      	bpl.n	8005ad6 <_printf_i+0x1ca>
 8005ade:	8019      	strh	r1, [r3, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4615      	mov	r5, r2
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	e7ba      	b.n	8005a5e <_printf_i+0x152>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	602a      	str	r2, [r5, #0]
 8005af0:	681d      	ldr	r5, [r3, #0]
 8005af2:	6862      	ldr	r2, [r4, #4]
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f83f 	bl	8005b78 <memchr>
 8005afa:	b108      	cbz	r0, 8005b00 <_printf_i+0x1f4>
 8005afc:	1b40      	subs	r0, r0, r5
 8005afe:	6060      	str	r0, [r4, #4]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	2300      	movs	r3, #0
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0a:	e7a8      	b.n	8005a5e <_printf_i+0x152>
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	47d0      	blx	sl
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0ab      	beq.n	8005a72 <_printf_i+0x166>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	d413      	bmi.n	8005b48 <_printf_i+0x23c>
 8005b20:	68e0      	ldr	r0, [r4, #12]
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	bfb8      	it	lt
 8005b28:	4618      	movlt	r0, r3
 8005b2a:	e7a4      	b.n	8005a76 <_printf_i+0x16a>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4649      	mov	r1, r9
 8005b32:	4640      	mov	r0, r8
 8005b34:	47d0      	blx	sl
 8005b36:	3001      	adds	r0, #1
 8005b38:	d09b      	beq.n	8005a72 <_printf_i+0x166>
 8005b3a:	3501      	adds	r5, #1
 8005b3c:	68e3      	ldr	r3, [r4, #12]
 8005b3e:	9903      	ldr	r1, [sp, #12]
 8005b40:	1a5b      	subs	r3, r3, r1
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dcf2      	bgt.n	8005b2c <_printf_i+0x220>
 8005b46:	e7eb      	b.n	8005b20 <_printf_i+0x214>
 8005b48:	2500      	movs	r5, #0
 8005b4a:	f104 0619 	add.w	r6, r4, #25
 8005b4e:	e7f5      	b.n	8005b3c <_printf_i+0x230>
 8005b50:	080060f1 	.word	0x080060f1
 8005b54:	08006102 	.word	0x08006102

08005b58 <_sbrk_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4d05      	ldr	r5, [pc, #20]	; (8005b74 <_sbrk_r+0x1c>)
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fc fc36 	bl	80023d4 <_sbrk>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_sbrk_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_sbrk_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	2000026c 	.word	0x2000026c

08005b78 <memchr>:
 8005b78:	4603      	mov	r3, r0
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	b2c9      	uxtb	r1, r1
 8005b7e:	4402      	add	r2, r0
 8005b80:	4293      	cmp	r3, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	d101      	bne.n	8005b8a <memchr+0x12>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e003      	b.n	8005b92 <memchr+0x1a>
 8005b8a:	7804      	ldrb	r4, [r0, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	428c      	cmp	r4, r1
 8005b90:	d1f6      	bne.n	8005b80 <memchr+0x8>
 8005b92:	bd10      	pop	{r4, pc}

08005b94 <memmove>:
 8005b94:	4288      	cmp	r0, r1
 8005b96:	b510      	push	{r4, lr}
 8005b98:	eb01 0402 	add.w	r4, r1, r2
 8005b9c:	d902      	bls.n	8005ba4 <memmove+0x10>
 8005b9e:	4284      	cmp	r4, r0
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	d807      	bhi.n	8005bb4 <memmove+0x20>
 8005ba4:	1e43      	subs	r3, r0, #1
 8005ba6:	42a1      	cmp	r1, r4
 8005ba8:	d008      	beq.n	8005bbc <memmove+0x28>
 8005baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bb2:	e7f8      	b.n	8005ba6 <memmove+0x12>
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	4402      	add	r2, r0
 8005bb8:	428a      	cmp	r2, r1
 8005bba:	d100      	bne.n	8005bbe <memmove+0x2a>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bc6:	e7f7      	b.n	8005bb8 <memmove+0x24>

08005bc8 <__malloc_lock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <__malloc_lock+0x8>)
 8005bca:	f7ff bc3d 	b.w	8005448 <__retarget_lock_acquire_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20000260 	.word	0x20000260

08005bd4 <__malloc_unlock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_unlock+0x8>)
 8005bd6:	f7ff bc38 	b.w	800544a <__retarget_lock_release_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000260 	.word	0x20000260

08005be0 <_free_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4605      	mov	r5, r0
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d040      	beq.n	8005c6a <_free_r+0x8a>
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f0c      	subs	r4, r1, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfb8      	it	lt
 8005bf2:	18e4      	addlt	r4, r4, r3
 8005bf4:	f7ff ffe8 	bl	8005bc8 <__malloc_lock>
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <_free_r+0x8c>)
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	b933      	cbnz	r3, 8005c0c <_free_r+0x2c>
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	4628      	mov	r0, r5
 8005c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c08:	f7ff bfe4 	b.w	8005bd4 <__malloc_unlock>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d908      	bls.n	8005c22 <_free_r+0x42>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	1821      	adds	r1, r4, r0
 8005c14:	428b      	cmp	r3, r1
 8005c16:	bf01      	itttt	eq
 8005c18:	6819      	ldreq	r1, [r3, #0]
 8005c1a:	685b      	ldreq	r3, [r3, #4]
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	e7ed      	b.n	8005bfe <_free_r+0x1e>
 8005c22:	461a      	mov	r2, r3
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b10b      	cbz	r3, 8005c2c <_free_r+0x4c>
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d9fa      	bls.n	8005c22 <_free_r+0x42>
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	1850      	adds	r0, r2, r1
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d10b      	bne.n	8005c4c <_free_r+0x6c>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	4401      	add	r1, r0
 8005c38:	1850      	adds	r0, r2, r1
 8005c3a:	4283      	cmp	r3, r0
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	d1e0      	bne.n	8005c02 <_free_r+0x22>
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4401      	add	r1, r0
 8005c46:	6011      	str	r1, [r2, #0]
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	e7da      	b.n	8005c02 <_free_r+0x22>
 8005c4c:	d902      	bls.n	8005c54 <_free_r+0x74>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	e7d6      	b.n	8005c02 <_free_r+0x22>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1809      	addeq	r1, r1, r0
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	6054      	str	r4, [r2, #4]
 8005c68:	e7cb      	b.n	8005c02 <_free_r+0x22>
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	20000264 	.word	0x20000264

08005c70 <_realloc_r>:
 8005c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c74:	4680      	mov	r8, r0
 8005c76:	4614      	mov	r4, r2
 8005c78:	460e      	mov	r6, r1
 8005c7a:	b921      	cbnz	r1, 8005c86 <_realloc_r+0x16>
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c82:	f7ff bc03 	b.w	800548c <_malloc_r>
 8005c86:	b92a      	cbnz	r2, 8005c94 <_realloc_r+0x24>
 8005c88:	f7ff ffaa 	bl	8005be0 <_free_r>
 8005c8c:	4625      	mov	r5, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c94:	f000 f81b 	bl	8005cce <_malloc_usable_size_r>
 8005c98:	4284      	cmp	r4, r0
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	d802      	bhi.n	8005ca4 <_realloc_r+0x34>
 8005c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ca2:	d812      	bhi.n	8005cca <_realloc_r+0x5a>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff fbf0 	bl	800548c <_malloc_r>
 8005cac:	4605      	mov	r5, r0
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d0ed      	beq.n	8005c8e <_realloc_r+0x1e>
 8005cb2:	42bc      	cmp	r4, r7
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	bf28      	it	cs
 8005cba:	463a      	movcs	r2, r7
 8005cbc:	f7ff fb8e 	bl	80053dc <memcpy>
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	f7ff ff8c 	bl	8005be0 <_free_r>
 8005cc8:	e7e1      	b.n	8005c8e <_realloc_r+0x1e>
 8005cca:	4635      	mov	r5, r6
 8005ccc:	e7df      	b.n	8005c8e <_realloc_r+0x1e>

08005cce <_malloc_usable_size_r>:
 8005cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd2:	1f18      	subs	r0, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bfbc      	itt	lt
 8005cd8:	580b      	ldrlt	r3, [r1, r0]
 8005cda:	18c0      	addlt	r0, r0, r3
 8005cdc:	4770      	bx	lr
	...

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
