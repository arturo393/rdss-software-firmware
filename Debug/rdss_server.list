
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006704  08006704  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800670c  0800670c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006710  08006710  00016710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08006784  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006784  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f0a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304e  00000000  00000000  00031fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a894  00000000  00000000  00037008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f26  00000000  00000000  0005189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f648  00000000  00000000  000657c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4e0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  000f4e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080062d4 	.word	0x080062d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080062d4 	.word	0x080062d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_frsub>:
 80004c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	e002      	b.n	80004d4 <__addsf3>
 80004ce:	bf00      	nop

080004d0 <__aeabi_fsub>:
 80004d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d4 <__addsf3>:
 80004d4:	0042      	lsls	r2, r0, #1
 80004d6:	bf1f      	itttt	ne
 80004d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004dc:	ea92 0f03 	teqne	r2, r3
 80004e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e8:	d06a      	beq.n	80005c0 <__addsf3+0xec>
 80004ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004f2:	bfc1      	itttt	gt
 80004f4:	18d2      	addgt	r2, r2, r3
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	4048      	eorgt	r0, r1
 80004fa:	4041      	eorgt	r1, r0
 80004fc:	bfb8      	it	lt
 80004fe:	425b      	neglt	r3, r3
 8000500:	2b19      	cmp	r3, #25
 8000502:	bf88      	it	hi
 8000504:	4770      	bxhi	lr
 8000506:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800050a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000512:	bf18      	it	ne
 8000514:	4240      	negne	r0, r0
 8000516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800051a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000522:	bf18      	it	ne
 8000524:	4249      	negne	r1, r1
 8000526:	ea92 0f03 	teq	r2, r3
 800052a:	d03f      	beq.n	80005ac <__addsf3+0xd8>
 800052c:	f1a2 0201 	sub.w	r2, r2, #1
 8000530:	fa41 fc03 	asr.w	ip, r1, r3
 8000534:	eb10 000c 	adds.w	r0, r0, ip
 8000538:	f1c3 0320 	rsb	r3, r3, #32
 800053c:	fa01 f103 	lsl.w	r1, r1, r3
 8000540:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000544:	d502      	bpl.n	800054c <__addsf3+0x78>
 8000546:	4249      	negs	r1, r1
 8000548:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800054c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000550:	d313      	bcc.n	800057a <__addsf3+0xa6>
 8000552:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000556:	d306      	bcc.n	8000566 <__addsf3+0x92>
 8000558:	0840      	lsrs	r0, r0, #1
 800055a:	ea4f 0131 	mov.w	r1, r1, rrx
 800055e:	f102 0201 	add.w	r2, r2, #1
 8000562:	2afe      	cmp	r2, #254	; 0xfe
 8000564:	d251      	bcs.n	800060a <__addsf3+0x136>
 8000566:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800056a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056e:	bf08      	it	eq
 8000570:	f020 0001 	biceq.w	r0, r0, #1
 8000574:	ea40 0003 	orr.w	r0, r0, r3
 8000578:	4770      	bx	lr
 800057a:	0049      	lsls	r1, r1, #1
 800057c:	eb40 0000 	adc.w	r0, r0, r0
 8000580:	3a01      	subs	r2, #1
 8000582:	bf28      	it	cs
 8000584:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000588:	d2ed      	bcs.n	8000566 <__addsf3+0x92>
 800058a:	fab0 fc80 	clz	ip, r0
 800058e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000592:	ebb2 020c 	subs.w	r2, r2, ip
 8000596:	fa00 f00c 	lsl.w	r0, r0, ip
 800059a:	bfaa      	itet	ge
 800059c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005a0:	4252      	neglt	r2, r2
 80005a2:	4318      	orrge	r0, r3
 80005a4:	bfbc      	itt	lt
 80005a6:	40d0      	lsrlt	r0, r2
 80005a8:	4318      	orrlt	r0, r3
 80005aa:	4770      	bx	lr
 80005ac:	f092 0f00 	teq	r2, #0
 80005b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b4:	bf06      	itte	eq
 80005b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005ba:	3201      	addeq	r2, #1
 80005bc:	3b01      	subne	r3, #1
 80005be:	e7b5      	b.n	800052c <__addsf3+0x58>
 80005c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c8:	bf18      	it	ne
 80005ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ce:	d021      	beq.n	8000614 <__addsf3+0x140>
 80005d0:	ea92 0f03 	teq	r2, r3
 80005d4:	d004      	beq.n	80005e0 <__addsf3+0x10c>
 80005d6:	f092 0f00 	teq	r2, #0
 80005da:	bf08      	it	eq
 80005dc:	4608      	moveq	r0, r1
 80005de:	4770      	bx	lr
 80005e0:	ea90 0f01 	teq	r0, r1
 80005e4:	bf1c      	itt	ne
 80005e6:	2000      	movne	r0, #0
 80005e8:	4770      	bxne	lr
 80005ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ee:	d104      	bne.n	80005fa <__addsf3+0x126>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	bf28      	it	cs
 80005f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f8:	4770      	bx	lr
 80005fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fe:	bf3c      	itt	cc
 8000600:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000604:	4770      	bxcc	lr
 8000606:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800060a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000612:	4770      	bx	lr
 8000614:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000618:	bf16      	itet	ne
 800061a:	4608      	movne	r0, r1
 800061c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000620:	4601      	movne	r1, r0
 8000622:	0242      	lsls	r2, r0, #9
 8000624:	bf06      	itte	eq
 8000626:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800062a:	ea90 0f01 	teqeq	r0, r1
 800062e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000632:	4770      	bx	lr

08000634 <__aeabi_ui2f>:
 8000634:	f04f 0300 	mov.w	r3, #0
 8000638:	e004      	b.n	8000644 <__aeabi_i2f+0x8>
 800063a:	bf00      	nop

0800063c <__aeabi_i2f>:
 800063c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000640:	bf48      	it	mi
 8000642:	4240      	negmi	r0, r0
 8000644:	ea5f 0c00 	movs.w	ip, r0
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000650:	4601      	mov	r1, r0
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	e01c      	b.n	8000692 <__aeabi_l2f+0x2a>

08000658 <__aeabi_ul2f>:
 8000658:	ea50 0201 	orrs.w	r2, r0, r1
 800065c:	bf08      	it	eq
 800065e:	4770      	bxeq	lr
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	e00a      	b.n	800067c <__aeabi_l2f+0x14>
 8000666:	bf00      	nop

08000668 <__aeabi_l2f>:
 8000668:	ea50 0201 	orrs.w	r2, r0, r1
 800066c:	bf08      	it	eq
 800066e:	4770      	bxeq	lr
 8000670:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000674:	d502      	bpl.n	800067c <__aeabi_l2f+0x14>
 8000676:	4240      	negs	r0, r0
 8000678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067c:	ea5f 0c01 	movs.w	ip, r1
 8000680:	bf02      	ittt	eq
 8000682:	4684      	moveq	ip, r0
 8000684:	4601      	moveq	r1, r0
 8000686:	2000      	moveq	r0, #0
 8000688:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800068c:	bf08      	it	eq
 800068e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000692:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000696:	fabc f28c 	clz	r2, ip
 800069a:	3a08      	subs	r2, #8
 800069c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006a0:	db10      	blt.n	80006c4 <__aeabi_l2f+0x5c>
 80006a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a6:	4463      	add	r3, ip
 80006a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006ac:	f1c2 0220 	rsb	r2, r2, #32
 80006b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b4:	fa20 f202 	lsr.w	r2, r0, r2
 80006b8:	eb43 0002 	adc.w	r0, r3, r2
 80006bc:	bf08      	it	eq
 80006be:	f020 0001 	biceq.w	r0, r0, #1
 80006c2:	4770      	bx	lr
 80006c4:	f102 0220 	add.w	r2, r2, #32
 80006c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006cc:	f1c2 0220 	rsb	r2, r2, #32
 80006d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d4:	fa21 f202 	lsr.w	r2, r1, r2
 80006d8:	eb43 0002 	adc.w	r0, r3, r2
 80006dc:	bf08      	it	eq
 80006de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006e2:	4770      	bx	lr

080006e4 <__aeabi_uldivmod>:
 80006e4:	b953      	cbnz	r3, 80006fc <__aeabi_uldivmod+0x18>
 80006e6:	b94a      	cbnz	r2, 80006fc <__aeabi_uldivmod+0x18>
 80006e8:	2900      	cmp	r1, #0
 80006ea:	bf08      	it	eq
 80006ec:	2800      	cmpeq	r0, #0
 80006ee:	bf1c      	itt	ne
 80006f0:	f04f 31ff 	movne.w	r1, #4294967295
 80006f4:	f04f 30ff 	movne.w	r0, #4294967295
 80006f8:	f000 b976 	b.w	80009e8 <__aeabi_idiv0>
 80006fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000700:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000704:	f000 f806 	bl	8000714 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4770      	bx	lr

08000714 <__udivmoddi4>:
 8000714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000718:	9e08      	ldr	r6, [sp, #32]
 800071a:	460d      	mov	r5, r1
 800071c:	4604      	mov	r4, r0
 800071e:	4688      	mov	r8, r1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14d      	bne.n	80007c0 <__udivmoddi4+0xac>
 8000724:	428a      	cmp	r2, r1
 8000726:	4694      	mov	ip, r2
 8000728:	d968      	bls.n	80007fc <__udivmoddi4+0xe8>
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	b152      	cbz	r2, 8000746 <__udivmoddi4+0x32>
 8000730:	fa01 f302 	lsl.w	r3, r1, r2
 8000734:	f1c2 0120 	rsb	r1, r2, #32
 8000738:	fa20 f101 	lsr.w	r1, r0, r1
 800073c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000740:	ea41 0803 	orr.w	r8, r1, r3
 8000744:	4094      	lsls	r4, r2
 8000746:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800074a:	fbb8 f7f1 	udiv	r7, r8, r1
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	fb01 8817 	mls	r8, r1, r7, r8
 8000756:	fb07 f00e 	mul.w	r0, r7, lr
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000760:	4298      	cmp	r0, r3
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x66>
 8000764:	eb1c 0303 	adds.w	r3, ip, r3
 8000768:	f107 35ff 	add.w	r5, r7, #4294967295
 800076c:	f080 811e 	bcs.w	80009ac <__udivmoddi4+0x298>
 8000770:	4298      	cmp	r0, r3
 8000772:	f240 811b 	bls.w	80009ac <__udivmoddi4+0x298>
 8000776:	3f02      	subs	r7, #2
 8000778:	4463      	add	r3, ip
 800077a:	1a1b      	subs	r3, r3, r0
 800077c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000780:	fb01 3310 	mls	r3, r1, r0, r3
 8000784:	fb00 fe0e 	mul.w	lr, r0, lr
 8000788:	b2a4      	uxth	r4, r4
 800078a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800078e:	45a6      	cmp	lr, r4
 8000790:	d90a      	bls.n	80007a8 <__udivmoddi4+0x94>
 8000792:	eb1c 0404 	adds.w	r4, ip, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295
 800079a:	f080 8109 	bcs.w	80009b0 <__udivmoddi4+0x29c>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f240 8106 	bls.w	80009b0 <__udivmoddi4+0x29c>
 80007a4:	4464      	add	r4, ip
 80007a6:	3802      	subs	r0, #2
 80007a8:	2100      	movs	r1, #0
 80007aa:	eba4 040e 	sub.w	r4, r4, lr
 80007ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007b2:	b11e      	cbz	r6, 80007bc <__udivmoddi4+0xa8>
 80007b4:	2300      	movs	r3, #0
 80007b6:	40d4      	lsrs	r4, r2
 80007b8:	e9c6 4300 	strd	r4, r3, [r6]
 80007bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d908      	bls.n	80007d6 <__udivmoddi4+0xc2>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	f000 80ee 	beq.w	80009a6 <__udivmoddi4+0x292>
 80007ca:	2100      	movs	r1, #0
 80007cc:	e9c6 0500 	strd	r0, r5, [r6]
 80007d0:	4608      	mov	r0, r1
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d6:	fab3 f183 	clz	r1, r3
 80007da:	2900      	cmp	r1, #0
 80007dc:	d14a      	bne.n	8000874 <__udivmoddi4+0x160>
 80007de:	42ab      	cmp	r3, r5
 80007e0:	d302      	bcc.n	80007e8 <__udivmoddi4+0xd4>
 80007e2:	4282      	cmp	r2, r0
 80007e4:	f200 80fc 	bhi.w	80009e0 <__udivmoddi4+0x2cc>
 80007e8:	1a84      	subs	r4, r0, r2
 80007ea:	eb65 0303 	sbc.w	r3, r5, r3
 80007ee:	2001      	movs	r0, #1
 80007f0:	4698      	mov	r8, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d0e2      	beq.n	80007bc <__udivmoddi4+0xa8>
 80007f6:	e9c6 4800 	strd	r4, r8, [r6]
 80007fa:	e7df      	b.n	80007bc <__udivmoddi4+0xa8>
 80007fc:	b902      	cbnz	r2, 8000800 <__udivmoddi4+0xec>
 80007fe:	deff      	udf	#255	; 0xff
 8000800:	fab2 f282 	clz	r2, r2
 8000804:	2a00      	cmp	r2, #0
 8000806:	f040 8091 	bne.w	800092c <__udivmoddi4+0x218>
 800080a:	eba1 000c 	sub.w	r0, r1, ip
 800080e:	2101      	movs	r1, #1
 8000810:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000814:	fa1f fe8c 	uxth.w	lr, ip
 8000818:	fbb0 f3f7 	udiv	r3, r0, r7
 800081c:	fb07 0013 	mls	r0, r7, r3, r0
 8000820:	0c25      	lsrs	r5, r4, #16
 8000822:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000826:	fb0e f003 	mul.w	r0, lr, r3
 800082a:	42a8      	cmp	r0, r5
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x12c>
 800082e:	eb1c 0505 	adds.w	r5, ip, r5
 8000832:	f103 38ff 	add.w	r8, r3, #4294967295
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x12a>
 8000838:	42a8      	cmp	r0, r5
 800083a:	f200 80ce 	bhi.w	80009da <__udivmoddi4+0x2c6>
 800083e:	4643      	mov	r3, r8
 8000840:	1a2d      	subs	r5, r5, r0
 8000842:	fbb5 f0f7 	udiv	r0, r5, r7
 8000846:	fb07 5510 	mls	r5, r7, r0, r5
 800084a:	fb0e fe00 	mul.w	lr, lr, r0
 800084e:	b2a4      	uxth	r4, r4
 8000850:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000854:	45a6      	cmp	lr, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x156>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000860:	d202      	bcs.n	8000868 <__udivmoddi4+0x154>
 8000862:	45a6      	cmp	lr, r4
 8000864:	f200 80b6 	bhi.w	80009d4 <__udivmoddi4+0x2c0>
 8000868:	4628      	mov	r0, r5
 800086a:	eba4 040e 	sub.w	r4, r4, lr
 800086e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000872:	e79e      	b.n	80007b2 <__udivmoddi4+0x9e>
 8000874:	f1c1 0720 	rsb	r7, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 fc07 	lsr.w	ip, r2, r7
 800087e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000882:	fa25 fa07 	lsr.w	sl, r5, r7
 8000886:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800088a:	fbba f8f9 	udiv	r8, sl, r9
 800088e:	fa20 f307 	lsr.w	r3, r0, r7
 8000892:	fb09 aa18 	mls	sl, r9, r8, sl
 8000896:	408d      	lsls	r5, r1
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	431d      	orrs	r5, r3
 800089e:	fa00 f301 	lsl.w	r3, r0, r1
 80008a2:	fb08 f00e 	mul.w	r0, r8, lr
 80008a6:	0c2c      	lsrs	r4, r5, #16
 80008a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008ac:	42a0      	cmp	r0, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d90b      	bls.n	80008cc <__udivmoddi4+0x1b8>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008bc:	f080 8088 	bcs.w	80009d0 <__udivmoddi4+0x2bc>
 80008c0:	42a0      	cmp	r0, r4
 80008c2:	f240 8085 	bls.w	80009d0 <__udivmoddi4+0x2bc>
 80008c6:	f1a8 0802 	sub.w	r8, r8, #2
 80008ca:	4464      	add	r4, ip
 80008cc:	1a24      	subs	r4, r4, r0
 80008ce:	fbb4 f0f9 	udiv	r0, r4, r9
 80008d2:	fb09 4410 	mls	r4, r9, r0, r4
 80008d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80008da:	b2ad      	uxth	r5, r5
 80008dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008e0:	45a6      	cmp	lr, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x1e2>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008ec:	d26c      	bcs.n	80009c8 <__udivmoddi4+0x2b4>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	d96a      	bls.n	80009c8 <__udivmoddi4+0x2b4>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4464      	add	r4, ip
 80008f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008fa:	fba0 9502 	umull	r9, r5, r0, r2
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	42ac      	cmp	r4, r5
 8000904:	46c8      	mov	r8, r9
 8000906:	46ae      	mov	lr, r5
 8000908:	d356      	bcc.n	80009b8 <__udivmoddi4+0x2a4>
 800090a:	d053      	beq.n	80009b4 <__udivmoddi4+0x2a0>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d069      	beq.n	80009e4 <__udivmoddi4+0x2d0>
 8000910:	ebb3 0208 	subs.w	r2, r3, r8
 8000914:	eb64 040e 	sbc.w	r4, r4, lr
 8000918:	fa22 f301 	lsr.w	r3, r2, r1
 800091c:	fa04 f707 	lsl.w	r7, r4, r7
 8000920:	431f      	orrs	r7, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c6 7400 	strd	r7, r4, [r6]
 8000928:	2100      	movs	r1, #0
 800092a:	e747      	b.n	80007bc <__udivmoddi4+0xa8>
 800092c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000930:	f1c2 0120 	rsb	r1, r2, #32
 8000934:	fa25 f301 	lsr.w	r3, r5, r1
 8000938:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093c:	fa20 f101 	lsr.w	r1, r0, r1
 8000940:	4095      	lsls	r5, r2
 8000942:	430d      	orrs	r5, r1
 8000944:	fbb3 f1f7 	udiv	r1, r3, r7
 8000948:	fb07 3311 	mls	r3, r7, r1, r3
 800094c:	fa1f fe8c 	uxth.w	lr, ip
 8000950:	0c28      	lsrs	r0, r5, #16
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	fb01 f30e 	mul.w	r3, r1, lr
 800095a:	4283      	cmp	r3, r0
 800095c:	fa04 f402 	lsl.w	r4, r4, r2
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x260>
 8000962:	eb1c 0000 	adds.w	r0, ip, r0
 8000966:	f101 38ff 	add.w	r8, r1, #4294967295
 800096a:	d22f      	bcs.n	80009cc <__udivmoddi4+0x2b8>
 800096c:	4283      	cmp	r3, r0
 800096e:	d92d      	bls.n	80009cc <__udivmoddi4+0x2b8>
 8000970:	3902      	subs	r1, #2
 8000972:	4460      	add	r0, ip
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	fbb0 f3f7 	udiv	r3, r0, r7
 800097a:	fb07 0013 	mls	r0, r7, r3, r0
 800097e:	b2ad      	uxth	r5, r5
 8000980:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000984:	fb03 f00e 	mul.w	r0, r3, lr
 8000988:	42a8      	cmp	r0, r5
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x28a>
 800098c:	eb1c 0505 	adds.w	r5, ip, r5
 8000990:	f103 38ff 	add.w	r8, r3, #4294967295
 8000994:	d216      	bcs.n	80009c4 <__udivmoddi4+0x2b0>
 8000996:	42a8      	cmp	r0, r5
 8000998:	d914      	bls.n	80009c4 <__udivmoddi4+0x2b0>
 800099a:	3b02      	subs	r3, #2
 800099c:	4465      	add	r5, ip
 800099e:	1a28      	subs	r0, r5, r0
 80009a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a4:	e738      	b.n	8000818 <__udivmoddi4+0x104>
 80009a6:	4631      	mov	r1, r6
 80009a8:	4630      	mov	r0, r6
 80009aa:	e707      	b.n	80007bc <__udivmoddi4+0xa8>
 80009ac:	462f      	mov	r7, r5
 80009ae:	e6e4      	b.n	800077a <__udivmoddi4+0x66>
 80009b0:	4618      	mov	r0, r3
 80009b2:	e6f9      	b.n	80007a8 <__udivmoddi4+0x94>
 80009b4:	454b      	cmp	r3, r9
 80009b6:	d2a9      	bcs.n	800090c <__udivmoddi4+0x1f8>
 80009b8:	ebb9 0802 	subs.w	r8, r9, r2
 80009bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009c0:	3801      	subs	r0, #1
 80009c2:	e7a3      	b.n	800090c <__udivmoddi4+0x1f8>
 80009c4:	4643      	mov	r3, r8
 80009c6:	e7ea      	b.n	800099e <__udivmoddi4+0x28a>
 80009c8:	4628      	mov	r0, r5
 80009ca:	e794      	b.n	80008f6 <__udivmoddi4+0x1e2>
 80009cc:	4641      	mov	r1, r8
 80009ce:	e7d1      	b.n	8000974 <__udivmoddi4+0x260>
 80009d0:	46d0      	mov	r8, sl
 80009d2:	e77b      	b.n	80008cc <__udivmoddi4+0x1b8>
 80009d4:	4464      	add	r4, ip
 80009d6:	3802      	subs	r0, #2
 80009d8:	e747      	b.n	800086a <__udivmoddi4+0x156>
 80009da:	3b02      	subs	r3, #2
 80009dc:	4465      	add	r5, ip
 80009de:	e72f      	b.n	8000840 <__udivmoddi4+0x12c>
 80009e0:	4608      	mov	r0, r1
 80009e2:	e706      	b.n	80007f2 <__udivmoddi4+0xde>
 80009e4:	4631      	mov	r1, r6
 80009e6:	e6e9      	b.n	80007bc <__udivmoddi4+0xa8>

080009e8 <__aeabi_idiv0>:
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <readRegister+0x50>)
 80009fe:	f002 ffac 	bl	800395a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f002 f9fe 	bl	8002e04 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000a08:	1cf9      	adds	r1, r7, #3
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f003 fe54 	bl	80046bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000a14:	f107 010f 	add.w	r1, r7, #15
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f003 ff89 	bl	8004934 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f002 f9ee 	bl	8002e04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <readRegister+0x50>)
 8000a2e:	f002 ff94 	bl	800395a <HAL_GPIO_WritePin>
	return rec;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	72fb      	strb	r3, [r7, #11]
 8000a50:	4613      	mov	r3, r2
 8000a52:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a7e:	e00f      	b.n	8000aa0 <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 8000a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	637a      	str	r2, [r7, #52]	; 0x34
 8000a86:	461a      	mov	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7819      	ldrb	r1, [r3, #0]
 8000a8e:	f107 0210 	add.w	r2, r7, #16
 8000a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a94:	4413      	add	r3, r2
 8000a96:	460a      	mov	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000aa0:	7abb      	ldrb	r3, [r7, #10]
 8000aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	ddeb      	ble.n	8000a80 <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <writeRegister+0xa4>)
 8000aae:	f002 ff54 	bl	800395a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000ab2:	7abb      	ldrb	r3, [r7, #10]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f107 0110 	add.w	r1, r7, #16
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f003 fdfa 	bl	80046bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2101      	movs	r1, #1
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <writeRegister+0xa4>)
 8000ace:	f002 ff44 	bl	800395a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f002 f996 	bl	8002e04 <HAL_Delay>
	return cmd;  // pull the pin high
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3738      	adds	r7, #56	; 0x38
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <setRFFrequency>:

void setRFFrequency(SX1278_t *module) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	f04f 0100 	mov.w	r1, #0
 8000afe:	04d9      	lsls	r1, r3, #19
 8000b00:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000b04:	04d0      	lsls	r0, r2, #19
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <setRFFrequency+0x80>)
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	f7ff fdea 	bl	80006e4 <__aeabi_uldivmod>
 8000b10:	4602      	mov	r2, r0
 8000b12:	460b      	mov	r3, r1
 8000b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000b18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	0c02      	lsrs	r2, r0, #16
 8000b26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b2a:	0c0b      	lsrs	r3, r1, #16
 8000b2c:	b2d3      	uxtb	r3, r2
 8000b2e:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000b30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	0a02      	lsrs	r2, r0, #8
 8000b3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000b42:	0a0b      	lsrs	r3, r1, #8
 8000b44:	b2d3      	uxtb	r3, r2
 8000b46:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000b48:	7c3b      	ldrb	r3, [r7, #16]
 8000b4a:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000b52:	f107 020c 	add.w	r2, r7, #12
 8000b56:	2303      	movs	r3, #3
 8000b58:	2106      	movs	r1, #6
 8000b5a:	f7ff ff71 	bl	8000a40 <writeRegister>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	01e84800 	.word	0x01e84800

08000b6c <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 0210 	add.w	r2, r3, #16
 8000b80:	2301      	movs	r3, #1
 8000b82:	2109      	movs	r1, #9
 8000b84:	f7ff ff5c 	bl	8000a40 <writeRegister>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 0216 	add.w	r2, r3, #22
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2139      	movs	r1, #57	; 0x39
 8000ba8:	f7ff ff4a 	bl	8000a40 <writeRegister>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f103 0217 	add.w	r2, r3, #23
 8000bc8:	2301      	movs	r3, #1
 8000bca:	210b      	movs	r1, #11
 8000bcc:	f7ff ff38 	bl	8000a40 <writeRegister>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 021a 	add.w	r2, r3, #26
 8000bec:	2301      	movs	r3, #1
 8000bee:	211f      	movs	r1, #31
 8000bf0:	f7ff ff26 	bl	8000a40 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f103 021c 	add.w	r2, r3, #28
 8000c00:	2301      	movs	r3, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	f7ff ff1c 	bl	8000a40 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 021d 	add.w	r2, r3, #29
 8000c14:	2301      	movs	r3, #1
 8000c16:	2121      	movs	r1, #33	; 0x21
 8000c18:	f7ff ff12 	bl	8000a40 <writeRegister>
			1);
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7c9b      	ldrb	r3, [r3, #18]
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7cdb      	ldrb	r3, [r3, #19]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000c5e:	f107 020f 	add.w	r2, r7, #15
 8000c62:	2301      	movs	r3, #1
 8000c64:	211d      	movs	r1, #29
 8000c66:	f7ff feeb 	bl	8000a40 <writeRegister>

	cmd = module->LoRa_SF << 4;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7c5b      	ldrb	r3, [r3, #17]
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7d1b      	ldrb	r3, [r3, #20]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7eda      	ldrb	r2, [r3, #27]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000c96:	f107 020f 	add.w	r2, r7, #15
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	211e      	movs	r1, #30
 8000c9e:	f7ff fecf 	bl	8000a40 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f103 0219 	add.w	r2, r3, #25
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2126      	movs	r1, #38	; 0x26
 8000cb2:	f7ff fec5 	bl	8000a40 <writeRegister>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <setDetectionParameters>:

void setDetectionParameters(SX1278_t *module) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000ccc:	2131      	movs	r1, #49	; 0x31
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe8c 	bl	80009ec <readRegister>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f023 0307 	bic.w	r3, r3, #7
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	f043 0305 	orr.w	r3, r3, #5
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000cf2:	f107 020f 	add.w	r2, r7, #15
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	2131      	movs	r1, #49	; 0x31
 8000cfa:	f7ff fea1 	bl	8000a40 <writeRegister>
	tmp = 0x0C;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000d08:	f107 020f 	add.w	r2, r7, #15
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	2137      	movs	r1, #55	; 0x37
 8000d10:	f7ff fe96 	bl	8000a40 <writeRegister>
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <updateLoraLowFreq>:
SX1278_Status_t readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000d38:	f107 020f 	add.w	r2, r7, #15
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	2101      	movs	r1, #1
 8000d40:	f7ff fe7e 	bl	8000a40 <writeRegister>
	module->operatingMode = mode;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <clearIrqFlags>:

void clearIrqFlags(SX1278_t *module) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000d5c:	23ff      	movs	r3, #255	; 0xff
 8000d5e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000d66:	f107 020f 	add.w	r2, r7, #15
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2112      	movs	r1, #18
 8000d6e:	f7ff fe67 	bl	8000a40 <writeRegister>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <writeLoRaParameters>:

void writeLoRaParameters(SX1278_t *module) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffc9 	bl	8000d1c <updateLoraLowFreq>
	HAL_Delay(15);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f002 f83a 	bl	8002e04 <HAL_Delay>
	setRFFrequency(module);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fea9 	bl	8000ae8 <setRFFrequency>
	setLORAWAN(module);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fefa 	bl	8000b90 <setLORAWAN>
	setOutputPower(module);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fee5 	bl	8000b6c <setOutputPower>
	setOvercurrentProtect(module);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff06 	bl	8000bb4 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f103 0218 	add.w	r2, r3, #24
 8000db4:	2301      	movs	r3, #1
 8000db6:	210c      	movs	r1, #12
 8000db8:	f7ff fe42 	bl	8000a40 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7c5b      	ldrb	r3, [r3, #17]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d10a      	bne.n	8000dda <writeLoRaParameters+0x60>
		module->headerMode = IMPLICIT;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2203      	movs	r2, #3
 8000dd0:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff73 	bl	8000cbe <setDetectionParameters>
 8000dd8:	e006      	b.n	8000de8 <writeLoRaParameters+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff1b 	bl	8000c24 <setReModemConfig>
	setPreambleParameters(module);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fef2 	bl	8000bd8 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f103 021e 	add.w	r2, r3, #30
 8000e00:	2301      	movs	r3, #1
 8000e02:	2124      	movs	r1, #36	; 0x24
 8000e04:	f7ff fe1c 	bl	8000a40 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f103 021f 	add.w	r2, r3, #31
 8000e14:	2301      	movs	r3, #1
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	f7ff fe12 	bl	8000a40 <writeRegister>
	clearIrqFlags(module);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff99 	bl	8000d54 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f103 0220 	add.w	r2, r3, #32
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2111      	movs	r1, #17
 8000e32:	f7ff fe05 	bl	8000a40 <writeRegister>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <updateMode>:

void updateMode(SX1278_t *module, Lora_Mode_t mode) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
	if (mode == MASTER) {
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d11e      	bne.n	8000e90 <updateMode+0x50>
		module->frequency = DOWNLINK_FREQ;
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	a336      	add	r3, pc, #216	; (adr r3, 8000f30 <updateMode+0xf0>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2241      	movs	r2, #65	; 0x41
 8000e62:	77da      	strb	r2, [r3, #31]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e72:	f023 0308 	bic.w	r3, r3, #8
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
		module->mode = mode;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = TX_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000e8e:	e029      	b.n	8000ee4 <updateMode+0xa4>

	} else if (mode == SLAVE) {
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d126      	bne.n	8000ee4 <updateMode+0xa4>
		module->frequency = UPLINK_FREQ;
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	a327      	add	r3, pc, #156	; (adr r3, 8000f38 <updateMode+0xf8>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	77da      	strb	r2, [r3, #31]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
		CLEAR_BIT(module->flagsMode, RX_DONE_MASK);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
		CLEAR_BIT(module->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	f023 0320 	bic.w	r3, r3, #32
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]
		module->mode = mode;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = RX_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	updateLoraLowFreq(module, STANDBY);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff18 	bl	8000d1c <updateLoraLowFreq>
	HAL_Delay(15);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f001 ff89 	bl	8002e04 <HAL_Delay>
	setRFFrequency(module);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fdf8 	bl	8000ae8 <setRFFrequency>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 021f 	add.w	r2, r3, #31
 8000f04:	2301      	movs	r3, #1
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	f7ff fd9a 	bl	8000a40 <writeRegister>
	clearIrqFlags(module);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff21 	bl	8000d54 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f103 0220 	add.w	r2, r3, #32
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2111      	movs	r1, #17
 8000f22:	f7ff fd8d 	bl	8000a40 <writeRegister>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08f0d180 	.word	0x08f0d180
 8000f34:	00000000 	.word	0x00000000
 8000f38:	0a21fe80 	.word	0x0a21fe80
 8000f3c:	00000000 	.word	0x00000000

08000f40 <initLoRaParameters>:

void initLoRaParameters(SX1278_t *module, Lora_Mode_t mode) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	module->power = SX1278_POWER_17DBM;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	22fc      	movs	r2, #252	; 0xfc
 8000f50:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = SF_10;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	220a      	movs	r2, #10
 8000f56:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LORABW_62_5KHZ;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2206      	movs	r2, #6
 8000f5c:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LORA_CR_4_6;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2202      	movs	r2, #2
 8000f62:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = CRC_ENABLE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	751a      	strb	r2, [r3, #20]
	module->syncWord = LORAWAN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2234      	movs	r2, #52	; 0x34
 8000f6e:	759a      	strb	r2, [r3, #22]
	module->ocp = OVERCURRENTPROTECT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	220b      	movs	r2, #11
 8000f74:	75da      	strb	r2, [r3, #23]
	module->lnaGain = LNAGAIN;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2223      	movs	r2, #35	; 0x23
 8000f7a:	761a      	strb	r2, [r3, #24]
	module->AgcAutoOn = LNA_SET_BY_AGC;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	765a      	strb	r2, [r3, #25]
	module->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	769a      	strb	r2, [r3, #26]
	module->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	771a      	strb	r2, [r3, #28]
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2208      	movs	r2, #8
 8000f92:	775a      	strb	r2, [r3, #29]
	module->fhssValue = HOPS_PERIOD;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	779a      	strb	r2, [r3, #30]
	module->len = SX1278_MAX_PACKET;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	755a      	strb	r2, [r3, #21]
	updateMode(module, mode);
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff4b 	bl	8000e40 <updateMode>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f002 fcb0 	bl	800392c <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <ledInit+0x60>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <ledInit+0x60>)
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <ledInit+0x60>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <ledInit+0x60>)
 8000ffa:	f023 0320 	bic.w	r3, r3, #32
 8000ffe:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <ledInit+0x60>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <ledInit+0x60>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <ledInit+0x60>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <ledInit+0x60>)
 8001012:	f023 0310 	bic.w	r3, r3, #16
 8001016:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <ledInit+0x60>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <ledInit+0x60>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <ledInit+0x60>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <ledInit+0x60>)
 800102a:	f023 0308 	bic.w	r3, r3, #8
 800102e:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f835 	bl	80010a0 <led_reset>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010c00 	.word	0x40010c00

08001044 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 800104c:	f001 fed0 	bl	8002df0 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105c:	d90b      	bls.n	8001076 <led_enable_kalive+0x32>
		l->kaCounter = HAL_GetTick();
 800105e:	f001 fec7 	bl	8002df0 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <led_enable_kalive+0x58>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <led_enable_kalive+0x58>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 8001074:	e00d      	b.n	8001092 <led_enable_kalive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 8001076:	f001 febb 	bl	8002df0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b32      	cmp	r3, #50	; 0x32
 8001084:	d905      	bls.n	8001092 <led_enable_kalive+0x4e>
		SYS_RP_LED_OFF();
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <led_enable_kalive+0x58>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <led_enable_kalive+0x58>)
 800108c:	f023 0320 	bic.w	r3, r3, #32
 8001090:	60d3      	str	r3, [r2, #12]
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010c00 	.word	0x40010c00

080010a0 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 80010ba:	f001 fe99 	bl	8002df0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_UART_RxCpltCallback>:

/* In the interrupt handler, read the received data from the UART1 data register */
/* Enable UART1 interrupt */

uint8_t rxData;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */
	if (uart1_ptr->len >= RX_BUFFLEN) {
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_UART_RxCpltCallback+0x54>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80010f0:	2b63      	cmp	r3, #99	; 0x63
 80010f2:	d909      	bls.n	8001108 <HAL_UART_RxCpltCallback+0x28>
		cleanRxBuffer(uart1_ptr);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_UART_RxCpltCallback+0x54>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fdd6 	bl	8002caa <cleanRxBuffer>
		uart1_ptr->len = 0;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_UART_RxCpltCallback+0x54>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	490b      	ldr	r1, [pc, #44]	; (8001138 <HAL_UART_RxCpltCallback+0x58>)
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_UART_RxCpltCallback+0x5c>)
 800110e:	f004 f80a 	bl	8005126 <HAL_UART_Receive_IT>
	uart1_ptr->rxBuffer[uart1_ptr->len++] = rxData;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_UART_RxCpltCallback+0x54>)
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_UART_RxCpltCallback+0x54>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 800111e:	1c50      	adds	r0, r2, #1
 8001120:	b2c0      	uxtb	r0, r0
 8001122:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_UART_RxCpltCallback+0x58>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	548b      	strb	r3, [r1, r2]
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000023c 	.word	0x2000023c
 8001138:	2000024c 	.word	0x2000024c
 800113c:	20000170 	.word	0x20000170

08001140 <setTxFifoAddr>:
		ITM_SendChar(*ptr++);
	}
	return len;
}

void setTxFifoAddr(SX1278_t *module) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d5b      	ldrb	r3, [r3, #21]
 800114c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8001154:	f107 020f 	add.w	r2, r7, #15
 8001158:	2301      	movs	r3, #1
 800115a:	2122      	movs	r1, #34	; 0x22
 800115c:	f7ff fc70 	bl	8000a40 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001166:	210e      	movs	r1, #14
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc3f 	bl	80009ec <readRegister>
 800116e:	4603      	mov	r3, r0
 8001170:	73bb      	strb	r3, [r7, #14]
	addr = 0x80;
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 800117c:	f107 020e 	add.w	r2, r7, #14
 8001180:	2301      	movs	r3, #1
 8001182:	210d      	movs	r1, #13
 8001184:	f7ff fc5c 	bl	8000a40 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800118e:	2122      	movs	r1, #34	; 0x22
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fc2b 	bl	80009ec <readRegister>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	755a      	strb	r2, [r3, #21]
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <sx1278Reset>:

void sx1278Reset() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <sx1278Reset+0x34>)
 80011b2:	f002 fbd2 	bl	800395a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <sx1278Reset+0x34>)
 80011bc:	f002 fbcd 	bl	800395a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f001 fe1f 	bl	8002e04 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2101      	movs	r1, #1
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <sx1278Reset+0x34>)
 80011cc:	f002 fbc5 	bl	800395a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011d0:	2064      	movs	r0, #100	; 0x64
 80011d2:	f001 fe17 	bl	8002e04 <HAL_Delay>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <setRxFifoAddr>:

void setRxFifoAddr(SX1278_t *module) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80011e8:	2100      	movs	r1, #0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd96 	bl	8000d1c <updateLoraLowFreq>
	uint8_t cmd = module->len;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7d5b      	ldrb	r3, [r3, #21]
 80011f4:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 80011fc:	f107 020f 	add.w	r2, r7, #15
 8001200:	2301      	movs	r3, #1
 8001202:	2122      	movs	r1, #34	; 0x22
 8001204:	f7ff fc1c 	bl	8000a40 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800120e:	210f      	movs	r1, #15
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbeb 	bl	80009ec <readRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8001220:	f107 020e 	add.w	r2, r7, #14
 8001224:	2301      	movs	r3, #1
 8001226:	210d      	movs	r1, #13
 8001228:	f7ff fc0a 	bl	8000a40 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001232:	2122      	movs	r1, #34	; 0x22
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fbd9 	bl	80009ec <readRegister>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	755a      	strb	r2, [r3, #21]
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <clearMemForRx>:

void clearMemForRx(SX1278_t *loRa) {
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	if (loRa->status == RX_READY) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001258:	2b02      	cmp	r3, #2
 800125a:	d107      	bne.n	800126c <clearMemForRx+0x22>
		memset(loRa->buffer, 0, SX1278_MAX_PACKET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3330      	adds	r3, #48	; 0x30
 8001260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fba4 	bl	80059b4 <memset>
	}
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <waitForRxDone>:

uint8_t waitForRxDone(SX1278_t *loRa) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint32_t timeout = HAL_GetTick();
 800127c:	f001 fdb8 	bl	8002df0 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]
	while ((!SX1278_hw_GetDIO0(loRa->hw))) {
 8001282:	e02f      	b.n	80012e4 <waitForRxDone+0x70>
		uint8_t flags = readRegister(loRa->spi, LR_RegIrqFlags);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800128a:	2112      	movs	r1, #18
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fbad 	bl	80009ec <readRegister>
 8001292:	4603      	mov	r3, r0
 8001294:	72fb      	strb	r3, [r7, #11]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	2b00      	cmp	r3, #0
 800129e:	d016      	beq.n	80012ce <waitForRxDone+0x5a>
			uint8_t cmd = flags | (1 << 7);
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	72bb      	strb	r3, [r7, #10]
			writeRegister(loRa->spi, LR_RegIrqFlags, &cmd, 1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 80012b0:	f107 020a 	add.w	r2, r7, #10
 80012b4:	2301      	movs	r3, #1
 80012b6:	2112      	movs	r1, #18
 80012b8:	f7ff fbc2 	bl	8000a40 <writeRegister>
			flags = readRegister(loRa->spi, LR_RegIrqFlags);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80012c2:	2112      	movs	r1, #18
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fb91 	bl	80009ec <readRegister>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72fb      	strb	r3, [r7, #11]
		}
		if ((HAL_GetTick() - timeout > 5000))
 80012ce:	f001 fd8f 	bl	8002df0 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <waitForRxDone+0x70>
			return -1;
 80012e0:	23ff      	movs	r3, #255	; 0xff
 80012e2:	e008      	b.n	80012f6 <waitForRxDone+0x82>
	while ((!SX1278_hw_GetDIO0(loRa->hw))) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe62 	bl	8000fb2 <SX1278_hw_GetDIO0>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0c7      	beq.n	8001284 <waitForRxDone+0x10>
	}
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <getRxFifoData>:
	uint8_t flags = readRegister(loRa->spi, LR_RegIrqFlags);
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

void getRxFifoData(SX1278_t *loRa) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	loRa->len = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800130e:	2113      	movs	r1, #19
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fb6b 	bl	80009ec <readRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <getRxFifoData+0x74>)
 8001328:	f002 fb17 	bl	800395a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f001 fd69 	bl	8002e04 <HAL_Delay>
	HAL_SPI_Transmit(loRa->spi, &addr, 1, 100); // send address
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 8001338:	f107 010f 	add.w	r1, r7, #15
 800133c:	2364      	movs	r3, #100	; 0x64
 800133e:	2201      	movs	r2, #1
 8001340:	f003 f9bc 	bl	80046bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(loRa->spi, loRa->buffer, loRa->len, 100); // receive 6 bytes data
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7d5b      	ldrb	r3, [r3, #21]
 8001354:	b29a      	uxth	r2, r3
 8001356:	2364      	movs	r3, #100	; 0x64
 8001358:	f003 faec 	bl	8004934 <HAL_SPI_Receive>
	HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 fd51 	bl	8002e04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <getRxFifoData+0x74>)
 8001368:	f002 faf7 	bl	800395a <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010c00 	.word	0x40010c00

08001378 <decodeVLAD>:
}

bool TX_MODE;
bool RX_MODE;

Vlad_t decodeVLAD(SX1278_t *loRa) {
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	Vlad_t vlad;
	vlad.vin = loRa->buffer[6];
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001388:	b29b      	uxth	r3, r3
 800138a:	83bb      	strh	r3, [r7, #28]
	vlad.vin2 = loRa->buffer[7];
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001392:	b29b      	uxth	r3, r3
 8001394:	86fb      	strh	r3, [r7, #54]	; 0x36
	vlad.current_real = loRa->buffer[8];
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f949 	bl	8000634 <__aeabi_ui2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	vlad.current_real2 = loRa->buffer[9];
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	877b      	strh	r3, [r7, #58]	; 0x3a
	vlad.tone_level = loRa->buffer[10];
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	833b      	strh	r3, [r7, #24]
	vlad.tone_level2 = loRa->buffer[11];
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	vlad.current = loRa->buffer[12];
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	83fb      	strh	r3, [r7, #30]
	vlad.current2 = loRa->buffer[13];
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	873b      	strh	r3, [r7, #56]	; 0x38
	vlad.agc150m = loRa->buffer[14];
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013de:	b29b      	uxth	r3, r3
 80013e0:	81bb      	strh	r3, [r7, #12]
	vlad.level150m = loRa->buffer[15];
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	823b      	strh	r3, [r7, #16]
	vlad.agc170m = loRa->buffer[16];
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	827b      	strh	r3, [r7, #18]
	vlad.level170m = loRa->buffer[17];
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	82fb      	strh	r3, [r7, #22]
	return vlad;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	461d      	mov	r5, r3
 8001404:	f107 040c 	add.w	r4, r7, #12
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	602b      	str	r3, [r5, #0]
}
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	3740      	adds	r7, #64	; 0x40
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}

08001420 <modeCmdUpdate>:

void modeCmdUpdate(UART1_t *uart1) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1_ptr->rxBuffer[4] << 8;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <modeCmdUpdate+0x4c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1_ptr->rxBuffer[5];
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <modeCmdUpdate+0x4c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <modeCmdUpdate+0x34>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2108      	movs	r1, #8
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <modeCmdUpdate+0x50>)
 8001450:	f002 fa83 	bl	800395a <HAL_GPIO_WritePin>
	}
	if (receiveValue == 1) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d104      	bne.n	8001464 <modeCmdUpdate+0x44>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2108      	movs	r1, #8
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <modeCmdUpdate+0x50>)
 8001460:	f002 fa7b 	bl	800395a <HAL_GPIO_WritePin>
	}
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000023c 	.word	0x2000023c
 8001470:	40010c00 	.word	0x40010c00

08001474 <modeRs485Update>:

void modeRs485Update(UART1_t *uart1, RS485_t *rs485, SX1278_t *loRa) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b092      	sub	sp, #72	; 0x48
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	Vlad_t vlad;
	switch (rs485->cmd) {
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b11      	cmp	r3, #17
 8001486:	d015      	beq.n	80014b4 <modeRs485Update+0x40>
 8001488:	2b12      	cmp	r3, #18
 800148a:	d000      	beq.n	800148e <modeRs485Update+0x1a>
		rs485->cmd = NONE;
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
		rs485->len = 0;
		break;
	default:
		break;
 800148c:	e013      	b.n	80014b6 <modeRs485Update+0x42>
		modeCmdUpdate(uart1_ptr);
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <modeRs485Update+0x4c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffc4 	bl	8001420 <modeCmdUpdate>
		rs485->cmd = NONE;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3302      	adds	r3, #2
 80014a2:	2264      	movs	r2, #100	; 0x64
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fa84 	bl	80059b4 <memset>
		rs485->len = 0;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2200      	movs	r2, #0
 80014b0:	705a      	strb	r2, [r3, #1]
		break;
 80014b2:	e000      	b.n	80014b6 <modeRs485Update+0x42>
		break;
 80014b4:	bf00      	nop
	}

}
 80014b6:	bf00      	nop
 80014b8:	3748      	adds	r7, #72	; 0x48
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000023c 	.word	0x2000023c

080014c4 <print_parameters>:

void print_parameters(UART1_t *u, Vlad_t vlad) {
 80014c4:	b084      	sub	sp, #16
 80014c6:	b590      	push	{r4, r7, lr}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80014d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t len = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]

	len = sprintf((char*) u->txBuffer, "vin %d[V]\r\n", vlad.vin);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3364      	adds	r3, #100	; 0x64
 80014de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80014e0:	4968      	ldr	r1, [pc, #416]	; (8001684 <print_parameters+0x1c0>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f004 fa6e 	bl	80059c4 <siprintf>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3364      	adds	r3, #100	; 0x64
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fbb5 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "vin2 %d[V]\r\n", vlad.vin2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3364      	adds	r3, #100	; 0x64
 80014fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001502:	4961      	ldr	r1, [pc, #388]	; (8001688 <print_parameters+0x1c4>)
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fa5d 	bl	80059c4 <siprintf>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3364      	adds	r3, #100	; 0x64
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fba4 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current real %d[A]\r\n",
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 0464 	add.w	r4, r3, #100	; 0x64
			vlad.current_real);
 8001522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	len = sprintf((char*) u->txBuffer, "current real %d[A]\r\n",
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff77 	bl	8000418 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4957      	ldr	r1, [pc, #348]	; (800168c <print_parameters+0x1c8>)
 8001530:	4620      	mov	r0, r4
 8001532:	f004 fa47 	bl	80059c4 <siprintf>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3364      	adds	r3, #100	; 0x64
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fb8e 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current real2  %d[A]\r\n",
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3364      	adds	r3, #100	; 0x64
			vlad.current_real2);
 800154c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
	len = sprintf((char*) u->txBuffer, "current real2  %d[A]\r\n",
 8001550:	494f      	ldr	r1, [pc, #316]	; (8001690 <print_parameters+0x1cc>)
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fa36 	bl	80059c4 <siprintf>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3364      	adds	r3, #100	; 0x64
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb7d 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "tone level %d[dBm]\r\n",
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3364      	adds	r3, #100	; 0x64
			vlad.tone_level);
 800156e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
	len = sprintf((char*) u->txBuffer, "tone level %d[dBm]\r\n",
 8001570:	4948      	ldr	r1, [pc, #288]	; (8001694 <print_parameters+0x1d0>)
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fa26 	bl	80059c4 <siprintf>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3364      	adds	r3, #100	; 0x64
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fb6d 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "tone level2 %d[dBm]\r\n",
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3364      	adds	r3, #100	; 0x64
			vlad.tone_level2);
 800158e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	len = sprintf((char*) u->txBuffer, "tone level2 %d[dBm]\r\n",
 8001592:	4941      	ldr	r1, [pc, #260]	; (8001698 <print_parameters+0x1d4>)
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fa15 	bl	80059c4 <siprintf>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3364      	adds	r3, #100	; 0x64
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fb5c 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current %d[A]\r\n", vlad.current);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3364      	adds	r3, #100	; 0x64
 80015b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80015b2:	493a      	ldr	r1, [pc, #232]	; (800169c <print_parameters+0x1d8>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fa05 	bl	80059c4 <siprintf>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3364      	adds	r3, #100	; 0x64
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fb4c 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current2 %d[A]\r\n", vlad.current2);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3364      	adds	r3, #100	; 0x64
 80015d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80015d4:	4932      	ldr	r1, [pc, #200]	; (80016a0 <print_parameters+0x1dc>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f9f4 	bl	80059c4 <siprintf>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3364      	adds	r3, #100	; 0x64
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fb3b 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "agc150m %d[dBm]\r\n", vlad.agc150m);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3364      	adds	r3, #100	; 0x64
 80015f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <print_parameters+0x1e0>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 f9e4 	bl	80059c4 <siprintf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3364      	adds	r3, #100	; 0x64
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fb2b 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "level150m %d[dBm]\r\n", vlad.level150m);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3364      	adds	r3, #100	; 0x64
 8001612:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001614:	4924      	ldr	r1, [pc, #144]	; (80016a8 <print_parameters+0x1e4>)
 8001616:	4618      	mov	r0, r3
 8001618:	f004 f9d4 	bl	80059c4 <siprintf>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3364      	adds	r3, #100	; 0x64
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fb1b 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "agc170m %d[dBm]\r\n", vlad.agc170m);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3364      	adds	r3, #100	; 0x64
 8001632:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001634:	491d      	ldr	r1, [pc, #116]	; (80016ac <print_parameters+0x1e8>)
 8001636:	4618      	mov	r0, r3
 8001638:	f004 f9c4 	bl	80059c4 <siprintf>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3364      	adds	r3, #100	; 0x64
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fb0b 	bl	8002c64 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "level170m %d[dBm]\r\n", vlad.level170m);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3364      	adds	r3, #100	; 0x64
 8001652:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <print_parameters+0x1ec>)
 8001656:	4618      	mov	r0, r3
 8001658:	f004 f9b4 	bl	80059c4 <siprintf>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3364      	adds	r3, #100	; 0x64
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f001 fafb 	bl	8002c64 <uart1_send_frame>
	cleanRxBuffer(u);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f001 fb1b 	bl	8002caa <cleanRxBuffer>
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800167e:	b004      	add	sp, #16
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	08006350 	.word	0x08006350
 8001688:	0800635c 	.word	0x0800635c
 800168c:	0800636c 	.word	0x0800636c
 8001690:	08006384 	.word	0x08006384
 8001694:	0800639c 	.word	0x0800639c
 8001698:	080063b4 	.word	0x080063b4
 800169c:	080063cc 	.word	0x080063cc
 80016a0:	080063dc 	.word	0x080063dc
 80016a4:	080063f0 	.word	0x080063f0
 80016a8:	08006404 	.word	0x08006404
 80016ac:	08006418 	.word	0x08006418
 80016b0:	0800642c 	.word	0x0800642c

080016b4 <printStatus>:

void printStatus(UART1_t *uart1, Rs485_status_t status, RS485_t *rs485) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0d8      	sub	sp, #352	; 0x160
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016c2:	6018      	str	r0, [r3, #0]
 80016c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016d2:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 80016d6:	460a      	mov	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]

	char rs485_msgs[11][30] = { "DATA OK", "START READING", "VALID FRAME",
 80016da:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016e2:	4a20      	ldr	r2, [pc, #128]	; (8001764 <printStatus+0xb0>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	4611      	mov	r1, r2
 80016e8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80016ec:	461a      	mov	r2, r3
 80016ee:	f004 f953 	bl	8005998 <memcpy>
			"NOT VALID FRAME", "WRONG MODULE FUNCTION", "WRONG MODULE ID",
			"CRC ERROR", "DONE", "WAITING", "VALID MODULE", "CHECK LORA DATA" };
	if(rs485->status == rs485->lastStatus)
 80016f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8001700:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001704:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800170e:	429a      	cmp	r2, r3
 8001710:	d022      	beq.n	8001758 <printStatus+0xa4>
		return;
	rs485->lastStatus = rs485->status;
 8001712:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001716:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8001720:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001724:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	cleanByTimeout(uart1, rs485_msgs[status]);
 800172e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001732:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	f107 0114 	add.w	r1, r7, #20
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	18ca      	adds	r2, r1, r3
 8001746:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800174a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800174e:	4611      	mov	r1, r2
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f001 fa13 	bl	8002b7c <cleanByTimeout>
 8001756:	e000      	b.n	800175a <printStatus+0xa6>
		return;
 8001758:	bf00      	nop

}
 800175a:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	08006440 	.word	0x08006440

08001768 <printLoRaStatus>:

void printLoRaStatus(UART1_t *uart1, SX1278_t *loRa) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	SX1278_Status_t status = loRa->status;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001778:	75fb      	strb	r3, [r7, #23]
	uint8_t len = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	75bb      	strb	r3, [r7, #22]
	char *buff = uart1->txBuffer;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3364      	adds	r3, #100	; 0x64
 8001782:	613b      	str	r3, [r7, #16]
	/*if (loRa->status == loRa->lastStatus)
		return;*/
	loRa->lastStatus = loRa->status;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	if (status == TX_TIMEOUT) {
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <printLoRaStatus+0x48>
		len = sprintf(buff, "Transmission Fail: %d seconds Timeout\r\n",
 8001796:	2200      	movs	r2, #0
 8001798:	4933      	ldr	r1, [pc, #204]	; (8001868 <printLoRaStatus+0x100>)
 800179a:	6938      	ldr	r0, [r7, #16]
 800179c:	f004 f912 	bl	80059c4 <siprintf>
 80017a0:	4603      	mov	r3, r0
 80017a2:	75bb      	strb	r3, [r7, #22]
				TX_TIMEOUT / 1000);
		uart1_send_frame(buff, len);
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	4619      	mov	r1, r3
 80017a8:	6938      	ldr	r0, [r7, #16]
 80017aa:	f001 fa5b 	bl	8002c64 <uart1_send_frame>
		return;
 80017ae:	e057      	b.n	8001860 <printLoRaStatus+0xf8>
	}
	if (status == TX_DONE) {
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d113      	bne.n	80017de <printLoRaStatus+0x76>
		uint8_t bytesLen = loRa->len;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7d5b      	ldrb	r3, [r3, #21]
 80017ba:	73bb      	strb	r3, [r7, #14]
		uint32_t time = loRa->lastTxTime;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	60bb      	str	r3, [r7, #8]
		len = sprintf(buff, "Transmission Done: %d ms %d bytes\r\n", time,
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	4929      	ldr	r1, [pc, #164]	; (800186c <printLoRaStatus+0x104>)
 80017c8:	6938      	ldr	r0, [r7, #16]
 80017ca:	f004 f8fb 	bl	80059c4 <siprintf>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75bb      	strb	r3, [r7, #22]
				bytesLen);
		uart1_send_frame(buff, len);
 80017d2:	7dbb      	ldrb	r3, [r7, #22]
 80017d4:	4619      	mov	r1, r3
 80017d6:	6938      	ldr	r0, [r7, #16]
 80017d8:	f001 fa44 	bl	8002c64 <uart1_send_frame>
		return;
 80017dc:	e040      	b.n	8001860 <printLoRaStatus+0xf8>
	}
	if (status == TX_READY) {
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10b      	bne.n	80017fc <printLoRaStatus+0x94>
		len = sprintf(buff, "Master Mode\r\n");
 80017e4:	4922      	ldr	r1, [pc, #136]	; (8001870 <printLoRaStatus+0x108>)
 80017e6:	6938      	ldr	r0, [r7, #16]
 80017e8:	f004 f8ec 	bl	80059c4 <siprintf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75bb      	strb	r3, [r7, #22]
		uart1_send_frame(buff, len);
 80017f0:	7dbb      	ldrb	r3, [r7, #22]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6938      	ldr	r0, [r7, #16]
 80017f6:	f001 fa35 	bl	8002c64 <uart1_send_frame>
		return;
 80017fa:	e031      	b.n	8001860 <printLoRaStatus+0xf8>
	}
	if (status == RX_DONE) {
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d110      	bne.n	8001824 <printLoRaStatus+0xbc>
		uint8_t bytesLen = loRa->len;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7d5b      	ldrb	r3, [r3, #21]
 8001806:	73fb      	strb	r3, [r7, #15]
		len = sprintf(buff, "Reception Done:  %d bytes\r\n", bytesLen);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	461a      	mov	r2, r3
 800180c:	4919      	ldr	r1, [pc, #100]	; (8001874 <printLoRaStatus+0x10c>)
 800180e:	6938      	ldr	r0, [r7, #16]
 8001810:	f004 f8d8 	bl	80059c4 <siprintf>
 8001814:	4603      	mov	r3, r0
 8001816:	75bb      	strb	r3, [r7, #22]
		uart1_send_frame(buff, len);
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	4619      	mov	r1, r3
 800181c:	6938      	ldr	r0, [r7, #16]
 800181e:	f001 fa21 	bl	8002c64 <uart1_send_frame>
		return;
 8001822:	e01d      	b.n	8001860 <printLoRaStatus+0xf8>
	}
	if (status == RX_READY) {
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d10b      	bne.n	8001842 <printLoRaStatus+0xda>
		len = sprintf(buff, "Slave Mode\r\n");
 800182a:	4913      	ldr	r1, [pc, #76]	; (8001878 <printLoRaStatus+0x110>)
 800182c:	6938      	ldr	r0, [r7, #16]
 800182e:	f004 f8c9 	bl	80059c4 <siprintf>
 8001832:	4603      	mov	r3, r0
 8001834:	75bb      	strb	r3, [r7, #22]
		uart1_send_frame(buff, len);
 8001836:	7dbb      	ldrb	r3, [r7, #22]
 8001838:	4619      	mov	r1, r3
 800183a:	6938      	ldr	r0, [r7, #16]
 800183c:	f001 fa12 	bl	8002c64 <uart1_send_frame>
		return;
 8001840:	e00e      	b.n	8001860 <printLoRaStatus+0xf8>
	}
	if (status == CRC_ERROR_ACTIVATION) {
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d10b      	bne.n	8001860 <printLoRaStatus+0xf8>
		len = sprintf(buff, "Reception Fail: Crc error activation\r\n");
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <printLoRaStatus+0x114>)
 800184a:	6938      	ldr	r0, [r7, #16]
 800184c:	f004 f8ba 	bl	80059c4 <siprintf>
 8001850:	4603      	mov	r3, r0
 8001852:	75bb      	strb	r3, [r7, #22]
		uart1_send_frame(buff, len);
 8001854:	7dbb      	ldrb	r3, [r7, #22]
 8001856:	4619      	mov	r1, r3
 8001858:	6938      	ldr	r0, [r7, #16]
 800185a:	f001 fa03 	bl	8002c64 <uart1_send_frame>
		return;
 800185e:	bf00      	nop
	}
}
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800658c 	.word	0x0800658c
 800186c:	080065b4 	.word	0x080065b4
 8001870:	080065d8 	.word	0x080065d8
 8001874:	080065e8 	.word	0x080065e8
 8001878:	08006604 	.word	0x08006604
 800187c:	08006614 	.word	0x08006614

08001880 <setTxFifoData>:

void setTxFifoData(SX1278_t *module) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	setTxFifoAddr(module);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fc59 	bl	8001140 <setTxFifoAddr>
	for (int i = 0; i < module->len; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e011      	b.n	80018b8 <setTxFifoData+0x38>
		uint8_t data = module->buffer[i];
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	3330      	adds	r3, #48	; 0x30
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	72fb      	strb	r3, [r7, #11]
		writeRegister(module->spi, 0x00, &data, 1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
 80018a6:	f107 020b 	add.w	r2, r7, #11
 80018aa:	2301      	movs	r3, #1
 80018ac:	2100      	movs	r1, #0
 80018ae:	f7ff f8c7 	bl	8000a40 <writeRegister>
	for (int i = 0; i < module->len; i++) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7d5b      	ldrb	r3, [r3, #21]
 80018bc:	461a      	mov	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	dbe7      	blt.n	8001894 <setTxFifoData+0x14>
	}
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 80018d8:	f001 fa8a 	bl	8002df0 <HAL_GetTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 80018e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <waitForTxEnd+0x80>)
 80018e6:	f002 f821 	bl	800392c <HAL_GPIO_ReadPin>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d018      	beq.n	8001922 <waitForTxEnd+0x52>
			int timeEnd = HAL_GetTick();
 80018f0:	f001 fa7e 	bl	8002df0 <HAL_GetTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60bb      	str	r3, [r7, #8]
			loRa->lastTxTime = timeEnd - timeStart;
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
			readRegister(loRa->spi, LR_RegIrqFlags);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800190a:	2112      	movs	r1, #18
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f86d 	bl	80009ec <readRegister>
			clearIrqFlags(loRa);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fa1e 	bl	8000d54 <clearIrqFlags>
			loRa->status = TX_DONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return;
 8001920:	e012      	b.n	8001948 <waitForTxEnd+0x78>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8001922:	f001 fa65 	bl	8002df0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001930:	d906      	bls.n	8001940 <waitForTxEnd+0x70>
			sx1278Reset();
 8001932:	f7ff fc39 	bl	80011a8 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2205      	movs	r2, #5
 800193a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return;
 800193e:	e003      	b.n	8001948 <waitForTxEnd+0x78>
		}
		HAL_Delay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f001 fa5f 	bl	8002e04 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8001946:	e7cb      	b.n	80018e0 <waitForTxEnd+0x10>
	}
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40010c00 	.word	0x40010c00

08001954 <changeModeBySwitch>:

int changeModeBySwitch(int master, int valueRx, _Bool TX_MODE, _Bool RX_MODE,
		int *valueTx, SX1278_t *loRa) {
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	460b      	mov	r3, r1
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	4613      	mov	r3, r2
 8001968:	71bb      	strb	r3, [r7, #6]
	if (master == 1) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d112      	bne.n	8001996 <changeModeBySwitch+0x42>
		valueRx = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
		TX_MODE = true;
 8001974:	2301      	movs	r3, #1
 8001976:	71fb      	strb	r3, [r7, #7]
		RX_MODE = false;
 8001978:	2300      	movs	r3, #0
 800197a:	71bb      	strb	r3, [r7, #6]
		*valueTx += 1;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	601a      	str	r2, [r3, #0]
		if (*valueTx == 1) {
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d103      	bne.n	8001996 <changeModeBySwitch+0x42>
			loRa->status = UNKNOW;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
	}
	if (master == 0) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d110      	bne.n	80019be <changeModeBySwitch+0x6a>
		*valueTx = 0;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
		TX_MODE = false;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
		RX_MODE = true;
 80019a6:	2301      	movs	r3, #1
 80019a8:	71bb      	strb	r3, [r7, #6]
		valueRx += 1;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
		if (valueRx == 1) {
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d103      	bne.n	80019be <changeModeBySwitch+0x6a>
			loRa->status = UNKNOW;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
	}
	return valueRx;
 80019be:	68bb      	ldr	r3, [r7, #8]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 80019d2:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Vlad_t vlad;
	vlad_ptr = &vlad;
 80019d4:	4a7e      	ldr	r2, [pc, #504]	; (8001bd0 <main+0x204>)
 80019d6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80019da:	6013      	str	r3, [r2, #0]
	uart1_ptr = &uart1;
 80019dc:	4a7d      	ldr	r2, [pc, #500]	; (8001bd4 <main+0x208>)
 80019de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019e2:	6013      	str	r3, [r2, #0]
	rs485_ptr = &rs485;
 80019e4:	4a7c      	ldr	r2, [pc, #496]	; (8001bd8 <main+0x20c>)
 80019e6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80019ea:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019ec:	f001 f9a8 	bl	8002d40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019f0:	f000 fae2 	bl	8001fb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019f4:	f000 fc6e 	bl	80022d4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80019f8:	f000 fb8a 	bl	8002110 <MX_I2C1_Init>
	MX_SPI1_Init();
 80019fc:	f000 fbb6 	bl	800216c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001a00:	f000 fbea 	bl	80021d8 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a04:	f000 fc12 	bl	800222c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001a08:	f000 fc3a 	bl	8002280 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001a0c:	f000 fb2e 	bl	800206c <MX_ADC1_Init>
	MX_CRC_Init();
 8001a10:	f000 fb6a 	bl	80020e8 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vladInit(VLAD, ID1, &vlad);
 8001a14:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f000 fcb6 	bl	800238e <vladInit>
	ledInit(&led);
 8001a22:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fada 	bl	8000fe0 <ledInit>
	rs485Init(&rs485);
 8001a2c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd49 	bl	80024c8 <rs485Init>
	//uart1Init(HS16_CLK, BAUD_RATE, &uart1);

	SX1278_hw_t lora_hw;
	SX1278_t loRa;
	lora_ptr = &loRa;
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <main+0x210>)
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	6013      	str	r3, [r2, #0]

	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8001a3e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a46:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <main+0x214>)
 8001a48:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 8001a4a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8001a58:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a60:	4a5f      	ldr	r2, [pc, #380]	; (8001be0 <main+0x214>)
 8001a62:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 8001a64:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001a70:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a78:	4a59      	ldr	r2, [pc, #356]	; (8001be0 <main+0x214>)
 8001a7a:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 8001a7c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
	loRa.hw = &lora_hw;
 8001a88:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a8c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001a90:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001a94:	601a      	str	r2, [r3, #0]
	loRa.spi = &hspi1;
 8001a96:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001a9a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001a9e:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <main+0x218>)
 8001aa0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	484d      	ldr	r0, [pc, #308]	; (8001be0 <main+0x214>)
 8001aaa:	f001 ff56 	bl	800395a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	484b      	ldr	r0, [pc, #300]	; (8001be0 <main+0x214>)
 8001ab4:	f001 ff51 	bl	800395a <HAL_GPIO_WritePin>
	loRa.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	484a      	ldr	r0, [pc, #296]	; (8001be4 <main+0x218>)
 8001abc:	f7fe ff96 	bl	80009ec <readRegister>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ac8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001acc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	loRa.status = UNKNOW;
 8001ad0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ad4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	TX_MODE = true;
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <main+0x21c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
	RX_MODE = false;
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <main+0x220>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	memset(loRa.buffer, 0, SX1278_MAX_PACKET);
 8001aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aee:	3330      	adds	r3, #48	; 0x30
 8001af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 ff5c 	bl	80059b4 <memset>
	loRa.len = 0;
 8001afc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b00:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001b04:	2200      	movs	r2, #0
 8001b06:	755a      	strb	r2, [r3, #21]
	int counter = HAL_GetTick();
 8001b08:	f001 f972 	bl	8002df0 <HAL_GetTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	int change = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	int master;
	int valueTx = 0;
 8001b18:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b1c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	int valueRx = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2025      	movs	r0, #37	; 0x25
 8001b30:	f001 fc75 	bl	800341e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b34:	2025      	movs	r0, #37	; 0x25
 8001b36:	f001 fc8e 	bl	8003456 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	492c      	ldr	r1, [pc, #176]	; (8001bf0 <main+0x224>)
 8001b3e:	482d      	ldr	r0, [pc, #180]	; (8001bf4 <main+0x228>)
 8001b40:	f003 faf1 	bl	8005126 <HAL_UART_Receive_IT>

	initLoRaParameters(&loRa, MASTER);
 8001b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f9f8 	bl	8000f40 <initLoRaParameters>
	writeLoRaParameters(&loRa);
 8001b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f910 	bl	8000d7a <writeLoRaParameters>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8001b5a:	2108      	movs	r1, #8
 8001b5c:	4820      	ldr	r0, [pc, #128]	; (8001be0 <main+0x214>)
 8001b5e:	f001 fee5 	bl	800392c <HAL_GPIO_ReadPin>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
		valueRx = changeModeBySwitch(master, valueRx, TX_MODE, RX_MODE,
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <main+0x21c>)
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <main+0x220>)
 8001b6e:	7819      	ldrb	r1, [r3, #0]
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 8001b82:	f8d7 0320 	ldr.w	r0, [r7, #800]	; 0x320
 8001b86:	f7ff fee5 	bl	8001954 <changeModeBySwitch>
 8001b8a:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
				&valueTx, &loRa);

		if (uart1.len > 0) {
 8001b8e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b96:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02c      	beq.n	8001bf8 <main+0x22c>
			rs485.len = uart1.len;
 8001b9e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ba2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ba6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001baa:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d
			memcpy(rs485.buffer, uart1.rxBuffer, uart1.len);
 8001bae:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001bb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bb6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8001bc0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fee6 	bl	8005998 <memcpy>
 8001bcc:	e032      	b.n	8001c34 <main+0x268>
 8001bce:	bf00      	nop
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	2000023c 	.word	0x2000023c
 8001bd8:	20000240 	.word	0x20000240
 8001bdc:	20000248 	.word	0x20000248
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	20000118 	.word	0x20000118
 8001be8:	2000024d 	.word	0x2000024d
 8001bec:	2000024e 	.word	0x2000024e
 8001bf0:	2000024c 	.word	0x2000024c
 8001bf4:	20000170 	.word	0x20000170

		} else if (loRa.len > 0) {
 8001bf8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001bfc:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001c00:	7d5b      	ldrb	r3, [r3, #21]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d016      	beq.n	8001c34 <main+0x268>
			rs485.len = loRa.len;
 8001c06:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001c0a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001c0e:	7d5b      	ldrb	r3, [r3, #21]
 8001c10:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d
			memcpy(rs485.buffer, loRa.buffer, loRa.len);
 8001c14:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001c18:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001c1c:	7d5b      	ldrb	r3, [r3, #21]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001c28:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 feb2 	bl	8005998 <memcpy>
		}

		if (rs485.len > 0) {
 8001c34:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d021      	beq.n	8001c80 <main+0x2b4>
			checkBuffer(&rs485);
 8001c3c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fce5 	bl	8002610 <checkBuffer>
			if (rs485.status == DATA_OK) {
 8001c46:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <main+0x2b4>
				rs485.cmd = rs485.buffer[3];
 8001c4e:	f897 32a1 	ldrb.w	r3, [r7, #673]	; 0x2a1
 8001c52:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
				rs485.status = WAITING;
 8001c56:	2308      	movs	r3, #8
 8001c58:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
				cleanRxBuffer(&uart1);
 8001c5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f822 	bl	8002caa <cleanRxBuffer>
 8001c66:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001c6a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memset(loRa.buffer, 0, sizeof(loRa.len));
				loRa.len = 0;
 8001c74:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001c78:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	755a      	strb	r2, [r3, #21]
			}
		}

		printStatus(&uart1, rs485.status, &rs485);
 8001c80:	f897 1302 	ldrb.w	r1, [r7, #770]	; 0x302
 8001c84:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8001c88:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fd11 	bl	80016b4 <printStatus>
		modeRs485Update(&uart1, &rs485, &loRa);
 8001c92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c96:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8001c9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fbe8 	bl	8001474 <modeRs485Update>

		if (rs485.cmd == QUERY_PARAMETERS_VLAD && rs485.len == 9) { //cmd = 11
 8001ca4:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	f040 80c6 	bne.w	8001e3a <main+0x46e>
 8001cae:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	f040 80c1 	bne.w	8001e3a <main+0x46e>
			loRa.len = rs485.len;
 8001cb8:	f897 229d 	ldrb.w	r2, [r7, #669]	; 0x29d
 8001cbc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001cc0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001cc4:	755a      	strb	r2, [r3, #21]
			memcpy(loRa.buffer, rs485.buffer, rs485.len);
 8001cc6:	f897 329d 	ldrb.w	r3, [r7, #669]	; 0x29d
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001cd0:	1c99      	adds	r1, r3, #2
 8001cd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd6:	3330      	adds	r3, #48	; 0x30
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fe5d 	bl	8005998 <memcpy>

			updateMode(&loRa, MASTER);
 8001cde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f8ab 	bl	8000e40 <updateMode>
			setTxFifoData(&loRa);
 8001cea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fdc6 	bl	8001880 <setTxFifoData>
			updateLoraLowFreq(&loRa, TX);
 8001cf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f80e 	bl	8000d1c <updateLoraLowFreq>
			waitForTxEnd(&loRa);
 8001d00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fde3 	bl	80018d0 <waitForTxEnd>
			printLoRaStatus(&uart1, &loRa);
 8001d0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d0e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fd27 	bl	8001768 <printLoRaStatus>
 8001d1a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d1e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

			memset(loRa.buffer, 0, sizeof(loRa.len));
			loRa.len = 0;
 8001d28:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d2c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001d30:	2200      	movs	r2, #0
 8001d32:	755a      	strb	r2, [r3, #21]
			rs485.cmd = NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
			memset(rs485.buffer, 0, sizeof(rs485.buffer));
 8001d3a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001d3e:	3302      	adds	r3, #2
 8001d40:	2264      	movs	r2, #100	; 0x64
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fe35 	bl	80059b4 <memset>
			rs485.len = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d
			change = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
			loRa.status = UNKNOW;
 8001d56:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001d5a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			updateMode(&loRa, SLAVE);
 8001d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f868 	bl	8000e40 <updateMode>
			printLoRaStatus(&uart1, &loRa);
 8001d70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d74:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fcf4 	bl	8001768 <printLoRaStatus>
			setRxFifoAddr(&loRa);
 8001d80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa2b 	bl	80011e0 <setRxFifoAddr>
			updateLoraLowFreq(&loRa, RX_CONTINUOUS);
 8001d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d8e:	2105      	movs	r1, #5
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ffc3 	bl	8000d1c <updateLoraLowFreq>
			clearMemForRx(&loRa);
 8001d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fa55 	bl	800124a <clearMemForRx>
			waitForRxDone(&loRa);
 8001da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fa65 	bl	8001274 <waitForRxDone>
			getRxFifoData(&loRa);
 8001daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff faa6 	bl	8001300 <getRxFifoData>
			printLoRaStatus(&uart1, &loRa);
 8001db4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001db8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fcd2 	bl	8001768 <printLoRaStatus>
			vlad = decodeVLAD(&loRa);
 8001dc4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001dc8:	f5a3 74ce 	sub.w	r4, r3, #412	; 0x19c
 8001dcc:	463b      	mov	r3, r7
 8001dce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff facf 	bl	8001378 <decodeVLAD>
 8001dda:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001dde:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001de2:	461d      	mov	r5, r3
 8001de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	6023      	str	r3, [r4, #0]
			print_parameters(&uart1, vlad);
 8001df4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001df8:	f5a3 76ce 	sub.w	r6, r3, #412	; 0x19c
 8001dfc:	f507 7ce4 	add.w	ip, r7, #456	; 0x1c8
 8001e00:	466d      	mov	r5, sp
 8001e02:	f106 040c 	add.w	r4, r6, #12
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e16:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e1a:	4660      	mov	r0, ip
 8001e1c:	f7ff fb52 	bl	80014c4 <print_parameters>
 8001e20:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e24:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			memset(loRa.buffer, 0, sizeof(loRa.len));
			loRa.len = 0;
 8001e2e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e32:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001e36:	2200      	movs	r2, #0
 8001e38:	755a      	strb	r2, [r3, #21]
		}

		if (TX_MODE) {
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <main+0x5e0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d076      	beq.n	8001f30 <main+0x564>
			RX_MODE_OFF_LED();
 8001e42:	4b5b      	ldr	r3, [pc, #364]	; (8001fb0 <main+0x5e4>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <main+0x5e4>)
 8001e48:	f023 0308 	bic.w	r3, r3, #8
 8001e4c:	60d3      	str	r3, [r2, #12]
			TX_MODE_ON_LED();
 8001e4e:	4b58      	ldr	r3, [pc, #352]	; (8001fb0 <main+0x5e4>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <main+0x5e4>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	60d3      	str	r3, [r2, #12]
			if (change == 255)
 8001e5a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d102      	bne.n	8001e68 <main+0x49c>
				change = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
			loRa.buffer[change] = change;
 8001e68:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e72:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8001e76:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3330      	adds	r3, #48	; 0x30
 8001e7e:	460a      	mov	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
			loRa.len = change;
 8001e82:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001e8c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001e90:	755a      	strb	r2, [r3, #21]
			if (HAL_GetTick() - counter > 10000) {
 8001e92:	f000 ffad 	bl	8002df0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d944      	bls.n	8001f30 <main+0x564>
				counter = HAL_GetTick();
 8001ea6:	f000 ffa3 	bl	8002df0 <HAL_GetTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

				updateMode(&loRa, MASTER);
 8001eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe ffc2 	bl	8000e40 <updateMode>
				setTxFifoData(&loRa);
 8001ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fcdd 	bl	8001880 <setTxFifoData>
				updateLoraLowFreq(&loRa, TX);
 8001ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eca:	2103      	movs	r1, #3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff25 	bl	8000d1c <updateLoraLowFreq>
				waitForTxEnd(&loRa);
 8001ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fcfa 	bl	80018d0 <waitForTxEnd>
				printLoRaStatus(&uart1, &loRa);
 8001edc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ee0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fc3e 	bl	8001768 <printLoRaStatus>
 8001eec:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001ef0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memset(loRa.buffer, 0, sizeof(loRa.len));
				loRa.len = 0;
 8001efa:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001efe:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f02:	2200      	movs	r2, #0
 8001f04:	755a      	strb	r2, [r3, #21]
				loRa.status = UNKNOW;
 8001f06:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f0a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				rs485.cmd = NONE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 329e 	strb.w	r3, [r7, #670]	; 0x29e
				memset(rs485.buffer, 0, sizeof(rs485.len));
				rs485.len = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d

				change += 1;
 8001f26:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
			}
		}
		if (RX_MODE) {
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <main+0x5e8>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d032      	beq.n	8001f9e <main+0x5d2>
			TX_MODE_OFF_LED();
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x5e4>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <main+0x5e4>)
 8001f3e:	f023 0310 	bic.w	r3, r3, #16
 8001f42:	60d3      	str	r3, [r2, #12]
			RX_MODE_ON_LED();
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <main+0x5e4>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <main+0x5e4>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	60d3      	str	r3, [r2, #12]
			read(&uart1, &loRa);
 8001f50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fd52 	bl	8005a04 <read>
			rs485.len = loRa.len;
 8001f60:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f64:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f68:	7d5b      	ldrb	r3, [r3, #21]
 8001f6a:	f887 329d 	strb.w	r3, [r7, #669]	; 0x29d
			memcpy(rs485.buffer, loRa.buffer, loRa.len);
 8001f6e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001f72:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f76:	7d5b      	ldrb	r3, [r3, #21]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001f82:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001f86:	3302      	adds	r3, #2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fd05 	bl	8005998 <memcpy>
			rs485.status = CHECK_LORA_DATA;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
			change += 1;
 8001f94:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
		}
		led_enable_kalive(&led);
 8001f9e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f84e 	bl	8001044 <led_enable_kalive>
		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8001fa8:	e5d7      	b.n	8001b5a <main+0x18e>
 8001faa:	bf00      	nop
 8001fac:	2000024d 	.word	0x2000024d
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	2000024e 	.word	0x2000024e

08001fb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	2228      	movs	r2, #40	; 0x28
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fcf4 	bl	80059b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002004:	2300      	movs	r3, #0
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fe01 	bl	8003c14 <HAL_RCC_OscConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0x64>
		Error_Handler();
 8002018:	f000 f9b4 	bl	8002384 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800201c:	230f      	movs	r3, #15
 800201e:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f002 f86d 	bl	8004118 <HAL_RCC_ClockConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0x90>
		Error_Handler();
 8002044:	f000 f99e 	bl	8002384 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002048:	2302      	movs	r3, #2
 800204a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4618      	mov	r0, r3
 8002054:	f002 f9f8 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0xaa>
		Error_Handler();
 800205e:	f000 f991 	bl	8002384 <Error_Handler>
	}
}
 8002062:	bf00      	nop
 8002064:	3750      	adds	r7, #80	; 0x50
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_ADC1_Init+0x74>)
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <MX_ADC1_Init+0x78>)
 8002080:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <MX_ADC1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_ADC1_Init+0x74>)
 800208a:	2200      	movs	r2, #0
 800208c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_ADC1_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <MX_ADC1_Init+0x74>)
 8002096:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800209a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <MX_ADC1_Init+0x74>)
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <MX_ADC1_Init+0x74>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <MX_ADC1_Init+0x74>)
 80020aa:	f000 fecf 	bl	8002e4c <HAL_ADC_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80020b4:	f000 f966 	bl	8002384 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80020bc:	2301      	movs	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_ADC1_Init+0x74>)
 80020ca:	f000 ff97 	bl	8002ffc <HAL_ADC_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80020d4:	f000 f956 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000008c 	.word	0x2000008c
 80020e4:	40012400 	.word	0x40012400

080020e8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_CRC_Init+0x20>)
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <MX_CRC_Init+0x24>)
 80020f0:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_CRC_Init+0x20>)
 80020f4:	f001 f9c9 	bl	800348a <HAL_CRC_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_CRC_Init+0x1a>
		Error_Handler();
 80020fe:	f000 f941 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200000bc 	.word	0x200000bc
 800210c:	40023000 	.word	0x40023000

08002110 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_I2C1_Init+0x50>)
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <MX_I2C1_Init+0x54>)
 8002118:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_I2C1_Init+0x50>)
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_I2C1_Init+0x58>)
 800211e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_I2C1_Init+0x50>)
 800212e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002132:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <MX_I2C1_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_I2C1_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <MX_I2C1_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_I2C1_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800214c:	4804      	ldr	r0, [pc, #16]	; (8002160 <MX_I2C1_Init+0x50>)
 800214e:	f001 fc1d 	bl	800398c <HAL_I2C_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002158:	f000 f914 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200000c4 	.word	0x200000c4
 8002164:	40005400 	.word	0x40005400
 8002168:	000186a0 	.word	0x000186a0

0800216c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <MX_SPI1_Init+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800217c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_SPI1_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_SPI1_Init+0x64>)
 8002198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021a0:	2218      	movs	r2, #24
 80021a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021b8:	220a      	movs	r2, #10
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_SPI1_Init+0x64>)
 80021be:	f002 f9f9 	bl	80045b4 <HAL_SPI_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_SPI1_Init+0x60>
		Error_Handler();
 80021c8:	f000 f8dc 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000118 	.word	0x20000118
 80021d4:	40013000 	.word	0x40013000

080021d8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_USART1_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_USART1_UART_Init+0x4c>)
 8002210:	f002 ff3c 	bl	800508c <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800221a:	f000 f8b3 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000170 	.word	0x20000170
 8002228:	40013800 	.word	0x40013800

0800222c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART2_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800223c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002264:	f002 ff12 	bl	800508c <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800226e:	f000 f889 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200001b4 	.word	0x200001b4
 800227c:	40004400 	.word	0x40004400

08002280 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <MX_USART3_UART_Init+0x50>)
 8002288:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <MX_USART3_UART_Init+0x4c>)
 80022b8:	f002 fee8 	bl	800508c <HAL_UART_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80022c2:	f000 f85f 	bl	8002384 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200001f8 	.word	0x200001f8
 80022d0:	40004800 	.word	0x40004800

080022d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_GPIO_Init+0xa8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <MX_GPIO_Init+0xa8>)
 80022ee:	f043 0320 	orr.w	r3, r3, #32
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_GPIO_Init+0xa8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <MX_GPIO_Init+0xa8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <MX_GPIO_Init+0xa8>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MX_GPIO_Init+0xa8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_GPIO_Init+0xa8>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a17      	ldr	r2, [pc, #92]	; (800237c <MX_GPIO_Init+0xa8>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_GPIO_Init+0xa8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002330:	2200      	movs	r2, #0
 8002332:	f247 3133 	movw	r1, #29491	; 0x7333
 8002336:	4812      	ldr	r0, [pc, #72]	; (8002380 <MX_GPIO_Init+0xac>)
 8002338:	f001 fb0f 	bl	800395a <HAL_GPIO_WritePin>
					| BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED2_Pin LED1_Pin RS485_DE_Pin
	 BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 800233c:	f247 3333 	movw	r3, #29491	; 0x7333
 8002340:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2302      	movs	r3, #2
 800234c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <MX_GPIO_Init+0xac>)
 8002356:	f001 f965 	bl	8003624 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_Pin */
	GPIO_InitStruct.Pin = MODE_Pin;
 800235a:	2308      	movs	r3, #8
 800235c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4619      	mov	r1, r3
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_GPIO_Init+0xac>)
 800236e:	f001 f959 	bl	8003624 <HAL_GPIO_Init>

}
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40010c00 	.word	0x40010c00

08002384 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800238c:	e7fe      	b.n	800238c <Error_Handler+0x8>

0800238e <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

void vladInit(Function_t funcion, Id_t id, Vlad_t *vlad) {
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	603a      	str	r2, [r7, #0]
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	460b      	mov	r3, r1
 800239c:	71bb      	strb	r3, [r7, #6]
	vlad->agc150m = 0;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]
	vlad->ref150m = 0;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	805a      	strh	r2, [r3, #2]
	vlad->level150m = 0;  // downlink 152 mhz
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	809a      	strh	r2, [r3, #4]
	vlad->agc170m = 0;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	80da      	strh	r2, [r3, #6]
	vlad->ref170m = 0;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	811a      	strh	r2, [r3, #8]
	vlad->level170m = 0; //uplink 172 mhz
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	815a      	strh	r2, [r3, #10]
	vlad->tone_level = 0;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	819a      	strh	r2, [r3, #12]
	vlad->v_5v = 0;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	81da      	strh	r2, [r3, #14]
	vlad->vin = 0;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	821a      	strh	r2, [r3, #16]
	vlad->current = 0;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	825a      	strh	r2, [r3, #18]
	vlad->v_5v_real = 0;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
	vlad->vin_real = 0;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
	vlad->current_real = 0;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
	vlad->uc_temperature = 0;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
	vlad->remote_attenuation = 0;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	vlad->is_remote_attenuation = false;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    vlad->is_attenuation_updated = false;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	vlad->calc_en = 0;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	vlad->function = funcion;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	vlad->id = id;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	79ba      	ldrb	r2, [r7, #6]
 8002424:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	/////////////////// VARIABLES DE PRUEBA ////////////////////////////////
	vlad->vin2 = 0;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	855a      	strh	r2, [r3, #42]	; 0x2a
	vlad->current2 = 0;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	859a      	strh	r2, [r3, #44]	; 0x2c
	vlad->current_real2 = 0;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	85da      	strh	r2, [r3, #46]	; 0x2e
	vlad->tone_level2 = 0;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8002456:	f241 0321 	movw	r3, #4129	; 0x1021
 800245a:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;			 // CRC value is 16bit
 800245c:	2300      	movs	r3, #0
 800245e:	81bb      	strh	r3, [r7, #12]

	for (b = 0; b < buff_len; b++) {
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e025      	b.n	80024b2 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b29a      	uxth	r2, r3
 8002474:	89bb      	ldrh	r3, [r7, #12]
 8002476:	4053      	eors	r3, r2
 8002478:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 800247a:	2300      	movs	r3, #0
 800247c:	73bb      	strb	r3, [r7, #14]
 800247e:	e012      	b.n	80024a6 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8002480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da08      	bge.n	800249a <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002488:	89bb      	ldrh	r3, [r7, #12]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	b21a      	sxth	r2, r3
 800248e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002492:	4053      	eors	r3, r2
 8002494:	b21b      	sxth	r3, r3
 8002496:	81bb      	strh	r3, [r7, #12]
 8002498:	e002      	b.n	80024a0 <crc_get+0x56>
			else
				crc <<= 1;
 800249a:	89bb      	ldrh	r3, [r7, #12]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	3301      	adds	r3, #1
 80024a4:	73bb      	strb	r3, [r7, #14]
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d9e9      	bls.n	8002480 <crc_get+0x36>
	for (b = 0; b < buff_len; b++) {
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3d5      	bcc.n	8002466 <crc_get+0x1c>
		}
	}
	return crc;
 80024ba:	89bb      	ldrh	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <rs485Init>:

void rs485Init(RS485_t *r) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	r->len = 0;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2207      	movs	r2, #7
 80024da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	r->cmd = NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
	memset(r->buffer, 0, 100);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3302      	adds	r3, #2
 80024e8:	2264      	movs	r2, #100	; 0x64
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fa61 	bl	80059b4 <memset>
	/* PB8 DE485 as output  */
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <rs485Init+0x4c>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <rs485Init+0x4c>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <rs485Init+0x4c>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <rs485Init+0x4c>)
 8002504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002508:	60d3      	str	r3, [r2, #12]

}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40010c00 	.word	0x40010c00

08002518 <check_valid_module>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t check_valid_module(uint8_t *frame, uint8_t lenght) {
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
	if (frame[1] == VLAD) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3301      	adds	r3, #1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d11a      	bne.n	8002564 <check_valid_module+0x4c>
		if (frame[2] == ID1) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3302      	adds	r3, #2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d113      	bne.n	8002560 <check_valid_module+0x48>
			for (int i = 3; i < lenght; i++)
 8002538:	2303      	movs	r3, #3
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00b      	b.n	8002556 <check_valid_module+0x3e>
				if (frame[i] == LTEL_END_MARK)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	227f      	movs	r2, #127	; 0x7f
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <check_valid_module+0x38>
					return VALID_MODULE;
 800254c:	2309      	movs	r3, #9
 800254e:	e00c      	b.n	800256a <check_valid_module+0x52>
			for (int i = 3; i < lenght; i++)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3301      	adds	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbef      	blt.n	800253e <check_valid_module+0x26>
 800255e:	e003      	b.n	8002568 <check_valid_module+0x50>
		} else
			return WRONG_MODULE_ID;
 8002560:	2305      	movs	r3, #5
 8002562:	e002      	b.n	800256a <check_valid_module+0x52>
	} else
		return WRONG_MODULE_FUNCTION;
 8002564:	2304      	movs	r3, #4
 8002566:	e000      	b.n	800256a <check_valid_module+0x52>
	return WRONG_MODULE_FUNCTION;
 8002568:	2304      	movs	r3, #4
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <check_frame>:

Rs485_status_t check_frame(uint8_t *frame, uint8_t lenght) {
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d912      	bls.n	80025ac <check_frame+0x38>
		if (frame[0] == LTEL_START_MARK) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	227e      	movs	r2, #126	; 0x7e
 800258c:	4293      	cmp	r3, r2
 800258e:	d10b      	bne.n	80025a8 <check_frame+0x34>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	227f      	movs	r2, #127	; 0x7f
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <check_frame+0x30>
				return VALID_FRAME;
 80025a0:	2302      	movs	r3, #2
 80025a2:	e004      	b.n	80025ae <check_frame+0x3a>
			else
				return START_READING;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e002      	b.n	80025ae <check_frame+0x3a>
		} else
			return NOT_VALID_FRAME;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e000      	b.n	80025ae <check_frame+0x3a>
	} else

		return WAITING;
 80025ac:	2308      	movs	r3, #8
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <check_CRC_module>:

Rs485_status_t check_CRC_module(uint8_t *frame, uint8_t len) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]

	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = frame[(len - 2)] << 8;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	3b02      	subs	r3, #2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
	crc_save |= frame[(len - 3)];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(frame[1]), (len - 4));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	3b04      	subs	r3, #4
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7ff ff2a 	bl	800244a <crc_get>
 80025f6:	4603      	mov	r3, r0
 80025f8:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d101      	bne.n	8002606 <check_CRC_module+0x4e>
		return DATA_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <check_CRC_module+0x50>
	return CRC_ERROR;
 8002606:	2306      	movs	r3, #6
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <checkBuffer>:

Rs485_status_t checkBuffer(RS485_t *rs485){
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	rs485->status = check_frame(rs485->buffer,rs485->len);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1c9a      	adds	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f7ff ffa6 	bl	8002574 <check_frame>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_FRAME))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002638:	2b02      	cmp	r3, #2
 800263a:	d003      	beq.n	8002644 <checkBuffer+0x34>
		return rs485->status;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002642:	e02e      	b.n	80026a2 <checkBuffer+0x92>
	rs485->status = check_valid_module(rs485->buffer, rs485->len);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1c9a      	adds	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	785b      	ldrb	r3, [r3, #1]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f7ff ff62 	bl	8002518 <check_valid_module>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_MODULE))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002664:	2b09      	cmp	r3, #9
 8002666:	d003      	beq.n	8002670 <checkBuffer+0x60>
		return rs485->status;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800266e:	e018      	b.n	80026a2 <checkBuffer+0x92>
	rs485->status = check_CRC_module(rs485->buffer, rs485->len);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1c9a      	adds	r2, r3, #2
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f7ff ff9c 	bl	80025b8 <check_CRC_module>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == DATA_OK))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <checkBuffer+0x8c>
		return rs485->status;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800269a:	e002      	b.n	80026a2 <checkBuffer+0x92>
	return rs485->status;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_MspInit+0x5c>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_MspInit+0x5c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6193      	str	r3, [r2, #24]
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_MspInit+0x5c>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_MspInit+0x5c>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_MspInit+0x5c>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	61d3      	str	r3, [r2, #28]
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_MspInit+0x5c>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_MspInit+0x60>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_MspInit+0x60>)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000

08002710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <HAL_ADC_MspInit+0x6c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d121      	bne.n	8002774 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_ADC_MspInit+0x70>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <HAL_ADC_MspInit+0x70>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_ADC_MspInit+0x70>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <HAL_ADC_MspInit+0x70>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <HAL_ADC_MspInit+0x70>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_ADC_MspInit+0x70>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002760:	2313      	movs	r3, #19
 8002762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002764:	2303      	movs	r3, #3
 8002766:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4619      	mov	r1, r3
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <HAL_ADC_MspInit+0x74>)
 8002770:	f000 ff58 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012400 	.word	0x40012400
 8002780:	40021000 	.word	0x40021000
 8002784:	40010800 	.word	0x40010800

08002788 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_CRC_MspInit+0x34>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10b      	bne.n	80027b2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_CRC_MspInit+0x38>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_CRC_MspInit+0x38>)
 80027a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a4:	6153      	str	r3, [r2, #20]
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_CRC_MspInit+0x38>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40023000 	.word	0x40023000
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <HAL_I2C_MspInit+0x70>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d123      	bne.n	800282c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_I2C_MspInit+0x74>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_I2C_MspInit+0x74>)
 80027ea:	f043 0308 	orr.w	r3, r3, #8
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_I2C_MspInit+0x74>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002800:	2312      	movs	r3, #18
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4619      	mov	r1, r3
 800280e:	480b      	ldr	r0, [pc, #44]	; (800283c <HAL_I2C_MspInit+0x78>)
 8002810:	f000 ff08 	bl	8003624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_I2C_MspInit+0x74>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_I2C_MspInit+0x74>)
 800281a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281e:	61d3      	str	r3, [r2, #28]
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_I2C_MspInit+0x74>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40005400 	.word	0x40005400
 8002838:	40021000 	.word	0x40021000
 800283c:	40010c00 	.word	0x40010c00

08002840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_SPI_MspInit+0x88>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d12f      	bne.n	80028c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 8002866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a13      	ldr	r2, [pc, #76]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_SPI_MspInit+0x8c>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002890:	23a0      	movs	r3, #160	; 0xa0
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	480b      	ldr	r0, [pc, #44]	; (80028d0 <HAL_SPI_MspInit+0x90>)
 80028a4:	f000 febe 	bl	8003624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <HAL_SPI_MspInit+0x90>)
 80028bc:	f000 feb2 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028c0:	bf00      	nop
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40013000 	.word	0x40013000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010800 	.word	0x40010800

080028d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a57      	ldr	r2, [pc, #348]	; (8002a4c <HAL_UART_MspInit+0x178>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d13a      	bne.n	800296a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f4:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a55      	ldr	r2, [pc, #340]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a4f      	ldr	r2, [pc, #316]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	4619      	mov	r1, r3
 8002938:	4846      	ldr	r0, [pc, #280]	; (8002a54 <HAL_UART_MspInit+0x180>)
 800293a:	f000 fe73 	bl	8003624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 800293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4619      	mov	r1, r3
 8002952:	4840      	ldr	r0, [pc, #256]	; (8002a54 <HAL_UART_MspInit+0x180>)
 8002954:	f000 fe66 	bl	8003624 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2025      	movs	r0, #37	; 0x25
 800295e:	f000 fd5e 	bl	800341e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002962:	2025      	movs	r0, #37	; 0x25
 8002964:	f000 fd77 	bl	8003456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002968:	e06c      	b.n	8002a44 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <HAL_UART_MspInit+0x184>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d130      	bne.n	80029d6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a35      	ldr	r2, [pc, #212]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029a4:	2304      	movs	r3, #4
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0320 	add.w	r3, r7, #32
 80029b4:	4619      	mov	r1, r3
 80029b6:	4827      	ldr	r0, [pc, #156]	; (8002a54 <HAL_UART_MspInit+0x180>)
 80029b8:	f000 fe34 	bl	8003624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029bc:	2308      	movs	r3, #8
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0320 	add.w	r3, r7, #32
 80029cc:	4619      	mov	r1, r3
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <HAL_UART_MspInit+0x180>)
 80029d0:	f000 fe28 	bl	8003624 <HAL_GPIO_Init>
}
 80029d4:	e036      	b.n	8002a44 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_UART_MspInit+0x188>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d131      	bne.n	8002a44 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80029e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_UART_MspInit+0x17c>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	4619      	mov	r1, r3
 8002a24:	480e      	ldr	r0, [pc, #56]	; (8002a60 <HAL_UART_MspInit+0x18c>)
 8002a26:	f000 fdfd 	bl	8003624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 0320 	add.w	r3, r7, #32
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4808      	ldr	r0, [pc, #32]	; (8002a60 <HAL_UART_MspInit+0x18c>)
 8002a40:	f000 fdf0 	bl	8003624 <HAL_GPIO_Init>
}
 8002a44:	bf00      	nop
 8002a46:	3730      	adds	r7, #48	; 0x30
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40004400 	.word	0x40004400
 8002a5c:	40004800 	.word	0x40004800
 8002a60:	40010c00 	.word	0x40010c00

08002a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <NMI_Handler+0x4>

08002a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <HardFault_Handler+0x4>

08002a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <MemManage_Handler+0x4>

08002a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <BusFault_Handler+0x4>

08002a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <UsageFault_Handler+0x4>

08002a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aaa:	f000 f98f 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <USART1_IRQHandler+0x10>)
 8002aba:	f002 fb65 	bl	8005188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000170 	.word	0x20000170

08002ac8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e00a      	b.n	8002af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ada:	f3af 8000 	nop.w
 8002ade:	4601      	mov	r1, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	60ba      	str	r2, [r7, #8]
 8002ae6:	b2ca      	uxtb	r2, r1
 8002ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3301      	adds	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	dbf0      	blt.n	8002ada <_read+0x12>
	}

return len;
 8002af8:	687b      	ldr	r3, [r7, #4]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <_sbrk+0x5c>)
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <_sbrk+0x60>)
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <_sbrk+0x64>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <_sbrk+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d207      	bcs.n	8002b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b34:	f002 ff06 	bl	8005944 <__errno>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e009      	b.n	8002b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <_sbrk+0x64>)
 8002b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20005000 	.word	0x20005000
 8002b64:	00000400 	.word	0x00000400
 8002b68:	20000250 	.word	0x20000250
 8002b6c:	20000268 	.word	0x20000268

08002b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <cleanByTimeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t cleanByTimeout(UART1_t *uart1, const char *str) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8002b86:	f000 f933 	bl	8002df0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d914      	bls.n	8002bc6 <cleanByTimeout+0x4a>

			uart1_send_str((char*) str);
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f000 f845 	bl	8002c2c <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <cleanByTimeout+0x54>)
 8002ba4:	f000 f842 	bl	8002c2c <uart1_send_str>

		if (strlen(str) > 0)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <cleanByTimeout+0x3a>
			cleanTxBuffer(uart1);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f88c 	bl	8002cce <cleanTxBuffer>
		uart1->timeout = HAL_GetTick();
 8002bb6:	f000 f91b 	bl	8002df0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		return 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <cleanByTimeout+0x4c>
	}
	return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	0800663c 	.word	0x0800663c

08002bd4 <uart1_write>:

	/* set the destination buffer */
	/*set the source buffer */
}

void uart1_write(char ch) {
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <uart1_write+0x50>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <uart1_write+0x50>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 8002bea:	bf00      	nop
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <uart1_write+0x54>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f9      	beq.n	8002bec <uart1_write+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <uart1_write+0x54>)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 8002bfe:	bf00      	nop
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <uart1_write+0x54>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f9      	beq.n	8002c00 <uart1_write+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <uart1_write+0x50>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <uart1_write+0x50>)
 8002c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c16:	60d3      	str	r3, [r2, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	40013800 	.word	0x40013800

08002c2c <uart1_send_str>:
		u->len = 0;
	}
	u->rxBuffer[u->len++] = uart1_1byte_read();
}

void uart1_send_str(char *str) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e009      	b.n	8002c4e <uart1_send_str+0x22>
		uart1_write(str[i]);
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ffc6 	bl	8002bd4 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <uart1_send_str+0xe>
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]

	if (len > 0) {
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <uart1_send_frame+0x3e>
		for (int i = 0; i < len; i++) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e00e      	b.n	8002c9a <uart1_send_frame+0x36>
			uart1_write(str[i]);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ffa5 	bl	8002bd4 <uart1_write>
			str[i] = (char) '\0';
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dbec      	blt.n	8002c7c <uart1_send_frame+0x18>
		}
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <cleanRxBuffer>:

void cleanRxBuffer(UART1_t *u) {
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	memset(u->rxBuffer, 0, sizeof(u->len));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fe7b 	bl	80059b4 <memset>
	u->len = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <cleanTxBuffer>:

void cleanTxBuffer(UART1_t *u) {
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	memset(u->txBuffer, 0, sizeof(u->len));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3364      	adds	r3, #100	; 0x64
 8002cda:	2201      	movs	r2, #1
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fe68 	bl	80059b4 <memset>
	u->len = 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cf6:	490d      	ldr	r1, [pc, #52]	; (8002d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cfc:	e002      	b.n	8002d04 <LoopCopyDataInit>

08002cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d02:	3304      	adds	r3, #4

08002d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d08:	d3f9      	bcc.n	8002cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d0c:	4c0a      	ldr	r4, [pc, #40]	; (8002d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d10:	e001      	b.n	8002d16 <LoopFillZerobss>

08002d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d14:	3204      	adds	r2, #4

08002d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d18:	d3fb      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d1a:	f7ff ff29 	bl	8002b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f002 fe17 	bl	8005950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d22:	f7fe fe53 	bl	80019cc <main>
  bx lr
 8002d26:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d30:	08006714 	.word	0x08006714
  ldr r2, =_sbss
 8002d34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d38:	20000268 	.word	0x20000268

08002d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC1_2_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_Init+0x28>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_Init+0x28>)
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f000 fb59 	bl	8003408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d56:	200f      	movs	r0, #15
 8002d58:	f000 f808 	bl	8002d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5c:	f7ff fca6 	bl	80026ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x54>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x58>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fb71 	bl	8003472 <HAL_SYSTICK_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00e      	b.n	8002db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d80a      	bhi.n	8002db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 fb39 	bl	800341e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_InitTick+0x5c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_IncTick+0x1c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_IncTick+0x20>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a03      	ldr	r2, [pc, #12]	; (8002dec <HAL_IncTick+0x20>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000008 	.word	0x20000008
 8002dec:	20000254 	.word	0x20000254

08002df0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_GetTick+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000254 	.word	0x20000254

08002e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff fff0 	bl	8002df0 <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffe0 	bl	8002df0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000008 	.word	0x20000008

08002e4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0be      	b.n	8002fec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fc40 	bl	8002710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9ab 	bl	80031ec <ADC_ConversionStop_Disable>
 8002e96:	4603      	mov	r3, r0
 8002e98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 8099 	bne.w	8002fda <HAL_ADC_Init+0x18e>
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 8095 	bne.w	8002fda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eb8:	f023 0302 	bic.w	r3, r3, #2
 8002ebc:	f043 0202 	orr.w	r2, r3, #2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ecc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d003      	beq.n	8002eee <HAL_ADC_Init+0xa2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d102      	bne.n	8002ef4 <HAL_ADC_Init+0xa8>
 8002eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_Init+0xaa>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7d1b      	ldrb	r3, [r3, #20]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d119      	bne.n	8002f38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7b1b      	ldrb	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	035a      	lsls	r2, r3, #13
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	e00b      	b.n	8002f38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_ADC_Init+0x1a8>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d003      	beq.n	8002f72 <HAL_ADC_Init+0x126>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d104      	bne.n	8002f7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_ADC_Init+0x1ac>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f023 0312 	bic.w	r3, r3, #18
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd8:	e007      	b.n	8002fea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ff8:	ff1f0efe 	.word	0xff1f0efe

08002ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x20>
 8003018:	2302      	movs	r3, #2
 800301a:	e0dc      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x1da>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d81c      	bhi.n	8003066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b05      	subs	r3, #5
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	4019      	ands	r1, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b05      	subs	r3, #5
 8003058:	fa00 f203 	lsl.w	r2, r0, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	; 0x34
 8003064:	e03c      	b.n	80030e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d81c      	bhi.n	80030a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	3b23      	subs	r3, #35	; 0x23
 8003080:	221f      	movs	r2, #31
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	4019      	ands	r1, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b23      	subs	r3, #35	; 0x23
 800309a:	fa00 f203 	lsl.w	r2, r0, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e01b      	b.n	80030e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	3b41      	subs	r3, #65	; 0x41
 80030ba:	221f      	movs	r2, #31
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4019      	ands	r1, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b41      	subs	r3, #65	; 0x41
 80030d4:	fa00 f203 	lsl.w	r2, r0, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d91c      	bls.n	8003122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68d9      	ldr	r1, [r3, #12]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	3b1e      	subs	r3, #30
 80030fa:	2207      	movs	r2, #7
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	4019      	ands	r1, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6898      	ldr	r0, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	3b1e      	subs	r3, #30
 8003114:	fa00 f203 	lsl.w	r2, r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e019      	b.n	8003156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6919      	ldr	r1, [r3, #16]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	2207      	movs	r2, #7
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	4019      	ands	r1, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6898      	ldr	r0, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	fa00 f203 	lsl.w	r2, r0, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b10      	cmp	r3, #16
 800315c:	d003      	beq.n	8003166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003162:	2b11      	cmp	r3, #17
 8003164:	d132      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d125      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d126      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800318c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d11a      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	0c9a      	lsrs	r2, r3, #18
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ac:	e002      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x1b2>
 80031ba:	e007      	b.n	80031cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012400 	.word	0x40012400
 80031e4:	20000000 	.word	0x20000000
 80031e8:	431bde83 	.word	0x431bde83

080031ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d12e      	bne.n	8003264 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003216:	f7ff fdeb 	bl	8002df0 <HAL_GetTick>
 800321a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800321c:	e01b      	b.n	8003256 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800321e:	f7ff fde7 	bl	8002df0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d914      	bls.n	8003256 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10d      	bne.n	8003256 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d0dc      	beq.n	800321e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800328c:	4013      	ands	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a2:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	60d3      	str	r3, [r2, #12]
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <__NVIC_GetPriorityGrouping+0x18>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0307 	and.w	r3, r3, #7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0b      	blt.n	80032fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <__NVIC_EnableIRQ+0x34>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	db0a      	blt.n	8003336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	490c      	ldr	r1, [pc, #48]	; (8003358 <__NVIC_SetPriority+0x4c>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	440b      	add	r3, r1
 8003330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003334:	e00a      	b.n	800334c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4908      	ldr	r1, [pc, #32]	; (800335c <__NVIC_SetPriority+0x50>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3b04      	subs	r3, #4
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	440b      	add	r3, r1
 800334a:	761a      	strb	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	bf28      	it	cs
 800337e:	2304      	movcs	r3, #4
 8003380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3304      	adds	r3, #4
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <NVIC_EncodePriority+0x30>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3b03      	subs	r3, #3
 800338e:	e000      	b.n	8003392 <NVIC_EncodePriority+0x32>
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4313      	orrs	r3, r2
         );
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	; 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d4:	d301      	bcc.n	80033da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00f      	b.n	80033fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <SysTick_Config+0x40>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e2:	210f      	movs	r1, #15
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f7ff ff90 	bl	800330c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <SysTick_Config+0x40>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <SysTick_Config+0x40>)
 80033f4:	2207      	movs	r2, #7
 80033f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	e000e010 	.word	0xe000e010

08003408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff2d 	bl	8003270 <__NVIC_SetPriorityGrouping>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	4603      	mov	r3, r0
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003430:	f7ff ff42 	bl	80032b8 <__NVIC_GetPriorityGrouping>
 8003434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff ff90 	bl	8003360 <NVIC_EncodePriority>
 8003440:	4602      	mov	r2, r0
 8003442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff5f 	bl	800330c <__NVIC_SetPriority>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff35 	bl	80032d4 <__NVIC_EnableIRQ>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ffa2 	bl	80033c4 <SysTick_Config>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e00e      	b.n	80034ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff f96b 	bl	8002788 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d008      	beq.n	80034ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e020      	b.n	800352c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 020e 	bic.w	r2, r2, #14
 80034f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
	...

08003538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800354a:	2b02      	cmp	r3, #2
 800354c:	d005      	beq.n	800355a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e051      	b.n	80035fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 020e 	bic.w	r2, r2, #14
 8003568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Abort_IT+0xd0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d029      	beq.n	80035d8 <HAL_DMA_Abort_IT+0xa0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_DMA_Abort_IT+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x9c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_DMA_Abort_IT+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01a      	beq.n	80035ce <HAL_DMA_Abort_IT+0x96>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_DMA_Abort_IT+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d012      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x90>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_DMA_Abort_IT+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00a      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x8a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_DMA_Abort_IT+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d102      	bne.n	80035bc <HAL_DMA_Abort_IT+0x84>
 80035b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ba:	e00e      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c0:	e00b      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c6:	e008      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035cc:	e005      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	e002      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035d4:	2310      	movs	r3, #16
 80035d6:	e000      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035d8:	2301      	movs	r3, #1
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_DMA_Abort_IT+0xe8>)
 80035dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
    } 
  }
  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40020008 	.word	0x40020008
 800360c:	4002001c 	.word	0x4002001c
 8003610:	40020030 	.word	0x40020030
 8003614:	40020044 	.word	0x40020044
 8003618:	40020058 	.word	0x40020058
 800361c:	4002006c 	.word	0x4002006c
 8003620:	40020000 	.word	0x40020000

08003624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003624:	b480      	push	{r7}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003636:	e169      	b.n	800390c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003638:	2201      	movs	r2, #1
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	f040 8158 	bne.w	8003906 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4a9a      	ldr	r2, [pc, #616]	; (80038c4 <HAL_GPIO_Init+0x2a0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d05e      	beq.n	800371e <HAL_GPIO_Init+0xfa>
 8003660:	4a98      	ldr	r2, [pc, #608]	; (80038c4 <HAL_GPIO_Init+0x2a0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d875      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 8003666:	4a98      	ldr	r2, [pc, #608]	; (80038c8 <HAL_GPIO_Init+0x2a4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d058      	beq.n	800371e <HAL_GPIO_Init+0xfa>
 800366c:	4a96      	ldr	r2, [pc, #600]	; (80038c8 <HAL_GPIO_Init+0x2a4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d86f      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 8003672:	4a96      	ldr	r2, [pc, #600]	; (80038cc <HAL_GPIO_Init+0x2a8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d052      	beq.n	800371e <HAL_GPIO_Init+0xfa>
 8003678:	4a94      	ldr	r2, [pc, #592]	; (80038cc <HAL_GPIO_Init+0x2a8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d869      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 800367e:	4a94      	ldr	r2, [pc, #592]	; (80038d0 <HAL_GPIO_Init+0x2ac>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d04c      	beq.n	800371e <HAL_GPIO_Init+0xfa>
 8003684:	4a92      	ldr	r2, [pc, #584]	; (80038d0 <HAL_GPIO_Init+0x2ac>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d863      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 800368a:	4a92      	ldr	r2, [pc, #584]	; (80038d4 <HAL_GPIO_Init+0x2b0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d046      	beq.n	800371e <HAL_GPIO_Init+0xfa>
 8003690:	4a90      	ldr	r2, [pc, #576]	; (80038d4 <HAL_GPIO_Init+0x2b0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d85d      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 8003696:	2b12      	cmp	r3, #18
 8003698:	d82a      	bhi.n	80036f0 <HAL_GPIO_Init+0xcc>
 800369a:	2b12      	cmp	r3, #18
 800369c:	d859      	bhi.n	8003752 <HAL_GPIO_Init+0x12e>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_GPIO_Init+0x80>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	0800371f 	.word	0x0800371f
 80036a8:	080036f9 	.word	0x080036f9
 80036ac:	0800370b 	.word	0x0800370b
 80036b0:	0800374d 	.word	0x0800374d
 80036b4:	08003753 	.word	0x08003753
 80036b8:	08003753 	.word	0x08003753
 80036bc:	08003753 	.word	0x08003753
 80036c0:	08003753 	.word	0x08003753
 80036c4:	08003753 	.word	0x08003753
 80036c8:	08003753 	.word	0x08003753
 80036cc:	08003753 	.word	0x08003753
 80036d0:	08003753 	.word	0x08003753
 80036d4:	08003753 	.word	0x08003753
 80036d8:	08003753 	.word	0x08003753
 80036dc:	08003753 	.word	0x08003753
 80036e0:	08003753 	.word	0x08003753
 80036e4:	08003753 	.word	0x08003753
 80036e8:	08003701 	.word	0x08003701
 80036ec:	08003715 	.word	0x08003715
 80036f0:	4a79      	ldr	r2, [pc, #484]	; (80038d8 <HAL_GPIO_Init+0x2b4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036f6:	e02c      	b.n	8003752 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	623b      	str	r3, [r7, #32]
          break;
 80036fe:	e029      	b.n	8003754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	623b      	str	r3, [r7, #32]
          break;
 8003708:	e024      	b.n	8003754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	3308      	adds	r3, #8
 8003710:	623b      	str	r3, [r7, #32]
          break;
 8003712:	e01f      	b.n	8003754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	330c      	adds	r3, #12
 800371a:	623b      	str	r3, [r7, #32]
          break;
 800371c:	e01a      	b.n	8003754 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003726:	2304      	movs	r3, #4
 8003728:	623b      	str	r3, [r7, #32]
          break;
 800372a:	e013      	b.n	8003754 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003734:	2308      	movs	r3, #8
 8003736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	611a      	str	r2, [r3, #16]
          break;
 800373e:	e009      	b.n	8003754 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003740:	2308      	movs	r3, #8
 8003742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	615a      	str	r2, [r3, #20]
          break;
 800374a:	e003      	b.n	8003754 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
          break;
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x130>
          break;
 8003752:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2bff      	cmp	r3, #255	; 0xff
 8003758:	d801      	bhi.n	800375e <HAL_GPIO_Init+0x13a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	e001      	b.n	8003762 <HAL_GPIO_Init+0x13e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2bff      	cmp	r3, #255	; 0xff
 8003768:	d802      	bhi.n	8003770 <HAL_GPIO_Init+0x14c>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	e002      	b.n	8003776 <HAL_GPIO_Init+0x152>
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	3b08      	subs	r3, #8
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	210f      	movs	r1, #15
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	6a39      	ldr	r1, [r7, #32]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80b1 	beq.w	8003906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037a4:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <HAL_GPIO_Init+0x2b8>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_GPIO_Init+0x2b8>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6193      	str	r3, [r2, #24]
 80037b0:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_GPIO_Init+0x2b8>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_GPIO_Init+0x2bc>)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	089b      	lsrs	r3, r3, #2
 80037c2:	3302      	adds	r3, #2
 80037c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	220f      	movs	r2, #15
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a40      	ldr	r2, [pc, #256]	; (80038e4 <HAL_GPIO_Init+0x2c0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_GPIO_Init+0x1ec>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3f      	ldr	r2, [pc, #252]	; (80038e8 <HAL_GPIO_Init+0x2c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00d      	beq.n	800380c <HAL_GPIO_Init+0x1e8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <HAL_GPIO_Init+0x2c8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <HAL_GPIO_Init+0x1e4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <HAL_GPIO_Init+0x2cc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_GPIO_Init+0x1e0>
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003804:	2304      	movs	r3, #4
 8003806:	e004      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003808:	2302      	movs	r3, #2
 800380a:	e002      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_GPIO_Init+0x1ee>
 8003810:	2300      	movs	r3, #0
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	f002 0203 	and.w	r2, r2, #3
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	4093      	lsls	r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003822:	492f      	ldr	r1, [pc, #188]	; (80038e0 <HAL_GPIO_Init+0x2bc>)
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d006      	beq.n	800384a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800383c:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	492c      	ldr	r1, [pc, #176]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800384a:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	43db      	mvns	r3, r3
 8003852:	4928      	ldr	r1, [pc, #160]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 8003854:	4013      	ands	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	4922      	ldr	r1, [pc, #136]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e006      	b.n	8003880 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	43db      	mvns	r3, r3
 800387a:	491e      	ldr	r1, [pc, #120]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800387c:	4013      	ands	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4918      	ldr	r1, [pc, #96]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]
 8003898:	e006      	b.n	80038a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	4914      	ldr	r1, [pc, #80]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d021      	beq.n	80038f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_GPIO_Init+0x2d0>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
 80038c0:	e021      	b.n	8003906 <HAL_GPIO_Init+0x2e2>
 80038c2:	bf00      	nop
 80038c4:	10320000 	.word	0x10320000
 80038c8:	10310000 	.word	0x10310000
 80038cc:	10220000 	.word	0x10220000
 80038d0:	10210000 	.word	0x10210000
 80038d4:	10120000 	.word	0x10120000
 80038d8:	10110000 	.word	0x10110000
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40010800 	.word	0x40010800
 80038e8:	40010c00 	.word	0x40010c00
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40011400 	.word	0x40011400
 80038f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_GPIO_Init+0x304>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	43db      	mvns	r3, r3
 8003900:	4909      	ldr	r1, [pc, #36]	; (8003928 <HAL_GPIO_Init+0x304>)
 8003902:	4013      	ands	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	f47f ae8e 	bne.w	8003638 <HAL_GPIO_Init+0x14>
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	372c      	adds	r7, #44	; 0x2c
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40010400 	.word	0x40010400

0800392c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e001      	b.n	800394e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	807b      	strh	r3, [r7, #2]
 8003966:	4613      	mov	r3, r2
 8003968:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800396a:	787b      	ldrb	r3, [r7, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003976:	e003      	b.n	8003980 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	041a      	lsls	r2, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	611a      	str	r2, [r3, #16]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
	...

0800398c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e12b      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe ff06 	bl	80027c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f0:	f000 fce4 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a81      	ldr	r2, [pc, #516]	; (8003c00 <HAL_I2C_Init+0x274>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <HAL_I2C_Init+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a80      	ldr	r2, [pc, #512]	; (8003c04 <HAL_I2C_Init+0x278>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x92>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a7d      	ldr	r2, [pc, #500]	; (8003c08 <HAL_I2C_Init+0x27c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e7      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_I2C_Init+0x280>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d802      	bhi.n	8003a60 <HAL_I2C_Init+0xd4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e009      	b.n	8003a74 <HAL_I2C_Init+0xe8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_I2C_Init+0x284>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	495c      	ldr	r1, [pc, #368]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d819      	bhi.n	8003ac8 <HAL_I2C_Init+0x13c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e59      	subs	r1, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_I2C_Init+0x138>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e59      	subs	r1, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	e051      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e04f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_I2C_Init+0x168>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_I2C_Init+0x18e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x196>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_I2C_Init+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e58      	subs	r0, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	0099      	lsls	r1, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6911      	ldr	r1, [r2, #16]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	000186a0 	.word	0x000186a0
 8003c04:	001e847f 	.word	0x001e847f
 8003c08:	003d08ff 	.word	0x003d08ff
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e272      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8087 	beq.w	8003d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c34:	4b92      	ldr	r3, [pc, #584]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c40:	4b8f      	ldr	r3, [pc, #572]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
 8003c4c:	4b8c      	ldr	r3, [pc, #560]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	4b89      	ldr	r3, [pc, #548]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x12c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d168      	bne.n	8003d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e24c      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x76>
 8003c7c:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a7f      	ldr	r2, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e02e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7a      	ldr	r2, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a77      	ldr	r2, [pc, #476]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xbc>
 8003cb6:	4b72      	ldr	r3, [pc, #456]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a71      	ldr	r2, [pc, #452]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a6e      	ldr	r2, [pc, #440]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd4>
 8003cd0:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a67      	ldr	r2, [pc, #412]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7ff f87e 	bl	8002df0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7ff f87a 	bl	8002df0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e200      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b5d      	ldr	r3, [pc, #372]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe4>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7ff f86a 	bl	8002df0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7ff f866 	bl	8002df0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1ec      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x10c>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x18c>
 8003d66:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x176>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1c0      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b3d      	ldr	r3, [pc, #244]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4939      	ldr	r1, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e03a      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_RCC_OscConfig+0x270>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7ff f81f 	bl	8002df0 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db6:	f7ff f81b 	bl	8002df0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1a1      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4927      	ldr	r1, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <HAL_RCC_OscConfig+0x270>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe fffe 	bl	8002df0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fe fffa 	bl	8002df0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e180      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03a      	beq.n	8003e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e30:	f7fe ffde 	bl	8002df0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e38:	f7fe ffda 	bl	8002df0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e160      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e56:	2001      	movs	r0, #1
 8003e58:	f000 fad8 	bl	800440c <RCC_Delay>
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_OscConfig+0x274>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e64:	f7fe ffc4 	bl	8002df0 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6a:	e00f      	b.n	8003e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fe ffc0 	bl	8002df0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d908      	bls.n	8003e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e146      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	42420000 	.word	0x42420000
 8003e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e9      	bne.n	8003e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a6 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4a87      	ldr	r2, [pc, #540]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	61d3      	str	r3, [r2, #28]
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed2:	4b82      	ldr	r3, [pc, #520]	; (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d118      	bne.n	8003f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ede:	4b7f      	ldr	r3, [pc, #508]	; (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7e      	ldr	r2, [pc, #504]	; (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fe ff81 	bl	8002df0 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fe ff7d 	bl	8002df0 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	; 0x64
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e103      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	4b75      	ldr	r3, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x4c8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x312>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6213      	str	r3, [r2, #32]
 8003f24:	e02d      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x334>
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4a69      	ldr	r2, [pc, #420]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6213      	str	r3, [r2, #32]
 8003f3a:	4b67      	ldr	r3, [pc, #412]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a66      	ldr	r2, [pc, #408]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	e01c      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x356>
 8003f50:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4a60      	ldr	r2, [pc, #384]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6213      	str	r3, [r2, #32]
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a5d      	ldr	r2, [pc, #372]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	e00b      	b.n	8003f82 <HAL_RCC_OscConfig+0x36e>
 8003f6a:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6213      	str	r3, [r2, #32]
 8003f76:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a57      	ldr	r2, [pc, #348]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d015      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe ff31 	bl	8002df0 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fe ff2d 	bl	8002df0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0b1      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCC_OscConfig+0x37e>
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe ff1b 	bl	8002df0 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe ff17 	bl	8002df0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e09b      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ee      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8087 	beq.w	800410a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d061      	beq.n	80040cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d146      	bne.n	800409e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fe feeb 	bl	8002df0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401e:	f7fe fee7 	bl	8002df0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e06d      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d108      	bne.n	8004058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4921      	ldr	r1, [pc, #132]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a19      	ldr	r1, [r3, #32]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	430b      	orrs	r3, r1
 800406a:	491b      	ldr	r1, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004076:	f7fe febb 	bl	8002df0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407e:	f7fe feb7 	bl	8002df0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e03d      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x46a>
 800409c:	e035      	b.n	800410a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fea4 	bl	8002df0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fea0 	bl	8002df0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e026      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x498>
 80040ca:	e01e      	b.n	800410a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e019      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40007000 	.word	0x40007000
 80040e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x500>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d0      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4965      	ldr	r1, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800417e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d040      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d115      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e073      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e06b      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4936      	ldr	r1, [pc, #216]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fe fdf2 	bl	8002df0 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe fdee 	bl	8002df0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e053      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d210      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	4922      	ldr	r1, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1cc>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fd50 	bl	8002d6c <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40021000 	.word	0x40021000
 80042e0:	08006658 	.word	0x08006658
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000004 	.word	0x20000004

080042ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	b490      	push	{r4, r7}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCC_GetSysClockFreq+0xac>)
 80042f4:	1d3c      	adds	r4, r7, #4
 80042f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042fc:	f240 2301 	movw	r3, #513	; 0x201
 8004300:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	2300      	movs	r3, #0
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004316:	4b21      	ldr	r3, [pc, #132]	; (800439c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b04      	cmp	r3, #4
 8004324:	d002      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004326:	2b08      	cmp	r3, #8
 8004328:	d003      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x46>
 800432a:	e02b      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800432e:	623b      	str	r3, [r7, #32]
      break;
 8004330:	e02b      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	0c9b      	lsrs	r3, r3, #18
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3328      	adds	r3, #40	; 0x28
 800433c:	443b      	add	r3, r7
 800433e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004342:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	0c5b      	lsrs	r3, r3, #17
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	3328      	adds	r3, #40	; 0x28
 800435a:	443b      	add	r3, r7
 800435c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004360:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004366:	fb03 f202 	mul.w	r2, r3, r2
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	e004      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	623b      	str	r3, [r7, #32]
      break;
 8004382:	e002      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004386:	623b      	str	r3, [r7, #32]
      break;
 8004388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438a:	6a3b      	ldr	r3, [r7, #32]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bc90      	pop	{r4, r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	08006648 	.word	0x08006648
 800439c:	40021000 	.word	0x40021000
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	003d0900 	.word	0x003d0900

080043a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ac:	4b02      	ldr	r3, [pc, #8]	; (80043b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	20000000 	.word	0x20000000

080043bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043c0:	f7ff fff2 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4903      	ldr	r1, [pc, #12]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000
 80043e0:	08006668 	.word	0x08006668

080043e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e8:	f7ff ffde 	bl	80043a8 <HAL_RCC_GetHCLKFreq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	0adb      	lsrs	r3, r3, #11
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	4903      	ldr	r1, [pc, #12]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043fa:	5ccb      	ldrb	r3, [r1, r3]
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000
 8004408:	08006668 	.word	0x08006668

0800440c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <RCC_Delay+0x34>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <RCC_Delay+0x38>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004428:	bf00      	nop
  }
  while (Delay --);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	60fa      	str	r2, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <RCC_Delay+0x1c>
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000000 	.word	0x20000000
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004468:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10d      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	4a4b      	ldr	r2, [pc, #300]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447e:	61d3      	str	r3, [r2, #28]
 8004480:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b46      	ldr	r3, [pc, #280]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d118      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a42      	ldr	r2, [pc, #264]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a8:	f7fe fca2 	bl	8002df0 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	e008      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fe fc9e 	bl	8002df0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e06d      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b3a      	ldr	r3, [pc, #232]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d027      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ec:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fc:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004502:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d014      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fe fc6d 	bl	8002df0 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fe fc69 	bl	8002df0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e036      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4917      	ldr	r1, [pc, #92]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	4313      	orrs	r3, r2
 800454c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	490b      	ldr	r1, [pc, #44]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4904      	ldr	r1, [pc, #16]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42420440 	.word	0x42420440

080045b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e076      	b.n	80046b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d6:	d009      	beq.n	80045ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
 80045de:	e005      	b.n	80045ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe f91a 	bl	8002840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	ea42 0103 	orr.w	r1, r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	0c1a      	lsrs	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 0204 	and.w	r2, r2, #4
 8004692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_SPI_Transmit+0x22>
 80046da:	2302      	movs	r3, #2
 80046dc:	e126      	b.n	800492c <HAL_SPI_Transmit+0x270>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e6:	f7fe fb83 	bl	8002df0 <HAL_GetTick>
 80046ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d002      	beq.n	8004702 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
 80046fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004700:	e10b      	b.n	800491a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_SPI_Transmit+0x52>
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004712:	e102      	b.n	800491a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475a:	d10f      	bne.n	800477c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d007      	beq.n	800479a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d14b      	bne.n	800483c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_Transmit+0xf6>
 80047ac:	8afb      	ldrh	r3, [r7, #22]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d13e      	bne.n	8004830 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	881a      	ldrh	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	1c9a      	adds	r2, r3, #2
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047d6:	e02b      	b.n	8004830 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d112      	bne.n	800480c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	86da      	strh	r2, [r3, #54]	; 0x36
 800480a:	e011      	b.n	8004830 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480c:	f7fe faf0 	bl	8002df0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d803      	bhi.n	8004824 <HAL_SPI_Transmit+0x168>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d102      	bne.n	800482a <HAL_SPI_Transmit+0x16e>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800482e:	e074      	b.n	800491a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ce      	bne.n	80047d8 <HAL_SPI_Transmit+0x11c>
 800483a:	e04c      	b.n	80048d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_SPI_Transmit+0x18e>
 8004844:	8afb      	ldrh	r3, [r7, #22]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d140      	bne.n	80048cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004870:	e02c      	b.n	80048cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d113      	bne.n	80048a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80048a6:	e011      	b.n	80048cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a8:	f7fe faa2 	bl	8002df0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d803      	bhi.n	80048c0 <HAL_SPI_Transmit+0x204>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x20a>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ca:	e026      	b.n	800491a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1cd      	bne.n	8004872 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fbb8 	bl	8005050 <SPI_EndRxTxTransaction>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e000      	b.n	800491a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004918:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800492a:	7ffb      	ldrb	r3, [r7, #31]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004950:	d112      	bne.n	8004978 <HAL_SPI_Receive+0x44>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2204      	movs	r2, #4
 800495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8f1 	bl	8004b56 <HAL_SPI_TransmitReceive>
 8004974:	4603      	mov	r3, r0
 8004976:	e0ea      	b.n	8004b4e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_SPI_Receive+0x52>
 8004982:	2302      	movs	r3, #2
 8004984:	e0e3      	b.n	8004b4e <HAL_SPI_Receive+0x21a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800498e:	f7fe fa2f 	bl	8002df0 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
 80049a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049a4:	e0ca      	b.n	8004b3c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Receive+0x7e>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b6:	e0c1      	b.n	8004b3c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2204      	movs	r2, #4
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fe:	d10f      	bne.n	8004a20 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d007      	beq.n	8004a3e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d162      	bne.n	8004b0c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a46:	e02e      	b.n	8004aa6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d115      	bne.n	8004a82 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f103 020c 	add.w	r2, r3, #12
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a80:	e011      	b.n	8004aa6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a82:	f7fe f9b5 	bl	8002df0 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d803      	bhi.n	8004a9a <HAL_SPI_Receive+0x166>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_Receive+0x16c>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004aa4:	e04a      	b.n	8004b3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1cb      	bne.n	8004a48 <HAL_SPI_Receive+0x114>
 8004ab0:	e031      	b.n	8004b16 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d113      	bne.n	8004ae8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	b292      	uxth	r2, r2
 8004acc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae6:	e011      	b.n	8004b0c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae8:	f7fe f982 	bl	8002df0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d803      	bhi.n	8004b00 <HAL_SPI_Receive+0x1cc>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Receive+0x1d2>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b0a:	e017      	b.n	8004b3c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1cd      	bne.n	8004ab2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa46 	bl	8004fac <SPI_EndRxTransaction>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
 8004b38:	e000      	b.n	8004b3c <HAL_SPI_Receive+0x208>
  }

error :
 8004b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08c      	sub	sp, #48	; 0x30
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b64:	2301      	movs	r3, #1
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x26>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e18a      	b.n	8004e92 <HAL_SPI_TransmitReceive+0x33c>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fe f934 	bl	8002df0 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00f      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0x70>
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bac:	d107      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x68>
 8004bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d003      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bc4:	e15b      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x82>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x82>
 8004bd2:	887b      	ldrh	r3, [r7, #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bde:	e14e      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d003      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	887a      	ldrh	r2, [r7, #2]
 8004c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d007      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c50:	d178      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x10a>
 8004c5a:	8b7b      	ldrh	r3, [r7, #26]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d166      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c84:	e053      	b.n	8004d2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d11b      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x176>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x176>
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d113      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d119      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x1b8>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d014      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	b292      	uxth	r2, r2
 8004cf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	1c9a      	adds	r2, r3, #2
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d0e:	f7fe f86f 	bl	8002df0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d807      	bhi.n	8004d2e <HAL_SPI_TransmitReceive+0x1d8>
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d003      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d2c:	e0a7      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1a6      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x130>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1a1      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x130>
 8004d42:	e07c      	b.n	8004e3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x1fc>
 8004d4c:	8b7b      	ldrh	r3, [r7, #26]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d16b      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d78:	e057      	b.n	8004e2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d11c      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x26c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x26c>
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d114      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d119      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x2ae>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d014      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e00:	2301      	movs	r3, #1
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e04:	f7fd fff4 	bl	8002df0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d803      	bhi.n	8004e1c <HAL_SPI_TransmitReceive+0x2c6>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d102      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x2cc>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e28:	e029      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1a2      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x224>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d19d      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f904 	bl	8005050 <SPI_EndRxTxTransaction>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e5a:	e010      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	e000      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3730      	adds	r7, #48	; 0x30
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eac:	f7fd ffa0 	bl	8002df0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ebc:	f7fd ff98 	bl	8002df0 <HAL_GetTick>
 8004ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	015b      	lsls	r3, r3, #5
 8004ec8:	0d1b      	lsrs	r3, r3, #20
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed2:	e054      	b.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d050      	beq.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004edc:	f7fd ff88 	bl	8002df0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d902      	bls.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d13d      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0a:	d111      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f14:	d004      	beq.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d107      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d10f      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e017      	b.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d19b      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000000 	.word	0x20000000

08004fac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc0:	d111      	bne.n	8004fe6 <SPI_EndRxTransaction+0x3a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d004      	beq.n	8004fd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d107      	bne.n	8004fe6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d117      	bne.n	8005020 <SPI_EndRxTransaction+0x74>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d112      	bne.n	8005020 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	2101      	movs	r1, #1
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff49 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01a      	beq.n	8005046 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e013      	b.n	8005048 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff ff36 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e000      	b.n	8005048 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff18 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e000      	b.n	8005084 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e03f      	b.n	800511e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd fc0e 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fba9 	bl	8005828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b20      	cmp	r3, #32
 800513e:	d11d      	bne.n	800517c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_UART_Receive_IT+0x26>
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e016      	b.n	800517e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_UART_Receive_IT+0x38>
 800515a:	2302      	movs	r3, #2
 800515c:	e00f      	b.n	800517e <HAL_UART_Receive_IT+0x58>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	461a      	mov	r2, r3
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f9cf 	bl	8005516 <UART_Start_Receive_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	e000      	b.n	800517e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10d      	bne.n	80051da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_UART_IRQHandler+0x52>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa7f 	bl	80056d6 <UART_Receive_IT>
      return;
 80051d8:	e17b      	b.n	80054d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80b1 	beq.w	8005344 <HAL_UART_IRQHandler+0x1bc>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <HAL_UART_IRQHandler+0x70>
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a6 	beq.w	8005344 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_UART_IRQHandler+0x90>
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f043 0201 	orr.w	r2, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_UART_IRQHandler+0xb0>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f043 0202 	orr.w	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_UART_IRQHandler+0xd0>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <HAL_UART_IRQHandler+0xfa>
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_UART_IRQHandler+0xee>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0208 	orr.w	r2, r3, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 811e 	beq.w	80054c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_UART_IRQHandler+0x11e>
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa18 	bl	80056d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <HAL_UART_IRQHandler+0x146>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d031      	beq.n	8005332 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f95a 	bl	8005588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d023      	beq.n	800532a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d013      	beq.n	8005322 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	4a76      	ldr	r2, [pc, #472]	; (80054d8 <HAL_UART_IRQHandler+0x350>)
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe f916 	bl	8003538 <HAL_DMA_Abort_IT>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800531c:	4610      	mov	r0, r2
 800531e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005320:	e00e      	b.n	8005340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8e3 	bl	80054ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	e00a      	b.n	8005340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8df 	bl	80054ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	e006      	b.n	8005340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8db 	bl	80054ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800533e:	e0c3      	b.n	80054c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	bf00      	nop
    return;
 8005342:	e0c1      	b.n	80054c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	f040 80a1 	bne.w	8005490 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 809b 	beq.w	8005490 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8095 	beq.w	8005490 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04e      	beq.n	8005428 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005394:	8a3b      	ldrh	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8098 	beq.w	80054cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053a0:	8a3a      	ldrh	r2, [r7, #16]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f080 8092 	bcs.w	80054cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8a3a      	ldrh	r2, [r7, #16]
 80053ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d02b      	beq.n	8005410 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0210 	bic.w	r2, r2, #16
 8005404:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe f859 	bl	80034c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005418:	b29b      	uxth	r3, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	b29b      	uxth	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f86d 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005426:	e051      	b.n	80054cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005430:	b29b      	uxth	r3, r3
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d047      	beq.n	80054d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005440:	8a7b      	ldrh	r3, [r7, #18]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d044      	beq.n	80054d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005454:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0210 	bic.w	r2, r2, #16
 8005482:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005484:	8a7b      	ldrh	r3, [r7, #18]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f839 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800548e:	e01f      	b.n	80054d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_UART_IRQHandler+0x324>
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f8af 	bl	8005608 <UART_Transmit_IT>
    return;
 80054aa:	e012      	b.n	80054d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <HAL_UART_IRQHandler+0x34a>
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8f0 	bl	80056a6 <UART_EndTransmit_IT>
    return;
 80054c6:	e004      	b.n	80054d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80054c8:	bf00      	nop
 80054ca:	e002      	b.n	80054d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80054cc:	bf00      	nop
 80054ce:	e000      	b.n	80054d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80054d0:	bf00      	nop
  }
}
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080055e1 	.word	0x080055e1

080054dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	4613      	mov	r3, r2
 8005522:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	; 0x22
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0220 	orr.w	r2, r2, #32
 800557a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800559e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d107      	bne.n	80055c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0210 	bic.w	r2, r2, #16
 80055c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff ff77 	bl	80054ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b21      	cmp	r3, #33	; 0x21
 800561a:	d13e      	bne.n	800569a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d114      	bne.n	8005650 <UART_Transmit_IT+0x48>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d110      	bne.n	8005650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]
 800564e:	e008      	b.n	8005662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6211      	str	r1, [r2, #32]
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4619      	mov	r1, r3
 8005670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ff08 	bl	80054dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b22      	cmp	r3, #34	; 0x22
 80056e8:	f040 8099 	bne.w	800581e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d117      	bne.n	8005726 <UART_Receive_IT+0x50>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d113      	bne.n	8005726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	b29a      	uxth	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	1c9a      	adds	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
 8005724:	e026      	b.n	8005774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d007      	beq.n	800574a <UART_Receive_IT+0x74>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <UART_Receive_IT+0x82>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e008      	b.n	800576a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005764:	b2da      	uxtb	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29b      	uxth	r3, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005784:	2b00      	cmp	r3, #0
 8005786:	d148      	bne.n	800581a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0220 	bic.w	r2, r2, #32
 8005796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d123      	bne.n	8005810 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0210 	bic.w	r2, r2, #16
 80057dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d10a      	bne.n	8005802 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fe79 	bl	8005500 <HAL_UARTEx_RxEventCallback>
 800580e:	e002      	b.n	8005816 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fb fc65 	bl	80010e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e002      	b.n	8005820 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	e000      	b.n	8005820 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005862:	f023 030c 	bic.w	r3, r3, #12
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	430b      	orrs	r3, r1
 800586e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <UART_SetConfig+0x114>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fda8 	bl	80043e4 <HAL_RCC_GetPCLK2Freq>
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	e002      	b.n	800589e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe fd90 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 800589c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009a      	lsls	r2, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <UART_SetConfig+0x118>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	0119      	lsls	r1, r3, #4
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <UART_SetConfig+0x118>)
 80058d6:	fba3 0302 	umull	r0, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2064      	movs	r0, #100	; 0x64
 80058de:	fb00 f303 	mul.w	r3, r0, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <UART_SetConfig+0x118>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f4:	4419      	add	r1, r3
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	fbb2 f2f3 	udiv	r2, r2, r3
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <UART_SetConfig+0x118>)
 800590e:	fba3 0302 	umull	r0, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2064      	movs	r0, #100	; 0x64
 8005916:	fb00 f303 	mul.w	r3, r0, r3
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a07      	ldr	r2, [pc, #28]	; (8005940 <UART_SetConfig+0x118>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	440a      	add	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40013800 	.word	0x40013800
 8005940:	51eb851f 	.word	0x51eb851f

08005944 <__errno>:
 8005944:	4b01      	ldr	r3, [pc, #4]	; (800594c <__errno+0x8>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	2000000c 	.word	0x2000000c

08005950 <__libc_init_array>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	2600      	movs	r6, #0
 8005954:	4d0c      	ldr	r5, [pc, #48]	; (8005988 <__libc_init_array+0x38>)
 8005956:	4c0d      	ldr	r4, [pc, #52]	; (800598c <__libc_init_array+0x3c>)
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	42a6      	cmp	r6, r4
 800595e:	d109      	bne.n	8005974 <__libc_init_array+0x24>
 8005960:	f000 fcb8 	bl	80062d4 <_init>
 8005964:	2600      	movs	r6, #0
 8005966:	4d0a      	ldr	r5, [pc, #40]	; (8005990 <__libc_init_array+0x40>)
 8005968:	4c0a      	ldr	r4, [pc, #40]	; (8005994 <__libc_init_array+0x44>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	42a6      	cmp	r6, r4
 8005970:	d105      	bne.n	800597e <__libc_init_array+0x2e>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	f855 3b04 	ldr.w	r3, [r5], #4
 8005978:	4798      	blx	r3
 800597a:	3601      	adds	r6, #1
 800597c:	e7ee      	b.n	800595c <__libc_init_array+0xc>
 800597e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005982:	4798      	blx	r3
 8005984:	3601      	adds	r6, #1
 8005986:	e7f2      	b.n	800596e <__libc_init_array+0x1e>
 8005988:	0800670c 	.word	0x0800670c
 800598c:	0800670c 	.word	0x0800670c
 8005990:	0800670c 	.word	0x0800670c
 8005994:	08006710 	.word	0x08006710

08005998 <memcpy>:
 8005998:	440a      	add	r2, r1
 800599a:	4291      	cmp	r1, r2
 800599c:	f100 33ff 	add.w	r3, r0, #4294967295
 80059a0:	d100      	bne.n	80059a4 <memcpy+0xc>
 80059a2:	4770      	bx	lr
 80059a4:	b510      	push	{r4, lr}
 80059a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059aa:	4291      	cmp	r1, r2
 80059ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059b0:	d1f9      	bne.n	80059a6 <memcpy+0xe>
 80059b2:	bd10      	pop	{r4, pc}

080059b4 <memset>:
 80059b4:	4603      	mov	r3, r0
 80059b6:	4402      	add	r2, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <siprintf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059ca:	b500      	push	{lr}
 80059cc:	b09c      	sub	sp, #112	; 0x70
 80059ce:	ab1d      	add	r3, sp, #116	; 0x74
 80059d0:	9002      	str	r0, [sp, #8]
 80059d2:	9006      	str	r0, [sp, #24]
 80059d4:	9107      	str	r1, [sp, #28]
 80059d6:	9104      	str	r1, [sp, #16]
 80059d8:	4808      	ldr	r0, [pc, #32]	; (80059fc <siprintf+0x38>)
 80059da:	4909      	ldr	r1, [pc, #36]	; (8005a00 <siprintf+0x3c>)
 80059dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e0:	9105      	str	r1, [sp, #20]
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	a902      	add	r1, sp, #8
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f000 f908 	bl	8005bfc <_svfiprintf_r>
 80059ec:	2200      	movs	r2, #0
 80059ee:	9b02      	ldr	r3, [sp, #8]
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	b01c      	add	sp, #112	; 0x70
 80059f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f8:	b003      	add	sp, #12
 80059fa:	4770      	bx	lr
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	ffff0208 	.word	0xffff0208

08005a04 <read>:
 8005a04:	4613      	mov	r3, r2
 8005a06:	460a      	mov	r2, r1
 8005a08:	4601      	mov	r1, r0
 8005a0a:	4802      	ldr	r0, [pc, #8]	; (8005a14 <read+0x10>)
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f000 bb8b 	b.w	8006128 <_read_r>
 8005a12:	bf00      	nop
 8005a14:	2000000c 	.word	0x2000000c

08005a18 <__retarget_lock_acquire_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_release_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <sbrk_aligned>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4e0e      	ldr	r6, [pc, #56]	; (8005a58 <sbrk_aligned+0x3c>)
 8005a20:	460c      	mov	r4, r1
 8005a22:	6831      	ldr	r1, [r6, #0]
 8005a24:	4605      	mov	r5, r0
 8005a26:	b911      	cbnz	r1, 8005a2e <sbrk_aligned+0x12>
 8005a28:	f000 fb90 	bl	800614c <_sbrk_r>
 8005a2c:	6030      	str	r0, [r6, #0]
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fb8b 	bl	800614c <_sbrk_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d00a      	beq.n	8005a50 <sbrk_aligned+0x34>
 8005a3a:	1cc4      	adds	r4, r0, #3
 8005a3c:	f024 0403 	bic.w	r4, r4, #3
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d007      	beq.n	8005a54 <sbrk_aligned+0x38>
 8005a44:	1a21      	subs	r1, r4, r0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fb80 	bl	800614c <_sbrk_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d101      	bne.n	8005a54 <sbrk_aligned+0x38>
 8005a50:	f04f 34ff 	mov.w	r4, #4294967295
 8005a54:	4620      	mov	r0, r4
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	20000260 	.word	0x20000260

08005a5c <_malloc_r>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	1ccd      	adds	r5, r1, #3
 8005a62:	f025 0503 	bic.w	r5, r5, #3
 8005a66:	3508      	adds	r5, #8
 8005a68:	2d0c      	cmp	r5, #12
 8005a6a:	bf38      	it	cc
 8005a6c:	250c      	movcc	r5, #12
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	4607      	mov	r7, r0
 8005a72:	db01      	blt.n	8005a78 <_malloc_r+0x1c>
 8005a74:	42a9      	cmp	r1, r5
 8005a76:	d905      	bls.n	8005a84 <_malloc_r+0x28>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	2600      	movs	r6, #0
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	4630      	mov	r0, r6
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a84:	4e2e      	ldr	r6, [pc, #184]	; (8005b40 <_malloc_r+0xe4>)
 8005a86:	f000 fb99 	bl	80061bc <__malloc_lock>
 8005a8a:	6833      	ldr	r3, [r6, #0]
 8005a8c:	461c      	mov	r4, r3
 8005a8e:	bb34      	cbnz	r4, 8005ade <_malloc_r+0x82>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4638      	mov	r0, r7
 8005a94:	f7ff ffc2 	bl	8005a1c <sbrk_aligned>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	d14d      	bne.n	8005b3a <_malloc_r+0xde>
 8005a9e:	6834      	ldr	r4, [r6, #0]
 8005aa0:	4626      	mov	r6, r4
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d140      	bne.n	8005b28 <_malloc_r+0xcc>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4638      	mov	r0, r7
 8005aac:	eb04 0803 	add.w	r8, r4, r3
 8005ab0:	f000 fb4c 	bl	800614c <_sbrk_r>
 8005ab4:	4580      	cmp	r8, r0
 8005ab6:	d13a      	bne.n	8005b2e <_malloc_r+0xd2>
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	3503      	adds	r5, #3
 8005abc:	1a6d      	subs	r5, r5, r1
 8005abe:	f025 0503 	bic.w	r5, r5, #3
 8005ac2:	3508      	adds	r5, #8
 8005ac4:	2d0c      	cmp	r5, #12
 8005ac6:	bf38      	it	cc
 8005ac8:	250c      	movcc	r5, #12
 8005aca:	4638      	mov	r0, r7
 8005acc:	4629      	mov	r1, r5
 8005ace:	f7ff ffa5 	bl	8005a1c <sbrk_aligned>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d02b      	beq.n	8005b2e <_malloc_r+0xd2>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	442b      	add	r3, r5
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	e00e      	b.n	8005afc <_malloc_r+0xa0>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	1b52      	subs	r2, r2, r5
 8005ae2:	d41e      	bmi.n	8005b22 <_malloc_r+0xc6>
 8005ae4:	2a0b      	cmp	r2, #11
 8005ae6:	d916      	bls.n	8005b16 <_malloc_r+0xba>
 8005ae8:	1961      	adds	r1, r4, r5
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	6025      	str	r5, [r4, #0]
 8005aee:	bf18      	it	ne
 8005af0:	6059      	strne	r1, [r3, #4]
 8005af2:	6863      	ldr	r3, [r4, #4]
 8005af4:	bf08      	it	eq
 8005af6:	6031      	streq	r1, [r6, #0]
 8005af8:	5162      	str	r2, [r4, r5]
 8005afa:	604b      	str	r3, [r1, #4]
 8005afc:	4638      	mov	r0, r7
 8005afe:	f104 060b 	add.w	r6, r4, #11
 8005b02:	f000 fb61 	bl	80061c8 <__malloc_unlock>
 8005b06:	f026 0607 	bic.w	r6, r6, #7
 8005b0a:	1d23      	adds	r3, r4, #4
 8005b0c:	1af2      	subs	r2, r6, r3
 8005b0e:	d0b6      	beq.n	8005a7e <_malloc_r+0x22>
 8005b10:	1b9b      	subs	r3, r3, r6
 8005b12:	50a3      	str	r3, [r4, r2]
 8005b14:	e7b3      	b.n	8005a7e <_malloc_r+0x22>
 8005b16:	6862      	ldr	r2, [r4, #4]
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	bf0c      	ite	eq
 8005b1c:	6032      	streq	r2, [r6, #0]
 8005b1e:	605a      	strne	r2, [r3, #4]
 8005b20:	e7ec      	b.n	8005afc <_malloc_r+0xa0>
 8005b22:	4623      	mov	r3, r4
 8005b24:	6864      	ldr	r4, [r4, #4]
 8005b26:	e7b2      	b.n	8005a8e <_malloc_r+0x32>
 8005b28:	4634      	mov	r4, r6
 8005b2a:	6876      	ldr	r6, [r6, #4]
 8005b2c:	e7b9      	b.n	8005aa2 <_malloc_r+0x46>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	4638      	mov	r0, r7
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	f000 fb48 	bl	80061c8 <__malloc_unlock>
 8005b38:	e7a1      	b.n	8005a7e <_malloc_r+0x22>
 8005b3a:	6025      	str	r5, [r4, #0]
 8005b3c:	e7de      	b.n	8005afc <_malloc_r+0xa0>
 8005b3e:	bf00      	nop
 8005b40:	2000025c 	.word	0x2000025c

08005b44 <__ssputs_r>:
 8005b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b48:	688e      	ldr	r6, [r1, #8]
 8005b4a:	4682      	mov	sl, r0
 8005b4c:	429e      	cmp	r6, r3
 8005b4e:	460c      	mov	r4, r1
 8005b50:	4690      	mov	r8, r2
 8005b52:	461f      	mov	r7, r3
 8005b54:	d838      	bhi.n	8005bc8 <__ssputs_r+0x84>
 8005b56:	898a      	ldrh	r2, [r1, #12]
 8005b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b5c:	d032      	beq.n	8005bc4 <__ssputs_r+0x80>
 8005b5e:	6825      	ldr	r5, [r4, #0]
 8005b60:	6909      	ldr	r1, [r1, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	eba5 0901 	sub.w	r9, r5, r1
 8005b68:	6965      	ldr	r5, [r4, #20]
 8005b6a:	444b      	add	r3, r9
 8005b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b74:	106d      	asrs	r5, r5, #1
 8005b76:	429d      	cmp	r5, r3
 8005b78:	bf38      	it	cc
 8005b7a:	461d      	movcc	r5, r3
 8005b7c:	0553      	lsls	r3, r2, #21
 8005b7e:	d531      	bpl.n	8005be4 <__ssputs_r+0xa0>
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7ff ff6b 	bl	8005a5c <_malloc_r>
 8005b86:	4606      	mov	r6, r0
 8005b88:	b950      	cbnz	r0, 8005ba0 <__ssputs_r+0x5c>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f8ca 3000 	str.w	r3, [sl]
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	464a      	mov	r2, r9
 8005ba2:	6921      	ldr	r1, [r4, #16]
 8005ba4:	f7ff fef8 	bl	8005998 <memcpy>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb2:	81a3      	strh	r3, [r4, #12]
 8005bb4:	6126      	str	r6, [r4, #16]
 8005bb6:	444e      	add	r6, r9
 8005bb8:	6026      	str	r6, [r4, #0]
 8005bba:	463e      	mov	r6, r7
 8005bbc:	6165      	str	r5, [r4, #20]
 8005bbe:	eba5 0509 	sub.w	r5, r5, r9
 8005bc2:	60a5      	str	r5, [r4, #8]
 8005bc4:	42be      	cmp	r6, r7
 8005bc6:	d900      	bls.n	8005bca <__ssputs_r+0x86>
 8005bc8:	463e      	mov	r6, r7
 8005bca:	4632      	mov	r2, r6
 8005bcc:	4641      	mov	r1, r8
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	f000 fada 	bl	8006188 <memmove>
 8005bd4:	68a3      	ldr	r3, [r4, #8]
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	1b9b      	subs	r3, r3, r6
 8005bda:	60a3      	str	r3, [r4, #8]
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	4433      	add	r3, r6
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	e7db      	b.n	8005b9c <__ssputs_r+0x58>
 8005be4:	462a      	mov	r2, r5
 8005be6:	f000 fb3d 	bl	8006264 <_realloc_r>
 8005bea:	4606      	mov	r6, r0
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d1e1      	bne.n	8005bb4 <__ssputs_r+0x70>
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	6921      	ldr	r1, [r4, #16]
 8005bf4:	f000 faee 	bl	80061d4 <_free_r>
 8005bf8:	e7c7      	b.n	8005b8a <__ssputs_r+0x46>
	...

08005bfc <_svfiprintf_r>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	4698      	mov	r8, r3
 8005c02:	898b      	ldrh	r3, [r1, #12]
 8005c04:	4607      	mov	r7, r0
 8005c06:	061b      	lsls	r3, r3, #24
 8005c08:	460d      	mov	r5, r1
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	b09d      	sub	sp, #116	; 0x74
 8005c0e:	d50e      	bpl.n	8005c2e <_svfiprintf_r+0x32>
 8005c10:	690b      	ldr	r3, [r1, #16]
 8005c12:	b963      	cbnz	r3, 8005c2e <_svfiprintf_r+0x32>
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	f7ff ff21 	bl	8005a5c <_malloc_r>
 8005c1a:	6028      	str	r0, [r5, #0]
 8005c1c:	6128      	str	r0, [r5, #16]
 8005c1e:	b920      	cbnz	r0, 8005c2a <_svfiprintf_r+0x2e>
 8005c20:	230c      	movs	r3, #12
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e0d1      	b.n	8005dce <_svfiprintf_r+0x1d2>
 8005c2a:	2340      	movs	r3, #64	; 0x40
 8005c2c:	616b      	str	r3, [r5, #20]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9309      	str	r3, [sp, #36]	; 0x24
 8005c32:	2320      	movs	r3, #32
 8005c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c38:	2330      	movs	r3, #48	; 0x30
 8005c3a:	f04f 0901 	mov.w	r9, #1
 8005c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005de8 <_svfiprintf_r+0x1ec>
 8005c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c52:	b10a      	cbz	r2, 8005c58 <_svfiprintf_r+0x5c>
 8005c54:	2a25      	cmp	r2, #37	; 0x25
 8005c56:	d1f9      	bne.n	8005c4c <_svfiprintf_r+0x50>
 8005c58:	ebba 0b04 	subs.w	fp, sl, r4
 8005c5c:	d00b      	beq.n	8005c76 <_svfiprintf_r+0x7a>
 8005c5e:	465b      	mov	r3, fp
 8005c60:	4622      	mov	r2, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	4638      	mov	r0, r7
 8005c66:	f7ff ff6d 	bl	8005b44 <__ssputs_r>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f000 80aa 	beq.w	8005dc4 <_svfiprintf_r+0x1c8>
 8005c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c72:	445a      	add	r2, fp
 8005c74:	9209      	str	r2, [sp, #36]	; 0x24
 8005c76:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80a2 	beq.w	8005dc4 <_svfiprintf_r+0x1c8>
 8005c80:	2300      	movs	r3, #0
 8005c82:	f04f 32ff 	mov.w	r2, #4294967295
 8005c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8a:	f10a 0a01 	add.w	sl, sl, #1
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c96:	931a      	str	r3, [sp, #104]	; 0x68
 8005c98:	4654      	mov	r4, sl
 8005c9a:	2205      	movs	r2, #5
 8005c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca0:	4851      	ldr	r0, [pc, #324]	; (8005de8 <_svfiprintf_r+0x1ec>)
 8005ca2:	f000 fa63 	bl	800616c <memchr>
 8005ca6:	9a04      	ldr	r2, [sp, #16]
 8005ca8:	b9d8      	cbnz	r0, 8005ce2 <_svfiprintf_r+0xe6>
 8005caa:	06d0      	lsls	r0, r2, #27
 8005cac:	bf44      	itt	mi
 8005cae:	2320      	movmi	r3, #32
 8005cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cb4:	0711      	lsls	r1, r2, #28
 8005cb6:	bf44      	itt	mi
 8005cb8:	232b      	movmi	r3, #43	; 0x2b
 8005cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc4:	d015      	beq.n	8005cf2 <_svfiprintf_r+0xf6>
 8005cc6:	4654      	mov	r4, sl
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f04f 0c0a 	mov.w	ip, #10
 8005cce:	9a07      	ldr	r2, [sp, #28]
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd6:	3b30      	subs	r3, #48	; 0x30
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d94e      	bls.n	8005d7a <_svfiprintf_r+0x17e>
 8005cdc:	b1b0      	cbz	r0, 8005d0c <_svfiprintf_r+0x110>
 8005cde:	9207      	str	r2, [sp, #28]
 8005ce0:	e014      	b.n	8005d0c <_svfiprintf_r+0x110>
 8005ce2:	eba0 0308 	sub.w	r3, r0, r8
 8005ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	46a2      	mov	sl, r4
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	e7d2      	b.n	8005c98 <_svfiprintf_r+0x9c>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	1d19      	adds	r1, r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	9103      	str	r1, [sp, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfbb      	ittet	lt
 8005cfe:	425b      	neglt	r3, r3
 8005d00:	f042 0202 	orrlt.w	r2, r2, #2
 8005d04:	9307      	strge	r3, [sp, #28]
 8005d06:	9307      	strlt	r3, [sp, #28]
 8005d08:	bfb8      	it	lt
 8005d0a:	9204      	strlt	r2, [sp, #16]
 8005d0c:	7823      	ldrb	r3, [r4, #0]
 8005d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d10:	d10c      	bne.n	8005d2c <_svfiprintf_r+0x130>
 8005d12:	7863      	ldrb	r3, [r4, #1]
 8005d14:	2b2a      	cmp	r3, #42	; 0x2a
 8005d16:	d135      	bne.n	8005d84 <_svfiprintf_r+0x188>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	3402      	adds	r4, #2
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfb8      	it	lt
 8005d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005dec <_svfiprintf_r+0x1f0>
 8005d30:	2203      	movs	r2, #3
 8005d32:	4650      	mov	r0, sl
 8005d34:	7821      	ldrb	r1, [r4, #0]
 8005d36:	f000 fa19 	bl	800616c <memchr>
 8005d3a:	b140      	cbz	r0, 8005d4e <_svfiprintf_r+0x152>
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	eba0 000a 	sub.w	r0, r0, sl
 8005d42:	fa03 f000 	lsl.w	r0, r3, r0
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	3401      	adds	r4, #1
 8005d4a:	4303      	orrs	r3, r0
 8005d4c:	9304      	str	r3, [sp, #16]
 8005d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d52:	2206      	movs	r2, #6
 8005d54:	4826      	ldr	r0, [pc, #152]	; (8005df0 <_svfiprintf_r+0x1f4>)
 8005d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d5a:	f000 fa07 	bl	800616c <memchr>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d038      	beq.n	8005dd4 <_svfiprintf_r+0x1d8>
 8005d62:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <_svfiprintf_r+0x1f8>)
 8005d64:	bb1b      	cbnz	r3, 8005dae <_svfiprintf_r+0x1b2>
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	3307      	adds	r3, #7
 8005d6a:	f023 0307 	bic.w	r3, r3, #7
 8005d6e:	3308      	adds	r3, #8
 8005d70:	9303      	str	r3, [sp, #12]
 8005d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d74:	4433      	add	r3, r6
 8005d76:	9309      	str	r3, [sp, #36]	; 0x24
 8005d78:	e767      	b.n	8005c4a <_svfiprintf_r+0x4e>
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d82:	e7a5      	b.n	8005cd0 <_svfiprintf_r+0xd4>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f04f 0c0a 	mov.w	ip, #10
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	3401      	adds	r4, #1
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	4620      	mov	r0, r4
 8005d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d96:	3a30      	subs	r2, #48	; 0x30
 8005d98:	2a09      	cmp	r2, #9
 8005d9a:	d903      	bls.n	8005da4 <_svfiprintf_r+0x1a8>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0c5      	beq.n	8005d2c <_svfiprintf_r+0x130>
 8005da0:	9105      	str	r1, [sp, #20]
 8005da2:	e7c3      	b.n	8005d2c <_svfiprintf_r+0x130>
 8005da4:	4604      	mov	r4, r0
 8005da6:	2301      	movs	r3, #1
 8005da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dac:	e7f0      	b.n	8005d90 <_svfiprintf_r+0x194>
 8005dae:	ab03      	add	r3, sp, #12
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	462a      	mov	r2, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <_svfiprintf_r+0x1fc>)
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	f3af 8000 	nop.w
 8005dbe:	1c42      	adds	r2, r0, #1
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	d1d6      	bne.n	8005d72 <_svfiprintf_r+0x176>
 8005dc4:	89ab      	ldrh	r3, [r5, #12]
 8005dc6:	065b      	lsls	r3, r3, #25
 8005dc8:	f53f af2c 	bmi.w	8005c24 <_svfiprintf_r+0x28>
 8005dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dce:	b01d      	add	sp, #116	; 0x74
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	ab03      	add	r3, sp, #12
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4638      	mov	r0, r7
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <_svfiprintf_r+0x1fc>)
 8005dde:	a904      	add	r1, sp, #16
 8005de0:	f000 f87c 	bl	8005edc <_printf_i>
 8005de4:	e7eb      	b.n	8005dbe <_svfiprintf_r+0x1c2>
 8005de6:	bf00      	nop
 8005de8:	080066d0 	.word	0x080066d0
 8005dec:	080066d6 	.word	0x080066d6
 8005df0:	080066da 	.word	0x080066da
 8005df4:	00000000 	.word	0x00000000
 8005df8:	08005b45 	.word	0x08005b45

08005dfc <_printf_common>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	4616      	mov	r6, r2
 8005e02:	4699      	mov	r9, r3
 8005e04:	688a      	ldr	r2, [r1, #8]
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	4607      	mov	r7, r0
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	bfb8      	it	lt
 8005e0e:	4613      	movlt	r3, r2
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e16:	460c      	mov	r4, r1
 8005e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e1c:	b10a      	cbz	r2, 8005e22 <_printf_common+0x26>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	0699      	lsls	r1, r3, #26
 8005e26:	bf42      	ittt	mi
 8005e28:	6833      	ldrmi	r3, [r6, #0]
 8005e2a:	3302      	addmi	r3, #2
 8005e2c:	6033      	strmi	r3, [r6, #0]
 8005e2e:	6825      	ldr	r5, [r4, #0]
 8005e30:	f015 0506 	ands.w	r5, r5, #6
 8005e34:	d106      	bne.n	8005e44 <_printf_common+0x48>
 8005e36:	f104 0a19 	add.w	sl, r4, #25
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	6832      	ldr	r2, [r6, #0]
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dc28      	bgt.n	8005e96 <_printf_common+0x9a>
 8005e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e48:	1e13      	subs	r3, r2, #0
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	bf18      	it	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	0692      	lsls	r2, r2, #26
 8005e52:	d42d      	bmi.n	8005eb0 <_printf_common+0xb4>
 8005e54:	4649      	mov	r1, r9
 8005e56:	4638      	mov	r0, r7
 8005e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e5c:	47c0      	blx	r8
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d020      	beq.n	8005ea4 <_printf_common+0xa8>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	68e5      	ldr	r5, [r4, #12]
 8005e66:	f003 0306 	and.w	r3, r3, #6
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	bf18      	it	ne
 8005e6e:	2500      	movne	r5, #0
 8005e70:	6832      	ldr	r2, [r6, #0]
 8005e72:	f04f 0600 	mov.w	r6, #0
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	bf08      	it	eq
 8005e7a:	1aad      	subeq	r5, r5, r2
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	bf08      	it	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bfc4      	itt	gt
 8005e88:	1a9b      	subgt	r3, r3, r2
 8005e8a:	18ed      	addgt	r5, r5, r3
 8005e8c:	341a      	adds	r4, #26
 8005e8e:	42b5      	cmp	r5, r6
 8005e90:	d11a      	bne.n	8005ec8 <_printf_common+0xcc>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e008      	b.n	8005ea8 <_printf_common+0xac>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	47c0      	blx	r8
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d103      	bne.n	8005eac <_printf_common+0xb0>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	3501      	adds	r5, #1
 8005eae:	e7c4      	b.n	8005e3a <_printf_common+0x3e>
 8005eb0:	2030      	movs	r0, #48	; 0x30
 8005eb2:	18e1      	adds	r1, r4, r3
 8005eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ebe:	4422      	add	r2, r4
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec6:	e7c5      	b.n	8005e54 <_printf_common+0x58>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4622      	mov	r2, r4
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4638      	mov	r0, r7
 8005ed0:	47c0      	blx	r8
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d0e6      	beq.n	8005ea4 <_printf_common+0xa8>
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7d9      	b.n	8005e8e <_printf_common+0x92>
	...

08005edc <_printf_i>:
 8005edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	7e0f      	ldrb	r7, [r1, #24]
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	2f78      	cmp	r7, #120	; 0x78
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	469a      	mov	sl, r3
 8005eec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef2:	d807      	bhi.n	8005f04 <_printf_i+0x28>
 8005ef4:	2f62      	cmp	r7, #98	; 0x62
 8005ef6:	d80a      	bhi.n	8005f0e <_printf_i+0x32>
 8005ef8:	2f00      	cmp	r7, #0
 8005efa:	f000 80d9 	beq.w	80060b0 <_printf_i+0x1d4>
 8005efe:	2f58      	cmp	r7, #88	; 0x58
 8005f00:	f000 80a4 	beq.w	800604c <_printf_i+0x170>
 8005f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f0c:	e03a      	b.n	8005f84 <_printf_i+0xa8>
 8005f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f12:	2b15      	cmp	r3, #21
 8005f14:	d8f6      	bhi.n	8005f04 <_printf_i+0x28>
 8005f16:	a101      	add	r1, pc, #4	; (adr r1, 8005f1c <_printf_i+0x40>)
 8005f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f1c:	08005f75 	.word	0x08005f75
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f05 	.word	0x08005f05
 8005f28:	08005f05 	.word	0x08005f05
 8005f2c:	08005f05 	.word	0x08005f05
 8005f30:	08005f05 	.word	0x08005f05
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f05 	.word	0x08005f05
 8005f3c:	08005f05 	.word	0x08005f05
 8005f40:	08005f05 	.word	0x08005f05
 8005f44:	08005f05 	.word	0x08005f05
 8005f48:	08006097 	.word	0x08006097
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	08006079 	.word	0x08006079
 8005f54:	08005f05 	.word	0x08005f05
 8005f58:	08005f05 	.word	0x08005f05
 8005f5c:	080060b9 	.word	0x080060b9
 8005f60:	08005f05 	.word	0x08005f05
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	08005f05 	.word	0x08005f05
 8005f6c:	08005f05 	.word	0x08005f05
 8005f70:	08006081 	.word	0x08006081
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	1d1a      	adds	r2, r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	602a      	str	r2, [r5, #0]
 8005f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0a4      	b.n	80060d2 <_printf_i+0x1f6>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	6829      	ldr	r1, [r5, #0]
 8005f8c:	0606      	lsls	r6, r0, #24
 8005f8e:	f101 0304 	add.w	r3, r1, #4
 8005f92:	d50a      	bpl.n	8005faa <_printf_i+0xce>
 8005f94:	680e      	ldr	r6, [r1, #0]
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	da03      	bge.n	8005fa4 <_printf_i+0xc8>
 8005f9c:	232d      	movs	r3, #45	; 0x2d
 8005f9e:	4276      	negs	r6, r6
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa4:	230a      	movs	r3, #10
 8005fa6:	485e      	ldr	r0, [pc, #376]	; (8006120 <_printf_i+0x244>)
 8005fa8:	e019      	b.n	8005fde <_printf_i+0x102>
 8005faa:	680e      	ldr	r6, [r1, #0]
 8005fac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	bf18      	it	ne
 8005fb4:	b236      	sxthne	r6, r6
 8005fb6:	e7ef      	b.n	8005f98 <_printf_i+0xbc>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	1d19      	adds	r1, r3, #4
 8005fbe:	6029      	str	r1, [r5, #0]
 8005fc0:	0601      	lsls	r1, r0, #24
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_i+0xec>
 8005fc4:	681e      	ldr	r6, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <_printf_i+0xf2>
 8005fc8:	0646      	lsls	r6, r0, #25
 8005fca:	d5fb      	bpl.n	8005fc4 <_printf_i+0xe8>
 8005fcc:	881e      	ldrh	r6, [r3, #0]
 8005fce:	2f6f      	cmp	r7, #111	; 0x6f
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2308      	moveq	r3, #8
 8005fd4:	230a      	movne	r3, #10
 8005fd6:	4852      	ldr	r0, [pc, #328]	; (8006120 <_printf_i+0x244>)
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fde:	6865      	ldr	r5, [r4, #4]
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	bfa8      	it	ge
 8005fe4:	6821      	ldrge	r1, [r4, #0]
 8005fe6:	60a5      	str	r5, [r4, #8]
 8005fe8:	bfa4      	itt	ge
 8005fea:	f021 0104 	bicge.w	r1, r1, #4
 8005fee:	6021      	strge	r1, [r4, #0]
 8005ff0:	b90e      	cbnz	r6, 8005ff6 <_printf_i+0x11a>
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	d04d      	beq.n	8006092 <_printf_i+0x1b6>
 8005ff6:	4615      	mov	r5, r2
 8005ff8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ffc:	fb03 6711 	mls	r7, r3, r1, r6
 8006000:	5dc7      	ldrb	r7, [r0, r7]
 8006002:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006006:	4637      	mov	r7, r6
 8006008:	42bb      	cmp	r3, r7
 800600a:	460e      	mov	r6, r1
 800600c:	d9f4      	bls.n	8005ff8 <_printf_i+0x11c>
 800600e:	2b08      	cmp	r3, #8
 8006010:	d10b      	bne.n	800602a <_printf_i+0x14e>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	07de      	lsls	r6, r3, #31
 8006016:	d508      	bpl.n	800602a <_printf_i+0x14e>
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	6861      	ldr	r1, [r4, #4]
 800601c:	4299      	cmp	r1, r3
 800601e:	bfde      	ittt	le
 8006020:	2330      	movle	r3, #48	; 0x30
 8006022:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006026:	f105 35ff 	addle.w	r5, r5, #4294967295
 800602a:	1b52      	subs	r2, r2, r5
 800602c:	6122      	str	r2, [r4, #16]
 800602e:	464b      	mov	r3, r9
 8006030:	4621      	mov	r1, r4
 8006032:	4640      	mov	r0, r8
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	aa03      	add	r2, sp, #12
 800603a:	f7ff fedf 	bl	8005dfc <_printf_common>
 800603e:	3001      	adds	r0, #1
 8006040:	d14c      	bne.n	80060dc <_printf_i+0x200>
 8006042:	f04f 30ff 	mov.w	r0, #4294967295
 8006046:	b004      	add	sp, #16
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	4834      	ldr	r0, [pc, #208]	; (8006120 <_printf_i+0x244>)
 800604e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006052:	6829      	ldr	r1, [r5, #0]
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	f851 6b04 	ldr.w	r6, [r1], #4
 800605a:	6029      	str	r1, [r5, #0]
 800605c:	061d      	lsls	r5, r3, #24
 800605e:	d514      	bpl.n	800608a <_printf_i+0x1ae>
 8006060:	07df      	lsls	r7, r3, #31
 8006062:	bf44      	itt	mi
 8006064:	f043 0320 	orrmi.w	r3, r3, #32
 8006068:	6023      	strmi	r3, [r4, #0]
 800606a:	b91e      	cbnz	r6, 8006074 <_printf_i+0x198>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	f023 0320 	bic.w	r3, r3, #32
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	2310      	movs	r3, #16
 8006076:	e7af      	b.n	8005fd8 <_printf_i+0xfc>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	f043 0320 	orr.w	r3, r3, #32
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	2378      	movs	r3, #120	; 0x78
 8006082:	4828      	ldr	r0, [pc, #160]	; (8006124 <_printf_i+0x248>)
 8006084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006088:	e7e3      	b.n	8006052 <_printf_i+0x176>
 800608a:	0659      	lsls	r1, r3, #25
 800608c:	bf48      	it	mi
 800608e:	b2b6      	uxthmi	r6, r6
 8006090:	e7e6      	b.n	8006060 <_printf_i+0x184>
 8006092:	4615      	mov	r5, r2
 8006094:	e7bb      	b.n	800600e <_printf_i+0x132>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	6826      	ldr	r6, [r4, #0]
 800609a:	1d18      	adds	r0, r3, #4
 800609c:	6961      	ldr	r1, [r4, #20]
 800609e:	6028      	str	r0, [r5, #0]
 80060a0:	0635      	lsls	r5, r6, #24
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	d501      	bpl.n	80060aa <_printf_i+0x1ce>
 80060a6:	6019      	str	r1, [r3, #0]
 80060a8:	e002      	b.n	80060b0 <_printf_i+0x1d4>
 80060aa:	0670      	lsls	r0, r6, #25
 80060ac:	d5fb      	bpl.n	80060a6 <_printf_i+0x1ca>
 80060ae:	8019      	strh	r1, [r3, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	4615      	mov	r5, r2
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	e7ba      	b.n	800602e <_printf_i+0x152>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	2100      	movs	r1, #0
 80060bc:	1d1a      	adds	r2, r3, #4
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	681d      	ldr	r5, [r3, #0]
 80060c2:	6862      	ldr	r2, [r4, #4]
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f851 	bl	800616c <memchr>
 80060ca:	b108      	cbz	r0, 80060d0 <_printf_i+0x1f4>
 80060cc:	1b40      	subs	r0, r0, r5
 80060ce:	6060      	str	r0, [r4, #4]
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	2300      	movs	r3, #0
 80060d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060da:	e7a8      	b.n	800602e <_printf_i+0x152>
 80060dc:	462a      	mov	r2, r5
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	47d0      	blx	sl
 80060e6:	3001      	adds	r0, #1
 80060e8:	d0ab      	beq.n	8006042 <_printf_i+0x166>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	079b      	lsls	r3, r3, #30
 80060ee:	d413      	bmi.n	8006118 <_printf_i+0x23c>
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	4298      	cmp	r0, r3
 80060f6:	bfb8      	it	lt
 80060f8:	4618      	movlt	r0, r3
 80060fa:	e7a4      	b.n	8006046 <_printf_i+0x16a>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4632      	mov	r2, r6
 8006100:	4649      	mov	r1, r9
 8006102:	4640      	mov	r0, r8
 8006104:	47d0      	blx	sl
 8006106:	3001      	adds	r0, #1
 8006108:	d09b      	beq.n	8006042 <_printf_i+0x166>
 800610a:	3501      	adds	r5, #1
 800610c:	68e3      	ldr	r3, [r4, #12]
 800610e:	9903      	ldr	r1, [sp, #12]
 8006110:	1a5b      	subs	r3, r3, r1
 8006112:	42ab      	cmp	r3, r5
 8006114:	dcf2      	bgt.n	80060fc <_printf_i+0x220>
 8006116:	e7eb      	b.n	80060f0 <_printf_i+0x214>
 8006118:	2500      	movs	r5, #0
 800611a:	f104 0619 	add.w	r6, r4, #25
 800611e:	e7f5      	b.n	800610c <_printf_i+0x230>
 8006120:	080066e1 	.word	0x080066e1
 8006124:	080066f2 	.word	0x080066f2

08006128 <_read_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	2200      	movs	r2, #0
 8006132:	4d05      	ldr	r5, [pc, #20]	; (8006148 <_read_r+0x20>)
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fc fcc6 	bl	8002ac8 <_read>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_read_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_read_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000264 	.word	0x20000264

0800614c <_sbrk_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	2300      	movs	r3, #0
 8006150:	4d05      	ldr	r5, [pc, #20]	; (8006168 <_sbrk_r+0x1c>)
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	f7fc fcd4 	bl	8002b04 <_sbrk>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_sbrk_r+0x1a>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_sbrk_r+0x1a>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000264 	.word	0x20000264

0800616c <memchr>:
 800616c:	4603      	mov	r3, r0
 800616e:	b510      	push	{r4, lr}
 8006170:	b2c9      	uxtb	r1, r1
 8006172:	4402      	add	r2, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	4618      	mov	r0, r3
 8006178:	d101      	bne.n	800617e <memchr+0x12>
 800617a:	2000      	movs	r0, #0
 800617c:	e003      	b.n	8006186 <memchr+0x1a>
 800617e:	7804      	ldrb	r4, [r0, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	428c      	cmp	r4, r1
 8006184:	d1f6      	bne.n	8006174 <memchr+0x8>
 8006186:	bd10      	pop	{r4, pc}

08006188 <memmove>:
 8006188:	4288      	cmp	r0, r1
 800618a:	b510      	push	{r4, lr}
 800618c:	eb01 0402 	add.w	r4, r1, r2
 8006190:	d902      	bls.n	8006198 <memmove+0x10>
 8006192:	4284      	cmp	r4, r0
 8006194:	4623      	mov	r3, r4
 8006196:	d807      	bhi.n	80061a8 <memmove+0x20>
 8006198:	1e43      	subs	r3, r0, #1
 800619a:	42a1      	cmp	r1, r4
 800619c:	d008      	beq.n	80061b0 <memmove+0x28>
 800619e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061a6:	e7f8      	b.n	800619a <memmove+0x12>
 80061a8:	4601      	mov	r1, r0
 80061aa:	4402      	add	r2, r0
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d100      	bne.n	80061b2 <memmove+0x2a>
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ba:	e7f7      	b.n	80061ac <memmove+0x24>

080061bc <__malloc_lock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_lock+0x8>)
 80061be:	f7ff bc2b 	b.w	8005a18 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	20000258 	.word	0x20000258

080061c8 <__malloc_unlock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_unlock+0x8>)
 80061ca:	f7ff bc26 	b.w	8005a1a <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	20000258 	.word	0x20000258

080061d4 <_free_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	2900      	cmp	r1, #0
 80061da:	d040      	beq.n	800625e <_free_r+0x8a>
 80061dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e0:	1f0c      	subs	r4, r1, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	18e4      	addlt	r4, r4, r3
 80061e8:	f7ff ffe8 	bl	80061bc <__malloc_lock>
 80061ec:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <_free_r+0x8c>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	b933      	cbnz	r3, 8006200 <_free_r+0x2c>
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	6014      	str	r4, [r2, #0]
 80061f6:	4628      	mov	r0, r5
 80061f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fc:	f7ff bfe4 	b.w	80061c8 <__malloc_unlock>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d908      	bls.n	8006216 <_free_r+0x42>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf01      	itttt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	1809      	addeq	r1, r1, r0
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	e7ed      	b.n	80061f2 <_free_r+0x1e>
 8006216:	461a      	mov	r2, r3
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b10b      	cbz	r3, 8006220 <_free_r+0x4c>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d9fa      	bls.n	8006216 <_free_r+0x42>
 8006220:	6811      	ldr	r1, [r2, #0]
 8006222:	1850      	adds	r0, r2, r1
 8006224:	42a0      	cmp	r0, r4
 8006226:	d10b      	bne.n	8006240 <_free_r+0x6c>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	4401      	add	r1, r0
 800622c:	1850      	adds	r0, r2, r1
 800622e:	4283      	cmp	r3, r0
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	d1e0      	bne.n	80061f6 <_free_r+0x22>
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4401      	add	r1, r0
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	e7da      	b.n	80061f6 <_free_r+0x22>
 8006240:	d902      	bls.n	8006248 <_free_r+0x74>
 8006242:	230c      	movs	r3, #12
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	e7d6      	b.n	80061f6 <_free_r+0x22>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	1821      	adds	r1, r4, r0
 800624c:	428b      	cmp	r3, r1
 800624e:	bf01      	itttt	eq
 8006250:	6819      	ldreq	r1, [r3, #0]
 8006252:	685b      	ldreq	r3, [r3, #4]
 8006254:	1809      	addeq	r1, r1, r0
 8006256:	6021      	streq	r1, [r4, #0]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	6054      	str	r4, [r2, #4]
 800625c:	e7cb      	b.n	80061f6 <_free_r+0x22>
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	2000025c 	.word	0x2000025c

08006264 <_realloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	4680      	mov	r8, r0
 800626a:	4614      	mov	r4, r2
 800626c:	460e      	mov	r6, r1
 800626e:	b921      	cbnz	r1, 800627a <_realloc_r+0x16>
 8006270:	4611      	mov	r1, r2
 8006272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	f7ff bbf1 	b.w	8005a5c <_malloc_r>
 800627a:	b92a      	cbnz	r2, 8006288 <_realloc_r+0x24>
 800627c:	f7ff ffaa 	bl	80061d4 <_free_r>
 8006280:	4625      	mov	r5, r4
 8006282:	4628      	mov	r0, r5
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f000 f81b 	bl	80062c2 <_malloc_usable_size_r>
 800628c:	4284      	cmp	r4, r0
 800628e:	4607      	mov	r7, r0
 8006290:	d802      	bhi.n	8006298 <_realloc_r+0x34>
 8006292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006296:	d812      	bhi.n	80062be <_realloc_r+0x5a>
 8006298:	4621      	mov	r1, r4
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fbde 	bl	8005a5c <_malloc_r>
 80062a0:	4605      	mov	r5, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0ed      	beq.n	8006282 <_realloc_r+0x1e>
 80062a6:	42bc      	cmp	r4, r7
 80062a8:	4622      	mov	r2, r4
 80062aa:	4631      	mov	r1, r6
 80062ac:	bf28      	it	cs
 80062ae:	463a      	movcs	r2, r7
 80062b0:	f7ff fb72 	bl	8005998 <memcpy>
 80062b4:	4631      	mov	r1, r6
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff ff8c 	bl	80061d4 <_free_r>
 80062bc:	e7e1      	b.n	8006282 <_realloc_r+0x1e>
 80062be:	4635      	mov	r5, r6
 80062c0:	e7df      	b.n	8006282 <_realloc_r+0x1e>

080062c2 <_malloc_usable_size_r>:
 80062c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c6:	1f18      	subs	r0, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfbc      	itt	lt
 80062cc:	580b      	ldrlt	r3, [r1, r0]
 80062ce:	18c0      	addlt	r0, r0, r3
 80062d0:	4770      	bx	lr
	...

080062d4 <_init>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr

080062e0 <_fini>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr
