
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800510c  0800510c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005114  08005114  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800511c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  0800518c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800518c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e40f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  0002e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000317c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019865  00000000  00000000  00032598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010579  00000000  00000000  0004bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e26c  00000000  00000000  0005c376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea5e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  000ea634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f6c 	.word	0x08004f6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004f6c 	.word	0x08004f6c

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b976 	b.w	8000454 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	4688      	mov	r8, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14d      	bne.n	800022c <__udivmoddi4+0xac>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d968      	bls.n	8000268 <__udivmoddi4+0xe8>
 8000196:	fab2 f282 	clz	r2, r2
 800019a:	b152      	cbz	r2, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa01 f302 	lsl.w	r3, r1, r2
 80001a0:	f1c2 0120 	rsb	r1, r2, #32
 80001a4:	fa20 f101 	lsr.w	r1, r0, r1
 80001a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ac:	ea41 0803 	orr.w	r8, r1, r3
 80001b0:	4094      	lsls	r4, r2
 80001b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ba:	fa1f fe8c 	uxth.w	lr, ip
 80001be:	fb01 8817 	mls	r8, r1, r7, r8
 80001c2:	fb07 f00e 	mul.w	r0, r7, lr
 80001c6:	0c23      	lsrs	r3, r4, #16
 80001c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001cc:	4298      	cmp	r0, r3
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0303 	adds.w	r3, ip, r3
 80001d4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001d8:	f080 811e 	bcs.w	8000418 <__udivmoddi4+0x298>
 80001dc:	4298      	cmp	r0, r3
 80001de:	f240 811b 	bls.w	8000418 <__udivmoddi4+0x298>
 80001e2:	3f02      	subs	r7, #2
 80001e4:	4463      	add	r3, ip
 80001e6:	1a1b      	subs	r3, r3, r0
 80001e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001ec:	fb01 3310 	mls	r3, r1, r0, r3
 80001f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001fa:	45a6      	cmp	lr, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 33ff 	add.w	r3, r0, #4294967295
 8000206:	f080 8109 	bcs.w	800041c <__udivmoddi4+0x29c>
 800020a:	45a6      	cmp	lr, r4
 800020c:	f240 8106 	bls.w	800041c <__udivmoddi4+0x29c>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	eba4 040e 	sub.w	r4, r4, lr
 800021a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021e:	b11e      	cbz	r6, 8000228 <__udivmoddi4+0xa8>
 8000220:	2300      	movs	r3, #0
 8000222:	40d4      	lsrs	r4, r2
 8000224:	e9c6 4300 	strd	r4, r3, [r6]
 8000228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022c:	428b      	cmp	r3, r1
 800022e:	d908      	bls.n	8000242 <__udivmoddi4+0xc2>
 8000230:	2e00      	cmp	r6, #0
 8000232:	f000 80ee 	beq.w	8000412 <__udivmoddi4+0x292>
 8000236:	2100      	movs	r1, #0
 8000238:	e9c6 0500 	strd	r0, r5, [r6]
 800023c:	4608      	mov	r0, r1
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d14a      	bne.n	80002e0 <__udivmoddi4+0x160>
 800024a:	42ab      	cmp	r3, r5
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xd4>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 80fc 	bhi.w	800044c <__udivmoddi4+0x2cc>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb65 0303 	sbc.w	r3, r5, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4698      	mov	r8, r3
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e2      	beq.n	8000228 <__udivmoddi4+0xa8>
 8000262:	e9c6 4800 	strd	r4, r8, [r6]
 8000266:	e7df      	b.n	8000228 <__udivmoddi4+0xa8>
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xec>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	f040 8091 	bne.w	8000398 <__udivmoddi4+0x218>
 8000276:	eba1 000c 	sub.w	r0, r1, ip
 800027a:	2101      	movs	r1, #1
 800027c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000280:	fa1f fe8c 	uxth.w	lr, ip
 8000284:	fbb0 f3f7 	udiv	r3, r0, r7
 8000288:	fb07 0013 	mls	r0, r7, r3, r0
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000292:	fb0e f003 	mul.w	r0, lr, r3
 8000296:	42a8      	cmp	r0, r5
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x12c>
 800029a:	eb1c 0505 	adds.w	r5, ip, r5
 800029e:	f103 38ff 	add.w	r8, r3, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x12a>
 80002a4:	42a8      	cmp	r0, r5
 80002a6:	f200 80ce 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 80002aa:	4643      	mov	r3, r8
 80002ac:	1a2d      	subs	r5, r5, r0
 80002ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80002b2:	fb07 5510 	mls	r5, r7, r0, r5
 80002b6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	45a6      	cmp	lr, r4
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x156>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x154>
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	f200 80b6 	bhi.w	8000440 <__udivmoddi4+0x2c0>
 80002d4:	4628      	mov	r0, r5
 80002d6:	eba4 040e 	sub.w	r4, r4, lr
 80002da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002de:	e79e      	b.n	800021e <__udivmoddi4+0x9e>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbba f8f9 	udiv	r8, sl, r9
 80002fa:	fa20 f307 	lsr.w	r3, r0, r7
 80002fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000302:	408d      	lsls	r5, r1
 8000304:	fa1f fe8c 	uxth.w	lr, ip
 8000308:	431d      	orrs	r5, r3
 800030a:	fa00 f301 	lsl.w	r3, r0, r1
 800030e:	fb08 f00e 	mul.w	r0, r8, lr
 8000312:	0c2c      	lsrs	r4, r5, #16
 8000314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000318:	42a0      	cmp	r0, r4
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90b      	bls.n	8000338 <__udivmoddi4+0x1b8>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f108 3aff 	add.w	sl, r8, #4294967295
 8000328:	f080 8088 	bcs.w	800043c <__udivmoddi4+0x2bc>
 800032c:	42a0      	cmp	r0, r4
 800032e:	f240 8085 	bls.w	800043c <__udivmoddi4+0x2bc>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	4464      	add	r4, ip
 8000338:	1a24      	subs	r4, r4, r0
 800033a:	fbb4 f0f9 	udiv	r0, r4, r9
 800033e:	fb09 4410 	mls	r4, r9, r0, r4
 8000342:	fb00 fe0e 	mul.w	lr, r0, lr
 8000346:	b2ad      	uxth	r5, r5
 8000348:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x1e2>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 35ff 	add.w	r5, r0, #4294967295
 8000358:	d26c      	bcs.n	8000434 <__udivmoddi4+0x2b4>
 800035a:	45a6      	cmp	lr, r4
 800035c:	d96a      	bls.n	8000434 <__udivmoddi4+0x2b4>
 800035e:	3802      	subs	r0, #2
 8000360:	4464      	add	r4, ip
 8000362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000366:	fba0 9502 	umull	r9, r5, r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	42ac      	cmp	r4, r5
 8000370:	46c8      	mov	r8, r9
 8000372:	46ae      	mov	lr, r5
 8000374:	d356      	bcc.n	8000424 <__udivmoddi4+0x2a4>
 8000376:	d053      	beq.n	8000420 <__udivmoddi4+0x2a0>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d069      	beq.n	8000450 <__udivmoddi4+0x2d0>
 800037c:	ebb3 0208 	subs.w	r2, r3, r8
 8000380:	eb64 040e 	sbc.w	r4, r4, lr
 8000384:	fa22 f301 	lsr.w	r3, r2, r1
 8000388:	fa04 f707 	lsl.w	r7, r4, r7
 800038c:	431f      	orrs	r7, r3
 800038e:	40cc      	lsrs	r4, r1
 8000390:	e9c6 7400 	strd	r7, r4, [r6]
 8000394:	2100      	movs	r1, #0
 8000396:	e747      	b.n	8000228 <__udivmoddi4+0xa8>
 8000398:	fa0c fc02 	lsl.w	ip, ip, r2
 800039c:	f1c2 0120 	rsb	r1, r2, #32
 80003a0:	fa25 f301 	lsr.w	r3, r5, r1
 80003a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ac:	4095      	lsls	r5, r2
 80003ae:	430d      	orrs	r5, r1
 80003b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b4:	fb07 3311 	mls	r3, r7, r1, r3
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	0c28      	lsrs	r0, r5, #16
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	fb01 f30e 	mul.w	r3, r1, lr
 80003c6:	4283      	cmp	r3, r0
 80003c8:	fa04 f402 	lsl.w	r4, r4, r2
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x260>
 80003ce:	eb1c 0000 	adds.w	r0, ip, r0
 80003d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003d6:	d22f      	bcs.n	8000438 <__udivmoddi4+0x2b8>
 80003d8:	4283      	cmp	r3, r0
 80003da:	d92d      	bls.n	8000438 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	4460      	add	r0, ip
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e6:	fb07 0013 	mls	r0, r7, r3, r0
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003f0:	fb03 f00e 	mul.w	r0, r3, lr
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x28a>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000400:	d216      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 8000402:	42a8      	cmp	r0, r5
 8000404:	d914      	bls.n	8000430 <__udivmoddi4+0x2b0>
 8000406:	3b02      	subs	r3, #2
 8000408:	4465      	add	r5, ip
 800040a:	1a28      	subs	r0, r5, r0
 800040c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000410:	e738      	b.n	8000284 <__udivmoddi4+0x104>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e707      	b.n	8000228 <__udivmoddi4+0xa8>
 8000418:	462f      	mov	r7, r5
 800041a:	e6e4      	b.n	80001e6 <__udivmoddi4+0x66>
 800041c:	4618      	mov	r0, r3
 800041e:	e6f9      	b.n	8000214 <__udivmoddi4+0x94>
 8000420:	454b      	cmp	r3, r9
 8000422:	d2a9      	bcs.n	8000378 <__udivmoddi4+0x1f8>
 8000424:	ebb9 0802 	subs.w	r8, r9, r2
 8000428:	eb65 0e0c 	sbc.w	lr, r5, ip
 800042c:	3801      	subs	r0, #1
 800042e:	e7a3      	b.n	8000378 <__udivmoddi4+0x1f8>
 8000430:	4643      	mov	r3, r8
 8000432:	e7ea      	b.n	800040a <__udivmoddi4+0x28a>
 8000434:	4628      	mov	r0, r5
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e2>
 8000438:	4641      	mov	r1, r8
 800043a:	e7d1      	b.n	80003e0 <__udivmoddi4+0x260>
 800043c:	46d0      	mov	r8, sl
 800043e:	e77b      	b.n	8000338 <__udivmoddi4+0x1b8>
 8000440:	4464      	add	r4, ip
 8000442:	3802      	subs	r0, #2
 8000444:	e747      	b.n	80002d6 <__udivmoddi4+0x156>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	e72f      	b.n	80002ac <__udivmoddi4+0x12c>
 800044c:	4608      	mov	r0, r1
 800044e:	e706      	b.n	800025e <__udivmoddi4+0xde>
 8000450:	4631      	mov	r1, r6
 8000452:	e6e9      	b.n	8000228 <__udivmoddi4+0xa8>

08000454 <__aeabi_idiv0>:
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <readRegister+0x50>)
 800046a:	f001 fe16 	bl	800209a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f001 f942 	bl	80016f8 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000474:	1cf9      	adds	r1, r7, #3
 8000476:	2364      	movs	r3, #100	; 0x64
 8000478:	2201      	movs	r2, #1
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f002 fcbe 	bl	8002dfc <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000480:	f107 010f 	add.w	r1, r7, #15
 8000484:	2364      	movs	r3, #100	; 0x64
 8000486:	2201      	movs	r2, #1
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f002 fdf3 	bl	8003074 <HAL_SPI_Receive>
	HAL_Delay(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f001 f932 	bl	80016f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000494:	2201      	movs	r2, #1
 8000496:	2101      	movs	r1, #1
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <readRegister+0x50>)
 800049a:	f001 fdfe 	bl	800209a <HAL_GPIO_WritePin>
	return rec;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40010c00 	.word	0x40010c00

080004ac <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08e      	sub	sp, #56	; 0x38
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	607a      	str	r2, [r7, #4]
 80004b6:	461a      	mov	r2, r3
 80004b8:	460b      	mov	r3, r1
 80004ba:	72fb      	strb	r3, [r7, #11]
 80004bc:	4613      	mov	r3, r2
 80004be:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]
 80004d6:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	743b      	strb	r3, [r7, #16]
	int j = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004e6:	2301      	movs	r3, #1
 80004e8:	633b      	str	r3, [r7, #48]	; 0x30
 80004ea:	e00f      	b.n	800050c <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 80004ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	637a      	str	r2, [r7, #52]	; 0x34
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	7819      	ldrb	r1, [r3, #0]
 80004fa:	f107 0210 	add.w	r2, r7, #16
 80004fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000500:	4413      	add	r3, r2
 8000502:	460a      	mov	r2, r1
 8000504:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000508:	3301      	adds	r3, #1
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
 800050c:	7abb      	ldrb	r3, [r7, #10]
 800050e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000510:	429a      	cmp	r2, r3
 8000512:	ddeb      	ble.n	80004ec <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000514:	2200      	movs	r2, #0
 8000516:	2101      	movs	r1, #1
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <writeRegister+0xa4>)
 800051a:	f001 fdbe 	bl	800209a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800051e:	7abb      	ldrb	r3, [r7, #10]
 8000520:	b29b      	uxth	r3, r3
 8000522:	3301      	adds	r3, #1
 8000524:	b29a      	uxth	r2, r3
 8000526:	f107 0110 	add.w	r1, r7, #16
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f002 fc64 	bl	8002dfc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000534:	2201      	movs	r2, #1
 8000536:	2101      	movs	r1, #1
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <writeRegister+0xa4>)
 800053a:	f001 fdae 	bl	800209a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f001 f8da 	bl	80016f8 <HAL_Delay>
	return cmd;  // pull the pin high
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	b2db      	uxtb	r3, r3
}
 8000548:	4618      	mov	r0, r3
 800054a:	3738      	adds	r7, #56	; 0x38
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40010c00 	.word	0x40010c00

08000554 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000562:	f04f 0000 	mov.w	r0, #0
 8000566:	f04f 0100 	mov.w	r1, #0
 800056a:	04d9      	lsls	r1, r3, #19
 800056c:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000570:	04d0      	lsls	r0, r2, #19
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <setRFFrequency+0x7c>)
 8000574:	f04f 0300 	mov.w	r3, #0
 8000578:	f7ff fdea 	bl	8000150 <__aeabi_uldivmod>
 800057c:	4602      	mov	r2, r0
 800057e:	460b      	mov	r3, r1
 8000580:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000588:	f04f 0200 	mov.w	r2, #0
 800058c:	f04f 0300 	mov.w	r3, #0
 8000590:	0c02      	lsrs	r2, r0, #16
 8000592:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000596:	0c0b      	lsrs	r3, r1, #16
 8000598:	b2d3      	uxtb	r3, r2
 800059a:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800059c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	f04f 0300 	mov.w	r3, #0
 80005a8:	0a02      	lsrs	r2, r0, #8
 80005aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005ae:	0a0b      	lsrs	r3, r1, #8
 80005b0:	b2d3      	uxtb	r3, r2
 80005b2:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005b4:	7c3b      	ldrb	r3, [r7, #16]
 80005b6:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005bc:	f107 020c 	add.w	r2, r7, #12
 80005c0:	2303      	movs	r3, #3
 80005c2:	2106      	movs	r1, #6
 80005c4:	f7ff ff72 	bl	80004ac <writeRegister>
}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	01e84800 	.word	0x01e84800

080005d4 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f103 0210 	add.w	r2, r3, #16
 80005e6:	2301      	movs	r3, #1
 80005e8:	2109      	movs	r1, #9
 80005ea:	f7ff ff5f 	bl	80004ac <writeRegister>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f103 0216 	add.w	r2, r3, #22
 8000608:	2301      	movs	r3, #1
 800060a:	2139      	movs	r1, #57	; 0x39
 800060c:	f7ff ff4e 	bl	80004ac <writeRegister>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0217 	add.w	r2, r3, #23
 800062a:	2301      	movs	r3, #1
 800062c:	210b      	movs	r1, #11
 800062e:	f7ff ff3d 	bl	80004ac <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f103 021a 	add.w	r2, r3, #26
 800064c:	2301      	movs	r3, #1
 800064e:	211f      	movs	r1, #31
 8000650:	f7ff ff2c 	bl	80004ac <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->PreambleLengthMsb),
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f103 021c 	add.w	r2, r3, #28
 800065e:	2301      	movs	r3, #1
 8000660:	2120      	movs	r1, #32
 8000662:	f7ff ff23 	bl	80004ac <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->PreambleLengthLsb),
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 021d 	add.w	r2, r3, #29
 8000670:	2301      	movs	r3, #1
 8000672:	2121      	movs	r1, #33	; 0x21
 8000674:	f7ff ff1a 	bl	80004ac <writeRegister>
			1);
	module->readBytes = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7c9b      	ldrb	r3, [r3, #18]
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	b2db      	uxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7cdb      	ldrb	r3, [r3, #19]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4413      	add	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4413      	add	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006c0:	f107 020f 	add.w	r2, r7, #15
 80006c4:	2301      	movs	r3, #1
 80006c6:	211d      	movs	r1, #29
 80006c8:	f7ff fef0 	bl	80004ac <writeRegister>

	cmd = module->LoRa_SF << 4;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7c5b      	ldrb	r3, [r3, #17]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7d1b      	ldrb	r3, [r3, #20]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4413      	add	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7eda      	ldrb	r2, [r3, #27]
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	4413      	add	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006f6:	f107 020f 	add.w	r2, r7, #15
 80006fa:	2301      	movs	r3, #1
 80006fc:	211e      	movs	r1, #30
 80006fe:	f7ff fed5 	bl	80004ac <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f103 0219 	add.w	r2, r3, #25
 800070c:	2301      	movs	r3, #1
 800070e:	2126      	movs	r1, #38	; 0x26
 8000710:	f7ff fecc 	bl	80004ac <writeRegister>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000728:	2131      	movs	r1, #49	; 0x31
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fe94 	bl	8000458 <readRegister>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f023 0307 	bic.w	r3, r3, #7
 800073a:	b2db      	uxtb	r3, r3
 800073c:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	f043 0305 	orr.w	r3, r3, #5
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800074c:	f107 020f 	add.w	r2, r7, #15
 8000750:	2301      	movs	r3, #1
 8000752:	2131      	movs	r1, #49	; 0x31
 8000754:	f7ff feaa 	bl	80004ac <writeRegister>
	tmp = 0x0C;
 8000758:	230c      	movs	r3, #12
 800075a:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000760:	f107 020f 	add.w	r2, r7, #15
 8000764:	2301      	movs	r3, #1
 8000766:	2137      	movs	r1, #55	; 0x37
 8000768:	f7ff fea0 	bl	80004ac <writeRegister>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <updateLoraLowFreq>:
SX1278_Status_t readMode(SX1278_t *module) {
	return (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800078e:	f107 020f 	add.w	r2, r7, #15
 8000792:	2301      	movs	r3, #1
 8000794:	2101      	movs	r1, #1
 8000796:	f7ff fe89 	bl	80004ac <writeRegister>
	module->operatingMode = mode;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	78fa      	ldrb	r2, [r7, #3]
 800079e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b084      	sub	sp, #16
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 80007b2:	23ff      	movs	r3, #255	; 0xff
 80007b4:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007ba:	f107 020f 	add.w	r2, r7, #15
 80007be:	2301      	movs	r3, #1
 80007c0:	2112      	movs	r1, #18
 80007c2:	f7ff fe73 	bl	80004ac <writeRegister>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	4610      	mov	r0, r2
 80007e4:	f001 fc42 	bl	800206c <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	bf0c      	ite	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	2300      	movne	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000804:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000808:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d013      	beq.n	800083c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000814:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000818:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800081c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000824:	e000      	b.n	8000828 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000826:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000832:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <_write>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}
int _write(int file, char *ptr, int len) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	b29a      	uxth	r2, r3
 8000858:	2332      	movs	r3, #50	; 0x32
 800085a:	68b9      	ldr	r1, [r7, #8]
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <_write+0x48>)
 800085e:	f003 f802 	bl	8003866 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x34>
		ITM_SendChar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffc3 	bl	80007fc <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x20>
	}
	return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000170 	.word	0x20000170
 8000894:	00000000 	.word	0x00000000

08000898 <setBaseParameters>:

SX1278_t *lora_ptr;

void setBaseParameters(SX1278_t *loraTx) {
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	75fb      	strb	r3, [r7, #23]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	75bb      	strb	r3, [r7, #22]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	757b      	strb	r3, [r7, #21]
	uint8_t dio3 = DIO3_VALID_HEADER;
 80008ac:	2301      	movs	r3, #1
 80008ae:	753b      	strb	r3, [r7, #20]
	////////////////////////////////////////
	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	74fb      	strb	r3, [r7, #19]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	74bb      	strb	r3, [r7, #18]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 80008b8:	2320      	movs	r3, #32
 80008ba:	747b      	strb	r3, [r7, #17]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 80008bc:	2310      	movs	r3, #16
 80008be:	743b      	strb	r3, [r7, #16]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 80008c4:	2304      	movs	r3, #4
 80008c6:	73bb      	strb	r3, [r7, #14]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 80008c8:	2302      	movs	r3, #2
 80008ca:	737b      	strb	r3, [r7, #13]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 80008cc:	2301      	movs	r3, #1
 80008ce:	733b      	strb	r3, [r7, #12]

	loraTx->frequency = DOWNLINK_FREQ;
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	a331      	add	r3, pc, #196	; (adr r3, 8000998 <setBaseParameters+0x100>)
 80008d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraTx->power = SX1278_POWER_17DBM;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	22fc      	movs	r2, #252	; 0xfc
 80008e0:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	220a      	movs	r2, #10
 80008e6:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2206      	movs	r2, #6
 80008ec:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2202      	movs	r2, #2
 80008f2:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_DISABLE;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2234      	movs	r2, #52	; 0x34
 80008fe:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	220b      	movs	r2, #11
 8000904:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2223      	movs	r2, #35	; 0x23
 800090a:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2204      	movs	r2, #4
 8000910:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2208      	movs	r2, #8
 8000916:	769a      	strb	r2, [r3, #26]
	loraTx->PreambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	771a      	strb	r2, [r3, #28]
	loraTx->PreambleLengthLsb = PREAMBLE_LENGTH_LSB;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2208      	movs	r2, #8
 8000922:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000924:	7dfa      	ldrb	r2, [r7, #23]
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	7d7b      	ldrb	r3, [r7, #21]
 800092e:	4313      	orrs	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7d3b      	ldrb	r3, [r7, #20]
 8000934:	4313      	orrs	r3, r2
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 800093c:	7cfa      	ldrb	r2, [r7, #19]
 800093e:	7cbb      	ldrb	r3, [r7, #18]
 8000940:	4313      	orrs	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7c7b      	ldrb	r3, [r7, #17]
 8000946:	4313      	orrs	r3, r2
 8000948:	b2da      	uxtb	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000956:	7c39      	ldrb	r1, [r7, #16]
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	430b      	orrs	r3, r1
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	430b      	orrs	r3, r1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000974:	7b79      	ldrb	r1, [r7, #13]
 8000976:	7b3b      	ldrb	r3, [r7, #12]
 8000978:	430b      	orrs	r3, r1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->fhssValue = HOPS_PERIOD;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	779a      	strb	r2, [r3, #30]
}
 800098c:	bf00      	nop
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	08f0d180 	.word	0x08f0d180
 800099c:	00000000 	.word	0x00000000

080009a0 <save>:

void save(SX1278_t *module) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fee2 	bl	8000774 <updateLoraLowFreq>
	HAL_Delay(15);
 80009b0:	200f      	movs	r0, #15
 80009b2:	f000 fea1 	bl	80016f8 <HAL_Delay>
	//updateLoraLowFreq(module, STANDBY);
	setRFFrequency(module);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fdcc 	bl	8000554 <setRFFrequency>
	setLORAWAN(module);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fe1a 	bl	80005f6 <setLORAWAN>
	setOutputPower(module);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fe06 	bl	80005d4 <setOutputPower>
	setOvercurrentProtect(module);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe25 	bl	8000618 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f103 0218 	add.w	r2, r3, #24
 80009d8:	2301      	movs	r3, #1
 80009da:	210c      	movs	r1, #12
 80009dc:	f7ff fd66 	bl	80004ac <writeRegister>
	if (module->LoRa_SF == SF_6) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7c5b      	ldrb	r3, [r3, #17]
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d10a      	bne.n	80009fe <save+0x5e>
		//SFactor=6
		module->headerMode = IMPLICIT;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2203      	movs	r2, #3
 80009f4:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fe90 	bl	800071c <setDetectionParameters>
 80009fc:	e006      	b.n	8000a0c <save+0x6c>
	} else {
		module->headerMode = EXPLICIT;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fe3b 	bl	8000688 <setReModemConfig>
	setPreambleParameters(module);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fe11 	bl	800063a <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f103 021e 	add.w	r2, r3, #30
 8000a22:	2301      	movs	r3, #1
 8000a24:	2124      	movs	r1, #36	; 0x24
 8000a26:	f7ff fd41 	bl	80004ac <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f103 021f 	add.w	r2, r3, #31
 8000a34:	2301      	movs	r3, #1
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	f7ff fd38 	bl	80004ac <writeRegister>
	clearIrqFlags(module);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff feb4 	bl	80007aa <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f103 0220 	add.w	r2, r3, #32
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	2111      	movs	r1, #17
 8000a50:	f7ff fd2c 	bl	80004ac <writeRegister>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
//	writeRegister(module->spi, LR_RegFifoTxBaseAddr, 0x80, 1);///
	uint8_t cmd = module->packetLength+10;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d5b      	ldrb	r3, [r3, #21]
 8000a68:	330a      	adds	r3, #10
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	737b      	strb	r3, [r7, #13]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000a72:	f107 020d 	add.w	r2, r7, #13
 8000a76:	2301      	movs	r3, #1
 8000a78:	2122      	movs	r1, #34	; 0x22
 8000a7a:	f7ff fd17 	bl	80004ac <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	210e      	movs	r1, #14
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fce7 	bl	8000458 <readRegister>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	733b      	strb	r3, [r7, #12]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	2301      	movs	r3, #1
 8000a98:	210d      	movs	r1, #13
 8000a9a:	f7ff fd07 	bl	80004ac <writeRegister>
	uint8_t DireccionBaseTx = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa2:	210e      	movs	r1, #14
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fcd7 	bl	8000458 <readRegister>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
	uint8_t DireccionPtr = readRegister(module->spi, LR_RegFifoAddrPtr);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab2:	210d      	movs	r1, #13
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fccf 	bl	8000458 <readRegister>
 8000aba:	4603      	mov	r3, r0
 8000abc:	73bb      	strb	r3, [r7, #14]
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac2:	2122      	movs	r1, #34	; 0x22
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fcc7 	bl	8000458 <readRegister>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	755a      	strb	r2, [r3, #21]
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <sx1278Reset>:

void sx1278Reset() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <sx1278Reset+0x34>)
 8000ae6:	f001 fad8 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <sx1278Reset+0x34>)
 8000af0:	f001 fad3 	bl	800209a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 fdff 	bl	80016f8 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2101      	movs	r1, #1
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <sx1278Reset+0x34>)
 8000b00:	f001 facb 	bl	800209a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f000 fdf7 	bl	80016f8 <HAL_Delay>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0ac      	sub	sp, #176	; 0xb0
 8000b18:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1a:	f000 fd8b 	bl	8001634 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b1e:	f000 f8ff 	bl	8000d20 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b22:	f000 fa8b 	bl	800103c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b26:	f000 f9a7 	bl	8000e78 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000b2a:	f000 f9d3 	bl	8000ed4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000b2e:	f000 fa07 	bl	8000f40 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000b32:	f000 fa2f 	bl	8000f94 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000b36:	f000 fa57 	bl	8000fe8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000b3a:	f000 f94b 	bl	8000dd4 <MX_ADC1_Init>
	MX_CRC_Init();
 8000b3e:	f000 f987 	bl	8000e50 <MX_CRC_Init>
	 HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	 }
	 */
	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 8000b42:	4a6e      	ldr	r2, [pc, #440]	; (8000cfc <main+0x1e8>)
 8000b44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b48:	6013      	str	r3, [r2, #0]

	int messageCounter = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8000b50:	4b6b      	ldr	r3, [pc, #428]	; (8000d00 <main+0x1ec>)
 8000b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 8000b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8000b5e:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <main+0x1ec>)
 8000b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	lora_hw.nss.pin = LORA_NSS_Pin;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <main+0x1ec>)
 8000b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	lora_hw.reset.pin = LORA_RST_Pin;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	loraTx.hw = &lora_hw;
 8000b76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
	loraTx.spi = &hspi1;
 8000b7c:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <main+0x1f0>)
 8000b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2101      	movs	r1, #1
 8000b86:	485e      	ldr	r0, [pc, #376]	; (8000d00 <main+0x1ec>)
 8000b88:	f001 fa87 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2102      	movs	r1, #2
 8000b90:	485b      	ldr	r0, [pc, #364]	; (8000d00 <main+0x1ec>)
 8000b92:	f001 fa82 	bl	800209a <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8000b96:	2101      	movs	r1, #1
 8000b98:	485a      	ldr	r0, [pc, #360]	; (8000d04 <main+0x1f0>)
 8000b9a:	f7ff fc5d 	bl	8000458 <readRegister>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	loraTx.status = UNKNOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (loraTx.status == UNKNOW) {
 8000baa:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <main+0xbe>
			printf("Configuring Master LoRa module\r\n");
 8000bb2:	4855      	ldr	r0, [pc, #340]	; (8000d08 <main+0x1f4>)
 8000bb4:	f003 f87a 	bl	8003cac <puts>
			setBaseParameters(&loraTx);
 8000bb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe6b 	bl	8000898 <setBaseParameters>
			save(&loraTx);
 8000bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff feea 	bl	80009a0 <save>
			loraTx.status = TX_READY;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		}
		if (loraTx.status == TX_READY) {
 8000bd2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 8085 	bne.w	8000ce6 <main+0x1d2>
			SX1278_t *module;
			module = &loraTx;
 8000bdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			memset(loraTx.txBuffer, 0, SX1278_MAX_PACKET);
 8000be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000be8:	3325      	adds	r3, #37	; 0x25
 8000bea:	2214      	movs	r2, #20
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 ffce 	bl	8003b90 <memset>
			loraTx.packetLength = sprintf((char*) loraTx.txBuffer, "Adios %d",
 8000bf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bf8:	3325      	adds	r3, #37	; 0x25
 8000bfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000bfe:	4943      	ldr	r1, [pc, #268]	; (8000d0c <main+0x1f8>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f85b 	bl	8003cbc <siprintf>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
					messageCounter);

			setTxParameters(&loraTx);
 8000c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff22 	bl	8000a5c <setTxParameters>
			//uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
			//writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
			//writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
			//module->packetLength = readRegister(module->spi,LR_RegPayloadLength);

			if (!(loraTx.packetLength > 0))
 8000c18:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d067      	beq.n	8000cf0 <main+0x1dc>
				break;
			printf("EntryTx OK!\r\n");
 8000c20:	483b      	ldr	r0, [pc, #236]	; (8000d10 <main+0x1fc>)
 8000c22:	f003 f843 	bl	8003cac <puts>
			printf("Sending message: %s\r\n", loraTx.txBuffer);
 8000c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2a:	3325      	adds	r3, #37	; 0x25
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4839      	ldr	r0, [pc, #228]	; (8000d14 <main+0x200>)
 8000c30:	f002 ffb6 	bl	8003ba0 <iprintf>

			//writeRegister(module->spi, 0x00, module->txBuffer,
				//	module->packetLength);

			for(int i = 0;i<loraTx.packetLength;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c3a:	e014      	b.n	8000c66 <main+0x152>
				char data = module->txBuffer[i];
 8000c3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c44:	4413      	add	r3, r2
 8000c46:	3325      	adds	r3, #37	; 0x25
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
				writeRegister(module->spi, 0x00, &data,1);
 8000c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	2301      	movs	r3, #1
 8000c56:	2100      	movs	r1, #0
 8000c58:	f7ff fc28 	bl	80004ac <writeRegister>
			for(int i = 0;i<loraTx.packetLength;i++){
 8000c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c66:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c70:	4293      	cmp	r3, r2
 8000c72:	dbe3      	blt.n	8000c3c <main+0x128>
		}
			updateLoraLowFreq(module, TX);
 8000c74:	2103      	movs	r1, #3
 8000c76:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c7a:	f7ff fd7b 	bl	8000774 <updateLoraLowFreq>
			uint32_t timeStart = HAL_GetTick();
 8000c7e:	f000 fd31 	bl	80016e4 <HAL_GetTick>
 8000c82:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			while (1) {
				if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fd9e 	bl	80007ce <SX1278_hw_GetDIO0>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <main+0x1ac>
					readRegister(module->spi, LR_RegIrqFlags);
 8000c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9e:	2112      	movs	r1, #18
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbd9 	bl	8000458 <readRegister>
					clearIrqFlags(module); //Clear irq
 8000ca6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000caa:	f7ff fd7e 	bl	80007aa <clearIrqFlags>
					printf("Transmission: OK\r\n");
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <main+0x204>)
 8000cb0:	f002 fffc 	bl	8003cac <puts>
					messageCounter += 1;
 8000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					break;
 8000cbe:	e012      	b.n	8000ce6 <main+0x1d2>
				}

				if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000cc0:	f000 fd10 	bl	80016e4 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd0:	d905      	bls.n	8000cde <main+0x1ca>
					sx1278Reset();
 8000cd2:	f7ff ff03 	bl	8000adc <sx1278Reset>
					printf("EntryTx failed, timeout reset!\r\n");
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <main+0x208>)
 8000cd8:	f002 ffe8 	bl	8003cac <puts>
					break;
 8000cdc:	e003      	b.n	8000ce6 <main+0x1d2>
				}

				HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fd0a 	bl	80016f8 <HAL_Delay>
				if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ce4:	e7cf      	b.n	8000c86 <main+0x172>
			}
			//module->operatingMode = readMode(module);
		}

		HAL_Delay(500);
 8000ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cea:	f000 fd05 	bl	80016f8 <HAL_Delay>
		if (loraTx.status == UNKNOW) {
 8000cee:	e75c      	b.n	8000baa <main+0x96>
				break;
 8000cf0:	bf00      	nop
 8000cf2:	2300      	movs	r3, #0

		/* USER CODE BEGIN 3 */

	}
	/* USER CODE END 3 */
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	37b0      	adds	r7, #176	; 0xb0
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000023c 	.word	0x2000023c
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	20000118 	.word	0x20000118
 8000d08:	08004fc4 	.word	0x08004fc4
 8000d0c:	08004fe4 	.word	0x08004fe4
 8000d10:	08004ff0 	.word	0x08004ff0
 8000d14:	08005000 	.word	0x08005000
 8000d18:	08005018 	.word	0x08005018
 8000d1c:	0800502c 	.word	0x0800502c

08000d20 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ff2e 	bl	8003b90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 faed 	bl	8002354 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x64>
		Error_Handler();
 8000d80:	f000 f9a8 	bl	80010d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d84:	230f      	movs	r3, #15
 8000d86:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fd59 	bl	8002858 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x90>
		Error_Handler();
 8000dac:	f000 f992 	bl	80010d4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db0:	2302      	movs	r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fee4 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xaa>
		Error_Handler();
 8000dc6:	f000 f985 	bl	80010d4 <Error_Handler>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <MX_ADC1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000dfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e02:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e12:	f000 fc95 	bl	8001740 <HAL_ADC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000e1c:	f000 f95a 	bl	80010d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e32:	f000 fd5d 	bl	80018f0 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000e3c:	f000 f94a 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000008c 	.word	0x2000008c
 8000e4c:	40012400 	.word	0x40012400

08000e50 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_CRC_Init+0x20>)
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <MX_CRC_Init+0x24>)
 8000e58:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_CRC_Init+0x20>)
 8000e5c:	f000 ff65 	bl	8001d2a <HAL_CRC_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000e66:	f000 f935 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000bc 	.word	0x200000bc
 8000e74:	40023000 	.word	0x40023000

08000e78 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_I2C1_Init+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x58>)
 8000e86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb6:	f001 f909 	bl	80020cc <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000ec0:	f000 f908 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000eda:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <MX_SPI1_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f08:	2218      	movs	r2, #24
 8000f0a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f20:	220a      	movs	r2, #10
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_SPI1_Init+0x64>)
 8000f26:	f001 fee5 	bl	8002cf4 <HAL_SPI_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000f30:	f000 f8d0 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000118 	.word	0x20000118
 8000f3c:	40013000 	.word	0x40013000

08000f40 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART1_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f78:	f002 fc28 	bl	80037cc <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f82:	f000 f8a7 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f002 fbfe 	bl	80037cc <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000fd6:	f000 f87d 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001b4 	.word	0x200001b4
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_USART3_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USART3_UART_Init+0x4c>)
 8001020:	f002 fbd4 	bl	80037cc <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800102a:	f000 f853 	bl	80010d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001f8 	.word	0x200001f8
 8001038:	40004800 	.word	0x40004800

0800103c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_GPIO_Init+0x90>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <MX_GPIO_Init+0x90>)
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_GPIO_Init+0x90>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_GPIO_Init+0x90>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_GPIO_Init+0x90>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_GPIO_Init+0x90>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_GPIO_Init+0x90>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <MX_GPIO_Init+0x90>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_GPIO_Init+0x90>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001098:	2200      	movs	r2, #0
 800109a:	f247 313b 	movw	r1, #29499	; 0x733b
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_GPIO_Init+0x94>)
 80010a0:	f000 fffb 	bl	800209a <HAL_GPIO_WritePin>
					| RS485_DE_Pin | BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED3_Pin LED2_Pin LED1_Pin
	 RS485_DE_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 80010a4:	f247 333b 	movw	r3, #29499	; 0x733b
 80010a8:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED3_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_GPIO_Init+0x94>)
 80010be:	f000 fe51 	bl	8001d64 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <HAL_MspInit+0x5c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_MspInit+0x5c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x5c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	61d3      	str	r3, [r2, #28]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x5c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_MspInit+0x60>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_MspInit+0x60>)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_ADC_MspInit+0x6c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d121      	bne.n	80011a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_ADC_MspInit+0x70>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001194:	2313      	movs	r3, #19
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_ADC_MspInit+0x74>)
 80011a4:	f000 fdde 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012400 	.word	0x40012400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010800 	.word	0x40010800

080011bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_CRC_MspInit+0x34>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10b      	bne.n	80011e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_CRC_MspInit+0x38>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_CRC_MspInit+0x38>)
 80011d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_CRC_MspInit+0x38>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40023000 	.word	0x40023000
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_I2C_MspInit+0x70>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d123      	bne.n	8001260 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_I2C_MspInit+0x74>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_I2C_MspInit+0x74>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_I2C_MspInit+0x74>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001230:	23c0      	movs	r3, #192	; 0xc0
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001234:	2312      	movs	r3, #18
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_I2C_MspInit+0x78>)
 8001244:	f000 fd8e 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_I2C_MspInit+0x74>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_I2C_MspInit+0x74>)
 800124e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001252:	61d3      	str	r3, [r2, #28]
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_I2C_MspInit+0x74>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40005400 	.word	0x40005400
 800126c:	40021000 	.word	0x40021000
 8001270:	40010c00 	.word	0x40010c00

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_SPI_MspInit+0x88>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d12f      	bne.n	80012f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 800129a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012c4:	23a0      	movs	r3, #160	; 0xa0
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012d8:	f000 fd44 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x90>)
 80012f0:	f000 fd38 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013000 	.word	0x40013000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a53      	ldr	r2, [pc, #332]	; (8001470 <HAL_UART_MspInit+0x168>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d132      	bne.n	800138e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	4619      	mov	r1, r3
 800136c:	4842      	ldr	r0, [pc, #264]	; (8001478 <HAL_UART_MspInit+0x170>)
 800136e:	f000 fcf9 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4619      	mov	r1, r3
 8001386:	483c      	ldr	r0, [pc, #240]	; (8001478 <HAL_UART_MspInit+0x170>)
 8001388:	f000 fcec 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800138c:	e06c      	b.n	8001468 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a3a      	ldr	r2, [pc, #232]	; (800147c <HAL_UART_MspInit+0x174>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d130      	bne.n	80013fa <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a35      	ldr	r2, [pc, #212]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <HAL_UART_MspInit+0x16c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <HAL_UART_MspInit+0x16c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <HAL_UART_MspInit+0x16c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_UART_MspInit+0x16c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4619      	mov	r1, r3
 80013da:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_UART_MspInit+0x170>)
 80013dc:	f000 fcc2 	bl	8001d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4619      	mov	r1, r3
 80013f2:	4821      	ldr	r0, [pc, #132]	; (8001478 <HAL_UART_MspInit+0x170>)
 80013f4:	f000 fcb6 	bl	8001d64 <HAL_GPIO_Init>
}
 80013f8:	e036      	b.n	8001468 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <HAL_UART_MspInit+0x178>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d131      	bne.n	8001468 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800140a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140e:	61d3      	str	r3, [r2, #28]
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_UART_MspInit+0x16c>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_UART_MspInit+0x16c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	4619      	mov	r1, r3
 8001448:	480e      	ldr	r0, [pc, #56]	; (8001484 <HAL_UART_MspInit+0x17c>)
 800144a:	f000 fc8b 	bl	8001d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800144e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <HAL_UART_MspInit+0x17c>)
 8001464:	f000 fc7e 	bl	8001d64 <HAL_GPIO_Init>
}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	; 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40013800 	.word	0x40013800
 8001474:	40021000 	.word	0x40021000
 8001478:	40010800 	.word	0x40010800
 800147c:	40004400 	.word	0x40004400
 8001480:	40004800 	.word	0x40004800
 8001484:	40010c00 	.word	0x40010c00

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 f8f7 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
	}

return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001536:	605a      	str	r2, [r3, #4]
	return 0;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <_isatty>:

int _isatty(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	return 1;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f002 facc 	bl	8003b3c <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20005000 	.word	0x20005000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000240 	.word	0x20000240
 80015d8:	20000258 	.word	0x20000258

080015dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	; (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160e:	f7ff ffe5 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f002 fa99 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001616:	f7ff fa7d 	bl	8000b14 <main>
  bx lr
 800161a:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001624:	0800511c 	.word	0x0800511c
  ldr r2, =_sbss
 8001628:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800162c:	20000258 	.word	0x20000258

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 fb3d 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fd46 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fb47 	bl	8001d12 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 fb1d 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000244 	.word	0x20000244

080016e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000244 	.word	0x20000244

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fff0 	bl	80016e4 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffe0 	bl	80016e4 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0be      	b.n	80018e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fce0 	bl	8001144 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9ab 	bl	8001ae0 <ADC_ConversionStop_Disable>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8099 	bne.w	80018ce <HAL_ADC_Init+0x18e>
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8095 	bne.w	80018ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ac:	f023 0302 	bic.w	r3, r3, #2
 80017b0:	f043 0202 	orr.w	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b1b      	ldrb	r3, [r3, #12]
 80017c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d8:	d003      	beq.n	80017e2 <HAL_ADC_Init+0xa2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <HAL_ADC_Init+0xa8>
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	e000      	b.n	80017ea <HAL_ADC_Init+0xaa>
 80017e8:	2300      	movs	r3, #0
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7d1b      	ldrb	r3, [r3, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d119      	bne.n	800182c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7b1b      	ldrb	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	3b01      	subs	r3, #1
 8001806:	035a      	lsls	r2, r3, #13
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e00b      	b.n	800182c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_ADC_Init+0x1a8>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800185c:	d003      	beq.n	8001866 <HAL_ADC_Init+0x126>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d104      	bne.n	8001870 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	3b01      	subs	r3, #1
 800186c:	051b      	lsls	r3, r3, #20
 800186e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	430a      	orrs	r2, r1
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_ADC_Init+0x1ac>)
 800188c:	4013      	ands	r3, r2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d10b      	bne.n	80018ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018aa:	e018      	b.n	80018de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f023 0312 	bic.w	r3, r3, #18
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018cc:	e007      	b.n	80018de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f043 0210 	orr.w	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018de:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	ffe1f7fd 	.word	0xffe1f7fd
 80018ec:	ff1f0efe 	.word	0xff1f0efe

080018f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x20>
 800190c:	2302      	movs	r3, #2
 800190e:	e0dc      	b.n	8001aca <HAL_ADC_ConfigChannel+0x1da>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b06      	cmp	r3, #6
 800191e:	d81c      	bhi.n	800195a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b05      	subs	r3, #5
 8001932:	221f      	movs	r2, #31
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b05      	subs	r3, #5
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
 8001958:	e03c      	b.n	80019d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d81c      	bhi.n	800199c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3b23      	subs	r3, #35	; 0x23
 8001974:	221f      	movs	r2, #31
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	4019      	ands	r1, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b23      	subs	r3, #35	; 0x23
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	e01b      	b.n	80019d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b41      	subs	r3, #65	; 0x41
 80019ae:	221f      	movs	r2, #31
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4019      	ands	r1, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b41      	subs	r3, #65	; 0x41
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b09      	cmp	r3, #9
 80019da:	d91c      	bls.n	8001a16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68d9      	ldr	r1, [r3, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b1e      	subs	r3, #30
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3b1e      	subs	r3, #30
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	e019      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6919      	ldr	r1, [r3, #16]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4019      	ands	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6898      	ldr	r0, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d003      	beq.n	8001a5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a56:	2b11      	cmp	r3, #17
 8001a58:	d132      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d125      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d126      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d11a      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <HAL_ADC_ConfigChannel+0x1ec>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9a      	lsrs	r2, r3, #18
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8001aae:	e007      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40012400 	.word	0x40012400
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12e      	bne.n	8001b58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0a:	f7ff fdeb 	bl	80016e4 <HAL_GetTick>
 8001b0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	e01b      	b.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b12:	f7ff fde7 	bl	80016e4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d914      	bls.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10d      	bne.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d0dc      	beq.n	8001b12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <__NVIC_SetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Config>:
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff90 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff49 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff5e 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffb0 	bl	8001c80 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00e      	b.n	8001d5a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	795b      	ldrb	r3, [r3, #5]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fa35 	bl	80011bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	; 0x2c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a9a      	ldr	r2, [pc, #616]	; (8002004 <HAL_GPIO_Init+0x2a0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d05e      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001da0:	4a98      	ldr	r2, [pc, #608]	; (8002004 <HAL_GPIO_Init+0x2a0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d875      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001da6:	4a98      	ldr	r2, [pc, #608]	; (8002008 <HAL_GPIO_Init+0x2a4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d058      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dac:	4a96      	ldr	r2, [pc, #600]	; (8002008 <HAL_GPIO_Init+0x2a4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d86f      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001db2:	4a96      	ldr	r2, [pc, #600]	; (800200c <HAL_GPIO_Init+0x2a8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d052      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001db8:	4a94      	ldr	r2, [pc, #592]	; (800200c <HAL_GPIO_Init+0x2a8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d869      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dbe:	4a94      	ldr	r2, [pc, #592]	; (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04c      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dc4:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_GPIO_Init+0x2ac>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d863      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dca:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d046      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a90      	ldr	r2, [pc, #576]	; (8002014 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d85d      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_GPIO_Init+0xcc>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d859      	bhi.n	8001e92 <HAL_GPIO_Init+0x12e>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_GPIO_Init+0x80>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e5f 	.word	0x08001e5f
 8001de8:	08001e39 	.word	0x08001e39
 8001dec:	08001e4b 	.word	0x08001e4b
 8001df0:	08001e8d 	.word	0x08001e8d
 8001df4:	08001e93 	.word	0x08001e93
 8001df8:	08001e93 	.word	0x08001e93
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001e93 	.word	0x08001e93
 8001e04:	08001e93 	.word	0x08001e93
 8001e08:	08001e93 	.word	0x08001e93
 8001e0c:	08001e93 	.word	0x08001e93
 8001e10:	08001e93 	.word	0x08001e93
 8001e14:	08001e93 	.word	0x08001e93
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e93 	.word	0x08001e93
 8001e20:	08001e93 	.word	0x08001e93
 8001e24:	08001e93 	.word	0x08001e93
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	4a79      	ldr	r2, [pc, #484]	; (8002018 <HAL_GPIO_Init+0x2b4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e36:	e02c      	b.n	8001e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e029      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	3304      	adds	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e024      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e01f      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e01a      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e66:	2304      	movs	r3, #4
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e013      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e74:	2308      	movs	r3, #8
 8001e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	615a      	str	r2, [r3, #20]
          break;
 8001e8a:	e003      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x130>
          break;
 8001e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	; 0xff
 8001e98:	d801      	bhi.n	8001e9e <HAL_GPIO_Init+0x13a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_Init+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_GPIO_Init+0x14c>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	e002      	b.n	8001eb6 <HAL_GPIO_Init+0x152>
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	3b08      	subs	r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	6a39      	ldr	r1, [r7, #32]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80b1 	beq.w	8002046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2bc>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a40      	ldr	r2, [pc, #256]	; (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_GPIO_Init+0x1ec>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00d      	beq.n	8001f4c <HAL_GPIO_Init+0x1e8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3e      	ldr	r2, [pc, #248]	; (800202c <HAL_GPIO_Init+0x2c8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x1e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_GPIO_Init+0x1e0>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e006      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e004      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_GPIO_Init+0x1ee>
 8001f50:	2300      	movs	r3, #0
 8001f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f54:	f002 0203 	and.w	r2, r2, #3
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f62:	492f      	ldr	r1, [pc, #188]	; (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	492c      	ldr	r1, [pc, #176]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4928      	ldr	r1, [pc, #160]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	491e      	ldr	r1, [pc, #120]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4918      	ldr	r1, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d021      	beq.n	8002038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e021      	b.n	8002046 <HAL_GPIO_Init+0x2e2>
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40011400 	.word	0x40011400
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_GPIO_Init+0x304>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002042:	4013      	ands	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae8e 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	; 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
 80020a6:	4613      	mov	r3, r2
 80020a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b6:	e003      	b.n	80020c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e12b      	b.n	8002336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff f880 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800211e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002130:	f000 fce4 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a81      	ldr	r2, [pc, #516]	; (8002340 <HAL_I2C_Init+0x274>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d807      	bhi.n	8002150 <HAL_I2C_Init+0x84>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_I2C_Init+0x278>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e006      	b.n	800215e <HAL_I2C_Init+0x92>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a7d      	ldr	r2, [pc, #500]	; (8002348 <HAL_I2C_Init+0x27c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0e7      	b.n	8002336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a78      	ldr	r2, [pc, #480]	; (800234c <HAL_I2C_Init+0x280>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_I2C_Init+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d802      	bhi.n	80021a0 <HAL_I2C_Init+0xd4>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	e009      	b.n	80021b4 <HAL_I2C_Init+0xe8>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_I2C_Init+0x284>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	495c      	ldr	r1, [pc, #368]	; (8002340 <HAL_I2C_Init+0x274>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d819      	bhi.n	8002208 <HAL_I2C_Init+0x13c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e59      	subs	r1, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_I2C_Init+0x138>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e59      	subs	r1, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	e051      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002204:	2304      	movs	r3, #4
 8002206:	e04f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_I2C_Init+0x168>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_I2C_Init+0x18e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x196>
 800225e:	2301      	movs	r3, #1
 8002260:	e022      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_I2C_Init+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e58      	subs	r0, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6911      	ldr	r1, [r2, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	000186a0 	.word	0x000186a0
 8002344:	001e847f 	.word	0x001e847f
 8002348:	003d08ff 	.word	0x003d08ff
 800234c:	431bde83 	.word	0x431bde83
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e272      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00c      	beq.n	800239a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002380:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d112      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 800238c:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x12c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e24c      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x76>
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7f      	ldr	r2, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xbc>
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a71      	ldr	r2, [pc, #452]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 8002410:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6a      	ldr	r2, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff f958 	bl	80016e4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f954 	bl	80016e4 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e200      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe4>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f944 	bl	80016e4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f940 	bl	80016e4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1ec      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x10c>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
 80024a6:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c0      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4939      	ldr	r1, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff f8f9 	bl	80016e4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7ff f8f5 	bl	80016e4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff f8d8 	bl	80016e4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff f8d4 	bl	80016e4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e180      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7ff f8b8 	bl	80016e4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff f8b4 	bl	80016e4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e160      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 fad8 	bl	8002b4c <RCC_Delay>
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7ff f89e 	bl	80016e4 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff f89a 	bl	80016e4 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e146      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	42420000 	.word	0x42420000
 80025c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b92      	ldr	r3, [pc, #584]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a6 	beq.w	8002732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a87      	ldr	r2, [pc, #540]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7ff f85b 	bl	80016e4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7ff f857 	bl	80016e4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e103      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x312>
 8002658:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x334>
 800266e:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x356>
 8002690:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff f80b 	bl	80016e4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff f807 	bl	80016e4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0b1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCC_OscConfig+0x37e>
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fff5 	bl	80016e4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fff1 	bl	80016e4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e09b      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d061      	beq.n	800280c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d146      	bne.n	80027de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe ffc5 	bl	80016e4 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe ffc1 	bl	80016e4 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e06d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4921      	ldr	r1, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a19      	ldr	r1, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	430b      	orrs	r3, r1
 80027aa:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe ff95 	bl	80016e4 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe ff91 	bl	80016e4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x46a>
 80027dc:	e035      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe ff7e 	bl	80016e4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe ff7a 	bl	80016e4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x498>
 800280a:	e01e      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e019      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x500>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0d0      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4965      	ldr	r1, [pc, #404]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d040      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d115      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e073      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4936      	ldr	r1, [pc, #216]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fe fecc 	bl	80016e4 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fe fec8 	bl	80016e4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e053      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d210      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1cc>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fe2a 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	0800505c 	.word	0x0800505c
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b490      	push	{r4, r7}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a34:	1d3c      	adds	r4, r7, #4
 8002a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a3c:	f240 2301 	movw	r3, #513	; 0x201
 8002a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x40>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6a:	e02b      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a6e:	623b      	str	r3, [r7, #32]
      break;
 8002a70:	e02b      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3328      	adds	r3, #40	; 0x28
 8002a7c:	443b      	add	r3, r7
 8002a7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0c5b      	lsrs	r3, r3, #17
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	3328      	adds	r3, #40	; 0x28
 8002a9a:	443b      	add	r3, r7
 8002a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	e004      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	623b      	str	r3, [r7, #32]
      break;
 8002ac2:	e002      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ac6:	623b      	str	r3, [r7, #32]
      break;
 8002ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aca:	6a3b      	ldr	r3, [r7, #32]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc90      	pop	{r4, r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	0800504c 	.word	0x0800504c
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	007a1200 	.word	0x007a1200
 8002ae4:	003d0900 	.word	0x003d0900

08002ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff2 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	0800506c 	.word	0x0800506c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffde 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	0adb      	lsrs	r3, r3, #11
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	0800506c 	.word	0x0800506c

08002b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <RCC_Delay+0x34>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <RCC_Delay+0x38>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0a5b      	lsrs	r3, r3, #9
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b68:	bf00      	nop
  }
  while (Delay --);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1e5a      	subs	r2, r3, #1
 8002b6e:	60fa      	str	r2, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f9      	bne.n	8002b68 <RCC_Delay+0x1c>
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	20000000 	.word	0x20000000
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d07d      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba8:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	61d3      	str	r3, [r2, #28]
 8002bc0:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b46      	ldr	r3, [pc, #280]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d118      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bdc:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a42      	ldr	r2, [pc, #264]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fd7c 	bl	80016e4 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	e008      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fd78 	bl	80016e4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e06d      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d027      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe fd47 	bl	80016e4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fd43 	bl	80016e4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e036      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	490b      	ldr	r1, [pc, #44]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42420440 	.word	0x42420440

08002cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e076      	b.n	8002df4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d16:	d009      	beq.n	8002d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
 8002d1e:	e005      	b.n	8002d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe fa94 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	ea42 0103 	orr.w	r1, r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	0c1a      	lsrs	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f002 0204 	and.w	r2, r2, #4
 8002dd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_SPI_Transmit+0x22>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e126      	b.n	800306c <HAL_SPI_Transmit+0x270>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e26:	f7fe fc5d 	bl	80016e4 <HAL_GetTick>
 8002e2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e40:	e10b      	b.n	800305a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_SPI_Transmit+0x52>
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e52:	e102      	b.n	800305a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2203      	movs	r2, #3
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d10f      	bne.n	8002ebc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d007      	beq.n	8002eda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee2:	d14b      	bne.n	8002f7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Transmit+0xf6>
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d13e      	bne.n	8002f70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f16:	e02b      	b.n	8002f70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d112      	bne.n	8002f4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	1c9a      	adds	r2, r3, #2
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f4a:	e011      	b.n	8002f70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4c:	f7fe fbca 	bl	80016e4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d803      	bhi.n	8002f64 <HAL_SPI_Transmit+0x168>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d102      	bne.n	8002f6a <HAL_SPI_Transmit+0x16e>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f6e:	e074      	b.n	800305a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ce      	bne.n	8002f18 <HAL_SPI_Transmit+0x11c>
 8002f7a:	e04c      	b.n	8003016 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_SPI_Transmit+0x18e>
 8002f84:	8afb      	ldrh	r3, [r7, #22]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d140      	bne.n	800300c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fb0:	e02c      	b.n	800300c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d113      	bne.n	8002fe8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fe6:	e011      	b.n	800300c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe8:	f7fe fb7c 	bl	80016e4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d803      	bhi.n	8003000 <HAL_SPI_Transmit+0x204>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d102      	bne.n	8003006 <HAL_SPI_Transmit+0x20a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	77fb      	strb	r3, [r7, #31]
          goto error;
 800300a:	e026      	b.n	800305a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1cd      	bne.n	8002fb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fbb8 	bl	8003790 <SPI_EndRxTxTransaction>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e000      	b.n	800305a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003058:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800306a:	7ffb      	ldrb	r3, [r7, #31]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003090:	d112      	bne.n	80030b8 <HAL_SPI_Receive+0x44>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2204      	movs	r2, #4
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f8f1 	bl	8003296 <HAL_SPI_TransmitReceive>
 80030b4:	4603      	mov	r3, r0
 80030b6:	e0ea      	b.n	800328e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_SPI_Receive+0x52>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0e3      	b.n	800328e <HAL_SPI_Receive+0x21a>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ce:	f7fe fb09 	bl	80016e4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030e4:	e0ca      	b.n	800327c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_SPI_Receive+0x7e>
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030f6:	e0c1      	b.n	800327c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2204      	movs	r2, #4
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313e:	d10f      	bne.n	8003160 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800315e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d007      	beq.n	800317e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d162      	bne.n	800324c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003186:	e02e      	b.n	80031e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d115      	bne.n	80031c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f103 020c 	add.w	r2, r3, #12
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c0:	e011      	b.n	80031e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c2:	f7fe fa8f 	bl	80016e4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d803      	bhi.n	80031da <HAL_SPI_Receive+0x166>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d102      	bne.n	80031e0 <HAL_SPI_Receive+0x16c>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031e4:	e04a      	b.n	800327c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1cb      	bne.n	8003188 <HAL_SPI_Receive+0x114>
 80031f0:	e031      	b.n	8003256 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d113      	bne.n	8003228 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	b292      	uxth	r2, r2
 800320c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003226:	e011      	b.n	800324c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003228:	f7fe fa5c 	bl	80016e4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d803      	bhi.n	8003240 <HAL_SPI_Receive+0x1cc>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d102      	bne.n	8003246 <HAL_SPI_Receive+0x1d2>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	75fb      	strb	r3, [r7, #23]
          goto error;
 800324a:	e017      	b.n	800327c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cd      	bne.n	80031f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa46 	bl	80036ec <SPI_EndRxTransaction>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
 8003278:	e000      	b.n	800327c <HAL_SPI_Receive+0x208>
  }

error :
 800327a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b08c      	sub	sp, #48	; 0x30
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x26>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e18a      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x33c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032c4:	f7fe fa0e 	bl	80016e4 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d00f      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x70>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ec:	d107      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x68>
 80032f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d003      	beq.n	8003306 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003304:	e15b      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x82>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x82>
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800331e:	e14e      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b04      	cmp	r3, #4
 800332a:	d003      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2205      	movs	r2, #5
 8003330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	887a      	ldrh	r2, [r7, #2]
 800334a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d007      	beq.n	8003388 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003390:	d178      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x10a>
 800339a:	8b7b      	ldrh	r3, [r7, #26]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d166      	bne.n	800346e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	1c9a      	adds	r2, r3, #2
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c4:	e053      	b.n	800346e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d11b      	bne.n	800340c <HAL_SPI_TransmitReceive+0x176>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_SPI_TransmitReceive+0x176>
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d113      	bne.n	800340c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	1c9a      	adds	r2, r3, #2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d119      	bne.n	800344e <HAL_SPI_TransmitReceive+0x1b8>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d014      	beq.n	800344e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	b292      	uxth	r2, r2
 8003430:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	1c9a      	adds	r2, r3, #2
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800344a:	2301      	movs	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800344e:	f7fe f949 	bl	80016e4 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345a:	429a      	cmp	r2, r3
 800345c:	d807      	bhi.n	800346e <HAL_SPI_TransmitReceive+0x1d8>
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d003      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800346c:	e0a7      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1a6      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x130>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1a1      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x130>
 8003482:	e07c      	b.n	800357e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x1fc>
 800348c:	8b7b      	ldrh	r3, [r7, #26]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d16b      	bne.n	800356a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b8:	e057      	b.n	800356a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d11c      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x26c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d017      	beq.n	8003502 <HAL_SPI_TransmitReceive+0x26c>
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d114      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d119      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2ae>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d014      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003540:	2301      	movs	r3, #1
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003544:	f7fe f8ce 	bl	80016e4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003550:	429a      	cmp	r2, r3
 8003552:	d803      	bhi.n	800355c <HAL_SPI_TransmitReceive+0x2c6>
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d102      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x2cc>
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003568:	e029      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1a2      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x224>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d19d      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f904 	bl	8003790 <SPI_EndRxTxTransaction>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800359a:	e010      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	e000      	b.n	80035be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3730      	adds	r7, #48	; 0x30
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035ec:	f7fe f87a 	bl	80016e4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035fc:	f7fe f872 	bl	80016e4 <HAL_GetTick>
 8003600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	015b      	lsls	r3, r3, #5
 8003608:	0d1b      	lsrs	r3, r3, #20
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003612:	e054      	b.n	80036be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d050      	beq.n	80036be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800361c:	f7fe f862 	bl	80016e4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	429a      	cmp	r2, r3
 800362a:	d902      	bls.n	8003632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d13d      	bne.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364a:	d111      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d004      	beq.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d107      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003678:	d10f      	bne.n	800369a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e017      	b.n	80036de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d19b      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003700:	d111      	bne.n	8003726 <SPI_EndRxTransaction+0x3a>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370a:	d004      	beq.n	8003716 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d107      	bne.n	8003726 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d117      	bne.n	8003760 <SPI_EndRxTransaction+0x74>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d112      	bne.n	8003760 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	2101      	movs	r1, #1
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff ff49 	bl	80035dc <SPI_WaitFlagStateUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01a      	beq.n	8003786 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e013      	b.n	8003788 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2200      	movs	r2, #0
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ff36 	bl	80035dc <SPI_WaitFlagStateUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e000      	b.n	8003788 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff ff18 	bl	80035dc <SPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e000      	b.n	80037c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e03f      	b.n	800385e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fd88 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800380e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f905 	bl	8003a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08a      	sub	sp, #40	; 0x28
 800386a:	af02      	add	r7, sp, #8
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	d17c      	bne.n	8003980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_UART_Transmit+0x2c>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e075      	b.n	8003982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit+0x3e>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e06e      	b.n	8003982 <HAL_UART_Transmit+0x11c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ba:	f7fd ff13 	bl	80016e4 <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	88fa      	ldrh	r2, [r7, #6]
 80038ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d108      	bne.n	80038e8 <HAL_UART_Transmit+0x82>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	e003      	b.n	80038f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038f8:	e02a      	b.n	8003950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f840 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e036      	b.n	8003982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3302      	adds	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	e007      	b.n	8003942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3301      	adds	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1cf      	bne.n	80038fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2200      	movs	r2, #0
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f810 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e006      	b.n	8003982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	e02c      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d028      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x30>
 80039aa:	f7fd fe9b 	bl	80016e4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d21d      	bcs.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e00f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0c3      	beq.n	800399c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a5a:	f023 030c 	bic.w	r3, r3, #12
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <UART_SetConfig+0x114>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d103      	bne.n	8003a90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a88:	f7ff f84c 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	e002      	b.n	8003a96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7ff f834 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8003a94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009a      	lsls	r2, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <UART_SetConfig+0x118>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	0119      	lsls	r1, r3, #4
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009a      	lsls	r2, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <UART_SetConfig+0x118>)
 8003ace:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2064      	movs	r0, #100	; 0x64
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	; 0x32
 8003ae0:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <UART_SetConfig+0x118>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aec:	4419      	add	r1, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <UART_SetConfig+0x118>)
 8003b06:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	440a      	add	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40013800 	.word	0x40013800
 8003b38:	51eb851f 	.word	0x51eb851f

08003b3c <__errno>:
 8003b3c:	4b01      	ldr	r3, [pc, #4]	; (8003b44 <__errno+0x8>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	4d0c      	ldr	r5, [pc, #48]	; (8003b80 <__libc_init_array+0x38>)
 8003b4e:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b50:	1b64      	subs	r4, r4, r5
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	f001 fa08 	bl	8004f6c <_init>
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	4d0a      	ldr	r5, [pc, #40]	; (8003b88 <__libc_init_array+0x40>)
 8003b60:	4c0a      	ldr	r4, [pc, #40]	; (8003b8c <__libc_init_array+0x44>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	08005114 	.word	0x08005114
 8003b84:	08005114 	.word	0x08005114
 8003b88:	08005114 	.word	0x08005114
 8003b8c:	08005118 	.word	0x08005118

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <iprintf>:
 8003ba0:	b40f      	push	{r0, r1, r2, r3}
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <iprintf+0x2c>)
 8003ba4:	b513      	push	{r0, r1, r4, lr}
 8003ba6:	681c      	ldr	r4, [r3, #0]
 8003ba8:	b124      	cbz	r4, 8003bb4 <iprintf+0x14>
 8003baa:	69a3      	ldr	r3, [r4, #24]
 8003bac:	b913      	cbnz	r3, 8003bb4 <iprintf+0x14>
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 fa7a 	bl	80040a8 <__sinit>
 8003bb4:	ab05      	add	r3, sp, #20
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	9a04      	ldr	r2, [sp, #16]
 8003bba:	68a1      	ldr	r1, [r4, #8]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	f000 fdd9 	bl	8004774 <_vfiprintf_r>
 8003bc2:	b002      	add	sp, #8
 8003bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc8:	b004      	add	sp, #16
 8003bca:	4770      	bx	lr
 8003bcc:	2000000c 	.word	0x2000000c

08003bd0 <_puts_r>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	460e      	mov	r6, r1
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	b118      	cbz	r0, 8003be0 <_puts_r+0x10>
 8003bd8:	6983      	ldr	r3, [r0, #24]
 8003bda:	b90b      	cbnz	r3, 8003be0 <_puts_r+0x10>
 8003bdc:	f000 fa64 	bl	80040a8 <__sinit>
 8003be0:	69ab      	ldr	r3, [r5, #24]
 8003be2:	68ac      	ldr	r4, [r5, #8]
 8003be4:	b913      	cbnz	r3, 8003bec <_puts_r+0x1c>
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 fa5e 	bl	80040a8 <__sinit>
 8003bec:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <_puts_r+0xd0>)
 8003bee:	429c      	cmp	r4, r3
 8003bf0:	d120      	bne.n	8003c34 <_puts_r+0x64>
 8003bf2:	686c      	ldr	r4, [r5, #4]
 8003bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bf6:	07db      	lsls	r3, r3, #31
 8003bf8:	d405      	bmi.n	8003c06 <_puts_r+0x36>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	0598      	lsls	r0, r3, #22
 8003bfe:	d402      	bmi.n	8003c06 <_puts_r+0x36>
 8003c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c02:	f000 faef 	bl	80041e4 <__retarget_lock_acquire_recursive>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	0719      	lsls	r1, r3, #28
 8003c0a:	d51d      	bpl.n	8003c48 <_puts_r+0x78>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	b1db      	cbz	r3, 8003c48 <_puts_r+0x78>
 8003c10:	3e01      	subs	r6, #1
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	bb39      	cbnz	r1, 8003c6e <_puts_r+0x9e>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da38      	bge.n	8003c94 <_puts_r+0xc4>
 8003c22:	4622      	mov	r2, r4
 8003c24:	210a      	movs	r1, #10
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 f868 	bl	8003cfc <__swbuf_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d011      	beq.n	8003c54 <_puts_r+0x84>
 8003c30:	250a      	movs	r5, #10
 8003c32:	e011      	b.n	8003c58 <_puts_r+0x88>
 8003c34:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <_puts_r+0xd4>)
 8003c36:	429c      	cmp	r4, r3
 8003c38:	d101      	bne.n	8003c3e <_puts_r+0x6e>
 8003c3a:	68ac      	ldr	r4, [r5, #8]
 8003c3c:	e7da      	b.n	8003bf4 <_puts_r+0x24>
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <_puts_r+0xd8>)
 8003c40:	429c      	cmp	r4, r3
 8003c42:	bf08      	it	eq
 8003c44:	68ec      	ldreq	r4, [r5, #12]
 8003c46:	e7d5      	b.n	8003bf4 <_puts_r+0x24>
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f000 f8a8 	bl	8003da0 <__swsetup_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0dd      	beq.n	8003c10 <_puts_r+0x40>
 8003c54:	f04f 35ff 	mov.w	r5, #4294967295
 8003c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c5a:	07da      	lsls	r2, r3, #31
 8003c5c:	d405      	bmi.n	8003c6a <_puts_r+0x9a>
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	059b      	lsls	r3, r3, #22
 8003c62:	d402      	bmi.n	8003c6a <_puts_r+0x9a>
 8003c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c66:	f000 fabe 	bl	80041e6 <__retarget_lock_release_recursive>
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	bd70      	pop	{r4, r5, r6, pc}
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da04      	bge.n	8003c7c <_puts_r+0xac>
 8003c72:	69a2      	ldr	r2, [r4, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dc06      	bgt.n	8003c86 <_puts_r+0xb6>
 8003c78:	290a      	cmp	r1, #10
 8003c7a:	d004      	beq.n	8003c86 <_puts_r+0xb6>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	6022      	str	r2, [r4, #0]
 8003c82:	7019      	strb	r1, [r3, #0]
 8003c84:	e7c5      	b.n	8003c12 <_puts_r+0x42>
 8003c86:	4622      	mov	r2, r4
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f000 f837 	bl	8003cfc <__swbuf_r>
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d1bf      	bne.n	8003c12 <_puts_r+0x42>
 8003c92:	e7df      	b.n	8003c54 <_puts_r+0x84>
 8003c94:	250a      	movs	r5, #10
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	701d      	strb	r5, [r3, #0]
 8003c9e:	e7db      	b.n	8003c58 <_puts_r+0x88>
 8003ca0:	08005098 	.word	0x08005098
 8003ca4:	080050b8 	.word	0x080050b8
 8003ca8:	08005078 	.word	0x08005078

08003cac <puts>:
 8003cac:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <puts+0xc>)
 8003cae:	4601      	mov	r1, r0
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	f7ff bf8d 	b.w	8003bd0 <_puts_r>
 8003cb6:	bf00      	nop
 8003cb8:	2000000c 	.word	0x2000000c

08003cbc <siprintf>:
 8003cbc:	b40e      	push	{r1, r2, r3}
 8003cbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cc2:	b500      	push	{lr}
 8003cc4:	b09c      	sub	sp, #112	; 0x70
 8003cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003cc8:	9002      	str	r0, [sp, #8]
 8003cca:	9006      	str	r0, [sp, #24]
 8003ccc:	9107      	str	r1, [sp, #28]
 8003cce:	9104      	str	r1, [sp, #16]
 8003cd0:	4808      	ldr	r0, [pc, #32]	; (8003cf4 <siprintf+0x38>)
 8003cd2:	4909      	ldr	r1, [pc, #36]	; (8003cf8 <siprintf+0x3c>)
 8003cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cd8:	9105      	str	r1, [sp, #20]
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	a902      	add	r1, sp, #8
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	f000 fc20 	bl	8004524 <_svfiprintf_r>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	9b02      	ldr	r3, [sp, #8]
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	b01c      	add	sp, #112	; 0x70
 8003cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf0:	b003      	add	sp, #12
 8003cf2:	4770      	bx	lr
 8003cf4:	2000000c 	.word	0x2000000c
 8003cf8:	ffff0208 	.word	0xffff0208

08003cfc <__swbuf_r>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	460e      	mov	r6, r1
 8003d00:	4614      	mov	r4, r2
 8003d02:	4605      	mov	r5, r0
 8003d04:	b118      	cbz	r0, 8003d0e <__swbuf_r+0x12>
 8003d06:	6983      	ldr	r3, [r0, #24]
 8003d08:	b90b      	cbnz	r3, 8003d0e <__swbuf_r+0x12>
 8003d0a:	f000 f9cd 	bl	80040a8 <__sinit>
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <__swbuf_r+0x98>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d12b      	bne.n	8003d6c <__swbuf_r+0x70>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	69a3      	ldr	r3, [r4, #24]
 8003d18:	60a3      	str	r3, [r4, #8]
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	071a      	lsls	r2, r3, #28
 8003d1e:	d52f      	bpl.n	8003d80 <__swbuf_r+0x84>
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	b36b      	cbz	r3, 8003d80 <__swbuf_r+0x84>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	b2f6      	uxtb	r6, r6
 8003d2a:	1ac0      	subs	r0, r0, r3
 8003d2c:	6963      	ldr	r3, [r4, #20]
 8003d2e:	4637      	mov	r7, r6
 8003d30:	4283      	cmp	r3, r0
 8003d32:	dc04      	bgt.n	8003d3e <__swbuf_r+0x42>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f922 	bl	8003f80 <_fflush_r>
 8003d3c:	bb30      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	3001      	adds	r0, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	701e      	strb	r6, [r3, #0]
 8003d4e:	6963      	ldr	r3, [r4, #20]
 8003d50:	4283      	cmp	r3, r0
 8003d52:	d004      	beq.n	8003d5e <__swbuf_r+0x62>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d506      	bpl.n	8003d68 <__swbuf_r+0x6c>
 8003d5a:	2e0a      	cmp	r6, #10
 8003d5c:	d104      	bne.n	8003d68 <__swbuf_r+0x6c>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 f90d 	bl	8003f80 <_fflush_r>
 8003d66:	b988      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d68:	4638      	mov	r0, r7
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <__swbuf_r+0x9c>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d101      	bne.n	8003d76 <__swbuf_r+0x7a>
 8003d72:	68ac      	ldr	r4, [r5, #8]
 8003d74:	e7cf      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <__swbuf_r+0xa0>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	bf08      	it	eq
 8003d7c:	68ec      	ldreq	r4, [r5, #12]
 8003d7e:	e7ca      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f80c 	bl	8003da0 <__swsetup_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d0cb      	beq.n	8003d24 <__swbuf_r+0x28>
 8003d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d90:	e7ea      	b.n	8003d68 <__swbuf_r+0x6c>
 8003d92:	bf00      	nop
 8003d94:	08005098 	.word	0x08005098
 8003d98:	080050b8 	.word	0x080050b8
 8003d9c:	08005078 	.word	0x08005078

08003da0 <__swsetup_r>:
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <__swsetup_r+0xcc>)
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	b125      	cbz	r5, 8003db6 <__swsetup_r+0x16>
 8003dac:	69ab      	ldr	r3, [r5, #24]
 8003dae:	b913      	cbnz	r3, 8003db6 <__swsetup_r+0x16>
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f979 	bl	80040a8 <__sinit>
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <__swsetup_r+0xd0>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d10f      	bne.n	8003ddc <__swsetup_r+0x3c>
 8003dbc:	686c      	ldr	r4, [r5, #4]
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dc4:	0719      	lsls	r1, r3, #28
 8003dc6:	d42c      	bmi.n	8003e22 <__swsetup_r+0x82>
 8003dc8:	06dd      	lsls	r5, r3, #27
 8003dca:	d411      	bmi.n	8003df0 <__swsetup_r+0x50>
 8003dcc:	2309      	movs	r3, #9
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	e03e      	b.n	8003e5a <__swsetup_r+0xba>
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <__swsetup_r+0xd4>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	d101      	bne.n	8003de6 <__swsetup_r+0x46>
 8003de2:	68ac      	ldr	r4, [r5, #8]
 8003de4:	e7eb      	b.n	8003dbe <__swsetup_r+0x1e>
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <__swsetup_r+0xd8>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	bf08      	it	eq
 8003dec:	68ec      	ldreq	r4, [r5, #12]
 8003dee:	e7e6      	b.n	8003dbe <__swsetup_r+0x1e>
 8003df0:	0758      	lsls	r0, r3, #29
 8003df2:	d512      	bpl.n	8003e1a <__swsetup_r+0x7a>
 8003df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003df6:	b141      	cbz	r1, 8003e0a <__swsetup_r+0x6a>
 8003df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	d002      	beq.n	8003e06 <__swsetup_r+0x66>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 fa57 	bl	80042b4 <_free_r>
 8003e06:	2300      	movs	r3, #0
 8003e08:	6363      	str	r3, [r4, #52]	; 0x34
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0308 	orr.w	r3, r3, #8
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	b94b      	cbnz	r3, 8003e3a <__swsetup_r+0x9a>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d003      	beq.n	8003e3a <__swsetup_r+0x9a>
 8003e32:	4621      	mov	r1, r4
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 f9fd 	bl	8004234 <__smakebuf_r>
 8003e3a:	89a0      	ldrh	r0, [r4, #12]
 8003e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e40:	f010 0301 	ands.w	r3, r0, #1
 8003e44:	d00a      	beq.n	8003e5c <__swsetup_r+0xbc>
 8003e46:	2300      	movs	r3, #0
 8003e48:	60a3      	str	r3, [r4, #8]
 8003e4a:	6963      	ldr	r3, [r4, #20]
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	61a3      	str	r3, [r4, #24]
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	b943      	cbnz	r3, 8003e66 <__swsetup_r+0xc6>
 8003e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e58:	d1ba      	bne.n	8003dd0 <__swsetup_r+0x30>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	0781      	lsls	r1, r0, #30
 8003e5e:	bf58      	it	pl
 8003e60:	6963      	ldrpl	r3, [r4, #20]
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	e7f4      	b.n	8003e50 <__swsetup_r+0xb0>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e7f7      	b.n	8003e5a <__swsetup_r+0xba>
 8003e6a:	bf00      	nop
 8003e6c:	2000000c 	.word	0x2000000c
 8003e70:	08005098 	.word	0x08005098
 8003e74:	080050b8 	.word	0x080050b8
 8003e78:	08005078 	.word	0x08005078

08003e7c <__sflush_r>:
 8003e7c:	898a      	ldrh	r2, [r1, #12]
 8003e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e80:	4605      	mov	r5, r0
 8003e82:	0710      	lsls	r0, r2, #28
 8003e84:	460c      	mov	r4, r1
 8003e86:	d457      	bmi.n	8003f38 <__sflush_r+0xbc>
 8003e88:	684b      	ldr	r3, [r1, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dc04      	bgt.n	8003e98 <__sflush_r+0x1c>
 8003e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	dc01      	bgt.n	8003e98 <__sflush_r+0x1c>
 8003e94:	2000      	movs	r0, #0
 8003e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9a:	2e00      	cmp	r6, #0
 8003e9c:	d0fa      	beq.n	8003e94 <__sflush_r+0x18>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ea4:	682f      	ldr	r7, [r5, #0]
 8003ea6:	602b      	str	r3, [r5, #0]
 8003ea8:	d032      	beq.n	8003f10 <__sflush_r+0x94>
 8003eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	075a      	lsls	r2, r3, #29
 8003eb0:	d505      	bpl.n	8003ebe <__sflush_r+0x42>
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	1ac0      	subs	r0, r0, r3
 8003eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eb8:	b10b      	cbz	r3, 8003ebe <__sflush_r+0x42>
 8003eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ebc:	1ac0      	subs	r0, r0, r3
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	47b0      	blx	r6
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	d106      	bne.n	8003ede <__sflush_r+0x62>
 8003ed0:	6829      	ldr	r1, [r5, #0]
 8003ed2:	291d      	cmp	r1, #29
 8003ed4:	d82c      	bhi.n	8003f30 <__sflush_r+0xb4>
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <__sflush_r+0x100>)
 8003ed8:	40ca      	lsrs	r2, r1
 8003eda:	07d6      	lsls	r6, r2, #31
 8003edc:	d528      	bpl.n	8003f30 <__sflush_r+0xb4>
 8003ede:	2200      	movs	r2, #0
 8003ee0:	6062      	str	r2, [r4, #4]
 8003ee2:	6922      	ldr	r2, [r4, #16]
 8003ee4:	04d9      	lsls	r1, r3, #19
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	d504      	bpl.n	8003ef4 <__sflush_r+0x78>
 8003eea:	1c42      	adds	r2, r0, #1
 8003eec:	d101      	bne.n	8003ef2 <__sflush_r+0x76>
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	b903      	cbnz	r3, 8003ef4 <__sflush_r+0x78>
 8003ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ef6:	602f      	str	r7, [r5, #0]
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d0cb      	beq.n	8003e94 <__sflush_r+0x18>
 8003efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d002      	beq.n	8003f0a <__sflush_r+0x8e>
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 f9d5 	bl	80042b4 <_free_r>
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f0e:	e7c2      	b.n	8003e96 <__sflush_r+0x1a>
 8003f10:	6a21      	ldr	r1, [r4, #32]
 8003f12:	2301      	movs	r3, #1
 8003f14:	4628      	mov	r0, r5
 8003f16:	47b0      	blx	r6
 8003f18:	1c41      	adds	r1, r0, #1
 8003f1a:	d1c7      	bne.n	8003eac <__sflush_r+0x30>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0c4      	beq.n	8003eac <__sflush_r+0x30>
 8003f22:	2b1d      	cmp	r3, #29
 8003f24:	d001      	beq.n	8003f2a <__sflush_r+0xae>
 8003f26:	2b16      	cmp	r3, #22
 8003f28:	d101      	bne.n	8003f2e <__sflush_r+0xb2>
 8003f2a:	602f      	str	r7, [r5, #0]
 8003f2c:	e7b2      	b.n	8003e94 <__sflush_r+0x18>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	e7ae      	b.n	8003e96 <__sflush_r+0x1a>
 8003f38:	690f      	ldr	r7, [r1, #16]
 8003f3a:	2f00      	cmp	r7, #0
 8003f3c:	d0aa      	beq.n	8003e94 <__sflush_r+0x18>
 8003f3e:	0793      	lsls	r3, r2, #30
 8003f40:	bf18      	it	ne
 8003f42:	2300      	movne	r3, #0
 8003f44:	680e      	ldr	r6, [r1, #0]
 8003f46:	bf08      	it	eq
 8003f48:	694b      	ldreq	r3, [r1, #20]
 8003f4a:	1bf6      	subs	r6, r6, r7
 8003f4c:	600f      	str	r7, [r1, #0]
 8003f4e:	608b      	str	r3, [r1, #8]
 8003f50:	2e00      	cmp	r6, #0
 8003f52:	dd9f      	ble.n	8003e94 <__sflush_r+0x18>
 8003f54:	4633      	mov	r3, r6
 8003f56:	463a      	mov	r2, r7
 8003f58:	4628      	mov	r0, r5
 8003f5a:	6a21      	ldr	r1, [r4, #32]
 8003f5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f60:	47e0      	blx	ip
 8003f62:	2800      	cmp	r0, #0
 8003f64:	dc06      	bgt.n	8003f74 <__sflush_r+0xf8>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	e790      	b.n	8003e96 <__sflush_r+0x1a>
 8003f74:	4407      	add	r7, r0
 8003f76:	1a36      	subs	r6, r6, r0
 8003f78:	e7ea      	b.n	8003f50 <__sflush_r+0xd4>
 8003f7a:	bf00      	nop
 8003f7c:	20400001 	.word	0x20400001

08003f80 <_fflush_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	690b      	ldr	r3, [r1, #16]
 8003f84:	4605      	mov	r5, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	b913      	cbnz	r3, 8003f90 <_fflush_r+0x10>
 8003f8a:	2500      	movs	r5, #0
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	b118      	cbz	r0, 8003f9a <_fflush_r+0x1a>
 8003f92:	6983      	ldr	r3, [r0, #24]
 8003f94:	b90b      	cbnz	r3, 8003f9a <_fflush_r+0x1a>
 8003f96:	f000 f887 	bl	80040a8 <__sinit>
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <_fflush_r+0x6c>)
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	d11b      	bne.n	8003fd8 <_fflush_r+0x58>
 8003fa0:	686c      	ldr	r4, [r5, #4]
 8003fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <_fflush_r+0xa>
 8003faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fac:	07d0      	lsls	r0, r2, #31
 8003fae:	d404      	bmi.n	8003fba <_fflush_r+0x3a>
 8003fb0:	0599      	lsls	r1, r3, #22
 8003fb2:	d402      	bmi.n	8003fba <_fflush_r+0x3a>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb6:	f000 f915 	bl	80041e4 <__retarget_lock_acquire_recursive>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	f7ff ff5d 	bl	8003e7c <__sflush_r>
 8003fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	07da      	lsls	r2, r3, #31
 8003fc8:	d4e0      	bmi.n	8003f8c <_fflush_r+0xc>
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	059b      	lsls	r3, r3, #22
 8003fce:	d4dd      	bmi.n	8003f8c <_fflush_r+0xc>
 8003fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fd2:	f000 f908 	bl	80041e6 <__retarget_lock_release_recursive>
 8003fd6:	e7d9      	b.n	8003f8c <_fflush_r+0xc>
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <_fflush_r+0x70>)
 8003fda:	429c      	cmp	r4, r3
 8003fdc:	d101      	bne.n	8003fe2 <_fflush_r+0x62>
 8003fde:	68ac      	ldr	r4, [r5, #8]
 8003fe0:	e7df      	b.n	8003fa2 <_fflush_r+0x22>
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <_fflush_r+0x74>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	bf08      	it	eq
 8003fe8:	68ec      	ldreq	r4, [r5, #12]
 8003fea:	e7da      	b.n	8003fa2 <_fflush_r+0x22>
 8003fec:	08005098 	.word	0x08005098
 8003ff0:	080050b8 	.word	0x080050b8
 8003ff4:	08005078 	.word	0x08005078

08003ff8 <std>:
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8004002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004006:	6083      	str	r3, [r0, #8]
 8004008:	8181      	strh	r1, [r0, #12]
 800400a:	6643      	str	r3, [r0, #100]	; 0x64
 800400c:	81c2      	strh	r2, [r0, #14]
 800400e:	6183      	str	r3, [r0, #24]
 8004010:	4619      	mov	r1, r3
 8004012:	2208      	movs	r2, #8
 8004014:	305c      	adds	r0, #92	; 0x5c
 8004016:	f7ff fdbb 	bl	8003b90 <memset>
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <std+0x38>)
 800401c:	6224      	str	r4, [r4, #32]
 800401e:	6263      	str	r3, [r4, #36]	; 0x24
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <std+0x3c>)
 8004022:	62a3      	str	r3, [r4, #40]	; 0x28
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <std+0x40>)
 8004026:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <std+0x44>)
 800402a:	6323      	str	r3, [r4, #48]	; 0x30
 800402c:	bd10      	pop	{r4, pc}
 800402e:	bf00      	nop
 8004030:	08004d21 	.word	0x08004d21
 8004034:	08004d43 	.word	0x08004d43
 8004038:	08004d7b 	.word	0x08004d7b
 800403c:	08004d9f 	.word	0x08004d9f

08004040 <_cleanup_r>:
 8004040:	4901      	ldr	r1, [pc, #4]	; (8004048 <_cleanup_r+0x8>)
 8004042:	f000 b8af 	b.w	80041a4 <_fwalk_reent>
 8004046:	bf00      	nop
 8004048:	08003f81 	.word	0x08003f81

0800404c <__sfmoreglue>:
 800404c:	2268      	movs	r2, #104	; 0x68
 800404e:	b570      	push	{r4, r5, r6, lr}
 8004050:	1e4d      	subs	r5, r1, #1
 8004052:	4355      	muls	r5, r2
 8004054:	460e      	mov	r6, r1
 8004056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800405a:	f000 f993 	bl	8004384 <_malloc_r>
 800405e:	4604      	mov	r4, r0
 8004060:	b140      	cbz	r0, 8004074 <__sfmoreglue+0x28>
 8004062:	2100      	movs	r1, #0
 8004064:	e9c0 1600 	strd	r1, r6, [r0]
 8004068:	300c      	adds	r0, #12
 800406a:	60a0      	str	r0, [r4, #8]
 800406c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004070:	f7ff fd8e 	bl	8003b90 <memset>
 8004074:	4620      	mov	r0, r4
 8004076:	bd70      	pop	{r4, r5, r6, pc}

08004078 <__sfp_lock_acquire>:
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <__sfp_lock_acquire+0x8>)
 800407a:	f000 b8b3 	b.w	80041e4 <__retarget_lock_acquire_recursive>
 800407e:	bf00      	nop
 8004080:	20000249 	.word	0x20000249

08004084 <__sfp_lock_release>:
 8004084:	4801      	ldr	r0, [pc, #4]	; (800408c <__sfp_lock_release+0x8>)
 8004086:	f000 b8ae 	b.w	80041e6 <__retarget_lock_release_recursive>
 800408a:	bf00      	nop
 800408c:	20000249 	.word	0x20000249

08004090 <__sinit_lock_acquire>:
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <__sinit_lock_acquire+0x8>)
 8004092:	f000 b8a7 	b.w	80041e4 <__retarget_lock_acquire_recursive>
 8004096:	bf00      	nop
 8004098:	2000024a 	.word	0x2000024a

0800409c <__sinit_lock_release>:
 800409c:	4801      	ldr	r0, [pc, #4]	; (80040a4 <__sinit_lock_release+0x8>)
 800409e:	f000 b8a2 	b.w	80041e6 <__retarget_lock_release_recursive>
 80040a2:	bf00      	nop
 80040a4:	2000024a 	.word	0x2000024a

080040a8 <__sinit>:
 80040a8:	b510      	push	{r4, lr}
 80040aa:	4604      	mov	r4, r0
 80040ac:	f7ff fff0 	bl	8004090 <__sinit_lock_acquire>
 80040b0:	69a3      	ldr	r3, [r4, #24]
 80040b2:	b11b      	cbz	r3, 80040bc <__sinit+0x14>
 80040b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b8:	f7ff bff0 	b.w	800409c <__sinit_lock_release>
 80040bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040c0:	6523      	str	r3, [r4, #80]	; 0x50
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <__sinit+0x68>)
 80040c4:	4a13      	ldr	r2, [pc, #76]	; (8004114 <__sinit+0x6c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80040ca:	42a3      	cmp	r3, r4
 80040cc:	bf08      	it	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	4620      	mov	r0, r4
 80040d2:	bf08      	it	eq
 80040d4:	61a3      	streq	r3, [r4, #24]
 80040d6:	f000 f81f 	bl	8004118 <__sfp>
 80040da:	6060      	str	r0, [r4, #4]
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 f81b 	bl	8004118 <__sfp>
 80040e2:	60a0      	str	r0, [r4, #8]
 80040e4:	4620      	mov	r0, r4
 80040e6:	f000 f817 	bl	8004118 <__sfp>
 80040ea:	2200      	movs	r2, #0
 80040ec:	2104      	movs	r1, #4
 80040ee:	60e0      	str	r0, [r4, #12]
 80040f0:	6860      	ldr	r0, [r4, #4]
 80040f2:	f7ff ff81 	bl	8003ff8 <std>
 80040f6:	2201      	movs	r2, #1
 80040f8:	2109      	movs	r1, #9
 80040fa:	68a0      	ldr	r0, [r4, #8]
 80040fc:	f7ff ff7c 	bl	8003ff8 <std>
 8004100:	2202      	movs	r2, #2
 8004102:	2112      	movs	r1, #18
 8004104:	68e0      	ldr	r0, [r4, #12]
 8004106:	f7ff ff77 	bl	8003ff8 <std>
 800410a:	2301      	movs	r3, #1
 800410c:	61a3      	str	r3, [r4, #24]
 800410e:	e7d1      	b.n	80040b4 <__sinit+0xc>
 8004110:	08005074 	.word	0x08005074
 8004114:	08004041 	.word	0x08004041

08004118 <__sfp>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	4607      	mov	r7, r0
 800411c:	f7ff ffac 	bl	8004078 <__sfp_lock_acquire>
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <__sfp+0x84>)
 8004122:	681e      	ldr	r6, [r3, #0]
 8004124:	69b3      	ldr	r3, [r6, #24]
 8004126:	b913      	cbnz	r3, 800412e <__sfp+0x16>
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff ffbd 	bl	80040a8 <__sinit>
 800412e:	3648      	adds	r6, #72	; 0x48
 8004130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004134:	3b01      	subs	r3, #1
 8004136:	d503      	bpl.n	8004140 <__sfp+0x28>
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	b30b      	cbz	r3, 8004180 <__sfp+0x68>
 800413c:	6836      	ldr	r6, [r6, #0]
 800413e:	e7f7      	b.n	8004130 <__sfp+0x18>
 8004140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004144:	b9d5      	cbnz	r5, 800417c <__sfp+0x64>
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <__sfp+0x88>)
 8004148:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800414c:	60e3      	str	r3, [r4, #12]
 800414e:	6665      	str	r5, [r4, #100]	; 0x64
 8004150:	f000 f847 	bl	80041e2 <__retarget_lock_init_recursive>
 8004154:	f7ff ff96 	bl	8004084 <__sfp_lock_release>
 8004158:	2208      	movs	r2, #8
 800415a:	4629      	mov	r1, r5
 800415c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004164:	6025      	str	r5, [r4, #0]
 8004166:	61a5      	str	r5, [r4, #24]
 8004168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800416c:	f7ff fd10 	bl	8003b90 <memset>
 8004170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004178:	4620      	mov	r0, r4
 800417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417c:	3468      	adds	r4, #104	; 0x68
 800417e:	e7d9      	b.n	8004134 <__sfp+0x1c>
 8004180:	2104      	movs	r1, #4
 8004182:	4638      	mov	r0, r7
 8004184:	f7ff ff62 	bl	800404c <__sfmoreglue>
 8004188:	4604      	mov	r4, r0
 800418a:	6030      	str	r0, [r6, #0]
 800418c:	2800      	cmp	r0, #0
 800418e:	d1d5      	bne.n	800413c <__sfp+0x24>
 8004190:	f7ff ff78 	bl	8004084 <__sfp_lock_release>
 8004194:	230c      	movs	r3, #12
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	e7ee      	b.n	8004178 <__sfp+0x60>
 800419a:	bf00      	nop
 800419c:	08005074 	.word	0x08005074
 80041a0:	ffff0001 	.word	0xffff0001

080041a4 <_fwalk_reent>:
 80041a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a8:	4606      	mov	r6, r0
 80041aa:	4688      	mov	r8, r1
 80041ac:	2700      	movs	r7, #0
 80041ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b6:	f1b9 0901 	subs.w	r9, r9, #1
 80041ba:	d505      	bpl.n	80041c8 <_fwalk_reent+0x24>
 80041bc:	6824      	ldr	r4, [r4, #0]
 80041be:	2c00      	cmp	r4, #0
 80041c0:	d1f7      	bne.n	80041b2 <_fwalk_reent+0xe>
 80041c2:	4638      	mov	r0, r7
 80041c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c8:	89ab      	ldrh	r3, [r5, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d907      	bls.n	80041de <_fwalk_reent+0x3a>
 80041ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041d2:	3301      	adds	r3, #1
 80041d4:	d003      	beq.n	80041de <_fwalk_reent+0x3a>
 80041d6:	4629      	mov	r1, r5
 80041d8:	4630      	mov	r0, r6
 80041da:	47c0      	blx	r8
 80041dc:	4307      	orrs	r7, r0
 80041de:	3568      	adds	r5, #104	; 0x68
 80041e0:	e7e9      	b.n	80041b6 <_fwalk_reent+0x12>

080041e2 <__retarget_lock_init_recursive>:
 80041e2:	4770      	bx	lr

080041e4 <__retarget_lock_acquire_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_release_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <__swhatbuf_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	460e      	mov	r6, r1
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	4614      	mov	r4, r2
 80041f2:	2900      	cmp	r1, #0
 80041f4:	461d      	mov	r5, r3
 80041f6:	b096      	sub	sp, #88	; 0x58
 80041f8:	da08      	bge.n	800420c <__swhatbuf_r+0x24>
 80041fa:	2200      	movs	r2, #0
 80041fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004200:	602a      	str	r2, [r5, #0]
 8004202:	061a      	lsls	r2, r3, #24
 8004204:	d410      	bmi.n	8004228 <__swhatbuf_r+0x40>
 8004206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800420a:	e00e      	b.n	800422a <__swhatbuf_r+0x42>
 800420c:	466a      	mov	r2, sp
 800420e:	f000 fded 	bl	8004dec <_fstat_r>
 8004212:	2800      	cmp	r0, #0
 8004214:	dbf1      	blt.n	80041fa <__swhatbuf_r+0x12>
 8004216:	9a01      	ldr	r2, [sp, #4]
 8004218:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800421c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004220:	425a      	negs	r2, r3
 8004222:	415a      	adcs	r2, r3
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	e7ee      	b.n	8004206 <__swhatbuf_r+0x1e>
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	2000      	movs	r0, #0
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	b016      	add	sp, #88	; 0x58
 8004230:	bd70      	pop	{r4, r5, r6, pc}
	...

08004234 <__smakebuf_r>:
 8004234:	898b      	ldrh	r3, [r1, #12]
 8004236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004238:	079d      	lsls	r5, r3, #30
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	d507      	bpl.n	8004250 <__smakebuf_r+0x1c>
 8004240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	2301      	movs	r3, #1
 800424a:	6163      	str	r3, [r4, #20]
 800424c:	b002      	add	sp, #8
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	466a      	mov	r2, sp
 8004252:	ab01      	add	r3, sp, #4
 8004254:	f7ff ffc8 	bl	80041e8 <__swhatbuf_r>
 8004258:	9900      	ldr	r1, [sp, #0]
 800425a:	4605      	mov	r5, r0
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f891 	bl	8004384 <_malloc_r>
 8004262:	b948      	cbnz	r0, 8004278 <__smakebuf_r+0x44>
 8004264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004268:	059a      	lsls	r2, r3, #22
 800426a:	d4ef      	bmi.n	800424c <__smakebuf_r+0x18>
 800426c:	f023 0303 	bic.w	r3, r3, #3
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e7e3      	b.n	8004240 <__smakebuf_r+0xc>
 8004278:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <__smakebuf_r+0x7c>)
 800427a:	62b3      	str	r3, [r6, #40]	; 0x28
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	6020      	str	r0, [r4, #0]
 8004280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004284:	81a3      	strh	r3, [r4, #12]
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	6120      	str	r0, [r4, #16]
 800428a:	6163      	str	r3, [r4, #20]
 800428c:	9b01      	ldr	r3, [sp, #4]
 800428e:	b15b      	cbz	r3, 80042a8 <__smakebuf_r+0x74>
 8004290:	4630      	mov	r0, r6
 8004292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004296:	f000 fdbb 	bl	8004e10 <_isatty_r>
 800429a:	b128      	cbz	r0, 80042a8 <__smakebuf_r+0x74>
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	89a0      	ldrh	r0, [r4, #12]
 80042aa:	4305      	orrs	r5, r0
 80042ac:	81a5      	strh	r5, [r4, #12]
 80042ae:	e7cd      	b.n	800424c <__smakebuf_r+0x18>
 80042b0:	08004041 	.word	0x08004041

080042b4 <_free_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4605      	mov	r5, r0
 80042b8:	2900      	cmp	r1, #0
 80042ba:	d040      	beq.n	800433e <_free_r+0x8a>
 80042bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c0:	1f0c      	subs	r4, r1, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	18e4      	addlt	r4, r4, r3
 80042c8:	f000 fdfa 	bl	8004ec0 <__malloc_lock>
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <_free_r+0x8c>)
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	b933      	cbnz	r3, 80042e0 <_free_r+0x2c>
 80042d2:	6063      	str	r3, [r4, #4]
 80042d4:	6014      	str	r4, [r2, #0]
 80042d6:	4628      	mov	r0, r5
 80042d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042dc:	f000 bdf6 	b.w	8004ecc <__malloc_unlock>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d908      	bls.n	80042f6 <_free_r+0x42>
 80042e4:	6820      	ldr	r0, [r4, #0]
 80042e6:	1821      	adds	r1, r4, r0
 80042e8:	428b      	cmp	r3, r1
 80042ea:	bf01      	itttt	eq
 80042ec:	6819      	ldreq	r1, [r3, #0]
 80042ee:	685b      	ldreq	r3, [r3, #4]
 80042f0:	1809      	addeq	r1, r1, r0
 80042f2:	6021      	streq	r1, [r4, #0]
 80042f4:	e7ed      	b.n	80042d2 <_free_r+0x1e>
 80042f6:	461a      	mov	r2, r3
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	b10b      	cbz	r3, 8004300 <_free_r+0x4c>
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d9fa      	bls.n	80042f6 <_free_r+0x42>
 8004300:	6811      	ldr	r1, [r2, #0]
 8004302:	1850      	adds	r0, r2, r1
 8004304:	42a0      	cmp	r0, r4
 8004306:	d10b      	bne.n	8004320 <_free_r+0x6c>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	4401      	add	r1, r0
 800430c:	1850      	adds	r0, r2, r1
 800430e:	4283      	cmp	r3, r0
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	d1e0      	bne.n	80042d6 <_free_r+0x22>
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4401      	add	r1, r0
 800431a:	6011      	str	r1, [r2, #0]
 800431c:	6053      	str	r3, [r2, #4]
 800431e:	e7da      	b.n	80042d6 <_free_r+0x22>
 8004320:	d902      	bls.n	8004328 <_free_r+0x74>
 8004322:	230c      	movs	r3, #12
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	e7d6      	b.n	80042d6 <_free_r+0x22>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	1821      	adds	r1, r4, r0
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	6054      	str	r4, [r2, #4]
 800433c:	e7cb      	b.n	80042d6 <_free_r+0x22>
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	2000024c 	.word	0x2000024c

08004344 <sbrk_aligned>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	4e0e      	ldr	r6, [pc, #56]	; (8004380 <sbrk_aligned+0x3c>)
 8004348:	460c      	mov	r4, r1
 800434a:	6831      	ldr	r1, [r6, #0]
 800434c:	4605      	mov	r5, r0
 800434e:	b911      	cbnz	r1, 8004356 <sbrk_aligned+0x12>
 8004350:	f000 fcd6 	bl	8004d00 <_sbrk_r>
 8004354:	6030      	str	r0, [r6, #0]
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	f000 fcd1 	bl	8004d00 <_sbrk_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	d00a      	beq.n	8004378 <sbrk_aligned+0x34>
 8004362:	1cc4      	adds	r4, r0, #3
 8004364:	f024 0403 	bic.w	r4, r4, #3
 8004368:	42a0      	cmp	r0, r4
 800436a:	d007      	beq.n	800437c <sbrk_aligned+0x38>
 800436c:	1a21      	subs	r1, r4, r0
 800436e:	4628      	mov	r0, r5
 8004370:	f000 fcc6 	bl	8004d00 <_sbrk_r>
 8004374:	3001      	adds	r0, #1
 8004376:	d101      	bne.n	800437c <sbrk_aligned+0x38>
 8004378:	f04f 34ff 	mov.w	r4, #4294967295
 800437c:	4620      	mov	r0, r4
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	20000250 	.word	0x20000250

08004384 <_malloc_r>:
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004388:	1ccd      	adds	r5, r1, #3
 800438a:	f025 0503 	bic.w	r5, r5, #3
 800438e:	3508      	adds	r5, #8
 8004390:	2d0c      	cmp	r5, #12
 8004392:	bf38      	it	cc
 8004394:	250c      	movcc	r5, #12
 8004396:	2d00      	cmp	r5, #0
 8004398:	4607      	mov	r7, r0
 800439a:	db01      	blt.n	80043a0 <_malloc_r+0x1c>
 800439c:	42a9      	cmp	r1, r5
 800439e:	d905      	bls.n	80043ac <_malloc_r+0x28>
 80043a0:	230c      	movs	r3, #12
 80043a2:	2600      	movs	r6, #0
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4630      	mov	r0, r6
 80043a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ac:	4e2e      	ldr	r6, [pc, #184]	; (8004468 <_malloc_r+0xe4>)
 80043ae:	f000 fd87 	bl	8004ec0 <__malloc_lock>
 80043b2:	6833      	ldr	r3, [r6, #0]
 80043b4:	461c      	mov	r4, r3
 80043b6:	bb34      	cbnz	r4, 8004406 <_malloc_r+0x82>
 80043b8:	4629      	mov	r1, r5
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7ff ffc2 	bl	8004344 <sbrk_aligned>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	4604      	mov	r4, r0
 80043c4:	d14d      	bne.n	8004462 <_malloc_r+0xde>
 80043c6:	6834      	ldr	r4, [r6, #0]
 80043c8:	4626      	mov	r6, r4
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	d140      	bne.n	8004450 <_malloc_r+0xcc>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	4631      	mov	r1, r6
 80043d2:	4638      	mov	r0, r7
 80043d4:	eb04 0803 	add.w	r8, r4, r3
 80043d8:	f000 fc92 	bl	8004d00 <_sbrk_r>
 80043dc:	4580      	cmp	r8, r0
 80043de:	d13a      	bne.n	8004456 <_malloc_r+0xd2>
 80043e0:	6821      	ldr	r1, [r4, #0]
 80043e2:	3503      	adds	r5, #3
 80043e4:	1a6d      	subs	r5, r5, r1
 80043e6:	f025 0503 	bic.w	r5, r5, #3
 80043ea:	3508      	adds	r5, #8
 80043ec:	2d0c      	cmp	r5, #12
 80043ee:	bf38      	it	cc
 80043f0:	250c      	movcc	r5, #12
 80043f2:	4638      	mov	r0, r7
 80043f4:	4629      	mov	r1, r5
 80043f6:	f7ff ffa5 	bl	8004344 <sbrk_aligned>
 80043fa:	3001      	adds	r0, #1
 80043fc:	d02b      	beq.n	8004456 <_malloc_r+0xd2>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	442b      	add	r3, r5
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	e00e      	b.n	8004424 <_malloc_r+0xa0>
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	1b52      	subs	r2, r2, r5
 800440a:	d41e      	bmi.n	800444a <_malloc_r+0xc6>
 800440c:	2a0b      	cmp	r2, #11
 800440e:	d916      	bls.n	800443e <_malloc_r+0xba>
 8004410:	1961      	adds	r1, r4, r5
 8004412:	42a3      	cmp	r3, r4
 8004414:	6025      	str	r5, [r4, #0]
 8004416:	bf18      	it	ne
 8004418:	6059      	strne	r1, [r3, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	bf08      	it	eq
 800441e:	6031      	streq	r1, [r6, #0]
 8004420:	5162      	str	r2, [r4, r5]
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	4638      	mov	r0, r7
 8004426:	f104 060b 	add.w	r6, r4, #11
 800442a:	f000 fd4f 	bl	8004ecc <__malloc_unlock>
 800442e:	f026 0607 	bic.w	r6, r6, #7
 8004432:	1d23      	adds	r3, r4, #4
 8004434:	1af2      	subs	r2, r6, r3
 8004436:	d0b6      	beq.n	80043a6 <_malloc_r+0x22>
 8004438:	1b9b      	subs	r3, r3, r6
 800443a:	50a3      	str	r3, [r4, r2]
 800443c:	e7b3      	b.n	80043a6 <_malloc_r+0x22>
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	42a3      	cmp	r3, r4
 8004442:	bf0c      	ite	eq
 8004444:	6032      	streq	r2, [r6, #0]
 8004446:	605a      	strne	r2, [r3, #4]
 8004448:	e7ec      	b.n	8004424 <_malloc_r+0xa0>
 800444a:	4623      	mov	r3, r4
 800444c:	6864      	ldr	r4, [r4, #4]
 800444e:	e7b2      	b.n	80043b6 <_malloc_r+0x32>
 8004450:	4634      	mov	r4, r6
 8004452:	6876      	ldr	r6, [r6, #4]
 8004454:	e7b9      	b.n	80043ca <_malloc_r+0x46>
 8004456:	230c      	movs	r3, #12
 8004458:	4638      	mov	r0, r7
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	f000 fd36 	bl	8004ecc <__malloc_unlock>
 8004460:	e7a1      	b.n	80043a6 <_malloc_r+0x22>
 8004462:	6025      	str	r5, [r4, #0]
 8004464:	e7de      	b.n	8004424 <_malloc_r+0xa0>
 8004466:	bf00      	nop
 8004468:	2000024c 	.word	0x2000024c

0800446c <__ssputs_r>:
 800446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	688e      	ldr	r6, [r1, #8]
 8004472:	4682      	mov	sl, r0
 8004474:	429e      	cmp	r6, r3
 8004476:	460c      	mov	r4, r1
 8004478:	4690      	mov	r8, r2
 800447a:	461f      	mov	r7, r3
 800447c:	d838      	bhi.n	80044f0 <__ssputs_r+0x84>
 800447e:	898a      	ldrh	r2, [r1, #12]
 8004480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004484:	d032      	beq.n	80044ec <__ssputs_r+0x80>
 8004486:	6825      	ldr	r5, [r4, #0]
 8004488:	6909      	ldr	r1, [r1, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	eba5 0901 	sub.w	r9, r5, r1
 8004490:	6965      	ldr	r5, [r4, #20]
 8004492:	444b      	add	r3, r9
 8004494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800449c:	106d      	asrs	r5, r5, #1
 800449e:	429d      	cmp	r5, r3
 80044a0:	bf38      	it	cc
 80044a2:	461d      	movcc	r5, r3
 80044a4:	0553      	lsls	r3, r2, #21
 80044a6:	d531      	bpl.n	800450c <__ssputs_r+0xa0>
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7ff ff6b 	bl	8004384 <_malloc_r>
 80044ae:	4606      	mov	r6, r0
 80044b0:	b950      	cbnz	r0, 80044c8 <__ssputs_r+0x5c>
 80044b2:	230c      	movs	r3, #12
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	f8ca 3000 	str.w	r3, [sl]
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c8:	464a      	mov	r2, r9
 80044ca:	6921      	ldr	r1, [r4, #16]
 80044cc:	f000 fcd0 	bl	8004e70 <memcpy>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	6126      	str	r6, [r4, #16]
 80044de:	444e      	add	r6, r9
 80044e0:	6026      	str	r6, [r4, #0]
 80044e2:	463e      	mov	r6, r7
 80044e4:	6165      	str	r5, [r4, #20]
 80044e6:	eba5 0509 	sub.w	r5, r5, r9
 80044ea:	60a5      	str	r5, [r4, #8]
 80044ec:	42be      	cmp	r6, r7
 80044ee:	d900      	bls.n	80044f2 <__ssputs_r+0x86>
 80044f0:	463e      	mov	r6, r7
 80044f2:	4632      	mov	r2, r6
 80044f4:	4641      	mov	r1, r8
 80044f6:	6820      	ldr	r0, [r4, #0]
 80044f8:	f000 fcc8 	bl	8004e8c <memmove>
 80044fc:	68a3      	ldr	r3, [r4, #8]
 80044fe:	2000      	movs	r0, #0
 8004500:	1b9b      	subs	r3, r3, r6
 8004502:	60a3      	str	r3, [r4, #8]
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	4433      	add	r3, r6
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	e7db      	b.n	80044c4 <__ssputs_r+0x58>
 800450c:	462a      	mov	r2, r5
 800450e:	f000 fce3 	bl	8004ed8 <_realloc_r>
 8004512:	4606      	mov	r6, r0
 8004514:	2800      	cmp	r0, #0
 8004516:	d1e1      	bne.n	80044dc <__ssputs_r+0x70>
 8004518:	4650      	mov	r0, sl
 800451a:	6921      	ldr	r1, [r4, #16]
 800451c:	f7ff feca 	bl	80042b4 <_free_r>
 8004520:	e7c7      	b.n	80044b2 <__ssputs_r+0x46>
	...

08004524 <_svfiprintf_r>:
 8004524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	4698      	mov	r8, r3
 800452a:	898b      	ldrh	r3, [r1, #12]
 800452c:	4607      	mov	r7, r0
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	460d      	mov	r5, r1
 8004532:	4614      	mov	r4, r2
 8004534:	b09d      	sub	sp, #116	; 0x74
 8004536:	d50e      	bpl.n	8004556 <_svfiprintf_r+0x32>
 8004538:	690b      	ldr	r3, [r1, #16]
 800453a:	b963      	cbnz	r3, 8004556 <_svfiprintf_r+0x32>
 800453c:	2140      	movs	r1, #64	; 0x40
 800453e:	f7ff ff21 	bl	8004384 <_malloc_r>
 8004542:	6028      	str	r0, [r5, #0]
 8004544:	6128      	str	r0, [r5, #16]
 8004546:	b920      	cbnz	r0, 8004552 <_svfiprintf_r+0x2e>
 8004548:	230c      	movs	r3, #12
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	e0d1      	b.n	80046f6 <_svfiprintf_r+0x1d2>
 8004552:	2340      	movs	r3, #64	; 0x40
 8004554:	616b      	str	r3, [r5, #20]
 8004556:	2300      	movs	r3, #0
 8004558:	9309      	str	r3, [sp, #36]	; 0x24
 800455a:	2320      	movs	r3, #32
 800455c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004560:	2330      	movs	r3, #48	; 0x30
 8004562:	f04f 0901 	mov.w	r9, #1
 8004566:	f8cd 800c 	str.w	r8, [sp, #12]
 800456a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004710 <_svfiprintf_r+0x1ec>
 800456e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004572:	4623      	mov	r3, r4
 8004574:	469a      	mov	sl, r3
 8004576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800457a:	b10a      	cbz	r2, 8004580 <_svfiprintf_r+0x5c>
 800457c:	2a25      	cmp	r2, #37	; 0x25
 800457e:	d1f9      	bne.n	8004574 <_svfiprintf_r+0x50>
 8004580:	ebba 0b04 	subs.w	fp, sl, r4
 8004584:	d00b      	beq.n	800459e <_svfiprintf_r+0x7a>
 8004586:	465b      	mov	r3, fp
 8004588:	4622      	mov	r2, r4
 800458a:	4629      	mov	r1, r5
 800458c:	4638      	mov	r0, r7
 800458e:	f7ff ff6d 	bl	800446c <__ssputs_r>
 8004592:	3001      	adds	r0, #1
 8004594:	f000 80aa 	beq.w	80046ec <_svfiprintf_r+0x1c8>
 8004598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459a:	445a      	add	r2, fp
 800459c:	9209      	str	r2, [sp, #36]	; 0x24
 800459e:	f89a 3000 	ldrb.w	r3, [sl]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80a2 	beq.w	80046ec <_svfiprintf_r+0x1c8>
 80045a8:	2300      	movs	r3, #0
 80045aa:	f04f 32ff 	mov.w	r2, #4294967295
 80045ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b2:	f10a 0a01 	add.w	sl, sl, #1
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	9307      	str	r3, [sp, #28]
 80045ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045be:	931a      	str	r3, [sp, #104]	; 0x68
 80045c0:	4654      	mov	r4, sl
 80045c2:	2205      	movs	r2, #5
 80045c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c8:	4851      	ldr	r0, [pc, #324]	; (8004710 <_svfiprintf_r+0x1ec>)
 80045ca:	f000 fc43 	bl	8004e54 <memchr>
 80045ce:	9a04      	ldr	r2, [sp, #16]
 80045d0:	b9d8      	cbnz	r0, 800460a <_svfiprintf_r+0xe6>
 80045d2:	06d0      	lsls	r0, r2, #27
 80045d4:	bf44      	itt	mi
 80045d6:	2320      	movmi	r3, #32
 80045d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045dc:	0711      	lsls	r1, r2, #28
 80045de:	bf44      	itt	mi
 80045e0:	232b      	movmi	r3, #43	; 0x2b
 80045e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ea:	2b2a      	cmp	r3, #42	; 0x2a
 80045ec:	d015      	beq.n	800461a <_svfiprintf_r+0xf6>
 80045ee:	4654      	mov	r4, sl
 80045f0:	2000      	movs	r0, #0
 80045f2:	f04f 0c0a 	mov.w	ip, #10
 80045f6:	9a07      	ldr	r2, [sp, #28]
 80045f8:	4621      	mov	r1, r4
 80045fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045fe:	3b30      	subs	r3, #48	; 0x30
 8004600:	2b09      	cmp	r3, #9
 8004602:	d94e      	bls.n	80046a2 <_svfiprintf_r+0x17e>
 8004604:	b1b0      	cbz	r0, 8004634 <_svfiprintf_r+0x110>
 8004606:	9207      	str	r2, [sp, #28]
 8004608:	e014      	b.n	8004634 <_svfiprintf_r+0x110>
 800460a:	eba0 0308 	sub.w	r3, r0, r8
 800460e:	fa09 f303 	lsl.w	r3, r9, r3
 8004612:	4313      	orrs	r3, r2
 8004614:	46a2      	mov	sl, r4
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	e7d2      	b.n	80045c0 <_svfiprintf_r+0x9c>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	1d19      	adds	r1, r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	9103      	str	r1, [sp, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbb      	ittet	lt
 8004626:	425b      	neglt	r3, r3
 8004628:	f042 0202 	orrlt.w	r2, r2, #2
 800462c:	9307      	strge	r3, [sp, #28]
 800462e:	9307      	strlt	r3, [sp, #28]
 8004630:	bfb8      	it	lt
 8004632:	9204      	strlt	r2, [sp, #16]
 8004634:	7823      	ldrb	r3, [r4, #0]
 8004636:	2b2e      	cmp	r3, #46	; 0x2e
 8004638:	d10c      	bne.n	8004654 <_svfiprintf_r+0x130>
 800463a:	7863      	ldrb	r3, [r4, #1]
 800463c:	2b2a      	cmp	r3, #42	; 0x2a
 800463e:	d135      	bne.n	80046ac <_svfiprintf_r+0x188>
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	3402      	adds	r4, #2
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	9203      	str	r2, [sp, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfb8      	it	lt
 800464e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004714 <_svfiprintf_r+0x1f0>
 8004658:	2203      	movs	r2, #3
 800465a:	4650      	mov	r0, sl
 800465c:	7821      	ldrb	r1, [r4, #0]
 800465e:	f000 fbf9 	bl	8004e54 <memchr>
 8004662:	b140      	cbz	r0, 8004676 <_svfiprintf_r+0x152>
 8004664:	2340      	movs	r3, #64	; 0x40
 8004666:	eba0 000a 	sub.w	r0, r0, sl
 800466a:	fa03 f000 	lsl.w	r0, r3, r0
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	3401      	adds	r4, #1
 8004672:	4303      	orrs	r3, r0
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467a:	2206      	movs	r2, #6
 800467c:	4826      	ldr	r0, [pc, #152]	; (8004718 <_svfiprintf_r+0x1f4>)
 800467e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004682:	f000 fbe7 	bl	8004e54 <memchr>
 8004686:	2800      	cmp	r0, #0
 8004688:	d038      	beq.n	80046fc <_svfiprintf_r+0x1d8>
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <_svfiprintf_r+0x1f8>)
 800468c:	bb1b      	cbnz	r3, 80046d6 <_svfiprintf_r+0x1b2>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	3307      	adds	r3, #7
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	3308      	adds	r3, #8
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469c:	4433      	add	r3, r6
 800469e:	9309      	str	r3, [sp, #36]	; 0x24
 80046a0:	e767      	b.n	8004572 <_svfiprintf_r+0x4e>
 80046a2:	460c      	mov	r4, r1
 80046a4:	2001      	movs	r0, #1
 80046a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80046aa:	e7a5      	b.n	80045f8 <_svfiprintf_r+0xd4>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f04f 0c0a 	mov.w	ip, #10
 80046b2:	4619      	mov	r1, r3
 80046b4:	3401      	adds	r4, #1
 80046b6:	9305      	str	r3, [sp, #20]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046be:	3a30      	subs	r2, #48	; 0x30
 80046c0:	2a09      	cmp	r2, #9
 80046c2:	d903      	bls.n	80046cc <_svfiprintf_r+0x1a8>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0c5      	beq.n	8004654 <_svfiprintf_r+0x130>
 80046c8:	9105      	str	r1, [sp, #20]
 80046ca:	e7c3      	b.n	8004654 <_svfiprintf_r+0x130>
 80046cc:	4604      	mov	r4, r0
 80046ce:	2301      	movs	r3, #1
 80046d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d4:	e7f0      	b.n	80046b8 <_svfiprintf_r+0x194>
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	462a      	mov	r2, r5
 80046dc:	4638      	mov	r0, r7
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <_svfiprintf_r+0x1fc>)
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	f3af 8000 	nop.w
 80046e6:	1c42      	adds	r2, r0, #1
 80046e8:	4606      	mov	r6, r0
 80046ea:	d1d6      	bne.n	800469a <_svfiprintf_r+0x176>
 80046ec:	89ab      	ldrh	r3, [r5, #12]
 80046ee:	065b      	lsls	r3, r3, #25
 80046f0:	f53f af2c 	bmi.w	800454c <_svfiprintf_r+0x28>
 80046f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f6:	b01d      	add	sp, #116	; 0x74
 80046f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fc:	ab03      	add	r3, sp, #12
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	462a      	mov	r2, r5
 8004702:	4638      	mov	r0, r7
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <_svfiprintf_r+0x1fc>)
 8004706:	a904      	add	r1, sp, #16
 8004708:	f000 f9d4 	bl	8004ab4 <_printf_i>
 800470c:	e7eb      	b.n	80046e6 <_svfiprintf_r+0x1c2>
 800470e:	bf00      	nop
 8004710:	080050d8 	.word	0x080050d8
 8004714:	080050de 	.word	0x080050de
 8004718:	080050e2 	.word	0x080050e2
 800471c:	00000000 	.word	0x00000000
 8004720:	0800446d 	.word	0x0800446d

08004724 <__sfputc_r>:
 8004724:	6893      	ldr	r3, [r2, #8]
 8004726:	b410      	push	{r4}
 8004728:	3b01      	subs	r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	6093      	str	r3, [r2, #8]
 800472e:	da07      	bge.n	8004740 <__sfputc_r+0x1c>
 8004730:	6994      	ldr	r4, [r2, #24]
 8004732:	42a3      	cmp	r3, r4
 8004734:	db01      	blt.n	800473a <__sfputc_r+0x16>
 8004736:	290a      	cmp	r1, #10
 8004738:	d102      	bne.n	8004740 <__sfputc_r+0x1c>
 800473a:	bc10      	pop	{r4}
 800473c:	f7ff bade 	b.w	8003cfc <__swbuf_r>
 8004740:	6813      	ldr	r3, [r2, #0]
 8004742:	1c58      	adds	r0, r3, #1
 8004744:	6010      	str	r0, [r2, #0]
 8004746:	7019      	strb	r1, [r3, #0]
 8004748:	4608      	mov	r0, r1
 800474a:	bc10      	pop	{r4}
 800474c:	4770      	bx	lr

0800474e <__sfputs_r>:
 800474e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004750:	4606      	mov	r6, r0
 8004752:	460f      	mov	r7, r1
 8004754:	4614      	mov	r4, r2
 8004756:	18d5      	adds	r5, r2, r3
 8004758:	42ac      	cmp	r4, r5
 800475a:	d101      	bne.n	8004760 <__sfputs_r+0x12>
 800475c:	2000      	movs	r0, #0
 800475e:	e007      	b.n	8004770 <__sfputs_r+0x22>
 8004760:	463a      	mov	r2, r7
 8004762:	4630      	mov	r0, r6
 8004764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004768:	f7ff ffdc 	bl	8004724 <__sfputc_r>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d1f3      	bne.n	8004758 <__sfputs_r+0xa>
 8004770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004774 <_vfiprintf_r>:
 8004774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004778:	460d      	mov	r5, r1
 800477a:	4614      	mov	r4, r2
 800477c:	4698      	mov	r8, r3
 800477e:	4606      	mov	r6, r0
 8004780:	b09d      	sub	sp, #116	; 0x74
 8004782:	b118      	cbz	r0, 800478c <_vfiprintf_r+0x18>
 8004784:	6983      	ldr	r3, [r0, #24]
 8004786:	b90b      	cbnz	r3, 800478c <_vfiprintf_r+0x18>
 8004788:	f7ff fc8e 	bl	80040a8 <__sinit>
 800478c:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <_vfiprintf_r+0x240>)
 800478e:	429d      	cmp	r5, r3
 8004790:	d11b      	bne.n	80047ca <_vfiprintf_r+0x56>
 8004792:	6875      	ldr	r5, [r6, #4]
 8004794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004796:	07d9      	lsls	r1, r3, #31
 8004798:	d405      	bmi.n	80047a6 <_vfiprintf_r+0x32>
 800479a:	89ab      	ldrh	r3, [r5, #12]
 800479c:	059a      	lsls	r2, r3, #22
 800479e:	d402      	bmi.n	80047a6 <_vfiprintf_r+0x32>
 80047a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047a2:	f7ff fd1f 	bl	80041e4 <__retarget_lock_acquire_recursive>
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	d501      	bpl.n	80047b0 <_vfiprintf_r+0x3c>
 80047ac:	692b      	ldr	r3, [r5, #16]
 80047ae:	b9eb      	cbnz	r3, 80047ec <_vfiprintf_r+0x78>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4630      	mov	r0, r6
 80047b4:	f7ff faf4 	bl	8003da0 <__swsetup_r>
 80047b8:	b1c0      	cbz	r0, 80047ec <_vfiprintf_r+0x78>
 80047ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047bc:	07dc      	lsls	r4, r3, #31
 80047be:	d50e      	bpl.n	80047de <_vfiprintf_r+0x6a>
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	b01d      	add	sp, #116	; 0x74
 80047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ca:	4b7b      	ldr	r3, [pc, #492]	; (80049b8 <_vfiprintf_r+0x244>)
 80047cc:	429d      	cmp	r5, r3
 80047ce:	d101      	bne.n	80047d4 <_vfiprintf_r+0x60>
 80047d0:	68b5      	ldr	r5, [r6, #8]
 80047d2:	e7df      	b.n	8004794 <_vfiprintf_r+0x20>
 80047d4:	4b79      	ldr	r3, [pc, #484]	; (80049bc <_vfiprintf_r+0x248>)
 80047d6:	429d      	cmp	r5, r3
 80047d8:	bf08      	it	eq
 80047da:	68f5      	ldreq	r5, [r6, #12]
 80047dc:	e7da      	b.n	8004794 <_vfiprintf_r+0x20>
 80047de:	89ab      	ldrh	r3, [r5, #12]
 80047e0:	0598      	lsls	r0, r3, #22
 80047e2:	d4ed      	bmi.n	80047c0 <_vfiprintf_r+0x4c>
 80047e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047e6:	f7ff fcfe 	bl	80041e6 <__retarget_lock_release_recursive>
 80047ea:	e7e9      	b.n	80047c0 <_vfiprintf_r+0x4c>
 80047ec:	2300      	movs	r3, #0
 80047ee:	9309      	str	r3, [sp, #36]	; 0x24
 80047f0:	2320      	movs	r3, #32
 80047f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047f6:	2330      	movs	r3, #48	; 0x30
 80047f8:	f04f 0901 	mov.w	r9, #1
 80047fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004800:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80049c0 <_vfiprintf_r+0x24c>
 8004804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004808:	4623      	mov	r3, r4
 800480a:	469a      	mov	sl, r3
 800480c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004810:	b10a      	cbz	r2, 8004816 <_vfiprintf_r+0xa2>
 8004812:	2a25      	cmp	r2, #37	; 0x25
 8004814:	d1f9      	bne.n	800480a <_vfiprintf_r+0x96>
 8004816:	ebba 0b04 	subs.w	fp, sl, r4
 800481a:	d00b      	beq.n	8004834 <_vfiprintf_r+0xc0>
 800481c:	465b      	mov	r3, fp
 800481e:	4622      	mov	r2, r4
 8004820:	4629      	mov	r1, r5
 8004822:	4630      	mov	r0, r6
 8004824:	f7ff ff93 	bl	800474e <__sfputs_r>
 8004828:	3001      	adds	r0, #1
 800482a:	f000 80aa 	beq.w	8004982 <_vfiprintf_r+0x20e>
 800482e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004830:	445a      	add	r2, fp
 8004832:	9209      	str	r2, [sp, #36]	; 0x24
 8004834:	f89a 3000 	ldrb.w	r3, [sl]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a2 	beq.w	8004982 <_vfiprintf_r+0x20e>
 800483e:	2300      	movs	r3, #0
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004848:	f10a 0a01 	add.w	sl, sl, #1
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	9307      	str	r3, [sp, #28]
 8004850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004854:	931a      	str	r3, [sp, #104]	; 0x68
 8004856:	4654      	mov	r4, sl
 8004858:	2205      	movs	r2, #5
 800485a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485e:	4858      	ldr	r0, [pc, #352]	; (80049c0 <_vfiprintf_r+0x24c>)
 8004860:	f000 faf8 	bl	8004e54 <memchr>
 8004864:	9a04      	ldr	r2, [sp, #16]
 8004866:	b9d8      	cbnz	r0, 80048a0 <_vfiprintf_r+0x12c>
 8004868:	06d1      	lsls	r1, r2, #27
 800486a:	bf44      	itt	mi
 800486c:	2320      	movmi	r3, #32
 800486e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004872:	0713      	lsls	r3, r2, #28
 8004874:	bf44      	itt	mi
 8004876:	232b      	movmi	r3, #43	; 0x2b
 8004878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b2a      	cmp	r3, #42	; 0x2a
 8004882:	d015      	beq.n	80048b0 <_vfiprintf_r+0x13c>
 8004884:	4654      	mov	r4, sl
 8004886:	2000      	movs	r0, #0
 8004888:	f04f 0c0a 	mov.w	ip, #10
 800488c:	9a07      	ldr	r2, [sp, #28]
 800488e:	4621      	mov	r1, r4
 8004890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004894:	3b30      	subs	r3, #48	; 0x30
 8004896:	2b09      	cmp	r3, #9
 8004898:	d94e      	bls.n	8004938 <_vfiprintf_r+0x1c4>
 800489a:	b1b0      	cbz	r0, 80048ca <_vfiprintf_r+0x156>
 800489c:	9207      	str	r2, [sp, #28]
 800489e:	e014      	b.n	80048ca <_vfiprintf_r+0x156>
 80048a0:	eba0 0308 	sub.w	r3, r0, r8
 80048a4:	fa09 f303 	lsl.w	r3, r9, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	46a2      	mov	sl, r4
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	e7d2      	b.n	8004856 <_vfiprintf_r+0xe2>
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	1d19      	adds	r1, r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	9103      	str	r1, [sp, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bfbb      	ittet	lt
 80048bc:	425b      	neglt	r3, r3
 80048be:	f042 0202 	orrlt.w	r2, r2, #2
 80048c2:	9307      	strge	r3, [sp, #28]
 80048c4:	9307      	strlt	r3, [sp, #28]
 80048c6:	bfb8      	it	lt
 80048c8:	9204      	strlt	r2, [sp, #16]
 80048ca:	7823      	ldrb	r3, [r4, #0]
 80048cc:	2b2e      	cmp	r3, #46	; 0x2e
 80048ce:	d10c      	bne.n	80048ea <_vfiprintf_r+0x176>
 80048d0:	7863      	ldrb	r3, [r4, #1]
 80048d2:	2b2a      	cmp	r3, #42	; 0x2a
 80048d4:	d135      	bne.n	8004942 <_vfiprintf_r+0x1ce>
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	3402      	adds	r4, #2
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bfb8      	it	lt
 80048e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80049c4 <_vfiprintf_r+0x250>
 80048ee:	2203      	movs	r2, #3
 80048f0:	4650      	mov	r0, sl
 80048f2:	7821      	ldrb	r1, [r4, #0]
 80048f4:	f000 faae 	bl	8004e54 <memchr>
 80048f8:	b140      	cbz	r0, 800490c <_vfiprintf_r+0x198>
 80048fa:	2340      	movs	r3, #64	; 0x40
 80048fc:	eba0 000a 	sub.w	r0, r0, sl
 8004900:	fa03 f000 	lsl.w	r0, r3, r0
 8004904:	9b04      	ldr	r3, [sp, #16]
 8004906:	3401      	adds	r4, #1
 8004908:	4303      	orrs	r3, r0
 800490a:	9304      	str	r3, [sp, #16]
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	2206      	movs	r2, #6
 8004912:	482d      	ldr	r0, [pc, #180]	; (80049c8 <_vfiprintf_r+0x254>)
 8004914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004918:	f000 fa9c 	bl	8004e54 <memchr>
 800491c:	2800      	cmp	r0, #0
 800491e:	d03f      	beq.n	80049a0 <_vfiprintf_r+0x22c>
 8004920:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <_vfiprintf_r+0x258>)
 8004922:	bb1b      	cbnz	r3, 800496c <_vfiprintf_r+0x1f8>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	3307      	adds	r3, #7
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	3308      	adds	r3, #8
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004932:	443b      	add	r3, r7
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	e767      	b.n	8004808 <_vfiprintf_r+0x94>
 8004938:	460c      	mov	r4, r1
 800493a:	2001      	movs	r0, #1
 800493c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004940:	e7a5      	b.n	800488e <_vfiprintf_r+0x11a>
 8004942:	2300      	movs	r3, #0
 8004944:	f04f 0c0a 	mov.w	ip, #10
 8004948:	4619      	mov	r1, r3
 800494a:	3401      	adds	r4, #1
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	4620      	mov	r0, r4
 8004950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004954:	3a30      	subs	r2, #48	; 0x30
 8004956:	2a09      	cmp	r2, #9
 8004958:	d903      	bls.n	8004962 <_vfiprintf_r+0x1ee>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c5      	beq.n	80048ea <_vfiprintf_r+0x176>
 800495e:	9105      	str	r1, [sp, #20]
 8004960:	e7c3      	b.n	80048ea <_vfiprintf_r+0x176>
 8004962:	4604      	mov	r4, r0
 8004964:	2301      	movs	r3, #1
 8004966:	fb0c 2101 	mla	r1, ip, r1, r2
 800496a:	e7f0      	b.n	800494e <_vfiprintf_r+0x1da>
 800496c:	ab03      	add	r3, sp, #12
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	462a      	mov	r2, r5
 8004972:	4630      	mov	r0, r6
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <_vfiprintf_r+0x25c>)
 8004976:	a904      	add	r1, sp, #16
 8004978:	f3af 8000 	nop.w
 800497c:	4607      	mov	r7, r0
 800497e:	1c78      	adds	r0, r7, #1
 8004980:	d1d6      	bne.n	8004930 <_vfiprintf_r+0x1bc>
 8004982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004984:	07d9      	lsls	r1, r3, #31
 8004986:	d405      	bmi.n	8004994 <_vfiprintf_r+0x220>
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	059a      	lsls	r2, r3, #22
 800498c:	d402      	bmi.n	8004994 <_vfiprintf_r+0x220>
 800498e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004990:	f7ff fc29 	bl	80041e6 <__retarget_lock_release_recursive>
 8004994:	89ab      	ldrh	r3, [r5, #12]
 8004996:	065b      	lsls	r3, r3, #25
 8004998:	f53f af12 	bmi.w	80047c0 <_vfiprintf_r+0x4c>
 800499c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800499e:	e711      	b.n	80047c4 <_vfiprintf_r+0x50>
 80049a0:	ab03      	add	r3, sp, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	462a      	mov	r2, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <_vfiprintf_r+0x25c>)
 80049aa:	a904      	add	r1, sp, #16
 80049ac:	f000 f882 	bl	8004ab4 <_printf_i>
 80049b0:	e7e4      	b.n	800497c <_vfiprintf_r+0x208>
 80049b2:	bf00      	nop
 80049b4:	08005098 	.word	0x08005098
 80049b8:	080050b8 	.word	0x080050b8
 80049bc:	08005078 	.word	0x08005078
 80049c0:	080050d8 	.word	0x080050d8
 80049c4:	080050de 	.word	0x080050de
 80049c8:	080050e2 	.word	0x080050e2
 80049cc:	00000000 	.word	0x00000000
 80049d0:	0800474f 	.word	0x0800474f

080049d4 <_printf_common>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	4616      	mov	r6, r2
 80049da:	4699      	mov	r9, r3
 80049dc:	688a      	ldr	r2, [r1, #8]
 80049de:	690b      	ldr	r3, [r1, #16]
 80049e0:	4607      	mov	r7, r0
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bfb8      	it	lt
 80049e6:	4613      	movlt	r3, r2
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049ee:	460c      	mov	r4, r1
 80049f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f4:	b10a      	cbz	r2, 80049fa <_printf_common+0x26>
 80049f6:	3301      	adds	r3, #1
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	0699      	lsls	r1, r3, #26
 80049fe:	bf42      	ittt	mi
 8004a00:	6833      	ldrmi	r3, [r6, #0]
 8004a02:	3302      	addmi	r3, #2
 8004a04:	6033      	strmi	r3, [r6, #0]
 8004a06:	6825      	ldr	r5, [r4, #0]
 8004a08:	f015 0506 	ands.w	r5, r5, #6
 8004a0c:	d106      	bne.n	8004a1c <_printf_common+0x48>
 8004a0e:	f104 0a19 	add.w	sl, r4, #25
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	6832      	ldr	r2, [r6, #0]
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	dc28      	bgt.n	8004a6e <_printf_common+0x9a>
 8004a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a20:	1e13      	subs	r3, r2, #0
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	bf18      	it	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	0692      	lsls	r2, r2, #26
 8004a2a:	d42d      	bmi.n	8004a88 <_printf_common+0xb4>
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d020      	beq.n	8004a7c <_printf_common+0xa8>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	68e5      	ldr	r5, [r4, #12]
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	bf18      	it	ne
 8004a46:	2500      	movne	r5, #0
 8004a48:	6832      	ldr	r2, [r6, #0]
 8004a4a:	f04f 0600 	mov.w	r6, #0
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	bf08      	it	eq
 8004a52:	1aad      	subeq	r5, r5, r2
 8004a54:	6922      	ldr	r2, [r4, #16]
 8004a56:	bf08      	it	eq
 8004a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfc4      	itt	gt
 8004a60:	1a9b      	subgt	r3, r3, r2
 8004a62:	18ed      	addgt	r5, r5, r3
 8004a64:	341a      	adds	r4, #26
 8004a66:	42b5      	cmp	r5, r6
 8004a68:	d11a      	bne.n	8004aa0 <_printf_common+0xcc>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e008      	b.n	8004a80 <_printf_common+0xac>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4652      	mov	r2, sl
 8004a72:	4649      	mov	r1, r9
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c0      	blx	r8
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d103      	bne.n	8004a84 <_printf_common+0xb0>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	3501      	adds	r5, #1
 8004a86:	e7c4      	b.n	8004a12 <_printf_common+0x3e>
 8004a88:	2030      	movs	r0, #48	; 0x30
 8004a8a:	18e1      	adds	r1, r4, r3
 8004a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a96:	4422      	add	r2, r4
 8004a98:	3302      	adds	r3, #2
 8004a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a9e:	e7c5      	b.n	8004a2c <_printf_common+0x58>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d0e6      	beq.n	8004a7c <_printf_common+0xa8>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7d9      	b.n	8004a66 <_printf_common+0x92>
	...

08004ab4 <_printf_i>:
 8004ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	7e0f      	ldrb	r7, [r1, #24]
 8004aba:	4691      	mov	r9, r2
 8004abc:	2f78      	cmp	r7, #120	; 0x78
 8004abe:	4680      	mov	r8, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	469a      	mov	sl, r3
 8004ac4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aca:	d807      	bhi.n	8004adc <_printf_i+0x28>
 8004acc:	2f62      	cmp	r7, #98	; 0x62
 8004ace:	d80a      	bhi.n	8004ae6 <_printf_i+0x32>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	f000 80d9 	beq.w	8004c88 <_printf_i+0x1d4>
 8004ad6:	2f58      	cmp	r7, #88	; 0x58
 8004ad8:	f000 80a4 	beq.w	8004c24 <_printf_i+0x170>
 8004adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae4:	e03a      	b.n	8004b5c <_printf_i+0xa8>
 8004ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aea:	2b15      	cmp	r3, #21
 8004aec:	d8f6      	bhi.n	8004adc <_printf_i+0x28>
 8004aee:	a101      	add	r1, pc, #4	; (adr r1, 8004af4 <_printf_i+0x40>)
 8004af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004add 	.word	0x08004add
 8004b00:	08004add 	.word	0x08004add
 8004b04:	08004add 	.word	0x08004add
 8004b08:	08004add 	.word	0x08004add
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004add 	.word	0x08004add
 8004b14:	08004add 	.word	0x08004add
 8004b18:	08004add 	.word	0x08004add
 8004b1c:	08004add 	.word	0x08004add
 8004b20:	08004c6f 	.word	0x08004c6f
 8004b24:	08004b91 	.word	0x08004b91
 8004b28:	08004c51 	.word	0x08004c51
 8004b2c:	08004add 	.word	0x08004add
 8004b30:	08004add 	.word	0x08004add
 8004b34:	08004c91 	.word	0x08004c91
 8004b38:	08004add 	.word	0x08004add
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004add 	.word	0x08004add
 8004b44:	08004add 	.word	0x08004add
 8004b48:	08004c59 	.word	0x08004c59
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a4      	b.n	8004caa <_printf_i+0x1f6>
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	0606      	lsls	r6, r0, #24
 8004b66:	f101 0304 	add.w	r3, r1, #4
 8004b6a:	d50a      	bpl.n	8004b82 <_printf_i+0xce>
 8004b6c:	680e      	ldr	r6, [r1, #0]
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	da03      	bge.n	8004b7c <_printf_i+0xc8>
 8004b74:	232d      	movs	r3, #45	; 0x2d
 8004b76:	4276      	negs	r6, r6
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7c:	230a      	movs	r3, #10
 8004b7e:	485e      	ldr	r0, [pc, #376]	; (8004cf8 <_printf_i+0x244>)
 8004b80:	e019      	b.n	8004bb6 <_printf_i+0x102>
 8004b82:	680e      	ldr	r6, [r1, #0]
 8004b84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	bf18      	it	ne
 8004b8c:	b236      	sxthne	r6, r6
 8004b8e:	e7ef      	b.n	8004b70 <_printf_i+0xbc>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	6029      	str	r1, [r5, #0]
 8004b98:	0601      	lsls	r1, r0, #24
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0xec>
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0xf2>
 8004ba0:	0646      	lsls	r6, r0, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0xe8>
 8004ba4:	881e      	ldrh	r6, [r3, #0]
 8004ba6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ba8:	bf0c      	ite	eq
 8004baa:	2308      	moveq	r3, #8
 8004bac:	230a      	movne	r3, #10
 8004bae:	4852      	ldr	r0, [pc, #328]	; (8004cf8 <_printf_i+0x244>)
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb6:	6865      	ldr	r5, [r4, #4]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	bfa8      	it	ge
 8004bbc:	6821      	ldrge	r1, [r4, #0]
 8004bbe:	60a5      	str	r5, [r4, #8]
 8004bc0:	bfa4      	itt	ge
 8004bc2:	f021 0104 	bicge.w	r1, r1, #4
 8004bc6:	6021      	strge	r1, [r4, #0]
 8004bc8:	b90e      	cbnz	r6, 8004bce <_printf_i+0x11a>
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	d04d      	beq.n	8004c6a <_printf_i+0x1b6>
 8004bce:	4615      	mov	r5, r2
 8004bd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bd4:	fb03 6711 	mls	r7, r3, r1, r6
 8004bd8:	5dc7      	ldrb	r7, [r0, r7]
 8004bda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bde:	4637      	mov	r7, r6
 8004be0:	42bb      	cmp	r3, r7
 8004be2:	460e      	mov	r6, r1
 8004be4:	d9f4      	bls.n	8004bd0 <_printf_i+0x11c>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d10b      	bne.n	8004c02 <_printf_i+0x14e>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	07de      	lsls	r6, r3, #31
 8004bee:	d508      	bpl.n	8004c02 <_printf_i+0x14e>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	6861      	ldr	r1, [r4, #4]
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	bfde      	ittt	le
 8004bf8:	2330      	movle	r3, #48	; 0x30
 8004bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c02:	1b52      	subs	r2, r2, r5
 8004c04:	6122      	str	r2, [r4, #16]
 8004c06:	464b      	mov	r3, r9
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f8cd a000 	str.w	sl, [sp]
 8004c10:	aa03      	add	r2, sp, #12
 8004c12:	f7ff fedf 	bl	80049d4 <_printf_common>
 8004c16:	3001      	adds	r0, #1
 8004c18:	d14c      	bne.n	8004cb4 <_printf_i+0x200>
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	b004      	add	sp, #16
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	4834      	ldr	r0, [pc, #208]	; (8004cf8 <_printf_i+0x244>)
 8004c26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c2a:	6829      	ldr	r1, [r5, #0]
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c32:	6029      	str	r1, [r5, #0]
 8004c34:	061d      	lsls	r5, r3, #24
 8004c36:	d514      	bpl.n	8004c62 <_printf_i+0x1ae>
 8004c38:	07df      	lsls	r7, r3, #31
 8004c3a:	bf44      	itt	mi
 8004c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c40:	6023      	strmi	r3, [r4, #0]
 8004c42:	b91e      	cbnz	r6, 8004c4c <_printf_i+0x198>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	f023 0320 	bic.w	r3, r3, #32
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	e7af      	b.n	8004bb0 <_printf_i+0xfc>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	f043 0320 	orr.w	r3, r3, #32
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	2378      	movs	r3, #120	; 0x78
 8004c5a:	4828      	ldr	r0, [pc, #160]	; (8004cfc <_printf_i+0x248>)
 8004c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c60:	e7e3      	b.n	8004c2a <_printf_i+0x176>
 8004c62:	0659      	lsls	r1, r3, #25
 8004c64:	bf48      	it	mi
 8004c66:	b2b6      	uxthmi	r6, r6
 8004c68:	e7e6      	b.n	8004c38 <_printf_i+0x184>
 8004c6a:	4615      	mov	r5, r2
 8004c6c:	e7bb      	b.n	8004be6 <_printf_i+0x132>
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	6826      	ldr	r6, [r4, #0]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6961      	ldr	r1, [r4, #20]
 8004c76:	6028      	str	r0, [r5, #0]
 8004c78:	0635      	lsls	r5, r6, #24
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	d501      	bpl.n	8004c82 <_printf_i+0x1ce>
 8004c7e:	6019      	str	r1, [r3, #0]
 8004c80:	e002      	b.n	8004c88 <_printf_i+0x1d4>
 8004c82:	0670      	lsls	r0, r6, #25
 8004c84:	d5fb      	bpl.n	8004c7e <_printf_i+0x1ca>
 8004c86:	8019      	strh	r1, [r3, #0]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4615      	mov	r5, r2
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	e7ba      	b.n	8004c06 <_printf_i+0x152>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	602a      	str	r2, [r5, #0]
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	6862      	ldr	r2, [r4, #4]
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 f8d9 	bl	8004e54 <memchr>
 8004ca2:	b108      	cbz	r0, 8004ca8 <_printf_i+0x1f4>
 8004ca4:	1b40      	subs	r0, r0, r5
 8004ca6:	6060      	str	r0, [r4, #4]
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	2300      	movs	r3, #0
 8004cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb2:	e7a8      	b.n	8004c06 <_printf_i+0x152>
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	6923      	ldr	r3, [r4, #16]
 8004cbc:	47d0      	blx	sl
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d0ab      	beq.n	8004c1a <_printf_i+0x166>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	079b      	lsls	r3, r3, #30
 8004cc6:	d413      	bmi.n	8004cf0 <_printf_i+0x23c>
 8004cc8:	68e0      	ldr	r0, [r4, #12]
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	4298      	cmp	r0, r3
 8004cce:	bfb8      	it	lt
 8004cd0:	4618      	movlt	r0, r3
 8004cd2:	e7a4      	b.n	8004c1e <_printf_i+0x16a>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4640      	mov	r0, r8
 8004cdc:	47d0      	blx	sl
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d09b      	beq.n	8004c1a <_printf_i+0x166>
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	68e3      	ldr	r3, [r4, #12]
 8004ce6:	9903      	ldr	r1, [sp, #12]
 8004ce8:	1a5b      	subs	r3, r3, r1
 8004cea:	42ab      	cmp	r3, r5
 8004cec:	dcf2      	bgt.n	8004cd4 <_printf_i+0x220>
 8004cee:	e7eb      	b.n	8004cc8 <_printf_i+0x214>
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	f104 0619 	add.w	r6, r4, #25
 8004cf6:	e7f5      	b.n	8004ce4 <_printf_i+0x230>
 8004cf8:	080050e9 	.word	0x080050e9
 8004cfc:	080050fa 	.word	0x080050fa

08004d00 <_sbrk_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	2300      	movs	r3, #0
 8004d04:	4d05      	ldr	r5, [pc, #20]	; (8004d1c <_sbrk_r+0x1c>)
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fc fc30 	bl	8001570 <_sbrk>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_sbrk_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_sbrk_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	20000254 	.word	0x20000254

08004d20 <__sread>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	f000 f906 	bl	8004f38 <_read_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	bfab      	itete	ge
 8004d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d32:	89a3      	ldrhlt	r3, [r4, #12]
 8004d34:	181b      	addge	r3, r3, r0
 8004d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d3a:	bfac      	ite	ge
 8004d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d3e:	81a3      	strhlt	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__swrite>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	461f      	mov	r7, r3
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	d505      	bpl.n	8004d60 <__swrite+0x1e>
 8004d54:	2302      	movs	r3, #2
 8004d56:	2200      	movs	r2, #0
 8004d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5c:	f000 f868 	bl	8004e30 <_lseek_r>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	4632      	mov	r2, r6
 8004d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d76:	f000 b817 	b.w	8004da8 <_write_r>

08004d7a <__sseek>:
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 f855 	bl	8004e30 <_lseek_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	bf15      	itete	ne
 8004d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d96:	81a3      	strheq	r3, [r4, #12]
 8004d98:	bf18      	it	ne
 8004d9a:	81a3      	strhne	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__sclose>:
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 b813 	b.w	8004dcc <_close_r>
	...

08004da8 <_write_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	2200      	movs	r2, #0
 8004db2:	4d05      	ldr	r5, [pc, #20]	; (8004dc8 <_write_r+0x20>)
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fb fd46 	bl	8000848 <_write>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_write_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_write_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20000254 	.word	0x20000254

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4d05      	ldr	r5, [pc, #20]	; (8004de8 <_close_r+0x1c>)
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fc fb9a 	bl	8001510 <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	20000254 	.word	0x20000254

08004dec <_fstat_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d06      	ldr	r5, [pc, #24]	; (8004e0c <_fstat_r+0x20>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fc fb94 	bl	8001526 <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_fstat_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_fstat_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000254 	.word	0x20000254

08004e10 <_isatty_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	; (8004e2c <_isatty_r+0x1c>)
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fc fb92 	bl	8001544 <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_isatty_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_isatty_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000254 	.word	0x20000254

08004e30 <_lseek_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4d05      	ldr	r5, [pc, #20]	; (8004e50 <_lseek_r+0x20>)
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fc fb8a 	bl	8001558 <_lseek>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_lseek_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_lseek_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000254 	.word	0x20000254

08004e54 <memchr>:
 8004e54:	4603      	mov	r3, r0
 8004e56:	b510      	push	{r4, lr}
 8004e58:	b2c9      	uxtb	r1, r1
 8004e5a:	4402      	add	r2, r0
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	d101      	bne.n	8004e66 <memchr+0x12>
 8004e62:	2000      	movs	r0, #0
 8004e64:	e003      	b.n	8004e6e <memchr+0x1a>
 8004e66:	7804      	ldrb	r4, [r0, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	428c      	cmp	r4, r1
 8004e6c:	d1f6      	bne.n	8004e5c <memchr+0x8>
 8004e6e:	bd10      	pop	{r4, pc}

08004e70 <memcpy>:
 8004e70:	440a      	add	r2, r1
 8004e72:	4291      	cmp	r1, r2
 8004e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e78:	d100      	bne.n	8004e7c <memcpy+0xc>
 8004e7a:	4770      	bx	lr
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e82:	4291      	cmp	r1, r2
 8004e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e88:	d1f9      	bne.n	8004e7e <memcpy+0xe>
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <memmove>:
 8004e8c:	4288      	cmp	r0, r1
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	eb01 0402 	add.w	r4, r1, r2
 8004e94:	d902      	bls.n	8004e9c <memmove+0x10>
 8004e96:	4284      	cmp	r4, r0
 8004e98:	4623      	mov	r3, r4
 8004e9a:	d807      	bhi.n	8004eac <memmove+0x20>
 8004e9c:	1e43      	subs	r3, r0, #1
 8004e9e:	42a1      	cmp	r1, r4
 8004ea0:	d008      	beq.n	8004eb4 <memmove+0x28>
 8004ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eaa:	e7f8      	b.n	8004e9e <memmove+0x12>
 8004eac:	4601      	mov	r1, r0
 8004eae:	4402      	add	r2, r0
 8004eb0:	428a      	cmp	r2, r1
 8004eb2:	d100      	bne.n	8004eb6 <memmove+0x2a>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ebe:	e7f7      	b.n	8004eb0 <memmove+0x24>

08004ec0 <__malloc_lock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_lock+0x8>)
 8004ec2:	f7ff b98f 	b.w	80041e4 <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20000248 	.word	0x20000248

08004ecc <__malloc_unlock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__malloc_unlock+0x8>)
 8004ece:	f7ff b98a 	b.w	80041e6 <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000248 	.word	0x20000248

08004ed8 <_realloc_r>:
 8004ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004edc:	4680      	mov	r8, r0
 8004ede:	4614      	mov	r4, r2
 8004ee0:	460e      	mov	r6, r1
 8004ee2:	b921      	cbnz	r1, 8004eee <_realloc_r+0x16>
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eea:	f7ff ba4b 	b.w	8004384 <_malloc_r>
 8004eee:	b92a      	cbnz	r2, 8004efc <_realloc_r+0x24>
 8004ef0:	f7ff f9e0 	bl	80042b4 <_free_r>
 8004ef4:	4625      	mov	r5, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efc:	f000 f82e 	bl	8004f5c <_malloc_usable_size_r>
 8004f00:	4284      	cmp	r4, r0
 8004f02:	4607      	mov	r7, r0
 8004f04:	d802      	bhi.n	8004f0c <_realloc_r+0x34>
 8004f06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f0a:	d812      	bhi.n	8004f32 <_realloc_r+0x5a>
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7ff fa38 	bl	8004384 <_malloc_r>
 8004f14:	4605      	mov	r5, r0
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d0ed      	beq.n	8004ef6 <_realloc_r+0x1e>
 8004f1a:	42bc      	cmp	r4, r7
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	4631      	mov	r1, r6
 8004f20:	bf28      	it	cs
 8004f22:	463a      	movcs	r2, r7
 8004f24:	f7ff ffa4 	bl	8004e70 <memcpy>
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f7ff f9c2 	bl	80042b4 <_free_r>
 8004f30:	e7e1      	b.n	8004ef6 <_realloc_r+0x1e>
 8004f32:	4635      	mov	r5, r6
 8004f34:	e7df      	b.n	8004ef6 <_realloc_r+0x1e>
	...

08004f38 <_read_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	2200      	movs	r2, #0
 8004f42:	4d05      	ldr	r5, [pc, #20]	; (8004f58 <_read_r+0x20>)
 8004f44:	602a      	str	r2, [r5, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7fc fac5 	bl	80014d6 <_read>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_read_r+0x1e>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_read_r+0x1e>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000254 	.word	0x20000254

08004f5c <_malloc_usable_size_r>:
 8004f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f60:	1f18      	subs	r0, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfbc      	itt	lt
 8004f66:	580b      	ldrlt	r3, [r1, r0]
 8004f68:	18c0      	addlt	r0, r0, r3
 8004f6a:	4770      	bx	lr

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
