
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800552c  0800552c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005534  08005534  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800553c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  080055ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080055ac  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001018a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbc  00000000  00000000  00030223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00032de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00033d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd5  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012815  00000000  00000000  0004e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e272  00000000  00000000  0006110a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef37c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000ef3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080052bc 	.word	0x080052bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080052bc 	.word	0x080052bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <readRegister+0x50>)
 800047a:	f002 fd22 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f002 f824 	bl	80024cc <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000484:	1cf9      	adds	r1, r7, #3
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f003 fbca 	bl	8003c24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000490:	f107 010f 	add.w	r1, r7, #15
 8000494:	2364      	movs	r3, #100	; 0x64
 8000496:	2201      	movs	r2, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f003 fcff 	bl	8003e9c <HAL_SPI_Receive>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f002 f814 	bl	80024cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <readRegister+0x50>)
 80004aa:	f002 fd0a 	bl	8002ec2 <HAL_GPIO_WritePin>
	return rec;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00

080004bc <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	461a      	mov	r2, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	72fb      	strb	r3, [r7, #11]
 80004cc:	4613      	mov	r3, r2
 80004ce:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	743b      	strb	r3, [r7, #16]
	int j = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004f6:	2301      	movs	r3, #1
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
 80004fa:	e00f      	b.n	800051c <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 80004fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	637a      	str	r2, [r7, #52]	; 0x34
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	f107 0210 	add.w	r2, r7, #16
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	4413      	add	r3, r2
 8000512:	460a      	mov	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	3301      	adds	r3, #1
 800051a:	633b      	str	r3, [r7, #48]	; 0x30
 800051c:	7abb      	ldrb	r3, [r7, #10]
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	ddeb      	ble.n	80004fc <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <writeRegister+0xa4>)
 800052a:	f002 fcca 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b29a      	uxth	r2, r3
 8000536:	f107 0110 	add.w	r1, r7, #16
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f003 fb70 	bl	8003c24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <writeRegister+0xa4>)
 800054a:	f002 fcba 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f001 ffbc 	bl	80024cc <HAL_Delay>
	return cmd;  // pull the pin high
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	b2db      	uxtb	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	3738      	adds	r7, #56	; 0x38
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010c00 	.word	0x40010c00

08000564 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000572:	f04f 0000 	mov.w	r0, #0
 8000576:	f04f 0100 	mov.w	r1, #0
 800057a:	04d9      	lsls	r1, r3, #19
 800057c:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000580:	04d0      	lsls	r0, r2, #19
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <setRFFrequency+0x80>)
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	f7ff fdea 	bl	8000160 <__aeabi_uldivmod>
 800058c:	4602      	mov	r2, r0
 800058e:	460b      	mov	r3, r1
 8000590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	0c02      	lsrs	r2, r0, #16
 80005a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a6:	0c0b      	lsrs	r3, r1, #16
 80005a8:	b2d3      	uxtb	r3, r2
 80005aa:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	f04f 0300 	mov.w	r3, #0
 80005b8:	0a02      	lsrs	r2, r0, #8
 80005ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005be:	0a0b      	lsrs	r3, r1, #8
 80005c0:	b2d3      	uxtb	r3, r2
 80005c2:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005c4:	7c3b      	ldrb	r3, [r7, #16]
 80005c6:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	2303      	movs	r3, #3
 80005d4:	2106      	movs	r1, #6
 80005d6:	f7ff ff71 	bl	80004bc <writeRegister>
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	01e84800 	.word	0x01e84800

080005e8 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f103 0210 	add.w	r2, r3, #16
 80005fc:	2301      	movs	r3, #1
 80005fe:	2109      	movs	r1, #9
 8000600:	f7ff ff5c 	bl	80004bc <writeRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0216 	add.w	r2, r3, #22
 8000620:	2301      	movs	r3, #1
 8000622:	2139      	movs	r1, #57	; 0x39
 8000624:	f7ff ff4a 	bl	80004bc <writeRegister>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f103 0217 	add.w	r2, r3, #23
 8000644:	2301      	movs	r3, #1
 8000646:	210b      	movs	r1, #11
 8000648:	f7ff ff38 	bl	80004bc <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 021a 	add.w	r2, r3, #26
 8000668:	2301      	movs	r3, #1
 800066a:	211f      	movs	r1, #31
 800066c:	f7ff ff26 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 021c 	add.w	r2, r3, #28
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	f7ff ff1c 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f103 021d 	add.w	r2, r3, #29
 8000690:	2301      	movs	r3, #1
 8000692:	2121      	movs	r1, #33	; 0x21
 8000694:	f7ff ff12 	bl	80004bc <writeRegister>
			1);
	module->readBytes = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7c9b      	ldrb	r3, [r3, #18]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7cdb      	ldrb	r3, [r3, #19]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4413      	add	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80006e2:	f107 020f 	add.w	r2, r7, #15
 80006e6:	2301      	movs	r3, #1
 80006e8:	211d      	movs	r1, #29
 80006ea:	f7ff fee7 	bl	80004bc <writeRegister>

	cmd = module->LoRa_SF << 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7c5b      	ldrb	r3, [r3, #17]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7d1b      	ldrb	r3, [r3, #20]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4413      	add	r3, r2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7eda      	ldrb	r2, [r3, #27]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4413      	add	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800071a:	f107 020f 	add.w	r2, r7, #15
 800071e:	2301      	movs	r3, #1
 8000720:	211e      	movs	r1, #30
 8000722:	f7ff fecb 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 0219 	add.w	r2, r3, #25
 8000732:	2301      	movs	r3, #1
 8000734:	2126      	movs	r1, #38	; 0x26
 8000736:	f7ff fec1 	bl	80004bc <writeRegister>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000750:	2131      	movs	r1, #49	; 0x31
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe88 	bl	8000468 <readRegister>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f023 0307 	bic.w	r3, r3, #7
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	f043 0305 	orr.w	r3, r3, #5
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000776:	f107 020f 	add.w	r2, r7, #15
 800077a:	2301      	movs	r3, #1
 800077c:	2131      	movs	r1, #49	; 0x31
 800077e:	f7ff fe9d 	bl	80004bc <writeRegister>
	tmp = 0x0C;
 8000782:	230c      	movs	r3, #12
 8000784:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800078c:	f107 020f 	add.w	r2, r7, #15
 8000790:	2301      	movs	r3, #1
 8000792:	2137      	movs	r1, #55	; 0x37
 8000794:	f7ff fe92 	bl	80004bc <writeRegister>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe59 	bl	8000468 <readRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80007e2:	f107 020f 	add.w	r2, r7, #15
 80007e6:	2301      	movs	r3, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	f7ff fe67 	bl	80004bc <writeRegister>
	module->operatingMode = mode;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000806:	23ff      	movs	r3, #255	; 0xff
 8000808:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000810:	f107 020f 	add.w	r2, r7, #15
 8000814:	2301      	movs	r3, #1
 8000816:	2112      	movs	r1, #18
 8000818:	f7ff fe50 	bl	80004bc <writeRegister>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	b29b      	uxth	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f002 fb2b 	bl	8002e94 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <ledInit+0x60>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <ledInit+0x60>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <ledInit+0x60>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <ledInit+0x60>)
 800086e:	f023 0320 	bic.w	r3, r3, #32
 8000872:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <ledInit+0x60>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <ledInit+0x60>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <ledInit+0x60>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <ledInit+0x60>)
 8000886:	f023 0310 	bic.w	r3, r3, #16
 800088a:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ledInit+0x60>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <ledInit+0x60>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <ledInit+0x60>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <ledInit+0x60>)
 800089e:	f023 0308 	bic.w	r3, r3, #8
 80008a2:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f835 	bl	8000914 <led_reset>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 80008c0:	f001 fdfa 	bl	80024b8 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d0:	d90b      	bls.n	80008ea <led_enable_kalive+0x32>
		l->kaCounter = HAL_GetTick();
 80008d2:	f001 fdf1 	bl	80024b8 <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <led_enable_kalive+0x58>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <led_enable_kalive+0x58>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 80008e8:	e00d      	b.n	8000906 <led_enable_kalive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 80008ea:	f001 fde5 	bl	80024b8 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b32      	cmp	r3, #50	; 0x32
 80008f8:	d905      	bls.n	8000906 <led_enable_kalive+0x4e>
		SYS_RP_LED_OFF();
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <led_enable_kalive+0x58>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <led_enable_kalive+0x58>)
 8000900:	f023 0320 	bic.w	r3, r3, #32
 8000904:	60d3      	str	r3, [r2, #12]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010c00 	.word	0x40010c00

08000914 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 800092e:	f001 fdc3 	bl	80024b8 <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <USART1_IRQHandler>:
/* USER CODE BEGIN 0 */
UART1_t *uart1_ptr;
RS485_t *rs485_ptr;
Tone_uhf_t *uhf_ptr;

void USART1_IRQHandler(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	uart1_read_to_frame(uart1_ptr);
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <USART1_IRQHandler+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fcc9 	bl	80022f4 <uart1_read_to_frame>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000023c 	.word	0x2000023c
 800096c:	00000000 	.word	0x00000000

08000970 <setTxBaseParameters>:
	}
	return len;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000978:	2340      	movs	r3, #64	; 0x40
 800097a:	75fb      	strb	r3, [r7, #23]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 800097c:	2300      	movs	r3, #0
 800097e:	75bb      	strb	r3, [r7, #22]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000980:	2300      	movs	r3, #0
 8000982:	757b      	strb	r3, [r7, #21]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000984:	2301      	movs	r3, #1
 8000986:	753b      	strb	r3, [r7, #20]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	74fb      	strb	r3, [r7, #19]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	74bb      	strb	r3, [r7, #18]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000990:	2320      	movs	r3, #32
 8000992:	747b      	strb	r3, [r7, #17]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000994:	2310      	movs	r3, #16
 8000996:	743b      	strb	r3, [r7, #16]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 800099c:	2304      	movs	r3, #4
 800099e:	73bb      	strb	r3, [r7, #14]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 80009a0:	2302      	movs	r3, #2
 80009a2:	737b      	strb	r3, [r7, #13]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 80009a4:	2301      	movs	r3, #1
 80009a6:	733b      	strb	r3, [r7, #12]

	loraTx->frequency = DOWNLINK_FREQ;
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	a331      	add	r3, pc, #196	; (adr r3, 8000a70 <setTxBaseParameters+0x100>)
 80009ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraTx->power = SX1278_POWER_17DBM;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	22fc      	movs	r2, #252	; 0xfc
 80009b8:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	220a      	movs	r2, #10
 80009be:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2206      	movs	r2, #6
 80009c4:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2202      	movs	r2, #2
 80009ca:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2234      	movs	r2, #52	; 0x34
 80009d6:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	220b      	movs	r2, #11
 80009dc:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2223      	movs	r2, #35	; 0x23
 80009e2:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2208      	movs	r2, #8
 80009ee:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2208      	movs	r2, #8
 80009fa:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 80009fc:	7dfa      	ldrb	r2, [r7, #23]
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	7d7b      	ldrb	r3, [r7, #21]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	7d3b      	ldrb	r3, [r7, #20]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000a14:	7cfa      	ldrb	r2, [r7, #19]
 8000a16:	7cbb      	ldrb	r3, [r7, #18]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	7c7b      	ldrb	r3, [r7, #17]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a2e:	7c39      	ldrb	r1, [r7, #16]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	430b      	orrs	r3, r1
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a4c:	7b79      	ldrb	r1, [r7, #13]
 8000a4e:	7b3b      	ldrb	r3, [r7, #12]
 8000a50:	430b      	orrs	r3, r1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->fhssValue = HOPS_PERIOD;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	779a      	strb	r2, [r3, #30]
}
 8000a64:	bf00      	nop
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	08f0d180 	.word	0x08f0d180
 8000a74:	00000000 	.word	0x00000000

08000a78 <saveTx>:

void saveTx(SX1278_t *module) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000a80:	2100      	movs	r1, #0
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fe9f 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000a88:	200f      	movs	r0, #15
 8000a8a:	f001 fd1f 	bl	80024cc <HAL_Delay>
	setRFFrequency(module);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fd68 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fdb9 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fda4 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fdc5 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f103 0218 	add.w	r2, r3, #24
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	210c      	movs	r1, #12
 8000ab6:	f7ff fd01 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7c5b      	ldrb	r3, [r3, #17]
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d10a      	bne.n	8000ad8 <saveTx+0x60>
		module->headerMode = IMPLICIT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fe36 	bl	8000742 <setDetectionParameters>
 8000ad6:	e006      	b.n	8000ae6 <saveTx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fdde 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fdb1 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f103 021e 	add.w	r2, r3, #30
 8000afe:	2301      	movs	r3, #1
 8000b00:	2124      	movs	r1, #36	; 0x24
 8000b02:	f7ff fcdb 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f103 021f 	add.w	r2, r3, #31
 8000b12:	2301      	movs	r3, #1
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	f7ff fcd1 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fe6f 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f103 0220 	add.w	r2, r3, #32
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2111      	movs	r1, #17
 8000b30:	f7ff fcc4 	bl	80004bc <writeRegister>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->packetLength;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
 8000b48:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b50:	f107 020f 	add.w	r2, r7, #15
 8000b54:	2301      	movs	r3, #1
 8000b56:	2122      	movs	r1, #34	; 0x22
 8000b58:	f7ff fcb0 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000b62:	210e      	movs	r1, #14
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc7f 	bl	8000468 <readRegister>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	73bb      	strb	r3, [r7, #14]
	addr = 0x80;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b78:	f107 020e 	add.w	r2, r7, #14
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	210d      	movs	r1, #13
 8000b80:	f7ff fc9c 	bl	80004bc <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000b8a:	2122      	movs	r1, #34	; 0x22
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc6b 	bl	8000468 <readRegister>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	755a      	strb	r2, [r3, #21]
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <sx1278Reset>:

void sx1278Reset() {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2101      	movs	r1, #1
 8000bac:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <sx1278Reset+0x34>)
 8000bae:	f002 f988 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <sx1278Reset+0x34>)
 8000bb8:	f002 f983 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f001 fc85 	bl	80024cc <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <sx1278Reset+0x34>)
 8000bc8:	f002 f97b 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f001 fc7d 	bl	80024cc <HAL_Delay>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <transmit>:

int messageCounter = 0;
void transmit(SX1278_t *loraTx) {
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b0a8      	sub	sp, #160	; 0xa0
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	if (loraTx->status == UNKNOW) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d125      	bne.n	8000c3a <transmit+0x5e>
		uint8_t tmp[] = "Configuring Master LoRa module: Tx Mode\r\n";
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <transmit+0x210>)
 8000bf0:	f107 0408 	add.w	r4, r7, #8
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c02:	c403      	stmia	r4!, {r0, r1}
 8000c04:	8022      	strh	r2, [r4, #0]
		size_t len = strlen(tmp);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff faa0 	bl	8000150 <strlen>
 8000c10:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		HAL_UART_Transmit(&huart1, tmp, len, 100);
 8000c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f107 0108 	add.w	r1, r7, #8
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	4873      	ldr	r0, [pc, #460]	; (8000df0 <transmit+0x214>)
 8000c22:	f003 fd34 	bl	800468e <HAL_UART_Transmit>
		setTxBaseParameters(loraTx);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fea2 	bl	8000970 <setTxBaseParameters>
		saveTx(loraTx);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff23 	bl	8000a78 <saveTx>
		loraTx->status = TX_READY;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (loraTx->status == TX_READY) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80cf 	bne.w	8000de4 <transmit+0x208>

		memset(loraTx->buffer, 0, SX1278_MAX_PACKET);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3325      	adds	r3, #37	; 0x25
 8000c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 feb1 	bl	80049b8 <memset>
		loraTx->packetLength = sprintf((char*) loraTx->buffer, "Hello World"
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3325      	adds	r3, #37	; 0x25
 8000c5a:	4a66      	ldr	r2, [pc, #408]	; (8000df4 <transmit+0x218>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	4966      	ldr	r1, [pc, #408]	; (8000df8 <transmit+0x21c>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f003 feb1 	bl	80049c8 <siprintf>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	755a      	strb	r2, [r3, #21]
				" %d", messageCounter);

		setTxParameters(loraTx);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff64 	bl	8000b3c <setTxParameters>
		uint8_t tmp2[] = "Sending message: ";
 8000c74:	4b61      	ldr	r3, [pc, #388]	; (8000dfc <transmit+0x220>)
 8000c76:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	8023      	strh	r3, [r4, #0]
		size_t len2 = strlen(tmp2);
 8000c84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fa61 	bl	8000150 <strlen>
 8000c8e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		HAL_UART_Transmit(&huart1, tmp2, len2, 100);
 8000c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000c9c:	2364      	movs	r3, #100	; 0x64
 8000c9e:	4854      	ldr	r0, [pc, #336]	; (8000df0 <transmit+0x214>)
 8000ca0:	f003 fcf5 	bl	800468e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, loraTx->buffer, loraTx->packetLength, 100);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7d5b      	ldrb	r3, [r3, #21]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	2364      	movs	r3, #100	; 0x64
 8000cb2:	484f      	ldr	r0, [pc, #316]	; (8000df0 <transmit+0x214>)
 8000cb4:	f003 fceb 	bl	800468e <HAL_UART_Transmit>

		for (int i = 0; i < loraTx->packetLength; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cbe:	e015      	b.n	8000cec <transmit+0x110>
			char data = loraTx->buffer[i];
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3325      	adds	r3, #37	; 0x25
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000cd6:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8000cda:	2301      	movs	r3, #1
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f7ff fbed 	bl	80004bc <writeRegister>
		for (int i = 0; i < loraTx->packetLength; i++) {
 8000ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7d5b      	ldrb	r3, [r3, #21]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	dbe2      	blt.n	8000cc0 <transmit+0xe4>
		}
		updateLoraLowFreq(loraTx, TX);
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fd62 	bl	80007c6 <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8000d02:	f001 fbd9 	bl	80024b8 <HAL_GetTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fd87 	bl	8000824 <SX1278_hw_GetDIO0>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d039      	beq.n	8000d90 <transmit+0x1b4>
				int timeEnd = HAL_GetTick();
 8000d1c:	f001 fbcc 	bl	80024b8 <HAL_GetTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				int tiempoTransmision = timeEnd - timeStart;
 8000d26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000d3a:	2112      	movs	r1, #18
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fb93 	bl	8000468 <readRegister>
				clearIrqFlags(loraTx);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fd5b 	bl	80007fe <clearIrqFlags>
				uint8_t tmp3[100] = { 0 };
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2260      	movs	r2, #96	; 0x60
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fe2f 	bl	80049b8 <memset>
				uint8_t len3 = sprintf((char*) tmp3,
						" - Tx Ok: %d ms %d bytes\n", tiempoTransmision,
						loraTx->packetLength);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7d5b      	ldrb	r3, [r3, #21]
				uint8_t len3 = sprintf((char*) tmp3,
 8000d5e:	f107 0008 	add.w	r0, r7, #8
 8000d62:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d66:	4926      	ldr	r1, [pc, #152]	; (8000e00 <transmit+0x224>)
 8000d68:	f003 fe2e 	bl	80049c8 <siprintf>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

				HAL_UART_Transmit(&huart1, tmp3, len3, 100);
 8000d72:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	f107 0108 	add.w	r1, r7, #8
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	481c      	ldr	r0, [pc, #112]	; (8000df0 <transmit+0x214>)
 8000d80:	f003 fc85 	bl	800468e <HAL_UART_Transmit>
				messageCounter += 1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <transmit+0x218>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <transmit+0x218>)
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e029      	b.n	8000de4 <transmit+0x208>
				return;
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000d90:	f001 fb92 	bl	80024b8 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000da0:	d91c      	bls.n	8000ddc <transmit+0x200>
				sx1278Reset();
 8000da2:	f7ff feff 	bl	8000ba4 <sx1278Reset>
				uint8_t tmp4[] = "EntryTx failed, timeout reset!\r\n";
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <transmit+0x228>)
 8000da8:	f107 0408 	add.w	r4, r7, #8
 8000dac:	461d      	mov	r5, r3
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	682b      	ldr	r3, [r5, #0]
 8000db8:	7023      	strb	r3, [r4, #0]
				size_t len4 = strlen(tmp4);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff f9c6 	bl	8000150 <strlen>
 8000dc4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				HAL_UART_Transmit(&huart1, tmp4, len4, 100);
 8000dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f107 0108 	add.w	r1, r7, #8
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <transmit+0x214>)
 8000dd6:	f003 fc5a 	bl	800468e <HAL_UART_Transmit>
 8000dda:	e003      	b.n	8000de4 <transmit+0x208>

				return;
			}

			HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f001 fb75 	bl	80024cc <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000de2:	e793      	b.n	8000d0c <transmit+0x130>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 8000de4:	37a0      	adds	r7, #160	; 0xa0
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	08005340 	.word	0x08005340
 8000df0:	20000170 	.word	0x20000170
 8000df4:	2000024c 	.word	0x2000024c
 8000df8:	08005314 	.word	0x08005314
 8000dfc:	0800536c 	.word	0x0800536c
 8000e00:	08005324 	.word	0x08005324
 8000e04:	08005380 	.word	0x08005380

08000e08 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73bb      	strb	r3, [r7, #14]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	737b      	strb	r3, [r7, #13]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	733b      	strb	r3, [r7, #12]
	////////////////////////////////////////
	loraRx->frequency = UPLINK_FREQ;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	a32b      	add	r3, pc, #172	; (adr r3, 8000ed0 <setRxBaseParameters+0xc8>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraRx->power = SX1278_POWER_17DBM;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	22fc      	movs	r2, #252	; 0xfc
 8000e30:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	220a      	movs	r2, #10
 8000e36:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2234      	movs	r2, #52	; 0x34
 8000e4e:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	220b      	movs	r2, #11
 8000e54:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2223      	movs	r2, #35	; 0x23
 8000e5a:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2208      	movs	r2, #8
 8000e66:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2208      	movs	r2, #8
 8000e72:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	7b3b      	ldrb	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ff      	movs	r2, #255	; 0xff
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eac:	f023 0320 	bic.w	r3, r3, #32
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

	loraRx->fhssValue = HOPS_PERIOD;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	779a      	strb	r2, [r3, #30]
	loraRx->packetLength = SX1278_MAX_PACKET;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	755a      	strb	r2, [r3, #21]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	0a21fe80 	.word	0x0a21fe80
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <saveRx>:

void saveRx(SX1278_t *module) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fc6f 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f001 faef 	bl	80024cc <HAL_Delay>
	setRFFrequency(module);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fb38 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fb89 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fb74 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fb95 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f103 0218 	add.w	r2, r3, #24
 8000f12:	2301      	movs	r3, #1
 8000f14:	210c      	movs	r1, #12
 8000f16:	f7ff fad1 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7c5b      	ldrb	r3, [r3, #17]
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d10a      	bne.n	8000f38 <saveRx+0x60>
		module->headerMode = IMPLICIT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fc06 	bl	8000742 <setDetectionParameters>
 8000f36:	e006      	b.n	8000f46 <saveRx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fbae 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fb81 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f103 021e 	add.w	r2, r3, #30
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2124      	movs	r1, #36	; 0x24
 8000f62:	f7ff faab 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f103 021f 	add.w	r2, r3, #31
 8000f72:	2301      	movs	r3, #1
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	f7ff faa1 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fc3f 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f103 0220 	add.w	r2, r3, #32
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2111      	movs	r1, #17
 8000f90:	f7ff fa94 	bl	80004bc <writeRegister>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fc0d 	bl	80007c6 <updateLoraLowFreq>
	uint8_t cmd = module->packetLength;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7d5b      	ldrb	r3, [r3, #21]
 8000fb0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fb8:	f107 020f 	add.w	r2, r7, #15
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2122      	movs	r1, #34	; 0x22
 8000fc0:	f7ff fa7c 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000fca:	210f      	movs	r1, #15
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa4b 	bl	8000468 <readRegister>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fdc:	f107 020e 	add.w	r2, r7, #14
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	210d      	movs	r1, #13
 8000fe4:	f7ff fa6a 	bl	80004bc <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000fee:	2122      	movs	r1, #34	; 0x22
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa39 	bl	8000468 <readRegister>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	755a      	strb	r2, [r3, #21]
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001014:	2b02      	cmp	r3, #2
 8001016:	d107      	bne.n	8001028 <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, SX1278_MAX_PACKET);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3325      	adds	r3, #37	; 0x25
 800101c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fcc8 	bl	80049b8 <memset>
	}
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <waitForRxDone>:

void waitForRxDone(SX1278_t *loraRx) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001038:	e024      	b.n	8001084 <waitForRxDone+0x54>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001040:	2112      	movs	r1, #18
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa10 	bl	8000468 <readRegister>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d016      	beq.n	8001084 <waitForRxDone+0x54>
			uint8_t cmd = flags | (1 << 7);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73bb      	strb	r3, [r7, #14]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001066:	f107 020e 	add.w	r2, r7, #14
 800106a:	2301      	movs	r3, #1
 800106c:	2112      	movs	r1, #18
 800106e:	f7ff fa25 	bl	80004bc <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001078:	2112      	movs	r1, #18
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9f4 	bl	8000468 <readRegister>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fbcb 	bl	8000824 <SX1278_hw_GetDIO0>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0d2      	beq.n	800103a <waitForRxDone+0xa>
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <configInit>:

void configInit(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	uint8_t tmp[] = "Configuring Master LoRa module: Rx Mode\r\n";
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <configInit+0x60>)
 80010ac:	f107 0408 	add.w	r4, r7, #8
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010be:	c403      	stmia	r4!, {r0, r1}
 80010c0:	8022      	strh	r2, [r4, #0]
	size_t len = strlen(tmp);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f842 	bl	8000150 <strlen>
 80010cc:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&*huart1, tmp, len, 100);
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f003 fad8 	bl	800468e <HAL_UART_Transmit>
	setRxBaseParameters(&*loraRx);
 80010de:	6838      	ldr	r0, [r7, #0]
 80010e0:	f7ff fe92 	bl	8000e08 <setRxBaseParameters>
	saveRx(loraRx);
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f7ff fef7 	bl	8000ed8 <saveRx>
	loraRx->status = RX_READY;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2202      	movs	r2, #2
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	setRxParameters(loraRx);
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f7ff ff52 	bl	8000f9c <setRxParameters>
}
 80010f8:	bf00      	nop
 80010fa:	3738      	adds	r7, #56	; 0x38
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	080053a4 	.word	0x080053a4

08001104 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001112:	2112      	movs	r1, #18
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9a7 	bl	8000468 <readRegister>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
	SET_BIT(flags2, RX_DONE_MASK);
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd = flags2;
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	73fb      	strb	r3, [r7, #15]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001130:	f107 020f 	add.w	r2, r7, #15
 8001134:	2301      	movs	r3, #1
 8001136:	2112      	movs	r1, #18
 8001138:	f7ff f9c0 	bl	80004bc <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001142:	2112      	movs	r1, #18
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f98f 	bl	8000468 <readRegister>
 800114a:	4603      	mov	r3, r0
 800114c:	75bb      	strb	r3, [r7, #22]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 800114e:	7dbb      	ldrb	r3, [r7, #22]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	613b      	str	r3, [r7, #16]
	return errorActivation;
 8001156:	693b      	ldr	r3, [r7, #16]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <getLoraPacket>:

void getLoraPacket(SX1278_t *loraRx) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	loraRx->packetLength = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800116e:	2113      	movs	r1, #19
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f979 	bl	8000468 <readRegister>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <getLoraPacket+0x74>)
 8001188:	f001 fe9b 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f001 f99d 	bl	80024cc <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100); // send address
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001198:	f107 010f 	add.w	r1, r7, #15
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	2201      	movs	r2, #1
 80011a0:	f002 fd40 	bl	8003c24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->packetLength, 100); // receive 6 bytes data
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7d5b      	ldrb	r3, [r3, #21]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	f002 fe70 	bl	8003e9c <HAL_SPI_Receive>
	HAL_Delay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f001 f985 	bl	80024cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 80011c2:	2201      	movs	r2, #1
 80011c4:	2101      	movs	r1, #1
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <getLoraPacket+0x74>)
 80011c8:	f001 fe7b 	bl	8002ec2 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <printParameters>:

void printParameters(int timeRx, UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart1, loraRx->buffer, loraRx->packetLength, 100);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7d5b      	ldrb	r3, [r3, #21]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f003 fa4b 	bl	800468e <HAL_UART_Transmit>
	uint8_t largo = sprintf((char*) loraRx->buffer,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f103 0025 	add.w	r0, r3, #37	; 0x25
			" - Rx Ok: %d ms %d bytes\n", timeRx, loraRx->packetLength);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7d5b      	ldrb	r3, [r3, #21]
	uint8_t largo = sprintf((char*) loraRx->buffer,
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4908      	ldr	r1, [pc, #32]	; (8001228 <printParameters+0x50>)
 8001206:	f003 fbdf 	bl	80049c8 <siprintf>
 800120a:	4603      	mov	r3, r0
 800120c:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(huart1, loraRx->buffer, largo, 100);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	b29a      	uxth	r2, r3
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f003 fa37 	bl	800468e <HAL_UART_Transmit>
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	080053d0 	.word	0x080053d0

0800122c <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <read+0x24>
		configInit(huart1, loraRx);
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff2c 	bl	80010a0 <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 8001248:	2105      	movs	r1, #5
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7ff fabb 	bl	80007c6 <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7ff fed8 	bl	8001006 <clearMemForRx>
	int timeStart = HAL_GetTick();
 8001256:	f001 f92f 	bl	80024b8 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	617b      	str	r3, [r7, #20]
	waitForRxDone(loraRx);
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f7ff fee6 	bl	8001030 <waitForRxDone>
	int timeEnd = HAL_GetTick();
 8001264:	f001 f928 	bl	80024b8 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f7ff ff45 	bl	8001104 <crcErrorActivation>
 800127a:	60b8      	str	r0, [r7, #8]
	if (errorActivation == 1) {
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d017      	beq.n	80012b2 <read+0x86>
		return;
	}
	getLoraPacket(loraRx);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff ff6c 	bl	8001160 <getLoraPacket>
	printParameters(timeRx, huart1, loraRx);
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ffa3 	bl	80011d8 <printParameters>
	setRxParameters(loraRx);
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f7ff fe82 	bl	8000f9c <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 8001298:	2105      	movs	r1, #5
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7ff fa93 	bl	80007c6 <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7ff fa7d 	bl	80007a0 <readMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80012b0:	e000      	b.n	80012b4 <read+0x88>
		return;
 80012b2:	bf00      	nop
}
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <modeCmdUpdate>:

bool TX_MODE;
bool RX_MODE;

void modeCmdUpdate(const UART1_t *uart1) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1->rxBuffer[4] << 24;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	061b      	lsls	r3, r3, #24
 80012ce:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[5] << 16;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[6] << 8;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	799b      	ldrb	r3, [r3, #6]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1->rxBuffer[7];
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	79db      	ldrb	r3, [r3, #7]
 80012f0:	461a      	mov	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <modeCmdUpdate+0x4e>
		 RX_MODE = true;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <modeCmdUpdate+0x6c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
		 TX_MODE = false;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <modeCmdUpdate+0x70>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	} if (receiveValue == 1) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <modeCmdUpdate+0x60>
		 TX_MODE = true;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <modeCmdUpdate+0x70>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
		 RX_MODE = false;
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <modeCmdUpdate+0x6c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	}
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000251 	.word	0x20000251
 800132c:	20000250 	.word	0x20000250

08001330 <modeRs485Update>:

void modeRs485Update(const UART1_t *uart1, RS485_t *rs485) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	switch (rs485->cmd) {
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3b31      	subs	r3, #49	; 0x31
 8001340:	2b04      	cmp	r3, #4
 8001342:	d824      	bhi.n	800138e <modeRs485Update+0x5e>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <modeRs485Update+0x1c>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	08001361 	.word	0x08001361
 8001350:	0800136f 	.word	0x0800136f
 8001354:	08001377 	.word	0x08001377
 8001358:	0800137f 	.word	0x0800137f
 800135c:	08001387 	.word	0x08001387
	case SET_PARAMETER_FREQOUT: //cmd = 31
		modeCmdUpdate(uart1);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffab 	bl	80012bc <modeCmdUpdate>
		rs485->cmd = NONE;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
		break;
 800136c:	e013      	b.n	8001396 <modeRs485Update+0x66>
	case SET_PARAMETERS: //cmd = 32
		//ParametersCmd(uart1);
		rs485->cmd = NONE;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		break;
 8001374:	e00f      	b.n	8001396 <modeRs485Update+0x66>
	case SET_PARAMETER_FREQBASE: //cmd = 33
		//freqBaseCmdUpdate(uart1);
		rs485->cmd = NONE;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
		break;
 800137c:	e00b      	b.n	8001396 <modeRs485Update+0x66>
	case QUERY_PARAMETER_PdBm: //cmd = 34
		//powerOutCmdUpdate(uart1);
		rs485->cmd = NONE;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		break;
 8001384:	e007      	b.n	8001396 <modeRs485Update+0x66>
	case SET_MODE: //cmd = 35
		//setModeCmd(uart1,;
		rs485->cmd = NONE;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		break;
 800138c:	e003      	b.n	8001396 <modeRs485Update+0x66>
	default:
		rs485->cmd = NONE;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
		break;
 8001394:	bf00      	nop
	}
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Tone_uhf_t uhf;
 	uhf_ptr = &uhf;
 80013a8:	4aa1      	ldr	r2, [pc, #644]	; (8001630 <main+0x290>)
 80013aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80013ae:	6013      	str	r3, [r2, #0]
	uart1_ptr = &uart1;
 80013b0:	4aa0      	ldr	r2, [pc, #640]	; (8001634 <main+0x294>)
 80013b2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80013b6:	6013      	str	r3, [r2, #0]
	rs485_ptr = &rs485;
 80013b8:	4a9f      	ldr	r2, [pc, #636]	; (8001638 <main+0x298>)
 80013ba:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80013be:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f001 f822 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f946 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 fad2 	bl	8001970 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013cc:	f000 f9ee 	bl	80017ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80013d0:	f000 fa1a 	bl	8001808 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013d4:	f000 fa4e 	bl	8001874 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013d8:	f000 fa76 	bl	80018c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013dc:	f000 fa9e 	bl	800191c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80013e0:	f000 f992 	bl	8001708 <MX_ADC1_Init>
  MX_CRC_Init();
 80013e4:	f000 f9ce 	bl	8001784 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	toneUhfInit(UHF_TONE, ID0, &uhf);
 80013e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80013ec:	461a      	mov	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	2007      	movs	r0, #7
 80013f2:	f000 fb1a 	bl	8001a2a <toneUhfInit>
	ledInit(&led);
 80013f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fa2a 	bl	8000854 <ledInit>
	rs485Init(&rs485);
 8001400:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fb6d 	bl	8001ae4 <rs485Init>
	//uart1Init(HS16_CLK, BAUD_RATE, &uart1);

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 800140a:	4a8c      	ldr	r2, [pc, #560]	; (800163c <main+0x29c>)
 800140c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001410:	6013      	str	r3, [r2, #0]
	lora_ptr = &loraRx;
 8001412:	4a8a      	ldr	r2, [pc, #552]	; (800163c <main+0x29c>)
 8001414:	463b      	mov	r3, r7
 8001416:	6013      	str	r3, [r2, #0]

	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <main+0x2a0>)
 800141a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 800141e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001422:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8001426:	4b86      	ldr	r3, [pc, #536]	; (8001640 <main+0x2a0>)
 8001428:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	lora_hw.nss.pin = LORA_NSS_Pin;
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001432:	4b83      	ldr	r3, [pc, #524]	; (8001640 <main+0x2a0>)
 8001434:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	lora_hw.reset.pin = LORA_RST_Pin;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	loraTx.hw = &lora_hw;
 800143e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001442:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001446:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800144a:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 800144c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001450:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001454:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001458:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 800145a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800145e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001462:	4a78      	ldr	r2, [pc, #480]	; (8001644 <main+0x2a4>)
 8001464:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	loraRx.spi = &hspi1;
 8001468:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800146c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001470:	4a74      	ldr	r2, [pc, #464]	; (8001644 <main+0x2a4>)
 8001472:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2101      	movs	r1, #1
 800147a:	4871      	ldr	r0, [pc, #452]	; (8001640 <main+0x2a0>)
 800147c:	f001 fd21 	bl	8002ec2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2102      	movs	r1, #2
 8001484:	486e      	ldr	r0, [pc, #440]	; (8001640 <main+0x2a0>)
 8001486:	f001 fd1c 	bl	8002ec2 <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 800148a:	2101      	movs	r1, #1
 800148c:	486d      	ldr	r0, [pc, #436]	; (8001644 <main+0x2a4>)
 800148e:	f7fe ffeb 	bl	8000468 <readRegister>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800149a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800149e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 80014a2:	2101      	movs	r1, #1
 80014a4:	4867      	ldr	r0, [pc, #412]	; (8001644 <main+0x2a4>)
 80014a6:	f7fe ffdf 	bl	8000468 <readRegister>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80014b2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80014b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraTx.status = UNKNOW;
 80014ba:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80014be:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	loraRx.status = UNKNOW;
 80014c8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80014cc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TX_MODE = true;
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <main+0x2a8>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
	RX_MODE = false;
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <main+0x2ac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
	int counter = HAL_GetTick();
 80014e2:	f000 ffe9 	bl	80024b8 <HAL_GetTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
	int change = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
	int master;
	int valueTx = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
	int valueRx = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		 master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 80014fe:	2108      	movs	r1, #8
 8001500:	484f      	ldr	r0, [pc, #316]	; (8001640 <main+0x2a0>)
 8001502:	f001 fcc7 	bl	8002e94 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		 if (master == 1) {
 800150c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001510:	2b01      	cmp	r3, #1
 8001512:	d118      	bne.n	8001546 <main+0x1a6>
			 valueRx = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
				TX_MODE = true;
 800151a:	4b4b      	ldr	r3, [pc, #300]	; (8001648 <main+0x2a8>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
				RX_MODE = false;
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <main+0x2ac>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
				valueTx +=1;
 8001526:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800152a:	3301      	adds	r3, #1
 800152c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
				if(valueTx == 1){
 8001530:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <main+0x1a6>
				loraTx.status = UNKNOW;
 8001538:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800153c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				}
		 } if(master == 0) {
 8001546:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <main+0x1e0>
			 valueTx = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
			    TX_MODE = false;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <main+0x2a8>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
				RX_MODE = true;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <main+0x2ac>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
				valueRx +=1;
 8001560:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001564:	3301      	adds	r3, #1
 8001566:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
				if(valueRx ==1){
 800156a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <main+0x1e0>
				loraRx.status = UNKNOW;
 8001572:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001576:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				}
		 }

		rs485Uart1Decode(&rs485, &uart1);
 8001580:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8001584:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fb3c 	bl	8001c08 <rs485Uart1Decode>
		modeRs485Update(&uart1, &rs485);
 8001590:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8001594:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fec8 	bl	8001330 <modeRs485Update>
		if (TX_MODE) {
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <main+0x2a8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d022      	beq.n	80015ee <main+0x24e>
			RX_MODE_OFF_LED();
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <main+0x2a0>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a24      	ldr	r2, [pc, #144]	; (8001640 <main+0x2a0>)
 80015ae:	f023 0308 	bic.w	r3, r3, #8
 80015b2:	60d3      	str	r3, [r2, #12]
			TX_MODE_ON_LED();
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <main+0x2a0>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <main+0x2a0>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	60d3      	str	r3, [r2, #12]
			if (HAL_GetTick() - counter > 1) {
 80015c0:	f000 ff7a 	bl	80024b8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d90e      	bls.n	80015ee <main+0x24e>
				counter = HAL_GetTick();
 80015d0:	f000 ff72 	bl	80024b8 <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
				transmit(&loraTx);
 80015da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fafc 	bl	8000bdc <transmit>
				change +=1;
 80015e4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
					change = 0;
					loraTx.status = UNKNOW;
				}*/
			}
		}
		if (RX_MODE) {
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <main+0x2ac>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <main+0x282>
			TX_MODE_OFF_LED();
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <main+0x2a0>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <main+0x2a0>)
 80015fc:	f023 0310 	bic.w	r3, r3, #16
 8001600:	60d3      	str	r3, [r2, #12]
			RX_MODE_ON_LED();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <main+0x2a0>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <main+0x2a0>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	60d3      	str	r3, [r2, #12]
			read(&huart1, &loraRx);
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <main+0x2b0>)
 8001614:	f7ff fe0a 	bl	800122c <read>
			change +=1;
 8001618:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800161c:	3301      	adds	r3, #1
 800161e:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
				loraRx.status = UNKNOW;
			}*/

		}

		led_enable_kalive(&led);
 8001622:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f946 	bl	80008b8 <led_enable_kalive>
		 master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800162c:	e767      	b.n	80014fe <main+0x15e>
 800162e:	bf00      	nop
 8001630:	20000244 	.word	0x20000244
 8001634:	2000023c 	.word	0x2000023c
 8001638:	20000240 	.word	0x20000240
 800163c:	20000248 	.word	0x20000248
 8001640:	40010c00 	.word	0x40010c00
 8001644:	20000118 	.word	0x20000118
 8001648:	20000250 	.word	0x20000250
 800164c:	20000251 	.word	0x20000251
 8001650:	20000170 	.word	0x20000170

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2228      	movs	r2, #40	; 0x28
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f003 f9a8 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001692:	2301      	movs	r3, #1
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80016a0:	2300      	movs	r3, #0
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fd67 	bl	800317c <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80016b4:	f000 f9b4 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
 80016ba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 ffd3 	bl	8003680 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016e0:	f000 f99e 	bl	8001a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016e4:	2302      	movs	r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 f95e 	bl	80039b0 <HAL_RCCEx_PeriphCLKConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016fa:	f000 f991 	bl	8001a20 <Error_Handler>
  }
}
 80016fe:	bf00      	nop
 8001700:	3750      	adds	r7, #80	; 0x50
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_ADC1_Init+0x74>)
 800171a:	4a19      	ldr	r2, [pc, #100]	; (8001780 <MX_ADC1_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_ADC1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_ADC1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_ADC1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_ADC1_Init+0x74>)
 8001732:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <MX_ADC1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_ADC1_Init+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <MX_ADC1_Init+0x74>)
 8001746:	f000 fee5 	bl	8002514 <HAL_ADC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001750:	f000 f966 	bl	8001a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001758:	2301      	movs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_ADC1_Init+0x74>)
 8001766:	f000 ffad 	bl	80026c4 <HAL_ADC_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001770:	f000 f956 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000008c 	.word	0x2000008c
 8001780:	40012400 	.word	0x40012400

08001784 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_CRC_Init+0x20>)
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <MX_CRC_Init+0x24>)
 800178c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_CRC_Init+0x20>)
 8001790:	f001 f9df 	bl	8002b52 <HAL_CRC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800179a:	f000 f941 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000bc 	.word	0x200000bc
 80017a8:	40023000 	.word	0x40023000

080017ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <MX_I2C1_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_I2C1_Init+0x58>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_I2C1_Init+0x50>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_I2C1_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_I2C1_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_I2C1_Init+0x50>)
 80017ea:	f001 fb83 	bl	8002ef4 <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f4:	f000 f914 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200000c4 	.word	0x200000c4
 8001800:	40005400 	.word	0x40005400
 8001804:	000186a0 	.word	0x000186a0

08001808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_SPI1_Init+0x64>)
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <MX_SPI1_Init+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <MX_SPI1_Init+0x64>)
 8001814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_SPI1_Init+0x64>)
 8001834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_SPI1_Init+0x64>)
 800183c:	2218      	movs	r2, #24
 800183e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_SPI1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_SPI1_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_SPI1_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_SPI1_Init+0x64>)
 8001854:	220a      	movs	r2, #10
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_SPI1_Init+0x64>)
 800185a:	f002 f95f 	bl	8003b1c <HAL_SPI_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001864:	f000 f8dc 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000118 	.word	0x20000118
 8001870:	40013000 	.word	0x40013000

08001874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <MX_USART1_UART_Init+0x50>)
 800187c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018ac:	f002 fea2 	bl	80045f4 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018b6:	f000 f8b3 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000170 	.word	0x20000170
 80018c4:	40013800 	.word	0x40013800

080018c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_USART2_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 8001900:	f002 fe78 	bl	80045f4 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f000 f889 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200001b4 	.word	0x200001b4
 8001918:	40004400 	.word	0x40004400

0800191c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_USART3_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART3_UART_Init+0x4c>)
 8001954:	f002 fe4e 	bl	80045f4 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f85f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001f8 	.word	0x200001f8
 800196c:	40004800 	.word	0x40004800

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <MX_GPIO_Init+0xa8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <MX_GPIO_Init+0xa8>)
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_GPIO_Init+0xa8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_GPIO_Init+0xa8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <MX_GPIO_Init+0xa8>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_GPIO_Init+0xa8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <MX_GPIO_Init+0xa8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <MX_GPIO_Init+0xa8>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <MX_GPIO_Init+0xa8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 80019cc:	2200      	movs	r2, #0
 80019ce:	f247 3133 	movw	r1, #29491	; 0x7333
 80019d2:	4812      	ldr	r0, [pc, #72]	; (8001a1c <MX_GPIO_Init+0xac>)
 80019d4:	f001 fa75 	bl	8002ec2 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
                           LORA_BUSSY_Pin LED2_Pin LED1_Pin RS485_DE_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 80019d8:	f247 3333 	movw	r3, #29491	; 0x7333
 80019dc:	613b      	str	r3, [r7, #16]
                          |LORA_BUSSY_Pin|LED2_Pin|LED1_Pin|RS485_DE_Pin
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <MX_GPIO_Init+0xac>)
 80019f2:	f001 f8cb 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 80019f6:	2308      	movs	r3, #8
 80019f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	4619      	mov	r1, r3
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <MX_GPIO_Init+0xac>)
 8001a0a:	f001 f8bf 	bl	8002b8c <HAL_GPIO_Init>

}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010c00 	.word	0x40010c00

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a28:	e7fe      	b.n	8001a28 <Error_Handler+0x8>

08001a2a <toneUhfInit>:
	/* PA3  PA_HAB as output - ENABLE - DISABLE PA */
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODE3_0);
	//CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE3_1);
}

void toneUhfInit(Function_t funcion, Id_t id, Tone_uhf_t *uhf) {
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	603a      	str	r2, [r7, #0]
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	460b      	mov	r3, r1
 8001a38:	71bb      	strb	r3, [r7, #6]
	uhf->ON_OFF = 0;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	uhf->FreqBase = 0;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
	uhf->FreqOut = 0;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	uhf->PdBm = 0;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	731a      	strb	r2, [r3, #12]
	uhf->function = funcion;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	739a      	strb	r2, [r3, #14]
	uhf->id = id;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	79ba      	ldrb	r2, [r7, #6]
 8001a5c:	735a      	strb	r2, [r3, #13]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 8001a74:	f241 0321 	movw	r3, #4129	; 0x1021
 8001a78:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;			 // CRC value is 16bit
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	81bb      	strh	r3, [r7, #12]

	for (b = 0; b < buff_len; b++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e025      	b.n	8001ad0 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	4053      	eors	r3, r2
 8001a96:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73bb      	strb	r3, [r7, #14]
 8001a9c:	e012      	b.n	8001ac4 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8001a9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	da08      	bge.n	8001ab8 <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ab0:	4053      	eors	r3, r2
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	81bb      	strh	r3, [r7, #12]
 8001ab6:	e002      	b.n	8001abe <crc_get+0x56>
			else
				crc <<= 1;
 8001ab8:	89bb      	ldrh	r3, [r7, #12]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	73bb      	strb	r3, [r7, #14]
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d9e9      	bls.n	8001a9e <crc_get+0x36>
	for (b = 0; b < buff_len; b++) {
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3d5      	bcc.n	8001a84 <crc_get+0x1c>
		}
	}
	return crc;
 8001ad8:	89bb      	ldrh	r3, [r7, #12]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <rs485Init>:

void rs485Init(RS485_t *r) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2207      	movs	r2, #7
 8001af6:	721a      	strb	r2, [r3, #8]
	r->cmd = NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	/* PB8 DE485 as output  */
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <rs485Init+0x3c>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <rs485Init+0x3c>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <rs485Init+0x3c>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <rs485Init+0x3c>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b14:	60d3      	str	r3, [r2, #12]

}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40010c00 	.word	0x40010c00

08001b24 <rs485_check_frame>:
Rs485_status_t rs485_check_frame(RS485_t *r, UART1_t *u) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]

	if (u->rxCount > (MINIMUN_FRAME_LEN)) {
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001b34:	2b06      	cmp	r3, #6
 8001b36:	d913      	bls.n	8001b60 <rs485_check_frame+0x3c>
		if (u->rxBuffer[0] == LTEL_START_MARK) {
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	227e      	movs	r2, #126	; 0x7e
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10c      	bne.n	8001b5c <rs485_check_frame+0x38>
			if (u->rxBuffer[u->rxCount - 1] == LTEL_END_MARK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	227f      	movs	r2, #127	; 0x7f
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <rs485_check_frame+0x34>
				return VALID_FRAME;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e004      	b.n	8001b62 <rs485_check_frame+0x3e>
			else
				return START_READING;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e002      	b.n	8001b62 <rs485_check_frame+0x3e>
		} else
			return NOT_VALID_FRAME;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <rs485_check_frame+0x3e>
	} else

		return WAITING;
 8001b60:	2308      	movs	r3, #8
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <rs485_check_CRC_module>:

Rs485_status_t rs485_check_CRC_module(UART1_t *uart1) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = uart1->rxBuffer[8] << 8;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a1b      	ldrb	r3, [r3, #8]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	60fb      	str	r3, [r7, #12]
	crc_save |= uart1->rxBuffer[9];
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7a5b      	ldrb	r3, [r3, #9]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(uart1->rxBuffer[1]), 7);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	2107      	movs	r1, #7
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff6a 	bl	8001a68 <crc_get>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d101      	bne.n	8001ba4 <rs485_check_CRC_module+0x38>
		return DATA_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <rs485_check_CRC_module+0x3a>
	return CRC_ERROR;
 8001ba4:	2306      	movs	r3, #6
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <rs485_check_valid_module>:

Rs485_status_t rs485_check_valid_module(UART1_t *uart1) {
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	if (uart1->rxBuffer[1] == UHF_TONE) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b07      	cmp	r3, #7
 8001bbc:	d11c      	bne.n	8001bf8 <rs485_check_valid_module+0x4a>
		if (uart1->rxBuffer[2] == ID0) {
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	789b      	ldrb	r3, [r3, #2]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <rs485_check_valid_module+0x46>
			for (int i = 3; i < uart1->rxCount; i++)
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e00b      	b.n	8001be4 <rs485_check_valid_module+0x36>
				if (uart1->rxBuffer[i] == LTEL_END_MARK)
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	227f      	movs	r2, #127	; 0x7f
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <rs485_check_valid_module+0x30>
					return VALID_MODULE;
 8001bda:	2309      	movs	r3, #9
 8001bdc:	e00f      	b.n	8001bfe <rs485_check_valid_module+0x50>
			for (int i = 3; i < uart1->rxCount; i++)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3301      	adds	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	dbec      	blt.n	8001bcc <rs485_check_valid_module+0x1e>
 8001bf2:	e003      	b.n	8001bfc <rs485_check_valid_module+0x4e>
		} else
			return WRONG_MODULE_ID;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	e002      	b.n	8001bfe <rs485_check_valid_module+0x50>
	} else
		return WRONG_MODULE_FUNCTION;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e000      	b.n	8001bfe <rs485_check_valid_module+0x50>
	return WRONG_MODULE_FUNCTION;
 8001bfc:	2304      	movs	r3, #4
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <rs485Uart1Decode>:

void rs485Uart1Decode(RS485_t *rs485, UART1_t *uart1) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	switch (rs485->status) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7a1b      	ldrb	r3, [r3, #8]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	f200 8083 	bhi.w	8001d22 <rs485Uart1Decode+0x11a>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <rs485Uart1Decode+0x1c>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c73 	.word	0x08001c73
 8001c2c:	08001c8f 	.word	0x08001c8f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001ccd 	.word	0x08001ccd
 8001c38:	08001cb9 	.word	0x08001cb9
 8001c3c:	08001ce1 	.word	0x08001ce1
 8001c40:	08001d0f 	.word	0x08001d0f
 8001c44:	08001cf5 	.word	0x08001cf5
 8001c48:	08001c4d 	.word	0x08001c4d
	case VALID_MODULE:
		rs485->status = rs485_check_CRC_module(uart1);
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f7ff ff8d 	bl	8001b6c <rs485_check_CRC_module>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	721a      	strb	r2, [r3, #8]
		break;
 8001c5a:	e06a      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case DATA_OK:
		rs485->cmd = uart1->rxBuffer[3];
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	78da      	ldrb	r2, [r3, #3]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	701a      	strb	r2, [r3, #0]
		uart1_send_str("DATA OK\r\n");
 8001c64:	4835      	ldr	r0, [pc, #212]	; (8001d3c <rs485Uart1Decode+0x134>)
 8001c66:	f000 fb68 	bl	800233a <uart1_send_str>
		rs485->status = DONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	721a      	strb	r2, [r3, #8]
		break;
 8001c70:	e05f      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case START_READING:
		rs485->status = WAITING;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2208      	movs	r2, #8
 8001c76:	721a      	strb	r2, [r3, #8]
		if (uart1_clean_by_timeout(uart1, "START_READING"))
 8001c78:	4931      	ldr	r1, [pc, #196]	; (8001d40 <rs485Uart1Decode+0x138>)
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f000 faae 	bl	80021dc <uart1_clean_by_timeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d054      	beq.n	8001d30 <rs485Uart1Decode+0x128>
			rs485->status = DONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2207      	movs	r2, #7
 8001c8a:	721a      	strb	r2, [r3, #8]
		break;
 8001c8c:	e050      	b.n	8001d30 <rs485Uart1Decode+0x128>
	case VALID_FRAME:
		rs485->status = rs485_check_valid_module(uart1);
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f7ff ff8d 	bl	8001bae <rs485_check_valid_module>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	721a      	strb	r2, [r3, #8]
		break;
 8001c9c:	e049      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case NOT_VALID_FRAME:
		HAL_Delay(50);
 8001c9e:	2032      	movs	r0, #50	; 0x32
 8001ca0:	f000 fc14 	bl	80024cc <HAL_Delay>
	    uart1_send_str("NOT VALID FRAME\r\n");
 8001ca4:	4827      	ldr	r0, [pc, #156]	; (8001d44 <rs485Uart1Decode+0x13c>)
 8001ca6:	f000 fb48 	bl	800233a <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f000 fb61 	bl	8002372 <uart1_clean_buffer>
		rs485->status = DONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	721a      	strb	r2, [r3, #8]
		break;
 8001cb6:	e03c      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_ID:
		uart1_send_str("WRONG MODULE ID\r\n");
 8001cb8:	4823      	ldr	r0, [pc, #140]	; (8001d48 <rs485Uart1Decode+0x140>)
 8001cba:	f000 fb3e 	bl	800233a <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f000 fb57 	bl	8002372 <uart1_clean_buffer>
		rs485->status = DONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	721a      	strb	r2, [r3, #8]
		break;
 8001cca:	e032      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case WRONG_MODULE_FUNCTION:
		uart1_send_str("WRONG MODULE FUNCTION\r\n");
 8001ccc:	481f      	ldr	r0, [pc, #124]	; (8001d4c <rs485Uart1Decode+0x144>)
 8001cce:	f000 fb34 	bl	800233a <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f000 fb4d 	bl	8002372 <uart1_clean_buffer>
		rs485->status = DONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2207      	movs	r2, #7
 8001cdc:	721a      	strb	r2, [r3, #8]
		break;
 8001cde:	e028      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case CRC_ERROR:
		uart1_send_str("CRC ERROR\r\n");
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <rs485Uart1Decode+0x148>)
 8001ce2:	f000 fb2a 	bl	800233a <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f000 fb43 	bl	8002372 <uart1_clean_buffer>
		rs485->status = DONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	721a      	strb	r2, [r3, #8]
		break;
 8001cf2:	e01e      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case WAITING:
		rs485->status = rs485_check_frame(rs485, uart1);
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff14 	bl	8001b24 <rs485_check_frame>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	721a      	strb	r2, [r3, #8]
		uart1_clean_by_timeout(uart1, "WAITING");
 8001d04:	4913      	ldr	r1, [pc, #76]	; (8001d54 <rs485Uart1Decode+0x14c>)
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f000 fa68 	bl	80021dc <uart1_clean_by_timeout>
		break;
 8001d0c:	e011      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	case DONE:
		uart1_send_str("DONE\r\n");
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <rs485Uart1Decode+0x150>)
 8001d10:	f000 fb13 	bl	800233a <uart1_send_str>
		uart1_clean_buffer(uart1);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f000 fb2c 	bl	8002372 <uart1_clean_buffer>
		rs485->status = WAITING;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	721a      	strb	r2, [r3, #8]
		break;
 8001d20:	e007      	b.n	8001d32 <rs485Uart1Decode+0x12a>
	default:
		rs485->status = DONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2207      	movs	r2, #7
 8001d26:	721a      	strb	r2, [r3, #8]
		uart1_clean_buffer(uart1);
 8001d28:	6838      	ldr	r0, [r7, #0]
 8001d2a:	f000 fb22 	bl	8002372 <uart1_clean_buffer>
		break;
 8001d2e:	e000      	b.n	8001d32 <rs485Uart1Decode+0x12a>
		break;
 8001d30:	bf00      	nop
	}
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	080053ec 	.word	0x080053ec
 8001d40:	080053f8 	.word	0x080053f8
 8001d44:	08005408 	.word	0x08005408
 8001d48:	0800541c 	.word	0x0800541c
 8001d4c:	08005430 	.word	0x08005430
 8001d50:	08005448 	.word	0x08005448
 8001d54:	08005454 	.word	0x08005454
 8001d58:	0800545c 	.word	0x0800545c

08001d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_MspInit+0x60>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_MspInit+0x60>)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_ADC_MspInit+0x6c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d121      	bne.n	8001e24 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_ADC_MspInit+0x70>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001e10:	2313      	movs	r3, #19
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e14:	2303      	movs	r3, #3
 8001e16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_ADC_MspInit+0x74>)
 8001e20:	f000 feb4 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012400 	.word	0x40012400
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010800 	.word	0x40010800

08001e38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_CRC_MspInit+0x34>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10b      	bne.n	8001e62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_CRC_MspInit+0x38>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_CRC_MspInit+0x38>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6153      	str	r3, [r2, #20]
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_CRC_MspInit+0x38>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40023000 	.word	0x40023000
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_I2C_MspInit+0x70>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d123      	bne.n	8001edc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eac:	23c0      	movs	r3, #192	; 0xc0
 8001eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_I2C_MspInit+0x78>)
 8001ec0:	f000 fe64 	bl	8002b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ece:	61d3      	str	r3, [r2, #28]
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_I2C_MspInit+0x74>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40005400 	.word	0x40005400
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010c00 	.word	0x40010c00

08001ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d12f      	bne.n	8001f70 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f40:	23a0      	movs	r3, #160	; 0xa0
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <HAL_SPI_MspInit+0x90>)
 8001f54:	f000 fe1a 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_SPI_MspInit+0x90>)
 8001f6c:	f000 fe0e 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40013000 	.word	0x40013000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0320 	add.w	r3, r7, #32
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_UART_MspInit+0x178>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d13a      	bne.n	800201a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8001fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4846      	ldr	r0, [pc, #280]	; (8002104 <HAL_UART_MspInit+0x180>)
 8001fea:	f000 fdcf 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8001fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	4619      	mov	r1, r3
 8002002:	4840      	ldr	r0, [pc, #256]	; (8002104 <HAL_UART_MspInit+0x180>)
 8002004:	f000 fdc2 	bl	8002b8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2025      	movs	r0, #37	; 0x25
 800200e:	f000 fd6a 	bl	8002ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002012:	2025      	movs	r0, #37	; 0x25
 8002014:	f000 fd83 	bl	8002b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002018:	e06c      	b.n	80020f4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_UART_MspInit+0x184>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d130      	bne.n	8002086 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a35      	ldr	r2, [pc, #212]	; (8002100 <HAL_UART_MspInit+0x17c>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202e:	61d3      	str	r3, [r2, #28]
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_UART_MspInit+0x17c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_UART_MspInit+0x17c>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002054:	2304      	movs	r3, #4
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4619      	mov	r1, r3
 8002066:	4827      	ldr	r0, [pc, #156]	; (8002104 <HAL_UART_MspInit+0x180>)
 8002068:	f000 fd90 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206c:	2308      	movs	r3, #8
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	4619      	mov	r1, r3
 800207e:	4821      	ldr	r0, [pc, #132]	; (8002104 <HAL_UART_MspInit+0x180>)
 8002080:	f000 fd84 	bl	8002b8c <HAL_GPIO_Init>
}
 8002084:	e036      	b.n	80020f4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a20      	ldr	r2, [pc, #128]	; (800210c <HAL_UART_MspInit+0x188>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d131      	bne.n	80020f4 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_UART_MspInit+0x17c>)
 8002096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_UART_MspInit+0x17c>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_UART_MspInit+0x17c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_UART_MspInit+0x17c>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_UART_MspInit+0x17c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 80020c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	4619      	mov	r1, r3
 80020d4:	480e      	ldr	r0, [pc, #56]	; (8002110 <HAL_UART_MspInit+0x18c>)
 80020d6:	f000 fd59 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80020da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	4619      	mov	r1, r3
 80020ee:	4808      	ldr	r0, [pc, #32]	; (8002110 <HAL_UART_MspInit+0x18c>)
 80020f0:	f000 fd4c 	bl	8002b8c <HAL_GPIO_Init>
}
 80020f4:	bf00      	nop
 80020f6:	3730      	adds	r7, #48	; 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40013800 	.word	0x40013800
 8002100:	40021000 	.word	0x40021000
 8002104:	40010800 	.word	0x40010800
 8002108:	40004400 	.word	0x40004400
 800210c:	40004800 	.word	0x40004800
 8002110:	40010c00 	.word	0x40010c00

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x4>

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215a:	f000 f99b 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f002 fbe6 	bl	8004964 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20005000 	.word	0x20005000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000254 	.word	0x20000254
 80021cc:	20000270 	.word	0x20000270

080021d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <uart1_clean_by_timeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  uart1_clean_by_timeout(UART1_t* uart1,const char* str){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 80021e6:	f000 f967 	bl	80024b8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d914      	bls.n	8002226 <uart1_clean_by_timeout+0x4a>
			uart1_send_str((char*)str);
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f000 f89c 	bl	800233a <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <uart1_clean_by_timeout+0x54>)
 8002204:	f000 f899 	bl	800233a <uart1_send_str>
			if(strlen(str)>0)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <uart1_clean_by_timeout+0x3a>
				uart1_clean_buffer(uart1);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8ae 	bl	8002372 <uart1_clean_buffer>
			uart1->timeout = HAL_GetTick();
 8002216:	f000 f94f 	bl	80024b8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return 1;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <uart1_clean_by_timeout+0x4c>
		}
		return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	08005464 	.word	0x08005464

08002234 <uart1_write>:

	/* set the destination buffer */
	/*set the source buffer */
}

void uart1_write(char ch) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <uart1_write+0x50>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <uart1_write+0x50>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 800224a:	bf00      	nop
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <uart1_write+0x54>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f9      	beq.n	800224c <uart1_write+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <uart1_write+0x54>)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 800225e:	bf00      	nop
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <uart1_write+0x54>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f9      	beq.n	8002260 <uart1_write+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <uart1_write+0x50>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <uart1_write+0x50>)
 8002272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010c00 	.word	0x40010c00
 8002288:	40013800 	.word	0x40013800

0800228c <uart1_1byte_read>:
		}
		data[0] = USART1->DR;
	}
}

uint8_t uart1_1byte_read(void) {
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->SR, USART_SR_ORE);
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <uart1_1byte_read+0x64>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	71fb      	strb	r3, [r7, #7]
	bool data_present = READ_BIT(USART1->SR, USART_SR_RXNE);
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <uart1_1byte_read+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	71bb      	strb	r3, [r7, #6]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <uart1_1byte_read+0x36>
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00f      	beq.n	80022e2 <uart1_1byte_read+0x56>
		if (override)
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <uart1_1byte_read+0x48>
			SET_BIT(USART1->SR, USART_SR_ORE);
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <uart1_1byte_read+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <uart1_1byte_read+0x64>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6013      	str	r3, [r2, #0]
		data = USART1->DR;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <uart1_1byte_read+0x64>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	717b      	strb	r3, [r7, #5]
		return data;
 80022dc:	797b      	ldrb	r3, [r7, #5]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	e000      	b.n	80022e4 <uart1_1byte_read+0x58>
	} else
		return '\0';
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40013800 	.word	0x40013800

080022f4 <uart1_read_to_frame>:

void  uart1_read_to_frame(UART1_t *u) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	if (u->rxCount >= RX_BUFFLEN) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002302:	2b18      	cmp	r3, #24
 8002304:	d906      	bls.n	8002314 <uart1_read_to_frame+0x20>
		uart1_clean_buffer(u);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f833 	bl	8002372 <uart1_clean_buffer>
		u->rxCount = 0;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	}
	u->rxBuffer[u->rxCount++] = uart1_1byte_read();
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	b2d1      	uxtb	r1, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
 8002324:	461c      	mov	r4, r3
 8002326:	f7ff ffb1 	bl	800228c <uart1_1byte_read>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	551a      	strb	r2, [r3, r4]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <uart1_send_str>:

void uart1_send_str(char *str) {
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e009      	b.n	800235c <uart1_send_str+0x22>
		uart1_write(str[i]);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff6f 	bl	8002234 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <uart1_send_str+0xe>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <uart1_clean_buffer>:
			str[i] = (char) '\0';
		}
	}
}

void uart1_clean_buffer(UART1_t *u) {
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	u->rxCount = 0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	if (TX_BUFFLEN > RX_BUFFLEN) {
		for (int i = 0; i < TX_BUFFLEN; i++) {
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e010      	b.n	80023aa <uart1_clean_buffer+0x38>
			if (i < RX_BUFFLEN)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b18      	cmp	r3, #24
 800238c:	dc04      	bgt.n	8002398 <uart1_clean_buffer+0x26>
				u->rxBuffer[i] = 0x00;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
			u->txBuffer[i] = 0x00;
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	3319      	adds	r3, #25
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TX_BUFFLEN; i++) {
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b63      	cmp	r3, #99	; 0x63
 80023ae:	ddeb      	ble.n	8002388 <uart1_clean_buffer+0x16>
			if (i < TX_BUFFLEN)
				u->txBuffer[i] = 0x00;
			u->rxBuffer[i] = 0x00;
		}
	}
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023e2:	f7ff fef5 	bl	80021d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f002 fac3 	bl	8004970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7fe ffd9 	bl	80013a0 <main>
  bx lr
 80023ee:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023f8:	0800553c 	.word	0x0800553c
  ldr r2, =_sbss
 80023fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002400:	2000026c 	.word	0x2000026c

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_Init+0x28>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_Init+0x28>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 fb59 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fc9a 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fb71 	bl	8002b3a <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 fb39 	bl	8002ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	20000008 	.word	0x20000008
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_IncTick+0x1c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_IncTick+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <HAL_IncTick+0x20>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000008 	.word	0x20000008
 80024b4:	20000258 	.word	0x20000258

080024b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <HAL_GetTick+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000258 	.word	0x20000258

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d005      	beq.n	80024f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_Delay+0x44>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f2:	bf00      	nop
 80024f4:	f7ff ffe0 	bl	80024b8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d8f7      	bhi.n	80024f4 <HAL_Delay+0x28>
  {
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008

08002514 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0be      	b.n	80026b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fc34 	bl	8001dc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9ab 	bl	80028b4 <ADC_ConversionStop_Disable>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8099 	bne.w	80026a2 <HAL_ADC_Init+0x18e>
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 8095 	bne.w	80026a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002580:	f023 0302 	bic.w	r3, r3, #2
 8002584:	f043 0202 	orr.w	r2, r3, #2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002594:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7b1b      	ldrb	r3, [r3, #12]
 800259a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800259c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ac:	d003      	beq.n	80025b6 <HAL_ADC_Init+0xa2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_ADC_Init+0xa8>
 80025b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ba:	e000      	b.n	80025be <HAL_ADC_Init+0xaa>
 80025bc:	2300      	movs	r3, #0
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7d1b      	ldrb	r3, [r3, #20]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d119      	bne.n	8002600 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7b1b      	ldrb	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	3b01      	subs	r3, #1
 80025da:	035a      	lsls	r2, r3, #13
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e00b      	b.n	8002600 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_ADC_Init+0x1a8>)
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	430b      	orrs	r3, r1
 8002626:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002630:	d003      	beq.n	800263a <HAL_ADC_Init+0x126>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d104      	bne.n	8002644 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	3b01      	subs	r3, #1
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	430a      	orrs	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_ADC_Init+0x1ac>)
 8002660:	4013      	ands	r3, r2
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d10b      	bne.n	8002680 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800267e:	e018      	b.n	80026b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f023 0312 	bic.w	r3, r3, #18
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a0:	e007      	b.n	80026b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	ffe1f7fd 	.word	0xffe1f7fd
 80026c0:	ff1f0efe 	.word	0xff1f0efe

080026c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x20>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0dc      	b.n	800289e <HAL_ADC_ConfigChannel+0x1da>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d81c      	bhi.n	800272e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	3b05      	subs	r3, #5
 8002706:	221f      	movs	r2, #31
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	4019      	ands	r1, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b05      	subs	r3, #5
 8002720:	fa00 f203 	lsl.w	r2, r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	635a      	str	r2, [r3, #52]	; 0x34
 800272c:	e03c      	b.n	80027a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d81c      	bhi.n	8002770 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b23      	subs	r3, #35	; 0x23
 8002748:	221f      	movs	r2, #31
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	4019      	ands	r1, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b23      	subs	r3, #35	; 0x23
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	e01b      	b.n	80027a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b41      	subs	r3, #65	; 0x41
 8002782:	221f      	movs	r2, #31
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	4019      	ands	r1, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b41      	subs	r3, #65	; 0x41
 800279c:	fa00 f203 	lsl.w	r2, r0, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b09      	cmp	r3, #9
 80027ae:	d91c      	bls.n	80027ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	3b1e      	subs	r3, #30
 80027c2:	2207      	movs	r2, #7
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	4019      	ands	r1, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6898      	ldr	r0, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	3b1e      	subs	r3, #30
 80027dc:	fa00 f203 	lsl.w	r2, r0, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	e019      	b.n	800281e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6919      	ldr	r1, [r3, #16]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	2207      	movs	r2, #7
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	4019      	ands	r1, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6898      	ldr	r0, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d003      	beq.n	800282e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800282a:	2b11      	cmp	r3, #17
 800282c:	d132      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d125      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d126      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002854:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b10      	cmp	r3, #16
 800285c:	d11a      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	0c9a      	lsrs	r2, r3, #18
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002874:	e002      	b.n	800287c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3b01      	subs	r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f9      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x1b2>
 8002882:	e007      	b.n	8002894 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012400 	.word	0x40012400
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83

080028b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12e      	bne.n	800292c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028de:	f7ff fdeb 	bl	80024b8 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028e4:	e01b      	b.n	800291e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028e6:	f7ff fde7 	bl	80024b8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d914      	bls.n	800291e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10d      	bne.n	800291e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d0dc      	beq.n	80028e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4906      	ldr	r1, [pc, #24]	; (80029d0 <__NVIC_EnableIRQ+0x34>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9c:	d301      	bcc.n	8002aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <SysTick_Config+0x40>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aaa:	210f      	movs	r1, #15
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f7ff ff90 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <SysTick_Config+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <SysTick_Config+0x40>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff2d 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff42 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff90 	bl	8002a28 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5f 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff35 	bl	800299c <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa2 	bl	8002a8c <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e00e      	b.n	8002b82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	795b      	ldrb	r3, [r3, #5]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff f95f 	bl	8001e38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	e169      	b.n	8002e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 8158 	bne.w	8002e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a9a      	ldr	r2, [pc, #616]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d05e      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bc8:	4a98      	ldr	r2, [pc, #608]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d875      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bce:	4a98      	ldr	r2, [pc, #608]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d058      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a96      	ldr	r2, [pc, #600]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d86f      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bda:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d052      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002be0:	4a94      	ldr	r2, [pc, #592]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d869      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002be6:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04c      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bec:	4a92      	ldr	r2, [pc, #584]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d863      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bf2:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d046      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d85d      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d82a      	bhi.n	8002c58 <HAL_GPIO_Init+0xcc>
 8002c02:	2b12      	cmp	r3, #18
 8002c04:	d859      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_GPIO_Init+0x80>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c87 	.word	0x08002c87
 8002c10:	08002c61 	.word	0x08002c61
 8002c14:	08002c73 	.word	0x08002c73
 8002c18:	08002cb5 	.word	0x08002cb5
 8002c1c:	08002cbb 	.word	0x08002cbb
 8002c20:	08002cbb 	.word	0x08002cbb
 8002c24:	08002cbb 	.word	0x08002cbb
 8002c28:	08002cbb 	.word	0x08002cbb
 8002c2c:	08002cbb 	.word	0x08002cbb
 8002c30:	08002cbb 	.word	0x08002cbb
 8002c34:	08002cbb 	.word	0x08002cbb
 8002c38:	08002cbb 	.word	0x08002cbb
 8002c3c:	08002cbb 	.word	0x08002cbb
 8002c40:	08002cbb 	.word	0x08002cbb
 8002c44:	08002cbb 	.word	0x08002cbb
 8002c48:	08002cbb 	.word	0x08002cbb
 8002c4c:	08002cbb 	.word	0x08002cbb
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c7d 	.word	0x08002c7d
 8002c58:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_GPIO_Init+0x2b4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c5e:	e02c      	b.n	8002cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	623b      	str	r3, [r7, #32]
          break;
 8002c66:	e029      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e024      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	3308      	adds	r3, #8
 8002c78:	623b      	str	r3, [r7, #32]
          break;
 8002c7a:	e01f      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	330c      	adds	r3, #12
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e01a      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e013      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	611a      	str	r2, [r3, #16]
          break;
 8002ca6:	e009      	b.n	8002cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	615a      	str	r2, [r3, #20]
          break;
 8002cb2:	e003      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          break;
 8002cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d801      	bhi.n	8002cc6 <HAL_GPIO_Init+0x13a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	e001      	b.n	8002cca <HAL_GPIO_Init+0x13e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_GPIO_Init+0x14c>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x152>
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3b08      	subs	r3, #8
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	210f      	movs	r1, #15
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	6a39      	ldr	r1, [r7, #32]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80b1 	beq.w	8002e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HAL_GPIO_Init+0x2c0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_GPIO_Init+0x1ec>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_GPIO_Init+0x2c4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_Init+0x1e8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3e      	ldr	r2, [pc, #248]	; (8002e54 <HAL_GPIO_Init+0x2c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x1e4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <HAL_GPIO_Init+0x2cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_Init+0x1e0>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e004      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	f002 0203 	and.w	r2, r2, #3
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	4093      	lsls	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d8a:	492f      	ldr	r1, [pc, #188]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	492c      	ldr	r1, [pc, #176]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4928      	ldr	r1, [pc, #160]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4922      	ldr	r1, [pc, #136]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	491e      	ldr	r1, [pc, #120]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4914      	ldr	r1, [pc, #80]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
 8002e28:	e021      	b.n	8002e6e <HAL_GPIO_Init+0x2e2>
 8002e2a:	bf00      	nop
 8002e2c:	10320000 	.word	0x10320000
 8002e30:	10310000 	.word	0x10310000
 8002e34:	10220000 	.word	0x10220000
 8002e38:	10210000 	.word	0x10210000
 8002e3c:	10120000 	.word	0x10120000
 8002e40:	10110000 	.word	0x10110000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	40010c00 	.word	0x40010c00
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f ae8e 	bne.w	8002ba0 <HAL_GPIO_Init+0x14>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	372c      	adds	r7, #44	; 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e001      	b.n	8002eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ed2:	787b      	ldrb	r3, [r7, #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ede:	e003      	b.n	8002ee8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	041a      	lsls	r2, r3, #16
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	611a      	str	r2, [r3, #16]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e12b      	b.n	800315e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe ffaa 	bl	8001e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f58:	f000 fce4 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a81      	ldr	r2, [pc, #516]	; (8003168 <HAL_I2C_Init+0x274>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d807      	bhi.n	8002f78 <HAL_I2C_Init+0x84>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_I2C_Init+0x278>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bf94      	ite	ls
 8002f70:	2301      	movls	r3, #1
 8002f72:	2300      	movhi	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	e006      	b.n	8002f86 <HAL_I2C_Init+0x92>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a7d      	ldr	r2, [pc, #500]	; (8003170 <HAL_I2C_Init+0x27c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0e7      	b.n	800315e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4a78      	ldr	r2, [pc, #480]	; (8003174 <HAL_I2C_Init+0x280>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_I2C_Init+0x274>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_I2C_Init+0xd4>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	e009      	b.n	8002fdc <HAL_I2C_Init+0xe8>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_I2C_Init+0x284>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	3301      	adds	r3, #1
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	495c      	ldr	r1, [pc, #368]	; (8003168 <HAL_I2C_Init+0x274>)
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d819      	bhi.n	8003030 <HAL_I2C_Init+0x13c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e59      	subs	r1, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb1 f3f3 	udiv	r3, r1, r3
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003010:	400b      	ands	r3, r1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_I2C_Init+0x138>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e59      	subs	r1, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fbb1 f3f3 	udiv	r3, r1, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302a:	e051      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800302c:	2304      	movs	r3, #4
 800302e:	e04f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d111      	bne.n	800305c <HAL_I2C_Init+0x168>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e012      	b.n	8003082 <HAL_I2C_Init+0x18e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x196>
 8003086:	2301      	movs	r3, #1
 8003088:	e022      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10e      	bne.n	80030b0 <HAL_I2C_Init+0x1bc>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1e58      	subs	r0, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Init+0x1dc>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6809      	ldr	r1, [r1, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6911      	ldr	r1, [r2, #16]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	000186a0 	.word	0x000186a0
 800316c:	001e847f 	.word	0x001e847f
 8003170:	003d08ff 	.word	0x003d08ff
 8003174:	431bde83 	.word	0x431bde83
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e272      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800319c:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d112      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x12c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e24c      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76>
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7f      	ldr	r2, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xbc>
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003238:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff f92e 	bl	80024b8 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f92a 	bl	80024b8 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e200      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe4>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f91a 	bl	80024b8 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f916 	bl	80024b8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1ec      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x10c>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
 80032ce:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c0      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4939      	ldr	r1, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7ff f8cf 	bl	80024b8 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff f8cb 	bl	80024b8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4927      	ldr	r1, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff f8ae 	bl	80024b8 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff f8aa 	bl	80024b8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e180      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03a      	beq.n	8003400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d019      	beq.n	80033c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7ff f88e 	bl	80024b8 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7ff f88a 	bl	80024b8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e160      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033be:	2001      	movs	r0, #1
 80033c0:	f000 fad8 	bl	8003974 <RCC_Delay>
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7ff f874 	bl	80024b8 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7ff f870 	bl	80024b8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e146      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	42420000 	.word	0x42420000
 80033f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e9      	bne.n	80033d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a6 	beq.w	800355a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7ff f831 	bl	80024b8 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7ff f82d 	bl	80024b8 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e103      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x312>
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	e02d      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x334>
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a69      	ldr	r2, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a66      	ldr	r2, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x356>
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7fe ffe1 	bl	80024b8 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe ffdd 	bl	80024b8 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0b1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x37e>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe ffcb 	bl	80024b8 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe ffc7 	bl	80024b8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e09b      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d061      	beq.n	8003634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d146      	bne.n	8003606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fe ff9b 	bl	80024b8 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe ff97 	bl	80024b8 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e06d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4921      	ldr	r1, [pc, #132]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a19      	ldr	r1, [r3, #32]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe ff6b 	bl	80024b8 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe ff67 	bl	80024b8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e03d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x46a>
 8003604:	e035      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe ff54 	bl	80024b8 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe ff50 	bl	80024b8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e026      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x498>
 8003632:	e01e      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e019      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 8003640:	40021000 	.word	0x40021000
 8003644:	40007000 	.word	0x40007000
 8003648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x500>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d0      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d910      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0207 	bic.w	r2, r3, #7
 80036aa:	4965      	ldr	r1, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d040      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d115      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e073      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06b      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fea2 	bl	80024b8 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fe9e 	bl	80024b8 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e053      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d210      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4922      	ldr	r1, [pc, #136]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f821 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1cc>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1d0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fe00 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	08005480 	.word	0x08005480
 800384c:	20000000 	.word	0x20000000
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b490      	push	{r4, r7}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_RCC_GetSysClockFreq+0xac>)
 800385c:	1d3c      	adds	r4, r7, #4
 800385e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003864:	f240 2301 	movw	r3, #513	; 0x201
 8003868:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x40>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x46>
 8003892:	e02b      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003896:	623b      	str	r3, [r7, #32]
      break;
 8003898:	e02b      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	0c9b      	lsrs	r3, r3, #18
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3328      	adds	r3, #40	; 0x28
 80038a4:	443b      	add	r3, r7
 80038a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0c5b      	lsrs	r3, r3, #17
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	3328      	adds	r3, #40	; 0x28
 80038c2:	443b      	add	r3, r7
 80038c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ce:	fb03 f202 	mul.w	r2, r3, r2
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	e004      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4a0b      	ldr	r2, [pc, #44]	; (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	623b      	str	r3, [r7, #32]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc90      	pop	{r4, r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08005470 	.word	0x08005470
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	003d0900 	.word	0x003d0900

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_RCC_GetHCLKFreq+0x10>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff2 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	08005490 	.word	0x08005490

0800394c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003950:	f7ff ffde 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0adb      	lsrs	r3, r3, #11
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	08005490 	.word	0x08005490

08003974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <RCC_Delay+0x34>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <RCC_Delay+0x38>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a5b      	lsrs	r3, r3, #9
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003990:	bf00      	nop
  }
  while (Delay --);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	60fa      	str	r2, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f9      	bne.n	8003990 <RCC_Delay+0x1c>
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000000 	.word	0x20000000
 80039ac:	10624dd3 	.word	0x10624dd3

080039b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d07d      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039cc:	2300      	movs	r3, #0
 80039ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d0:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10d      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	61d3      	str	r3, [r2, #28]
 80039e8:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d118      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a42      	ldr	r2, [pc, #264]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a10:	f7fe fd52 	bl	80024b8 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	e008      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7fe fd4e 	bl	80024b8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e06d      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02e      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d027      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a54:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a5e:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6a:	4a29      	ldr	r2, [pc, #164]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d014      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fe fd1d 	bl	80024b8 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fe fd19 	bl	80024b8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e036      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ee      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4917      	ldr	r1, [pc, #92]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	490b      	ldr	r1, [pc, #44]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40007000 	.word	0x40007000
 8003b18:	42420440 	.word	0x42420440

08003b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e076      	b.n	8003c1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d009      	beq.n	8003b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	e005      	b.n	8003b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe f9be 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	0c1a      	lsrs	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f002 0204 	and.w	r2, r2, #4
 8003bfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Transmit+0x22>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e126      	b.n	8003e94 <HAL_SPI_Transmit+0x270>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fe fc33 	bl	80024b8 <HAL_GetTick>
 8003c52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d002      	beq.n	8003c6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c68:	e10b      	b.n	8003e82 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x52>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c7a:	e102      	b.n	8003e82 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d10f      	bne.n	8003ce4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d007      	beq.n	8003d02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d0a:	d14b      	bne.n	8003da4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_Transmit+0xf6>
 8003d14:	8afb      	ldrh	r3, [r7, #22]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d13e      	bne.n	8003d98 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c9a      	adds	r2, r3, #2
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d3e:	e02b      	b.n	8003d98 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d112      	bne.n	8003d74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	881a      	ldrh	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	1c9a      	adds	r2, r3, #2
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d72:	e011      	b.n	8003d98 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d74:	f7fe fba0 	bl	80024b8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d803      	bhi.n	8003d8c <HAL_SPI_Transmit+0x168>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d102      	bne.n	8003d92 <HAL_SPI_Transmit+0x16e>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d96:	e074      	b.n	8003e82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ce      	bne.n	8003d40 <HAL_SPI_Transmit+0x11c>
 8003da2:	e04c      	b.n	8003e3e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_Transmit+0x18e>
 8003dac:	8afb      	ldrh	r3, [r7, #22]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d140      	bne.n	8003e34 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dd8:	e02c      	b.n	8003e34 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d113      	bne.n	8003e10 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e0e:	e011      	b.n	8003e34 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e10:	f7fe fb52 	bl	80024b8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d803      	bhi.n	8003e28 <HAL_SPI_Transmit+0x204>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Transmit+0x20a>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e32:	e026      	b.n	8003e82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1cd      	bne.n	8003dda <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	6839      	ldr	r1, [r7, #0]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fbb8 	bl	80045b8 <SPI_EndRxTxTransaction>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e000      	b.n	8003e82 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb8:	d112      	bne.n	8003ee0 <HAL_SPI_Receive+0x44>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8f1 	bl	80040be <HAL_SPI_TransmitReceive>
 8003edc:	4603      	mov	r3, r0
 8003ede:	e0ea      	b.n	80040b6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Receive+0x52>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0e3      	b.n	80040b6 <HAL_SPI_Receive+0x21a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef6:	f7fe fadf 	bl	80024b8 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f0c:	e0ca      	b.n	80040a4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Receive+0x7e>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f1e:	e0c1      	b.n	80040a4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2204      	movs	r2, #4
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d10f      	bne.n	8003f88 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d007      	beq.n	8003fa6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d162      	bne.n	8004074 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fae:	e02e      	b.n	800400e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d115      	bne.n	8003fea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f103 020c 	add.w	r2, r3, #12
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fe8:	e011      	b.n	800400e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fe fa65 	bl	80024b8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d803      	bhi.n	8004002 <HAL_SPI_Receive+0x166>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Receive+0x16c>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800400c:	e04a      	b.n	80040a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1cb      	bne.n	8003fb0 <HAL_SPI_Receive+0x114>
 8004018:	e031      	b.n	800407e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d113      	bne.n	8004050 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800404e:	e011      	b.n	8004074 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004050:	f7fe fa32 	bl	80024b8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d803      	bhi.n	8004068 <HAL_SPI_Receive+0x1cc>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d102      	bne.n	800406e <HAL_SPI_Receive+0x1d2>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004072:	e017      	b.n	80040a4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1cd      	bne.n	800401a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	6839      	ldr	r1, [r7, #0]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa46 	bl	8004514 <SPI_EndRxTransaction>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
 80040a0:	e000      	b.n	80040a4 <HAL_SPI_Receive+0x208>
  }

error :
 80040a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08c      	sub	sp, #48	; 0x30
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040cc:	2301      	movs	r3, #1
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x26>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e18a      	b.n	80043fa <HAL_SPI_TransmitReceive+0x33c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ec:	f7fe f9e4 	bl	80024b8 <HAL_GetTick>
 80040f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800410a:	2b01      	cmp	r3, #1
 800410c:	d00f      	beq.n	800412e <HAL_SPI_TransmitReceive+0x70>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004114:	d107      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x68>
 800411e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004122:	2b04      	cmp	r3, #4
 8004124:	d003      	beq.n	800412e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004126:	2302      	movs	r3, #2
 8004128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800412c:	e15b      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x82>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x82>
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004146:	e14e      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b04      	cmp	r3, #4
 8004152:	d003      	beq.n	800415c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2205      	movs	r2, #5
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d007      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b8:	d178      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x10a>
 80041c2:	8b7b      	ldrh	r3, [r7, #26]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d166      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ec:	e053      	b.n	8004296 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x176>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x176>
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d113      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d119      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x1b8>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d014      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	b292      	uxth	r2, r2
 8004258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004272:	2301      	movs	r3, #1
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004276:	f7fe f91f 	bl	80024b8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004282:	429a      	cmp	r2, r3
 8004284:	d807      	bhi.n	8004296 <HAL_SPI_TransmitReceive+0x1d8>
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d003      	beq.n	8004296 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004294:	e0a7      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1a6      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x130>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1a1      	bne.n	80041ee <HAL_SPI_TransmitReceive+0x130>
 80042aa:	e07c      	b.n	80043a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x1fc>
 80042b4:	8b7b      	ldrh	r3, [r7, #26]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d16b      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e0:	e057      	b.n	8004392 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d11c      	bne.n	800432a <HAL_SPI_TransmitReceive+0x26c>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d017      	beq.n	800432a <HAL_SPI_TransmitReceive+0x26c>
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d114      	bne.n	800432a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d119      	bne.n	800436c <HAL_SPI_TransmitReceive+0x2ae>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d014      	beq.n	800436c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004368:	2301      	movs	r3, #1
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800436c:	f7fe f8a4 	bl	80024b8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004378:	429a      	cmp	r2, r3
 800437a:	d803      	bhi.n	8004384 <HAL_SPI_TransmitReceive+0x2c6>
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d102      	bne.n	800438a <HAL_SPI_TransmitReceive+0x2cc>
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004390:	e029      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1a2      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x224>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d19d      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f904 	bl	80045b8 <SPI_EndRxTxTransaction>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80043c2:	e010      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e000      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004414:	f7fe f850 	bl	80024b8 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004424:	f7fe f848 	bl	80024b8 <HAL_GetTick>
 8004428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	0d1b      	lsrs	r3, r3, #20
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443a:	e054      	b.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d050      	beq.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004444:	f7fe f838 	bl	80024b8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d902      	bls.n	800445a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13d      	bne.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d111      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447c:	d004      	beq.n	8004488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004486:	d107      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a0:	d10f      	bne.n	80044c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e017      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d19b      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000

08004514 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004528:	d111      	bne.n	800454e <SPI_EndRxTransaction+0x3a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d004      	beq.n	800453e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d107      	bne.n	800454e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004556:	d117      	bne.n	8004588 <SPI_EndRxTransaction+0x74>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004560:	d112      	bne.n	8004588 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2200      	movs	r2, #0
 800456a:	2101      	movs	r1, #1
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff ff49 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e013      	b.n	80045b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2200      	movs	r2, #0
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ff36 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e000      	b.n	80045b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ff18 	bl	8004404 <SPI_WaitFlagStateUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e000      	b.n	80045ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e03f      	b.n	8004686 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd fcb2 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f905 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800464c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b08a      	sub	sp, #40	; 0x28
 8004692:	af02      	add	r7, sp, #8
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d17c      	bne.n	80047a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Transmit+0x2c>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e075      	b.n	80047aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x3e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e06e      	b.n	80047aa <HAL_UART_Transmit+0x11c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e2:	f7fd fee9 	bl	80024b8 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d108      	bne.n	8004710 <HAL_UART_Transmit+0x82>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e003      	b.n	8004718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004720:	e02a      	b.n	8004778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f840 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e036      	b.n	80047aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1cf      	bne.n	8004722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	; 0x40
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f810 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	e02c      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d028      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d2:	f7fd fe71 	bl	80024b8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d21d      	bcs.n	800481e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e00f      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	bf0c      	ite	eq
 800482e:	2301      	moveq	r3, #1
 8004830:	2300      	movne	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	429a      	cmp	r2, r3
 800483a:	d0c3      	beq.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004882:	f023 030c 	bic.w	r3, r3, #12
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	430b      	orrs	r3, r1
 800488e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2c      	ldr	r2, [pc, #176]	; (800495c <UART_SetConfig+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d103      	bne.n	80048b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7ff f84c 	bl	800394c <HAL_RCC_GetPCLK2Freq>
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	e002      	b.n	80048be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048b8:	f7ff f834 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 80048bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009a      	lsls	r2, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <UART_SetConfig+0x118>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	0119      	lsls	r1, r3, #4
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <UART_SetConfig+0x118>)
 80048f6:	fba3 0302 	umull	r0, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2064      	movs	r0, #100	; 0x64
 80048fe:	fb00 f303 	mul.w	r3, r0, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004914:	4419      	add	r1, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fbb2 f2f3 	udiv	r2, r2, r3
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <UART_SetConfig+0x118>)
 800492e:	fba3 0302 	umull	r0, r3, r3, r2
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2064      	movs	r0, #100	; 0x64
 8004936:	fb00 f303 	mul.w	r3, r0, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	3332      	adds	r3, #50	; 0x32
 8004940:	4a07      	ldr	r2, [pc, #28]	; (8004960 <UART_SetConfig+0x118>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	440a      	add	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40013800 	.word	0x40013800
 8004960:	51eb851f 	.word	0x51eb851f

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2600      	movs	r6, #0
 8004974:	4d0c      	ldr	r5, [pc, #48]	; (80049a8 <__libc_init_array+0x38>)
 8004976:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	f000 fc9c 	bl	80052bc <_init>
 8004984:	2600      	movs	r6, #0
 8004986:	4d0a      	ldr	r5, [pc, #40]	; (80049b0 <__libc_init_array+0x40>)
 8004988:	4c0a      	ldr	r4, [pc, #40]	; (80049b4 <__libc_init_array+0x44>)
 800498a:	1b64      	subs	r4, r4, r5
 800498c:	10a4      	asrs	r4, r4, #2
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08005534 	.word	0x08005534
 80049ac:	08005534 	.word	0x08005534
 80049b0:	08005534 	.word	0x08005534
 80049b4:	08005538 	.word	0x08005538

080049b8 <memset>:
 80049b8:	4603      	mov	r3, r0
 80049ba:	4402      	add	r2, r0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	f803 1b01 	strb.w	r1, [r3], #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <siprintf>:
 80049c8:	b40e      	push	{r1, r2, r3}
 80049ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049ce:	b500      	push	{lr}
 80049d0:	b09c      	sub	sp, #112	; 0x70
 80049d2:	ab1d      	add	r3, sp, #116	; 0x74
 80049d4:	9002      	str	r0, [sp, #8]
 80049d6:	9006      	str	r0, [sp, #24]
 80049d8:	9107      	str	r1, [sp, #28]
 80049da:	9104      	str	r1, [sp, #16]
 80049dc:	4808      	ldr	r0, [pc, #32]	; (8004a00 <siprintf+0x38>)
 80049de:	4909      	ldr	r1, [pc, #36]	; (8004a04 <siprintf+0x3c>)
 80049e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e4:	9105      	str	r1, [sp, #20]
 80049e6:	6800      	ldr	r0, [r0, #0]
 80049e8:	a902      	add	r1, sp, #8
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	f000 f8fe 	bl	8004bec <_svfiprintf_r>
 80049f0:	2200      	movs	r2, #0
 80049f2:	9b02      	ldr	r3, [sp, #8]
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	b01c      	add	sp, #112	; 0x70
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	b003      	add	sp, #12
 80049fe:	4770      	bx	lr
 8004a00:	2000000c 	.word	0x2000000c
 8004a04:	ffff0208 	.word	0xffff0208

08004a08 <__retarget_lock_acquire_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_release_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0e      	ldr	r6, [pc, #56]	; (8004a48 <sbrk_aligned+0x3c>)
 8004a10:	460c      	mov	r4, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	4605      	mov	r5, r0
 8004a16:	b911      	cbnz	r1, 8004a1e <sbrk_aligned+0x12>
 8004a18:	f000 fb7e 	bl	8005118 <_sbrk_r>
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fb79 	bl	8005118 <_sbrk_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d00a      	beq.n	8004a40 <sbrk_aligned+0x34>
 8004a2a:	1cc4      	adds	r4, r0, #3
 8004a2c:	f024 0403 	bic.w	r4, r4, #3
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d007      	beq.n	8004a44 <sbrk_aligned+0x38>
 8004a34:	1a21      	subs	r1, r4, r0
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fb6e 	bl	8005118 <_sbrk_r>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d101      	bne.n	8004a44 <sbrk_aligned+0x38>
 8004a40:	f04f 34ff 	mov.w	r4, #4294967295
 8004a44:	4620      	mov	r0, r4
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	20000264 	.word	0x20000264

08004a4c <_malloc_r>:
 8004a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a50:	1ccd      	adds	r5, r1, #3
 8004a52:	f025 0503 	bic.w	r5, r5, #3
 8004a56:	3508      	adds	r5, #8
 8004a58:	2d0c      	cmp	r5, #12
 8004a5a:	bf38      	it	cc
 8004a5c:	250c      	movcc	r5, #12
 8004a5e:	2d00      	cmp	r5, #0
 8004a60:	4607      	mov	r7, r0
 8004a62:	db01      	blt.n	8004a68 <_malloc_r+0x1c>
 8004a64:	42a9      	cmp	r1, r5
 8004a66:	d905      	bls.n	8004a74 <_malloc_r+0x28>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4630      	mov	r0, r6
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	4e2e      	ldr	r6, [pc, #184]	; (8004b30 <_malloc_r+0xe4>)
 8004a76:	f000 fb95 	bl	80051a4 <__malloc_lock>
 8004a7a:	6833      	ldr	r3, [r6, #0]
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	bb34      	cbnz	r4, 8004ace <_malloc_r+0x82>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	f7ff ffc2 	bl	8004a0c <sbrk_aligned>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	d14d      	bne.n	8004b2a <_malloc_r+0xde>
 8004a8e:	6834      	ldr	r4, [r6, #0]
 8004a90:	4626      	mov	r6, r4
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	d140      	bne.n	8004b18 <_malloc_r+0xcc>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	eb04 0803 	add.w	r8, r4, r3
 8004aa0:	f000 fb3a 	bl	8005118 <_sbrk_r>
 8004aa4:	4580      	cmp	r8, r0
 8004aa6:	d13a      	bne.n	8004b1e <_malloc_r+0xd2>
 8004aa8:	6821      	ldr	r1, [r4, #0]
 8004aaa:	3503      	adds	r5, #3
 8004aac:	1a6d      	subs	r5, r5, r1
 8004aae:	f025 0503 	bic.w	r5, r5, #3
 8004ab2:	3508      	adds	r5, #8
 8004ab4:	2d0c      	cmp	r5, #12
 8004ab6:	bf38      	it	cc
 8004ab8:	250c      	movcc	r5, #12
 8004aba:	4638      	mov	r0, r7
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff ffa5 	bl	8004a0c <sbrk_aligned>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d02b      	beq.n	8004b1e <_malloc_r+0xd2>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	442b      	add	r3, r5
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	e00e      	b.n	8004aec <_malloc_r+0xa0>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	1b52      	subs	r2, r2, r5
 8004ad2:	d41e      	bmi.n	8004b12 <_malloc_r+0xc6>
 8004ad4:	2a0b      	cmp	r2, #11
 8004ad6:	d916      	bls.n	8004b06 <_malloc_r+0xba>
 8004ad8:	1961      	adds	r1, r4, r5
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6025      	str	r5, [r4, #0]
 8004ade:	bf18      	it	ne
 8004ae0:	6059      	strne	r1, [r3, #4]
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	bf08      	it	eq
 8004ae6:	6031      	streq	r1, [r6, #0]
 8004ae8:	5162      	str	r2, [r4, r5]
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	4638      	mov	r0, r7
 8004aee:	f104 060b 	add.w	r6, r4, #11
 8004af2:	f000 fb5d 	bl	80051b0 <__malloc_unlock>
 8004af6:	f026 0607 	bic.w	r6, r6, #7
 8004afa:	1d23      	adds	r3, r4, #4
 8004afc:	1af2      	subs	r2, r6, r3
 8004afe:	d0b6      	beq.n	8004a6e <_malloc_r+0x22>
 8004b00:	1b9b      	subs	r3, r3, r6
 8004b02:	50a3      	str	r3, [r4, r2]
 8004b04:	e7b3      	b.n	8004a6e <_malloc_r+0x22>
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	bf0c      	ite	eq
 8004b0c:	6032      	streq	r2, [r6, #0]
 8004b0e:	605a      	strne	r2, [r3, #4]
 8004b10:	e7ec      	b.n	8004aec <_malloc_r+0xa0>
 8004b12:	4623      	mov	r3, r4
 8004b14:	6864      	ldr	r4, [r4, #4]
 8004b16:	e7b2      	b.n	8004a7e <_malloc_r+0x32>
 8004b18:	4634      	mov	r4, r6
 8004b1a:	6876      	ldr	r6, [r6, #4]
 8004b1c:	e7b9      	b.n	8004a92 <_malloc_r+0x46>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	4638      	mov	r0, r7
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	f000 fb44 	bl	80051b0 <__malloc_unlock>
 8004b28:	e7a1      	b.n	8004a6e <_malloc_r+0x22>
 8004b2a:	6025      	str	r5, [r4, #0]
 8004b2c:	e7de      	b.n	8004aec <_malloc_r+0xa0>
 8004b2e:	bf00      	nop
 8004b30:	20000260 	.word	0x20000260

08004b34 <__ssputs_r>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	688e      	ldr	r6, [r1, #8]
 8004b3a:	4682      	mov	sl, r0
 8004b3c:	429e      	cmp	r6, r3
 8004b3e:	460c      	mov	r4, r1
 8004b40:	4690      	mov	r8, r2
 8004b42:	461f      	mov	r7, r3
 8004b44:	d838      	bhi.n	8004bb8 <__ssputs_r+0x84>
 8004b46:	898a      	ldrh	r2, [r1, #12]
 8004b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b4c:	d032      	beq.n	8004bb4 <__ssputs_r+0x80>
 8004b4e:	6825      	ldr	r5, [r4, #0]
 8004b50:	6909      	ldr	r1, [r1, #16]
 8004b52:	3301      	adds	r3, #1
 8004b54:	eba5 0901 	sub.w	r9, r5, r1
 8004b58:	6965      	ldr	r5, [r4, #20]
 8004b5a:	444b      	add	r3, r9
 8004b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b64:	106d      	asrs	r5, r5, #1
 8004b66:	429d      	cmp	r5, r3
 8004b68:	bf38      	it	cc
 8004b6a:	461d      	movcc	r5, r3
 8004b6c:	0553      	lsls	r3, r2, #21
 8004b6e:	d531      	bpl.n	8004bd4 <__ssputs_r+0xa0>
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7ff ff6b 	bl	8004a4c <_malloc_r>
 8004b76:	4606      	mov	r6, r0
 8004b78:	b950      	cbnz	r0, 8004b90 <__ssputs_r+0x5c>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	f8ca 3000 	str.w	r3, [sl]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b90:	464a      	mov	r2, r9
 8004b92:	6921      	ldr	r1, [r4, #16]
 8004b94:	f000 fade 	bl	8005154 <memcpy>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	6126      	str	r6, [r4, #16]
 8004ba6:	444e      	add	r6, r9
 8004ba8:	6026      	str	r6, [r4, #0]
 8004baa:	463e      	mov	r6, r7
 8004bac:	6165      	str	r5, [r4, #20]
 8004bae:	eba5 0509 	sub.w	r5, r5, r9
 8004bb2:	60a5      	str	r5, [r4, #8]
 8004bb4:	42be      	cmp	r6, r7
 8004bb6:	d900      	bls.n	8004bba <__ssputs_r+0x86>
 8004bb8:	463e      	mov	r6, r7
 8004bba:	4632      	mov	r2, r6
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	f000 fad6 	bl	8005170 <memmove>
 8004bc4:	68a3      	ldr	r3, [r4, #8]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	1b9b      	subs	r3, r3, r6
 8004bca:	60a3      	str	r3, [r4, #8]
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	4433      	add	r3, r6
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	e7db      	b.n	8004b8c <__ssputs_r+0x58>
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	f000 fb39 	bl	800524c <_realloc_r>
 8004bda:	4606      	mov	r6, r0
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d1e1      	bne.n	8004ba4 <__ssputs_r+0x70>
 8004be0:	4650      	mov	r0, sl
 8004be2:	6921      	ldr	r1, [r4, #16]
 8004be4:	f000 faea 	bl	80051bc <_free_r>
 8004be8:	e7c7      	b.n	8004b7a <__ssputs_r+0x46>
	...

08004bec <_svfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	4698      	mov	r8, r3
 8004bf2:	898b      	ldrh	r3, [r1, #12]
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	b09d      	sub	sp, #116	; 0x74
 8004bfe:	d50e      	bpl.n	8004c1e <_svfiprintf_r+0x32>
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	b963      	cbnz	r3, 8004c1e <_svfiprintf_r+0x32>
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	f7ff ff21 	bl	8004a4c <_malloc_r>
 8004c0a:	6028      	str	r0, [r5, #0]
 8004c0c:	6128      	str	r0, [r5, #16]
 8004c0e:	b920      	cbnz	r0, 8004c1a <_svfiprintf_r+0x2e>
 8004c10:	230c      	movs	r3, #12
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	e0d1      	b.n	8004dbe <_svfiprintf_r+0x1d2>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	616b      	str	r3, [r5, #20]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
 8004c22:	2320      	movs	r3, #32
 8004c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c28:	2330      	movs	r3, #48	; 0x30
 8004c2a:	f04f 0901 	mov.w	r9, #1
 8004c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dd8 <_svfiprintf_r+0x1ec>
 8004c36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c42:	b10a      	cbz	r2, 8004c48 <_svfiprintf_r+0x5c>
 8004c44:	2a25      	cmp	r2, #37	; 0x25
 8004c46:	d1f9      	bne.n	8004c3c <_svfiprintf_r+0x50>
 8004c48:	ebba 0b04 	subs.w	fp, sl, r4
 8004c4c:	d00b      	beq.n	8004c66 <_svfiprintf_r+0x7a>
 8004c4e:	465b      	mov	r3, fp
 8004c50:	4622      	mov	r2, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ff6d 	bl	8004b34 <__ssputs_r>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f000 80aa 	beq.w	8004db4 <_svfiprintf_r+0x1c8>
 8004c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c62:	445a      	add	r2, fp
 8004c64:	9209      	str	r2, [sp, #36]	; 0x24
 8004c66:	f89a 3000 	ldrb.w	r3, [sl]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a2 	beq.w	8004db4 <_svfiprintf_r+0x1c8>
 8004c70:	2300      	movs	r3, #0
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c7a:	f10a 0a01 	add.w	sl, sl, #1
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	9307      	str	r3, [sp, #28]
 8004c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c86:	931a      	str	r3, [sp, #104]	; 0x68
 8004c88:	4654      	mov	r4, sl
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	4851      	ldr	r0, [pc, #324]	; (8004dd8 <_svfiprintf_r+0x1ec>)
 8004c92:	f000 fa51 	bl	8005138 <memchr>
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	b9d8      	cbnz	r0, 8004cd2 <_svfiprintf_r+0xe6>
 8004c9a:	06d0      	lsls	r0, r2, #27
 8004c9c:	bf44      	itt	mi
 8004c9e:	2320      	movmi	r3, #32
 8004ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca4:	0711      	lsls	r1, r2, #28
 8004ca6:	bf44      	itt	mi
 8004ca8:	232b      	movmi	r3, #43	; 0x2b
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cae:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d015      	beq.n	8004ce2 <_svfiprintf_r+0xf6>
 8004cb6:	4654      	mov	r4, sl
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f04f 0c0a 	mov.w	ip, #10
 8004cbe:	9a07      	ldr	r2, [sp, #28]
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc6:	3b30      	subs	r3, #48	; 0x30
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	d94e      	bls.n	8004d6a <_svfiprintf_r+0x17e>
 8004ccc:	b1b0      	cbz	r0, 8004cfc <_svfiprintf_r+0x110>
 8004cce:	9207      	str	r2, [sp, #28]
 8004cd0:	e014      	b.n	8004cfc <_svfiprintf_r+0x110>
 8004cd2:	eba0 0308 	sub.w	r3, r0, r8
 8004cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	46a2      	mov	sl, r4
 8004cde:	9304      	str	r3, [sp, #16]
 8004ce0:	e7d2      	b.n	8004c88 <_svfiprintf_r+0x9c>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	1d19      	adds	r1, r3, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	9103      	str	r1, [sp, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfbb      	ittet	lt
 8004cee:	425b      	neglt	r3, r3
 8004cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf4:	9307      	strge	r3, [sp, #28]
 8004cf6:	9307      	strlt	r3, [sp, #28]
 8004cf8:	bfb8      	it	lt
 8004cfa:	9204      	strlt	r2, [sp, #16]
 8004cfc:	7823      	ldrb	r3, [r4, #0]
 8004cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8004d00:	d10c      	bne.n	8004d1c <_svfiprintf_r+0x130>
 8004d02:	7863      	ldrb	r3, [r4, #1]
 8004d04:	2b2a      	cmp	r3, #42	; 0x2a
 8004d06:	d135      	bne.n	8004d74 <_svfiprintf_r+0x188>
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	3402      	adds	r4, #2
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	9203      	str	r2, [sp, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfb8      	it	lt
 8004d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d1a:	9305      	str	r3, [sp, #20]
 8004d1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004ddc <_svfiprintf_r+0x1f0>
 8004d20:	2203      	movs	r2, #3
 8004d22:	4650      	mov	r0, sl
 8004d24:	7821      	ldrb	r1, [r4, #0]
 8004d26:	f000 fa07 	bl	8005138 <memchr>
 8004d2a:	b140      	cbz	r0, 8004d3e <_svfiprintf_r+0x152>
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	eba0 000a 	sub.w	r0, r0, sl
 8004d32:	fa03 f000 	lsl.w	r0, r3, r0
 8004d36:	9b04      	ldr	r3, [sp, #16]
 8004d38:	3401      	adds	r4, #1
 8004d3a:	4303      	orrs	r3, r0
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d42:	2206      	movs	r2, #6
 8004d44:	4826      	ldr	r0, [pc, #152]	; (8004de0 <_svfiprintf_r+0x1f4>)
 8004d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d4a:	f000 f9f5 	bl	8005138 <memchr>
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d038      	beq.n	8004dc4 <_svfiprintf_r+0x1d8>
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <_svfiprintf_r+0x1f8>)
 8004d54:	bb1b      	cbnz	r3, 8004d9e <_svfiprintf_r+0x1b2>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	3307      	adds	r3, #7
 8004d5a:	f023 0307 	bic.w	r3, r3, #7
 8004d5e:	3308      	adds	r3, #8
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	4433      	add	r3, r6
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	e767      	b.n	8004c3a <_svfiprintf_r+0x4e>
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d72:	e7a5      	b.n	8004cc0 <_svfiprintf_r+0xd4>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f04f 0c0a 	mov.w	ip, #10
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	3401      	adds	r4, #1
 8004d7e:	9305      	str	r3, [sp, #20]
 8004d80:	4620      	mov	r0, r4
 8004d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d86:	3a30      	subs	r2, #48	; 0x30
 8004d88:	2a09      	cmp	r2, #9
 8004d8a:	d903      	bls.n	8004d94 <_svfiprintf_r+0x1a8>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0c5      	beq.n	8004d1c <_svfiprintf_r+0x130>
 8004d90:	9105      	str	r1, [sp, #20]
 8004d92:	e7c3      	b.n	8004d1c <_svfiprintf_r+0x130>
 8004d94:	4604      	mov	r4, r0
 8004d96:	2301      	movs	r3, #1
 8004d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d9c:	e7f0      	b.n	8004d80 <_svfiprintf_r+0x194>
 8004d9e:	ab03      	add	r3, sp, #12
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <_svfiprintf_r+0x1fc>)
 8004da8:	a904      	add	r1, sp, #16
 8004daa:	f3af 8000 	nop.w
 8004dae:	1c42      	adds	r2, r0, #1
 8004db0:	4606      	mov	r6, r0
 8004db2:	d1d6      	bne.n	8004d62 <_svfiprintf_r+0x176>
 8004db4:	89ab      	ldrh	r3, [r5, #12]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	f53f af2c 	bmi.w	8004c14 <_svfiprintf_r+0x28>
 8004dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbe:	b01d      	add	sp, #116	; 0x74
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4638      	mov	r0, r7
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <_svfiprintf_r+0x1fc>)
 8004dce:	a904      	add	r1, sp, #16
 8004dd0:	f000 f87c 	bl	8004ecc <_printf_i>
 8004dd4:	e7eb      	b.n	8004dae <_svfiprintf_r+0x1c2>
 8004dd6:	bf00      	nop
 8004dd8:	080054f8 	.word	0x080054f8
 8004ddc:	080054fe 	.word	0x080054fe
 8004de0:	08005502 	.word	0x08005502
 8004de4:	00000000 	.word	0x00000000
 8004de8:	08004b35 	.word	0x08004b35

08004dec <_printf_common>:
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	4616      	mov	r6, r2
 8004df2:	4699      	mov	r9, r3
 8004df4:	688a      	ldr	r2, [r1, #8]
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	4607      	mov	r7, r0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bfb8      	it	lt
 8004dfe:	4613      	movlt	r3, r2
 8004e00:	6033      	str	r3, [r6, #0]
 8004e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e06:	460c      	mov	r4, r1
 8004e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e0c:	b10a      	cbz	r2, 8004e12 <_printf_common+0x26>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	0699      	lsls	r1, r3, #26
 8004e16:	bf42      	ittt	mi
 8004e18:	6833      	ldrmi	r3, [r6, #0]
 8004e1a:	3302      	addmi	r3, #2
 8004e1c:	6033      	strmi	r3, [r6, #0]
 8004e1e:	6825      	ldr	r5, [r4, #0]
 8004e20:	f015 0506 	ands.w	r5, r5, #6
 8004e24:	d106      	bne.n	8004e34 <_printf_common+0x48>
 8004e26:	f104 0a19 	add.w	sl, r4, #25
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	6832      	ldr	r2, [r6, #0]
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dc28      	bgt.n	8004e86 <_printf_common+0x9a>
 8004e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e38:	1e13      	subs	r3, r2, #0
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	0692      	lsls	r2, r2, #26
 8004e42:	d42d      	bmi.n	8004ea0 <_printf_common+0xb4>
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e4c:	47c0      	blx	r8
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d020      	beq.n	8004e94 <_printf_common+0xa8>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	68e5      	ldr	r5, [r4, #12]
 8004e56:	f003 0306 	and.w	r3, r3, #6
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	bf18      	it	ne
 8004e5e:	2500      	movne	r5, #0
 8004e60:	6832      	ldr	r2, [r6, #0]
 8004e62:	f04f 0600 	mov.w	r6, #0
 8004e66:	68a3      	ldr	r3, [r4, #8]
 8004e68:	bf08      	it	eq
 8004e6a:	1aad      	subeq	r5, r5, r2
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	bf08      	it	eq
 8004e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bfc4      	itt	gt
 8004e78:	1a9b      	subgt	r3, r3, r2
 8004e7a:	18ed      	addgt	r5, r5, r3
 8004e7c:	341a      	adds	r4, #26
 8004e7e:	42b5      	cmp	r5, r6
 8004e80:	d11a      	bne.n	8004eb8 <_printf_common+0xcc>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e008      	b.n	8004e98 <_printf_common+0xac>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	47c0      	blx	r8
 8004e90:	3001      	adds	r0, #1
 8004e92:	d103      	bne.n	8004e9c <_printf_common+0xb0>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7c4      	b.n	8004e2a <_printf_common+0x3e>
 8004ea0:	2030      	movs	r0, #48	; 0x30
 8004ea2:	18e1      	adds	r1, r4, r3
 8004ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eae:	4422      	add	r2, r4
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb6:	e7c5      	b.n	8004e44 <_printf_common+0x58>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0e6      	beq.n	8004e94 <_printf_common+0xa8>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7d9      	b.n	8004e7e <_printf_common+0x92>
	...

08004ecc <_printf_i>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	7e0f      	ldrb	r7, [r1, #24]
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	2f78      	cmp	r7, #120	; 0x78
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	460c      	mov	r4, r1
 8004eda:	469a      	mov	sl, r3
 8004edc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee2:	d807      	bhi.n	8004ef4 <_printf_i+0x28>
 8004ee4:	2f62      	cmp	r7, #98	; 0x62
 8004ee6:	d80a      	bhi.n	8004efe <_printf_i+0x32>
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	f000 80d9 	beq.w	80050a0 <_printf_i+0x1d4>
 8004eee:	2f58      	cmp	r7, #88	; 0x58
 8004ef0:	f000 80a4 	beq.w	800503c <_printf_i+0x170>
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004efc:	e03a      	b.n	8004f74 <_printf_i+0xa8>
 8004efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f02:	2b15      	cmp	r3, #21
 8004f04:	d8f6      	bhi.n	8004ef4 <_printf_i+0x28>
 8004f06:	a101      	add	r1, pc, #4	; (adr r1, 8004f0c <_printf_i+0x40>)
 8004f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004ef5 	.word	0x08004ef5
 8004f18:	08004ef5 	.word	0x08004ef5
 8004f1c:	08004ef5 	.word	0x08004ef5
 8004f20:	08004ef5 	.word	0x08004ef5
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004ef5 	.word	0x08004ef5
 8004f2c:	08004ef5 	.word	0x08004ef5
 8004f30:	08004ef5 	.word	0x08004ef5
 8004f34:	08004ef5 	.word	0x08004ef5
 8004f38:	08005087 	.word	0x08005087
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08005069 	.word	0x08005069
 8004f44:	08004ef5 	.word	0x08004ef5
 8004f48:	08004ef5 	.word	0x08004ef5
 8004f4c:	080050a9 	.word	0x080050a9
 8004f50:	08004ef5 	.word	0x08004ef5
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004ef5 	.word	0x08004ef5
 8004f5c:	08004ef5 	.word	0x08004ef5
 8004f60:	08005071 	.word	0x08005071
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	602a      	str	r2, [r5, #0]
 8004f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0a4      	b.n	80050c2 <_printf_i+0x1f6>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	6829      	ldr	r1, [r5, #0]
 8004f7c:	0606      	lsls	r6, r0, #24
 8004f7e:	f101 0304 	add.w	r3, r1, #4
 8004f82:	d50a      	bpl.n	8004f9a <_printf_i+0xce>
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	2e00      	cmp	r6, #0
 8004f8a:	da03      	bge.n	8004f94 <_printf_i+0xc8>
 8004f8c:	232d      	movs	r3, #45	; 0x2d
 8004f8e:	4276      	negs	r6, r6
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	230a      	movs	r3, #10
 8004f96:	485e      	ldr	r0, [pc, #376]	; (8005110 <_printf_i+0x244>)
 8004f98:	e019      	b.n	8004fce <_printf_i+0x102>
 8004f9a:	680e      	ldr	r6, [r1, #0]
 8004f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	bf18      	it	ne
 8004fa4:	b236      	sxthne	r6, r6
 8004fa6:	e7ef      	b.n	8004f88 <_printf_i+0xbc>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	0601      	lsls	r1, r0, #24
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0xec>
 8004fb4:	681e      	ldr	r6, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0xf2>
 8004fb8:	0646      	lsls	r6, r0, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0xe8>
 8004fbc:	881e      	ldrh	r6, [r3, #0]
 8004fbe:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2308      	moveq	r3, #8
 8004fc4:	230a      	movne	r3, #10
 8004fc6:	4852      	ldr	r0, [pc, #328]	; (8005110 <_printf_i+0x244>)
 8004fc8:	2100      	movs	r1, #0
 8004fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fce:	6865      	ldr	r5, [r4, #4]
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	bfa8      	it	ge
 8004fd4:	6821      	ldrge	r1, [r4, #0]
 8004fd6:	60a5      	str	r5, [r4, #8]
 8004fd8:	bfa4      	itt	ge
 8004fda:	f021 0104 	bicge.w	r1, r1, #4
 8004fde:	6021      	strge	r1, [r4, #0]
 8004fe0:	b90e      	cbnz	r6, 8004fe6 <_printf_i+0x11a>
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	d04d      	beq.n	8005082 <_printf_i+0x1b6>
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fec:	fb03 6711 	mls	r7, r3, r1, r6
 8004ff0:	5dc7      	ldrb	r7, [r0, r7]
 8004ff2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff6:	4637      	mov	r7, r6
 8004ff8:	42bb      	cmp	r3, r7
 8004ffa:	460e      	mov	r6, r1
 8004ffc:	d9f4      	bls.n	8004fe8 <_printf_i+0x11c>
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d10b      	bne.n	800501a <_printf_i+0x14e>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	07de      	lsls	r6, r3, #31
 8005006:	d508      	bpl.n	800501a <_printf_i+0x14e>
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	6861      	ldr	r1, [r4, #4]
 800500c:	4299      	cmp	r1, r3
 800500e:	bfde      	ittt	le
 8005010:	2330      	movle	r3, #48	; 0x30
 8005012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005016:	f105 35ff 	addle.w	r5, r5, #4294967295
 800501a:	1b52      	subs	r2, r2, r5
 800501c:	6122      	str	r2, [r4, #16]
 800501e:	464b      	mov	r3, r9
 8005020:	4621      	mov	r1, r4
 8005022:	4640      	mov	r0, r8
 8005024:	f8cd a000 	str.w	sl, [sp]
 8005028:	aa03      	add	r2, sp, #12
 800502a:	f7ff fedf 	bl	8004dec <_printf_common>
 800502e:	3001      	adds	r0, #1
 8005030:	d14c      	bne.n	80050cc <_printf_i+0x200>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	b004      	add	sp, #16
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	4834      	ldr	r0, [pc, #208]	; (8005110 <_printf_i+0x244>)
 800503e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005042:	6829      	ldr	r1, [r5, #0]
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f851 6b04 	ldr.w	r6, [r1], #4
 800504a:	6029      	str	r1, [r5, #0]
 800504c:	061d      	lsls	r5, r3, #24
 800504e:	d514      	bpl.n	800507a <_printf_i+0x1ae>
 8005050:	07df      	lsls	r7, r3, #31
 8005052:	bf44      	itt	mi
 8005054:	f043 0320 	orrmi.w	r3, r3, #32
 8005058:	6023      	strmi	r3, [r4, #0]
 800505a:	b91e      	cbnz	r6, 8005064 <_printf_i+0x198>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	2310      	movs	r3, #16
 8005066:	e7af      	b.n	8004fc8 <_printf_i+0xfc>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f043 0320 	orr.w	r3, r3, #32
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	2378      	movs	r3, #120	; 0x78
 8005072:	4828      	ldr	r0, [pc, #160]	; (8005114 <_printf_i+0x248>)
 8005074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005078:	e7e3      	b.n	8005042 <_printf_i+0x176>
 800507a:	0659      	lsls	r1, r3, #25
 800507c:	bf48      	it	mi
 800507e:	b2b6      	uxthmi	r6, r6
 8005080:	e7e6      	b.n	8005050 <_printf_i+0x184>
 8005082:	4615      	mov	r5, r2
 8005084:	e7bb      	b.n	8004ffe <_printf_i+0x132>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	6826      	ldr	r6, [r4, #0]
 800508a:	1d18      	adds	r0, r3, #4
 800508c:	6961      	ldr	r1, [r4, #20]
 800508e:	6028      	str	r0, [r5, #0]
 8005090:	0635      	lsls	r5, r6, #24
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	d501      	bpl.n	800509a <_printf_i+0x1ce>
 8005096:	6019      	str	r1, [r3, #0]
 8005098:	e002      	b.n	80050a0 <_printf_i+0x1d4>
 800509a:	0670      	lsls	r0, r6, #25
 800509c:	d5fb      	bpl.n	8005096 <_printf_i+0x1ca>
 800509e:	8019      	strh	r1, [r3, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	4615      	mov	r5, r2
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	e7ba      	b.n	800501e <_printf_i+0x152>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	2100      	movs	r1, #0
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 f83f 	bl	8005138 <memchr>
 80050ba:	b108      	cbz	r0, 80050c0 <_printf_i+0x1f4>
 80050bc:	1b40      	subs	r0, r0, r5
 80050be:	6060      	str	r0, [r4, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	2300      	movs	r3, #0
 80050c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ca:	e7a8      	b.n	800501e <_printf_i+0x152>
 80050cc:	462a      	mov	r2, r5
 80050ce:	4649      	mov	r1, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	47d0      	blx	sl
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0ab      	beq.n	8005032 <_printf_i+0x166>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	079b      	lsls	r3, r3, #30
 80050de:	d413      	bmi.n	8005108 <_printf_i+0x23c>
 80050e0:	68e0      	ldr	r0, [r4, #12]
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	4298      	cmp	r0, r3
 80050e6:	bfb8      	it	lt
 80050e8:	4618      	movlt	r0, r3
 80050ea:	e7a4      	b.n	8005036 <_printf_i+0x16a>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4632      	mov	r2, r6
 80050f0:	4649      	mov	r1, r9
 80050f2:	4640      	mov	r0, r8
 80050f4:	47d0      	blx	sl
 80050f6:	3001      	adds	r0, #1
 80050f8:	d09b      	beq.n	8005032 <_printf_i+0x166>
 80050fa:	3501      	adds	r5, #1
 80050fc:	68e3      	ldr	r3, [r4, #12]
 80050fe:	9903      	ldr	r1, [sp, #12]
 8005100:	1a5b      	subs	r3, r3, r1
 8005102:	42ab      	cmp	r3, r5
 8005104:	dcf2      	bgt.n	80050ec <_printf_i+0x220>
 8005106:	e7eb      	b.n	80050e0 <_printf_i+0x214>
 8005108:	2500      	movs	r5, #0
 800510a:	f104 0619 	add.w	r6, r4, #25
 800510e:	e7f5      	b.n	80050fc <_printf_i+0x230>
 8005110:	08005509 	.word	0x08005509
 8005114:	0800551a 	.word	0x0800551a

08005118 <_sbrk_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	2300      	movs	r3, #0
 800511c:	4d05      	ldr	r5, [pc, #20]	; (8005134 <_sbrk_r+0x1c>)
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fd f81e 	bl	8002164 <_sbrk>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_sbrk_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_sbrk_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000268 	.word	0x20000268

08005138 <memchr>:
 8005138:	4603      	mov	r3, r0
 800513a:	b510      	push	{r4, lr}
 800513c:	b2c9      	uxtb	r1, r1
 800513e:	4402      	add	r2, r0
 8005140:	4293      	cmp	r3, r2
 8005142:	4618      	mov	r0, r3
 8005144:	d101      	bne.n	800514a <memchr+0x12>
 8005146:	2000      	movs	r0, #0
 8005148:	e003      	b.n	8005152 <memchr+0x1a>
 800514a:	7804      	ldrb	r4, [r0, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	428c      	cmp	r4, r1
 8005150:	d1f6      	bne.n	8005140 <memchr+0x8>
 8005152:	bd10      	pop	{r4, pc}

08005154 <memcpy>:
 8005154:	440a      	add	r2, r1
 8005156:	4291      	cmp	r1, r2
 8005158:	f100 33ff 	add.w	r3, r0, #4294967295
 800515c:	d100      	bne.n	8005160 <memcpy+0xc>
 800515e:	4770      	bx	lr
 8005160:	b510      	push	{r4, lr}
 8005162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005166:	4291      	cmp	r1, r2
 8005168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516c:	d1f9      	bne.n	8005162 <memcpy+0xe>
 800516e:	bd10      	pop	{r4, pc}

08005170 <memmove>:
 8005170:	4288      	cmp	r0, r1
 8005172:	b510      	push	{r4, lr}
 8005174:	eb01 0402 	add.w	r4, r1, r2
 8005178:	d902      	bls.n	8005180 <memmove+0x10>
 800517a:	4284      	cmp	r4, r0
 800517c:	4623      	mov	r3, r4
 800517e:	d807      	bhi.n	8005190 <memmove+0x20>
 8005180:	1e43      	subs	r3, r0, #1
 8005182:	42a1      	cmp	r1, r4
 8005184:	d008      	beq.n	8005198 <memmove+0x28>
 8005186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800518a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800518e:	e7f8      	b.n	8005182 <memmove+0x12>
 8005190:	4601      	mov	r1, r0
 8005192:	4402      	add	r2, r0
 8005194:	428a      	cmp	r2, r1
 8005196:	d100      	bne.n	800519a <memmove+0x2a>
 8005198:	bd10      	pop	{r4, pc}
 800519a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800519e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051a2:	e7f7      	b.n	8005194 <memmove+0x24>

080051a4 <__malloc_lock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	; (80051ac <__malloc_lock+0x8>)
 80051a6:	f7ff bc2f 	b.w	8004a08 <__retarget_lock_acquire_recursive>
 80051aa:	bf00      	nop
 80051ac:	2000025c 	.word	0x2000025c

080051b0 <__malloc_unlock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__malloc_unlock+0x8>)
 80051b2:	f7ff bc2a 	b.w	8004a0a <__retarget_lock_release_recursive>
 80051b6:	bf00      	nop
 80051b8:	2000025c 	.word	0x2000025c

080051bc <_free_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d040      	beq.n	8005246 <_free_r+0x8a>
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfb8      	it	lt
 80051ce:	18e4      	addlt	r4, r4, r3
 80051d0:	f7ff ffe8 	bl	80051a4 <__malloc_lock>
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <_free_r+0x8c>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	b933      	cbnz	r3, 80051e8 <_free_r+0x2c>
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	6014      	str	r4, [r2, #0]
 80051de:	4628      	mov	r0, r5
 80051e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e4:	f7ff bfe4 	b.w	80051b0 <__malloc_unlock>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d908      	bls.n	80051fe <_free_r+0x42>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	1821      	adds	r1, r4, r0
 80051f0:	428b      	cmp	r3, r1
 80051f2:	bf01      	itttt	eq
 80051f4:	6819      	ldreq	r1, [r3, #0]
 80051f6:	685b      	ldreq	r3, [r3, #4]
 80051f8:	1809      	addeq	r1, r1, r0
 80051fa:	6021      	streq	r1, [r4, #0]
 80051fc:	e7ed      	b.n	80051da <_free_r+0x1e>
 80051fe:	461a      	mov	r2, r3
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	b10b      	cbz	r3, 8005208 <_free_r+0x4c>
 8005204:	42a3      	cmp	r3, r4
 8005206:	d9fa      	bls.n	80051fe <_free_r+0x42>
 8005208:	6811      	ldr	r1, [r2, #0]
 800520a:	1850      	adds	r0, r2, r1
 800520c:	42a0      	cmp	r0, r4
 800520e:	d10b      	bne.n	8005228 <_free_r+0x6c>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	4401      	add	r1, r0
 8005214:	1850      	adds	r0, r2, r1
 8005216:	4283      	cmp	r3, r0
 8005218:	6011      	str	r1, [r2, #0]
 800521a:	d1e0      	bne.n	80051de <_free_r+0x22>
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4401      	add	r1, r0
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	e7da      	b.n	80051de <_free_r+0x22>
 8005228:	d902      	bls.n	8005230 <_free_r+0x74>
 800522a:	230c      	movs	r3, #12
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	e7d6      	b.n	80051de <_free_r+0x22>
 8005230:	6820      	ldr	r0, [r4, #0]
 8005232:	1821      	adds	r1, r4, r0
 8005234:	428b      	cmp	r3, r1
 8005236:	bf01      	itttt	eq
 8005238:	6819      	ldreq	r1, [r3, #0]
 800523a:	685b      	ldreq	r3, [r3, #4]
 800523c:	1809      	addeq	r1, r1, r0
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6054      	str	r4, [r2, #4]
 8005244:	e7cb      	b.n	80051de <_free_r+0x22>
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000260 	.word	0x20000260

0800524c <_realloc_r>:
 800524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005250:	4680      	mov	r8, r0
 8005252:	4614      	mov	r4, r2
 8005254:	460e      	mov	r6, r1
 8005256:	b921      	cbnz	r1, 8005262 <_realloc_r+0x16>
 8005258:	4611      	mov	r1, r2
 800525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	f7ff bbf5 	b.w	8004a4c <_malloc_r>
 8005262:	b92a      	cbnz	r2, 8005270 <_realloc_r+0x24>
 8005264:	f7ff ffaa 	bl	80051bc <_free_r>
 8005268:	4625      	mov	r5, r4
 800526a:	4628      	mov	r0, r5
 800526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005270:	f000 f81b 	bl	80052aa <_malloc_usable_size_r>
 8005274:	4284      	cmp	r4, r0
 8005276:	4607      	mov	r7, r0
 8005278:	d802      	bhi.n	8005280 <_realloc_r+0x34>
 800527a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800527e:	d812      	bhi.n	80052a6 <_realloc_r+0x5a>
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fbe2 	bl	8004a4c <_malloc_r>
 8005288:	4605      	mov	r5, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d0ed      	beq.n	800526a <_realloc_r+0x1e>
 800528e:	42bc      	cmp	r4, r7
 8005290:	4622      	mov	r2, r4
 8005292:	4631      	mov	r1, r6
 8005294:	bf28      	it	cs
 8005296:	463a      	movcs	r2, r7
 8005298:	f7ff ff5c 	bl	8005154 <memcpy>
 800529c:	4631      	mov	r1, r6
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff ff8c 	bl	80051bc <_free_r>
 80052a4:	e7e1      	b.n	800526a <_realloc_r+0x1e>
 80052a6:	4635      	mov	r5, r6
 80052a8:	e7df      	b.n	800526a <_realloc_r+0x1e>

080052aa <_malloc_usable_size_r>:
 80052aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ae:	1f18      	subs	r0, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bfbc      	itt	lt
 80052b4:	580b      	ldrlt	r3, [r1, r0]
 80052b6:	18c0      	addlt	r0, r0, r3
 80052b8:	4770      	bx	lr
	...

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
