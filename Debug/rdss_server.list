
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006308  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800682c  0800682c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006834  08006834  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800683c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  080068ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080068ac  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d99  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f45  00000000  00000000  00031e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00035df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb2  00000000  00000000  00036d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a58  00000000  00000000  00050c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e526  00000000  00000000  00064662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a40  00000000  00000000  000f2bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006400 	.word	0x08006400

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006400 	.word	0x08006400

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_frsub>:
 80004d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004dc:	e002      	b.n	80004e4 <__addsf3>
 80004de:	bf00      	nop

080004e0 <__aeabi_fsub>:
 80004e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e4 <__addsf3>:
 80004e4:	0042      	lsls	r2, r0, #1
 80004e6:	bf1f      	itttt	ne
 80004e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004ec:	ea92 0f03 	teqne	r2, r3
 80004f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f8:	d06a      	beq.n	80005d0 <__addsf3+0xec>
 80004fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000502:	bfc1      	itttt	gt
 8000504:	18d2      	addgt	r2, r2, r3
 8000506:	4041      	eorgt	r1, r0
 8000508:	4048      	eorgt	r0, r1
 800050a:	4041      	eorgt	r1, r0
 800050c:	bfb8      	it	lt
 800050e:	425b      	neglt	r3, r3
 8000510:	2b19      	cmp	r3, #25
 8000512:	bf88      	it	hi
 8000514:	4770      	bxhi	lr
 8000516:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800051a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000522:	bf18      	it	ne
 8000524:	4240      	negne	r0, r0
 8000526:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000532:	bf18      	it	ne
 8000534:	4249      	negne	r1, r1
 8000536:	ea92 0f03 	teq	r2, r3
 800053a:	d03f      	beq.n	80005bc <__addsf3+0xd8>
 800053c:	f1a2 0201 	sub.w	r2, r2, #1
 8000540:	fa41 fc03 	asr.w	ip, r1, r3
 8000544:	eb10 000c 	adds.w	r0, r0, ip
 8000548:	f1c3 0320 	rsb	r3, r3, #32
 800054c:	fa01 f103 	lsl.w	r1, r1, r3
 8000550:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000554:	d502      	bpl.n	800055c <__addsf3+0x78>
 8000556:	4249      	negs	r1, r1
 8000558:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800055c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000560:	d313      	bcc.n	800058a <__addsf3+0xa6>
 8000562:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000566:	d306      	bcc.n	8000576 <__addsf3+0x92>
 8000568:	0840      	lsrs	r0, r0, #1
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	f102 0201 	add.w	r2, r2, #1
 8000572:	2afe      	cmp	r2, #254	; 0xfe
 8000574:	d251      	bcs.n	800061a <__addsf3+0x136>
 8000576:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800057a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057e:	bf08      	it	eq
 8000580:	f020 0001 	biceq.w	r0, r0, #1
 8000584:	ea40 0003 	orr.w	r0, r0, r3
 8000588:	4770      	bx	lr
 800058a:	0049      	lsls	r1, r1, #1
 800058c:	eb40 0000 	adc.w	r0, r0, r0
 8000590:	3a01      	subs	r2, #1
 8000592:	bf28      	it	cs
 8000594:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000598:	d2ed      	bcs.n	8000576 <__addsf3+0x92>
 800059a:	fab0 fc80 	clz	ip, r0
 800059e:	f1ac 0c08 	sub.w	ip, ip, #8
 80005a2:	ebb2 020c 	subs.w	r2, r2, ip
 80005a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005aa:	bfaa      	itet	ge
 80005ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005b0:	4252      	neglt	r2, r2
 80005b2:	4318      	orrge	r0, r3
 80005b4:	bfbc      	itt	lt
 80005b6:	40d0      	lsrlt	r0, r2
 80005b8:	4318      	orrlt	r0, r3
 80005ba:	4770      	bx	lr
 80005bc:	f092 0f00 	teq	r2, #0
 80005c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c4:	bf06      	itte	eq
 80005c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005ca:	3201      	addeq	r2, #1
 80005cc:	3b01      	subne	r3, #1
 80005ce:	e7b5      	b.n	800053c <__addsf3+0x58>
 80005d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d8:	bf18      	it	ne
 80005da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005de:	d021      	beq.n	8000624 <__addsf3+0x140>
 80005e0:	ea92 0f03 	teq	r2, r3
 80005e4:	d004      	beq.n	80005f0 <__addsf3+0x10c>
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf08      	it	eq
 80005ec:	4608      	moveq	r0, r1
 80005ee:	4770      	bx	lr
 80005f0:	ea90 0f01 	teq	r0, r1
 80005f4:	bf1c      	itt	ne
 80005f6:	2000      	movne	r0, #0
 80005f8:	4770      	bxne	lr
 80005fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fe:	d104      	bne.n	800060a <__addsf3+0x126>
 8000600:	0040      	lsls	r0, r0, #1
 8000602:	bf28      	it	cs
 8000604:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000608:	4770      	bx	lr
 800060a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060e:	bf3c      	itt	cc
 8000610:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bxcc	lr
 8000616:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800061a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000622:	4770      	bx	lr
 8000624:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000628:	bf16      	itet	ne
 800062a:	4608      	movne	r0, r1
 800062c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000630:	4601      	movne	r1, r0
 8000632:	0242      	lsls	r2, r0, #9
 8000634:	bf06      	itte	eq
 8000636:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800063a:	ea90 0f01 	teqeq	r0, r1
 800063e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000642:	4770      	bx	lr

08000644 <__aeabi_ui2f>:
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	e004      	b.n	8000654 <__aeabi_i2f+0x8>
 800064a:	bf00      	nop

0800064c <__aeabi_i2f>:
 800064c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000650:	bf48      	it	mi
 8000652:	4240      	negmi	r0, r0
 8000654:	ea5f 0c00 	movs.w	ip, r0
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000660:	4601      	mov	r1, r0
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	e01c      	b.n	80006a2 <__aeabi_l2f+0x2a>

08000668 <__aeabi_ul2f>:
 8000668:	ea50 0201 	orrs.w	r2, r0, r1
 800066c:	bf08      	it	eq
 800066e:	4770      	bxeq	lr
 8000670:	f04f 0300 	mov.w	r3, #0
 8000674:	e00a      	b.n	800068c <__aeabi_l2f+0x14>
 8000676:	bf00      	nop

08000678 <__aeabi_l2f>:
 8000678:	ea50 0201 	orrs.w	r2, r0, r1
 800067c:	bf08      	it	eq
 800067e:	4770      	bxeq	lr
 8000680:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000684:	d502      	bpl.n	800068c <__aeabi_l2f+0x14>
 8000686:	4240      	negs	r0, r0
 8000688:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800068c:	ea5f 0c01 	movs.w	ip, r1
 8000690:	bf02      	ittt	eq
 8000692:	4684      	moveq	ip, r0
 8000694:	4601      	moveq	r1, r0
 8000696:	2000      	moveq	r0, #0
 8000698:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800069c:	bf08      	it	eq
 800069e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a6:	fabc f28c 	clz	r2, ip
 80006aa:	3a08      	subs	r2, #8
 80006ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006b0:	db10      	blt.n	80006d4 <__aeabi_l2f+0x5c>
 80006b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b6:	4463      	add	r3, ip
 80006b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006bc:	f1c2 0220 	rsb	r2, r2, #32
 80006c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c4:	fa20 f202 	lsr.w	r2, r0, r2
 80006c8:	eb43 0002 	adc.w	r0, r3, r2
 80006cc:	bf08      	it	eq
 80006ce:	f020 0001 	biceq.w	r0, r0, #1
 80006d2:	4770      	bx	lr
 80006d4:	f102 0220 	add.w	r2, r2, #32
 80006d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006dc:	f1c2 0220 	rsb	r2, r2, #32
 80006e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e4:	fa21 f202 	lsr.w	r2, r1, r2
 80006e8:	eb43 0002 	adc.w	r0, r3, r2
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_uldivmod>:
 80006f4:	b953      	cbnz	r3, 800070c <__aeabi_uldivmod+0x18>
 80006f6:	b94a      	cbnz	r2, 800070c <__aeabi_uldivmod+0x18>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	bf08      	it	eq
 80006fc:	2800      	cmpeq	r0, #0
 80006fe:	bf1c      	itt	ne
 8000700:	f04f 31ff 	movne.w	r1, #4294967295
 8000704:	f04f 30ff 	movne.w	r0, #4294967295
 8000708:	f000 b976 	b.w	80009f8 <__aeabi_idiv0>
 800070c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000710:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000714:	f000 f806 	bl	8000724 <__udivmoddi4>
 8000718:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000720:	b004      	add	sp, #16
 8000722:	4770      	bx	lr

08000724 <__udivmoddi4>:
 8000724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000728:	9e08      	ldr	r6, [sp, #32]
 800072a:	460d      	mov	r5, r1
 800072c:	4604      	mov	r4, r0
 800072e:	4688      	mov	r8, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14d      	bne.n	80007d0 <__udivmoddi4+0xac>
 8000734:	428a      	cmp	r2, r1
 8000736:	4694      	mov	ip, r2
 8000738:	d968      	bls.n	800080c <__udivmoddi4+0xe8>
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	b152      	cbz	r2, 8000756 <__udivmoddi4+0x32>
 8000740:	fa01 f302 	lsl.w	r3, r1, r2
 8000744:	f1c2 0120 	rsb	r1, r2, #32
 8000748:	fa20 f101 	lsr.w	r1, r0, r1
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	ea41 0803 	orr.w	r8, r1, r3
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800075a:	fbb8 f7f1 	udiv	r7, r8, r1
 800075e:	fa1f fe8c 	uxth.w	lr, ip
 8000762:	fb01 8817 	mls	r8, r1, r7, r8
 8000766:	fb07 f00e 	mul.w	r0, r7, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000770:	4298      	cmp	r0, r3
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x66>
 8000774:	eb1c 0303 	adds.w	r3, ip, r3
 8000778:	f107 35ff 	add.w	r5, r7, #4294967295
 800077c:	f080 811e 	bcs.w	80009bc <__udivmoddi4+0x298>
 8000780:	4298      	cmp	r0, r3
 8000782:	f240 811b 	bls.w	80009bc <__udivmoddi4+0x298>
 8000786:	3f02      	subs	r7, #2
 8000788:	4463      	add	r3, ip
 800078a:	1a1b      	subs	r3, r3, r0
 800078c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000790:	fb01 3310 	mls	r3, r1, r0, r3
 8000794:	fb00 fe0e 	mul.w	lr, r0, lr
 8000798:	b2a4      	uxth	r4, r4
 800079a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079e:	45a6      	cmp	lr, r4
 80007a0:	d90a      	bls.n	80007b8 <__udivmoddi4+0x94>
 80007a2:	eb1c 0404 	adds.w	r4, ip, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	f080 8109 	bcs.w	80009c0 <__udivmoddi4+0x29c>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f240 8106 	bls.w	80009c0 <__udivmoddi4+0x29c>
 80007b4:	4464      	add	r4, ip
 80007b6:	3802      	subs	r0, #2
 80007b8:	2100      	movs	r1, #0
 80007ba:	eba4 040e 	sub.w	r4, r4, lr
 80007be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c2:	b11e      	cbz	r6, 80007cc <__udivmoddi4+0xa8>
 80007c4:	2300      	movs	r3, #0
 80007c6:	40d4      	lsrs	r4, r2
 80007c8:	e9c6 4300 	strd	r4, r3, [r6]
 80007cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d0:	428b      	cmp	r3, r1
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0xc2>
 80007d4:	2e00      	cmp	r6, #0
 80007d6:	f000 80ee 	beq.w	80009b6 <__udivmoddi4+0x292>
 80007da:	2100      	movs	r1, #0
 80007dc:	e9c6 0500 	strd	r0, r5, [r6]
 80007e0:	4608      	mov	r0, r1
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e6:	fab3 f183 	clz	r1, r3
 80007ea:	2900      	cmp	r1, #0
 80007ec:	d14a      	bne.n	8000884 <__udivmoddi4+0x160>
 80007ee:	42ab      	cmp	r3, r5
 80007f0:	d302      	bcc.n	80007f8 <__udivmoddi4+0xd4>
 80007f2:	4282      	cmp	r2, r0
 80007f4:	f200 80fc 	bhi.w	80009f0 <__udivmoddi4+0x2cc>
 80007f8:	1a84      	subs	r4, r0, r2
 80007fa:	eb65 0303 	sbc.w	r3, r5, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	4698      	mov	r8, r3
 8000802:	2e00      	cmp	r6, #0
 8000804:	d0e2      	beq.n	80007cc <__udivmoddi4+0xa8>
 8000806:	e9c6 4800 	strd	r4, r8, [r6]
 800080a:	e7df      	b.n	80007cc <__udivmoddi4+0xa8>
 800080c:	b902      	cbnz	r2, 8000810 <__udivmoddi4+0xec>
 800080e:	deff      	udf	#255	; 0xff
 8000810:	fab2 f282 	clz	r2, r2
 8000814:	2a00      	cmp	r2, #0
 8000816:	f040 8091 	bne.w	800093c <__udivmoddi4+0x218>
 800081a:	eba1 000c 	sub.w	r0, r1, ip
 800081e:	2101      	movs	r1, #1
 8000820:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000824:	fa1f fe8c 	uxth.w	lr, ip
 8000828:	fbb0 f3f7 	udiv	r3, r0, r7
 800082c:	fb07 0013 	mls	r0, r7, r3, r0
 8000830:	0c25      	lsrs	r5, r4, #16
 8000832:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000836:	fb0e f003 	mul.w	r0, lr, r3
 800083a:	42a8      	cmp	r0, r5
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x12c>
 800083e:	eb1c 0505 	adds.w	r5, ip, r5
 8000842:	f103 38ff 	add.w	r8, r3, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x12a>
 8000848:	42a8      	cmp	r0, r5
 800084a:	f200 80ce 	bhi.w	80009ea <__udivmoddi4+0x2c6>
 800084e:	4643      	mov	r3, r8
 8000850:	1a2d      	subs	r5, r5, r0
 8000852:	fbb5 f0f7 	udiv	r0, r5, r7
 8000856:	fb07 5510 	mls	r5, r7, r0, r5
 800085a:	fb0e fe00 	mul.w	lr, lr, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000864:	45a6      	cmp	lr, r4
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x156>
 8000868:	eb1c 0404 	adds.w	r4, ip, r4
 800086c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000870:	d202      	bcs.n	8000878 <__udivmoddi4+0x154>
 8000872:	45a6      	cmp	lr, r4
 8000874:	f200 80b6 	bhi.w	80009e4 <__udivmoddi4+0x2c0>
 8000878:	4628      	mov	r0, r5
 800087a:	eba4 040e 	sub.w	r4, r4, lr
 800087e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000882:	e79e      	b.n	80007c2 <__udivmoddi4+0x9e>
 8000884:	f1c1 0720 	rsb	r7, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 fc07 	lsr.w	ip, r2, r7
 800088e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000892:	fa25 fa07 	lsr.w	sl, r5, r7
 8000896:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800089a:	fbba f8f9 	udiv	r8, sl, r9
 800089e:	fa20 f307 	lsr.w	r3, r0, r7
 80008a2:	fb09 aa18 	mls	sl, r9, r8, sl
 80008a6:	408d      	lsls	r5, r1
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	431d      	orrs	r5, r3
 80008ae:	fa00 f301 	lsl.w	r3, r0, r1
 80008b2:	fb08 f00e 	mul.w	r0, r8, lr
 80008b6:	0c2c      	lsrs	r4, r5, #16
 80008b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80008bc:	42a0      	cmp	r0, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d90b      	bls.n	80008dc <__udivmoddi4+0x1b8>
 80008c4:	eb1c 0404 	adds.w	r4, ip, r4
 80008c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80008cc:	f080 8088 	bcs.w	80009e0 <__udivmoddi4+0x2bc>
 80008d0:	42a0      	cmp	r0, r4
 80008d2:	f240 8085 	bls.w	80009e0 <__udivmoddi4+0x2bc>
 80008d6:	f1a8 0802 	sub.w	r8, r8, #2
 80008da:	4464      	add	r4, ip
 80008dc:	1a24      	subs	r4, r4, r0
 80008de:	fbb4 f0f9 	udiv	r0, r4, r9
 80008e2:	fb09 4410 	mls	r4, r9, r0, r4
 80008e6:	fb00 fe0e 	mul.w	lr, r0, lr
 80008ea:	b2ad      	uxth	r5, r5
 80008ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f0:	45a6      	cmp	lr, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1e2>
 80008f4:	eb1c 0404 	adds.w	r4, ip, r4
 80008f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008fc:	d26c      	bcs.n	80009d8 <__udivmoddi4+0x2b4>
 80008fe:	45a6      	cmp	lr, r4
 8000900:	d96a      	bls.n	80009d8 <__udivmoddi4+0x2b4>
 8000902:	3802      	subs	r0, #2
 8000904:	4464      	add	r4, ip
 8000906:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090a:	fba0 9502 	umull	r9, r5, r0, r2
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	42ac      	cmp	r4, r5
 8000914:	46c8      	mov	r8, r9
 8000916:	46ae      	mov	lr, r5
 8000918:	d356      	bcc.n	80009c8 <__udivmoddi4+0x2a4>
 800091a:	d053      	beq.n	80009c4 <__udivmoddi4+0x2a0>
 800091c:	2e00      	cmp	r6, #0
 800091e:	d069      	beq.n	80009f4 <__udivmoddi4+0x2d0>
 8000920:	ebb3 0208 	subs.w	r2, r3, r8
 8000924:	eb64 040e 	sbc.w	r4, r4, lr
 8000928:	fa22 f301 	lsr.w	r3, r2, r1
 800092c:	fa04 f707 	lsl.w	r7, r4, r7
 8000930:	431f      	orrs	r7, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c6 7400 	strd	r7, r4, [r6]
 8000938:	2100      	movs	r1, #0
 800093a:	e747      	b.n	80007cc <__udivmoddi4+0xa8>
 800093c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000940:	f1c2 0120 	rsb	r1, r2, #32
 8000944:	fa25 f301 	lsr.w	r3, r5, r1
 8000948:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094c:	fa20 f101 	lsr.w	r1, r0, r1
 8000950:	4095      	lsls	r5, r2
 8000952:	430d      	orrs	r5, r1
 8000954:	fbb3 f1f7 	udiv	r1, r3, r7
 8000958:	fb07 3311 	mls	r3, r7, r1, r3
 800095c:	fa1f fe8c 	uxth.w	lr, ip
 8000960:	0c28      	lsrs	r0, r5, #16
 8000962:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000966:	fb01 f30e 	mul.w	r3, r1, lr
 800096a:	4283      	cmp	r3, r0
 800096c:	fa04 f402 	lsl.w	r4, r4, r2
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x260>
 8000972:	eb1c 0000 	adds.w	r0, ip, r0
 8000976:	f101 38ff 	add.w	r8, r1, #4294967295
 800097a:	d22f      	bcs.n	80009dc <__udivmoddi4+0x2b8>
 800097c:	4283      	cmp	r3, r0
 800097e:	d92d      	bls.n	80009dc <__udivmoddi4+0x2b8>
 8000980:	3902      	subs	r1, #2
 8000982:	4460      	add	r0, ip
 8000984:	1ac0      	subs	r0, r0, r3
 8000986:	fbb0 f3f7 	udiv	r3, r0, r7
 800098a:	fb07 0013 	mls	r0, r7, r3, r0
 800098e:	b2ad      	uxth	r5, r5
 8000990:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000994:	fb03 f00e 	mul.w	r0, r3, lr
 8000998:	42a8      	cmp	r0, r5
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x28a>
 800099c:	eb1c 0505 	adds.w	r5, ip, r5
 80009a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a4:	d216      	bcs.n	80009d4 <__udivmoddi4+0x2b0>
 80009a6:	42a8      	cmp	r0, r5
 80009a8:	d914      	bls.n	80009d4 <__udivmoddi4+0x2b0>
 80009aa:	3b02      	subs	r3, #2
 80009ac:	4465      	add	r5, ip
 80009ae:	1a28      	subs	r0, r5, r0
 80009b0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009b4:	e738      	b.n	8000828 <__udivmoddi4+0x104>
 80009b6:	4631      	mov	r1, r6
 80009b8:	4630      	mov	r0, r6
 80009ba:	e707      	b.n	80007cc <__udivmoddi4+0xa8>
 80009bc:	462f      	mov	r7, r5
 80009be:	e6e4      	b.n	800078a <__udivmoddi4+0x66>
 80009c0:	4618      	mov	r0, r3
 80009c2:	e6f9      	b.n	80007b8 <__udivmoddi4+0x94>
 80009c4:	454b      	cmp	r3, r9
 80009c6:	d2a9      	bcs.n	800091c <__udivmoddi4+0x1f8>
 80009c8:	ebb9 0802 	subs.w	r8, r9, r2
 80009cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009d0:	3801      	subs	r0, #1
 80009d2:	e7a3      	b.n	800091c <__udivmoddi4+0x1f8>
 80009d4:	4643      	mov	r3, r8
 80009d6:	e7ea      	b.n	80009ae <__udivmoddi4+0x28a>
 80009d8:	4628      	mov	r0, r5
 80009da:	e794      	b.n	8000906 <__udivmoddi4+0x1e2>
 80009dc:	4641      	mov	r1, r8
 80009de:	e7d1      	b.n	8000984 <__udivmoddi4+0x260>
 80009e0:	46d0      	mov	r8, sl
 80009e2:	e77b      	b.n	80008dc <__udivmoddi4+0x1b8>
 80009e4:	4464      	add	r4, ip
 80009e6:	3802      	subs	r0, #2
 80009e8:	e747      	b.n	800087a <__udivmoddi4+0x156>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4465      	add	r5, ip
 80009ee:	e72f      	b.n	8000850 <__udivmoddi4+0x12c>
 80009f0:	4608      	mov	r0, r1
 80009f2:	e706      	b.n	8000802 <__udivmoddi4+0xde>
 80009f4:	4631      	mov	r1, r6
 80009f6:	e6e9      	b.n	80007cc <__udivmoddi4+0xa8>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <readRegister+0x50>)
 8000a0e:	f003 f856 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f002 faa8 	bl	8002f68 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000a18:	1cf9      	adds	r1, r7, #3
 8000a1a:	2364      	movs	r3, #100	; 0x64
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f003 fefe 	bl	8004820 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000a24:	f107 010f 	add.w	r1, r7, #15
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f004 f833 	bl	8004a98 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f002 fa98 	bl	8002f68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <readRegister+0x50>)
 8000a3e:	f003 f83e 	bl	8003abe <HAL_GPIO_WritePin>
	return rec;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	72fb      	strb	r3, [r7, #11]
 8000a60:	4613      	mov	r3, r2
 8000a62:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a8e:	e00f      	b.n	8000ab0 <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 8000a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	637a      	str	r2, [r7, #52]	; 0x34
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	7819      	ldrb	r1, [r3, #0]
 8000a9e:	f107 0210 	add.w	r2, r7, #16
 8000aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa4:	4413      	add	r3, r2
 8000aa6:	460a      	mov	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aac:	3301      	adds	r3, #1
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab0:	7abb      	ldrb	r3, [r7, #10]
 8000ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	ddeb      	ble.n	8000a90 <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2101      	movs	r1, #1
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <writeRegister+0xa4>)
 8000abe:	f002 fffe 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000ac2:	7abb      	ldrb	r3, [r7, #10]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	f107 0110 	add.w	r1, r7, #16
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f003 fea4 	bl	8004820 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <writeRegister+0xa4>)
 8000ade:	f002 ffee 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f002 fa40 	bl	8002f68 <HAL_Delay>
	return cmd;  // pull the pin high
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	f04f 0100 	mov.w	r1, #0
 8000b0e:	04d9      	lsls	r1, r3, #19
 8000b10:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000b14:	04d0      	lsls	r0, r2, #19
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <setRFFrequency+0x80>)
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	f7ff fdea 	bl	80006f4 <__aeabi_uldivmod>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	0c02      	lsrs	r2, r0, #16
 8000b36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b3a:	0c0b      	lsrs	r3, r1, #16
 8000b3c:	b2d3      	uxtb	r3, r2
 8000b3e:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000b40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b44:	f04f 0200 	mov.w	r2, #0
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	0a02      	lsrs	r2, r0, #8
 8000b4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000b52:	0a0b      	lsrs	r3, r1, #8
 8000b54:	b2d3      	uxtb	r3, r2
 8000b56:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000b58:	7c3b      	ldrb	r3, [r7, #16]
 8000b5a:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b62:	f107 020c 	add.w	r2, r7, #12
 8000b66:	2303      	movs	r3, #3
 8000b68:	2106      	movs	r1, #6
 8000b6a:	f7ff ff71 	bl	8000a50 <writeRegister>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	01e84800 	.word	0x01e84800

08000b7c <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f103 0210 	add.w	r2, r3, #16
 8000b90:	2301      	movs	r3, #1
 8000b92:	2109      	movs	r1, #9
 8000b94:	f7ff ff5c 	bl	8000a50 <writeRegister>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f103 0216 	add.w	r2, r3, #22
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	2139      	movs	r1, #57	; 0x39
 8000bb8:	f7ff ff4a 	bl	8000a50 <writeRegister>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f103 0217 	add.w	r2, r3, #23
 8000bd8:	2301      	movs	r3, #1
 8000bda:	210b      	movs	r1, #11
 8000bdc:	f7ff ff38 	bl	8000a50 <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f103 021a 	add.w	r2, r3, #26
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	211f      	movs	r1, #31
 8000c00:	f7ff ff26 	bl	8000a50 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f103 021c 	add.w	r2, r3, #28
 8000c10:	2301      	movs	r3, #1
 8000c12:	2120      	movs	r1, #32
 8000c14:	f7ff ff1c 	bl	8000a50 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f103 021d 	add.w	r2, r3, #29
 8000c24:	2301      	movs	r3, #1
 8000c26:	2121      	movs	r1, #33	; 0x21
 8000c28:	f7ff ff12 	bl	8000a50 <writeRegister>
			1);
	module->readBytes = 0;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7c9b      	ldrb	r3, [r3, #18]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7cdb      	ldrb	r3, [r3, #19]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000c76:	f107 020f 	add.w	r2, r7, #15
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	211d      	movs	r1, #29
 8000c7e:	f7ff fee7 	bl	8000a50 <writeRegister>

	cmd = module->LoRa_SF << 4;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7c5b      	ldrb	r3, [r3, #17]
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7d1b      	ldrb	r3, [r3, #20]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	4413      	add	r3, r2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7eda      	ldrb	r2, [r3, #27]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000cae:	f107 020f 	add.w	r2, r7, #15
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	211e      	movs	r1, #30
 8000cb6:	f7ff fecb 	bl	8000a50 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f103 0219 	add.w	r2, r3, #25
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2126      	movs	r1, #38	; 0x26
 8000cca:	f7ff fec1 	bl	8000a50 <writeRegister>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000ce4:	2131      	movs	r1, #49	; 0x31
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe88 	bl	80009fc <readRegister>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	f023 0307 	bic.w	r3, r3, #7
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f043 0305 	orr.w	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000d0a:	f107 020f 	add.w	r2, r7, #15
 8000d0e:	2301      	movs	r3, #1
 8000d10:	2131      	movs	r1, #49	; 0x31
 8000d12:	f7ff fe9d 	bl	8000a50 <writeRegister>
	tmp = 0x0C;
 8000d16:	230c      	movs	r3, #12
 8000d18:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000d20:	f107 020f 	add.w	r2, r7, #15
 8000d24:	2301      	movs	r3, #1
 8000d26:	2137      	movs	r1, #55	; 0x37
 8000d28:	f7ff fe92 	bl	8000a50 <writeRegister>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000d42:	2101      	movs	r1, #1
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe59 	bl	80009fc <readRegister>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000d76:	f107 020f 	add.w	r2, r7, #15
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f7ff fe67 	bl	8000a50 <writeRegister>
	module->operatingMode = mode;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	78fa      	ldrb	r2, [r7, #3]
 8000d86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000d9a:	23ff      	movs	r3, #255	; 0xff
 8000d9c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000da4:	f107 020f 	add.w	r2, r7, #15
 8000da8:	2301      	movs	r3, #1
 8000daa:	2112      	movs	r1, #18
 8000dac:	f7ff fe50 	bl	8000a50 <writeRegister>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f002 fe5f 	bl	8003a90 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <ledInit+0x60>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <ledInit+0x60>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <ledInit+0x60>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <ledInit+0x60>)
 8000e02:	f023 0320 	bic.w	r3, r3, #32
 8000e06:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <ledInit+0x60>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <ledInit+0x60>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <ledInit+0x60>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <ledInit+0x60>)
 8000e1a:	f023 0310 	bic.w	r3, r3, #16
 8000e1e:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <ledInit+0x60>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <ledInit+0x60>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <ledInit+0x60>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <ledInit+0x60>)
 8000e32:	f023 0308 	bic.w	r3, r3, #8
 8000e36:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 f835 	bl	8000ea8 <led_reset>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 8000e54:	f002 f87e 	bl	8002f54 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e64:	d90b      	bls.n	8000e7e <led_enable_kalive+0x32>
		l->kaCounter = HAL_GetTick();
 8000e66:	f002 f875 	bl	8002f54 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <led_enable_kalive+0x58>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <led_enable_kalive+0x58>)
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 8000e7c:	e00d      	b.n	8000e9a <led_enable_kalive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 8000e7e:	f002 f869 	bl	8002f54 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b32      	cmp	r3, #50	; 0x32
 8000e8c:	d905      	bls.n	8000e9a <led_enable_kalive+0x4e>
		SYS_RP_LED_OFF();
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <led_enable_kalive+0x58>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <led_enable_kalive+0x58>)
 8000e94:	f023 0320 	bic.w	r3, r3, #32
 8000e98:	60d3      	str	r3, [r2, #12]
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8000ec2:	f002 f847 	bl	8002f54 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_UART_RxCpltCallback>:

/* In the interrupt handler, read the received data from the UART1 data register */
/* Enable UART1 interrupt */

uint8_t rxData;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */

	if (uart1_ptr->len >= RX_BUFFLEN) {
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_UART_RxCpltCallback+0x54>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000ef8:	2b63      	cmp	r3, #99	; 0x63
 8000efa:	d909      	bls.n	8000f10 <HAL_UART_RxCpltCallback+0x28>
		cleanRxBuffer(uart1_ptr);
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_UART_RxCpltCallback+0x54>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 ff84 	bl	8002e0e <cleanRxBuffer>
		uart1_ptr->len = 0;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_UART_RxCpltCallback+0x54>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}

	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	490b      	ldr	r1, [pc, #44]	; (8000f40 <HAL_UART_RxCpltCallback+0x58>)
 8000f14:	480b      	ldr	r0, [pc, #44]	; (8000f44 <HAL_UART_RxCpltCallback+0x5c>)
 8000f16:	f004 f9b8 	bl	800528a <HAL_UART_Receive_IT>
	uart1_ptr->rxBuffer[uart1_ptr->len++] = rxData;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_UART_RxCpltCallback+0x54>)
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_UART_RxCpltCallback+0x54>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 8000f26:	1c50      	adds	r0, r2, #1
 8000f28:	b2c0      	uxtb	r0, r0
 8000f2a:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_UART_RxCpltCallback+0x58>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	548b      	strb	r3, [r1, r2]
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000023c 	.word	0x2000023c
 8000f40:	20000248 	.word	0x20000248
 8000f44:	20000170 	.word	0x20000170

08000f48 <setTxBaseParameters>:
	}
	return len;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	73fb      	strb	r3, [r7, #15]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	737b      	strb	r3, [r7, #13]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	733b      	strb	r3, [r7, #12]

	loraTx->frequency = DOWNLINK_FREQ;
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	a327      	add	r3, pc, #156	; (adr r3, 8001000 <setTxBaseParameters+0xb8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraTx->power = SX1278_POWER_17DBM;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	22fc      	movs	r2, #252	; 0xfc
 8000f70:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	220a      	movs	r2, #10
 8000f76:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2206      	movs	r2, #6
 8000f7c:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2234      	movs	r2, #52	; 0x34
 8000f8e:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	220b      	movs	r2, #11
 8000f94:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2223      	movs	r2, #35	; 0x23
 8000f9a:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	77da      	strb	r2, [r3, #31]

	loraTx->flagsMode = 0xff; //
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraTx->flagsMode, TX_DONE_MASK);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	f023 0308 	bic.w	r3, r3, #8
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

	loraTx->fhssValue = HOPS_PERIOD;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	779a      	strb	r2, [r3, #30]
	loraTx->len = SX1278_MAX_PACKET;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	755a      	strb	r2, [r3, #21]
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	f3af 8000 	nop.w
 8001000:	08f0d180 	.word	0x08f0d180
 8001004:	00000000 	.word	0x00000000

08001008 <saveTx>:

void saveTx(SX1278_t *module) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fea1 	bl	8000d5a <updateLoraLowFreq>
	HAL_Delay(15);
 8001018:	200f      	movs	r0, #15
 800101a:	f001 ffa5 	bl	8002f68 <HAL_Delay>
	setRFFrequency(module);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fd6a 	bl	8000af8 <setRFFrequency>
	setLORAWAN(module);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fdbb 	bl	8000ba0 <setLORAWAN>
	setOutputPower(module);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fda6 	bl	8000b7c <setOutputPower>
	setOvercurrentProtect(module);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fdc7 	bl	8000bc4 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f103 0218 	add.w	r2, r3, #24
 8001042:	2301      	movs	r3, #1
 8001044:	210c      	movs	r1, #12
 8001046:	f7ff fd03 	bl	8000a50 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7c5b      	ldrb	r3, [r3, #17]
 800104e:	2b06      	cmp	r3, #6
 8001050:	d10a      	bne.n	8001068 <saveTx+0x60>
		module->headerMode = IMPLICIT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fe38 	bl	8000cd6 <setDetectionParameters>
 8001066:	e006      	b.n	8001076 <saveTx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fde0 	bl	8000c3c <setReModemConfig>
	setPreambleParameters(module);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fdb3 	bl	8000be8 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f103 021e 	add.w	r2, r3, #30
 800108e:	2301      	movs	r3, #1
 8001090:	2124      	movs	r1, #36	; 0x24
 8001092:	f7ff fcdd 	bl	8000a50 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 021f 	add.w	r2, r3, #31
 80010a2:	2301      	movs	r3, #1
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	f7ff fcd3 	bl	8000a50 <writeRegister>
	clearIrqFlags(module);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fe71 	bl	8000d92 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f103 0220 	add.w	r2, r3, #32
 80010bc:	2301      	movs	r3, #1
 80010be:	2111      	movs	r1, #17
 80010c0:	f7ff fcc6 	bl	8000a50 <writeRegister>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <setTxParameters>:
	clearIrqFlags(module);
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);

}

void setTxParameters(SX1278_t *module) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->len;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7d5b      	ldrb	r3, [r3, #21]
 80010d8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80010e0:	f107 020f 	add.w	r2, r7, #15
 80010e4:	2301      	movs	r3, #1
 80010e6:	2122      	movs	r1, #34	; 0x22
 80010e8:	f7ff fcb2 	bl	8000a50 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80010f2:	210e      	movs	r1, #14
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc81 	bl	80009fc <readRegister>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73bb      	strb	r3, [r7, #14]
	addr = 0x80;
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001108:	f107 020e 	add.w	r2, r7, #14
 800110c:	2301      	movs	r3, #1
 800110e:	210d      	movs	r1, #13
 8001110:	f7ff fc9e 	bl	8000a50 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800111a:	2122      	movs	r1, #34	; 0x22
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc6d 	bl	80009fc <readRegister>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	755a      	strb	r2, [r3, #21]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <sx1278Reset>:

void sx1278Reset() {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2101      	movs	r1, #1
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <sx1278Reset+0x34>)
 800113e:	f002 fcbe 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	4808      	ldr	r0, [pc, #32]	; (8001168 <sx1278Reset+0x34>)
 8001148:	f002 fcb9 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f001 ff0b 	bl	8002f68 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2101      	movs	r1, #1
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <sx1278Reset+0x34>)
 8001158:	f002 fcb1 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f001 ff03 	bl	8002f68 <HAL_Delay>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010c00 	.word	0x40010c00

0800116c <transmit>:

void transmit(const UART1_t *uart1, SX1278_t *loraTx) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	if (loraTx->status == UNKNOW) {
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d115      	bne.n	80011ac <transmit+0x40>
		sprintf(uart1->txBuffer, "Configuring Master LoRa module: Tx Mode\r\n");
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3364      	adds	r3, #100	; 0x64
 8001184:	495d      	ldr	r1, [pc, #372]	; (80012fc <transmit+0x190>)
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fcce 	bl	8005b28 <siprintf>
		uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3364      	adds	r3, #100	; 0x64
 8001190:	2164      	movs	r1, #100	; 0x64
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe18 	bl	8002dc8 <uart1_send_frame>
		setTxBaseParameters(loraTx);
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff fed5 	bl	8000f48 <setTxBaseParameters>
		saveTx(loraTx);
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff ff32 	bl	8001008 <saveTx>
		loraTx->status = TX_READY;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (loraTx->status == TX_READY) {
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f040 809e 	bne.w	80012f4 <transmit+0x188>

		setTxParameters(loraTx);
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff ff87 	bl	80010cc <setTxParameters>
		uint8_t len = sprintf(uart1->txBuffer, "Sending message: ",
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 0064 	add.w	r0, r3, #100	; 0x64
				loraTx->buffer);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3325      	adds	r3, #37	; 0x25
		uint8_t len = sprintf(uart1->txBuffer, "Sending message: ",
 80011c8:	461a      	mov	r2, r3
 80011ca:	494d      	ldr	r1, [pc, #308]	; (8001300 <transmit+0x194>)
 80011cc:	f004 fcac 	bl	8005b28 <siprintf>
 80011d0:	4603      	mov	r3, r0
 80011d2:	77fb      	strb	r3, [r7, #31]
		uart1_send_frame(uart1->txBuffer, len);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3364      	adds	r3, #100	; 0x64
 80011d8:	7ffa      	ldrb	r2, [r7, #31]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fdf3 	bl	8002dc8 <uart1_send_frame>
		for (int i = 0; i < loraTx->len; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
 80011e6:	e017      	b.n	8001218 <transmit+0xac>
			len = sprintf(uart1->txBuffer, "%02X", loraTx->buffer[i]);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	4413      	add	r3, r2
 80011f4:	3325      	adds	r3, #37	; 0x25
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4942      	ldr	r1, [pc, #264]	; (8001304 <transmit+0x198>)
 80011fc:	f004 fc94 	bl	8005b28 <siprintf>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]
			uart1_send_frame(uart1->txBuffer, len);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3364      	adds	r3, #100	; 0x64
 8001208:	7ffa      	ldrb	r2, [r7, #31]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fddb 	bl	8002dc8 <uart1_send_frame>
		for (int i = 0; i < loraTx->len; i++) {
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	3301      	adds	r3, #1
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	7d5b      	ldrb	r3, [r3, #21]
 800121c:	461a      	mov	r2, r3
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	4293      	cmp	r3, r2
 8001222:	dbe1      	blt.n	80011e8 <transmit+0x7c>
		}

		for (int i = 0; i < loraTx->len; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	e011      	b.n	800124e <transmit+0xe2>
			uint8_t data = loraTx->buffer[i];
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	4413      	add	r3, r2
 8001230:	3325      	adds	r3, #37	; 0x25
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	73fb      	strb	r3, [r7, #15]
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800123c:	f107 020f 	add.w	r2, r7, #15
 8001240:	2301      	movs	r3, #1
 8001242:	2100      	movs	r1, #0
 8001244:	f7ff fc04 	bl	8000a50 <writeRegister>
		for (int i = 0; i < loraTx->len; i++) {
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	3301      	adds	r3, #1
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7d5b      	ldrb	r3, [r3, #21]
 8001252:	461a      	mov	r2, r3
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	4293      	cmp	r3, r2
 8001258:	dbe7      	blt.n	800122a <transmit+0xbe>
		}
		updateLoraLowFreq(loraTx, TX);
 800125a:	2103      	movs	r1, #3
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff fd7c 	bl	8000d5a <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8001262:	f001 fe77 	bl	8002f54 <HAL_GetTick>
 8001266:	4603      	mov	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fda2 	bl	8000db8 <SX1278_hw_GetDIO0>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d021      	beq.n	80012be <transmit+0x152>
				int timeEnd = HAL_GetTick();
 800127a:	f001 fe6b 	bl	8002f54 <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	617b      	str	r3, [r7, #20]
				int tiempoTransmision = timeEnd - timeStart;
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	613b      	str	r3, [r7, #16]
				readRegister(loraTx->spi, LR_RegIrqFlags);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001290:	2112      	movs	r1, #18
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fbb2 	bl	80009fc <readRegister>
				clearIrqFlags(loraTx);
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f7ff fd7a 	bl	8000d92 <clearIrqFlags>
				sprintf(uart1->txBuffer, "- Tx Ok: %d ms %d bytes\n",
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f103 0064 	add.w	r0, r3, #100	; 0x64
						tiempoTransmision, loraTx->len);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	7d5b      	ldrb	r3, [r3, #21]
				sprintf(uart1->txBuffer, "- Tx Ok: %d ms %d bytes\n",
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4917      	ldr	r1, [pc, #92]	; (8001308 <transmit+0x19c>)
 80012ac:	f004 fc3c 	bl	8005b28 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3364      	adds	r3, #100	; 0x64
 80012b4:	2164      	movs	r1, #100	; 0x64
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fd86 	bl	8002dc8 <uart1_send_frame>
				return;
 80012bc:	e01a      	b.n	80012f4 <transmit+0x188>
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 80012be:	f001 fe49 	bl	8002f54 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012cc:	d90e      	bls.n	80012ec <transmit+0x180>
				sx1278Reset();
 80012ce:	f7ff ff31 	bl	8001134 <sx1278Reset>
				sprintf(uart1->txBuffer, "EntryTx failed, timeout reset!\r\n");
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3364      	adds	r3, #100	; 0x64
 80012d6:	490d      	ldr	r1, [pc, #52]	; (800130c <transmit+0x1a0>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fc25 	bl	8005b28 <siprintf>
				uart1_send_frame(uart1->txBuffer, TX_BUFFLEN);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3364      	adds	r3, #100	; 0x64
 80012e2:	2164      	movs	r1, #100	; 0x64
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fd6f 	bl	8002dc8 <uart1_send_frame>
				return;
 80012ea:	e003      	b.n	80012f4 <transmit+0x188>
			}

			HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 fe3b 	bl	8002f68 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 80012f2:	e7ba      	b.n	800126a <transmit+0xfe>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	08006458 	.word	0x08006458
 8001300:	08006484 	.word	0x08006484
 8001304:	08006498 	.word	0x08006498
 8001308:	080064a0 	.word	0x080064a0
 800130c:	080064bc 	.word	0x080064bc

08001310 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8001320:	2300      	movs	r3, #0
 8001322:	737b      	strb	r3, [r7, #13]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8001324:	2301      	movs	r3, #1
 8001326:	733b      	strb	r3, [r7, #12]
	////////////////////////////////////////
	loraRx->frequency = UPLINK_FREQ;
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	a32b      	add	r3, pc, #172	; (adr r3, 80013d8 <setRxBaseParameters+0xc8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraRx->power = SX1278_POWER_17DBM;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	22fc      	movs	r2, #252	; 0xfc
 8001338:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	220a      	movs	r2, #10
 800133e:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2206      	movs	r2, #6
 8001344:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2234      	movs	r2, #52	; 0x34
 8001356:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	220b      	movs	r2, #11
 800135c:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2223      	movs	r2, #35	; 0x23
 8001362:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2208      	movs	r2, #8
 800136e:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2208      	movs	r2, #8
 800137a:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	4313      	orrs	r3, r2
 8001382:	b2da      	uxtb	r2, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4313      	orrs	r3, r2
 8001388:	b2da      	uxtb	r2, r3
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	77da      	strb	r2, [r3, #31]

	loraRx->flagsMode = 0xff;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, RX_DONE_MASK);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]
	CLEAR_BIT(loraRx->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b4:	f023 0320 	bic.w	r3, r3, #32
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]

	loraRx->fhssValue = HOPS_PERIOD;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	779a      	strb	r2, [r3, #30]
	loraRx->len = SX1278_MAX_PACKET;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	755a      	strb	r2, [r3, #21]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	0a21fe80 	.word	0x0a21fe80
 80013dc:	00000000 	.word	0x00000000

080013e0 <saveRx>:

void saveRx(SX1278_t *module) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80013e8:	2100      	movs	r1, #0
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fcb5 	bl	8000d5a <updateLoraLowFreq>
	HAL_Delay(15);
 80013f0:	200f      	movs	r0, #15
 80013f2:	f001 fdb9 	bl	8002f68 <HAL_Delay>
	setRFFrequency(module);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fb7e 	bl	8000af8 <setRFFrequency>
	setLORAWAN(module);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fbcf 	bl	8000ba0 <setLORAWAN>
	setOutputPower(module);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fbba 	bl	8000b7c <setOutputPower>
	setOvercurrentProtect(module);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fbdb 	bl	8000bc4 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0218 	add.w	r2, r3, #24
 800141a:	2301      	movs	r3, #1
 800141c:	210c      	movs	r1, #12
 800141e:	f7ff fb17 	bl	8000a50 <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7c5b      	ldrb	r3, [r3, #17]
 8001426:	2b06      	cmp	r3, #6
 8001428:	d10a      	bne.n	8001440 <saveRx+0x60>
		module->headerMode = IMPLICIT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fc4c 	bl	8000cd6 <setDetectionParameters>
 800143e:	e006      	b.n	800144e <saveRx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fbf4 	bl	8000c3c <setReModemConfig>
	setPreambleParameters(module);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fbc7 	bl	8000be8 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f103 021e 	add.w	r2, r3, #30
 8001466:	2301      	movs	r3, #1
 8001468:	2124      	movs	r1, #36	; 0x24
 800146a:	f7ff faf1 	bl	8000a50 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f103 021f 	add.w	r2, r3, #31
 800147a:	2301      	movs	r3, #1
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	f7ff fae7 	bl	8000a50 <writeRegister>
	clearIrqFlags(module);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fc85 	bl	8000d92 <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0220 	add.w	r2, r3, #32
 8001494:	2301      	movs	r3, #1
 8001496:	2111      	movs	r1, #17
 8001498:	f7ff fada 	bl	8000a50 <writeRegister>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 80014ac:	2100      	movs	r1, #0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc53 	bl	8000d5a <updateLoraLowFreq>
	uint8_t cmd = module->len;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7d5b      	ldrb	r3, [r3, #21]
 80014b8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80014c0:	f107 020f 	add.w	r2, r7, #15
 80014c4:	2301      	movs	r3, #1
 80014c6:	2122      	movs	r1, #34	; 0x22
 80014c8:	f7ff fac2 	bl	8000a50 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80014d2:	210f      	movs	r1, #15
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fa91 	bl	80009fc <readRegister>
 80014da:	4603      	mov	r3, r0
 80014dc:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80014e4:	f107 020e 	add.w	r2, r7, #14
 80014e8:	2301      	movs	r3, #1
 80014ea:	210d      	movs	r1, #13
 80014ec:	f7ff fab0 	bl	8000a50 <writeRegister>
	module->len = readRegister(module->spi, LR_RegPayloadLength);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80014f6:	2122      	movs	r1, #34	; 0x22
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fa7f 	bl	80009fc <readRegister>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	755a      	strb	r2, [r3, #21]
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <clearMemForRx>:

void clearMemForRx(SX1278_t *loraRx) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	if (loraRx->status == RX_READY) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800151c:	2b02      	cmp	r3, #2
 800151e:	d107      	bne.n	8001530 <clearMemForRx+0x22>
		memset(loraRx->buffer, 0, SX1278_MAX_PACKET);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3325      	adds	r3, #37	; 0x25
 8001524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f004 faf4 	bl	8005b18 <memset>
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <waitForRxDone>:

uint8_t waitForRxDone(SX1278_t *loraRx) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	uint32_t timeout = HAL_GetTick();
 8001540:	f001 fd08 	bl	8002f54 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]
	while ((!SX1278_hw_GetDIO0(loraRx->hw))) {
 8001546:	e02f      	b.n	80015a8 <waitForRxDone+0x70>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800154e:	2112      	movs	r1, #18
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa53 	bl	80009fc <readRegister>
 8001556:	4603      	mov	r3, r0
 8001558:	72fb      	strb	r3, [r7, #11]
		if (READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK)) {
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d016      	beq.n	8001592 <waitForRxDone+0x5a>
			uint8_t cmd = flags | (1 << 7);
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156a:	b2db      	uxtb	r3, r3
 800156c:	72bb      	strb	r3, [r7, #10]
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001574:	f107 020a 	add.w	r2, r7, #10
 8001578:	2301      	movs	r3, #1
 800157a:	2112      	movs	r1, #18
 800157c:	f7ff fa68 	bl	8000a50 <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001586:	2112      	movs	r1, #18
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fa37 	bl	80009fc <readRegister>
 800158e:	4603      	mov	r3, r0
 8001590:	72fb      	strb	r3, [r7, #11]
		}
		if ((HAL_GetTick() - timeout > 5000))
 8001592:	f001 fcdf 	bl	8002f54 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <waitForRxDone+0x70>
			return -1;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	e008      	b.n	80015ba <waitForRxDone+0x82>
	while ((!SX1278_hw_GetDIO0(loraRx->hw))) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fc03 	bl	8000db8 <SX1278_hw_GetDIO0>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0c7      	beq.n	8001548 <waitForRxDone+0x10>
	}
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <configInit>:

void configInit(UART1_t *uart1, SX1278_t *loraRx) {
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b08e      	sub	sp, #56	; 0x38
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	uint8_t tmp[] = "Configuring Master LoRa module: Rx Mode\r\n";
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <configInit+0x60>)
 80015d0:	f107 0408 	add.w	r4, r7, #8
 80015d4:	461d      	mov	r5, r3
 80015d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	c403      	stmia	r4!, {r0, r1}
 80015e4:	8022      	strh	r2, [r4, #0]
	size_t len = strlen(tmp);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fdb0 	bl	8000150 <strlen>
 80015f0:	6378      	str	r0, [r7, #52]	; 0x34
	uart1_send_frame(tmp, len);
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fbe3 	bl	8002dc8 <uart1_send_frame>
	setRxBaseParameters(&*loraRx);
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f7ff fe84 	bl	8001310 <setRxBaseParameters>
	saveRx(loraRx);
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f7ff fee9 	bl	80013e0 <saveRx>
	loraRx->status = RX_READY;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	setRxParameters(loraRx);
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f7ff ff44 	bl	80014a4 <setRxParameters>
}
 800161c:	bf00      	nop
 800161e:	3738      	adds	r7, #56	; 0x38
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	080064e0 	.word	0x080064e0

08001628 <crcErrorActivation>:

int crcErrorActivation(SX1278_t *loraRx) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	uint8_t flags2 = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001636:	2112      	movs	r1, #18
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f9df 	bl	80009fc <readRegister>
 800163e:	4603      	mov	r3, r0
 8001640:	75fb      	strb	r3, [r7, #23]
	SET_BIT(flags2, RX_DONE_MASK);
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd = flags2;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	73fb      	strb	r3, [r7, #15]
	writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001654:	f107 020f 	add.w	r2, r7, #15
 8001658:	2301      	movs	r3, #1
 800165a:	2112      	movs	r1, #18
 800165c:	f7ff f9f8 	bl	8000a50 <writeRegister>
	uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001666:	2112      	movs	r1, #18
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff f9c7 	bl	80009fc <readRegister>
 800166e:	4603      	mov	r3, r0
 8001670:	75bb      	strb	r3, [r7, #22]
	int errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
 8001672:	7dbb      	ldrb	r3, [r7, #22]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	613b      	str	r3, [r7, #16]
	return errorActivation;
 800167a:	693b      	ldr	r3, [r7, #16]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <getLoraPacket>:

void getLoraPacket(SX1278_t *loraRx) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	loraRx->len = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001692:	2113      	movs	r1, #19
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f9b1 	bl	80009fc <readRegister>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <getLoraPacket+0x74>)
 80016ac:	f002 fa07 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f001 fc59 	bl	8002f68 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100); // send address
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80016bc:	f107 010f 	add.w	r1, r7, #15
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	2201      	movs	r2, #1
 80016c4:	f003 f8ac 	bl	8004820 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->len, 100); // receive 6 bytes data
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7d5b      	ldrb	r3, [r3, #21]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	f003 f9dc 	bl	8004a98 <HAL_SPI_Receive>
	HAL_Delay(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f001 fc41 	bl	8002f68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 80016e6:	2201      	movs	r2, #1
 80016e8:	2101      	movs	r1, #1
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <getLoraPacket+0x74>)
 80016ec:	f002 f9e7 	bl	8003abe <HAL_GPIO_WritePin>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40010c00 	.word	0x40010c00

080016fc <printParameters>:

void printParameters(int timeRx, UART1_t *uart1, SX1278_t *loraRx) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b092      	sub	sp, #72	; 0x48
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	if (loraRx->len == 0)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7d5b      	ldrb	r3, [r3, #21]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d036      	beq.n	800177e <printParameters+0x82>
		return;
	uint8_t tmp[50];
	for (int i = 0; i < loraRx->len; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
 8001714:	e019      	b.n	800174a <printParameters+0x4e>
		uint8_t len = sprintf(uart1->txBuffer, "%02X", loraRx->buffer[i]);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	4413      	add	r3, r2
 8001722:	3325      	adds	r3, #37	; 0x25
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	4917      	ldr	r1, [pc, #92]	; (8001788 <printParameters+0x8c>)
 800172a:	f004 f9fd 	bl	8005b28 <siprintf>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		uart1_send_frame(uart1->txBuffer, len);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3364      	adds	r3, #100	; 0x64
 8001738:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fb42 	bl	8002dc8 <uart1_send_frame>
	for (int i = 0; i < loraRx->len; i++) {
 8001744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001746:	3301      	adds	r3, #1
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7d5b      	ldrb	r3, [r3, #21]
 800174e:	461a      	mov	r2, r3
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	4293      	cmp	r3, r2
 8001754:	dbdf      	blt.n	8001716 <printParameters+0x1a>
	}
	uint8_t largo = sprintf(tmp, " - Rx Ok: %d ms %d bytes\n", timeRx,
			loraRx->len);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7d5b      	ldrb	r3, [r3, #21]
	uint8_t largo = sprintf(tmp, " - Rx Ok: %d ms %d bytes\n", timeRx,
 800175a:	f107 0010 	add.w	r0, r7, #16
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	490a      	ldr	r1, [pc, #40]	; (800178c <printParameters+0x90>)
 8001762:	f004 f9e1 	bl	8005b28 <siprintf>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uart1_send_frame(tmp, largo);
 800176c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fb26 	bl	8002dc8 <uart1_send_frame>
 800177c:	e000      	b.n	8001780 <printParameters+0x84>
		return;
 800177e:	bf00      	nop
}
 8001780:	3748      	adds	r7, #72	; 0x48
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	08006498 	.word	0x08006498
 800178c:	0800650c 	.word	0x0800650c

08001790 <read>:

void read(UART1_t *uart1, SX1278_t *loraRx) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <read+0x24>
		configInit(uart1, loraRx);
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff0c 	bl	80015c4 <configInit>
		updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80017ac:	2105      	movs	r1, #5
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f7ff fad3 	bl	8000d5a <updateLoraLowFreq>
	}
	clearMemForRx(loraRx);
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f7ff feaa 	bl	800150e <clearMemForRx>
	int timeStart = HAL_GetTick();
 80017ba:	f001 fbcb 	bl	8002f54 <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	617b      	str	r3, [r7, #20]
	if (waitForRxDone(loraRx) < 0)
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f7ff feb8 	bl	8001538 <waitForRxDone>
		return;
	int timeEnd = HAL_GetTick();
 80017c8:	f001 fbc4 	bl	8002f54 <HAL_GetTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	613b      	str	r3, [r7, #16]
	int timeRx = timeEnd - timeStart;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
	int errorActivation = crcErrorActivation(loraRx);
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f7ff ff25 	bl	8001628 <crcErrorActivation>
 80017de:	60b8      	str	r0, [r7, #8]
	if (errorActivation == 1) {
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d017      	beq.n	8001816 <read+0x86>
		return;
	}
	getLoraPacket(loraRx);
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f7ff ff4c 	bl	8001684 <getLoraPacket>
	printParameters(timeRx, uart1, loraRx);
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff ff83 	bl	80016fc <printParameters>
	setRxParameters(loraRx);
 80017f6:	6838      	ldr	r0, [r7, #0]
 80017f8:	f7ff fe54 	bl	80014a4 <setRxParameters>
	updateLoraLowFreq(&*loraRx, RX_CONTINUOUS);
 80017fc:	2105      	movs	r1, #5
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7ff faab 	bl	8000d5a <updateLoraLowFreq>
	loraRx->operatingMode = readMode(loraRx);
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7ff fa95 	bl	8000d34 <readMode>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001814:	e000      	b.n	8001818 <read+0x88>
		return;
 8001816:	bf00      	nop
}
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <decodeVLAD>:

bool TX_MODE;
bool RX_MODE;

Vlad_t decodeVLAD(SX1278_t *loraRx) {
 800181e:	b5b0      	push	{r4, r5, r7, lr}
 8001820:	b090      	sub	sp, #64	; 0x40
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
	Vlad_t vlad;
	vlad.vin = loraRx->buffer[6];
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800182e:	b29b      	uxth	r3, r3
 8001830:	83bb      	strh	r3, [r7, #28]
	vlad.vin2 = loraRx->buffer[7];
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001838:	b29b      	uxth	r3, r3
 800183a:	86fb      	strh	r3, [r7, #54]	; 0x36
	vlad.current_real = loraRx->buffer[8];
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fefe 	bl	8000644 <__aeabi_ui2f>
 8001848:	4603      	mov	r3, r0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
	vlad.current_real2 = loraRx->buffer[9];
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001852:	b29b      	uxth	r3, r3
 8001854:	877b      	strh	r3, [r7, #58]	; 0x3a
	vlad.tone_level = loraRx->buffer[10];
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800185c:	b29b      	uxth	r3, r3
 800185e:	833b      	strh	r3, [r7, #24]
	vlad.tone_level2 = loraRx->buffer[11];
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001866:	b29b      	uxth	r3, r3
 8001868:	87bb      	strh	r3, [r7, #60]	; 0x3c
	vlad.current = loraRx->buffer[12];
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001870:	b29b      	uxth	r3, r3
 8001872:	83fb      	strh	r3, [r7, #30]
	vlad.current2 = loraRx->buffer[13];
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800187a:	b29b      	uxth	r3, r3
 800187c:	873b      	strh	r3, [r7, #56]	; 0x38
	vlad.agc150m = loraRx->buffer[14];
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001884:	b29b      	uxth	r3, r3
 8001886:	81bb      	strh	r3, [r7, #12]
	vlad.level150m = loraRx->buffer[15];
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800188e:	b29b      	uxth	r3, r3
 8001890:	823b      	strh	r3, [r7, #16]
	vlad.agc170m = loraRx->buffer[16];
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001898:	b29b      	uxth	r3, r3
 800189a:	827b      	strh	r3, [r7, #18]
	vlad.level170m = loraRx->buffer[17];
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	82fb      	strh	r3, [r7, #22]
	return vlad;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	461d      	mov	r5, r3
 80018aa:	f107 040c 	add.w	r4, r7, #12
 80018ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	602b      	str	r3, [r5, #0]
}
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	3740      	adds	r7, #64	; 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018c8 <modeCmdUpdate>:

void modeCmdUpdate(UART1_t *uart1) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	unsigned long receiveValue;
	receiveValue = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
	receiveValue = uart1_ptr->rxBuffer[4] << 8;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <modeCmdUpdate+0x4c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	60fb      	str	r3, [r7, #12]
	receiveValue |= uart1_ptr->rxBuffer[5];
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <modeCmdUpdate+0x4c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	795b      	ldrb	r3, [r3, #5]
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
	if (receiveValue == 0) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <modeCmdUpdate+0x34>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2108      	movs	r1, #8
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <modeCmdUpdate+0x50>)
 80018f8:	f002 f8e1 	bl	8003abe <HAL_GPIO_WritePin>
	}
	if (receiveValue == 1) {
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d104      	bne.n	800190c <modeCmdUpdate+0x44>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	2108      	movs	r1, #8
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <modeCmdUpdate+0x50>)
 8001908:	f002 f8d9 	bl	8003abe <HAL_GPIO_WritePin>
	}
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000023c 	.word	0x2000023c
 8001918:	40010c00 	.word	0x40010c00

0800191c <modeRs485Update>:

void modeRs485Update(UART1_t *uart1, RS485_t *rs485, SX1278_t *loraRx) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b092      	sub	sp, #72	; 0x48
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	Vlad_t vlad;
	switch (rs485->cmd) {
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b11      	cmp	r3, #17
 800192e:	d015      	beq.n	800195c <modeRs485Update+0x40>
 8001930:	2b12      	cmp	r3, #18
 8001932:	d000      	beq.n	8001936 <modeRs485Update+0x1a>
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
		rs485->len = 0;
		break;
	default:

		break;
 8001934:	e013      	b.n	800195e <modeRs485Update+0x42>
		modeCmdUpdate(uart1_ptr);
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <modeRs485Update+0x4c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ffc4 	bl	80018c8 <modeCmdUpdate>
		rs485->cmd = NONE;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
		memset(rs485->buffer, 0, sizeof(rs485->buffer));
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3302      	adds	r3, #2
 800194a:	2264      	movs	r2, #100	; 0x64
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f004 f8e2 	bl	8005b18 <memset>
		rs485->len = 0;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2200      	movs	r2, #0
 8001958:	705a      	strb	r2, [r3, #1]
		break;
 800195a:	e000      	b.n	800195e <modeRs485Update+0x42>
		break;
 800195c:	bf00      	nop
	}

}
 800195e:	bf00      	nop
 8001960:	3748      	adds	r7, #72	; 0x48
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000023c 	.word	0x2000023c

0800196c <print_parameters>:

void print_parameters(UART1_t *u, Vlad_t vlad) { //despues del decode Vlad
 800196c:	b084      	sub	sp, #16
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800197a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t len = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
	 vlad.vin2, vlad.current_real, vlad.current_real2, vlad.tone_level,
	 vlad.tone_level2, vlad.current, vlad.current2, vlad.agc150m,
	 vlad.level150m, vlad.agc170m, vlad.level170m);
	 uart1_send_frame((char*) u->buffer, TX_BUFFLEN);*/

	len = sprintf((char*) u->txBuffer, "vin %d[V]\r\n", vlad.vin);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3364      	adds	r3, #100	; 0x64
 8001986:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001988:	4968      	ldr	r1, [pc, #416]	; (8001b2c <print_parameters+0x1c0>)
 800198a:	4618      	mov	r0, r3
 800198c:	f004 f8cc 	bl	8005b28 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3364      	adds	r3, #100	; 0x64
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fa13 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "vin2 %d[V]\r\n", vlad.vin2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3364      	adds	r3, #100	; 0x64
 80019a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80019aa:	4961      	ldr	r1, [pc, #388]	; (8001b30 <print_parameters+0x1c4>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 f8bb 	bl	8005b28 <siprintf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3364      	adds	r3, #100	; 0x64
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fa02 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current real %d[A]\r\n",
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 0464 	add.w	r4, r3, #100	; 0x64
			vlad.current_real);
 80019ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	len = sprintf((char*) u->txBuffer, "current real %d[A]\r\n",
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fd2b 	bl	8000428 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4957      	ldr	r1, [pc, #348]	; (8001b34 <print_parameters+0x1c8>)
 80019d8:	4620      	mov	r0, r4
 80019da:	f004 f8a5 	bl	8005b28 <siprintf>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3364      	adds	r3, #100	; 0x64
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 f9ec 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current real2  %d[A]\r\n",
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3364      	adds	r3, #100	; 0x64
			vlad.current_real2);
 80019f4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
	len = sprintf((char*) u->txBuffer, "current real2  %d[A]\r\n",
 80019f8:	494f      	ldr	r1, [pc, #316]	; (8001b38 <print_parameters+0x1cc>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 f894 	bl	8005b28 <siprintf>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3364      	adds	r3, #100	; 0x64
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f9db 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "tone level %d[dBm]\r\n",
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3364      	adds	r3, #100	; 0x64
			vlad.tone_level);
 8001a16:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
	len = sprintf((char*) u->txBuffer, "tone level %d[dBm]\r\n",
 8001a18:	4948      	ldr	r1, [pc, #288]	; (8001b3c <print_parameters+0x1d0>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f884 	bl	8005b28 <siprintf>
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3364      	adds	r3, #100	; 0x64
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f001 f9cb 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "tone level2 %d[dBm]\r\n",
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3364      	adds	r3, #100	; 0x64
			vlad.tone_level2);
 8001a36:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
	len = sprintf((char*) u->txBuffer, "tone level2 %d[dBm]\r\n",
 8001a3a:	4941      	ldr	r1, [pc, #260]	; (8001b40 <print_parameters+0x1d4>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 f873 	bl	8005b28 <siprintf>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3364      	adds	r3, #100	; 0x64
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f9ba 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current %d[A]\r\n", vlad.current);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3364      	adds	r3, #100	; 0x64
 8001a58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a5a:	493a      	ldr	r1, [pc, #232]	; (8001b44 <print_parameters+0x1d8>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 f863 	bl	8005b28 <siprintf>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3364      	adds	r3, #100	; 0x64
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 f9aa 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "current2 %d[A]\r\n", vlad.current2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3364      	adds	r3, #100	; 0x64
 8001a78:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a7c:	4932      	ldr	r1, [pc, #200]	; (8001b48 <print_parameters+0x1dc>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 f852 	bl	8005b28 <siprintf>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3364      	adds	r3, #100	; 0x64
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 f999 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "agc150m %d[dBm]\r\n", vlad.agc150m);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3364      	adds	r3, #100	; 0x64
 8001a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a9c:	492b      	ldr	r1, [pc, #172]	; (8001b4c <print_parameters+0x1e0>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 f842 	bl	8005b28 <siprintf>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3364      	adds	r3, #100	; 0x64
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 f989 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "level150m %d[dBm]\r\n", vlad.level150m);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3364      	adds	r3, #100	; 0x64
 8001aba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001abc:	4924      	ldr	r1, [pc, #144]	; (8001b50 <print_parameters+0x1e4>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f832 	bl	8005b28 <siprintf>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3364      	adds	r3, #100	; 0x64
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 f979 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "agc170m %d[dBm]\r\n", vlad.agc170m);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3364      	adds	r3, #100	; 0x64
 8001ada:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001adc:	491d      	ldr	r1, [pc, #116]	; (8001b54 <print_parameters+0x1e8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 f822 	bl	8005b28 <siprintf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3364      	adds	r3, #100	; 0x64
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 f969 	bl	8002dc8 <uart1_send_frame>
	len = sprintf((char*) u->txBuffer, "level170m %d[dBm]\r\n", vlad.level170m);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3364      	adds	r3, #100	; 0x64
 8001afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <print_parameters+0x1ec>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f812 	bl	8005b28 <siprintf>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
	uart1_send_frame((char*) u->txBuffer, len);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3364      	adds	r3, #100	; 0x64
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f959 	bl	8002dc8 <uart1_send_frame>
	cleanRxBuffer(u);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f001 f979 	bl	8002e0e <cleanRxBuffer>
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b26:	b004      	add	sp, #16
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	08006528 	.word	0x08006528
 8001b30:	08006534 	.word	0x08006534
 8001b34:	08006544 	.word	0x08006544
 8001b38:	0800655c 	.word	0x0800655c
 8001b3c:	08006574 	.word	0x08006574
 8001b40:	0800658c 	.word	0x0800658c
 8001b44:	080065a4 	.word	0x080065a4
 8001b48:	080065b4 	.word	0x080065b4
 8001b4c:	080065c8 	.word	0x080065c8
 8001b50:	080065dc 	.word	0x080065dc
 8001b54:	080065f0 	.word	0x080065f0
 8001b58:	08006604 	.word	0x08006604

08001b5c <printStatus>:

void printStatus(UART1_t *uart1, Rs485_status_t status) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0d6      	sub	sp, #344	; 0x158
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001b66:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001b6a:	6018      	str	r0, [r3, #0]
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001b72:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 8001b76:	701a      	strb	r2, [r3, #0]
	char rs485_msgs[11][30] = { "DATA OK", "START READING", "VALID FRAME",
 8001b78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001b7c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b80:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <printStatus+0x68>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	4611      	mov	r1, r2
 8001b86:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f003 ffb6 	bl	8005afc <memcpy>
			"NOT VALID FRAME", "WRONG MODULE FUNCTION", "WRONG MODULE ID",
			"CRC ERROR", "DONE", "WAITING", "VALID MODULE", "CHECK LORA DATA" };
	cleanByTimeout(uart1, rs485_msgs[status]);
 8001b90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001b94:	f2a3 1355 	subw	r3, r3, #341	; 0x155
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	18ca      	adds	r2, r1, r3
 8001ba8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001bac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f001 f894 	bl	8002ce0 <cleanByTimeout>

}
 8001bb8:	bf00      	nop
 8001bba:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08006618 	.word	0x08006618

08001bc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8001bce:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE BEGIN 1 */
	LED_t led;
	RS485_t rs485;
	UART1_t uart1;
	Vlad_t vlad;
	vlad_ptr = &vlad;
 8001bd0:	4aa4      	ldr	r2, [pc, #656]	; (8001e64 <main+0x29c>)
 8001bd2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001bd6:	6013      	str	r3, [r2, #0]
	uart1_ptr = &uart1;
 8001bd8:	4aa3      	ldr	r2, [pc, #652]	; (8001e68 <main+0x2a0>)
 8001bda:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001bde:	6013      	str	r3, [r2, #0]
	rs485_ptr = &rs485;
 8001be0:	4aa2      	ldr	r2, [pc, #648]	; (8001e6c <main+0x2a4>)
 8001be2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001be6:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001be8:	f001 f95c 	bl	8002ea4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bec:	f000 fab4 	bl	8002158 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bf0:	f000 fc40 	bl	8002474 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001bf4:	f000 fb5c 	bl	80022b0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001bf8:	f000 fb88 	bl	800230c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8001bfc:	f000 fbbc 	bl	8002378 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001c00:	f000 fbe4 	bl	80023cc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001c04:	f000 fc0c 	bl	8002420 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001c08:	f000 fb00 	bl	800220c <MX_ADC1_Init>
	MX_CRC_Init();
 8001c0c:	f000 fb3c 	bl	8002288 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	vladInit(VLAD, ID1, &vlad);
 8001c10:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001c14:	461a      	mov	r2, r3
 8001c16:	2101      	movs	r1, #1
 8001c18:	2005      	movs	r0, #5
 8001c1a:	f000 fc88 	bl	800252e <vladInit>
	ledInit(&led);
 8001c1e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f8e0 	bl	8000de8 <ledInit>
	rs485Init(&rs485);
 8001c28:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fd1b 	bl	8002668 <rs485Init>
	//uart1Init(HS16_CLK, BAUD_RATE, &uart1);

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 8001c32:	4a8f      	ldr	r2, [pc, #572]	; (8001e70 <main+0x2a8>)
 8001c34:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c38:	6013      	str	r3, [r2, #0]
	lora_ptr = &loraRx;
 8001c3a:	4a8d      	ldr	r2, [pc, #564]	; (8001e70 <main+0x2a8>)
 8001c3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c40:	6013      	str	r3, [r2, #0]

	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8001c42:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c4a:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <main+0x2ac>)
 8001c4c:	60da      	str	r2, [r3, #12]
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 8001c4e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c52:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5a:	609a      	str	r2, [r3, #8]
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8001c5c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c64:	4a83      	ldr	r2, [pc, #524]	; (8001e74 <main+0x2ac>)
 8001c66:	615a      	str	r2, [r3, #20]
	lora_hw.nss.pin = LORA_NSS_Pin;
 8001c68:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c70:	2201      	movs	r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001c74:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c7c:	4a7d      	ldr	r2, [pc, #500]	; (8001e74 <main+0x2ac>)
 8001c7e:	605a      	str	r2, [r3, #4]
	lora_hw.reset.pin = LORA_RST_Pin;
 8001c80:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
	loraTx.hw = &lora_hw;
 8001c8c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c90:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001c94:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8001c98:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 8001c9a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001c9e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001ca2:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8001ca6:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 8001ca8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001cac:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001cb0:	4a71      	ldr	r2, [pc, #452]	; (8001e78 <main+0x2b0>)
 8001cb2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	loraRx.spi = &hspi1;
 8001cb6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001cba:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <main+0x2b0>)
 8001cc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	486a      	ldr	r0, [pc, #424]	; (8001e74 <main+0x2ac>)
 8001cca:	f001 fef8 	bl	8003abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4868      	ldr	r0, [pc, #416]	; (8001e74 <main+0x2ac>)
 8001cd4:	f001 fef3 	bl	8003abe <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4867      	ldr	r0, [pc, #412]	; (8001e78 <main+0x2b0>)
 8001cdc:	f7fe fe8e 	bl	80009fc <readRegister>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001ce8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001cec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4861      	ldr	r0, [pc, #388]	; (8001e78 <main+0x2b0>)
 8001cf4:	f7fe fe82 	bl	80009fc <readRegister>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001d00:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001d04:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraTx.status = UNKNOW;
 8001d08:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001d0c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	loraRx.status = UNKNOW;
 8001d16:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001d1a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	TX_MODE = true;
 8001d24:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <main+0x2b4>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
	RX_MODE = false;
 8001d2a:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <main+0x2b8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	memset(loraRx.buffer, 0, SX1278_MAX_PACKET);
 8001d30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d34:	3325      	adds	r3, #37	; 0x25
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 feeb 	bl	8005b18 <memset>
	memset(loraTx.buffer, 0, SX1278_MAX_PACKET);
 8001d42:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d46:	3325      	adds	r3, #37	; 0x25
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fee2 	bl	8005b18 <memset>
	loraRx.len = 0;
 8001d54:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001d58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	755a      	strb	r2, [r3, #21]
	loraTx.len = 0;
 8001d60:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001d64:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001d68:	2200      	movs	r2, #0
 8001d6a:	755a      	strb	r2, [r3, #21]
	int counter = HAL_GetTick();
 8001d6c:	f001 f8f2 	bl	8002f54 <HAL_GetTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	int change = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	int master;
	int valueTx = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	int valueRx = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2025      	movs	r0, #37	; 0x25
 8001d8e:	f001 fbf8 	bl	8003582 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d92:	2025      	movs	r0, #37	; 0x25
 8001d94:	f001 fc11 	bl	80035ba <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	493a      	ldr	r1, [pc, #232]	; (8001e84 <main+0x2bc>)
 8001d9c:	483a      	ldr	r0, [pc, #232]	; (8001e88 <main+0x2c0>)
 8001d9e:	f003 fa74 	bl	800528a <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8001da2:	2108      	movs	r1, #8
 8001da4:	4833      	ldr	r0, [pc, #204]	; (8001e74 <main+0x2ac>)
 8001da6:	f001 fe73 	bl	8003a90 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

		if (master == 1) {
 8001db0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d118      	bne.n	8001dea <main+0x222>
			valueRx = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			TX_MODE = true;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <main+0x2b4>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
			RX_MODE = false;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <main+0x2b8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
			valueTx += 1;
 8001dca:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			if (valueTx == 1) {
 8001dd4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <main+0x222>
				loraTx.status = UNKNOW;
 8001ddc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001de0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		if (master == 0) {
 8001dea:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <main+0x25c>
			valueTx = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			TX_MODE = false;
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <main+0x2b4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
			RX_MODE = true;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <main+0x2b8>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
			valueRx += 1;
 8001e04:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			if (valueRx == 1) {
 8001e0e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <main+0x25c>
				loraRx.status = UNKNOW;
 8001e16:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e1a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}

		//rs485Uart1Decode(&rs485, &uart1, &loraRx);
		if (uart1.len > 0) {
 8001e24:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e2c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d02b      	beq.n	8001e8c <main+0x2c4>
			rs485.len = uart1.len;
 8001e34:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e3c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001e40:	f887 33b9 	strb.w	r3, [r7, #953]	; 0x3b9
			memcpy(rs485.buffer, uart1.rxBuffer, uart1.len);
 8001e44:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e4c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001e50:	461a      	mov	r2, r3
 8001e52:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 8001e56:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fe4d 	bl	8005afc <memcpy>
 8001e62:	e031      	b.n	8001ec8 <main+0x300>
 8001e64:	20000244 	.word	0x20000244
 8001e68:	2000023c 	.word	0x2000023c
 8001e6c:	20000240 	.word	0x20000240
 8001e70:	2000024c 	.word	0x2000024c
 8001e74:	40010c00 	.word	0x40010c00
 8001e78:	20000118 	.word	0x20000118
 8001e7c:	20000250 	.word	0x20000250
 8001e80:	20000251 	.word	0x20000251
 8001e84:	20000248 	.word	0x20000248
 8001e88:	20000170 	.word	0x20000170

		} else if (loraRx.len > 0) {
 8001e8c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e90:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001e94:	7d5b      	ldrb	r3, [r3, #21]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <main+0x300>
			rs485.len = loraRx.len;
 8001e9a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001e9e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001ea2:	7d5b      	ldrb	r3, [r3, #21]
 8001ea4:	f887 33b9 	strb.w	r3, [r7, #953]	; 0x3b9
			memcpy(rs485.buffer, loraRx.buffer, loraRx.len);
 8001ea8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001eac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001eb0:	7d5b      	ldrb	r3, [r3, #21]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb8:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001ebc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fe1a 	bl	8005afc <memcpy>
		}

		if (rs485.len > 0) {
 8001ec8:	f897 33b9 	ldrb.w	r3, [r7, #953]	; 0x3b9
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d021      	beq.n	8001f14 <main+0x34c>
			checkBuffer(&rs485);
 8001ed0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fc6b 	bl	80027b0 <checkBuffer>
			if (rs485.status == DATA_OK) {
 8001eda:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <main+0x34c>
				rs485.cmd = rs485.buffer[3];
 8001ee2:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 8001ee6:	f887 33b8 	strb.w	r3, [r7, #952]	; 0x3b8
				rs485.status = WAITING;
 8001eea:	2308      	movs	r3, #8
 8001eec:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
				cleanRxBuffer(&uart1);
 8001ef0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 ff8a 	bl	8002e0e <cleanRxBuffer>
 8001efa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001efe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				memset(loraRx.buffer, 0, sizeof(loraRx.len));
				loraRx.len = 0;
 8001f08:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f0c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001f10:	2200      	movs	r2, #0
 8001f12:	755a      	strb	r2, [r3, #21]
			}
		}
		printStatus(&uart1, rs485.status);
 8001f14:	f897 241e 	ldrb.w	r2, [r7, #1054]	; 0x41e
 8001f18:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe1c 	bl	8001b5c <printStatus>
		// validar loraRx frame
		modeRs485Update(&uart1, &rs485, &loraRx);
 8001f24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f28:	f507 716e 	add.w	r1, r7, #952	; 0x3b8
 8001f2c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fcf3 	bl	800191c <modeRs485Update>

		if (rs485.cmd == QUERY_PARAMETERS_VLAD && rs485.len == 9) { //cmd = 11
 8001f36:	f897 33b8 	ldrb.w	r3, [r7, #952]	; 0x3b8
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	f040 8081 	bne.w	8002042 <main+0x47a>
 8001f40:	f897 33b9 	ldrb.w	r3, [r7, #953]	; 0x3b9
 8001f44:	2b09      	cmp	r3, #9
 8001f46:	d17c      	bne.n	8002042 <main+0x47a>
			loraTx.len = rs485.len;
 8001f48:	f897 23b9 	ldrb.w	r2, [r7, #953]	; 0x3b9
 8001f4c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f50:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001f54:	755a      	strb	r2, [r3, #21]
			memcpy(loraTx.buffer, rs485.buffer, rs485.len);
 8001f56:	f897 33b9 	ldrb.w	r3, [r7, #953]	; 0x3b9
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001f60:	1c99      	adds	r1, r3, #2
 8001f62:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f66:	3325      	adds	r3, #37	; 0x25
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fdc7 	bl	8005afc <memcpy>
			transmit(&uart1, &loraTx);
 8001f6e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001f72:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f8f7 	bl	800116c <transmit>
 8001f7e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f82:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			memset(loraTx.buffer, 0, sizeof(loraTx.len));
			loraTx.len = 0;
 8001f8c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001f90:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001f94:	2200      	movs	r2, #0
 8001f96:	755a      	strb	r2, [r3, #21]
			rs485.cmd = NONE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 33b8 	strb.w	r3, [r7, #952]	; 0x3b8
			memset(rs485.buffer, 0, sizeof(rs485.buffer));
 8001f9e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	2264      	movs	r2, #100	; 0x64
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fdb5 	bl	8005b18 <memset>
			rs485.len = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 33b9 	strb.w	r3, [r7, #953]	; 0x3b9
			change = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
			loraRx.status = UNKNOW;
 8001fba:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001fbe:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			read(&uart1, &loraRx);
 8001fc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fcc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbdc 	bl	8001790 <read>
			vlad = decodeVLAD(&loraRx);
 8001fd8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001fdc:	f5a3 74d0 	sub.w	r4, r3, #416	; 0x1a0
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc18 	bl	800181e <decodeVLAD>
 8001fee:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001ff2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	6023      	str	r3, [r4, #0]
			print_parameters(&uart1, vlad);
 8002008:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800200c:	f5a3 76d0 	sub.w	r6, r3, #416	; 0x1a0
 8002010:	f507 7c39 	add.w	ip, r7, #740	; 0x2e4
 8002014:	466d      	mov	r5, sp
 8002016:	f106 040c 	add.w	r4, r6, #12
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002026:	e885 0003 	stmia.w	r5, {r0, r1}
 800202a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800202e:	4660      	mov	r0, ip
 8002030:	f7ff fc9c 	bl	800196c <print_parameters>
			loraTx.status = UNKNOW;
 8002034:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002038:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		if (TX_MODE) {
 8002042:	4b42      	ldr	r3, [pc, #264]	; (800214c <main+0x584>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d043      	beq.n	80020d2 <main+0x50a>
			RX_MODE_OFF_LED();
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <main+0x588>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a40      	ldr	r2, [pc, #256]	; (8002150 <main+0x588>)
 8002050:	f023 0308 	bic.w	r3, r3, #8
 8002054:	60d3      	str	r3, [r2, #12]
			TX_MODE_ON_LED();
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <main+0x588>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <main+0x588>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	60d3      	str	r3, [r2, #12]
			if (change == 255)
 8002062:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d102      	bne.n	8002070 <main+0x4a8>
				change = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
			loraTx.buffer[change] = change;
 8002070:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800207a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 800207e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002082:	4413      	add	r3, r2
 8002084:	3325      	adds	r3, #37	; 0x25
 8002086:	460a      	mov	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
			loraTx.len = change;
 800208a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800208e:	b2da      	uxtb	r2, r3
 8002090:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002094:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002098:	755a      	strb	r2, [r3, #21]
			if (HAL_GetTick() - counter > 10000) {
 800209a:	f000 ff5b 	bl	8002f54 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d911      	bls.n	80020d2 <main+0x50a>
				counter = HAL_GetTick();
 80020ae:	f000 ff51 	bl	8002f54 <HAL_GetTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
				transmit(&uart1, &loraTx);
 80020b8:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80020bc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f852 	bl	800116c <transmit>
				change += 1;
 80020c8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80020cc:	3301      	adds	r3, #1
 80020ce:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
			}
		}
		if (RX_MODE) {
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <main+0x58c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d032      	beq.n	8002140 <main+0x578>
			TX_MODE_OFF_LED();
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <main+0x588>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <main+0x588>)
 80020e0:	f023 0310 	bic.w	r3, r3, #16
 80020e4:	60d3      	str	r3, [r2, #12]
			RX_MODE_ON_LED();
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <main+0x588>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <main+0x588>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	60d3      	str	r3, [r2, #12]
			read(&uart1, &loraRx);
 80020f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020f6:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fb47 	bl	8001790 <read>
			/*if (loraRx.buffer ){
			 vlad = decodeVLAD(loraRx);
			 print_parameters(uart1, vlad);
			 }*/
			rs485.len = loraRx.len;
 8002102:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002106:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800210a:	7d5b      	ldrb	r3, [r3, #21]
 800210c:	f887 33b9 	strb.w	r3, [r7, #953]	; 0x3b9
			memcpy(rs485.buffer, loraRx.buffer, loraRx.len);
 8002110:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002114:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002118:	7d5b      	ldrb	r3, [r3, #21]
 800211a:	461a      	mov	r2, r3
 800211c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002120:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002124:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002128:	3302      	adds	r3, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fce6 	bl	8005afc <memcpy>
			rs485.status = CHECK_LORA_DATA;
 8002130:	230a      	movs	r3, #10
 8002132:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
			change += 1;
 8002136:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800213a:	3301      	adds	r3, #1
 800213c:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		}

		led_enable_kalive(&led);
 8002140:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fe81 	bl	8000e4c <led_enable_kalive>
		master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800214a:	e62a      	b.n	8001da2 <main+0x1da>
 800214c:	20000250 	.word	0x20000250
 8002150:	40010c00 	.word	0x40010c00
 8002154:	20000251 	.word	0x20000251

08002158 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b094      	sub	sp, #80	; 0x50
 800215c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002162:	2228      	movs	r2, #40	; 0x28
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fcd6 	bl	8005b18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002188:	2301      	movs	r3, #1
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002196:	2301      	movs	r3, #1
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219a:	2302      	movs	r3, #2
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800219e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80021a4:	2300      	movs	r3, #0
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 fde3 	bl	8003d78 <HAL_RCC_OscConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0x64>
		Error_Handler();
 80021b8:	f000 f9b4 	bl	8002524 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021bc:	230f      	movs	r3, #15
 80021be:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021cc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 f84f 	bl	800427c <HAL_RCC_ClockConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x90>
		Error_Handler();
 80021e4:	f000 f99e 	bl	8002524 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021e8:	2302      	movs	r3, #2
 80021ea:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f9da 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0xaa>
		Error_Handler();
 80021fe:	f000 f991 	bl	8002524 <Error_Handler>
	}
}
 8002202:	bf00      	nop
 8002204:	3750      	adds	r7, #80	; 0x50
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_ADC1_Init+0x74>)
 800221e:	4a19      	ldr	r2, [pc, #100]	; (8002284 <MX_ADC1_Init+0x78>)
 8002220:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_ADC1_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_ADC1_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_ADC1_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_ADC1_Init+0x74>)
 8002236:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800223a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <MX_ADC1_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_ADC1_Init+0x74>)
 8002244:	2201      	movs	r2, #1
 8002246:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_ADC1_Init+0x74>)
 800224a:	f000 feb1 	bl	8002fb0 <HAL_ADC_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8002254:	f000 f966 	bl	8002524 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800225c:	2301      	movs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_ADC1_Init+0x74>)
 800226a:	f000 ff79 	bl	8003160 <HAL_ADC_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8002274:	f000 f956 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2000008c 	.word	0x2000008c
 8002284:	40012400 	.word	0x40012400

08002288 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_CRC_Init+0x20>)
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <MX_CRC_Init+0x24>)
 8002290:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_CRC_Init+0x20>)
 8002294:	f001 f9ab 	bl	80035ee <HAL_CRC_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_CRC_Init+0x1a>
		Error_Handler();
 800229e:	f000 f941 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200000bc 	.word	0x200000bc
 80022ac:	40023000 	.word	0x40023000

080022b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <MX_I2C1_Init+0x50>)
 80022b6:	4a13      	ldr	r2, [pc, #76]	; (8002304 <MX_I2C1_Init+0x54>)
 80022b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_I2C1_Init+0x50>)
 80022bc:	4a12      	ldr	r2, [pc, #72]	; (8002308 <MX_I2C1_Init+0x58>)
 80022be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_I2C1_Init+0x50>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_I2C1_Init+0x50>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MX_I2C1_Init+0x50>)
 80022ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <MX_I2C1_Init+0x50>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <MX_I2C1_Init+0x50>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <MX_I2C1_Init+0x50>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <MX_I2C1_Init+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <MX_I2C1_Init+0x50>)
 80022ee:	f001 fbff 	bl	8003af0 <HAL_I2C_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80022f8:	f000 f914 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200000c4 	.word	0x200000c4
 8002304:	40005400 	.word	0x40005400
 8002308:	000186a0 	.word	0x000186a0

0800230c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_SPI1_Init+0x64>)
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <MX_SPI1_Init+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_SPI1_Init+0x64>)
 8002318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800231c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_SPI1_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_SPI1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_SPI1_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_SPI1_Init+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_SPI1_Init+0x64>)
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_SPI1_Init+0x64>)
 8002340:	2218      	movs	r2, #24
 8002342:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_SPI1_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_SPI1_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_SPI1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_SPI1_Init+0x64>)
 8002358:	220a      	movs	r2, #10
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_SPI1_Init+0x64>)
 800235e:	f002 f9db 	bl	8004718 <HAL_SPI_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_SPI1_Init+0x60>
		Error_Handler();
 8002368:	f000 f8dc 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000118 	.word	0x20000118
 8002374:	40013000 	.word	0x40013000

08002378 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART1_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023b0:	f002 ff1e 	bl	80051f0 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80023ba:	f000 f8b3 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000170 	.word	0x20000170
 80023c8:	40013800 	.word	0x40013800

080023cc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART2_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART2_UART_Init+0x4c>)
 8002404:	f002 fef4 	bl	80051f0 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800240e:	f000 f889 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200001b4 	.word	0x200001b4
 800241c:	40004400 	.word	0x40004400

08002420 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_USART3_UART_Init+0x50>)
 8002428:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <MX_USART3_UART_Init+0x4c>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART3_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART3_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_USART3_UART_Init+0x4c>)
 8002458:	f002 feca 	bl	80051f0 <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8002462:	f000 f85f 	bl	8002524 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200001f8 	.word	0x200001f8
 8002470:	40004800 	.word	0x40004800

08002474 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <MX_GPIO_Init+0xa8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <MX_GPIO_Init+0xa8>)
 800248e:	f043 0320 	orr.w	r3, r3, #32
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <MX_GPIO_Init+0xa8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <MX_GPIO_Init+0xa8>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <MX_GPIO_Init+0xa8>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <MX_GPIO_Init+0xa8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <MX_GPIO_Init+0xa8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <MX_GPIO_Init+0xa8>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <MX_GPIO_Init+0xa8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80024d0:	2200      	movs	r2, #0
 80024d2:	f247 3133 	movw	r1, #29491	; 0x7333
 80024d6:	4812      	ldr	r0, [pc, #72]	; (8002520 <MX_GPIO_Init+0xac>)
 80024d8:	f001 faf1 	bl	8003abe <HAL_GPIO_WritePin>
					| BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED2_Pin LED1_Pin RS485_DE_Pin
	 BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 80024dc:	f247 3333 	movw	r3, #29491	; 0x7333
 80024e0:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4619      	mov	r1, r3
 80024f4:	480a      	ldr	r0, [pc, #40]	; (8002520 <MX_GPIO_Init+0xac>)
 80024f6:	f001 f947 	bl	8003788 <HAL_GPIO_Init>

	/*Configure GPIO pin : MODE_Pin */
	GPIO_InitStruct.Pin = MODE_Pin;
 80024fa:	2308      	movs	r3, #8
 80024fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	4619      	mov	r1, r3
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_GPIO_Init+0xac>)
 800250e:	f001 f93b 	bl	8003788 <HAL_GPIO_Init>

}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40010c00 	.word	0x40010c00

08002524 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800252c:	e7fe      	b.n	800252c <Error_Handler+0x8>

0800252e <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

void vladInit(Function_t funcion, Id_t id, Vlad_t *vlad) {
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	603a      	str	r2, [r7, #0]
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	460b      	mov	r3, r1
 800253c:	71bb      	strb	r3, [r7, #6]
	vlad->agc150m = 0;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
	vlad->ref150m = 0;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	805a      	strh	r2, [r3, #2]
	vlad->level150m = 0;  // downlink 152 mhz
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	809a      	strh	r2, [r3, #4]
	vlad->agc170m = 0;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	80da      	strh	r2, [r3, #6]
	vlad->ref170m = 0;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	811a      	strh	r2, [r3, #8]
	vlad->level170m = 0; //uplink 172 mhz
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	815a      	strh	r2, [r3, #10]
	vlad->tone_level = 0;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	819a      	strh	r2, [r3, #12]
	vlad->v_5v = 0;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	81da      	strh	r2, [r3, #14]
	vlad->vin = 0;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2200      	movs	r2, #0
 8002572:	821a      	strh	r2, [r3, #16]
	vlad->current = 0;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	825a      	strh	r2, [r3, #18]
	vlad->v_5v_real = 0;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
	vlad->vin_real = 0;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
	vlad->current_real = 0;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
	vlad->uc_temperature = 0;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
	vlad->remote_attenuation = 0;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	vlad->is_remote_attenuation = 0;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    vlad->is_attenuation_updated = 0;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	vlad->calc_en = 0;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	vlad->function = funcion;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	vlad->id = id;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	79ba      	ldrb	r2, [r7, #6]
 80025c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	vlad->vin2 = 0;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
	vlad->current2 = 0;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	vlad->current_real2 = 0;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	85da      	strh	r2, [r3, #46]	; 0x2e
	vlad->tone_level2 = 0;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <crc_get>:
 *      Author: sigmadev
 */
#include "rs485.h"
#define MINIMUN_FRAME_LEN 6

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
	uint8_t b;
	uint8_t i;
	uint16_t generator = 0x1021; //divisor is 16bit
 80025f6:	f241 0321 	movw	r3, #4129	; 0x1021
 80025fa:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;			 // CRC value is 16bit
 80025fc:	2300      	movs	r3, #0
 80025fe:	81bb      	strh	r3, [r7, #12]

	for (b = 0; b < buff_len; b++) {
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e025      	b.n	8002652 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[b] << 8)); // move byte into MSB of 16bit CRC
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b29a      	uxth	r2, r3
 8002614:	89bb      	ldrh	r3, [r7, #12]
 8002616:	4053      	eors	r3, r2
 8002618:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 800261a:	2300      	movs	r3, #0
 800261c:	73bb      	strb	r3, [r7, #14]
 800261e:	e012      	b.n	8002646 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) // test for MSB = bit 15
 8002620:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	da08      	bge.n	800263a <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002628:	89bb      	ldrh	r3, [r7, #12]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	b21a      	sxth	r2, r3
 800262e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002632:	4053      	eors	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	81bb      	strh	r3, [r7, #12]
 8002638:	e002      	b.n	8002640 <crc_get+0x56>
			else
				crc <<= 1;
 800263a:	89bb      	ldrh	r3, [r7, #12]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	81bb      	strh	r3, [r7, #12]
		for (i = 0; i < 8; i++) {
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	3301      	adds	r3, #1
 8002644:	73bb      	strb	r3, [r7, #14]
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	2b07      	cmp	r3, #7
 800264a:	d9e9      	bls.n	8002620 <crc_get+0x36>
	for (b = 0; b < buff_len; b++) {
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	3301      	adds	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3d5      	bcc.n	8002606 <crc_get+0x1c>
		}
	}
	return crc;
 800265a:	89bb      	ldrh	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <rs485Init>:

void rs485Init(RS485_t *r) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	r->len = 0;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	705a      	strb	r2, [r3, #1]
	r->status = DONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2207      	movs	r2, #7
 800267a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	r->cmd = NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	memset(r->buffer, 0, 100);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3302      	adds	r3, #2
 8002688:	2264      	movs	r2, #100	; 0x64
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fa43 	bl	8005b18 <memset>
	/* PB8 DE485 as output  */
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <rs485Init+0x4c>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <rs485Init+0x4c>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <rs485Init+0x4c>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <rs485Init+0x4c>)
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	60d3      	str	r3, [r2, #12]

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40010c00 	.word	0x40010c00

080026b8 <check_valid_module>:
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
}

Rs485_status_t check_valid_module(uint8_t *frame, uint8_t lenght) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
	if (frame[1] == VLAD) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d11a      	bne.n	8002704 <check_valid_module+0x4c>
		if (frame[2] == ID1) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3302      	adds	r3, #2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d113      	bne.n	8002700 <check_valid_module+0x48>
			for (int i = 3; i < lenght; i++)
 80026d8:	2303      	movs	r3, #3
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e00b      	b.n	80026f6 <check_valid_module+0x3e>
				if (frame[i] == LTEL_END_MARK)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	227f      	movs	r2, #127	; 0x7f
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <check_valid_module+0x38>
					return VALID_MODULE;
 80026ec:	2309      	movs	r3, #9
 80026ee:	e00c      	b.n	800270a <check_valid_module+0x52>
			for (int i = 3; i < lenght; i++)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	dbef      	blt.n	80026de <check_valid_module+0x26>
 80026fe:	e003      	b.n	8002708 <check_valid_module+0x50>
		} else
			return WRONG_MODULE_ID;
 8002700:	2305      	movs	r3, #5
 8002702:	e002      	b.n	800270a <check_valid_module+0x52>
	} else
		return WRONG_MODULE_FUNCTION;
 8002704:	2304      	movs	r3, #4
 8002706:	e000      	b.n	800270a <check_valid_module+0x52>
	return WRONG_MODULE_FUNCTION;
 8002708:	2304      	movs	r3, #4
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <check_frame>:

Rs485_status_t check_frame(uint8_t *frame, uint8_t lenght) {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	2b06      	cmp	r3, #6
 8002724:	d912      	bls.n	800274c <check_frame+0x38>
		if (frame[0] == LTEL_START_MARK) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	227e      	movs	r2, #126	; 0x7e
 800272c:	4293      	cmp	r3, r2
 800272e:	d10b      	bne.n	8002748 <check_frame+0x34>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	3b01      	subs	r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	227f      	movs	r2, #127	; 0x7f
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <check_frame+0x30>
				return VALID_FRAME;
 8002740:	2302      	movs	r3, #2
 8002742:	e004      	b.n	800274e <check_frame+0x3a>
			else
				return START_READING;
 8002744:	2301      	movs	r3, #1
 8002746:	e002      	b.n	800274e <check_frame+0x3a>
		} else
			return NOT_VALID_FRAME;
 8002748:	2303      	movs	r3, #3
 800274a:	e000      	b.n	800274e <check_frame+0x3a>
	} else

		return WAITING;
 800274c:	2308      	movs	r3, #8
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <check_CRC_module>:

Rs485_status_t check_CRC_module(uint8_t *frame, uint8_t len) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]

	unsigned long crc_cal;
	unsigned long crc_save;
	crc_save = frame[(len - 2)] << 8;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	3b02      	subs	r3, #2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	60fb      	str	r3, [r7, #12]
	crc_save |= frame[(len - 3)];
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	3b03      	subs	r3, #3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
	crc_cal = crc_get(&(frame[1]), (len - 4));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	3b04      	subs	r3, #4
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f7ff ff2a 	bl	80025ea <crc_get>
 8002796:	4603      	mov	r3, r0
 8002798:	60bb      	str	r3, [r7, #8]
	if (crc_cal == crc_save)
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d101      	bne.n	80027a6 <check_CRC_module+0x4e>
		return DATA_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <check_CRC_module+0x50>
	return CRC_ERROR;
 80027a6:	2306      	movs	r3, #6
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <checkBuffer>:

Rs485_status_t checkBuffer(RS485_t *rs485){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	rs485->status = check_frame(rs485->buffer,rs485->len);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7ff ffa6 	bl	8002714 <check_frame>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_FRAME))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d003      	beq.n	80027e4 <checkBuffer+0x34>
		return rs485->status;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80027e2:	e02e      	b.n	8002842 <checkBuffer+0x92>
	rs485->status = check_valid_module(rs485->buffer, rs485->len);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1c9a      	adds	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7ff ff62 	bl	80026b8 <check_valid_module>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == VALID_MODULE))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002804:	2b09      	cmp	r3, #9
 8002806:	d003      	beq.n	8002810 <checkBuffer+0x60>
		return rs485->status;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800280e:	e018      	b.n	8002842 <checkBuffer+0x92>
	rs485->status = check_CRC_module(rs485->buffer, rs485->len);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	1c9a      	adds	r2, r3, #2
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f7ff ff9c 	bl	8002758 <check_CRC_module>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	if (!(rs485->status == DATA_OK))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <checkBuffer+0x8c>
		return rs485->status;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800283a:	e002      	b.n	8002842 <checkBuffer+0x92>
	return rs485->status;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_MspInit+0x5c>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <HAL_MspInit+0x5c>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6193      	str	r3, [r2, #24]
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_MspInit+0x5c>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x5c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_MspInit+0x5c>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_MspInit+0x5c>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_MspInit+0x60>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_MspInit+0x60>)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000

080028b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_ADC_MspInit+0x6c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d121      	bne.n	8002914 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_ADC_MspInit+0x70>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002900:	2313      	movs	r3, #19
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002904:	2303      	movs	r3, #3
 8002906:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HAL_ADC_MspInit+0x74>)
 8002910:	f000 ff3a 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012400 	.word	0x40012400
 8002920:	40021000 	.word	0x40021000
 8002924:	40010800 	.word	0x40010800

08002928 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_CRC_MspInit+0x34>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10b      	bne.n	8002952 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_CRC_MspInit+0x38>)
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_CRC_MspInit+0x38>)
 8002940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002944:	6153      	str	r3, [r2, #20]
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_CRC_MspInit+0x38>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40023000 	.word	0x40023000
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_I2C_MspInit+0x70>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d123      	bne.n	80029cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4619      	mov	r1, r3
 80029ae:	480b      	ldr	r0, [pc, #44]	; (80029dc <HAL_I2C_MspInit+0x78>)
 80029b0:	f000 feea 	bl	8003788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029be:	61d3      	str	r3, [r2, #28]
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005400 	.word	0x40005400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010c00 	.word	0x40010c00

080029e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_SPI_MspInit+0x88>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d12f      	bne.n	8002a60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_SPI_MspInit+0x8c>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a30:	23a0      	movs	r3, #160	; 0xa0
 8002a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4619      	mov	r1, r3
 8002a42:	480b      	ldr	r0, [pc, #44]	; (8002a70 <HAL_SPI_MspInit+0x90>)
 8002a44:	f000 fea0 	bl	8003788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <HAL_SPI_MspInit+0x90>)
 8002a5c:	f000 fe94 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40013000 	.word	0x40013000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010800 	.word	0x40010800

08002a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_UART_MspInit+0x178>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d13a      	bne.n	8002b0a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a94:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	6193      	str	r3, [r2, #24]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 0320 	add.w	r3, r7, #32
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4846      	ldr	r0, [pc, #280]	; (8002bf4 <HAL_UART_MspInit+0x180>)
 8002ada:	f000 fe55 	bl	8003788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8002ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	4619      	mov	r1, r3
 8002af2:	4840      	ldr	r0, [pc, #256]	; (8002bf4 <HAL_UART_MspInit+0x180>)
 8002af4:	f000 fe48 	bl	8003788 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	2025      	movs	r0, #37	; 0x25
 8002afe:	f000 fd40 	bl	8003582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b02:	2025      	movs	r0, #37	; 0x25
 8002b04:	f000 fd59 	bl	80035ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b08:	e06c      	b.n	8002be4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <HAL_UART_MspInit+0x184>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d130      	bne.n	8002b76 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	61d3      	str	r3, [r2, #28]
 8002b20:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a2f      	ldr	r2, [pc, #188]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b44:	2304      	movs	r3, #4
 8002b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 0320 	add.w	r3, r7, #32
 8002b54:	4619      	mov	r1, r3
 8002b56:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <HAL_UART_MspInit+0x180>)
 8002b58:	f000 fe16 	bl	8003788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 0320 	add.w	r3, r7, #32
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4821      	ldr	r0, [pc, #132]	; (8002bf4 <HAL_UART_MspInit+0x180>)
 8002b70:	f000 fe0a 	bl	8003788 <HAL_GPIO_Init>
}
 8002b74:	e036      	b.n	8002be4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_UART_MspInit+0x188>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d131      	bne.n	8002be4 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_UART_MspInit+0x17c>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480e      	ldr	r0, [pc, #56]	; (8002c00 <HAL_UART_MspInit+0x18c>)
 8002bc6:	f000 fddf 	bl	8003788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 0320 	add.w	r3, r7, #32
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4808      	ldr	r0, [pc, #32]	; (8002c00 <HAL_UART_MspInit+0x18c>)
 8002be0:	f000 fdd2 	bl	8003788 <HAL_GPIO_Init>
}
 8002be4:	bf00      	nop
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010800 	.word	0x40010800
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40010c00 	.word	0x40010c00

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <HardFault_Handler+0x4>

08002c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <MemManage_Handler+0x4>

08002c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <BusFault_Handler+0x4>

08002c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <UsageFault_Handler+0x4>

08002c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4a:	f000 f971 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <USART1_IRQHandler+0x10>)
 8002c5a:	f002 fb47 	bl	80052ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000170 	.word	0x20000170

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f002 ff06 	bl	8005aa8 <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20005000 	.word	0x20005000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	20000254 	.word	0x20000254
 8002cd0:	20000270 	.word	0x20000270

08002cd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <cleanByTimeout>:
 *      Author: sigmadev
 */

#include <uart1.h>

uint8_t  cleanByTimeout(UART1_t* uart1, const char* str){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
		if (HAL_GetTick() - uart1->timeout > SECONDS(5)) {
 8002cea:	f000 f933 	bl	8002f54 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d914      	bls.n	8002d2a <cleanByTimeout+0x4a>
			uart1_send_str((char*)str);
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f000 f845 	bl	8002d90 <uart1_send_str>
			uart1_send_str("-TIMEOUT\r\n");
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <cleanByTimeout+0x54>)
 8002d08:	f000 f842 	bl	8002d90 <uart1_send_str>
			if(strlen(str)>0)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <cleanByTimeout+0x3a>
				cleanTxBuffer(uart1);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f88c 	bl	8002e32 <cleanTxBuffer>
			uart1->timeout = HAL_GetTick();
 8002d1a:	f000 f91b 	bl	8002f54 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			return 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <cleanByTimeout+0x4c>
		}
		return 0;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08006764 	.word	0x08006764

08002d38 <uart1_write>:

	/* set the destination buffer */
	/*set the source buffer */
}

void uart1_write(char ch) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <uart1_write+0x50>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <uart1_write+0x50>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 8002d4e:	bf00      	nop
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <uart1_write+0x54>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f9      	beq.n	8002d50 <uart1_write+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <uart1_write+0x54>)
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 8002d62:	bf00      	nop
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <uart1_write+0x54>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f9      	beq.n	8002d64 <uart1_write+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <uart1_write+0x50>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <uart1_write+0x50>)
 8002d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40010c00 	.word	0x40010c00
 8002d8c:	40013800 	.word	0x40013800

08002d90 <uart1_send_str>:
		u->len = 0;
	}
	u->rxBuffer[u->len++] = uart1_1byte_read();
}

void uart1_send_str(char *str) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for (i = 0; str[i] != '\0'; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e009      	b.n	8002db2 <uart1_send_str+0x22>
		uart1_write(str[i]);
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffc6 	bl	8002d38 <uart1_write>
	for (i = 0; str[i] != '\0'; i++)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	3301      	adds	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ef      	bne.n	8002d9e <uart1_send_str+0xe>
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <uart1_send_frame>:

void uart1_send_frame(uint8_t str[], uint8_t len) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]

	if (len > 0) {
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d015      	beq.n	8002e06 <uart1_send_frame+0x3e>
		for (int i = 0; i < len; i++){
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e00e      	b.n	8002dfe <uart1_send_frame+0x36>
			uart1_write(str[i]);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffa5 	bl	8002d38 <uart1_write>
			str[i] = (char) '\0';
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++){
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dbec      	blt.n	8002de0 <uart1_send_frame+0x18>
		}
	}
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <cleanRxBuffer>:

void cleanRxBuffer(UART1_t *u) {
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	memset(u->rxBuffer, 0, sizeof(u->len));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fe7b 	bl	8005b18 <memset>
	u->len = 0;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <cleanTxBuffer>:

void cleanTxBuffer(UART1_t *u) {
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	memset(u->txBuffer, 0, sizeof(u->len));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3364      	adds	r3, #100	; 0x64
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 fe68 	bl	8005b18 <memset>
	u->len = 0;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e7e:	f7ff ff29 	bl	8002cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f002 fe17 	bl	8005ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e86:	f7fe fe9f 	bl	8001bc8 <main>
  bx lr
 8002e8a:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e94:	0800683c 	.word	0x0800683c
  ldr r2, =_sbss
 8002e98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e9c:	2000026c 	.word	0x2000026c

08002ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <ADC1_2_IRQHandler>
	...

08002ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_Init+0x28>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <HAL_Init+0x28>)
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	f000 fb59 	bl	800356c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f000 f808 	bl	8002ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec0:	f7ff fcc4 	bl	800284c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_InitTick+0x54>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_InitTick+0x58>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fb71 	bl	80035d6 <HAL_SYSTICK_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00e      	b.n	8002f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d80a      	bhi.n	8002f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f04:	2200      	movs	r2, #0
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f000 fb39 	bl	8003582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f10:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <HAL_InitTick+0x5c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000000 	.word	0x20000000
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_IncTick+0x1c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_IncTick+0x20>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <HAL_IncTick+0x20>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	20000258 	.word	0x20000258

08002f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <HAL_GetTick+0x10>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	20000258 	.word	0x20000258

08002f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d005      	beq.n	8002f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_Delay+0x44>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f8e:	bf00      	nop
 8002f90:	f7ff ffe0 	bl	8002f54 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d8f7      	bhi.n	8002f90 <HAL_Delay+0x28>
  {
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000008 	.word	0x20000008

08002fb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0be      	b.n	8003150 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fc5e 	bl	80028b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9ab 	bl	8003350 <ADC_ConversionStop_Disable>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8099 	bne.w	800313e <HAL_ADC_Init+0x18e>
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 8095 	bne.w	800313e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800301c:	f023 0302 	bic.w	r3, r3, #2
 8003020:	f043 0202 	orr.w	r2, r3, #2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003030:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7b1b      	ldrb	r3, [r3, #12]
 8003036:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003038:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d003      	beq.n	8003052 <HAL_ADC_Init+0xa2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_ADC_Init+0xa8>
 8003052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003056:	e000      	b.n	800305a <HAL_ADC_Init+0xaa>
 8003058:	2300      	movs	r3, #0
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7d1b      	ldrb	r3, [r3, #20]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d119      	bne.n	800309c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	3b01      	subs	r3, #1
 8003076:	035a      	lsls	r2, r3, #13
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e00b      	b.n	800309c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_ADC_Init+0x1a8>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030cc:	d003      	beq.n	80030d6 <HAL_ADC_Init+0x126>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d104      	bne.n	80030e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	3b01      	subs	r3, #1
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_ADC_Init+0x1ac>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d10b      	bne.n	800311c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800311a:	e018      	b.n	800314e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f023 0312 	bic.w	r3, r3, #18
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800313c:	e007      	b.n	800314e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f043 0210 	orr.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	ffe1f7fd 	.word	0xffe1f7fd
 800315c:	ff1f0efe 	.word	0xff1f0efe

08003160 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x20>
 800317c:	2302      	movs	r3, #2
 800317e:	e0dc      	b.n	800333a <HAL_ADC_ConfigChannel+0x1da>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d81c      	bhi.n	80031ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3b05      	subs	r3, #5
 80031a2:	221f      	movs	r2, #31
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	4019      	ands	r1, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b05      	subs	r3, #5
 80031bc:	fa00 f203 	lsl.w	r2, r0, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
 80031c8:	e03c      	b.n	8003244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d81c      	bhi.n	800320c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	3b23      	subs	r3, #35	; 0x23
 80031e4:	221f      	movs	r2, #31
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	4019      	ands	r1, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b23      	subs	r3, #35	; 0x23
 80031fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
 800320a:	e01b      	b.n	8003244 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b41      	subs	r3, #65	; 0x41
 800321e:	221f      	movs	r2, #31
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	4019      	ands	r1, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	3b41      	subs	r3, #65	; 0x41
 8003238:	fa00 f203 	lsl.w	r2, r0, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b09      	cmp	r3, #9
 800324a:	d91c      	bls.n	8003286 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	3b1e      	subs	r3, #30
 800325e:	2207      	movs	r2, #7
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	4019      	ands	r1, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6898      	ldr	r0, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	3b1e      	subs	r3, #30
 8003278:	fa00 f203 	lsl.w	r2, r0, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	e019      	b.n	80032ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6919      	ldr	r1, [r3, #16]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	2207      	movs	r2, #7
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	4019      	ands	r1, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6898      	ldr	r0, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032c6:	2b11      	cmp	r3, #17
 80032c8:	d132      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_ADC_ConfigChannel+0x1e4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d125      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d126      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d11a      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_ADC_ConfigChannel+0x1e8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_ADC_ConfigChannel+0x1ec>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	0c9a      	lsrs	r2, r3, #18
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003310:	e002      	b.n	8003318 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3b01      	subs	r3, #1
 8003316:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f9      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x1b2>
 800331e:	e007      	b.n	8003330 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40012400 	.word	0x40012400
 8003348:	20000000 	.word	0x20000000
 800334c:	431bde83 	.word	0x431bde83

08003350 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d12e      	bne.n	80033c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800337a:	f7ff fdeb 	bl	8002f54 <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003380:	e01b      	b.n	80033ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003382:	f7ff fde7 	bl	8002f54 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d914      	bls.n	80033ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10d      	bne.n	80033ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d0dc      	beq.n	8003382 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60d3      	str	r3, [r2, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_GetPriorityGrouping+0x18>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0307 	and.w	r3, r3, #7
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4906      	ldr	r1, [pc, #24]	; (800346c <__NVIC_EnableIRQ+0x34>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	; (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d301      	bcc.n	800353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353a:	2301      	movs	r3, #1
 800353c:	e00f      	b.n	800355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <SysTick_Config+0x40>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003546:	210f      	movs	r1, #15
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	f7ff ff90 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <SysTick_Config+0x40>)
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <SysTick_Config+0x40>)
 8003558:	2207      	movs	r2, #7
 800355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000e010 	.word	0xe000e010

0800356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff2d 	bl	80033d4 <__NVIC_SetPriorityGrouping>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003594:	f7ff ff42 	bl	800341c <__NVIC_GetPriorityGrouping>
 8003598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7ff ff90 	bl	80034c4 <NVIC_EncodePriority>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff5f 	bl	8003470 <__NVIC_SetPriority>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff35 	bl	8003438 <__NVIC_EnableIRQ>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ffa2 	bl	8003528 <SysTick_Config>
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e00e      	b.n	800361e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	795b      	ldrb	r3, [r3, #5]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f989 	bl	8002928 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003638:	2b02      	cmp	r3, #2
 800363a:	d008      	beq.n	800364e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2204      	movs	r2, #4
 8003640:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e020      	b.n	8003690 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 020e 	bic.w	r2, r2, #14
 800365c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
	...

0800369c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d005      	beq.n	80036be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e051      	b.n	8003762 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 020e 	bic.w	r2, r2, #14
 80036cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_DMA_Abort_IT+0xd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d029      	beq.n	800373c <HAL_DMA_Abort_IT+0xa0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <HAL_DMA_Abort_IT+0xd4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Abort_IT+0x9c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <HAL_DMA_Abort_IT+0xd8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01a      	beq.n	8003732 <HAL_DMA_Abort_IT+0x96>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_DMA_Abort_IT+0xdc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d012      	beq.n	800372c <HAL_DMA_Abort_IT+0x90>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_DMA_Abort_IT+0xe0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00a      	beq.n	8003726 <HAL_DMA_Abort_IT+0x8a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_DMA_Abort_IT+0xe4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d102      	bne.n	8003720 <HAL_DMA_Abort_IT+0x84>
 800371a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800371e:	e00e      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 8003720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003724:	e00b      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	e008      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 800372c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003730:	e005      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 8003732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003736:	e002      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 8003738:	2310      	movs	r3, #16
 800373a:	e000      	b.n	800373e <HAL_DMA_Abort_IT+0xa2>
 800373c:	2301      	movs	r3, #1
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_DMA_Abort_IT+0xe8>)
 8003740:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
    } 
  }
  return status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40020008 	.word	0x40020008
 8003770:	4002001c 	.word	0x4002001c
 8003774:	40020030 	.word	0x40020030
 8003778:	40020044 	.word	0x40020044
 800377c:	40020058 	.word	0x40020058
 8003780:	4002006c 	.word	0x4002006c
 8003784:	40020000 	.word	0x40020000

08003788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003788:	b480      	push	{r7}
 800378a:	b08b      	sub	sp, #44	; 0x2c
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003796:	2300      	movs	r3, #0
 8003798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379a:	e169      	b.n	8003a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800379c:	2201      	movs	r2, #1
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	f040 8158 	bne.w	8003a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a9a      	ldr	r2, [pc, #616]	; (8003a28 <HAL_GPIO_Init+0x2a0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d05e      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
 80037c4:	4a98      	ldr	r2, [pc, #608]	; (8003a28 <HAL_GPIO_Init+0x2a0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d875      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 80037ca:	4a98      	ldr	r2, [pc, #608]	; (8003a2c <HAL_GPIO_Init+0x2a4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d058      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
 80037d0:	4a96      	ldr	r2, [pc, #600]	; (8003a2c <HAL_GPIO_Init+0x2a4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d86f      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 80037d6:	4a96      	ldr	r2, [pc, #600]	; (8003a30 <HAL_GPIO_Init+0x2a8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d052      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
 80037dc:	4a94      	ldr	r2, [pc, #592]	; (8003a30 <HAL_GPIO_Init+0x2a8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d869      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 80037e2:	4a94      	ldr	r2, [pc, #592]	; (8003a34 <HAL_GPIO_Init+0x2ac>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04c      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
 80037e8:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_GPIO_Init+0x2ac>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d863      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 80037ee:	4a92      	ldr	r2, [pc, #584]	; (8003a38 <HAL_GPIO_Init+0x2b0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d046      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
 80037f4:	4a90      	ldr	r2, [pc, #576]	; (8003a38 <HAL_GPIO_Init+0x2b0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d85d      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d82a      	bhi.n	8003854 <HAL_GPIO_Init+0xcc>
 80037fe:	2b12      	cmp	r3, #18
 8003800:	d859      	bhi.n	80038b6 <HAL_GPIO_Init+0x12e>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <HAL_GPIO_Init+0x80>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003883 	.word	0x08003883
 800380c:	0800385d 	.word	0x0800385d
 8003810:	0800386f 	.word	0x0800386f
 8003814:	080038b1 	.word	0x080038b1
 8003818:	080038b7 	.word	0x080038b7
 800381c:	080038b7 	.word	0x080038b7
 8003820:	080038b7 	.word	0x080038b7
 8003824:	080038b7 	.word	0x080038b7
 8003828:	080038b7 	.word	0x080038b7
 800382c:	080038b7 	.word	0x080038b7
 8003830:	080038b7 	.word	0x080038b7
 8003834:	080038b7 	.word	0x080038b7
 8003838:	080038b7 	.word	0x080038b7
 800383c:	080038b7 	.word	0x080038b7
 8003840:	080038b7 	.word	0x080038b7
 8003844:	080038b7 	.word	0x080038b7
 8003848:	080038b7 	.word	0x080038b7
 800384c:	08003865 	.word	0x08003865
 8003850:	08003879 	.word	0x08003879
 8003854:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <HAL_GPIO_Init+0x2b4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800385a:	e02c      	b.n	80038b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	623b      	str	r3, [r7, #32]
          break;
 8003862:	e029      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	3304      	adds	r3, #4
 800386a:	623b      	str	r3, [r7, #32]
          break;
 800386c:	e024      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	3308      	adds	r3, #8
 8003874:	623b      	str	r3, [r7, #32]
          break;
 8003876:	e01f      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	330c      	adds	r3, #12
 800387e:	623b      	str	r3, [r7, #32]
          break;
 8003880:	e01a      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800388a:	2304      	movs	r3, #4
 800388c:	623b      	str	r3, [r7, #32]
          break;
 800388e:	e013      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003898:	2308      	movs	r3, #8
 800389a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	611a      	str	r2, [r3, #16]
          break;
 80038a2:	e009      	b.n	80038b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038a4:	2308      	movs	r3, #8
 80038a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	615a      	str	r2, [r3, #20]
          break;
 80038ae:	e003      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038b0:	2300      	movs	r3, #0
 80038b2:	623b      	str	r3, [r7, #32]
          break;
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_Init+0x130>
          break;
 80038b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2bff      	cmp	r3, #255	; 0xff
 80038bc:	d801      	bhi.n	80038c2 <HAL_GPIO_Init+0x13a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	e001      	b.n	80038c6 <HAL_GPIO_Init+0x13e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2bff      	cmp	r3, #255	; 0xff
 80038cc:	d802      	bhi.n	80038d4 <HAL_GPIO_Init+0x14c>
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	e002      	b.n	80038da <HAL_GPIO_Init+0x152>
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	3b08      	subs	r3, #8
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	210f      	movs	r1, #15
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	401a      	ands	r2, r3
 80038ec:	6a39      	ldr	r1, [r7, #32]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80b1 	beq.w	8003a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003908:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <HAL_GPIO_Init+0x2b8>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	4a4c      	ldr	r2, [pc, #304]	; (8003a40 <HAL_GPIO_Init+0x2b8>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6193      	str	r3, [r2, #24]
 8003914:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <HAL_GPIO_Init+0x2b8>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003920:	4a48      	ldr	r2, [pc, #288]	; (8003a44 <HAL_GPIO_Init+0x2bc>)
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <HAL_GPIO_Init+0x2c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_GPIO_Init+0x1ec>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <HAL_GPIO_Init+0x2c4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_Init+0x1e8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <HAL_GPIO_Init+0x2c8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_Init+0x1e4>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_GPIO_Init+0x2cc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_Init+0x1e0>
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <HAL_GPIO_Init+0x1ee>
 8003968:	2304      	movs	r3, #4
 800396a:	e004      	b.n	8003976 <HAL_GPIO_Init+0x1ee>
 800396c:	2302      	movs	r3, #2
 800396e:	e002      	b.n	8003976 <HAL_GPIO_Init+0x1ee>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_GPIO_Init+0x1ee>
 8003974:	2300      	movs	r3, #0
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	f002 0203 	and.w	r2, r2, #3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	4093      	lsls	r3, r2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003986:	492f      	ldr	r1, [pc, #188]	; (8003a44 <HAL_GPIO_Init+0x2bc>)
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	492c      	ldr	r1, [pc, #176]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	4928      	ldr	r1, [pc, #160]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4922      	ldr	r1, [pc, #136]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	43db      	mvns	r3, r3
 80039de:	491e      	ldr	r1, [pc, #120]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	4918      	ldr	r1, [pc, #96]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	4914      	ldr	r1, [pc, #80]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d021      	beq.n	8003a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_GPIO_Init+0x2d0>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
 8003a24:	e021      	b.n	8003a6a <HAL_GPIO_Init+0x2e2>
 8003a26:	bf00      	nop
 8003a28:	10320000 	.word	0x10320000
 8003a2c:	10310000 	.word	0x10310000
 8003a30:	10220000 	.word	0x10220000
 8003a34:	10210000 	.word	0x10210000
 8003a38:	10120000 	.word	0x10120000
 8003a3c:	10110000 	.word	0x10110000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40010800 	.word	0x40010800
 8003a4c:	40010c00 	.word	0x40010c00
 8003a50:	40011000 	.word	0x40011000
 8003a54:	40011400 	.word	0x40011400
 8003a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	4909      	ldr	r1, [pc, #36]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f47f ae8e 	bne.w	800379c <HAL_GPIO_Init+0x14>
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	372c      	adds	r7, #44	; 0x2c
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40010400 	.word	0x40010400

08003a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e001      	b.n	8003ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]
 8003aca:	4613      	mov	r3, r2
 8003acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ace:	787b      	ldrb	r3, [r7, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ada:	e003      	b.n	8003ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	041a      	lsls	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	611a      	str	r2, [r3, #16]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e12b      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe ff24 	bl	8002964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b54:	f000 fce4 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a81      	ldr	r2, [pc, #516]	; (8003d64 <HAL_I2C_Init+0x274>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d807      	bhi.n	8003b74 <HAL_I2C_Init+0x84>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a80      	ldr	r2, [pc, #512]	; (8003d68 <HAL_I2C_Init+0x278>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e006      	b.n	8003b82 <HAL_I2C_Init+0x92>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a7d      	ldr	r2, [pc, #500]	; (8003d6c <HAL_I2C_Init+0x27c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf94      	ite	ls
 8003b7c:	2301      	movls	r3, #1
 8003b7e:	2300      	movhi	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0e7      	b.n	8003d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a78      	ldr	r2, [pc, #480]	; (8003d70 <HAL_I2C_Init+0x280>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <HAL_I2C_Init+0x274>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d802      	bhi.n	8003bc4 <HAL_I2C_Init+0xd4>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	e009      	b.n	8003bd8 <HAL_I2C_Init+0xe8>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	4a69      	ldr	r2, [pc, #420]	; (8003d74 <HAL_I2C_Init+0x284>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	495c      	ldr	r1, [pc, #368]	; (8003d64 <HAL_I2C_Init+0x274>)
 8003bf4:	428b      	cmp	r3, r1
 8003bf6:	d819      	bhi.n	8003c2c <HAL_I2C_Init+0x13c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e59      	subs	r1, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c06:	1c59      	adds	r1, r3, #1
 8003c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_I2C_Init+0x138>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e59      	subs	r1, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	e051      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	e04f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <HAL_I2C_Init+0x168>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e58      	subs	r0, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	440b      	add	r3, r1
 8003c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c46:	3301      	adds	r3, #1
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e012      	b.n	8003c7e <HAL_I2C_Init+0x18e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x196>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e022      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <HAL_I2C_Init+0x1bc>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e58      	subs	r0, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	440b      	add	r3, r1
 8003c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003caa:	e00f      	b.n	8003ccc <HAL_I2C_Init+0x1dc>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	0099      	lsls	r1, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	6809      	ldr	r1, [r1, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6911      	ldr	r1, [r2, #16]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	4311      	orrs	r1, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	000186a0 	.word	0x000186a0
 8003d68:	001e847f 	.word	0x001e847f
 8003d6c:	003d08ff 	.word	0x003d08ff
 8003d70:	431bde83 	.word	0x431bde83
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e272      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8087 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d98:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d00c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003da4:	4b8f      	ldr	r3, [pc, #572]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d112      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
 8003db0:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbe:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d06c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d168      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e24c      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x76>
 8003de0:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7f      	ldr	r2, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e02e      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x98>
 8003df6:	4b7b      	ldr	r3, [pc, #492]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a7a      	ldr	r2, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b78      	ldr	r3, [pc, #480]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a77      	ldr	r2, [pc, #476]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xbc>
 8003e1a:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a71      	ldr	r2, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xd4>
 8003e34:	4b6b      	ldr	r3, [pc, #428]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6a      	ldr	r2, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7ff f87e 	bl	8002f54 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7ff f87a 	bl	8002f54 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e200      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe4>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7ff f86a 	bl	8002f54 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7ff f866 	bl	8002f54 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1ec      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x10c>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb2:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x18c>
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x176>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c0      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4939      	ldr	r1, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7ff f81f 	bl	8002f54 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7ff f81b 	bl	8002f54 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a1      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4927      	ldr	r1, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_RCC_OscConfig+0x270>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe fffe 	bl	8002f54 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fe fffa 	bl	8002f54 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e180      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03a      	beq.n	8003ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7fe ffde 	bl	8002f54 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fe ffda 	bl	8002f54 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e160      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f000 fad8 	bl	8004570 <RCC_Delay>
 8003fc0:	e01c      	b.n	8003ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc8:	f7fe ffc4 	bl	8002f54 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fce:	e00f      	b.n	8003ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe ffc0 	bl	8002f54 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d908      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e146      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	42420000 	.word	0x42420000
 8003fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b92      	ldr	r3, [pc, #584]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e9      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a6 	beq.w	8004156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b8b      	ldr	r3, [pc, #556]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	4b88      	ldr	r3, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4a87      	ldr	r2, [pc, #540]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004024:	61d3      	str	r3, [r2, #28]
 8004026:	4b85      	ldr	r3, [pc, #532]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b82      	ldr	r3, [pc, #520]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7e      	ldr	r2, [pc, #504]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fe ff81 	bl	8002f54 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fe ff7d 	bl	8002f54 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	; 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e103      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x4c8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x312>
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a6e      	ldr	r2, [pc, #440]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6213      	str	r3, [r2, #32]
 8004088:	e02d      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x334>
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6213      	str	r3, [r2, #32]
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	e01c      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d10c      	bne.n	80040ce <HAL_RCC_OscConfig+0x356>
 80040b4:	4b61      	ldr	r3, [pc, #388]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	4a60      	ldr	r2, [pc, #384]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040ba:	f043 0304 	orr.w	r3, r3, #4
 80040be:	6213      	str	r3, [r2, #32]
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	e00b      	b.n	80040e6 <HAL_RCC_OscConfig+0x36e>
 80040ce:	4b5b      	ldr	r3, [pc, #364]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a5a      	ldr	r2, [pc, #360]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	4b58      	ldr	r3, [pc, #352]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a57      	ldr	r2, [pc, #348]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7fe ff31 	bl	8002f54 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fe ff2d 	bl	8002f54 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e0b1      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ee      	beq.n	80040f6 <HAL_RCC_OscConfig+0x37e>
 8004118:	e014      	b.n	8004144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe ff1b 	bl	8002f54 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe ff17 	bl	8002f54 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e09b      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ee      	bne.n	8004122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414a:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004160:	4b36      	ldr	r3, [pc, #216]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d061      	beq.n	8004230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d146      	bne.n	8004202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe feeb 	bl	8002f54 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe fee7 	bl	8002f54 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e06d      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d108      	bne.n	80041bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4921      	ldr	r1, [pc, #132]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a19      	ldr	r1, [r3, #32]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	430b      	orrs	r3, r1
 80041ce:	491b      	ldr	r1, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe febb 	bl	8002f54 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fe feb7 	bl	8002f54 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e03d      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46a>
 8004200:	e035      	b.n	800426e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_RCC_OscConfig+0x4cc>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe fea4 	bl	8002f54 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe fea0 	bl	8002f54 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e026      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_OscConfig+0x4c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x498>
 800422e:	e01e      	b.n	800426e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e019      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x500>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0d0      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d910      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b67      	ldr	r3, [pc, #412]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4965      	ldr	r1, [pc, #404]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d040      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d115      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e073      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06b      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4936      	ldr	r1, [pc, #216]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fe fdf2 	bl	8002f54 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fe fdee 	bl	8002f54 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e053      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d210      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4922      	ldr	r1, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490a      	ldr	r1, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1cc>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_ClockConfig+0x1d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fd50 	bl	8002ed0 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	08006780 	.word	0x08006780
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b490      	push	{r4, r7}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_GetSysClockFreq+0xac>)
 8004458:	1d3c      	adds	r4, r7, #4
 800445a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800445c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004460:	f240 2301 	movw	r3, #513	; 0x201
 8004464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <HAL_RCC_GetSysClockFreq+0xb0>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	2b04      	cmp	r3, #4
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x40>
 800448a:	2b08      	cmp	r3, #8
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x46>
 800448e:	e02b      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004492:	623b      	str	r3, [r7, #32]
      break;
 8004494:	e02b      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	0c9b      	lsrs	r3, r3, #18
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3328      	adds	r3, #40	; 0x28
 80044a0:	443b      	add	r3, r7
 80044a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0c5b      	lsrs	r3, r3, #17
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	3328      	adds	r3, #40	; 0x28
 80044be:	443b      	add	r3, r7
 80044c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044ca:	fb03 f202 	mul.w	r2, r3, r2
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	e004      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	623b      	str	r3, [r7, #32]
      break;
 80044e6:	e002      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044ea:	623b      	str	r3, [r7, #32]
      break;
 80044ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ee:	6a3b      	ldr	r3, [r7, #32]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc90      	pop	{r4, r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	08006770 	.word	0x08006770
 8004500:	40021000 	.word	0x40021000
 8004504:	007a1200 	.word	0x007a1200
 8004508:	003d0900 	.word	0x003d0900

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <HAL_RCC_GetHCLKFreq+0x10>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	20000000 	.word	0x20000000

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004524:	f7ff fff2 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	08006790 	.word	0x08006790

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800454c:	f7ff ffde 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	0adb      	lsrs	r3, r3, #11
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	; (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	08006790 	.word	0x08006790

08004570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <RCC_Delay+0x34>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <RCC_Delay+0x38>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0a5b      	lsrs	r3, r3, #9
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800458c:	bf00      	nop
  }
  while (Delay --);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	60fa      	str	r2, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f9      	bne.n	800458c <RCC_Delay+0x1c>
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	20000000 	.word	0x20000000
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d07d      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4a4b      	ldr	r2, [pc, #300]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e2:	61d3      	str	r3, [r2, #28]
 80045e4:	4b49      	ldr	r3, [pc, #292]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d118      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a42      	ldr	r2, [pc, #264]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460c:	f7fe fca2 	bl	8002f54 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe fc9e 	bl	8002f54 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e06d      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02e      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	d027      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004658:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d014      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fc6d 	bl	8002f54 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fe fc69 	bl	8002f54 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e036      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a0:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4917      	ldr	r1, [pc, #92]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4a13      	ldr	r2, [pc, #76]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	490b      	ldr	r1, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4904      	ldr	r1, [pc, #16]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	42420440 	.word	0x42420440

08004718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e076      	b.n	8004818 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473a:	d009      	beq.n	8004750 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
 8004742:	e005      	b.n	8004750 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe f938 	bl	80029e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	ea42 0103 	orr.w	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	0c1a      	lsrs	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f002 0204 	and.w	r2, r2, #4
 80047f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004806:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Transmit+0x22>
 800483e:	2302      	movs	r3, #2
 8004840:	e126      	b.n	8004a90 <HAL_SPI_Transmit+0x270>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484a:	f7fe fb83 	bl	8002f54 <HAL_GetTick>
 800484e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d002      	beq.n	8004866 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004860:	2302      	movs	r3, #2
 8004862:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004864:	e10b      	b.n	8004a7e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Transmit+0x52>
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004876:	e102      	b.n	8004a7e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2203      	movs	r2, #3
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d10f      	bne.n	80048e0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d007      	beq.n	80048fe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d14b      	bne.n	80049a0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Transmit+0xf6>
 8004910:	8afb      	ldrh	r3, [r7, #22]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d13e      	bne.n	8004994 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	881a      	ldrh	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	1c9a      	adds	r2, r3, #2
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800493a:	e02b      	b.n	8004994 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d112      	bne.n	8004970 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	86da      	strh	r2, [r3, #54]	; 0x36
 800496e:	e011      	b.n	8004994 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004970:	f7fe faf0 	bl	8002f54 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d803      	bhi.n	8004988 <HAL_SPI_Transmit+0x168>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d102      	bne.n	800498e <HAL_SPI_Transmit+0x16e>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004992:	e074      	b.n	8004a7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ce      	bne.n	800493c <HAL_SPI_Transmit+0x11c>
 800499e:	e04c      	b.n	8004a3a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit+0x18e>
 80049a8:	8afb      	ldrh	r3, [r7, #22]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d140      	bne.n	8004a30 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049d4:	e02c      	b.n	8004a30 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d113      	bne.n	8004a0c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a0a:	e011      	b.n	8004a30 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a0c:	f7fe faa2 	bl	8002f54 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d803      	bhi.n	8004a24 <HAL_SPI_Transmit+0x204>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d102      	bne.n	8004a2a <HAL_SPI_Transmit+0x20a>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a2e:	e026      	b.n	8004a7e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1cd      	bne.n	80049d6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fbb8 	bl	80051b4 <SPI_EndRxTxTransaction>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e000      	b.n	8004a7e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab4:	d112      	bne.n	8004adc <HAL_SPI_Receive+0x44>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10e      	bne.n	8004adc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8f1 	bl	8004cba <HAL_SPI_TransmitReceive>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	e0ea      	b.n	8004cb2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_SPI_Receive+0x52>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e0e3      	b.n	8004cb2 <HAL_SPI_Receive+0x21a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af2:	f7fe fa2f 	bl	8002f54 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b08:	e0ca      	b.n	8004ca0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_SPI_Receive+0x7e>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b1a:	e0c1      	b.n	8004ca0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2204      	movs	r2, #4
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d10f      	bne.n	8004b84 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d162      	bne.n	8004c70 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004baa:	e02e      	b.n	8004c0a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d115      	bne.n	8004be6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f103 020c 	add.w	r2, r3, #12
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004be4:	e011      	b.n	8004c0a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be6:	f7fe f9b5 	bl	8002f54 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d803      	bhi.n	8004bfe <HAL_SPI_Receive+0x166>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d102      	bne.n	8004c04 <HAL_SPI_Receive+0x16c>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c08:	e04a      	b.n	8004ca0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1cb      	bne.n	8004bac <HAL_SPI_Receive+0x114>
 8004c14:	e031      	b.n	8004c7a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d113      	bne.n	8004c4c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	b292      	uxth	r2, r2
 8004c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c4a:	e011      	b.n	8004c70 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4c:	f7fe f982 	bl	8002f54 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d803      	bhi.n	8004c64 <HAL_SPI_Receive+0x1cc>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d102      	bne.n	8004c6a <HAL_SPI_Receive+0x1d2>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c6e:	e017      	b.n	8004ca0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1cd      	bne.n	8004c16 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa46 	bl	8005110 <SPI_EndRxTransaction>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
 8004c9c:	e000      	b.n	8004ca0 <HAL_SPI_Receive+0x208>
  }

error :
 8004c9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08c      	sub	sp, #48	; 0x30
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x26>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e18a      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x33c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce8:	f7fe f934 	bl	8002f54 <HAL_GetTick>
 8004cec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cfe:	887b      	ldrh	r3, [r7, #2]
 8004d00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d00f      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x70>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d10:	d107      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x68>
 8004d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d003      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d28:	e15b      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x82>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x82>
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d42:	e14e      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d003      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2205      	movs	r2, #5
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	887a      	ldrh	r2, [r7, #2]
 8004d6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	887a      	ldrh	r2, [r7, #2]
 8004d7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d007      	beq.n	8004dac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db4:	d178      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_TransmitReceive+0x10a>
 8004dbe:	8b7b      	ldrh	r3, [r7, #26]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d166      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de8:	e053      	b.n	8004e92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x176>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x176>
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d113      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	881a      	ldrh	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d119      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x1b8>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d014      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	b292      	uxth	r2, r2
 8004e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	1c9a      	adds	r2, r3, #2
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e72:	f7fe f86f 	bl	8002f54 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d807      	bhi.n	8004e92 <HAL_SPI_TransmitReceive+0x1d8>
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e90:	e0a7      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1a6      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x130>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1a1      	bne.n	8004dea <HAL_SPI_TransmitReceive+0x130>
 8004ea6:	e07c      	b.n	8004fa2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x1fc>
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d16b      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004edc:	e057      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d11c      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x26c>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <HAL_SPI_TransmitReceive+0x26c>
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d114      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d119      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2ae>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f64:	2301      	movs	r3, #1
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f68:	f7fd fff4 	bl	8002f54 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d803      	bhi.n	8004f80 <HAL_SPI_TransmitReceive+0x2c6>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d102      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x2cc>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f8c:	e029      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1a2      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x224>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d19d      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f904 	bl	80051b4 <SPI_EndRxTxTransaction>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fbe:	e010      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	e000      	b.n	8004fe2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005010:	f7fd ffa0 	bl	8002f54 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	4413      	add	r3, r2
 800501e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005020:	f7fd ff98 	bl	8002f54 <HAL_GetTick>
 8005024:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005026:	4b39      	ldr	r3, [pc, #228]	; (800510c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	015b      	lsls	r3, r3, #5
 800502c:	0d1b      	lsrs	r3, r3, #20
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005036:	e054      	b.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d050      	beq.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005040:	f7fd ff88 	bl	8002f54 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	429a      	cmp	r2, r3
 800504e:	d902      	bls.n	8005056 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d13d      	bne.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d111      	bne.n	8005094 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d004      	beq.n	8005084 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d107      	bne.n	8005094 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509c:	d10f      	bne.n	80050be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e017      	b.n	8005102 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3b01      	subs	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d19b      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000000 	.word	0x20000000

08005110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005124:	d111      	bne.n	800514a <SPI_EndRxTransaction+0x3a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512e:	d004      	beq.n	800513a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d107      	bne.n	800514a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005148:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005152:	d117      	bne.n	8005184 <SPI_EndRxTransaction+0x74>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d112      	bne.n	8005184 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	2101      	movs	r1, #1
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff ff49 	bl	8005000 <SPI_WaitFlagStateUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e013      	b.n	80051ac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	2180      	movs	r1, #128	; 0x80
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ff36 	bl	8005000 <SPI_WaitFlagStateUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e000      	b.n	80051ac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	2180      	movs	r1, #128	; 0x80
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff ff18 	bl	8005000 <SPI_WaitFlagStateUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e000      	b.n	80051e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e03f      	b.n	8005282 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fd fc2c 	bl	8002a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	; 0x24
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fba9 	bl	800598c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d11d      	bne.n	80052e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Receive_IT+0x26>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e016      	b.n	80052e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Receive_IT+0x38>
 80052be:	2302      	movs	r3, #2
 80052c0:	e00f      	b.n	80052e2 <HAL_UART_Receive_IT+0x58>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f9cf 	bl	800567a <UART_Start_Receive_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	e000      	b.n	80052e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_UART_IRQHandler+0x52>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa7f 	bl	800583a <UART_Receive_IT>
      return;
 800533c:	e17b      	b.n	8005636 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80b1 	beq.w	80054a8 <HAL_UART_IRQHandler+0x1bc>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <HAL_UART_IRQHandler+0x70>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80a6 	beq.w	80054a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_UART_IRQHandler+0x90>
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_UART_IRQHandler+0xb0>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0202 	orr.w	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_UART_IRQHandler+0xd0>
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f043 0204 	orr.w	r2, r3, #4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <HAL_UART_IRQHandler+0xfa>
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <HAL_UART_IRQHandler+0xee>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0208 	orr.w	r2, r3, #8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 811e 	beq.w	800562c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_UART_IRQHandler+0x11e>
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fa18 	bl	800583a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_UART_IRQHandler+0x146>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d031      	beq.n	8005496 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f95a 	bl	80056ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d023      	beq.n	800548e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005454:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	4a76      	ldr	r2, [pc, #472]	; (800563c <HAL_UART_IRQHandler+0x350>)
 8005464:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe f916 	bl	800369c <HAL_DMA_Abort_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005480:	4610      	mov	r0, r2
 8005482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e00e      	b.n	80054a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8e3 	bl	8005652 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	e00a      	b.n	80054a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8df 	bl	8005652 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	e006      	b.n	80054a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8db 	bl	8005652 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054a2:	e0c3      	b.n	800562c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	bf00      	nop
    return;
 80054a6:	e0c1      	b.n	800562c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 80a1 	bne.w	80055f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 809b 	beq.w	80055f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8095 	beq.w	80055f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d04e      	beq.n	800558c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80054f8:	8a3b      	ldrh	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8098 	beq.w	8005630 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005504:	8a3a      	ldrh	r2, [r7, #16]
 8005506:	429a      	cmp	r2, r3
 8005508:	f080 8092 	bcs.w	8005630 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8a3a      	ldrh	r2, [r7, #16]
 8005510:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b20      	cmp	r3, #32
 800551a:	d02b      	beq.n	8005574 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695a      	ldr	r2, [r3, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0210 	bic.w	r2, r2, #16
 8005568:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe f859 	bl	8003626 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	b29b      	uxth	r3, r3
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f86d 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800558a:	e051      	b.n	8005630 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005594:	b29b      	uxth	r3, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d047      	beq.n	8005634 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80055a4:	8a7b      	ldrh	r3, [r7, #18]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d044      	beq.n	8005634 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0210 	bic.w	r2, r2, #16
 80055e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055e8:	8a7b      	ldrh	r3, [r7, #18]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f839 	bl	8005664 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055f2:	e01f      	b.n	8005634 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_UART_IRQHandler+0x324>
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8af 	bl	800576c <UART_Transmit_IT>
    return;
 800560e:	e012      	b.n	8005636 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <HAL_UART_IRQHandler+0x34a>
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f8f0 	bl	800580a <UART_EndTransmit_IT>
    return;
 800562a:	e004      	b.n	8005636 <HAL_UART_IRQHandler+0x34a>
    return;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <HAL_UART_IRQHandler+0x34a>
      return;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_UART_IRQHandler+0x34a>
      return;
 8005634:	bf00      	nop
  }
}
 8005636:	3728      	adds	r7, #40	; 0x28
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08005745 	.word	0x08005745

08005640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	4613      	mov	r3, r2
 8005686:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2222      	movs	r2, #34	; 0x22
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056be:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0220 	orr.w	r2, r2, #32
 80056de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005702:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0210 	bic.w	r2, r2, #16
 800572a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff ff77 	bl	8005652 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b21      	cmp	r3, #33	; 0x21
 800577e:	d13e      	bne.n	80057fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005788:	d114      	bne.n	80057b4 <UART_Transmit_IT+0x48>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	1c9a      	adds	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]
 80057b2:	e008      	b.n	80057c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	1c59      	adds	r1, r3, #1
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6211      	str	r1, [r2, #32]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4619      	mov	r1, r3
 80057d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
  }
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ff08 	bl	8005640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b086      	sub	sp, #24
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b22      	cmp	r3, #34	; 0x22
 800584c:	f040 8099 	bne.w	8005982 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005858:	d117      	bne.n	800588a <UART_Receive_IT+0x50>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d113      	bne.n	800588a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	b29a      	uxth	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
 8005888:	e026      	b.n	80058d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589c:	d007      	beq.n	80058ae <UART_Receive_IT+0x74>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <UART_Receive_IT+0x82>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e008      	b.n	80058ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4619      	mov	r1, r3
 80058e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d148      	bne.n	800597e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0220 	bic.w	r2, r2, #32
 80058fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800590a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b01      	cmp	r3, #1
 800592a:	d123      	bne.n	8005974 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0210 	bic.w	r2, r2, #16
 8005940:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d10a      	bne.n	8005966 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fe79 	bl	8005664 <HAL_UARTEx_RxEventCallback>
 8005972:	e002      	b.n	800597a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fb fab7 	bl	8000ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e002      	b.n	8005984 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059c6:	f023 030c 	bic.w	r3, r3, #12
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2c      	ldr	r2, [pc, #176]	; (8005aa0 <UART_SetConfig+0x114>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059f4:	f7fe fda8 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	e002      	b.n	8005a02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7fe fd90 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005a00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009a      	lsls	r2, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <UART_SetConfig+0x118>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	0119      	lsls	r1, r3, #4
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a38:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <UART_SetConfig+0x118>)
 8005a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2064      	movs	r0, #100	; 0x64
 8005a42:	fb00 f303 	mul.w	r3, r0, r3
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	3332      	adds	r3, #50	; 0x32
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <UART_SetConfig+0x118>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a58:	4419      	add	r1, r3
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009a      	lsls	r2, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <UART_SetConfig+0x118>)
 8005a72:	fba3 0302 	umull	r0, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2064      	movs	r0, #100	; 0x64
 8005a7a:	fb00 f303 	mul.w	r3, r0, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a07      	ldr	r2, [pc, #28]	; (8005aa4 <UART_SetConfig+0x118>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	440a      	add	r2, r1
 8005a96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40013800 	.word	0x40013800
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <__errno>:
 8005aa8:	4b01      	ldr	r3, [pc, #4]	; (8005ab0 <__errno+0x8>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	2000000c 	.word	0x2000000c

08005ab4 <__libc_init_array>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	4d0c      	ldr	r5, [pc, #48]	; (8005aec <__libc_init_array+0x38>)
 8005aba:	4c0d      	ldr	r4, [pc, #52]	; (8005af0 <__libc_init_array+0x3c>)
 8005abc:	1b64      	subs	r4, r4, r5
 8005abe:	10a4      	asrs	r4, r4, #2
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	d109      	bne.n	8005ad8 <__libc_init_array+0x24>
 8005ac4:	f000 fc9c 	bl	8006400 <_init>
 8005ac8:	2600      	movs	r6, #0
 8005aca:	4d0a      	ldr	r5, [pc, #40]	; (8005af4 <__libc_init_array+0x40>)
 8005acc:	4c0a      	ldr	r4, [pc, #40]	; (8005af8 <__libc_init_array+0x44>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	42a6      	cmp	r6, r4
 8005ad4:	d105      	bne.n	8005ae2 <__libc_init_array+0x2e>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005adc:	4798      	blx	r3
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__libc_init_array+0xc>
 8005ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae6:	4798      	blx	r3
 8005ae8:	3601      	adds	r6, #1
 8005aea:	e7f2      	b.n	8005ad2 <__libc_init_array+0x1e>
 8005aec:	08006834 	.word	0x08006834
 8005af0:	08006834 	.word	0x08006834
 8005af4:	08006834 	.word	0x08006834
 8005af8:	08006838 	.word	0x08006838

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <memset>:
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4402      	add	r2, r0
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <memset+0xa>
 8005b20:	4770      	bx	lr
 8005b22:	f803 1b01 	strb.w	r1, [r3], #1
 8005b26:	e7f9      	b.n	8005b1c <memset+0x4>

08005b28 <siprintf>:
 8005b28:	b40e      	push	{r1, r2, r3}
 8005b2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b2e:	b500      	push	{lr}
 8005b30:	b09c      	sub	sp, #112	; 0x70
 8005b32:	ab1d      	add	r3, sp, #116	; 0x74
 8005b34:	9002      	str	r0, [sp, #8]
 8005b36:	9006      	str	r0, [sp, #24]
 8005b38:	9107      	str	r1, [sp, #28]
 8005b3a:	9104      	str	r1, [sp, #16]
 8005b3c:	4808      	ldr	r0, [pc, #32]	; (8005b60 <siprintf+0x38>)
 8005b3e:	4909      	ldr	r1, [pc, #36]	; (8005b64 <siprintf+0x3c>)
 8005b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	a902      	add	r1, sp, #8
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f000 f8fe 	bl	8005d4c <_svfiprintf_r>
 8005b50:	2200      	movs	r2, #0
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	b01c      	add	sp, #112	; 0x70
 8005b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b5c:	b003      	add	sp, #12
 8005b5e:	4770      	bx	lr
 8005b60:	2000000c 	.word	0x2000000c
 8005b64:	ffff0208 	.word	0xffff0208

08005b68 <__retarget_lock_acquire_recursive>:
 8005b68:	4770      	bx	lr

08005b6a <__retarget_lock_release_recursive>:
 8005b6a:	4770      	bx	lr

08005b6c <sbrk_aligned>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4e0e      	ldr	r6, [pc, #56]	; (8005ba8 <sbrk_aligned+0x3c>)
 8005b70:	460c      	mov	r4, r1
 8005b72:	6831      	ldr	r1, [r6, #0]
 8005b74:	4605      	mov	r5, r0
 8005b76:	b911      	cbnz	r1, 8005b7e <sbrk_aligned+0x12>
 8005b78:	f000 fb7e 	bl	8006278 <_sbrk_r>
 8005b7c:	6030      	str	r0, [r6, #0]
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 fb79 	bl	8006278 <_sbrk_r>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	d00a      	beq.n	8005ba0 <sbrk_aligned+0x34>
 8005b8a:	1cc4      	adds	r4, r0, #3
 8005b8c:	f024 0403 	bic.w	r4, r4, #3
 8005b90:	42a0      	cmp	r0, r4
 8005b92:	d007      	beq.n	8005ba4 <sbrk_aligned+0x38>
 8005b94:	1a21      	subs	r1, r4, r0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 fb6e 	bl	8006278 <_sbrk_r>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d101      	bne.n	8005ba4 <sbrk_aligned+0x38>
 8005ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	20000264 	.word	0x20000264

08005bac <_malloc_r>:
 8005bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb0:	1ccd      	adds	r5, r1, #3
 8005bb2:	f025 0503 	bic.w	r5, r5, #3
 8005bb6:	3508      	adds	r5, #8
 8005bb8:	2d0c      	cmp	r5, #12
 8005bba:	bf38      	it	cc
 8005bbc:	250c      	movcc	r5, #12
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	db01      	blt.n	8005bc8 <_malloc_r+0x1c>
 8005bc4:	42a9      	cmp	r1, r5
 8005bc6:	d905      	bls.n	8005bd4 <_malloc_r+0x28>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	2600      	movs	r6, #0
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4630      	mov	r0, r6
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	4e2e      	ldr	r6, [pc, #184]	; (8005c90 <_malloc_r+0xe4>)
 8005bd6:	f000 fb87 	bl	80062e8 <__malloc_lock>
 8005bda:	6833      	ldr	r3, [r6, #0]
 8005bdc:	461c      	mov	r4, r3
 8005bde:	bb34      	cbnz	r4, 8005c2e <_malloc_r+0x82>
 8005be0:	4629      	mov	r1, r5
 8005be2:	4638      	mov	r0, r7
 8005be4:	f7ff ffc2 	bl	8005b6c <sbrk_aligned>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	4604      	mov	r4, r0
 8005bec:	d14d      	bne.n	8005c8a <_malloc_r+0xde>
 8005bee:	6834      	ldr	r4, [r6, #0]
 8005bf0:	4626      	mov	r6, r4
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d140      	bne.n	8005c78 <_malloc_r+0xcc>
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	eb04 0803 	add.w	r8, r4, r3
 8005c00:	f000 fb3a 	bl	8006278 <_sbrk_r>
 8005c04:	4580      	cmp	r8, r0
 8005c06:	d13a      	bne.n	8005c7e <_malloc_r+0xd2>
 8005c08:	6821      	ldr	r1, [r4, #0]
 8005c0a:	3503      	adds	r5, #3
 8005c0c:	1a6d      	subs	r5, r5, r1
 8005c0e:	f025 0503 	bic.w	r5, r5, #3
 8005c12:	3508      	adds	r5, #8
 8005c14:	2d0c      	cmp	r5, #12
 8005c16:	bf38      	it	cc
 8005c18:	250c      	movcc	r5, #12
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7ff ffa5 	bl	8005b6c <sbrk_aligned>
 8005c22:	3001      	adds	r0, #1
 8005c24:	d02b      	beq.n	8005c7e <_malloc_r+0xd2>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	442b      	add	r3, r5
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	e00e      	b.n	8005c4c <_malloc_r+0xa0>
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	1b52      	subs	r2, r2, r5
 8005c32:	d41e      	bmi.n	8005c72 <_malloc_r+0xc6>
 8005c34:	2a0b      	cmp	r2, #11
 8005c36:	d916      	bls.n	8005c66 <_malloc_r+0xba>
 8005c38:	1961      	adds	r1, r4, r5
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	6025      	str	r5, [r4, #0]
 8005c3e:	bf18      	it	ne
 8005c40:	6059      	strne	r1, [r3, #4]
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	bf08      	it	eq
 8005c46:	6031      	streq	r1, [r6, #0]
 8005c48:	5162      	str	r2, [r4, r5]
 8005c4a:	604b      	str	r3, [r1, #4]
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f104 060b 	add.w	r6, r4, #11
 8005c52:	f000 fb4f 	bl	80062f4 <__malloc_unlock>
 8005c56:	f026 0607 	bic.w	r6, r6, #7
 8005c5a:	1d23      	adds	r3, r4, #4
 8005c5c:	1af2      	subs	r2, r6, r3
 8005c5e:	d0b6      	beq.n	8005bce <_malloc_r+0x22>
 8005c60:	1b9b      	subs	r3, r3, r6
 8005c62:	50a3      	str	r3, [r4, r2]
 8005c64:	e7b3      	b.n	8005bce <_malloc_r+0x22>
 8005c66:	6862      	ldr	r2, [r4, #4]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	bf0c      	ite	eq
 8005c6c:	6032      	streq	r2, [r6, #0]
 8005c6e:	605a      	strne	r2, [r3, #4]
 8005c70:	e7ec      	b.n	8005c4c <_malloc_r+0xa0>
 8005c72:	4623      	mov	r3, r4
 8005c74:	6864      	ldr	r4, [r4, #4]
 8005c76:	e7b2      	b.n	8005bde <_malloc_r+0x32>
 8005c78:	4634      	mov	r4, r6
 8005c7a:	6876      	ldr	r6, [r6, #4]
 8005c7c:	e7b9      	b.n	8005bf2 <_malloc_r+0x46>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	4638      	mov	r0, r7
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	f000 fb36 	bl	80062f4 <__malloc_unlock>
 8005c88:	e7a1      	b.n	8005bce <_malloc_r+0x22>
 8005c8a:	6025      	str	r5, [r4, #0]
 8005c8c:	e7de      	b.n	8005c4c <_malloc_r+0xa0>
 8005c8e:	bf00      	nop
 8005c90:	20000260 	.word	0x20000260

08005c94 <__ssputs_r>:
 8005c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	688e      	ldr	r6, [r1, #8]
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	429e      	cmp	r6, r3
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4690      	mov	r8, r2
 8005ca2:	461f      	mov	r7, r3
 8005ca4:	d838      	bhi.n	8005d18 <__ssputs_r+0x84>
 8005ca6:	898a      	ldrh	r2, [r1, #12]
 8005ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cac:	d032      	beq.n	8005d14 <__ssputs_r+0x80>
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	6909      	ldr	r1, [r1, #16]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	eba5 0901 	sub.w	r9, r5, r1
 8005cb8:	6965      	ldr	r5, [r4, #20]
 8005cba:	444b      	add	r3, r9
 8005cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cc4:	106d      	asrs	r5, r5, #1
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	bf38      	it	cc
 8005cca:	461d      	movcc	r5, r3
 8005ccc:	0553      	lsls	r3, r2, #21
 8005cce:	d531      	bpl.n	8005d34 <__ssputs_r+0xa0>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7ff ff6b 	bl	8005bac <_malloc_r>
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	b950      	cbnz	r0, 8005cf0 <__ssputs_r+0x5c>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	f8ca 3000 	str.w	r3, [sl]
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	464a      	mov	r2, r9
 8005cf2:	6921      	ldr	r1, [r4, #16]
 8005cf4:	f7ff ff02 	bl	8005afc <memcpy>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	6126      	str	r6, [r4, #16]
 8005d06:	444e      	add	r6, r9
 8005d08:	6026      	str	r6, [r4, #0]
 8005d0a:	463e      	mov	r6, r7
 8005d0c:	6165      	str	r5, [r4, #20]
 8005d0e:	eba5 0509 	sub.w	r5, r5, r9
 8005d12:	60a5      	str	r5, [r4, #8]
 8005d14:	42be      	cmp	r6, r7
 8005d16:	d900      	bls.n	8005d1a <__ssputs_r+0x86>
 8005d18:	463e      	mov	r6, r7
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	4641      	mov	r1, r8
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	f000 fac8 	bl	80062b4 <memmove>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	2000      	movs	r0, #0
 8005d28:	1b9b      	subs	r3, r3, r6
 8005d2a:	60a3      	str	r3, [r4, #8]
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	4433      	add	r3, r6
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	e7db      	b.n	8005cec <__ssputs_r+0x58>
 8005d34:	462a      	mov	r2, r5
 8005d36:	f000 fb2b 	bl	8006390 <_realloc_r>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d1e1      	bne.n	8005d04 <__ssputs_r+0x70>
 8005d40:	4650      	mov	r0, sl
 8005d42:	6921      	ldr	r1, [r4, #16]
 8005d44:	f000 fadc 	bl	8006300 <_free_r>
 8005d48:	e7c7      	b.n	8005cda <__ssputs_r+0x46>
	...

08005d4c <_svfiprintf_r>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	4698      	mov	r8, r3
 8005d52:	898b      	ldrh	r3, [r1, #12]
 8005d54:	4607      	mov	r7, r0
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	460d      	mov	r5, r1
 8005d5a:	4614      	mov	r4, r2
 8005d5c:	b09d      	sub	sp, #116	; 0x74
 8005d5e:	d50e      	bpl.n	8005d7e <_svfiprintf_r+0x32>
 8005d60:	690b      	ldr	r3, [r1, #16]
 8005d62:	b963      	cbnz	r3, 8005d7e <_svfiprintf_r+0x32>
 8005d64:	2140      	movs	r1, #64	; 0x40
 8005d66:	f7ff ff21 	bl	8005bac <_malloc_r>
 8005d6a:	6028      	str	r0, [r5, #0]
 8005d6c:	6128      	str	r0, [r5, #16]
 8005d6e:	b920      	cbnz	r0, 8005d7a <_svfiprintf_r+0x2e>
 8005d70:	230c      	movs	r3, #12
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e0d1      	b.n	8005f1e <_svfiprintf_r+0x1d2>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	616b      	str	r3, [r5, #20]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	2320      	movs	r3, #32
 8005d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d88:	2330      	movs	r3, #48	; 0x30
 8005d8a:	f04f 0901 	mov.w	r9, #1
 8005d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f38 <_svfiprintf_r+0x1ec>
 8005d96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	469a      	mov	sl, r3
 8005d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005da2:	b10a      	cbz	r2, 8005da8 <_svfiprintf_r+0x5c>
 8005da4:	2a25      	cmp	r2, #37	; 0x25
 8005da6:	d1f9      	bne.n	8005d9c <_svfiprintf_r+0x50>
 8005da8:	ebba 0b04 	subs.w	fp, sl, r4
 8005dac:	d00b      	beq.n	8005dc6 <_svfiprintf_r+0x7a>
 8005dae:	465b      	mov	r3, fp
 8005db0:	4622      	mov	r2, r4
 8005db2:	4629      	mov	r1, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff ff6d 	bl	8005c94 <__ssputs_r>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f000 80aa 	beq.w	8005f14 <_svfiprintf_r+0x1c8>
 8005dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc2:	445a      	add	r2, fp
 8005dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80a2 	beq.w	8005f14 <_svfiprintf_r+0x1c8>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dda:	f10a 0a01 	add.w	sl, sl, #1
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	9307      	str	r3, [sp, #28]
 8005de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de6:	931a      	str	r3, [sp, #104]	; 0x68
 8005de8:	4654      	mov	r4, sl
 8005dea:	2205      	movs	r2, #5
 8005dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df0:	4851      	ldr	r0, [pc, #324]	; (8005f38 <_svfiprintf_r+0x1ec>)
 8005df2:	f000 fa51 	bl	8006298 <memchr>
 8005df6:	9a04      	ldr	r2, [sp, #16]
 8005df8:	b9d8      	cbnz	r0, 8005e32 <_svfiprintf_r+0xe6>
 8005dfa:	06d0      	lsls	r0, r2, #27
 8005dfc:	bf44      	itt	mi
 8005dfe:	2320      	movmi	r3, #32
 8005e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e04:	0711      	lsls	r1, r2, #28
 8005e06:	bf44      	itt	mi
 8005e08:	232b      	movmi	r3, #43	; 0x2b
 8005e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e12:	2b2a      	cmp	r3, #42	; 0x2a
 8005e14:	d015      	beq.n	8005e42 <_svfiprintf_r+0xf6>
 8005e16:	4654      	mov	r4, sl
 8005e18:	2000      	movs	r0, #0
 8005e1a:	f04f 0c0a 	mov.w	ip, #10
 8005e1e:	9a07      	ldr	r2, [sp, #28]
 8005e20:	4621      	mov	r1, r4
 8005e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e26:	3b30      	subs	r3, #48	; 0x30
 8005e28:	2b09      	cmp	r3, #9
 8005e2a:	d94e      	bls.n	8005eca <_svfiprintf_r+0x17e>
 8005e2c:	b1b0      	cbz	r0, 8005e5c <_svfiprintf_r+0x110>
 8005e2e:	9207      	str	r2, [sp, #28]
 8005e30:	e014      	b.n	8005e5c <_svfiprintf_r+0x110>
 8005e32:	eba0 0308 	sub.w	r3, r0, r8
 8005e36:	fa09 f303 	lsl.w	r3, r9, r3
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	46a2      	mov	sl, r4
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	e7d2      	b.n	8005de8 <_svfiprintf_r+0x9c>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	9103      	str	r1, [sp, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	425b      	neglt	r3, r3
 8005e50:	f042 0202 	orrlt.w	r2, r2, #2
 8005e54:	9307      	strge	r3, [sp, #28]
 8005e56:	9307      	strlt	r3, [sp, #28]
 8005e58:	bfb8      	it	lt
 8005e5a:	9204      	strlt	r2, [sp, #16]
 8005e5c:	7823      	ldrb	r3, [r4, #0]
 8005e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e60:	d10c      	bne.n	8005e7c <_svfiprintf_r+0x130>
 8005e62:	7863      	ldrb	r3, [r4, #1]
 8005e64:	2b2a      	cmp	r3, #42	; 0x2a
 8005e66:	d135      	bne.n	8005ed4 <_svfiprintf_r+0x188>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	3402      	adds	r4, #2
 8005e6c:	1d1a      	adds	r2, r3, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	9203      	str	r2, [sp, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfb8      	it	lt
 8005e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005f3c <_svfiprintf_r+0x1f0>
 8005e80:	2203      	movs	r2, #3
 8005e82:	4650      	mov	r0, sl
 8005e84:	7821      	ldrb	r1, [r4, #0]
 8005e86:	f000 fa07 	bl	8006298 <memchr>
 8005e8a:	b140      	cbz	r0, 8005e9e <_svfiprintf_r+0x152>
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	eba0 000a 	sub.w	r0, r0, sl
 8005e92:	fa03 f000 	lsl.w	r0, r3, r0
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	3401      	adds	r4, #1
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	9304      	str	r3, [sp, #16]
 8005e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea2:	2206      	movs	r2, #6
 8005ea4:	4826      	ldr	r0, [pc, #152]	; (8005f40 <_svfiprintf_r+0x1f4>)
 8005ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eaa:	f000 f9f5 	bl	8006298 <memchr>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d038      	beq.n	8005f24 <_svfiprintf_r+0x1d8>
 8005eb2:	4b24      	ldr	r3, [pc, #144]	; (8005f44 <_svfiprintf_r+0x1f8>)
 8005eb4:	bb1b      	cbnz	r3, 8005efe <_svfiprintf_r+0x1b2>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3307      	adds	r3, #7
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec4:	4433      	add	r3, r6
 8005ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec8:	e767      	b.n	8005d9a <_svfiprintf_r+0x4e>
 8005eca:	460c      	mov	r4, r1
 8005ecc:	2001      	movs	r0, #1
 8005ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ed2:	e7a5      	b.n	8005e20 <_svfiprintf_r+0xd4>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f04f 0c0a 	mov.w	ip, #10
 8005eda:	4619      	mov	r1, r3
 8005edc:	3401      	adds	r4, #1
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee6:	3a30      	subs	r2, #48	; 0x30
 8005ee8:	2a09      	cmp	r2, #9
 8005eea:	d903      	bls.n	8005ef4 <_svfiprintf_r+0x1a8>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0c5      	beq.n	8005e7c <_svfiprintf_r+0x130>
 8005ef0:	9105      	str	r1, [sp, #20]
 8005ef2:	e7c3      	b.n	8005e7c <_svfiprintf_r+0x130>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005efc:	e7f0      	b.n	8005ee0 <_svfiprintf_r+0x194>
 8005efe:	ab03      	add	r3, sp, #12
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	462a      	mov	r2, r5
 8005f04:	4638      	mov	r0, r7
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <_svfiprintf_r+0x1fc>)
 8005f08:	a904      	add	r1, sp, #16
 8005f0a:	f3af 8000 	nop.w
 8005f0e:	1c42      	adds	r2, r0, #1
 8005f10:	4606      	mov	r6, r0
 8005f12:	d1d6      	bne.n	8005ec2 <_svfiprintf_r+0x176>
 8005f14:	89ab      	ldrh	r3, [r5, #12]
 8005f16:	065b      	lsls	r3, r3, #25
 8005f18:	f53f af2c 	bmi.w	8005d74 <_svfiprintf_r+0x28>
 8005f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1e:	b01d      	add	sp, #116	; 0x74
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <_svfiprintf_r+0x1fc>)
 8005f2e:	a904      	add	r1, sp, #16
 8005f30:	f000 f87c 	bl	800602c <_printf_i>
 8005f34:	e7eb      	b.n	8005f0e <_svfiprintf_r+0x1c2>
 8005f36:	bf00      	nop
 8005f38:	080067f8 	.word	0x080067f8
 8005f3c:	080067fe 	.word	0x080067fe
 8005f40:	08006802 	.word	0x08006802
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005c95 	.word	0x08005c95

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4616      	mov	r6, r2
 8005f52:	4699      	mov	r9, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4607      	mov	r7, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfb8      	it	lt
 8005f5e:	4613      	movlt	r3, r2
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f66:	460c      	mov	r4, r1
 8005f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6c:	b10a      	cbz	r2, 8005f72 <_printf_common+0x26>
 8005f6e:	3301      	adds	r3, #1
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	0699      	lsls	r1, r3, #26
 8005f76:	bf42      	ittt	mi
 8005f78:	6833      	ldrmi	r3, [r6, #0]
 8005f7a:	3302      	addmi	r3, #2
 8005f7c:	6033      	strmi	r3, [r6, #0]
 8005f7e:	6825      	ldr	r5, [r4, #0]
 8005f80:	f015 0506 	ands.w	r5, r5, #6
 8005f84:	d106      	bne.n	8005f94 <_printf_common+0x48>
 8005f86:	f104 0a19 	add.w	sl, r4, #25
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc28      	bgt.n	8005fe6 <_printf_common+0x9a>
 8005f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f98:	1e13      	subs	r3, r2, #0
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	bf18      	it	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	0692      	lsls	r2, r2, #26
 8005fa2:	d42d      	bmi.n	8006000 <_printf_common+0xb4>
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fac:	47c0      	blx	r8
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d020      	beq.n	8005ff4 <_printf_common+0xa8>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	68e5      	ldr	r5, [r4, #12]
 8005fb6:	f003 0306 	and.w	r3, r3, #6
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	bf18      	it	ne
 8005fbe:	2500      	movne	r5, #0
 8005fc0:	6832      	ldr	r2, [r6, #0]
 8005fc2:	f04f 0600 	mov.w	r6, #0
 8005fc6:	68a3      	ldr	r3, [r4, #8]
 8005fc8:	bf08      	it	eq
 8005fca:	1aad      	subeq	r5, r5, r2
 8005fcc:	6922      	ldr	r2, [r4, #16]
 8005fce:	bf08      	it	eq
 8005fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	bfc4      	itt	gt
 8005fd8:	1a9b      	subgt	r3, r3, r2
 8005fda:	18ed      	addgt	r5, r5, r3
 8005fdc:	341a      	adds	r4, #26
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d11a      	bne.n	8006018 <_printf_common+0xcc>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e008      	b.n	8005ff8 <_printf_common+0xac>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4649      	mov	r1, r9
 8005fec:	4638      	mov	r0, r7
 8005fee:	47c0      	blx	r8
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_printf_common+0xb0>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7c4      	b.n	8005f8a <_printf_common+0x3e>
 8006000:	2030      	movs	r0, #48	; 0x30
 8006002:	18e1      	adds	r1, r4, r3
 8006004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800600e:	4422      	add	r2, r4
 8006010:	3302      	adds	r3, #2
 8006012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006016:	e7c5      	b.n	8005fa4 <_printf_common+0x58>
 8006018:	2301      	movs	r3, #1
 800601a:	4622      	mov	r2, r4
 800601c:	4649      	mov	r1, r9
 800601e:	4638      	mov	r0, r7
 8006020:	47c0      	blx	r8
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa8>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d9      	b.n	8005fde <_printf_common+0x92>
	...

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	4691      	mov	r9, r2
 8006034:	2f78      	cmp	r7, #120	; 0x78
 8006036:	4680      	mov	r8, r0
 8006038:	460c      	mov	r4, r1
 800603a:	469a      	mov	sl, r3
 800603c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800603e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	; 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d9 	beq.w	8006200 <_printf_i+0x1d4>
 800604e:	2f58      	cmp	r7, #88	; 0x58
 8006050:	f000 80a4 	beq.w	800619c <_printf_i+0x170>
 8006054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	; (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061e7 	.word	0x080061e7
 800609c:	08006109 	.word	0x08006109
 80060a0:	080061c9 	.word	0x080061c9
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	08006209 	.word	0x08006209
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006109 	.word	0x08006109
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	080061d1 	.word	0x080061d1
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	602a      	str	r2, [r5, #0]
 80060cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0a4      	b.n	8006222 <_printf_i+0x1f6>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	6829      	ldr	r1, [r5, #0]
 80060dc:	0606      	lsls	r6, r0, #24
 80060de:	f101 0304 	add.w	r3, r1, #4
 80060e2:	d50a      	bpl.n	80060fa <_printf_i+0xce>
 80060e4:	680e      	ldr	r6, [r1, #0]
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	da03      	bge.n	80060f4 <_printf_i+0xc8>
 80060ec:	232d      	movs	r3, #45	; 0x2d
 80060ee:	4276      	negs	r6, r6
 80060f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f4:	230a      	movs	r3, #10
 80060f6:	485e      	ldr	r0, [pc, #376]	; (8006270 <_printf_i+0x244>)
 80060f8:	e019      	b.n	800612e <_printf_i+0x102>
 80060fa:	680e      	ldr	r6, [r1, #0]
 80060fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	bf18      	it	ne
 8006104:	b236      	sxthne	r6, r6
 8006106:	e7ef      	b.n	80060e8 <_printf_i+0xbc>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	6029      	str	r1, [r5, #0]
 8006110:	0601      	lsls	r1, r0, #24
 8006112:	d501      	bpl.n	8006118 <_printf_i+0xec>
 8006114:	681e      	ldr	r6, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0xf2>
 8006118:	0646      	lsls	r6, r0, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0xe8>
 800611c:	881e      	ldrh	r6, [r3, #0]
 800611e:	2f6f      	cmp	r7, #111	; 0x6f
 8006120:	bf0c      	ite	eq
 8006122:	2308      	moveq	r3, #8
 8006124:	230a      	movne	r3, #10
 8006126:	4852      	ldr	r0, [pc, #328]	; (8006270 <_printf_i+0x244>)
 8006128:	2100      	movs	r1, #0
 800612a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800612e:	6865      	ldr	r5, [r4, #4]
 8006130:	2d00      	cmp	r5, #0
 8006132:	bfa8      	it	ge
 8006134:	6821      	ldrge	r1, [r4, #0]
 8006136:	60a5      	str	r5, [r4, #8]
 8006138:	bfa4      	itt	ge
 800613a:	f021 0104 	bicge.w	r1, r1, #4
 800613e:	6021      	strge	r1, [r4, #0]
 8006140:	b90e      	cbnz	r6, 8006146 <_printf_i+0x11a>
 8006142:	2d00      	cmp	r5, #0
 8006144:	d04d      	beq.n	80061e2 <_printf_i+0x1b6>
 8006146:	4615      	mov	r5, r2
 8006148:	fbb6 f1f3 	udiv	r1, r6, r3
 800614c:	fb03 6711 	mls	r7, r3, r1, r6
 8006150:	5dc7      	ldrb	r7, [r0, r7]
 8006152:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006156:	4637      	mov	r7, r6
 8006158:	42bb      	cmp	r3, r7
 800615a:	460e      	mov	r6, r1
 800615c:	d9f4      	bls.n	8006148 <_printf_i+0x11c>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d10b      	bne.n	800617a <_printf_i+0x14e>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	07de      	lsls	r6, r3, #31
 8006166:	d508      	bpl.n	800617a <_printf_i+0x14e>
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	6861      	ldr	r1, [r4, #4]
 800616c:	4299      	cmp	r1, r3
 800616e:	bfde      	ittt	le
 8006170:	2330      	movle	r3, #48	; 0x30
 8006172:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006176:	f105 35ff 	addle.w	r5, r5, #4294967295
 800617a:	1b52      	subs	r2, r2, r5
 800617c:	6122      	str	r2, [r4, #16]
 800617e:	464b      	mov	r3, r9
 8006180:	4621      	mov	r1, r4
 8006182:	4640      	mov	r0, r8
 8006184:	f8cd a000 	str.w	sl, [sp]
 8006188:	aa03      	add	r2, sp, #12
 800618a:	f7ff fedf 	bl	8005f4c <_printf_common>
 800618e:	3001      	adds	r0, #1
 8006190:	d14c      	bne.n	800622c <_printf_i+0x200>
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
 8006196:	b004      	add	sp, #16
 8006198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619c:	4834      	ldr	r0, [pc, #208]	; (8006270 <_printf_i+0x244>)
 800619e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061a2:	6829      	ldr	r1, [r5, #0]
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80061aa:	6029      	str	r1, [r5, #0]
 80061ac:	061d      	lsls	r5, r3, #24
 80061ae:	d514      	bpl.n	80061da <_printf_i+0x1ae>
 80061b0:	07df      	lsls	r7, r3, #31
 80061b2:	bf44      	itt	mi
 80061b4:	f043 0320 	orrmi.w	r3, r3, #32
 80061b8:	6023      	strmi	r3, [r4, #0]
 80061ba:	b91e      	cbnz	r6, 80061c4 <_printf_i+0x198>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	f023 0320 	bic.w	r3, r3, #32
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	2310      	movs	r3, #16
 80061c6:	e7af      	b.n	8006128 <_printf_i+0xfc>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	f043 0320 	orr.w	r3, r3, #32
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	2378      	movs	r3, #120	; 0x78
 80061d2:	4828      	ldr	r0, [pc, #160]	; (8006274 <_printf_i+0x248>)
 80061d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061d8:	e7e3      	b.n	80061a2 <_printf_i+0x176>
 80061da:	0659      	lsls	r1, r3, #25
 80061dc:	bf48      	it	mi
 80061de:	b2b6      	uxthmi	r6, r6
 80061e0:	e7e6      	b.n	80061b0 <_printf_i+0x184>
 80061e2:	4615      	mov	r5, r2
 80061e4:	e7bb      	b.n	800615e <_printf_i+0x132>
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	6826      	ldr	r6, [r4, #0]
 80061ea:	1d18      	adds	r0, r3, #4
 80061ec:	6961      	ldr	r1, [r4, #20]
 80061ee:	6028      	str	r0, [r5, #0]
 80061f0:	0635      	lsls	r5, r6, #24
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	d501      	bpl.n	80061fa <_printf_i+0x1ce>
 80061f6:	6019      	str	r1, [r3, #0]
 80061f8:	e002      	b.n	8006200 <_printf_i+0x1d4>
 80061fa:	0670      	lsls	r0, r6, #25
 80061fc:	d5fb      	bpl.n	80061f6 <_printf_i+0x1ca>
 80061fe:	8019      	strh	r1, [r3, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	4615      	mov	r5, r2
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	e7ba      	b.n	800617e <_printf_i+0x152>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	2100      	movs	r1, #0
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	681d      	ldr	r5, [r3, #0]
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	4628      	mov	r0, r5
 8006216:	f000 f83f 	bl	8006298 <memchr>
 800621a:	b108      	cbz	r0, 8006220 <_printf_i+0x1f4>
 800621c:	1b40      	subs	r0, r0, r5
 800621e:	6060      	str	r0, [r4, #4]
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	2300      	movs	r3, #0
 8006226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800622a:	e7a8      	b.n	800617e <_printf_i+0x152>
 800622c:	462a      	mov	r2, r5
 800622e:	4649      	mov	r1, r9
 8006230:	4640      	mov	r0, r8
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	47d0      	blx	sl
 8006236:	3001      	adds	r0, #1
 8006238:	d0ab      	beq.n	8006192 <_printf_i+0x166>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	079b      	lsls	r3, r3, #30
 800623e:	d413      	bmi.n	8006268 <_printf_i+0x23c>
 8006240:	68e0      	ldr	r0, [r4, #12]
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	4298      	cmp	r0, r3
 8006246:	bfb8      	it	lt
 8006248:	4618      	movlt	r0, r3
 800624a:	e7a4      	b.n	8006196 <_printf_i+0x16a>
 800624c:	2301      	movs	r3, #1
 800624e:	4632      	mov	r2, r6
 8006250:	4649      	mov	r1, r9
 8006252:	4640      	mov	r0, r8
 8006254:	47d0      	blx	sl
 8006256:	3001      	adds	r0, #1
 8006258:	d09b      	beq.n	8006192 <_printf_i+0x166>
 800625a:	3501      	adds	r5, #1
 800625c:	68e3      	ldr	r3, [r4, #12]
 800625e:	9903      	ldr	r1, [sp, #12]
 8006260:	1a5b      	subs	r3, r3, r1
 8006262:	42ab      	cmp	r3, r5
 8006264:	dcf2      	bgt.n	800624c <_printf_i+0x220>
 8006266:	e7eb      	b.n	8006240 <_printf_i+0x214>
 8006268:	2500      	movs	r5, #0
 800626a:	f104 0619 	add.w	r6, r4, #25
 800626e:	e7f5      	b.n	800625c <_printf_i+0x230>
 8006270:	08006809 	.word	0x08006809
 8006274:	0800681a 	.word	0x0800681a

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	2300      	movs	r3, #0
 800627c:	4d05      	ldr	r5, [pc, #20]	; (8006294 <_sbrk_r+0x1c>)
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fc fcf0 	bl	8002c68 <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000268 	.word	0x20000268

08006298 <memchr>:
 8006298:	4603      	mov	r3, r0
 800629a:	b510      	push	{r4, lr}
 800629c:	b2c9      	uxtb	r1, r1
 800629e:	4402      	add	r2, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	d101      	bne.n	80062aa <memchr+0x12>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e003      	b.n	80062b2 <memchr+0x1a>
 80062aa:	7804      	ldrb	r4, [r0, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	428c      	cmp	r4, r1
 80062b0:	d1f6      	bne.n	80062a0 <memchr+0x8>
 80062b2:	bd10      	pop	{r4, pc}

080062b4 <memmove>:
 80062b4:	4288      	cmp	r0, r1
 80062b6:	b510      	push	{r4, lr}
 80062b8:	eb01 0402 	add.w	r4, r1, r2
 80062bc:	d902      	bls.n	80062c4 <memmove+0x10>
 80062be:	4284      	cmp	r4, r0
 80062c0:	4623      	mov	r3, r4
 80062c2:	d807      	bhi.n	80062d4 <memmove+0x20>
 80062c4:	1e43      	subs	r3, r0, #1
 80062c6:	42a1      	cmp	r1, r4
 80062c8:	d008      	beq.n	80062dc <memmove+0x28>
 80062ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062d2:	e7f8      	b.n	80062c6 <memmove+0x12>
 80062d4:	4601      	mov	r1, r0
 80062d6:	4402      	add	r2, r0
 80062d8:	428a      	cmp	r2, r1
 80062da:	d100      	bne.n	80062de <memmove+0x2a>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062e6:	e7f7      	b.n	80062d8 <memmove+0x24>

080062e8 <__malloc_lock>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__malloc_lock+0x8>)
 80062ea:	f7ff bc3d 	b.w	8005b68 <__retarget_lock_acquire_recursive>
 80062ee:	bf00      	nop
 80062f0:	2000025c 	.word	0x2000025c

080062f4 <__malloc_unlock>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__malloc_unlock+0x8>)
 80062f6:	f7ff bc38 	b.w	8005b6a <__retarget_lock_release_recursive>
 80062fa:	bf00      	nop
 80062fc:	2000025c 	.word	0x2000025c

08006300 <_free_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4605      	mov	r5, r0
 8006304:	2900      	cmp	r1, #0
 8006306:	d040      	beq.n	800638a <_free_r+0x8a>
 8006308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800630c:	1f0c      	subs	r4, r1, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	18e4      	addlt	r4, r4, r3
 8006314:	f7ff ffe8 	bl	80062e8 <__malloc_lock>
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <_free_r+0x8c>)
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	b933      	cbnz	r3, 800632c <_free_r+0x2c>
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	6014      	str	r4, [r2, #0]
 8006322:	4628      	mov	r0, r5
 8006324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006328:	f7ff bfe4 	b.w	80062f4 <__malloc_unlock>
 800632c:	42a3      	cmp	r3, r4
 800632e:	d908      	bls.n	8006342 <_free_r+0x42>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	1821      	adds	r1, r4, r0
 8006334:	428b      	cmp	r3, r1
 8006336:	bf01      	itttt	eq
 8006338:	6819      	ldreq	r1, [r3, #0]
 800633a:	685b      	ldreq	r3, [r3, #4]
 800633c:	1809      	addeq	r1, r1, r0
 800633e:	6021      	streq	r1, [r4, #0]
 8006340:	e7ed      	b.n	800631e <_free_r+0x1e>
 8006342:	461a      	mov	r2, r3
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	b10b      	cbz	r3, 800634c <_free_r+0x4c>
 8006348:	42a3      	cmp	r3, r4
 800634a:	d9fa      	bls.n	8006342 <_free_r+0x42>
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	1850      	adds	r0, r2, r1
 8006350:	42a0      	cmp	r0, r4
 8006352:	d10b      	bne.n	800636c <_free_r+0x6c>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	4401      	add	r1, r0
 8006358:	1850      	adds	r0, r2, r1
 800635a:	4283      	cmp	r3, r0
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	d1e0      	bne.n	8006322 <_free_r+0x22>
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4401      	add	r1, r0
 8006366:	6011      	str	r1, [r2, #0]
 8006368:	6053      	str	r3, [r2, #4]
 800636a:	e7da      	b.n	8006322 <_free_r+0x22>
 800636c:	d902      	bls.n	8006374 <_free_r+0x74>
 800636e:	230c      	movs	r3, #12
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	e7d6      	b.n	8006322 <_free_r+0x22>
 8006374:	6820      	ldr	r0, [r4, #0]
 8006376:	1821      	adds	r1, r4, r0
 8006378:	428b      	cmp	r3, r1
 800637a:	bf01      	itttt	eq
 800637c:	6819      	ldreq	r1, [r3, #0]
 800637e:	685b      	ldreq	r3, [r3, #4]
 8006380:	1809      	addeq	r1, r1, r0
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	6063      	str	r3, [r4, #4]
 8006386:	6054      	str	r4, [r2, #4]
 8006388:	e7cb      	b.n	8006322 <_free_r+0x22>
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000260 	.word	0x20000260

08006390 <_realloc_r>:
 8006390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006394:	4680      	mov	r8, r0
 8006396:	4614      	mov	r4, r2
 8006398:	460e      	mov	r6, r1
 800639a:	b921      	cbnz	r1, 80063a6 <_realloc_r+0x16>
 800639c:	4611      	mov	r1, r2
 800639e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a2:	f7ff bc03 	b.w	8005bac <_malloc_r>
 80063a6:	b92a      	cbnz	r2, 80063b4 <_realloc_r+0x24>
 80063a8:	f7ff ffaa 	bl	8006300 <_free_r>
 80063ac:	4625      	mov	r5, r4
 80063ae:	4628      	mov	r0, r5
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	f000 f81b 	bl	80063ee <_malloc_usable_size_r>
 80063b8:	4284      	cmp	r4, r0
 80063ba:	4607      	mov	r7, r0
 80063bc:	d802      	bhi.n	80063c4 <_realloc_r+0x34>
 80063be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063c2:	d812      	bhi.n	80063ea <_realloc_r+0x5a>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4640      	mov	r0, r8
 80063c8:	f7ff fbf0 	bl	8005bac <_malloc_r>
 80063cc:	4605      	mov	r5, r0
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d0ed      	beq.n	80063ae <_realloc_r+0x1e>
 80063d2:	42bc      	cmp	r4, r7
 80063d4:	4622      	mov	r2, r4
 80063d6:	4631      	mov	r1, r6
 80063d8:	bf28      	it	cs
 80063da:	463a      	movcs	r2, r7
 80063dc:	f7ff fb8e 	bl	8005afc <memcpy>
 80063e0:	4631      	mov	r1, r6
 80063e2:	4640      	mov	r0, r8
 80063e4:	f7ff ff8c 	bl	8006300 <_free_r>
 80063e8:	e7e1      	b.n	80063ae <_realloc_r+0x1e>
 80063ea:	4635      	mov	r5, r6
 80063ec:	e7df      	b.n	80063ae <_realloc_r+0x1e>

080063ee <_malloc_usable_size_r>:
 80063ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f2:	1f18      	subs	r0, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfbc      	itt	lt
 80063f8:	580b      	ldrlt	r3, [r1, r0]
 80063fa:	18c0      	addlt	r0, r0, r3
 80063fc:	4770      	bx	lr
	...

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
