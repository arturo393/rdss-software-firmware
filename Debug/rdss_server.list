
rdss_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004974  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  08004cd0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004cd0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e425  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024af  00000000  00000000  0002e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00030970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000317b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019086  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001068d  00000000  00000000  0004b5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d255  00000000  00000000  0005bc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  000e8ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a6c 	.word	0x08004a6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004a6c 	.word	0x08004a6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <readRegister>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <readRegister+0x50>)
 800047a:	f002 f8fa 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f001 fc26 	bl	8001cd0 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 8000484:	1cf9      	adds	r1, r7, #3
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f002 ffa2 	bl	80033d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 8000490:	f107 010f 	add.w	r1, r7, #15
 8000494:	2364      	movs	r3, #100	; 0x64
 8000496:	2201      	movs	r2, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f003 f8d7 	bl	800364c <HAL_SPI_Receive>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 fc16 	bl	8001cd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <readRegister+0x50>)
 80004aa:	f002 f8e2 	bl	8002672 <HAL_GPIO_WritePin>
	return rec;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40010c00 	.word	0x40010c00

080004bc <writeRegister>:

uint8_t writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	607a      	str	r2, [r7, #4]
 80004c6:	461a      	mov	r2, r3
 80004c8:	460b      	mov	r3, r1
 80004ca:	72fb      	strb	r3, [r7, #11]
 80004cc:	4613      	mov	r3, r2
 80004ce:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_data[30] = { 0 };
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
 80004e6:	831a      	strh	r2, [r3, #24]
	tx_data[0] = address | 0x80;
 80004e8:	7afb      	ldrb	r3, [r7, #11]
 80004ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	743b      	strb	r3, [r7, #16]
	int j = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 1; i <= lenght; i++) {
 80004f6:	2301      	movs	r3, #1
 80004f8:	633b      	str	r3, [r7, #48]	; 0x30
 80004fa:	e00f      	b.n	800051c <writeRegister+0x60>
		tx_data[i] = cmd[j++];
 80004fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	637a      	str	r2, [r7, #52]	; 0x34
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	7819      	ldrb	r1, [r3, #0]
 800050a:	f107 0210 	add.w	r2, r7, #16
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	4413      	add	r3, r2
 8000512:	460a      	mov	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	3301      	adds	r3, #1
 800051a:	633b      	str	r3, [r7, #48]	; 0x30
 800051c:	7abb      	ldrb	r3, [r7, #10]
 800051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	ddeb      	ble.n	80004fc <writeRegister+0x40>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <writeRegister+0xa4>)
 800052a:	f002 f8a2 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b29a      	uxth	r2, r3
 8000536:	f107 0110 	add.w	r1, r7, #16
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f002 ff48 	bl	80033d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <writeRegister+0xa4>)
 800054a:	f002 f892 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f001 fbbe 	bl	8001cd0 <HAL_Delay>
	return cmd;  // pull the pin high
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	b2db      	uxtb	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	3738      	adds	r7, #56	; 0x38
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010c00 	.word	0x40010c00

08000564 <setRFFrequency>:
		;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);
	return cmd;  // pull the pin high
}

void setRFFrequency(SX1278_t *module) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000572:	f04f 0000 	mov.w	r0, #0
 8000576:	f04f 0100 	mov.w	r1, #0
 800057a:	04d9      	lsls	r1, r3, #19
 800057c:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000580:	04d0      	lsls	r0, r2, #19
 8000582:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <setRFFrequency+0x80>)
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	f7ff fdea 	bl	8000160 <__aeabi_uldivmod>
 800058c:	4602      	mov	r2, r0
 800058e:	460b      	mov	r3, r1
 8000590:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000594:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	0c02      	lsrs	r2, r0, #16
 80005a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a6:	0c0b      	lsrs	r3, r1, #16
 80005a8:	b2d3      	uxtb	r3, r2
 80005aa:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	f04f 0300 	mov.w	r3, #0
 80005b8:	0a02      	lsrs	r2, r0, #8
 80005ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005be:	0a0b      	lsrs	r3, r1, #8
 80005c0:	b2d3      	uxtb	r3, r2
 80005c2:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005c4:	7c3b      	ldrb	r3, [r7, #16]
 80005c6:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	2303      	movs	r3, #3
 80005d4:	2106      	movs	r1, #6
 80005d6:	f7ff ff71 	bl	80004bc <writeRegister>
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	01e84800 	.word	0x01e84800

080005e8 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f103 0210 	add.w	r2, r3, #16
 80005fc:	2301      	movs	r3, #1
 80005fe:	2109      	movs	r1, #9
 8000600:	f7ff ff5c 	bl	80004bc <writeRegister>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <setLORAWAN>:

void setLORAWAN(SX1278_t *module) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0216 	add.w	r2, r3, #22
 8000620:	2301      	movs	r3, #1
 8000622:	2139      	movs	r1, #57	; 0x39
 8000624:	f7ff ff4a 	bl	80004bc <writeRegister>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <setOvercurrentProtect>:
void setOvercurrentProtect(SX1278_t *module) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f103 0217 	add.w	r2, r3, #23
 8000644:	2301      	movs	r3, #1
 8000646:	210b      	movs	r1, #11
 8000648:	f7ff ff38 	bl	80004bc <writeRegister>
	//SX1278_SPIWrite(module, LR_RegOcp, 0x0B, spi);
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <setPreambleParameters>:
void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
	//SX1278_SPIWrite(module, LR_RegLna, 0x23, spi);//RegLNA,High & LNA Enable
}
void setPreambleParameters(SX1278_t *module) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 021a 	add.w	r2, r3, #26
 8000668:	2301      	movs	r3, #1
 800066a:	211f      	movs	r1, #31
 800066c:	f7ff ff26 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f103 021c 	add.w	r2, r3, #28
 800067c:	2301      	movs	r3, #1
 800067e:	2120      	movs	r1, #32
 8000680:	f7ff ff1c 	bl	80004bc <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f103 021d 	add.w	r2, r3, #29
 8000690:	2301      	movs	r3, #1
 8000692:	2121      	movs	r1, #33	; 0x21
 8000694:	f7ff ff12 	bl	80004bc <writeRegister>
			1);
	module->readBytes = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	uint8_t cmd = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
	cmd = module->LoRa_BW << 4;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7c9b      	ldrb	r3, [r3, #18]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CR << 1;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7cdb      	ldrb	r3, [r3, #19]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4413      	add	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80006e2:	f107 020f 	add.w	r2, r7, #15
 80006e6:	2301      	movs	r3, #1
 80006e8:	211d      	movs	r1, #29
 80006ea:	f7ff fee7 	bl	80004bc <writeRegister>

	cmd = module->LoRa_SF << 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7c5b      	ldrb	r3, [r3, #17]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7d1b      	ldrb	r3, [r3, #20]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4413      	add	r3, r2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7eda      	ldrb	r2, [r3, #27]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4413      	add	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800071a:	f107 020f 	add.w	r2, r7, #15
 800071e:	2301      	movs	r3, #1
 8000720:	211e      	movs	r1, #30
 8000722:	f7ff fecb 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f103 0219 	add.w	r2, r3, #25
 8000732:	2301      	movs	r3, #1
 8000734:	2126      	movs	r1, #38	; 0x26
 8000736:	f7ff fec1 	bl	80004bc <writeRegister>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <setDetectionParameters>:
void setDetectionParameters(SX1278_t *module) {
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000750:	2131      	movs	r1, #49	; 0x31
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe88 	bl	8000468 <readRegister>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f023 0307 	bic.w	r3, r3, #7
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	f043 0305 	orr.w	r3, r3, #5
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000776:	f107 020f 	add.w	r2, r7, #15
 800077a:	2301      	movs	r3, #1
 800077c:	2131      	movs	r1, #49	; 0x31
 800077e:	f7ff fe9d 	bl	80004bc <writeRegister>
	tmp = 0x0C;
 8000782:	230c      	movs	r3, #12
 8000784:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 800078c:	f107 020f 	add.w	r2, r7, #15
 8000790:	2301      	movs	r3, #1
 8000792:	2137      	movs	r1, #55	; 0x37
 8000794:	f7ff fe92 	bl	80004bc <writeRegister>
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <readMode>:
void setMode(SX1278_t *module, SX1278_Status_t mode) {
	uint8_t cmd = mode;
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
	module->operatingMode = mode;
}
SX1278_Status_t readMode(SX1278_t *module) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	return (0x07 & readRegister(module->spi,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fe59 	bl	8000468 <readRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	b2db      	uxtb	r3, r3
	LR_RegOpMode));
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <updateLoraLowFreq>:

void updateLoraLowFreq(SX1278_t *module, SX1278_Status_t mode) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80007e2:	f107 020f 	add.w	r2, r7, #15
 80007e6:	2301      	movs	r3, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	f7ff fe67 	bl	80004bc <writeRegister>
	module->operatingMode = mode;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <clearIrqFlags>:
 SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01, spi); //RegDioMapping2 DIO5=00, DIO4=01
 module->readBytes = 0;

 }*/

void clearIrqFlags(SX1278_t *module) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000806:	23ff      	movs	r3, #255	; 0xff
 8000808:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000810:	f107 020f 	add.w	r2, r7, #15
 8000814:	2301      	movs	r3, #1
 8000816:	2112      	movs	r1, #18
 8000818:	f7ff fe50 	bl	80004bc <writeRegister>
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <SX1278_hw_GetDIO0>:

 void SX1278_hw_DelayMs(uint32_t msec) {
	HAL_Delay(msec);
}

 int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	b29b      	uxth	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f001 ff03 	bl	8002644 <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <ledInit+0x60>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <ledInit+0x60>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <ledInit+0x60>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <ledInit+0x60>)
 800086e:	f023 0320 	bic.w	r3, r3, #32
 8000872:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <ledInit+0x60>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <ledInit+0x60>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <ledInit+0x60>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <ledInit+0x60>)
 8000886:	f023 0310 	bic.w	r3, r3, #16
 800088a:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ledInit+0x60>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <ledInit+0x60>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <ledInit+0x60>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <ledInit+0x60>)
 800089e:	f023 0308 	bic.w	r3, r3, #8
 80008a2:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f835 	bl	8000914 <led_reset>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <led_enable_kalive>:
void led_off(void) {

}

void led_enable_kalive(LED_t *l) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT) {
 80008c0:	f001 f9fc 	bl	8001cbc <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d0:	d90b      	bls.n	80008ea <led_enable_kalive+0x32>
		l->kaCounter = HAL_GetTick();
 80008d2:	f001 f9f3 	bl	8001cbc <HAL_GetTick>
 80008d6:	4602      	mov	r2, r0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
		SYS_RP_LED_ON();
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <led_enable_kalive+0x58>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <led_enable_kalive+0x58>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	60d3      	str	r3, [r2, #12]
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();

}
 80008e8:	e00d      	b.n	8000906 <led_enable_kalive+0x4e>
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 80008ea:	f001 f9e7 	bl	8001cbc <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b32      	cmp	r3, #50	; 0x32
 80008f8:	d905      	bls.n	8000906 <led_enable_kalive+0x4e>
		SYS_RP_LED_OFF();
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <led_enable_kalive+0x58>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <led_enable_kalive+0x58>)
 8000900:	f023 0320 	bic.w	r3, r3, #32
 8000904:	60d3      	str	r3, [r2, #12]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010c00 	.word	0x40010c00

08000914 <led_reset>:
		i2c1_irq_led_off();
	else
		i2c1_irq_led_on();
}

void led_reset(LED_t *l) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 800092e:	f001 f9c5 	bl	8001cbc <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	0000      	movs	r0, r0
 8000954:	0000      	movs	r0, r0
	...

08000958 <setTxBaseParameters>:
	}
	return len;
}

SX1278_t *lora_ptr;
void setTxBaseParameters(SX1278_t *loraTx) {
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_TX_DONE;
 8000960:	2340      	movs	r3, #64	; 0x40
 8000962:	75fb      	strb	r3, [r7, #23]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000964:	2300      	movs	r3, #0
 8000966:	75bb      	strb	r3, [r7, #22]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000968:	2300      	movs	r3, #0
 800096a:	757b      	strb	r3, [r7, #21]
	uint8_t dio3 = DIO3_VALID_HEADER;
 800096c:	2301      	movs	r3, #1
 800096e:	753b      	strb	r3, [r7, #20]

	uint8_t rxTimeoutMask = 0x00 | (MASK_DISABLE << 7);
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	74fb      	strb	r3, [r7, #19]
	uint8_t rxDoneMask = 0x00 | (MASK_DISABLE << 6);
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	74bb      	strb	r3, [r7, #18]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000978:	2320      	movs	r3, #32
 800097a:	747b      	strb	r3, [r7, #17]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 800097c:	2310      	movs	r3, #16
 800097e:	743b      	strb	r3, [r7, #16]
	uint8_t txDoneMask = 0x00 | (MASK_ENABLE << 3);
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000984:	2304      	movs	r3, #4
 8000986:	73bb      	strb	r3, [r7, #14]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000988:	2302      	movs	r3, #2
 800098a:	737b      	strb	r3, [r7, #13]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 800098c:	2301      	movs	r3, #1
 800098e:	733b      	strb	r3, [r7, #12]

	loraTx->frequency = DOWNLINK_FREQ;
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	a331      	add	r3, pc, #196	; (adr r3, 8000a58 <setTxBaseParameters+0x100>)
 8000994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000998:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraTx->power = SX1278_POWER_17DBM;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	22fc      	movs	r2, #252	; 0xfc
 80009a0:	741a      	strb	r2, [r3, #16]
	loraTx->LoRa_SF = SF_10;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	220a      	movs	r2, #10
 80009a6:	745a      	strb	r2, [r3, #17]
	loraTx->LoRa_BW = LORABW_62_5KHZ;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2206      	movs	r2, #6
 80009ac:	749a      	strb	r2, [r3, #18]
	loraTx->LoRa_CR = LORA_CR_4_6;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2202      	movs	r2, #2
 80009b2:	74da      	strb	r2, [r3, #19]
	loraTx->LoRa_CRC_sum = CRC_ENABLE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	751a      	strb	r2, [r3, #20]
	loraTx->syncWord = LORAWAN;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2234      	movs	r2, #52	; 0x34
 80009be:	759a      	strb	r2, [r3, #22]
	loraTx->ocp = OVERCURRENTPROTECT;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	220b      	movs	r2, #11
 80009c4:	75da      	strb	r2, [r3, #23]
	loraTx->lnaGain = LNAGAIN;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2223      	movs	r2, #35	; 0x23
 80009ca:	761a      	strb	r2, [r3, #24]
	loraTx->AgcAutoOn = LNA_SET_BY_AGC;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2204      	movs	r2, #4
 80009d0:	765a      	strb	r2, [r3, #25]
	loraTx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2208      	movs	r2, #8
 80009d6:	769a      	strb	r2, [r3, #26]
	loraTx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	771a      	strb	r2, [r3, #28]
	loraTx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2208      	movs	r2, #8
 80009e2:	775a      	strb	r2, [r3, #29]
	loraTx->dioConfig = dio0 | dio1 | dio2 | dio3;
 80009e4:	7dfa      	ldrb	r2, [r7, #23]
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	7d7b      	ldrb	r3, [r7, #21]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	7d3b      	ldrb	r3, [r7, #20]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	77da      	strb	r2, [r3, #31]
	loraTx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 80009fc:	7cfa      	ldrb	r2, [r7, #19]
 80009fe:	7cbb      	ldrb	r3, [r7, #18]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	7c7b      	ldrb	r3, [r7, #17]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a16:	7c39      	ldrb	r1, [r7, #16]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	b2d9      	uxtb	r1, r3
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	430b      	orrs	r3, r1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a34:	7b79      	ldrb	r1, [r7, #13]
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
	loraTx->fhssValue = HOPS_PERIOD;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	779a      	strb	r2, [r3, #30]
}
 8000a4c:	bf00      	nop
 8000a4e:	371c      	adds	r7, #28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	08f0d180 	.word	0x08f0d180
 8000a5c:	00000000 	.word	0x00000000

08000a60 <saveTx>:

void saveTx(SX1278_t *module) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff feab 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000a70:	200f      	movs	r0, #15
 8000a72:	f001 f92d 	bl	8001cd0 <HAL_Delay>
	setRFFrequency(module);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd74 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fdc5 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fdb0 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fdd1 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f103 0218 	add.w	r2, r3, #24
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	f7ff fd0d 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7c5b      	ldrb	r3, [r3, #17]
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d10a      	bne.n	8000ac0 <saveTx+0x60>
		module->headerMode = IMPLICIT;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fe42 	bl	8000742 <setDetectionParameters>
 8000abe:	e006      	b.n	8000ace <saveTx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fdea 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fdbd 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f103 021e 	add.w	r2, r3, #30
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2124      	movs	r1, #36	; 0x24
 8000aea:	f7ff fce7 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f103 021f 	add.w	r2, r3, #31
 8000afa:	2301      	movs	r3, #1
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	f7ff fcdd 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fe7b 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f103 0220 	add.w	r2, r3, #32
 8000b14:	2301      	movs	r3, #1
 8000b16:	2111      	movs	r1, #17
 8000b18:	f7ff fcd0 	bl	80004bc <writeRegister>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <setTxParameters>:

void setTxParameters(SX1278_t *module) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = module->packetLength;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7d5b      	ldrb	r3, [r3, #21]
 8000b30:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b38:	f107 020f 	add.w	r2, r7, #15
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	2122      	movs	r1, #34	; 0x22
 8000b40:	f7ff fcbc 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoTxBaseAddr);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000b4a:	210e      	movs	r1, #14
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fc8b 	bl	8000468 <readRegister>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000b5c:	f107 020e 	add.w	r2, r7, #14
 8000b60:	2301      	movs	r3, #1
 8000b62:	210d      	movs	r1, #13
 8000b64:	f7ff fcaa 	bl	80004bc <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000b6e:	2122      	movs	r1, #34	; 0x22
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fc79 	bl	8000468 <readRegister>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	755a      	strb	r2, [r3, #21]
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <sx1278Reset>:

void sx1278Reset() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <sx1278Reset+0x34>)
 8000b92:	f001 fd6e 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4808      	ldr	r0, [pc, #32]	; (8000bbc <sx1278Reset+0x34>)
 8000b9c:	f001 fd69 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f001 f895 	bl	8001cd0 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <sx1278Reset+0x34>)
 8000bac:	f001 fd61 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f001 f88d 	bl	8001cd0 <HAL_Delay>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <transmit>:

//int messageCounter = 256;
int messageCounter = 0;
void transmit(SX1278_t *loraTx) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b0a8      	sub	sp, #160	; 0xa0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if (loraTx->status == UNKNOW) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d125      	bne.n	8000c1e <transmit+0x5e>
		uint8_t tmp[] = "Configuring Master LoRa module: Tx Mode\r\n";
 8000bd2:	4b7e      	ldr	r3, [pc, #504]	; (8000dcc <transmit+0x20c>)
 8000bd4:	f107 0408 	add.w	r4, r7, #8
 8000bd8:	461d      	mov	r5, r3
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be6:	c403      	stmia	r4!, {r0, r1}
 8000be8:	8022      	strh	r2, [r4, #0]
		size_t len = strlen(tmp);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff faae 	bl	8000150 <strlen>
 8000bf4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		HAL_UART_Transmit(&huart1, tmp, len, 100);
 8000bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f107 0108 	add.w	r1, r7, #8
 8000c02:	2364      	movs	r3, #100	; 0x64
 8000c04:	4872      	ldr	r0, [pc, #456]	; (8000dd0 <transmit+0x210>)
 8000c06:	f003 f91a 	bl	8003e3e <HAL_UART_Transmit>
		setTxBaseParameters(loraTx);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fea4 	bl	8000958 <setTxBaseParameters>
		saveTx(loraTx);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff25 	bl	8000a60 <saveTx>
		loraTx->status = TX_READY;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (loraTx->status == TX_READY) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	f040 80ce 	bne.w	8000dc6 <transmit+0x206>
		 }

		 loraTx->packetLength = messageCounter;
		 loraTx->buffer[messageCounter] = messageCounter+48;*/

		memset(loraTx->buffer, 0, SX1278_MAX_PACKET);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3325      	adds	r3, #37	; 0x25
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fa98 	bl	8004168 <memset>
		loraTx->packetLength = sprintf((char*) loraTx->buffer, "Hello World"
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3325      	adds	r3, #37	; 0x25
 8000c3c:	4a65      	ldr	r2, [pc, #404]	; (8000dd4 <transmit+0x214>)
 8000c3e:	6812      	ldr	r2, [r2, #0]
 8000c40:	4965      	ldr	r1, [pc, #404]	; (8000dd8 <transmit+0x218>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fa98 	bl	8004178 <siprintf>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	755a      	strb	r2, [r3, #21]
				" %d", messageCounter);

		setTxParameters(loraTx);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff67 	bl	8000b24 <setTxParameters>
		uint8_t tmp2[] = "Sending message: ";
 8000c56:	4b61      	ldr	r3, [pc, #388]	; (8000ddc <transmit+0x21c>)
 8000c58:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000c5c:	461d      	mov	r5, r3
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c62:	682b      	ldr	r3, [r5, #0]
 8000c64:	8023      	strh	r3, [r4, #0]
		size_t len2 = strlen(tmp2);
 8000c66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fa70 	bl	8000150 <strlen>
 8000c70:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		HAL_UART_Transmit(&huart1, tmp2, len2, 100);
 8000c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	4853      	ldr	r0, [pc, #332]	; (8000dd0 <transmit+0x210>)
 8000c82:	f003 f8dc 	bl	8003e3e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, loraTx->buffer, loraTx->packetLength, 100);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7d5b      	ldrb	r3, [r3, #21]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	484e      	ldr	r0, [pc, #312]	; (8000dd0 <transmit+0x210>)
 8000c96:	f003 f8d2 	bl	8003e3e <HAL_UART_Transmit>

		for (int i = 0; i < loraTx->packetLength; i++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ca0:	e015      	b.n	8000cce <transmit+0x10e>
			char data = loraTx->buffer[i];
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ca8:	4413      	add	r3, r2
 8000caa:	3325      	adds	r3, #37	; 0x25
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			writeRegister(loraTx->spi, 0x00, &data, 1);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000cb8:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f7ff fbfc 	bl	80004bc <writeRegister>
		for (int i = 0; i < loraTx->packetLength; i++) {
 8000cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7d5b      	ldrb	r3, [r3, #21]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	dbe2      	blt.n	8000ca2 <transmit+0xe2>
		}
		updateLoraLowFreq(loraTx, TX);
 8000cdc:	2103      	movs	r1, #3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fd71 	bl	80007c6 <updateLoraLowFreq>
		int timeStart = HAL_GetTick();
 8000ce4:	f000 ffea 	bl	8001cbc <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (1) {

			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fd96 	bl	8000824 <SX1278_hw_GetDIO0>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d039      	beq.n	8000d72 <transmit+0x1b2>
				int timeEnd = HAL_GetTick();
 8000cfe:	f000 ffdd 	bl	8001cbc <HAL_GetTick>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				int tiempoTransmision = timeEnd - timeStart;
 8000d08:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				readRegister(loraTx->spi, LR_RegIrqFlags);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000d1c:	2112      	movs	r1, #18
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fba2 	bl	8000468 <readRegister>
				clearIrqFlags(loraTx);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fd6a 	bl	80007fe <clearIrqFlags>
				uint8_t tmp3[100] = { 0 };
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2260      	movs	r2, #96	; 0x60
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fa16 	bl	8004168 <memset>
				uint8_t len3 = sprintf((char*) tmp3,
						" - Tx Ok: %d ms %d bytes\n", tiempoTransmision,
						loraTx->packetLength);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7d5b      	ldrb	r3, [r3, #21]
				uint8_t len3 = sprintf((char*) tmp3,
 8000d40:	f107 0008 	add.w	r0, r7, #8
 8000d44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d48:	4925      	ldr	r1, [pc, #148]	; (8000de0 <transmit+0x220>)
 8000d4a:	f003 fa15 	bl	8004178 <siprintf>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

				HAL_UART_Transmit(&huart1, tmp3, len3, 100);
 8000d54:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	f107 0108 	add.w	r1, r7, #8
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <transmit+0x210>)
 8000d62:	f003 f86c 	bl	8003e3e <HAL_UART_Transmit>
				messageCounter += 1;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <transmit+0x214>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <transmit+0x214>)
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e029      	b.n	8000dc6 <transmit+0x206>
				return;
			}

			if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000d72:	f000 ffa3 	bl	8001cbc <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d82:	d91c      	bls.n	8000dbe <transmit+0x1fe>
				sx1278Reset();
 8000d84:	f7ff ff00 	bl	8000b88 <sx1278Reset>
				uint8_t tmp4[] = "EntryTx failed, timeout reset!\r\n";
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <transmit+0x224>)
 8000d8a:	f107 0408 	add.w	r4, r7, #8
 8000d8e:	461d      	mov	r5, r3
 8000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	7023      	strb	r3, [r4, #0]
				size_t len4 = strlen(tmp4);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff f9d5 	bl	8000150 <strlen>
 8000da6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				HAL_UART_Transmit(&huart1, tmp4, len4, 100);
 8000daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f107 0108 	add.w	r1, r7, #8
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <transmit+0x210>)
 8000db8:	f003 f841 	bl	8003e3e <HAL_UART_Transmit>
 8000dbc:	e003      	b.n	8000dc6 <transmit+0x206>

				return;
			}

			HAL_Delay(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 ff86 	bl	8001cd0 <HAL_Delay>
			if (SX1278_hw_GetDIO0(loraTx->hw)) {
 8000dc4:	e793      	b.n	8000cee <transmit+0x12e>
		}
		loraTx->operatingMode = readMode(loraTx);
	}
}
 8000dc6:	37a0      	adds	r7, #160	; 0xa0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}
 8000dcc:	08004af0 	.word	0x08004af0
 8000dd0:	20000170 	.word	0x20000170
 8000dd4:	20000240 	.word	0x20000240
 8000dd8:	08004ac4 	.word	0x08004ac4
 8000ddc:	08004b1c 	.word	0x08004b1c
 8000de0:	08004ad4 	.word	0x08004ad4
 8000de4:	08004b30 	.word	0x08004b30

08000de8 <setRxBaseParameters>:

void setRxBaseParameters(SX1278_t *loraRx) {
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

	uint8_t dio0 = DIO0_RX_DONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	75fb      	strb	r3, [r7, #23]
	uint8_t dio1 = DIO1_RX_TIMEOUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	75bb      	strb	r3, [r7, #22]
	uint8_t dio2 = DIO2_FHSS_CHANGE_CHANNEL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	757b      	strb	r3, [r7, #21]
	uint8_t dio3 = DIO3_VALID_HEADER;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	753b      	strb	r3, [r7, #20]
	////////////////////////////////////////
	uint8_t rxTimeoutMask = 0x00 | (MASK_ENABLE << 7);
 8000e00:	2300      	movs	r3, #0
 8000e02:	74fb      	strb	r3, [r7, #19]
	uint8_t rxDoneMask = 0x00 | (MASK_ENABLE << 6);
 8000e04:	2300      	movs	r3, #0
 8000e06:	74bb      	strb	r3, [r7, #18]
	uint8_t payloadCrcErrorMask = 0x00 | (MASK_DISABLE << 5);
 8000e08:	2320      	movs	r3, #32
 8000e0a:	747b      	strb	r3, [r7, #17]
	uint8_t validHeaderMask = 0x00 | (MASK_DISABLE << 4);
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	743b      	strb	r3, [r7, #16]
	uint8_t txDoneMask = 0x00 | (MASK_DISABLE << 3);
 8000e10:	2308      	movs	r3, #8
 8000e12:	73fb      	strb	r3, [r7, #15]
	uint8_t cadDoneMask = 0x00 | (MASK_DISABLE << 2);
 8000e14:	2304      	movs	r3, #4
 8000e16:	73bb      	strb	r3, [r7, #14]
	uint8_t fhssChangeChannelMask = 0x00 | (MASK_DISABLE << 1);
 8000e18:	2302      	movs	r3, #2
 8000e1a:	737b      	strb	r3, [r7, #13]
	uint8_t cadDetectedMask = 0x00 | (MASK_DISABLE << 0);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	733b      	strb	r3, [r7, #12]

	loraRx->frequency = UPLINK_FREQ;
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	a333      	add	r3, pc, #204	; (adr r3, 8000ef0 <setRxBaseParameters+0x108>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	e9c1 2302 	strd	r2, r3, [r1, #8]
	loraRx->power = SX1278_POWER_17DBM;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	22fc      	movs	r2, #252	; 0xfc
 8000e30:	741a      	strb	r2, [r3, #16]
	loraRx->LoRa_SF = SF_10;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	220a      	movs	r2, #10
 8000e36:	745a      	strb	r2, [r3, #17]
	loraRx->LoRa_BW = LORABW_62_5KHZ;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	749a      	strb	r2, [r3, #18]
	loraRx->LoRa_CR = LORA_CR_4_6;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	74da      	strb	r2, [r3, #19]
	loraRx->LoRa_CRC_sum = CRC_ENABLE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	751a      	strb	r2, [r3, #20]
	loraRx->syncWord = LORAWAN;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2234      	movs	r2, #52	; 0x34
 8000e4e:	759a      	strb	r2, [r3, #22]
	loraRx->ocp = OVERCURRENTPROTECT;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	220b      	movs	r2, #11
 8000e54:	75da      	strb	r2, [r3, #23]
	loraRx->lnaGain = LNAGAIN;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2223      	movs	r2, #35	; 0x23
 8000e5a:	761a      	strb	r2, [r3, #24]
	loraRx->AgcAutoOn = LNA_SET_BY_AGC;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	765a      	strb	r2, [r3, #25]
	loraRx->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2208      	movs	r2, #8
 8000e66:	769a      	strb	r2, [r3, #26]
	loraRx->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	771a      	strb	r2, [r3, #28]
	loraRx->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2208      	movs	r2, #8
 8000e72:	775a      	strb	r2, [r3, #29]
	loraRx->dioConfig = dio0 | dio1 | dio2 | dio3;
 8000e74:	7dfa      	ldrb	r2, [r7, #23]
 8000e76:	7dbb      	ldrb	r3, [r7, #22]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	7d7b      	ldrb	r3, [r7, #21]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	7d3b      	ldrb	r3, [r7, #20]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	77da      	strb	r2, [r3, #31]
	loraRx->flagsMode = rxTimeoutMask | rxDoneMask | payloadCrcErrorMask;
 8000e8c:	7cfa      	ldrb	r2, [r7, #19]
 8000e8e:	7cbb      	ldrb	r3, [r7, #18]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	7c7b      	ldrb	r3, [r7, #17]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
	loraRx->flagsMode |= validHeaderMask | txDoneMask | cadDoneMask;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ea6:	7c39      	ldrb	r1, [r7, #16]
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	b2d9      	uxtb	r1, r3
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
	loraRx->flagsMode |= fhssChangeChannelMask | cadDetectedMask;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ec4:	7b79      	ldrb	r1, [r7, #13]
 8000ec6:	7b3b      	ldrb	r3, [r7, #12]
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f883 2020 	strb.w	r2, [r3, #32]
	loraRx->fhssValue = HOPS_PERIOD;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	779a      	strb	r2, [r3, #30]
	loraRx->packetLength = SX1278_MAX_PACKET;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	755a      	strb	r2, [r3, #21]
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	f3af 8000 	nop.w
 8000ef0:	0a21fe80 	.word	0x0a21fe80
 8000ef4:	00000000 	.word	0x00000000

08000ef8 <saveRx>:

void saveRx(SX1278_t *module) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000f00:	2100      	movs	r1, #0
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fc5f 	bl	80007c6 <updateLoraLowFreq>
	HAL_Delay(15);
 8000f08:	200f      	movs	r0, #15
 8000f0a:	f000 fee1 	bl	8001cd0 <HAL_Delay>
	setRFFrequency(module);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fb28 	bl	8000564 <setRFFrequency>
	setLORAWAN(module);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fb79 	bl	800060c <setLORAWAN>
	setOutputPower(module);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fb64 	bl	80005e8 <setOutputPower>
	setOvercurrentProtect(module);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fb85 	bl	8000630 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f103 0218 	add.w	r2, r3, #24
 8000f32:	2301      	movs	r3, #1
 8000f34:	210c      	movs	r1, #12
 8000f36:	f7ff fac1 	bl	80004bc <writeRegister>
	if (module->LoRa_SF == SF_6) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7c5b      	ldrb	r3, [r3, #17]
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d10a      	bne.n	8000f58 <saveRx+0x60>
		module->headerMode = IMPLICIT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x03;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	76da      	strb	r2, [r3, #27]
		setDetectionParameters(module);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fbf6 	bl	8000742 <setDetectionParameters>
 8000f56:	e006      	b.n	8000f66 <saveRx+0x6e>
	} else {
		module->headerMode = EXPLICIT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		module->symbTimeoutMsb = 0x00;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	76da      	strb	r2, [r3, #27]
	}
	setReModemConfig(module);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fb9e 	bl	80006a8 <setReModemConfig>
	setPreambleParameters(module);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff fb71 	bl	8000654 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1); //RegHopPeriod NO FHSS
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f103 021e 	add.w	r2, r3, #30
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2124      	movs	r1, #36	; 0x24
 8000f82:	f7ff fa9b 	bl	80004bc <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f103 021f 	add.w	r2, r3, #31
 8000f92:	2301      	movs	r3, #1
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	f7ff fa91 	bl	80004bc <writeRegister>
	clearIrqFlags(module);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fc2f 	bl	80007fe <clearIrqFlags>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1); //Open TxDone interrupt
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f103 0220 	add.w	r2, r3, #32
 8000fac:	2301      	movs	r3, #1
 8000fae:	2111      	movs	r1, #17
 8000fb0:	f7ff fa84 	bl	80004bc <writeRegister>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <setRxParameters>:

void setRxParameters(SX1278_t *module) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	updateLoraLowFreq(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fbfd 	bl	80007c6 <updateLoraLowFreq>
	uint8_t cmd = module->packetLength;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7d5b      	ldrb	r3, [r3, #21]
 8000fd0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000fd8:	f107 020f 	add.w	r2, r7, #15
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2122      	movs	r1, #34	; 0x22
 8000fe0:	f7ff fa6c 	bl	80004bc <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000fea:	210f      	movs	r1, #15
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa3b 	bl	8000468 <readRegister>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8000ffc:	f107 020e 	add.w	r2, r7, #14
 8001000:	2301      	movs	r3, #1
 8001002:	210d      	movs	r1, #13
 8001004:	f7ff fa5a 	bl	80004bc <writeRegister>
	module->packetLength = readRegister(module->spi, LR_RegPayloadLength);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800100e:	2122      	movs	r1, #34	; 0x22
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa29 	bl	8000468 <readRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	755a      	strb	r2, [r3, #21]
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <read>:

void read(UART_HandleTypeDef *huart1, SX1278_t *loraRx) {
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	if (loraRx->status == UNKNOW) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	2b00      	cmp	r3, #0
 800103a:	d123      	bne.n	8001084 <read+0x5c>
		uint8_t tmp[] = "Configuring Master LoRa module: Rx Mode\r\n";
 800103c:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <read+0x1cc>)
 800103e:	f107 0408 	add.w	r4, r7, #8
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	c403      	stmia	r4!, {r0, r1}
 8001052:	8022      	strh	r2, [r4, #0]
		size_t len = strlen(tmp);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f879 	bl	8000150 <strlen>
 800105e:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_UART_Transmit(&*huart1, tmp, len, 100);
 8001060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 0108 	add.w	r1, r7, #8
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f002 fee7 	bl	8003e3e <HAL_UART_Transmit>
		setRxBaseParameters(&*loraRx);
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff feb9 	bl	8000de8 <setRxBaseParameters>
		saveRx(loraRx);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f7ff ff3e 	bl	8000ef8 <saveRx>
		loraRx->status = RX_READY;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	if (loraRx->status == RX_READY) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800108a:	2b02      	cmp	r3, #2
 800108c:	d109      	bne.n	80010a2 <read+0x7a>
		memset(loraRx->buffer, 0, SX1278_MAX_PACKET);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3325      	adds	r3, #37	; 0x25
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f866 	bl	8004168 <memset>
		setRxParameters(loraRx);
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f7ff ff8d 	bl	8000fbc <setRxParameters>
	}
	updateLoraLowFreq(&*loraRx, RX_SINGLE);
 80010a2:	2106      	movs	r1, #6
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f7ff fb8e 	bl	80007c6 <updateLoraLowFreq>
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 80010aa:	e02b      	b.n	8001104 <read+0xdc>
		uint8_t flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80010b2:	2112      	movs	r1, #18
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9d7 	bl	8000468 <readRegister>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		if (flags && (MASK_DISABLE << 7)) {
 80010c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01d      	beq.n	8001104 <read+0xdc>
			uint8_t cmd = flags | (1 << 7);
 80010c8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80010cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			writeRegister(loraRx->spi, LR_RegIrqFlags, &cmd, 1);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 80010dc:	f107 0233 	add.w	r2, r7, #51	; 0x33
 80010e0:	2301      	movs	r3, #1
 80010e2:	2112      	movs	r1, #18
 80010e4:	f7ff f9ea 	bl	80004bc <writeRegister>
			flags = readRegister(loraRx->spi, LR_RegIrqFlags);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80010ee:	2112      	movs	r1, #18
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9b9 	bl	8000468 <readRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			updateLoraLowFreq(&*loraRx, RX_SINGLE);
 80010fc:	2106      	movs	r1, #6
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f7ff fb61 	bl	80007c6 <updateLoraLowFreq>
	while (!SX1278_hw_GetDIO0(loraRx->hw)) {
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fb8b 	bl	8000824 <SX1278_hw_GetDIO0>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0cb      	beq.n	80010ac <read+0x84>
		}
	} //if(Get_NIRQ()) //Packet send over
	loraRx->operatingMode = readMode(loraRx);
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f7ff fb43 	bl	80007a0 <readMode>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraRx->packetLength = readRegister(loraRx->spi, LR_RegRxNbBytes); //Number for received bytes
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800112a:	2113      	movs	r1, #19
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f99b 	bl	8000468 <readRegister>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	755a      	strb	r2, [r3, #21]
	uint8_t addr = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8001140:	2200      	movs	r2, #0
 8001142:	2101      	movs	r1, #1
 8001144:	482c      	ldr	r0, [pc, #176]	; (80011f8 <read+0x1d0>)
 8001146:	f001 fa94 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fdc0 	bl	8001cd0 <HAL_Delay>
	HAL_SPI_Transmit(loraRx->spi, &addr, 1, 100);  // send address
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001156:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	2201      	movs	r2, #1
 800115e:	f002 f939 	bl	80033d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(loraRx->spi, loraRx->buffer, loraRx->packetLength, 100); // receive 6 bytes data
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7d5b      	ldrb	r3, [r3, #21]
 8001172:	b29a      	uxth	r2, r3
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	f002 fa69 	bl	800364c <HAL_SPI_Receive>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fda8 	bl	8001cd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	481c      	ldr	r0, [pc, #112]	; (80011f8 <read+0x1d0>)
 8001186:	f001 fa74 	bl	8002672 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(huart1, loraRx->buffer, loraRx->packetLength, 100);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	7d5b      	ldrb	r3, [r3, #21]
 8001194:	b29a      	uxth	r2, r3
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f002 fe50 	bl	8003e3e <HAL_UART_Transmit>
	clearIrqFlags(loraRx); //Clear irq
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff fb2d 	bl	80007fe <clearIrqFlags>
	uint8_t tmp[] = " -> Reception OK\r\n";
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <read+0x1d4>)
 80011a6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80011aa:	461d      	mov	r5, r3
 80011ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	8022      	strh	r2, [r4, #0]
 80011b6:	3402      	adds	r4, #2
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	7023      	strb	r3, [r4, #0]
	uint16_t len = strlen(tmp);
 80011bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7fe ffc5 	bl	8000150 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit(huart1, tmp, len, 100);
 80011cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80011d0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f002 fe31 	bl	8003e3e <HAL_UART_Transmit>
	loraRx->operatingMode = readMode(loraRx);
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f7ff fadf 	bl	80007a0 <readMode>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80011ec:	bf00      	nop
 80011ee:	3750      	adds	r7, #80	; 0x50
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bdb0      	pop	{r4, r5, r7, pc}
 80011f4:	08004b54 	.word	0x08004b54
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	08004b80 	.word	0x08004b80

08001200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8001206:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001208:	f000 fd00 	bl	8001c0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800120c:	f000 f8c0 	bl	8001390 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001210:	f000 fa4c 	bl	80016ac <MX_GPIO_Init>
	MX_I2C1_Init();
 8001214:	f000 f968 	bl	80014e8 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001218:	f000 f994 	bl	8001544 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800121c:	f000 f9c8 	bl	80015b0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001220:	f000 f9f0 	bl	8001604 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001224:	f000 fa18 	bl	8001658 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8001228:	f000 f90c 	bl	8001444 <MX_ADC1_Init>
	MX_CRC_Init();
 800122c:	f000 f948 	bl	80014c0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	ledInit(&led);
 8001230:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fb0d 	bl	8000854 <ledInit>

	SX1278_hw_t lora_hw;
	SX1278_t loraTx, loraRx;
	lora_ptr = &loraTx;
 800123a:	4a51      	ldr	r2, [pc, #324]	; (8001380 <main+0x180>)
 800123c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001240:	6013      	str	r3, [r2, #0]
	lora_ptr = &loraRx;
 8001242:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <main+0x180>)
 8001244:	463b      	mov	r3, r7
 8001246:	6013      	str	r3, [r2, #0]
	 } else {
	 printf("Mode: Slave\r\n");
	 HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	 }
	 */
	lora_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <main+0x184>)
 800124a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	lora_hw.dio0.pin = LORA_BUSSY_Pin;
 800124e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001252:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	lora_hw.nss.port = LORA_NSS_GPIO_Port;
 8001256:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <main+0x184>)
 8001258:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	lora_hw.nss.pin = LORA_NSS_Pin;
 800125c:	2301      	movs	r3, #1
 800125e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	lora_hw.reset.port = LORA_RST_GPIO_Port;
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <main+0x184>)
 8001264:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	lora_hw.reset.pin = LORA_RST_Pin;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	loraTx.hw = &lora_hw;
 800126e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001272:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001276:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800127a:	601a      	str	r2, [r3, #0]
	loraRx.hw = &lora_hw;
 800127c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001280:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001284:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001288:	601a      	str	r2, [r3, #0]
	loraTx.spi = &hspi1;
 800128a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800128e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <main+0x188>)
 8001294:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	loraRx.spi = &hspi1;
 8001298:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800129c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80012a0:	4a39      	ldr	r2, [pc, #228]	; (8001388 <main+0x188>)
 80012a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2101      	movs	r1, #1
 80012aa:	4836      	ldr	r0, [pc, #216]	; (8001384 <main+0x184>)
 80012ac:	f001 f9e1 	bl	8002672 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2102      	movs	r1, #2
 80012b4:	4833      	ldr	r0, [pc, #204]	; (8001384 <main+0x184>)
 80012b6:	f001 f9dc 	bl	8002672 <HAL_GPIO_WritePin>
	loraTx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 80012ba:	2101      	movs	r1, #1
 80012bc:	4832      	ldr	r0, [pc, #200]	; (8001388 <main+0x188>)
 80012be:	f7ff f8d3 	bl	8000468 <readRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80012ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80012ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraRx.operatingMode = readRegister(&hspi1, LR_RegOpMode);
 80012d2:	2101      	movs	r1, #1
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <main+0x188>)
 80012d6:	f7ff f8c7 	bl	8000468 <readRegister>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80012e2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80012e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	loraTx.status = UNKNOW;
 80012ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80012ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	loraRx.status = UNKNOW;
 80012f8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80012fc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bool TX_ENABLE = true;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
	bool RX_ENABLE = false;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 329a 	strb.w	r3, [r7, #666]	; 0x29a
	int counter = HAL_GetTick();
 8001312:	f000 fcd3 	bl	8001cbc <HAL_GetTick>
 8001316:	4603      	mov	r3, r0
 8001318:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (TX_ENABLE) {
 800131c:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8001320:	2b00      	cmp	r3, #0
 8001322:	d017      	beq.n	8001354 <main+0x154>
			TX_MODE_ON_LED();
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <main+0x184>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4a16      	ldr	r2, [pc, #88]	; (8001384 <main+0x184>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	60d3      	str	r3, [r2, #12]
			if (HAL_GetTick() - counter > 1) {
 8001330:	f000 fcc4 	bl	8001cbc <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d909      	bls.n	8001354 <main+0x154>
				counter = HAL_GetTick();
 8001340:	f000 fcbc 	bl	8001cbc <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
				transmit(&loraTx);
 800134a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fc36 	bl	8000bc0 <transmit>
			}
		}
		if (RX_ENABLE) {
 8001354:	f897 329a 	ldrb.w	r3, [r7, #666]	; 0x29a
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <main+0x172>
			RX_MODE_ON_LED();
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <main+0x184>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <main+0x184>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	60d3      	str	r3, [r2, #12]
			read(&huart1, &loraRx);
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <main+0x18c>)
 800136e:	f7ff fe5b 	bl	8001028 <read>
		}

		led_enable_kalive(&led);
 8001372:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fa9e 	bl	80008b8 <led_enable_kalive>
		if (TX_ENABLE) {
 800137c:	e7ce      	b.n	800131c <main+0x11c>
 800137e:	bf00      	nop
 8001380:	2000023c 	.word	0x2000023c
 8001384:	40010c00 	.word	0x40010c00
 8001388:	20000118 	.word	0x20000118
 800138c:	20000170 	.word	0x20000170

08001390 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	; 0x50
 8001394:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fee2 	bl	8004168 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ce:	2301      	movs	r3, #1
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80013dc:	2300      	movs	r3, #0
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 faa1 	bl	800292c <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x64>
		Error_Handler();
 80013f0:	f000 f9a8 	bl	8001744 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001404:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fd0d 	bl	8002e30 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x90>
		Error_Handler();
 800141c:	f000 f992 	bl	8001744 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001420:	2302      	movs	r3, #2
 8001422:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fe98 	bl	8003160 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xaa>
		Error_Handler();
 8001436:	f000 f985 	bl	8001744 <Error_Handler>
	}
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	; 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_ADC1_Init+0x74>)
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <MX_ADC1_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_ADC1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_ADC1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_ADC1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_ADC1_Init+0x74>)
 800146e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001472:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_ADC1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_ADC1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_ADC1_Init+0x74>)
 8001482:	f000 fc49 	bl	8001d18 <HAL_ADC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800148c:	f000 f95a 	bl	8001744 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_ADC1_Init+0x74>)
 80014a2:	f000 fd11 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80014ac:	f000 f94a 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000008c 	.word	0x2000008c
 80014bc:	40012400 	.word	0x40012400

080014c0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_CRC_Init+0x20>)
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <MX_CRC_Init+0x24>)
 80014c8:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_CRC_Init+0x20>)
 80014cc:	f000 ff19 	bl	8002302 <HAL_CRC_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_CRC_Init+0x1a>
		Error_Handler();
 80014d6:	f000 f935 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000bc 	.word	0x200000bc
 80014e4:	40023000 	.word	0x40023000

080014e8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C1_Init+0x50>)
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <MX_I2C1_Init+0x54>)
 80014f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C1_Init+0x50>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_I2C1_Init+0x58>)
 80014f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_I2C1_Init+0x50>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_I2C1_Init+0x50>)
 8001526:	f001 f8bd 	bl	80026a4 <HAL_I2C_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001530:	f000 f908 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200000c4 	.word	0x200000c4
 800153c:	40005400 	.word	0x40005400
 8001540:	000186a0 	.word	0x000186a0

08001544 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_SPI1_Init+0x64>)
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <MX_SPI1_Init+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001554:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001578:	2218      	movs	r2, #24
 800157a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI1_Init+0x64>)
 8001596:	f001 fe99 	bl	80032cc <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80015a0:	f000 f8d0 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000118 	.word	0x20000118
 80015ac:	40013000 	.word	0x40013000

080015b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f002 fbdc 	bl	8003da4 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80015f2:	f000 f8a7 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000170 	.word	0x20000170
 8001600:	40013800 	.word	0x40013800

08001604 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f002 fbb2 	bl	8003da4 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001646:	f000 f87d 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001b4 	.word	0x200001b4
 8001654:	40004400 	.word	0x40004400

08001658 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART3_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART3_UART_Init+0x4c>)
 8001690:	f002 fb88 	bl	8003da4 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800169a:	f000 f853 	bl	8001744 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001f8 	.word	0x200001f8
 80016a8:	40004800 	.word	0x40004800

080016ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_GPIO_Init+0x90>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <MX_GPIO_Init+0x90>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_GPIO_Init+0x90>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_GPIO_Init+0x90>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a17      	ldr	r2, [pc, #92]	; (800173c <MX_GPIO_Init+0x90>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_GPIO_Init+0x90>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_GPIO_Init+0x90>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a11      	ldr	r2, [pc, #68]	; (800173c <MX_GPIO_Init+0x90>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_GPIO_Init+0x90>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001708:	2200      	movs	r2, #0
 800170a:	f247 313b 	movw	r1, #29499	; 0x733b
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_GPIO_Init+0x94>)
 8001710:	f000 ffaf 	bl	8002672 <HAL_GPIO_WritePin>
					| RS485_DE_Pin | BUZZER_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LED3_Pin LED2_Pin LED1_Pin
	 RS485_DE_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 8001714:	f247 333b 	movw	r3, #29499	; 0x733b
 8001718:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LED3_Pin | LED2_Pin | LED1_Pin
			| RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2302      	movs	r3, #2
 8001724:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_GPIO_Init+0x94>)
 800172e:	f000 fe05 	bl	800233c <HAL_GPIO_Init>

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00

08001744 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_ADC_MspInit+0x6c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d121      	bne.n	8001818 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_ADC_MspInit+0x70>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001804:	2313      	movs	r3, #19
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_ADC_MspInit+0x74>)
 8001814:	f000 fd92 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40012400 	.word	0x40012400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_CRC_MspInit+0x34>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10b      	bne.n	8001856 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_CRC_MspInit+0x38>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_CRC_MspInit+0x38>)
 8001844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001848:	6153      	str	r3, [r2, #20]
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_CRC_MspInit+0x38>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40023000 	.word	0x40023000
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_I2C_MspInit+0x70>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d123      	bne.n	80018d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_I2C_MspInit+0x74>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_I2C_MspInit+0x74>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_I2C_MspInit+0x74>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <HAL_I2C_MspInit+0x78>)
 80018b4:	f000 fd42 	bl	800233c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c2:	61d3      	str	r3, [r2, #28]
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_I2C_MspInit+0x74>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010c00 	.word	0x40010c00

080018e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_SPI_MspInit+0x88>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d12f      	bne.n	8001964 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_SPI_MspInit+0x8c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001934:	23a0      	movs	r3, #160	; 0xa0
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <HAL_SPI_MspInit+0x90>)
 8001948:	f000 fcf8 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <HAL_SPI_MspInit+0x90>)
 8001960:	f000 fcec 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a53      	ldr	r2, [pc, #332]	; (8001ae0 <HAL_UART_MspInit+0x168>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d132      	bne.n	80019fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001998:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 800199e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 80019c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	4619      	mov	r1, r3
 80019dc:	4842      	ldr	r0, [pc, #264]	; (8001ae8 <HAL_UART_MspInit+0x170>)
 80019de:	f000 fcad 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 80019e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4619      	mov	r1, r3
 80019f6:	483c      	ldr	r0, [pc, #240]	; (8001ae8 <HAL_UART_MspInit+0x170>)
 80019f8:	f000 fca0 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019fc:	e06c      	b.n	8001ad8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <HAL_UART_MspInit+0x174>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d130      	bne.n	8001a6a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a12:	61d3      	str	r3, [r2, #28]
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <HAL_UART_MspInit+0x170>)
 8001a4c:	f000 fc76 	bl	800233c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	4619      	mov	r1, r3
 8001a62:	4821      	ldr	r0, [pc, #132]	; (8001ae8 <HAL_UART_MspInit+0x170>)
 8001a64:	f000 fc6a 	bl	800233c <HAL_GPIO_Init>
}
 8001a68:	e036      	b.n	8001ad8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <HAL_UART_MspInit+0x178>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d131      	bne.n	8001ad8 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7e:	61d3      	str	r3, [r2, #28]
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_UART_MspInit+0x16c>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480e      	ldr	r0, [pc, #56]	; (8001af4 <HAL_UART_MspInit+0x17c>)
 8001aba:	f000 fc3f 	bl	800233c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8001abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4808      	ldr	r0, [pc, #32]	; (8001af4 <HAL_UART_MspInit+0x17c>)
 8001ad4:	f000 fc32 	bl	800233c <HAL_GPIO_Init>
}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40004400 	.word	0x40004400
 8001af0:	40004800 	.word	0x40004800
 8001af4:	40010c00 	.word	0x40010c00

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f8ab 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f002 facc 	bl	8004114 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20005000 	.word	0x20005000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	20000260 	.word	0x20000260

08001bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffe5 	bl	8001bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f002 fa99 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff fb07 	bl	8001200 <main>
  bx lr
 8001bf2:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bfc:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8001c00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c04:	2000025c 	.word	0x2000025c

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fb3d 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fd92 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fb47 	bl	80022ea <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fb1d 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000248 	.word	0x20000248

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000248 	.word	0x20000248

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0be      	b.n	8001eb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fd2c 	bl	80017b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f9ab 	bl	80020b8 <ADC_ConversionStop_Disable>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 8099 	bne.w	8001ea6 <HAL_ADC_Init+0x18e>
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8095 	bne.w	8001ea6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d84:	f023 0302 	bic.w	r3, r3, #2
 8001d88:	f043 0202 	orr.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7b1b      	ldrb	r3, [r3, #12]
 8001d9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	d003      	beq.n	8001dba <HAL_ADC_Init+0xa2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d102      	bne.n	8001dc0 <HAL_ADC_Init+0xa8>
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_Init+0xaa>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7d1b      	ldrb	r3, [r3, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d119      	bne.n	8001e04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	035a      	lsls	r2, r3, #13
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e00b      	b.n	8001e04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_ADC_Init+0x1a8>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e34:	d003      	beq.n	8001e3e <HAL_ADC_Init+0x126>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d104      	bne.n	8001e48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_ADC_Init+0x1ac>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e82:	e018      	b.n	8001eb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f023 0312 	bic.w	r3, r3, #18
 8001e8c:	f043 0210 	orr.w	r2, r3, #16
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea4:	e007      	b.n	8001eb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ec4:	ff1f0efe 	.word	0xff1f0efe

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x20>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e0dc      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1da>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d81c      	bhi.n	8001f32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4019      	ands	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b05      	subs	r3, #5
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f30:	e03c      	b.n	8001fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d81c      	bhi.n	8001f74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b23      	subs	r3, #35	; 0x23
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4019      	ands	r1, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b23      	subs	r3, #35	; 0x23
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
 8001f72:	e01b      	b.n	8001fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b41      	subs	r3, #65	; 0x41
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4019      	ands	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	; 0x41
 8001fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b09      	cmp	r3, #9
 8001fb2:	d91c      	bls.n	8001fee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b1e      	subs	r3, #30
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	4019      	ands	r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6898      	ldr	r0, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b1e      	subs	r3, #30
 8001fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	e019      	b.n	8002022 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6919      	ldr	r1, [r3, #16]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6898      	ldr	r0, [r3, #8]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b10      	cmp	r3, #16
 8002028:	d003      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800202e:	2b11      	cmp	r3, #17
 8002030:	d132      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d125      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d126      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002058:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b10      	cmp	r3, #16
 8002060:	d11a      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002078:	e002      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3b01      	subs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <HAL_ADC_ConfigChannel+0x1b2>
 8002086:	e007      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40012400 	.word	0x40012400
 80020b0:	20000000 	.word	0x20000000
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d12e      	bne.n	8002130 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020e2:	f7ff fdeb 	bl	8001cbc <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020e8:	e01b      	b.n	8002122 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ea:	f7ff fde7 	bl	8001cbc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d914      	bls.n	8002122 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10d      	bne.n	8002122 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e007      	b.n	8002132 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d0dc      	beq.n	80020ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff90 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff49 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff5e 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff90 	bl	80021f4 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5f 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffb0 	bl	8002258 <SysTick_Config>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e00e      	b.n	8002332 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	795b      	ldrb	r3, [r3, #5]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fa81 	bl	800182c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e169      	b.n	8002624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002350:	2201      	movs	r2, #1
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8158 	bne.w	800261e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a9a      	ldr	r2, [pc, #616]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002378:	4a98      	ldr	r2, [pc, #608]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d875      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800237e:	4a98      	ldr	r2, [pc, #608]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d058      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002384:	4a96      	ldr	r2, [pc, #600]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d86f      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800238a:	4a96      	ldr	r2, [pc, #600]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d052      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002390:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d869      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 8002396:	4a94      	ldr	r2, [pc, #592]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04c      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d863      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023a2:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d046      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 80023a8:	4a90      	ldr	r2, [pc, #576]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d85d      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d82a      	bhi.n	8002408 <HAL_GPIO_Init+0xcc>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d859      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_GPIO_Init+0x80>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002411 	.word	0x08002411
 80023c4:	08002423 	.word	0x08002423
 80023c8:	08002465 	.word	0x08002465
 80023cc:	0800246b 	.word	0x0800246b
 80023d0:	0800246b 	.word	0x0800246b
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	0800246b 	.word	0x0800246b
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	0800246b 	.word	0x0800246b
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	0800246b 	.word	0x0800246b
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	0800246b 	.word	0x0800246b
 80023f8:	0800246b 	.word	0x0800246b
 80023fc:	0800246b 	.word	0x0800246b
 8002400:	08002419 	.word	0x08002419
 8002404:	0800242d 	.word	0x0800242d
 8002408:	4a79      	ldr	r2, [pc, #484]	; (80025f0 <HAL_GPIO_Init+0x2b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e029      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e024      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01f      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e01a      	b.n	800246c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e013      	b.n	800246c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e009      	b.n	800246c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e003      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x130>
          break;
 800246a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d801      	bhi.n	8002476 <HAL_GPIO_Init+0x13a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_GPIO_Init+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d802      	bhi.n	8002488 <HAL_GPIO_Init+0x14c>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x152>
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3b08      	subs	r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	210f      	movs	r1, #15
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b1 	beq.w	800261e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_GPIO_Init+0x2c0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <HAL_GPIO_Init+0x2c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3e      	ldr	r2, [pc, #248]	; (8002604 <HAL_GPIO_Init+0x2c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <HAL_GPIO_Init+0x2cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1e0>
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 800251c:	2304      	movs	r3, #4
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002528:	2300      	movs	r3, #0
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	492f      	ldr	r1, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	492c      	ldr	r1, [pc, #176]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4928      	ldr	r1, [pc, #160]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	491e      	ldr	r1, [pc, #120]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4918      	ldr	r1, [pc, #96]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d021      	beq.n	8002610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
 80025d8:	e021      	b.n	800261e <HAL_GPIO_Init+0x2e2>
 80025da:	bf00      	nop
 80025dc:	10320000 	.word	0x10320000
 80025e0:	10310000 	.word	0x10310000
 80025e4:	10220000 	.word	0x10220000
 80025e8:	10210000 	.word	0x10210000
 80025ec:	10120000 	.word	0x10120000
 80025f0:	10110000 	.word	0x10110000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40011000 	.word	0x40011000
 8002608:	40011400 	.word	0x40011400
 800260c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_GPIO_Init+0x304>)
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4909      	ldr	r1, [pc, #36]	; (8002640 <HAL_GPIO_Init+0x304>)
 800261a:	4013      	ands	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f ae8e 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	372c      	adds	r7, #44	; 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	4613      	mov	r3, r2
 8002680:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002682:	787b      	ldrb	r3, [r7, #1]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800268e:	e003      	b.n	8002698 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e12b      	b.n	800290e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff f8cc 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002708:	f000 fce4 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800270c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a81      	ldr	r2, [pc, #516]	; (8002918 <HAL_I2C_Init+0x274>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d807      	bhi.n	8002728 <HAL_I2C_Init+0x84>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_I2C_Init+0x278>)
 800271c:	4293      	cmp	r3, r2
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e006      	b.n	8002736 <HAL_I2C_Init+0x92>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a7d      	ldr	r2, [pc, #500]	; (8002920 <HAL_I2C_Init+0x27c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0e7      	b.n	800290e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a78      	ldr	r2, [pc, #480]	; (8002924 <HAL_I2C_Init+0x280>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_I2C_Init+0x274>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d802      	bhi.n	8002778 <HAL_I2C_Init+0xd4>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3301      	adds	r3, #1
 8002776:	e009      	b.n	800278c <HAL_I2C_Init+0xe8>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	4a69      	ldr	r2, [pc, #420]	; (8002928 <HAL_I2C_Init+0x284>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800279e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	495c      	ldr	r1, [pc, #368]	; (8002918 <HAL_I2C_Init+0x274>)
 80027a8:	428b      	cmp	r3, r1
 80027aa:	d819      	bhi.n	80027e0 <HAL_I2C_Init+0x13c>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e59      	subs	r1, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c0:	400b      	ands	r3, r1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_I2C_Init+0x138>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e59      	subs	r1, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	e051      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 80027dc:	2304      	movs	r3, #4
 80027de:	e04f      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <HAL_I2C_Init+0x168>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	440b      	add	r3, r1
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e012      	b.n	8002832 <HAL_I2C_Init+0x18e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Init+0x196>
 8002836:	2301      	movs	r3, #1
 8002838:	e022      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10e      	bne.n	8002860 <HAL_I2C_Init+0x1bc>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e58      	subs	r0, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	440b      	add	r3, r1
 8002850:	fbb0 f3f3 	udiv	r3, r0, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285e:	e00f      	b.n	8002880 <HAL_I2C_Init+0x1dc>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	0099      	lsls	r1, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6809      	ldr	r1, [r1, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6911      	ldr	r1, [r2, #16]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	000186a0 	.word	0x000186a0
 800291c:	001e847f 	.word	0x001e847f
 8002920:	003d08ff 	.word	0x003d08ff
 8002924:	431bde83 	.word	0x431bde83
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e272      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8087 	beq.w	8002a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d00c      	beq.n	8002972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002958:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
 8002964:	4b8c      	ldr	r3, [pc, #560]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d10b      	bne.n	800298a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x12c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d168      	bne.n	8002a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e24c      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76>
 8002994:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbc>
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xd4>
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff f958 	bl	8001cbc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff f954 	bl	8001cbc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e200      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe4>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff f944 	bl	8001cbc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f940 	bl	8001cbc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1ec      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x10c>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
 8002a7e:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4939      	ldr	r1, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f8f9 	bl	8001cbc <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f8f5 	bl	8001cbc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4927      	ldr	r1, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_OscConfig+0x270>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8d8 	bl	8001cbc <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b10:	f7ff f8d4 	bl	8001cbc <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e180      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03a      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d019      	beq.n	8002b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff f8b8 	bl	8001cbc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff f8b4 	bl	8001cbc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e160      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 fad8 	bl	8003124 <RCC_Delay>
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff f89e 	bl	8001cbc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b82:	e00f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff f89a 	bl	8001cbc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e146      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	42420000 	.word	0x42420000
 8002ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e9      	bne.n	8002b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a6 	beq.w	8002d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d118      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c02:	f7ff f85b 	bl	8001cbc <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7ff f857 	bl	8001cbc <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e103      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x4c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e02d      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x334>
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	e01c      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x356>
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6213      	str	r3, [r2, #32]
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e00b      	b.n	8002c9a <HAL_RCC_OscConfig+0x36e>
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	f023 0304 	bic.w	r3, r3, #4
 8002c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d015      	beq.n	8002cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f80b 	bl	8001cbc <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff f807 	bl	8001cbc <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b1      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ee      	beq.n	8002caa <HAL_RCC_OscConfig+0x37e>
 8002ccc:	e014      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fff5 	bl	8001cbc <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fff1 	bl	8001cbc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e09b      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ee      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8087 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d061      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d146      	bne.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe ffc5 	bl	8001cbc <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe ffc1 	bl	8001cbc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e06d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4921      	ldr	r1, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a19      	ldr	r1, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	430b      	orrs	r3, r1
 8002d82:	491b      	ldr	r1, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe ff95 	bl	8001cbc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe ff91 	bl	8001cbc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
 8002db4:	e035      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff7e 	bl	8001cbc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe ff7a 	bl	8001cbc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e026      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
 8002de2:	e01e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e019      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d0      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4965      	ldr	r1, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d040      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d115      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e073      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06b      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4936      	ldr	r1, [pc, #216]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fecc 	bl	8001cbc <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fec8 	bl	8001cbc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e053      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d210      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 0207 	bic.w	r2, r3, #7
 8002f66:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1cc>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1d0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fe2a 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08004ba4 	.word	0x08004ba4
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	b490      	push	{r4, r7}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800300c:	1d3c      	adds	r4, r7, #4
 800300e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003014:	f240 2301 	movw	r3, #513	; 0x201
 8003018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800302e:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b04      	cmp	r3, #4
 800303c:	d002      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x40>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d003      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x46>
 8003042:	e02b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003046:	623b      	str	r3, [r7, #32]
      break;
 8003048:	e02b      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3328      	adds	r3, #40	; 0x28
 8003054:	443b      	add	r3, r7
 8003056:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800305a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0c5b      	lsrs	r3, r3, #17
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	3328      	adds	r3, #40	; 0x28
 8003072:	443b      	add	r3, r7
 8003074:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003078:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800307e:	fb03 f202 	mul.w	r2, r3, r2
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e004      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	623b      	str	r3, [r7, #32]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800309e:	623b      	str	r3, [r7, #32]
      break;
 80030a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc90      	pop	{r4, r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08004b94 	.word	0x08004b94
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	003d0900 	.word	0x003d0900

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004bb4 	.word	0x08004bb4

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffde 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08004bb4 	.word	0x08004bb4

08003124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <RCC_Delay+0x34>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <RCC_Delay+0x38>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003140:	bf00      	nop
  }
  while (Delay --);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <RCC_Delay+0x1c>
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	20000000 	.word	0x20000000
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d07d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003180:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a4b      	ldr	r2, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	61d3      	str	r3, [r2, #28]
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d118      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fd7c 	bl	8001cbc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	e008      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe fd78 	bl	8001cbc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e06d      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d027      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003204:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b2c      	ldr	r3, [pc, #176]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fd47 	bl	8001cbc <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fd43 	bl	8001cbc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e036      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4917      	ldr	r1, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	4313      	orrs	r3, r2
 8003264:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	42420440 	.word	0x42420440

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e076      	b.n	80033cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e005      	b.n	8003304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fae0 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1a      	lsrs	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f002 0204 	and.w	r2, r2, #4
 80033aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Transmit+0x22>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e126      	b.n	8003644 <HAL_SPI_Transmit+0x270>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033fe:	f7fe fc5d 	bl	8001cbc <HAL_GetTick>
 8003402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003418:	e10b      	b.n	8003632 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_SPI_Transmit+0x52>
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800342a:	e102      	b.n	8003632 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2203      	movs	r2, #3
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d10f      	bne.n	8003494 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d007      	beq.n	80034b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d14b      	bne.n	8003554 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Transmit+0xf6>
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d13e      	bne.n	8003548 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ee:	e02b      	b.n	8003548 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d112      	bne.n	8003524 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	1c9a      	adds	r2, r3, #2
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	86da      	strh	r2, [r3, #54]	; 0x36
 8003522:	e011      	b.n	8003548 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003524:	f7fe fbca 	bl	8001cbc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d803      	bhi.n	800353c <HAL_SPI_Transmit+0x168>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d102      	bne.n	8003542 <HAL_SPI_Transmit+0x16e>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003546:	e074      	b.n	8003632 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ce      	bne.n	80034f0 <HAL_SPI_Transmit+0x11c>
 8003552:	e04c      	b.n	80035ee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Transmit+0x18e>
 800355c:	8afb      	ldrh	r3, [r7, #22]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d140      	bne.n	80035e4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003588:	e02c      	b.n	80035e4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d113      	bne.n	80035c0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80035be:	e011      	b.n	80035e4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c0:	f7fe fb7c 	bl	8001cbc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d803      	bhi.n	80035d8 <HAL_SPI_Transmit+0x204>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d102      	bne.n	80035de <HAL_SPI_Transmit+0x20a>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035e2:	e026      	b.n	8003632 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1cd      	bne.n	800358a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fbb8 	bl	8003d68 <SPI_EndRxTxTransaction>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e000      	b.n	8003632 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003642:	7ffb      	ldrb	r3, [r7, #31]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003668:	d112      	bne.n	8003690 <HAL_SPI_Receive+0x44>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2204      	movs	r2, #4
 8003676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f8f1 	bl	800386e <HAL_SPI_TransmitReceive>
 800368c:	4603      	mov	r3, r0
 800368e:	e0ea      	b.n	8003866 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_SPI_Receive+0x52>
 800369a:	2302      	movs	r3, #2
 800369c:	e0e3      	b.n	8003866 <HAL_SPI_Receive+0x21a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a6:	f7fe fb09 	bl	8001cbc <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d002      	beq.n	80036be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036bc:	e0ca      	b.n	8003854 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_SPI_Receive+0x7e>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036ce:	e0c1      	b.n	8003854 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2204      	movs	r2, #4
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003716:	d10f      	bne.n	8003738 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003726:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d007      	beq.n	8003756 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d162      	bne.n	8003824 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800375e:	e02e      	b.n	80037be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d115      	bne.n	800379a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f103 020c 	add.w	r2, r3, #12
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003798:	e011      	b.n	80037be <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800379a:	f7fe fa8f 	bl	8001cbc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d803      	bhi.n	80037b2 <HAL_SPI_Receive+0x166>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d102      	bne.n	80037b8 <HAL_SPI_Receive+0x16c>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037bc:	e04a      	b.n	8003854 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1cb      	bne.n	8003760 <HAL_SPI_Receive+0x114>
 80037c8:	e031      	b.n	800382e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d113      	bne.n	8003800 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	b292      	uxth	r2, r2
 80037e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fe:	e011      	b.n	8003824 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fe fa5c 	bl	8001cbc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_Receive+0x1cc>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x1d2>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003822:	e017      	b.n	8003854 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1cd      	bne.n	80037ca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fa46 	bl	8003cc4 <SPI_EndRxTransaction>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	75fb      	strb	r3, [r7, #23]
 8003850:	e000      	b.n	8003854 <HAL_SPI_Receive+0x208>
  }

error :
 8003852:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b08c      	sub	sp, #48	; 0x30
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800387c:	2301      	movs	r3, #1
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x26>
 8003890:	2302      	movs	r3, #2
 8003892:	e18a      	b.n	8003baa <HAL_SPI_TransmitReceive+0x33c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800389c:	f7fe fa0e 	bl	8001cbc <HAL_GetTick>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d00f      	beq.n	80038de <HAL_SPI_TransmitReceive+0x70>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c4:	d107      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x68>
 80038ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d003      	beq.n	80038de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038dc:	e15b      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x82>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x82>
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038f6:	e14e      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b04      	cmp	r3, #4
 8003902:	d003      	beq.n	800390c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2205      	movs	r2, #5
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	887a      	ldrh	r2, [r7, #2]
 8003922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	887a      	ldrh	r2, [r7, #2]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d007      	beq.n	8003960 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003968:	d178      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x10a>
 8003972:	8b7b      	ldrh	r3, [r7, #26]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d166      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800399c:	e053      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d11b      	bne.n	80039e4 <HAL_SPI_TransmitReceive+0x176>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x176>
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d113      	bne.n	80039e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d119      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x1b8>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	b292      	uxth	r2, r2
 8003a08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	1c9a      	adds	r2, r3, #2
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a22:	2301      	movs	r3, #1
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a26:	f7fe f949 	bl	8001cbc <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d807      	bhi.n	8003a46 <HAL_SPI_TransmitReceive+0x1d8>
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d003      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a44:	e0a7      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1a6      	bne.n	800399e <HAL_SPI_TransmitReceive+0x130>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1a1      	bne.n	800399e <HAL_SPI_TransmitReceive+0x130>
 8003a5a:	e07c      	b.n	8003b56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x1fc>
 8003a64:	8b7b      	ldrh	r3, [r7, #26]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d16b      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a90:	e057      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11c      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x26c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x26c>
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d119      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x2ae>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d014      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b1c:	f7fe f8ce 	bl	8001cbc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d803      	bhi.n	8003b34 <HAL_SPI_TransmitReceive+0x2c6>
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x2cc>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b40:	e029      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1a2      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x224>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d19d      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f904 	bl	8003d68 <SPI_EndRxTxTransaction>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b72:	e010      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	e000      	b.n	8003b96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc4:	f7fe f87a 	bl	8001cbc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd4:	f7fe f872 	bl	8001cbc <HAL_GetTick>
 8003bd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	015b      	lsls	r3, r3, #5
 8003be0:	0d1b      	lsrs	r3, r3, #20
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bea:	e054      	b.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d050      	beq.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf4:	f7fe f862 	bl	8001cbc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d902      	bls.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d13d      	bne.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d111      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	d004      	beq.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d107      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c50:	d10f      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e017      	b.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d19b      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d111      	bne.n	8003cfe <SPI_EndRxTransaction+0x3a>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce2:	d004      	beq.n	8003cee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d107      	bne.n	8003cfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d06:	d117      	bne.n	8003d38 <SPI_EndRxTransaction+0x74>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d112      	bne.n	8003d38 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ff49 	bl	8003bb4 <SPI_WaitFlagStateUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01a      	beq.n	8003d5e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e013      	b.n	8003d60 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff ff36 	bl	8003bb4 <SPI_WaitFlagStateUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e000      	b.n	8003d60 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ff18 	bl	8003bb4 <SPI_WaitFlagStateUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e000      	b.n	8003d9c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03f      	b.n	8003e36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fdd4 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	; 0x24
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f905 	bl	8003ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08a      	sub	sp, #40	; 0x28
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d17c      	bne.n	8003f58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_UART_Transmit+0x2c>
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e075      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x3e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e06e      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2221      	movs	r2, #33	; 0x21
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e92:	f7fd ff13 	bl	8001cbc <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Transmit+0x82>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ed0:	e02a      	b.n	8003f28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f840 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e036      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3302      	adds	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e007      	b.n	8003f1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1cf      	bne.n	8003ed2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f810 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f72:	e02c      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d028      	beq.n	8003fce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f82:	f7fd fe9b 	bl	8001cbc <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d21d      	bcs.n	8003fce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e00f      	b.n	8003fee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d0c3      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004032:	f023 030c 	bic.w	r3, r3, #12
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	430b      	orrs	r3, r1
 800403e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <UART_SetConfig+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d103      	bne.n	8004068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7ff f84c 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	e002      	b.n	800406e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7ff f834 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 800406c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009a      	lsls	r2, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <UART_SetConfig+0x118>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	0119      	lsls	r1, r3, #4
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <UART_SetConfig+0x118>)
 80040a6:	fba3 0302 	umull	r0, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c4:	4419      	add	r1, r3
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <UART_SetConfig+0x118>)
 80040de:	fba3 0302 	umull	r0, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2064      	movs	r0, #100	; 0x64
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	; 0x32
 80040f0:	4a07      	ldr	r2, [pc, #28]	; (8004110 <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	440a      	add	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40013800 	.word	0x40013800
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <__errno>:
 8004114:	4b01      	ldr	r3, [pc, #4]	; (800411c <__errno+0x8>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000000c 	.word	0x2000000c

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	2600      	movs	r6, #0
 8004124:	4d0c      	ldr	r5, [pc, #48]	; (8004158 <__libc_init_array+0x38>)
 8004126:	4c0d      	ldr	r4, [pc, #52]	; (800415c <__libc_init_array+0x3c>)
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	f000 fc9c 	bl	8004a6c <_init>
 8004134:	2600      	movs	r6, #0
 8004136:	4d0a      	ldr	r5, [pc, #40]	; (8004160 <__libc_init_array+0x40>)
 8004138:	4c0a      	ldr	r4, [pc, #40]	; (8004164 <__libc_init_array+0x44>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	08004c58 	.word	0x08004c58
 800415c:	08004c58 	.word	0x08004c58
 8004160:	08004c58 	.word	0x08004c58
 8004164:	08004c5c 	.word	0x08004c5c

08004168 <memset>:
 8004168:	4603      	mov	r3, r0
 800416a:	4402      	add	r2, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <siprintf>:
 8004178:	b40e      	push	{r1, r2, r3}
 800417a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800417e:	b500      	push	{lr}
 8004180:	b09c      	sub	sp, #112	; 0x70
 8004182:	ab1d      	add	r3, sp, #116	; 0x74
 8004184:	9002      	str	r0, [sp, #8]
 8004186:	9006      	str	r0, [sp, #24]
 8004188:	9107      	str	r1, [sp, #28]
 800418a:	9104      	str	r1, [sp, #16]
 800418c:	4808      	ldr	r0, [pc, #32]	; (80041b0 <siprintf+0x38>)
 800418e:	4909      	ldr	r1, [pc, #36]	; (80041b4 <siprintf+0x3c>)
 8004190:	f853 2b04 	ldr.w	r2, [r3], #4
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	a902      	add	r1, sp, #8
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	f000 f8fe 	bl	800439c <_svfiprintf_r>
 80041a0:	2200      	movs	r2, #0
 80041a2:	9b02      	ldr	r3, [sp, #8]
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	b01c      	add	sp, #112	; 0x70
 80041a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041ac:	b003      	add	sp, #12
 80041ae:	4770      	bx	lr
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	ffff0208 	.word	0xffff0208

080041b8 <__retarget_lock_acquire_recursive>:
 80041b8:	4770      	bx	lr

080041ba <__retarget_lock_release_recursive>:
 80041ba:	4770      	bx	lr

080041bc <sbrk_aligned>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4e0e      	ldr	r6, [pc, #56]	; (80041f8 <sbrk_aligned+0x3c>)
 80041c0:	460c      	mov	r4, r1
 80041c2:	6831      	ldr	r1, [r6, #0]
 80041c4:	4605      	mov	r5, r0
 80041c6:	b911      	cbnz	r1, 80041ce <sbrk_aligned+0x12>
 80041c8:	f000 fb7e 	bl	80048c8 <_sbrk_r>
 80041cc:	6030      	str	r0, [r6, #0]
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fb79 	bl	80048c8 <_sbrk_r>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	d00a      	beq.n	80041f0 <sbrk_aligned+0x34>
 80041da:	1cc4      	adds	r4, r0, #3
 80041dc:	f024 0403 	bic.w	r4, r4, #3
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d007      	beq.n	80041f4 <sbrk_aligned+0x38>
 80041e4:	1a21      	subs	r1, r4, r0
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 fb6e 	bl	80048c8 <_sbrk_r>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d101      	bne.n	80041f4 <sbrk_aligned+0x38>
 80041f0:	f04f 34ff 	mov.w	r4, #4294967295
 80041f4:	4620      	mov	r0, r4
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	20000254 	.word	0x20000254

080041fc <_malloc_r>:
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	1ccd      	adds	r5, r1, #3
 8004202:	f025 0503 	bic.w	r5, r5, #3
 8004206:	3508      	adds	r5, #8
 8004208:	2d0c      	cmp	r5, #12
 800420a:	bf38      	it	cc
 800420c:	250c      	movcc	r5, #12
 800420e:	2d00      	cmp	r5, #0
 8004210:	4607      	mov	r7, r0
 8004212:	db01      	blt.n	8004218 <_malloc_r+0x1c>
 8004214:	42a9      	cmp	r1, r5
 8004216:	d905      	bls.n	8004224 <_malloc_r+0x28>
 8004218:	230c      	movs	r3, #12
 800421a:	2600      	movs	r6, #0
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4630      	mov	r0, r6
 8004220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004224:	4e2e      	ldr	r6, [pc, #184]	; (80042e0 <_malloc_r+0xe4>)
 8004226:	f000 fb95 	bl	8004954 <__malloc_lock>
 800422a:	6833      	ldr	r3, [r6, #0]
 800422c:	461c      	mov	r4, r3
 800422e:	bb34      	cbnz	r4, 800427e <_malloc_r+0x82>
 8004230:	4629      	mov	r1, r5
 8004232:	4638      	mov	r0, r7
 8004234:	f7ff ffc2 	bl	80041bc <sbrk_aligned>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	4604      	mov	r4, r0
 800423c:	d14d      	bne.n	80042da <_malloc_r+0xde>
 800423e:	6834      	ldr	r4, [r6, #0]
 8004240:	4626      	mov	r6, r4
 8004242:	2e00      	cmp	r6, #0
 8004244:	d140      	bne.n	80042c8 <_malloc_r+0xcc>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	4631      	mov	r1, r6
 800424a:	4638      	mov	r0, r7
 800424c:	eb04 0803 	add.w	r8, r4, r3
 8004250:	f000 fb3a 	bl	80048c8 <_sbrk_r>
 8004254:	4580      	cmp	r8, r0
 8004256:	d13a      	bne.n	80042ce <_malloc_r+0xd2>
 8004258:	6821      	ldr	r1, [r4, #0]
 800425a:	3503      	adds	r5, #3
 800425c:	1a6d      	subs	r5, r5, r1
 800425e:	f025 0503 	bic.w	r5, r5, #3
 8004262:	3508      	adds	r5, #8
 8004264:	2d0c      	cmp	r5, #12
 8004266:	bf38      	it	cc
 8004268:	250c      	movcc	r5, #12
 800426a:	4638      	mov	r0, r7
 800426c:	4629      	mov	r1, r5
 800426e:	f7ff ffa5 	bl	80041bc <sbrk_aligned>
 8004272:	3001      	adds	r0, #1
 8004274:	d02b      	beq.n	80042ce <_malloc_r+0xd2>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	442b      	add	r3, r5
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	e00e      	b.n	800429c <_malloc_r+0xa0>
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	1b52      	subs	r2, r2, r5
 8004282:	d41e      	bmi.n	80042c2 <_malloc_r+0xc6>
 8004284:	2a0b      	cmp	r2, #11
 8004286:	d916      	bls.n	80042b6 <_malloc_r+0xba>
 8004288:	1961      	adds	r1, r4, r5
 800428a:	42a3      	cmp	r3, r4
 800428c:	6025      	str	r5, [r4, #0]
 800428e:	bf18      	it	ne
 8004290:	6059      	strne	r1, [r3, #4]
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	bf08      	it	eq
 8004296:	6031      	streq	r1, [r6, #0]
 8004298:	5162      	str	r2, [r4, r5]
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	4638      	mov	r0, r7
 800429e:	f104 060b 	add.w	r6, r4, #11
 80042a2:	f000 fb5d 	bl	8004960 <__malloc_unlock>
 80042a6:	f026 0607 	bic.w	r6, r6, #7
 80042aa:	1d23      	adds	r3, r4, #4
 80042ac:	1af2      	subs	r2, r6, r3
 80042ae:	d0b6      	beq.n	800421e <_malloc_r+0x22>
 80042b0:	1b9b      	subs	r3, r3, r6
 80042b2:	50a3      	str	r3, [r4, r2]
 80042b4:	e7b3      	b.n	800421e <_malloc_r+0x22>
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	bf0c      	ite	eq
 80042bc:	6032      	streq	r2, [r6, #0]
 80042be:	605a      	strne	r2, [r3, #4]
 80042c0:	e7ec      	b.n	800429c <_malloc_r+0xa0>
 80042c2:	4623      	mov	r3, r4
 80042c4:	6864      	ldr	r4, [r4, #4]
 80042c6:	e7b2      	b.n	800422e <_malloc_r+0x32>
 80042c8:	4634      	mov	r4, r6
 80042ca:	6876      	ldr	r6, [r6, #4]
 80042cc:	e7b9      	b.n	8004242 <_malloc_r+0x46>
 80042ce:	230c      	movs	r3, #12
 80042d0:	4638      	mov	r0, r7
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	f000 fb44 	bl	8004960 <__malloc_unlock>
 80042d8:	e7a1      	b.n	800421e <_malloc_r+0x22>
 80042da:	6025      	str	r5, [r4, #0]
 80042dc:	e7de      	b.n	800429c <_malloc_r+0xa0>
 80042de:	bf00      	nop
 80042e0:	20000250 	.word	0x20000250

080042e4 <__ssputs_r>:
 80042e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	688e      	ldr	r6, [r1, #8]
 80042ea:	4682      	mov	sl, r0
 80042ec:	429e      	cmp	r6, r3
 80042ee:	460c      	mov	r4, r1
 80042f0:	4690      	mov	r8, r2
 80042f2:	461f      	mov	r7, r3
 80042f4:	d838      	bhi.n	8004368 <__ssputs_r+0x84>
 80042f6:	898a      	ldrh	r2, [r1, #12]
 80042f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042fc:	d032      	beq.n	8004364 <__ssputs_r+0x80>
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	6909      	ldr	r1, [r1, #16]
 8004302:	3301      	adds	r3, #1
 8004304:	eba5 0901 	sub.w	r9, r5, r1
 8004308:	6965      	ldr	r5, [r4, #20]
 800430a:	444b      	add	r3, r9
 800430c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004314:	106d      	asrs	r5, r5, #1
 8004316:	429d      	cmp	r5, r3
 8004318:	bf38      	it	cc
 800431a:	461d      	movcc	r5, r3
 800431c:	0553      	lsls	r3, r2, #21
 800431e:	d531      	bpl.n	8004384 <__ssputs_r+0xa0>
 8004320:	4629      	mov	r1, r5
 8004322:	f7ff ff6b 	bl	80041fc <_malloc_r>
 8004326:	4606      	mov	r6, r0
 8004328:	b950      	cbnz	r0, 8004340 <__ssputs_r+0x5c>
 800432a:	230c      	movs	r3, #12
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f8ca 3000 	str.w	r3, [sl]
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	464a      	mov	r2, r9
 8004342:	6921      	ldr	r1, [r4, #16]
 8004344:	f000 fade 	bl	8004904 <memcpy>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	6126      	str	r6, [r4, #16]
 8004356:	444e      	add	r6, r9
 8004358:	6026      	str	r6, [r4, #0]
 800435a:	463e      	mov	r6, r7
 800435c:	6165      	str	r5, [r4, #20]
 800435e:	eba5 0509 	sub.w	r5, r5, r9
 8004362:	60a5      	str	r5, [r4, #8]
 8004364:	42be      	cmp	r6, r7
 8004366:	d900      	bls.n	800436a <__ssputs_r+0x86>
 8004368:	463e      	mov	r6, r7
 800436a:	4632      	mov	r2, r6
 800436c:	4641      	mov	r1, r8
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	f000 fad6 	bl	8004920 <memmove>
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	2000      	movs	r0, #0
 8004378:	1b9b      	subs	r3, r3, r6
 800437a:	60a3      	str	r3, [r4, #8]
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	4433      	add	r3, r6
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	e7db      	b.n	800433c <__ssputs_r+0x58>
 8004384:	462a      	mov	r2, r5
 8004386:	f000 fb39 	bl	80049fc <_realloc_r>
 800438a:	4606      	mov	r6, r0
 800438c:	2800      	cmp	r0, #0
 800438e:	d1e1      	bne.n	8004354 <__ssputs_r+0x70>
 8004390:	4650      	mov	r0, sl
 8004392:	6921      	ldr	r1, [r4, #16]
 8004394:	f000 faea 	bl	800496c <_free_r>
 8004398:	e7c7      	b.n	800432a <__ssputs_r+0x46>
	...

0800439c <_svfiprintf_r>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	4698      	mov	r8, r3
 80043a2:	898b      	ldrh	r3, [r1, #12]
 80043a4:	4607      	mov	r7, r0
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	460d      	mov	r5, r1
 80043aa:	4614      	mov	r4, r2
 80043ac:	b09d      	sub	sp, #116	; 0x74
 80043ae:	d50e      	bpl.n	80043ce <_svfiprintf_r+0x32>
 80043b0:	690b      	ldr	r3, [r1, #16]
 80043b2:	b963      	cbnz	r3, 80043ce <_svfiprintf_r+0x32>
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f7ff ff21 	bl	80041fc <_malloc_r>
 80043ba:	6028      	str	r0, [r5, #0]
 80043bc:	6128      	str	r0, [r5, #16]
 80043be:	b920      	cbnz	r0, 80043ca <_svfiprintf_r+0x2e>
 80043c0:	230c      	movs	r3, #12
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e0d1      	b.n	800456e <_svfiprintf_r+0x1d2>
 80043ca:	2340      	movs	r3, #64	; 0x40
 80043cc:	616b      	str	r3, [r5, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9309      	str	r3, [sp, #36]	; 0x24
 80043d2:	2320      	movs	r3, #32
 80043d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d8:	2330      	movs	r3, #48	; 0x30
 80043da:	f04f 0901 	mov.w	r9, #1
 80043de:	f8cd 800c 	str.w	r8, [sp, #12]
 80043e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004588 <_svfiprintf_r+0x1ec>
 80043e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ea:	4623      	mov	r3, r4
 80043ec:	469a      	mov	sl, r3
 80043ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f2:	b10a      	cbz	r2, 80043f8 <_svfiprintf_r+0x5c>
 80043f4:	2a25      	cmp	r2, #37	; 0x25
 80043f6:	d1f9      	bne.n	80043ec <_svfiprintf_r+0x50>
 80043f8:	ebba 0b04 	subs.w	fp, sl, r4
 80043fc:	d00b      	beq.n	8004416 <_svfiprintf_r+0x7a>
 80043fe:	465b      	mov	r3, fp
 8004400:	4622      	mov	r2, r4
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ff6d 	bl	80042e4 <__ssputs_r>
 800440a:	3001      	adds	r0, #1
 800440c:	f000 80aa 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004412:	445a      	add	r2, fp
 8004414:	9209      	str	r2, [sp, #36]	; 0x24
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80a2 	beq.w	8004564 <_svfiprintf_r+0x1c8>
 8004420:	2300      	movs	r3, #0
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442a:	f10a 0a01 	add.w	sl, sl, #1
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	9307      	str	r3, [sp, #28]
 8004432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004436:	931a      	str	r3, [sp, #104]	; 0x68
 8004438:	4654      	mov	r4, sl
 800443a:	2205      	movs	r2, #5
 800443c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004440:	4851      	ldr	r0, [pc, #324]	; (8004588 <_svfiprintf_r+0x1ec>)
 8004442:	f000 fa51 	bl	80048e8 <memchr>
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	b9d8      	cbnz	r0, 8004482 <_svfiprintf_r+0xe6>
 800444a:	06d0      	lsls	r0, r2, #27
 800444c:	bf44      	itt	mi
 800444e:	2320      	movmi	r3, #32
 8004450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004454:	0711      	lsls	r1, r2, #28
 8004456:	bf44      	itt	mi
 8004458:	232b      	movmi	r3, #43	; 0x2b
 800445a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445e:	f89a 3000 	ldrb.w	r3, [sl]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d015      	beq.n	8004492 <_svfiprintf_r+0xf6>
 8004466:	4654      	mov	r4, sl
 8004468:	2000      	movs	r0, #0
 800446a:	f04f 0c0a 	mov.w	ip, #10
 800446e:	9a07      	ldr	r2, [sp, #28]
 8004470:	4621      	mov	r1, r4
 8004472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004476:	3b30      	subs	r3, #48	; 0x30
 8004478:	2b09      	cmp	r3, #9
 800447a:	d94e      	bls.n	800451a <_svfiprintf_r+0x17e>
 800447c:	b1b0      	cbz	r0, 80044ac <_svfiprintf_r+0x110>
 800447e:	9207      	str	r2, [sp, #28]
 8004480:	e014      	b.n	80044ac <_svfiprintf_r+0x110>
 8004482:	eba0 0308 	sub.w	r3, r0, r8
 8004486:	fa09 f303 	lsl.w	r3, r9, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	46a2      	mov	sl, r4
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	e7d2      	b.n	8004438 <_svfiprintf_r+0x9c>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	1d19      	adds	r1, r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	9103      	str	r1, [sp, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbb      	ittet	lt
 800449e:	425b      	neglt	r3, r3
 80044a0:	f042 0202 	orrlt.w	r2, r2, #2
 80044a4:	9307      	strge	r3, [sp, #28]
 80044a6:	9307      	strlt	r3, [sp, #28]
 80044a8:	bfb8      	it	lt
 80044aa:	9204      	strlt	r2, [sp, #16]
 80044ac:	7823      	ldrb	r3, [r4, #0]
 80044ae:	2b2e      	cmp	r3, #46	; 0x2e
 80044b0:	d10c      	bne.n	80044cc <_svfiprintf_r+0x130>
 80044b2:	7863      	ldrb	r3, [r4, #1]
 80044b4:	2b2a      	cmp	r3, #42	; 0x2a
 80044b6:	d135      	bne.n	8004524 <_svfiprintf_r+0x188>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	3402      	adds	r4, #2
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	9203      	str	r2, [sp, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800458c <_svfiprintf_r+0x1f0>
 80044d0:	2203      	movs	r2, #3
 80044d2:	4650      	mov	r0, sl
 80044d4:	7821      	ldrb	r1, [r4, #0]
 80044d6:	f000 fa07 	bl	80048e8 <memchr>
 80044da:	b140      	cbz	r0, 80044ee <_svfiprintf_r+0x152>
 80044dc:	2340      	movs	r3, #64	; 0x40
 80044de:	eba0 000a 	sub.w	r0, r0, sl
 80044e2:	fa03 f000 	lsl.w	r0, r3, r0
 80044e6:	9b04      	ldr	r3, [sp, #16]
 80044e8:	3401      	adds	r4, #1
 80044ea:	4303      	orrs	r3, r0
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f2:	2206      	movs	r2, #6
 80044f4:	4826      	ldr	r0, [pc, #152]	; (8004590 <_svfiprintf_r+0x1f4>)
 80044f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044fa:	f000 f9f5 	bl	80048e8 <memchr>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d038      	beq.n	8004574 <_svfiprintf_r+0x1d8>
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <_svfiprintf_r+0x1f8>)
 8004504:	bb1b      	cbnz	r3, 800454e <_svfiprintf_r+0x1b2>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	3307      	adds	r3, #7
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	3308      	adds	r3, #8
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004514:	4433      	add	r3, r6
 8004516:	9309      	str	r3, [sp, #36]	; 0x24
 8004518:	e767      	b.n	80043ea <_svfiprintf_r+0x4e>
 800451a:	460c      	mov	r4, r1
 800451c:	2001      	movs	r0, #1
 800451e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004522:	e7a5      	b.n	8004470 <_svfiprintf_r+0xd4>
 8004524:	2300      	movs	r3, #0
 8004526:	f04f 0c0a 	mov.w	ip, #10
 800452a:	4619      	mov	r1, r3
 800452c:	3401      	adds	r4, #1
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	4620      	mov	r0, r4
 8004532:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004536:	3a30      	subs	r2, #48	; 0x30
 8004538:	2a09      	cmp	r2, #9
 800453a:	d903      	bls.n	8004544 <_svfiprintf_r+0x1a8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0c5      	beq.n	80044cc <_svfiprintf_r+0x130>
 8004540:	9105      	str	r1, [sp, #20]
 8004542:	e7c3      	b.n	80044cc <_svfiprintf_r+0x130>
 8004544:	4604      	mov	r4, r0
 8004546:	2301      	movs	r3, #1
 8004548:	fb0c 2101 	mla	r1, ip, r1, r2
 800454c:	e7f0      	b.n	8004530 <_svfiprintf_r+0x194>
 800454e:	ab03      	add	r3, sp, #12
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462a      	mov	r2, r5
 8004554:	4638      	mov	r0, r7
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <_svfiprintf_r+0x1fc>)
 8004558:	a904      	add	r1, sp, #16
 800455a:	f3af 8000 	nop.w
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	4606      	mov	r6, r0
 8004562:	d1d6      	bne.n	8004512 <_svfiprintf_r+0x176>
 8004564:	89ab      	ldrh	r3, [r5, #12]
 8004566:	065b      	lsls	r3, r3, #25
 8004568:	f53f af2c 	bmi.w	80043c4 <_svfiprintf_r+0x28>
 800456c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456e:	b01d      	add	sp, #116	; 0x74
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	ab03      	add	r3, sp, #12
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	462a      	mov	r2, r5
 800457a:	4638      	mov	r0, r7
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <_svfiprintf_r+0x1fc>)
 800457e:	a904      	add	r1, sp, #16
 8004580:	f000 f87c 	bl	800467c <_printf_i>
 8004584:	e7eb      	b.n	800455e <_svfiprintf_r+0x1c2>
 8004586:	bf00      	nop
 8004588:	08004c1c 	.word	0x08004c1c
 800458c:	08004c22 	.word	0x08004c22
 8004590:	08004c26 	.word	0x08004c26
 8004594:	00000000 	.word	0x00000000
 8004598:	080042e5 	.word	0x080042e5

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4699      	mov	r9, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	4607      	mov	r7, r0
 80045aa:	4293      	cmp	r3, r2
 80045ac:	bfb8      	it	lt
 80045ae:	4613      	movlt	r3, r2
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b6:	460c      	mov	r4, r1
 80045b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc28      	bgt.n	8004636 <_printf_common+0x9a>
 80045e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e8:	1e13      	subs	r3, r2, #0
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42d      	bmi.n	8004650 <_printf_common+0xb4>
 80045f4:	4649      	mov	r1, r9
 80045f6:	4638      	mov	r0, r7
 80045f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045fc:	47c0      	blx	r8
 80045fe:	3001      	adds	r0, #1
 8004600:	d020      	beq.n	8004644 <_printf_common+0xa8>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	68e5      	ldr	r5, [r4, #12]
 8004606:	f003 0306 	and.w	r3, r3, #6
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf18      	it	ne
 800460e:	2500      	movne	r5, #0
 8004610:	6832      	ldr	r2, [r6, #0]
 8004612:	f04f 0600 	mov.w	r6, #0
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	bf08      	it	eq
 800461a:	1aad      	subeq	r5, r5, r2
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	bf08      	it	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	4293      	cmp	r3, r2
 8004626:	bfc4      	itt	gt
 8004628:	1a9b      	subgt	r3, r3, r2
 800462a:	18ed      	addgt	r5, r5, r3
 800462c:	341a      	adds	r4, #26
 800462e:	42b5      	cmp	r5, r6
 8004630:	d11a      	bne.n	8004668 <_printf_common+0xcc>
 8004632:	2000      	movs	r0, #0
 8004634:	e008      	b.n	8004648 <_printf_common+0xac>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4649      	mov	r1, r9
 800463c:	4638      	mov	r0, r7
 800463e:	47c0      	blx	r8
 8004640:	3001      	adds	r0, #1
 8004642:	d103      	bne.n	800464c <_printf_common+0xb0>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	3501      	adds	r5, #1
 800464e:	e7c4      	b.n	80045da <_printf_common+0x3e>
 8004650:	2030      	movs	r0, #48	; 0x30
 8004652:	18e1      	adds	r1, r4, r3
 8004654:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465e:	4422      	add	r2, r4
 8004660:	3302      	adds	r3, #2
 8004662:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004666:	e7c5      	b.n	80045f4 <_printf_common+0x58>
 8004668:	2301      	movs	r3, #1
 800466a:	4622      	mov	r2, r4
 800466c:	4649      	mov	r1, r9
 800466e:	4638      	mov	r0, r7
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d0e6      	beq.n	8004644 <_printf_common+0xa8>
 8004676:	3601      	adds	r6, #1
 8004678:	e7d9      	b.n	800462e <_printf_common+0x92>
	...

0800467c <_printf_i>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	7e0f      	ldrb	r7, [r1, #24]
 8004682:	4691      	mov	r9, r2
 8004684:	2f78      	cmp	r7, #120	; 0x78
 8004686:	4680      	mov	r8, r0
 8004688:	460c      	mov	r4, r1
 800468a:	469a      	mov	sl, r3
 800468c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800468e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004692:	d807      	bhi.n	80046a4 <_printf_i+0x28>
 8004694:	2f62      	cmp	r7, #98	; 0x62
 8004696:	d80a      	bhi.n	80046ae <_printf_i+0x32>
 8004698:	2f00      	cmp	r7, #0
 800469a:	f000 80d9 	beq.w	8004850 <_printf_i+0x1d4>
 800469e:	2f58      	cmp	r7, #88	; 0x58
 80046a0:	f000 80a4 	beq.w	80047ec <_printf_i+0x170>
 80046a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046ac:	e03a      	b.n	8004724 <_printf_i+0xa8>
 80046ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046b2:	2b15      	cmp	r3, #21
 80046b4:	d8f6      	bhi.n	80046a4 <_printf_i+0x28>
 80046b6:	a101      	add	r1, pc, #4	; (adr r1, 80046bc <_printf_i+0x40>)
 80046b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080046a5 	.word	0x080046a5
 80046c8:	080046a5 	.word	0x080046a5
 80046cc:	080046a5 	.word	0x080046a5
 80046d0:	080046a5 	.word	0x080046a5
 80046d4:	08004729 	.word	0x08004729
 80046d8:	080046a5 	.word	0x080046a5
 80046dc:	080046a5 	.word	0x080046a5
 80046e0:	080046a5 	.word	0x080046a5
 80046e4:	080046a5 	.word	0x080046a5
 80046e8:	08004837 	.word	0x08004837
 80046ec:	08004759 	.word	0x08004759
 80046f0:	08004819 	.word	0x08004819
 80046f4:	080046a5 	.word	0x080046a5
 80046f8:	080046a5 	.word	0x080046a5
 80046fc:	08004859 	.word	0x08004859
 8004700:	080046a5 	.word	0x080046a5
 8004704:	08004759 	.word	0x08004759
 8004708:	080046a5 	.word	0x080046a5
 800470c:	080046a5 	.word	0x080046a5
 8004710:	08004821 	.word	0x08004821
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e0a4      	b.n	8004872 <_printf_i+0x1f6>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	6829      	ldr	r1, [r5, #0]
 800472c:	0606      	lsls	r6, r0, #24
 800472e:	f101 0304 	add.w	r3, r1, #4
 8004732:	d50a      	bpl.n	800474a <_printf_i+0xce>
 8004734:	680e      	ldr	r6, [r1, #0]
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	2e00      	cmp	r6, #0
 800473a:	da03      	bge.n	8004744 <_printf_i+0xc8>
 800473c:	232d      	movs	r3, #45	; 0x2d
 800473e:	4276      	negs	r6, r6
 8004740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004744:	230a      	movs	r3, #10
 8004746:	485e      	ldr	r0, [pc, #376]	; (80048c0 <_printf_i+0x244>)
 8004748:	e019      	b.n	800477e <_printf_i+0x102>
 800474a:	680e      	ldr	r6, [r1, #0]
 800474c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	bf18      	it	ne
 8004754:	b236      	sxthne	r6, r6
 8004756:	e7ef      	b.n	8004738 <_printf_i+0xbc>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	1d19      	adds	r1, r3, #4
 800475e:	6029      	str	r1, [r5, #0]
 8004760:	0601      	lsls	r1, r0, #24
 8004762:	d501      	bpl.n	8004768 <_printf_i+0xec>
 8004764:	681e      	ldr	r6, [r3, #0]
 8004766:	e002      	b.n	800476e <_printf_i+0xf2>
 8004768:	0646      	lsls	r6, r0, #25
 800476a:	d5fb      	bpl.n	8004764 <_printf_i+0xe8>
 800476c:	881e      	ldrh	r6, [r3, #0]
 800476e:	2f6f      	cmp	r7, #111	; 0x6f
 8004770:	bf0c      	ite	eq
 8004772:	2308      	moveq	r3, #8
 8004774:	230a      	movne	r3, #10
 8004776:	4852      	ldr	r0, [pc, #328]	; (80048c0 <_printf_i+0x244>)
 8004778:	2100      	movs	r1, #0
 800477a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477e:	6865      	ldr	r5, [r4, #4]
 8004780:	2d00      	cmp	r5, #0
 8004782:	bfa8      	it	ge
 8004784:	6821      	ldrge	r1, [r4, #0]
 8004786:	60a5      	str	r5, [r4, #8]
 8004788:	bfa4      	itt	ge
 800478a:	f021 0104 	bicge.w	r1, r1, #4
 800478e:	6021      	strge	r1, [r4, #0]
 8004790:	b90e      	cbnz	r6, 8004796 <_printf_i+0x11a>
 8004792:	2d00      	cmp	r5, #0
 8004794:	d04d      	beq.n	8004832 <_printf_i+0x1b6>
 8004796:	4615      	mov	r5, r2
 8004798:	fbb6 f1f3 	udiv	r1, r6, r3
 800479c:	fb03 6711 	mls	r7, r3, r1, r6
 80047a0:	5dc7      	ldrb	r7, [r0, r7]
 80047a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047a6:	4637      	mov	r7, r6
 80047a8:	42bb      	cmp	r3, r7
 80047aa:	460e      	mov	r6, r1
 80047ac:	d9f4      	bls.n	8004798 <_printf_i+0x11c>
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d10b      	bne.n	80047ca <_printf_i+0x14e>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	07de      	lsls	r6, r3, #31
 80047b6:	d508      	bpl.n	80047ca <_printf_i+0x14e>
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	6861      	ldr	r1, [r4, #4]
 80047bc:	4299      	cmp	r1, r3
 80047be:	bfde      	ittt	le
 80047c0:	2330      	movle	r3, #48	; 0x30
 80047c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ca:	1b52      	subs	r2, r2, r5
 80047cc:	6122      	str	r2, [r4, #16]
 80047ce:	464b      	mov	r3, r9
 80047d0:	4621      	mov	r1, r4
 80047d2:	4640      	mov	r0, r8
 80047d4:	f8cd a000 	str.w	sl, [sp]
 80047d8:	aa03      	add	r2, sp, #12
 80047da:	f7ff fedf 	bl	800459c <_printf_common>
 80047de:	3001      	adds	r0, #1
 80047e0:	d14c      	bne.n	800487c <_printf_i+0x200>
 80047e2:	f04f 30ff 	mov.w	r0, #4294967295
 80047e6:	b004      	add	sp, #16
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	4834      	ldr	r0, [pc, #208]	; (80048c0 <_printf_i+0x244>)
 80047ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047f2:	6829      	ldr	r1, [r5, #0]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80047fa:	6029      	str	r1, [r5, #0]
 80047fc:	061d      	lsls	r5, r3, #24
 80047fe:	d514      	bpl.n	800482a <_printf_i+0x1ae>
 8004800:	07df      	lsls	r7, r3, #31
 8004802:	bf44      	itt	mi
 8004804:	f043 0320 	orrmi.w	r3, r3, #32
 8004808:	6023      	strmi	r3, [r4, #0]
 800480a:	b91e      	cbnz	r6, 8004814 <_printf_i+0x198>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	f023 0320 	bic.w	r3, r3, #32
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	2310      	movs	r3, #16
 8004816:	e7af      	b.n	8004778 <_printf_i+0xfc>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f043 0320 	orr.w	r3, r3, #32
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	2378      	movs	r3, #120	; 0x78
 8004822:	4828      	ldr	r0, [pc, #160]	; (80048c4 <_printf_i+0x248>)
 8004824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004828:	e7e3      	b.n	80047f2 <_printf_i+0x176>
 800482a:	0659      	lsls	r1, r3, #25
 800482c:	bf48      	it	mi
 800482e:	b2b6      	uxthmi	r6, r6
 8004830:	e7e6      	b.n	8004800 <_printf_i+0x184>
 8004832:	4615      	mov	r5, r2
 8004834:	e7bb      	b.n	80047ae <_printf_i+0x132>
 8004836:	682b      	ldr	r3, [r5, #0]
 8004838:	6826      	ldr	r6, [r4, #0]
 800483a:	1d18      	adds	r0, r3, #4
 800483c:	6961      	ldr	r1, [r4, #20]
 800483e:	6028      	str	r0, [r5, #0]
 8004840:	0635      	lsls	r5, r6, #24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	d501      	bpl.n	800484a <_printf_i+0x1ce>
 8004846:	6019      	str	r1, [r3, #0]
 8004848:	e002      	b.n	8004850 <_printf_i+0x1d4>
 800484a:	0670      	lsls	r0, r6, #25
 800484c:	d5fb      	bpl.n	8004846 <_printf_i+0x1ca>
 800484e:	8019      	strh	r1, [r3, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	4615      	mov	r5, r2
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	e7ba      	b.n	80047ce <_printf_i+0x152>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	2100      	movs	r1, #0
 800485c:	1d1a      	adds	r2, r3, #4
 800485e:	602a      	str	r2, [r5, #0]
 8004860:	681d      	ldr	r5, [r3, #0]
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f83f 	bl	80048e8 <memchr>
 800486a:	b108      	cbz	r0, 8004870 <_printf_i+0x1f4>
 800486c:	1b40      	subs	r0, r0, r5
 800486e:	6060      	str	r0, [r4, #4]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	2300      	movs	r3, #0
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	e7a8      	b.n	80047ce <_printf_i+0x152>
 800487c:	462a      	mov	r2, r5
 800487e:	4649      	mov	r1, r9
 8004880:	4640      	mov	r0, r8
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	47d0      	blx	sl
 8004886:	3001      	adds	r0, #1
 8004888:	d0ab      	beq.n	80047e2 <_printf_i+0x166>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	079b      	lsls	r3, r3, #30
 800488e:	d413      	bmi.n	80048b8 <_printf_i+0x23c>
 8004890:	68e0      	ldr	r0, [r4, #12]
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	4298      	cmp	r0, r3
 8004896:	bfb8      	it	lt
 8004898:	4618      	movlt	r0, r3
 800489a:	e7a4      	b.n	80047e6 <_printf_i+0x16a>
 800489c:	2301      	movs	r3, #1
 800489e:	4632      	mov	r2, r6
 80048a0:	4649      	mov	r1, r9
 80048a2:	4640      	mov	r0, r8
 80048a4:	47d0      	blx	sl
 80048a6:	3001      	adds	r0, #1
 80048a8:	d09b      	beq.n	80047e2 <_printf_i+0x166>
 80048aa:	3501      	adds	r5, #1
 80048ac:	68e3      	ldr	r3, [r4, #12]
 80048ae:	9903      	ldr	r1, [sp, #12]
 80048b0:	1a5b      	subs	r3, r3, r1
 80048b2:	42ab      	cmp	r3, r5
 80048b4:	dcf2      	bgt.n	800489c <_printf_i+0x220>
 80048b6:	e7eb      	b.n	8004890 <_printf_i+0x214>
 80048b8:	2500      	movs	r5, #0
 80048ba:	f104 0619 	add.w	r6, r4, #25
 80048be:	e7f5      	b.n	80048ac <_printf_i+0x230>
 80048c0:	08004c2d 	.word	0x08004c2d
 80048c4:	08004c3e 	.word	0x08004c3e

080048c8 <_sbrk_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	2300      	movs	r3, #0
 80048cc:	4d05      	ldr	r5, [pc, #20]	; (80048e4 <_sbrk_r+0x1c>)
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fd f938 	bl	8001b48 <_sbrk>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_sbrk_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_sbrk_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	20000258 	.word	0x20000258

080048e8 <memchr>:
 80048e8:	4603      	mov	r3, r0
 80048ea:	b510      	push	{r4, lr}
 80048ec:	b2c9      	uxtb	r1, r1
 80048ee:	4402      	add	r2, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	d101      	bne.n	80048fa <memchr+0x12>
 80048f6:	2000      	movs	r0, #0
 80048f8:	e003      	b.n	8004902 <memchr+0x1a>
 80048fa:	7804      	ldrb	r4, [r0, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	428c      	cmp	r4, r1
 8004900:	d1f6      	bne.n	80048f0 <memchr+0x8>
 8004902:	bd10      	pop	{r4, pc}

08004904 <memcpy>:
 8004904:	440a      	add	r2, r1
 8004906:	4291      	cmp	r1, r2
 8004908:	f100 33ff 	add.w	r3, r0, #4294967295
 800490c:	d100      	bne.n	8004910 <memcpy+0xc>
 800490e:	4770      	bx	lr
 8004910:	b510      	push	{r4, lr}
 8004912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004916:	4291      	cmp	r1, r2
 8004918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491c:	d1f9      	bne.n	8004912 <memcpy+0xe>
 800491e:	bd10      	pop	{r4, pc}

08004920 <memmove>:
 8004920:	4288      	cmp	r0, r1
 8004922:	b510      	push	{r4, lr}
 8004924:	eb01 0402 	add.w	r4, r1, r2
 8004928:	d902      	bls.n	8004930 <memmove+0x10>
 800492a:	4284      	cmp	r4, r0
 800492c:	4623      	mov	r3, r4
 800492e:	d807      	bhi.n	8004940 <memmove+0x20>
 8004930:	1e43      	subs	r3, r0, #1
 8004932:	42a1      	cmp	r1, r4
 8004934:	d008      	beq.n	8004948 <memmove+0x28>
 8004936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800493e:	e7f8      	b.n	8004932 <memmove+0x12>
 8004940:	4601      	mov	r1, r0
 8004942:	4402      	add	r2, r0
 8004944:	428a      	cmp	r2, r1
 8004946:	d100      	bne.n	800494a <memmove+0x2a>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800494e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004952:	e7f7      	b.n	8004944 <memmove+0x24>

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_lock+0x8>)
 8004956:	f7ff bc2f 	b.w	80041b8 <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	2000024c 	.word	0x2000024c

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_unlock+0x8>)
 8004962:	f7ff bc2a 	b.w	80041ba <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	2000024c 	.word	0x2000024c

0800496c <_free_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4605      	mov	r5, r0
 8004970:	2900      	cmp	r1, #0
 8004972:	d040      	beq.n	80049f6 <_free_r+0x8a>
 8004974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004978:	1f0c      	subs	r4, r1, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	18e4      	addlt	r4, r4, r3
 8004980:	f7ff ffe8 	bl	8004954 <__malloc_lock>
 8004984:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <_free_r+0x8c>)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	b933      	cbnz	r3, 8004998 <_free_r+0x2c>
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6014      	str	r4, [r2, #0]
 800498e:	4628      	mov	r0, r5
 8004990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004994:	f7ff bfe4 	b.w	8004960 <__malloc_unlock>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d908      	bls.n	80049ae <_free_r+0x42>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	1821      	adds	r1, r4, r0
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf01      	itttt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	1809      	addeq	r1, r1, r0
 80049aa:	6021      	streq	r1, [r4, #0]
 80049ac:	e7ed      	b.n	800498a <_free_r+0x1e>
 80049ae:	461a      	mov	r2, r3
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b10b      	cbz	r3, 80049b8 <_free_r+0x4c>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d9fa      	bls.n	80049ae <_free_r+0x42>
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	1850      	adds	r0, r2, r1
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d10b      	bne.n	80049d8 <_free_r+0x6c>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	4401      	add	r1, r0
 80049c4:	1850      	adds	r0, r2, r1
 80049c6:	4283      	cmp	r3, r0
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	d1e0      	bne.n	800498e <_free_r+0x22>
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4401      	add	r1, r0
 80049d2:	6011      	str	r1, [r2, #0]
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	e7da      	b.n	800498e <_free_r+0x22>
 80049d8:	d902      	bls.n	80049e0 <_free_r+0x74>
 80049da:	230c      	movs	r3, #12
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	e7d6      	b.n	800498e <_free_r+0x22>
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	1821      	adds	r1, r4, r0
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf01      	itttt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	1809      	addeq	r1, r1, r0
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	6063      	str	r3, [r4, #4]
 80049f2:	6054      	str	r4, [r2, #4]
 80049f4:	e7cb      	b.n	800498e <_free_r+0x22>
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000250 	.word	0x20000250

080049fc <_realloc_r>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	4680      	mov	r8, r0
 8004a02:	4614      	mov	r4, r2
 8004a04:	460e      	mov	r6, r1
 8004a06:	b921      	cbnz	r1, 8004a12 <_realloc_r+0x16>
 8004a08:	4611      	mov	r1, r2
 8004a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	f7ff bbf5 	b.w	80041fc <_malloc_r>
 8004a12:	b92a      	cbnz	r2, 8004a20 <_realloc_r+0x24>
 8004a14:	f7ff ffaa 	bl	800496c <_free_r>
 8004a18:	4625      	mov	r5, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a20:	f000 f81b 	bl	8004a5a <_malloc_usable_size_r>
 8004a24:	4284      	cmp	r4, r0
 8004a26:	4607      	mov	r7, r0
 8004a28:	d802      	bhi.n	8004a30 <_realloc_r+0x34>
 8004a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a2e:	d812      	bhi.n	8004a56 <_realloc_r+0x5a>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff fbe2 	bl	80041fc <_malloc_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0ed      	beq.n	8004a1a <_realloc_r+0x1e>
 8004a3e:	42bc      	cmp	r4, r7
 8004a40:	4622      	mov	r2, r4
 8004a42:	4631      	mov	r1, r6
 8004a44:	bf28      	it	cs
 8004a46:	463a      	movcs	r2, r7
 8004a48:	f7ff ff5c 	bl	8004904 <memcpy>
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff ff8c 	bl	800496c <_free_r>
 8004a54:	e7e1      	b.n	8004a1a <_realloc_r+0x1e>
 8004a56:	4635      	mov	r5, r6
 8004a58:	e7df      	b.n	8004a1a <_realloc_r+0x1e>

08004a5a <_malloc_usable_size_r>:
 8004a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a5e:	1f18      	subs	r0, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bfbc      	itt	lt
 8004a64:	580b      	ldrlt	r3, [r1, r0]
 8004a66:	18c0      	addlt	r0, r0, r3
 8004a68:	4770      	bx	lr
	...

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
