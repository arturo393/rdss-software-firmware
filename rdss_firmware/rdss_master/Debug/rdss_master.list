
rdss_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007604  08007604  00008604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007630  08007630  00008630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007638  08007638  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00008638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0000863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007640  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  2000005c  0800769c  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800769c  000094d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120e2  00000000  00000000  00009085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb2  00000000  00000000  0001b167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c33  00000000  00000000  0001f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0b9  00000000  00000000  0001fd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015862  00000000  00000000  00039dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008efcc  00000000  00000000  0004f62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de5fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  000de640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e2aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080075ec 	.word	0x080075ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080075ec 	.word	0x080075ec

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_uldivmod>:
 8000694:	b953      	cbnz	r3, 80006ac <__aeabi_uldivmod+0x18>
 8000696:	b94a      	cbnz	r2, 80006ac <__aeabi_uldivmod+0x18>
 8000698:	2900      	cmp	r1, #0
 800069a:	bf08      	it	eq
 800069c:	2800      	cmpeq	r0, #0
 800069e:	bf1c      	itt	ne
 80006a0:	f04f 31ff 	movne.w	r1, #4294967295
 80006a4:	f04f 30ff 	movne.w	r0, #4294967295
 80006a8:	f000 b968 	b.w	800097c <__aeabi_idiv0>
 80006ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b4:	f000 f806 	bl	80006c4 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr

080006c4 <__udivmoddi4>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	9d08      	ldr	r5, [sp, #32]
 80006ca:	460c      	mov	r4, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d14e      	bne.n	800076e <__udivmoddi4+0xaa>
 80006d0:	4694      	mov	ip, r2
 80006d2:	458c      	cmp	ip, r1
 80006d4:	4686      	mov	lr, r0
 80006d6:	fab2 f282 	clz	r2, r2
 80006da:	d962      	bls.n	80007a2 <__udivmoddi4+0xde>
 80006dc:	b14a      	cbz	r2, 80006f2 <__udivmoddi4+0x2e>
 80006de:	f1c2 0320 	rsb	r3, r2, #32
 80006e2:	4091      	lsls	r1, r2
 80006e4:	fa20 f303 	lsr.w	r3, r0, r3
 80006e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ec:	4319      	orrs	r1, r3
 80006ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80006f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80006fa:	fb07 1114 	mls	r1, r7, r4, r1
 80006fe:	fa1f f68c 	uxth.w	r6, ip
 8000702:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000706:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070a:	fb04 f106 	mul.w	r1, r4, r6
 800070e:	4299      	cmp	r1, r3
 8000710:	d90a      	bls.n	8000728 <__udivmoddi4+0x64>
 8000712:	eb1c 0303 	adds.w	r3, ip, r3
 8000716:	f104 30ff 	add.w	r0, r4, #4294967295
 800071a:	f080 8110 	bcs.w	800093e <__udivmoddi4+0x27a>
 800071e:	4299      	cmp	r1, r3
 8000720:	f240 810d 	bls.w	800093e <__udivmoddi4+0x27a>
 8000724:	3c02      	subs	r4, #2
 8000726:	4463      	add	r3, ip
 8000728:	1a59      	subs	r1, r3, r1
 800072a:	fbb1 f0f7 	udiv	r0, r1, r7
 800072e:	fb07 1110 	mls	r1, r7, r0, r1
 8000732:	fb00 f606 	mul.w	r6, r0, r6
 8000736:	fa1f f38e 	uxth.w	r3, lr
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	429e      	cmp	r6, r3
 8000740:	d90a      	bls.n	8000758 <__udivmoddi4+0x94>
 8000742:	eb1c 0303 	adds.w	r3, ip, r3
 8000746:	f100 31ff 	add.w	r1, r0, #4294967295
 800074a:	f080 80fa 	bcs.w	8000942 <__udivmoddi4+0x27e>
 800074e:	429e      	cmp	r6, r3
 8000750:	f240 80f7 	bls.w	8000942 <__udivmoddi4+0x27e>
 8000754:	4463      	add	r3, ip
 8000756:	3802      	subs	r0, #2
 8000758:	2100      	movs	r1, #0
 800075a:	1b9b      	subs	r3, r3, r6
 800075c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000760:	b11d      	cbz	r5, 800076a <__udivmoddi4+0xa6>
 8000762:	40d3      	lsrs	r3, r2
 8000764:	2200      	movs	r2, #0
 8000766:	e9c5 3200 	strd	r3, r2, [r5]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d905      	bls.n	800077e <__udivmoddi4+0xba>
 8000772:	b10d      	cbz	r5, 8000778 <__udivmoddi4+0xb4>
 8000774:	e9c5 0100 	strd	r0, r1, [r5]
 8000778:	2100      	movs	r1, #0
 800077a:	4608      	mov	r0, r1
 800077c:	e7f5      	b.n	800076a <__udivmoddi4+0xa6>
 800077e:	fab3 f183 	clz	r1, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d146      	bne.n	8000814 <__udivmoddi4+0x150>
 8000786:	42a3      	cmp	r3, r4
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xcc>
 800078a:	4290      	cmp	r0, r2
 800078c:	f0c0 80ee 	bcc.w	800096c <__udivmoddi4+0x2a8>
 8000790:	1a86      	subs	r6, r0, r2
 8000792:	eb64 0303 	sbc.w	r3, r4, r3
 8000796:	2001      	movs	r0, #1
 8000798:	2d00      	cmp	r5, #0
 800079a:	d0e6      	beq.n	800076a <__udivmoddi4+0xa6>
 800079c:	e9c5 6300 	strd	r6, r3, [r5]
 80007a0:	e7e3      	b.n	800076a <__udivmoddi4+0xa6>
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	f040 808f 	bne.w	80008c6 <__udivmoddi4+0x202>
 80007a8:	eba1 040c 	sub.w	r4, r1, ip
 80007ac:	2101      	movs	r1, #1
 80007ae:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007b2:	fa1f f78c 	uxth.w	r7, ip
 80007b6:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ba:	fb08 4416 	mls	r4, r8, r6, r4
 80007be:	fb07 f006 	mul.w	r0, r7, r6
 80007c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	4298      	cmp	r0, r3
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x11c>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f106 34ff 	add.w	r4, r6, #4294967295
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x11a>
 80007d8:	4298      	cmp	r0, r3
 80007da:	f200 80cb 	bhi.w	8000974 <__udivmoddi4+0x2b0>
 80007de:	4626      	mov	r6, r4
 80007e0:	1a1c      	subs	r4, r3, r0
 80007e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80007e6:	fb08 4410 	mls	r4, r8, r0, r4
 80007ea:	fb00 f707 	mul.w	r7, r0, r7
 80007ee:	fa1f f38e 	uxth.w	r3, lr
 80007f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007f6:	429f      	cmp	r7, r3
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x148>
 80007fa:	eb1c 0303 	adds.w	r3, ip, r3
 80007fe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x146>
 8000804:	429f      	cmp	r7, r3
 8000806:	f200 80ae 	bhi.w	8000966 <__udivmoddi4+0x2a2>
 800080a:	4620      	mov	r0, r4
 800080c:	1bdb      	subs	r3, r3, r7
 800080e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000812:	e7a5      	b.n	8000760 <__udivmoddi4+0x9c>
 8000814:	f1c1 0720 	rsb	r7, r1, #32
 8000818:	408b      	lsls	r3, r1
 800081a:	fa22 fc07 	lsr.w	ip, r2, r7
 800081e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000822:	fa24 f607 	lsr.w	r6, r4, r7
 8000826:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800082a:	fbb6 f8f9 	udiv	r8, r6, r9
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	fb09 6618 	mls	r6, r9, r8, r6
 8000836:	fa20 f307 	lsr.w	r3, r0, r7
 800083a:	408c      	lsls	r4, r1
 800083c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000840:	fb08 f00e 	mul.w	r0, r8, lr
 8000844:	431c      	orrs	r4, r3
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800084c:	4298      	cmp	r0, r3
 800084e:	fa02 f201 	lsl.w	r2, r2, r1
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x1a6>
 8000854:	eb1c 0303 	adds.w	r3, ip, r3
 8000858:	f108 36ff 	add.w	r6, r8, #4294967295
 800085c:	f080 8081 	bcs.w	8000962 <__udivmoddi4+0x29e>
 8000860:	4298      	cmp	r0, r3
 8000862:	d97e      	bls.n	8000962 <__udivmoddi4+0x29e>
 8000864:	f1a8 0802 	sub.w	r8, r8, #2
 8000868:	4463      	add	r3, ip
 800086a:	1a1e      	subs	r6, r3, r0
 800086c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000870:	fb09 6613 	mls	r6, r9, r3, r6
 8000874:	fb03 fe0e 	mul.w	lr, r3, lr
 8000878:	b2a4      	uxth	r4, r4
 800087a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800087e:	45a6      	cmp	lr, r4
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0x1d0>
 8000882:	eb1c 0404 	adds.w	r4, ip, r4
 8000886:	f103 30ff 	add.w	r0, r3, #4294967295
 800088a:	d266      	bcs.n	800095a <__udivmoddi4+0x296>
 800088c:	45a6      	cmp	lr, r4
 800088e:	d964      	bls.n	800095a <__udivmoddi4+0x296>
 8000890:	3b02      	subs	r3, #2
 8000892:	4464      	add	r4, ip
 8000894:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000898:	fba0 8302 	umull	r8, r3, r0, r2
 800089c:	eba4 040e 	sub.w	r4, r4, lr
 80008a0:	429c      	cmp	r4, r3
 80008a2:	46c6      	mov	lr, r8
 80008a4:	461e      	mov	r6, r3
 80008a6:	d350      	bcc.n	800094a <__udivmoddi4+0x286>
 80008a8:	d04d      	beq.n	8000946 <__udivmoddi4+0x282>
 80008aa:	b155      	cbz	r5, 80008c2 <__udivmoddi4+0x1fe>
 80008ac:	ebba 030e 	subs.w	r3, sl, lr
 80008b0:	eb64 0406 	sbc.w	r4, r4, r6
 80008b4:	fa04 f707 	lsl.w	r7, r4, r7
 80008b8:	40cb      	lsrs	r3, r1
 80008ba:	431f      	orrs	r7, r3
 80008bc:	40cc      	lsrs	r4, r1
 80008be:	e9c5 7400 	strd	r7, r4, [r5]
 80008c2:	2100      	movs	r1, #0
 80008c4:	e751      	b.n	800076a <__udivmoddi4+0xa6>
 80008c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ca:	f1c2 0320 	rsb	r3, r2, #32
 80008ce:	40d9      	lsrs	r1, r3
 80008d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80008dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80008e0:	fb08 1110 	mls	r1, r8, r0, r1
 80008e4:	4094      	lsls	r4, r2
 80008e6:	431c      	orrs	r4, r3
 80008e8:	fa1f f78c 	uxth.w	r7, ip
 80008ec:	0c23      	lsrs	r3, r4, #16
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb00 f107 	mul.w	r1, r0, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0x248>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000902:	d22c      	bcs.n	800095e <__udivmoddi4+0x29a>
 8000904:	4299      	cmp	r1, r3
 8000906:	d92a      	bls.n	800095e <__udivmoddi4+0x29a>
 8000908:	3802      	subs	r0, #2
 800090a:	4463      	add	r3, ip
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000912:	fb08 3311 	mls	r3, r8, r1, r3
 8000916:	b2a4      	uxth	r4, r4
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb01 f307 	mul.w	r3, r1, r7
 8000920:	42a3      	cmp	r3, r4
 8000922:	d908      	bls.n	8000936 <__udivmoddi4+0x272>
 8000924:	eb1c 0404 	adds.w	r4, ip, r4
 8000928:	f101 36ff 	add.w	r6, r1, #4294967295
 800092c:	d213      	bcs.n	8000956 <__udivmoddi4+0x292>
 800092e:	42a3      	cmp	r3, r4
 8000930:	d911      	bls.n	8000956 <__udivmoddi4+0x292>
 8000932:	3902      	subs	r1, #2
 8000934:	4464      	add	r4, ip
 8000936:	1ae4      	subs	r4, r4, r3
 8000938:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800093c:	e73b      	b.n	80007b6 <__udivmoddi4+0xf2>
 800093e:	4604      	mov	r4, r0
 8000940:	e6f2      	b.n	8000728 <__udivmoddi4+0x64>
 8000942:	4608      	mov	r0, r1
 8000944:	e708      	b.n	8000758 <__udivmoddi4+0x94>
 8000946:	45c2      	cmp	sl, r8
 8000948:	d2af      	bcs.n	80008aa <__udivmoddi4+0x1e6>
 800094a:	ebb8 0e02 	subs.w	lr, r8, r2
 800094e:	eb63 060c 	sbc.w	r6, r3, ip
 8000952:	3801      	subs	r0, #1
 8000954:	e7a9      	b.n	80008aa <__udivmoddi4+0x1e6>
 8000956:	4631      	mov	r1, r6
 8000958:	e7ed      	b.n	8000936 <__udivmoddi4+0x272>
 800095a:	4603      	mov	r3, r0
 800095c:	e79a      	b.n	8000894 <__udivmoddi4+0x1d0>
 800095e:	4630      	mov	r0, r6
 8000960:	e7d4      	b.n	800090c <__udivmoddi4+0x248>
 8000962:	46b0      	mov	r8, r6
 8000964:	e781      	b.n	800086a <__udivmoddi4+0x1a6>
 8000966:	4463      	add	r3, ip
 8000968:	3802      	subs	r0, #2
 800096a:	e74f      	b.n	800080c <__udivmoddi4+0x148>
 800096c:	4606      	mov	r6, r0
 800096e:	4623      	mov	r3, r4
 8000970:	4608      	mov	r0, r1
 8000972:	e711      	b.n	8000798 <__udivmoddi4+0xd4>
 8000974:	3e02      	subs	r6, #2
 8000976:	4463      	add	r3, ip
 8000978:	e732      	b.n	80007e0 <__udivmoddi4+0x11c>
 800097a:	bf00      	nop

0800097c <__aeabi_idiv0>:
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include <SX1278.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	uint8_t rec = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <readRegister+0x54>)
 8000996:	f002 ff8c 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f002 fc0a 	bl	80031b4 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 80009a0:	1cf9      	adds	r1, r7, #3
 80009a2:	2364      	movs	r3, #100	@ 0x64
 80009a4:	2201      	movs	r2, #1
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f005 fa4a 	bl	8005e40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 80009ac:	f107 010f 	add.w	r1, r7, #15
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	2201      	movs	r2, #1
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f005 fb86 	bl	80060c6 <HAL_SPI_Receive>
	HAL_Delay(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f002 fbfa 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <readRegister+0x54>)
 80009c6:	f002 ff74 	bl	80038b2 <HAL_GPIO_WritePin>
	return rec;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40010c00 	.word	0x40010c00

080009d8 <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	461a      	mov	r2, r3
 80009e4:	460b      	mov	r3, r1
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	4613      	mov	r3, r2
 80009ea:	72bb      	strb	r3, [r7, #10]
	if (lenght > 4)
 80009ec:	7abb      	ldrb	r3, [r7, #10]
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d837      	bhi.n	8000a62 <writeRegister+0x8a>
		return;
	uint8_t tx_data[5] = { 0 };
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	2300      	movs	r3, #0
 80009f8:	753b      	strb	r3, [r7, #20]
	tx_data[0] = address | 0x80;
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	e00f      	b.n	8000a2e <writeRegister+0x56>
		tx_data[i] = cmd[j++];
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	61fa      	str	r2, [r7, #28]
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	7819      	ldrb	r1, [r3, #0]
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	4413      	add	r3, r2
 8000a24:	460a      	mov	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	7abb      	ldrb	r3, [r7, #10]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	ddeb      	ble.n	8000a0e <writeRegister+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000a36:	2200      	movs	r2, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <writeRegister+0x94>)
 8000a3c:	f002 ff39 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000a40:	7abb      	ldrb	r3, [r7, #10]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f107 0110 	add.w	r1, r7, #16
 8000a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f005 f9f5 	bl	8005e40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a56:	2201      	movs	r2, #1
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <writeRegister+0x94>)
 8000a5c:	f002 ff29 	bl	80038b2 <HAL_GPIO_WritePin>
 8000a60:	e000      	b.n	8000a64 <writeRegister+0x8c>
		return;
 8000a62:	bf00      	nop
//	HAL_Delay(10);
}
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010c00 	.word	0x40010c00

08000a70 <setRFFrequencyReg>:
	rec = spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	6809      	ldr	r1, [r1, #0]
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	460a      	mov	r2, r1
 8000a80:	4603      	mov	r3, r0
 8000a82:	0b55      	lsrs	r5, r2, #13
 8000a84:	04d4      	lsls	r4, r2, #19
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <setRFFrequencyReg+0x7c>)
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	4629      	mov	r1, r5
 8000a90:	f7ff fe00 	bl	8000694 <__aeabi_uldivmod>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000a9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	0c02      	lsrs	r2, r0, #16
 8000aaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aae:	0c0b      	lsrs	r3, r1, #16
 8000ab0:	b2d3      	uxtb	r3, r2
 8000ab2:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	0a02      	lsrs	r2, r0, #8
 8000ac2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ac6:	0a0b      	lsrs	r3, r1, #8
 8000ac8:	b2d3      	uxtb	r3, r2
 8000aca:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000acc:	7c3b      	ldrb	r3, [r7, #16]
 8000ace:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	2303      	movs	r3, #3
 8000adc:	2106      	movs	r1, #6
 8000ade:	f7ff ff7b 	bl	80009d8 <writeRegister>

}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	01e84800 	.word	0x01e84800

08000af0 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f103 020c 	add.w	r2, r3, #12
 8000b04:	2301      	movs	r3, #1
 8000b06:	2109      	movs	r1, #9
 8000b08:	f7ff ff66 	bl	80009d8 <writeRegister>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f103 0212 	add.w	r2, r3, #18
 8000b28:	2301      	movs	r3, #1
 8000b2a:	210b      	movs	r1, #11
 8000b2c:	f7ff ff54 	bl	80009d8 <writeRegister>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f103 0215 	add.w	r2, r3, #21
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	211f      	movs	r1, #31
 8000b50:	f7ff ff42 	bl	80009d8 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0217 	add.w	r2, r3, #23
 8000b60:	2301      	movs	r3, #1
 8000b62:	2120      	movs	r1, #32
 8000b64:	f7ff ff38 	bl	80009d8 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0218 	add.w	r2, r3, #24
 8000b74:	2301      	movs	r3, #1
 8000b76:	2121      	movs	r1, #33	@ 0x21
 8000b78:	f7ff ff2e 	bl	80009d8 <writeRegister>
			1);
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
	cmd = module->bandwidth << 4;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7b9b      	ldrb	r3, [r3, #14]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
	cmd += module->codingRate << 1;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7bdb      	ldrb	r3, [r3, #15]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7f1a      	ldrb	r2, [r3, #28]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000bbc:	f107 020f 	add.w	r2, r7, #15
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	211d      	movs	r1, #29
 8000bc4:	f7ff ff08 	bl	80009d8 <writeRegister>

	cmd = module->spreadFactor << 4;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7b5b      	ldrb	r3, [r3, #13]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7c1b      	ldrb	r3, [r3, #16]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7d9a      	ldrb	r2, [r3, #22]
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000bf4:	f107 020f 	add.w	r2, r7, #15
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	211e      	movs	r1, #30
 8000bfc:	f7ff feec 	bl	80009d8 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f103 0214 	add.w	r2, r3, #20
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2126      	movs	r1, #38	@ 0x26
 8000c10:	f7ff fee2 	bl	80009d8 <writeRegister>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000c2a:	2131      	movs	r1, #49	@ 0x31
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fea7 	bl	8000980 <readRegister>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	f023 0307 	bic.w	r3, r3, #7
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 0305 	orr.w	r3, r3, #5
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000c50:	f107 020f 	add.w	r2, r7, #15
 8000c54:	2301      	movs	r3, #1
 8000c56:	2131      	movs	r1, #49	@ 0x31
 8000c58:	f7ff febe 	bl	80009d8 <writeRegister>
	tmp = 0x0C;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000c66:	f107 020f 	add.w	r2, r7, #15
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2137      	movs	r1, #55	@ 0x37
 8000c6e:	f7ff feb3 	bl	80009d8 <writeRegister>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <setLoRaLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoRaLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000c96:	f107 020f 	add.w	r2, r7, #15
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	f7ff fe9b 	bl	80009d8 <writeRegister>
	module->operatingMode = mode;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	78fa      	ldrb	r2, [r7, #3]
 8000ca6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000cba:	23ff      	movs	r3, #255	@ 0xff
 8000cbc:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000cc4:	f107 020f 	add.w	r2, r7, #15
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2112      	movs	r1, #18
 8000ccc:	f7ff fe84 	bl	80009d8 <writeRegister>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffc9 	bl	8000c7a <setLoRaLowFreqModeReg>
	HAL_Delay(15);
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f002 fa63 	bl	80031b4 <HAL_Delay>
	setRFFrequencyReg(module);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff febe 	bl	8000a70 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f103 0211 	add.w	r2, r3, #17
 8000d00:	2301      	movs	r3, #1
 8000d02:	2139      	movs	r1, #57	@ 0x39
 8000d04:	f7ff fe68 	bl	80009d8 <writeRegister>
	setOutputPower(module);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fef1 	bl	8000af0 <setOutputPower>
	setOvercurrentProtect(module);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff00 	bl	8000b14 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f103 0213 	add.w	r2, r3, #19
 8000d20:	2301      	movs	r3, #1
 8000d22:	210c      	movs	r1, #12
 8000d24:	f7ff fe58 	bl	80009d8 <writeRegister>
	if (module->spreadFactor == SF_6) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7b5b      	ldrb	r3, [r3, #13]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d109      	bne.n	8000d44 <writeLoRaParametersReg+0x6c>
		module->headerMode = IMPLICIT;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x03;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2203      	movs	r2, #3
 8000d3a:	759a      	strb	r2, [r3, #22]
		setDetectionParametersReg(module);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff6d 	bl	8000c1c <setDetectionParametersReg>
 8000d42:	e005      	b.n	8000d50 <writeLoRaParametersReg+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x00;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	759a      	strb	r2, [r3, #22]
	}

	setReModemConfig(module);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff17 	bl	8000b84 <setReModemConfig>
	setPreambleParameters(module);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff feee 	bl	8000b38 <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f103 0219 	add.w	r2, r3, #25
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2124      	movs	r1, #36	@ 0x24
 8000d6c:	f7ff fe34 	bl	80009d8 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 021a 	add.w	r2, r3, #26
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	2140      	movs	r1, #64	@ 0x40
 8000d80:	f7ff fe2a 	bl	80009d8 <writeRegister>
	clearIrqFlagsReg(module);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff94 	bl	8000cb2 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f103 021b 	add.w	r2, r3, #27
 8000d96:	2301      	movs	r3, #1
 8000d98:	2111      	movs	r1, #17
 8000d9a:	f7ff fe1d 	bl	80009d8 <writeRegister>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <changeMode>:

void changeMode(SX1278_t *module, Lora_Mode_t mode) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70fb      	strb	r3, [r7, #3]
	uint32_t timeStart = HAL_GetTick();
 8000db2:	f002 f9f5 	bl	80031a0 <HAL_GetTick>
 8000db6:	60f8      	str	r0, [r7, #12]
	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <changeMode+0x1e>
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d11f      	bne.n	8000e04 <changeMode+0x5e>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <changeMode+0x2a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	e001      	b.n	8000dd4 <changeMode+0x2e>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
		module->frequency =
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2241      	movs	r2, #65	@ 0x41
 8000ddc:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	22ff      	movs	r2, #255	@ 0xff
 8000de2:	76da      	strb	r2, [r3, #27]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7edb      	ldrb	r3, [r3, #27]
 8000de8:	f023 0308 	bic.w	r3, r3, #8
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		module->status = TX_MODE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8000e02:	e024      	b.n	8000e4e <changeMode+0xa8>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d002      	beq.n	8000e10 <changeMode+0x6a>
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d11e      	bne.n	8000e4e <changeMode+0xa8>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <changeMode+0x76>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	e001      	b.n	8000e20 <changeMode+0x7a>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
		module->frequency =
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	22ff      	movs	r2, #255	@ 0xff
 8000e2e:	76da      	strb	r2, [r3, #27]
		module->flagsMode &= ~(RX_DONE_MASK) & ~(PAYLOAD_CRC_ERROR_MASK);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7edb      	ldrb	r3, [r3, #27]
 8000e34:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	78fa      	ldrb	r2, [r7, #3]
 8000e42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		module->status = RX_MODE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}

	setLoRaLowFreqModeReg(module, STANDBY);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff12 	bl	8000c7a <setLoRaLowFreqModeReg>
	//HAL_Delay(1);
	setRFFrequencyReg(module);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fe0a 	bl	8000a70 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f103 021a 	add.w	r2, r3, #26
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2140      	movs	r1, #64	@ 0x40
 8000e6c:	f7ff fdb4 	bl	80009d8 <writeRegister>
	clearIrqFlagsReg(module);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff1e 	bl	8000cb2 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f103 021b 	add.w	r2, r3, #27
 8000e82:	2301      	movs	r3, #1
 8000e84:	2111      	movs	r1, #17
 8000e86:	f7ff fda7 	bl	80009d8 <writeRegister>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <sx1278Reset>:
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
	module->preambleLengthLsb = 12; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
}

void sx1278Reset() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <sx1278Reset+0x34>)
 8000e9e:	f002 fd08 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <sx1278Reset+0x34>)
 8000ea8:	f002 fd03 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f002 f981 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <sx1278Reset+0x34>)
 8000eb8:	f002 fcfb 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ebc:	2064      	movs	r0, #100	@ 0x64
 8000ebe:	f002 f979 	bl	80031b4 <HAL_Delay>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8000ed4:	f002 f964 	bl	80031a0 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]


	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000edc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee0:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <waitForTxEnd+0x7c>)
 8000ee2:	f002 fccf 	bl	8003884 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d015      	beq.n	8000f18 <waitForTxEnd+0x4c>

			readRegister(loRa->spi, LR_RegIrqFlags);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000ef2:	2112      	movs	r1, #18
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fd43 	bl	8000980 <readRegister>
			clearIrqFlagsReg(loRa);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fed9 	bl	8000cb2 <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			loRa->lastTxTime = HAL_GetTick() - timeStart;
 8000f08:	f002 f94a 	bl	80031a0 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	621a      	str	r2, [r3, #32]
			return;
 8000f16:	e013      	b.n	8000f40 <waitForTxEnd+0x74>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000f18:	f002 f942 	bl	80031a0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d906      	bls.n	8000f38 <waitForTxEnd+0x6c>
			sx1278Reset();
 8000f2a:	f7ff ffb3 	bl	8000e94 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2205      	movs	r2, #5
 8000f32:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			return;
 8000f36:	e003      	b.n	8000f40 <waitForTxEnd+0x74>
		}
		HAL_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f002 f93b 	bl	80031b4 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000f3e:	e7cd      	b.n	8000edc <waitForTxEnd+0x10>
	}
}
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <getRxFifoData>:
	flags = readRegister(module->spi, LR_RegIrqFlags);
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

void getRxFifoData(SX1278_t *loRa) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 8000f54:	2364      	movs	r3, #100	@ 0x64
 8000f56:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = 0x00;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73bb      	strb	r3, [r7, #14]
	loRa->rxSize = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8000f62:	2113      	movs	r1, #19
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fd0b 	bl	8000980 <readRegister>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
	if (loRa->rxSize > 0) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d021      	beq.n	8000fc2 <getRxFifoData+0x76>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <getRxFifoData+0x80>)
 8000f84:	f002 fc95 	bl	80038b2 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(loRa->spi, &addr, 1, timeout); // send address
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f107 010e 	add.w	r1, r7, #14
 8000f94:	2201      	movs	r2, #1
 8000f96:	f004 ff53 	bl	8005e40 <HAL_SPI_Transmit>
		HAL_SPI_Receive(loRa->spi, loRa->rxData, 256, timeout); // receive 6 bytes data
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 012f 	add.w	r1, r3, #47	@ 0x2f
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	f005 f88b 	bl	80060c6 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <getRxFifoData+0x80>)
 8000fb6:	f002 fc7c 	bl	80038b2 <HAL_GPIO_WritePin>
		loRa->status = RX_DONE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	}

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010c00 	.word	0x40010c00

08000fd0 <setRxFifoAddr>:
	cmd = readRegister(loRa->spi, LR_RegPayloadLength);

	return cmd;
}

void setRxFifoAddr(SX1278_t *module) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fe4d 	bl	8000c7a <setLoRaLowFreqModeReg>
	uint8_t cmd = module->rxSize;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8000fe6:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8000fee:	f107 020f 	add.w	r2, r7, #15
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2122      	movs	r1, #34	@ 0x22
 8000ff6:	f7ff fcef 	bl	80009d8 <writeRegister>
	uint8_t addr = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8001004:	f107 020e 	add.w	r2, r7, #14
 8001008:	2301      	movs	r3, #1
 800100a:	210d      	movs	r1, #13
 800100c:	f7ff fce4 	bl	80009d8 <writeRegister>
	module->rxSize = readRegister(module->spi, LR_RegPayloadLength);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8001016:	2122      	movs	r1, #34	@ 0x22
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fcb1 	bl	8000980 <readRegister>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <setTxFifoData>:

uint8_t setTxFifoData(SX1278_t *loRa) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t cmd = loRa->txSize;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800103e:	72fb      	strb	r3, [r7, #11]
	uint8_t base_addr = 0x80;
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	72bb      	strb	r3, [r7, #10]
	if (loRa->txSize > 0) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800104a:	2b00      	cmp	r3, #0
 800104c:	d02a      	beq.n	80010a4 <setTxFifoData+0x74>
		writeRegister(loRa->spi, LR_RegPayloadLength, &(cmd), 1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8001054:	f107 020b 	add.w	r2, r7, #11
 8001058:	2301      	movs	r3, #1
 800105a:	2122      	movs	r1, #34	@ 0x22
 800105c:	f7ff fcbc 	bl	80009d8 <writeRegister>
		writeRegister(loRa->spi, LR_RegFifoAddrPtr, &base_addr, 1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8001066:	f107 020a 	add.w	r2, r7, #10
 800106a:	2301      	movs	r3, #1
 800106c:	210d      	movs	r1, #13
 800106e:	f7ff fcb3 	bl	80009d8 <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e00e      	b.n	8001096 <setTxFifoData+0x66>
			writeRegister(loRa->spi, 0x00, loRa->txData + i, 1);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	441a      	add	r2, r3
 8001088:	2301      	movs	r3, #1
 800108a:	2100      	movs	r1, #0
 800108c:	f7ff fca4 	bl	80009d8 <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	dbe9      	blt.n	8001078 <setTxFifoData+0x48>
	}
	return (loRa->txSize);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <transmit>:
	clearRxMemory(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb8 	bl	8001030 <setTxFifoData>
	setLoRaLowFreqModeReg(loRa, TX);
 80010c0:	2103      	movs	r1, #3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fdd9 	bl	8000c7a <setLoRaLowFreqModeReg>
	waitForTxEnd(loRa);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff feff 	bl	8000ecc <waitForTxEnd>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_readLoRaSettings>:

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
		loRa->dlFreq = DOWNLINK_FREQ;
}

void HAL_readLoRaSettings(SX1278_t *loRa) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	readPage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 010d 	add.w	r1, r3, #13
 80010e6:	2301      	movs	r3, #1
 80010e8:	2200      	movs	r2, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f8f0 	bl	80012d0 <readPage>
	readPage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f103 010e 	add.w	r1, r3, #14
 80010f6:	2301      	movs	r3, #1
 80010f8:	2201      	movs	r2, #1
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f8e8 	bl	80012d0 <readPage>
	readPage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f103 010f 	add.w	r1, r3, #15
 8001106:	2301      	movs	r3, #1
 8001108:	2202      	movs	r2, #2
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f8e0 	bl	80012d0 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	1d19      	adds	r1, r3, #4
 8001114:	2304      	movs	r3, #4
 8001116:	2200      	movs	r2, #0
 8001118:	2001      	movs	r0, #1
 800111a:	f000 f8d9 	bl	80012d0 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f103 0108 	add.w	r1, r3, #8
 8001124:	2304      	movs	r3, #4
 8001126:	2204      	movs	r2, #4
 8001128:	2001      	movs	r0, #1
 800112a:	f000 f8d1 	bl	80012d0 <readPage>
	if (loRa->spreadFactor < SF_6 || loRa->spreadFactor > SF_12)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7b5b      	ldrb	r3, [r3, #13]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d903      	bls.n	800113e <HAL_readLoRaSettings+0x66>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7b5b      	ldrb	r3, [r3, #13]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d902      	bls.n	8001144 <HAL_readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	220a      	movs	r2, #10
 8001142:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b9b      	ldrb	r3, [r3, #14]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d902      	bls.n	8001152 <HAL_readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2206      	movs	r2, #6
 8001150:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7bdb      	ldrb	r3, [r3, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_readLoRaSettings+0x8a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7bdb      	ldrb	r3, [r3, #15]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d902      	bls.n	8001168 <HAL_readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2202      	movs	r2, #2
 8001166:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_readLoRaSettings+0xcc>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d904      	bls.n	800117c <HAL_readLoRaSettings+0xa4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_readLoRaSettings+0xd0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d902      	bls.n	8001182 <HAL_readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <HAL_readLoRaSettings+0xd4>)
 8001180:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <HAL_readLoRaSettings+0xd8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d904      	bls.n	8001196 <HAL_readLoRaSettings+0xbe>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_readLoRaSettings+0xdc>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d902      	bls.n	800119c <HAL_readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <HAL_readLoRaSettings+0xe0>)
 800119a:	605a      	str	r2, [r3, #4]
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	09c670ff 	.word	0x09c670ff
 80011a8:	0aba9500 	.word	0x0aba9500
 80011ac:	0a408300 	.word	0x0a408300
 80011b0:	08d24cff 	.word	0x08d24cff
 80011b4:	095ba140 	.word	0x095ba140
 80011b8:	093d1cc0 	.word	0x093d1cc0

080011bc <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1, Lora_Mode_t loRaMode) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
	SX1278_t *loRa;
	loRa = malloc(sizeof(SX1278_t));
 80011c8:	f44f 70b4 	mov.w	r0, #360	@ 0x168
 80011cc:	f006 f8c4 	bl	8007358 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	4828      	ldr	r0, [pc, #160]	@ (800127c <loRaInit+0xc0>)
 80011da:	f002 fb6a 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2102      	movs	r1, #2
 80011e2:	4826      	ldr	r0, [pc, #152]	@ (800127c <loRaInit+0xc0>)
 80011e4:	f002 fb65 	bl	80038b2 <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fbc1 	bl	8000980 <readRegister>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	loRa->mode = -1;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	22ff      	movs	r2, #255	@ 0xff
 800120c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	loRa->power = SX1278_POWER_17DBM;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	22fc      	movs	r2, #252	@ 0xfc
 8001214:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	220b      	movs	r2, #11
 8001220:	749a      	strb	r2, [r3, #18]
	loRa->lnaGain = LNAGAIN;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2223      	movs	r2, #35	@ 0x23
 8001226:	74da      	strb	r2, [r3, #19]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	220c      	movs	r2, #12
 800122c:	751a      	strb	r2, [r3, #20]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2212      	movs	r2, #18
 8001232:	745a      	strb	r2, [r3, #17]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2208      	movs	r2, #8
 8001238:	755a      	strb	r2, [r3, #21]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	75da      	strb	r2, [r3, #23]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2208      	movs	r2, #8
 8001244:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	220c      	movs	r2, #12
 800124a:	761a      	strb	r2, [r3, #24]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2207      	movs	r2, #7
 8001250:	765a      	strb	r2, [r3, #25]
	loRa->rxSize = 0;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
	HAL_readLoRaSettings(loRa);
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff3c 	bl	80010d8 <HAL_readLoRaSettings>
	changeMode(loRa, loRaMode);
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	4619      	mov	r1, r3
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff fd9e 	bl	8000da6 <changeMode>
	writeLoRaParametersReg(loRa);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fd34 	bl	8000cd8 <writeLoRaParametersReg>
	return loRa;
 8001270:	68fb      	ldr	r3, [r7, #12]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010c00 	.word	0x40010c00

08001280 <configureLoRaRx>:

void configureLoRaRx(SX1278_t *loRa, Lora_Mode_t mode) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
	if (loRa->mode != mode)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001292:	78fa      	ldrb	r2, [r7, #3]
 8001294:	429a      	cmp	r2, r3
 8001296:	d114      	bne.n	80012c2 <configureLoRaRx+0x42>
		return;
	if (loRa->operatingMode == RX_CONTINUOUS)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d011      	beq.n	80012c6 <configureLoRaRx+0x46>
		return;

	changeMode(loRa, mode);
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fd7d 	bl	8000da6 <changeMode>
	writeLoRaParametersReg(loRa);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fd13 	bl	8000cd8 <writeLoRaParametersReg>
	setRxFifoAddr(loRa);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fe8c 	bl	8000fd0 <setRxFifoAddr>
	setLoRaLowFreqModeReg(loRa, RX_CONTINUOUS);
 80012b8:	2105      	movs	r1, #5
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fcdd 	bl	8000c7a <setLoRaLowFreqModeReg>
 80012c0:	e002      	b.n	80012c8 <configureLoRaRx+0x48>
		return;
 80012c2:	bf00      	nop
 80012c4:	e000      	b.n	80012c8 <configureLoRaRx+0x48>
		return;
 80012c6:	bf00      	nop
}
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <readPage>:
		i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
	}
	HAL_Delay(6);
}

HAL_StatusTypeDef readPage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af04      	add	r7, sp, #16
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	4611      	mov	r1, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	4603      	mov	r3, r0
 80012de:	81fb      	strh	r3, [r7, #14]
 80012e0:	460b      	mov	r3, r1
 80012e2:	81bb      	strh	r3, [r7, #12]
 80012e4:	4613      	mov	r3, r2
 80012e6:	80fb      	strh	r3, [r7, #6]
    uint16_t MemAddress = (page << 8) | offset;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(&hi2c1, M24C64_CHIP_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, data, size, 1000);
 80012f8:	8afa      	ldrh	r2, [r7, #22]
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2310      	movs	r3, #16
 800130a:	21a0      	movs	r1, #160	@ 0xa0
 800130c:	4808      	ldr	r0, [pc, #32]	@ (8001330 <readPage+0x60>)
 800130e:	f003 f891 	bl	8004434 <HAL_I2C_Mem_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	757b      	strb	r3, [r7, #21]
    if (res != HAL_OK)
 8001316:	7d7b      	ldrb	r3, [r7, #21]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <readPage+0x50>
        return res;
 800131c:	7d7b      	ldrb	r3, [r7, #21]
 800131e:	e003      	b.n	8001328 <readPage+0x58>

    HAL_Delay(5);
 8001320:	2005      	movs	r0, #5
 8001322:	f001 ff47 	bl	80031b4 <HAL_Delay>
    return res;
 8001326:	7d7b      	ldrb	r3, [r7, #21]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000080 	.word	0x20000080

08001334 <HAL_savePage>:


HAL_StatusTypeDef HAL_savePage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	@ 0x38
 8001338:	af04      	add	r7, sp, #16
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4603      	mov	r3, r0
 8001342:	81fb      	strh	r3, [r7, #14]
 8001344:	460b      	mov	r3, r1
 8001346:	81bb      	strh	r3, [r7, #12]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
    uint8_t read[16]={0};
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
    bool notEqual = false;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    HAL_StatusTypeDef res;

    res = readPage(page, read, offset, size);
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	89ba      	ldrh	r2, [r7, #12]
 8001366:	f107 0110 	add.w	r1, r7, #16
 800136a:	89f8      	ldrh	r0, [r7, #14]
 800136c:	f7ff ffb0 	bl	80012d0 <readPage>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    for (uint16_t i = 0; i < size; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800137a:	e011      	b.n	80013a0 <HAL_savePage+0x6c>
        if (data[i] != read[i]) {
 800137c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	4413      	add	r3, r2
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001386:	3328      	adds	r3, #40	@ 0x28
 8001388:	443b      	add	r3, r7
 800138a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800138e:	429a      	cmp	r2, r3
 8001390:	d003      	beq.n	800139a <HAL_savePage+0x66>
            notEqual = true;
 8001392:	2301      	movs	r3, #1
 8001394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8001398:	e006      	b.n	80013a8 <HAL_savePage+0x74>
    for (uint16_t i = 0; i < size; i++)
 800139a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3e9      	bcc.n	800137c <HAL_savePage+0x48>
        }

    if (notEqual) {
 80013a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d016      	beq.n	80013de <HAL_savePage+0xaa>
        uint16_t memAddress = (page << 8) | offset;
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21b      	sxth	r3, r3
 80013be:	847b      	strh	r3, [r7, #34]	@ 0x22
        res = HAL_I2C_Mem_Write(&hi2c1, M24C64_CHIP_ADDR, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, 50);
 80013c0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80013c2:	2332      	movs	r3, #50	@ 0x32
 80013c4:	9302      	str	r3, [sp, #8]
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2310      	movs	r3, #16
 80013d0:	21a0      	movs	r1, #160	@ 0xa0
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <HAL_savePage+0xbc>)
 80013d4:	f002 ff34 	bl	8004240 <HAL_I2C_Mem_Write>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
    HAL_Delay(6);
 80013de:	2006      	movs	r0, #6
 80013e0:	f001 fee8 	bl	80031b4 <HAL_Delay>

    return res;
 80013e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000080 	.word	0x20000080

080013f4 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <ledInit+0x60>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <ledInit+0x60>)
 8001402:	f043 0320 	orr.w	r3, r3, #32
 8001406:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <ledInit+0x60>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <ledInit+0x60>)
 800140e:	f023 0320 	bic.w	r3, r3, #32
 8001412:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <ledInit+0x60>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <ledInit+0x60>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <ledInit+0x60>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <ledInit+0x60>)
 8001426:	f023 0310 	bic.w	r3, r3, #16
 800142a:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <ledInit+0x60>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <ledInit+0x60>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <ledInit+0x60>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <ledInit+0x60>)
 800143e:	f023 0308 	bic.w	r3, r3, #8
 8001442:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f807 	bl	8001458 <led_reset>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010c00 	.word	0x40010c00

08001458 <led_reset>:
		SYS_RP_LED_ON();
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();
}

void led_reset(LED_t *l) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8001472:	f001 fe95 	bl	80031a0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <lm75Init>:
#include "lm75.h"


HAL_StatusTypeDef lm75Init(I2C_HandleTypeDef *i2c) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af02      	add	r7, sp, #8
 800149c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2];
	uint8_t len;
	cmd[0] = LM75_Conf;
 800149e:	2301      	movs	r3, #1
 80014a0:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	737b      	strb	r3, [r7, #13]
	len = sizeof(cmd);
 80014a6:	2302      	movs	r3, #2
 80014a8:	73fb      	strb	r3, [r7, #15]
	return (HAL_I2C_Master_Transmit(i2c, LM75_ADDR << 1, cmd, len,
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	f04f 31ff 	mov.w	r1, #4294967295
 80014b6:	9100      	str	r1, [sp, #0]
 80014b8:	219e      	movs	r1, #158	@ 0x9e
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f002 fb56 	bl	8003b6c <HAL_I2C_Master_Transmit>
 80014c0:	4603      	mov	r3, r0
	HAL_MAX_DELAY));
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <lm75Read>:

uint8_t lm75Read(I2C_HandleTypeDef *i2c) {
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af02      	add	r7, sp, #8
 80014d0:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2];
	HAL_StatusTypeDef res;
	cmd[0] = LM75_Temp;
 80014d2:	2300      	movs	r3, #0
 80014d4:	733b      	strb	r3, [r7, #12]
	res = HAL_I2C_Master_Transmit(i2c, LM75_ADDR << 1, cmd, 1,
 80014d6:	f107 020c 	add.w	r2, r7, #12
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	219e      	movs	r1, #158	@ 0x9e
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f002 fb41 	bl	8003b6c <HAL_I2C_Master_Transmit>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
	HAL_MAX_DELAY);
	if (res != HAL_OK)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <lm75Read+0x2e>
		return (0);
 80014f4:	2300      	movs	r3, #0
 80014f6:	e024      	b.n	8001542 <lm75Read+0x78>
	HAL_Delay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f001 fe5b 	bl	80031b4 <HAL_Delay>
	HAL_I2C_Master_Receive(i2c, LM75_ADDR << 1 | 1, cmd, 2,
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2302      	movs	r3, #2
 800150a:	219f      	movs	r1, #159	@ 0x9f
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f002 fc2b 	bl	8003d68 <HAL_I2C_Master_Receive>
	HAL_MAX_DELAY);
	if (res != HAL_OK)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <lm75Read+0x52>
		return (0);
 8001518:	2300      	movs	r3, #0
 800151a:	e012      	b.n	8001542 <lm75Read+0x78>
	return (((cmd[0] << 8) | cmd[1]) / 256.0f);
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	7b7a      	ldrb	r2, [r7, #13]
 8001522:	4313      	orrs	r3, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fecb 	bl	80002c0 <__aeabi_i2f>
 800152a:	4603      	mov	r3, r0
 800152c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffcd 	bl	80004d0 <__aeabi_fdiv>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f88b 	bl	8000654 <__aeabi_f2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	b2db      	uxtb	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uart1_ptr = &u1;
 8001552:	4b56      	ldr	r3, [pc, #344]	@ (80016ac <main+0x160>)
 8001554:	4a56      	ldr	r2, [pc, #344]	@ (80016b0 <main+0x164>)
 8001556:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f001 fdca 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f8c2 	bl	80016e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8001560:	f000 fa18 	bl	8001994 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001564:	f000 f91a 	bl	800179c <MX_I2C1_Init>
	MX_SPI1_Init();
 8001568:	f000 f960 	bl	800182c <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800156c:	f000 f994 	bl	8001898 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001570:	f000 f9bc 	bl	80018ec <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001574:	f000 f9e4 	bl	8001940 <MX_USART3_UART_Init>
#ifdef IWDG_DEBUG
	MX_IWDG_Init();
 8001578:	f000 f93e 	bl	80017f8 <MX_IWDG_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2120      	movs	r1, #32
 8001580:	484c      	ldr	r0, [pc, #304]	@ (80016b4 <main+0x168>)
 8001582:	f002 f996 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158a:	f001 fe13 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2108      	movs	r1, #8
 8001592:	4848      	ldr	r0, [pc, #288]	@ (80016b4 <main+0x168>)
 8001594:	f002 f98d 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001598:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800159c:	f001 fe0a 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2110      	movs	r1, #16
 80015a4:	4843      	ldr	r0, [pc, #268]	@ (80016b4 <main+0x168>)
 80015a6:	f002 f984 	bl	80038b2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ae:	f001 fe01 	bl	80031b4 <HAL_Delay>


	vlad = vladInit(SERVER);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f001 f8d9 	bl	800276a <vladInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a3f      	ldr	r2, [pc, #252]	@ (80016b8 <main+0x16c>)
 80015bc:	6013      	str	r3, [r2, #0]
	server = serverInit(SERVER);
 80015be:	2000      	movs	r0, #0
 80015c0:	f001 f947 	bl	8002852 <serverInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a3d      	ldr	r2, [pc, #244]	@ (80016bc <main+0x170>)
 80015c8:	6013      	str	r3, [r2, #0]
	ledInit(&led);
 80015ca:	483d      	ldr	r0, [pc, #244]	@ (80016c0 <main+0x174>)
 80015cc:	f7ff ff12 	bl	80013f4 <ledInit>
	rdss = rdssInit(0);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f001 f963 	bl	800289c <rdssInit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a3a      	ldr	r2, [pc, #232]	@ (80016c4 <main+0x178>)
 80015da:	6013      	str	r3, [r2, #0]
	loRa = loRaInit(&hspi1, MASTER_RECEIVER);
 80015dc:	2103      	movs	r1, #3
 80015de:	483a      	ldr	r0, [pc, #232]	@ (80016c8 <main+0x17c>)
 80015e0:	f7ff fdec 	bl	80011bc <loRaInit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a39      	ldr	r2, [pc, #228]	@ (80016cc <main+0x180>)
 80015e8:	6013      	str	r3, [r2, #0]
	lm75Init(&hi2c1);
 80015ea:	4839      	ldr	r0, [pc, #228]	@ (80016d0 <main+0x184>)
 80015ec:	f7ff ff53 	bl	8001496 <lm75Init>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2025      	movs	r0, #37	@ 0x25
 80015f6:	f001 fed8 	bl	80033aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fa:	2025      	movs	r0, #37	@ 0x25
 80015fc:	f001 fef1 	bl	80033e2 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	4934      	ldr	r1, [pc, #208]	@ (80016d4 <main+0x188>)
 8001604:	4834      	ldr	r0, [pc, #208]	@ (80016d8 <main+0x18c>)
 8001606:	f005 f96f 	bl	80068e8 <HAL_UART_Receive_IT>

	configureGPIO();
 800160a:	f000 ffa7 	bl	800255c <configureGPIO>
	configureADC();
 800160e:	f000 ff67 	bl	80024e0 <configureADC>
	calibrateADC();
 8001612:	f000 ff8d 	bl	8002530 <calibrateADC>
	uint32_t keepAliveStartTicks = HAL_GetTick();
 8001616:	f001 fdc3 	bl	80031a0 <HAL_GetTick>
 800161a:	6078      	str	r0, [r7, #4]
	rdss->lastUpdateTicks = HAL_GetTick();
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <main+0x178>)
 800161e:	681c      	ldr	r4, [r3, #0]
 8001620:	f001 fdbe 	bl	80031a0 <HAL_GetTick>
 8001624:	4603      	mov	r3, r0
 8001626:	6363      	str	r3, [r4, #52]	@ 0x34
#ifdef IWDG_DEBUG
	HAL_IWDG_Refresh(&hiwdg);
 8001628:	482c      	ldr	r0, [pc, #176]	@ (80016dc <main+0x190>)
 800162a:	f003 feb0 	bl	800538e <HAL_IWDG_Refresh>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		adcValues[0] = readADCChannel(0);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 ffd4 	bl	80025dc <readADCChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <main+0x194>)
 800163a:	801a      	strh	r2, [r3, #0]
		adcValues[1] = readADCChannel(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f000 ffcd 	bl	80025dc <readADCChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <main+0x194>)
 8001648:	805a      	strh	r2, [r3, #2]
		adcValues[2] = lm75Read(&hi2c1);
 800164a:	4821      	ldr	r0, [pc, #132]	@ (80016d0 <main+0x184>)
 800164c:	f7ff ff3d 	bl	80014ca <lm75Read>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <main+0x194>)
 8001656:	809a      	strh	r2, [r3, #4]
		updateMasterStatus(rdss, adcValues, 5000);
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <main+0x178>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001660:	491f      	ldr	r1, [pc, #124]	@ (80016e0 <main+0x194>)
 8001662:	4618      	mov	r0, r3
 8001664:	f000 ffd4 	bl	8002610 <updateMasterStatus>
		processUart1Rx(&u1, rdss, server, loRa);
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <main+0x178>)
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <main+0x170>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <main+0x180>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <main+0x164>)
 8001676:	f000 fd35 	bl	80020e4 <processUart1Rx>
		configureLoRaRx(loRa, MASTER_RECEIVER);
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <main+0x180>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fdfd 	bl	8001280 <configureLoRaRx>
		masterProcessLoRaRx(loRa, rdss, vlad);
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <main+0x180>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <main+0x178>)
 800168c:	6811      	ldr	r1, [r2, #0]
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <main+0x16c>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fe9a 	bl	80023cc <masterProcessLoRaRx>

#ifdef IWDG_DEBUG
		HAL_IWDG_Refresh(&hiwdg);
 8001698:	4810      	ldr	r0, [pc, #64]	@ (80016dc <main+0x190>)
 800169a:	f003 fe78 	bl	800538e <HAL_IWDG_Refresh>
#endif
		keepAliveStartTicks = enableKeepAliveLed(keepAliveStartTicks);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fef6 	bl	8002490 <enableKeepAliveLed>
 80016a4:	6078      	str	r0, [r7, #4]
		adcValues[0] = readADCChannel(0);
 80016a6:	bf00      	nop
 80016a8:	e7c1      	b.n	800162e <main+0xe2>
 80016aa:	bf00      	nop
 80016ac:	20000210 	.word	0x20000210
 80016b0:	20000234 	.word	0x20000234
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	20000370 	.word	0x20000370
 80016bc:	20000378 	.word	0x20000378
 80016c0:	20000214 	.word	0x20000214
 80016c4:	20000230 	.word	0x20000230
 80016c8:	200000e0 	.word	0x200000e0
 80016cc:	20000374 	.word	0x20000374
 80016d0:	20000080 	.word	0x20000080
 80016d4:	2000037c 	.word	0x2000037c
 80016d8:	20000138 	.word	0x20000138
 80016dc:	200000d4 	.word	0x200000d4
 80016e0:	20000078 	.word	0x20000078

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	@ 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ee:	2228      	movs	r2, #40	@ 0x28
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 feee 	bl	80074d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001714:	2309      	movs	r3, #9
 8001716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001734:	2300      	movs	r3, #0
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fe35 	bl	80053ac <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001748:	f001 f809 	bl	800275e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f004 f8a1 	bl	80058b0 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001774:	f000 fff3 	bl	800275e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001778:	2302      	movs	r3, #2
 800177a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4618      	mov	r0, r3
 8001784:	f004 fa22 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800178e:	f000 ffe6 	bl	800275e <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	@ 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <MX_I2C1_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_I2C1_Init+0x50>)
 80017da:	f002 f883 	bl	80038e4 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 ffbb 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000080 	.word	0x20000080
 80017f0:	40005400 	.word	0x40005400
 80017f4:	000186a0 	.word	0x000186a0

080017f8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_IWDG_Init+0x2c>)
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <MX_IWDG_Init+0x30>)
 8001800:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <MX_IWDG_Init+0x2c>)
 8001804:	2205      	movs	r2, #5
 8001806:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1875;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_IWDG_Init+0x2c>)
 800180a:	f240 7253 	movw	r2, #1875	@ 0x753
 800180e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <MX_IWDG_Init+0x2c>)
 8001812:	f003 fd7a 	bl	800530a <HAL_IWDG_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800181c:	f000 ff9f 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200000d4 	.word	0x200000d4
 8001828:	40003000 	.word	0x40003000

0800182c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001830:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001832:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <MX_SPI1_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800183c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_SPI1_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800185c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001860:	2218      	movs	r2, #24
 8001862:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_SPI1_Init+0x64>)
 8001878:	220a      	movs	r2, #10
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_SPI1_Init+0x64>)
 800187e:	f004 fa5b 	bl	8005d38 <HAL_SPI_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001888:	f000 ff69 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000e0 	.word	0x200000e0
 8001894:	40013000 	.word	0x40013000

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f004 ffba 	bl	8006848 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 ff40 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000138 	.word	0x20000138
 80018e8:	40013800 	.word	0x40013800

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f004 ff90 	bl	8006848 <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 ff16 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000180 	.word	0x20000180
 800193c:	40004400 	.word	0x40004400

08001940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_USART3_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_USART3_UART_Init+0x4c>)
 8001978:	f004 ff66 	bl	8006848 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001982:	f000 feec 	bl	800275e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001c8 	.word	0x200001c8
 8001990:	40004800 	.word	0x40004800

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019ae:	f043 0320 	orr.w	r3, r3, #32
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_GPIO_Init+0x90>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 80019f0:	2200      	movs	r2, #0
 80019f2:	f247 313b 	movw	r1, #29499	@ 0x733b
 80019f6:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <MX_GPIO_Init+0x94>)
 80019f8:	f001 ff5b 	bl	80038b2 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
                           LORA_BUSSY_Pin LORA_TX_OK_Pin LORA_RX_OK_Pin KEEP_ALIVE_Pin
                           RS485_DE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 80019fc:	f247 333b 	movw	r3, #29499	@ 0x733b
 8001a00:	613b      	str	r3, [r7, #16]
                          |LORA_BUSSY_Pin|LORA_TX_OK_Pin|LORA_RX_OK_Pin|KEEP_ALIVE_Pin
                          |RS485_DE_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <MX_GPIO_Init+0x94>)
 8001a16:	f001 fdb1 	bl	800357c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010c00 	.word	0x40010c00

08001a2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */
	if (uart1_ptr->rxSize >= UART2_RX_BUFFLEN) {
		cleanRx(uart1_ptr);
		uart1_ptr->rxSize = 0;
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	490f      	ldr	r1, [pc, #60]	@ (8001a74 <HAL_UART_RxCpltCallback+0x48>)
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <HAL_UART_RxCpltCallback+0x4c>)
 8001a3a:	f004 ff55 	bl	80068e8 <HAL_UART_Receive_IT>
	uart1_ptr->rxData[uart1_ptr->rxSize++] = rxData;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_UART_RxCpltCallback+0x50>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <HAL_UART_RxCpltCallback+0x50>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f893 2131 	ldrb.w	r2, [r3, #305]	@ 0x131
 8001a4a:	1c50      	adds	r0, r2, #1
 8001a4c:	b2c0      	uxtb	r0, r0
 8001a4e:	f883 0131 	strb.w	r0, [r3, #305]	@ 0x131
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_UART_RxCpltCallback+0x48>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	548b      	strb	r3, [r1, r2]
	if (rxData == RDSS_END_MARK)
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_UART_RxCpltCallback+0x48>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a5e:	d104      	bne.n	8001a6a <HAL_UART_RxCpltCallback+0x3e>
		uart1_ptr->isReceivedDataReady = true;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_UART_RxCpltCallback+0x50>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000037c 	.word	0x2000037c
 8001a78:	20000138 	.word	0x20000138
 8001a7c:	20000210 	.word	0x20000210

08001a80 <executeServerCmd>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}

uint8_t executeServerCmd(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef res;

	if (rdss->buffSize < LTEL_QUERY_LENGTH || rdss->buffSize > LTEL_SET_LENGTH)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d903      	bls.n	8001aa2 <executeServerCmd+0x22>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	7a1b      	ldrb	r3, [r3, #8]
 8001a9e:	2b0d      	cmp	r3, #13
 8001aa0:	d901      	bls.n	8001aa6 <executeServerCmd+0x26>
		return 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e272      	b.n	8001f8c <executeServerCmd+0x50c>

	index = setRdssStartData(rdss, buffer, server->function);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	7d5b      	ldrb	r3, [r3, #21]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f001 f822 	bl	8002af8 <setRdssStartData>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]

	switch (rdss->cmd) {
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b25      	cmp	r3, #37	@ 0x25
 8001abe:	f300 808b 	bgt.w	8001bd8 <executeServerCmd+0x158>
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	da54      	bge.n	8001b70 <executeServerCmd+0xf0>
		changeMode(loRa, loRa->mode);
		writeLoRaParametersReg(loRa);
		break;

	default:
		break;
 8001ac6:	e24a      	b.n	8001f5e <executeServerCmd+0x4de>
	switch (rdss->cmd) {
 8001ac8:	3b90      	subs	r3, #144	@ 0x90
 8001aca:	2b25      	cmp	r3, #37	@ 0x25
 8001acc:	f200 8247 	bhi.w	8001f5e <executeServerCmd+0x4de>
 8001ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <executeServerCmd+0x58>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001d4f 	.word	0x08001d4f
 8001adc:	08001f5f 	.word	0x08001f5f
 8001ae0:	08001f5f 	.word	0x08001f5f
 8001ae4:	08001f5f 	.word	0x08001f5f
 8001ae8:	08001f5f 	.word	0x08001f5f
 8001aec:	08001f5f 	.word	0x08001f5f
 8001af0:	08001f5f 	.word	0x08001f5f
 8001af4:	08001f5f 	.word	0x08001f5f
 8001af8:	08001f5f 	.word	0x08001f5f
 8001afc:	08001f5f 	.word	0x08001f5f
 8001b00:	08001f5f 	.word	0x08001f5f
 8001b04:	08001f5f 	.word	0x08001f5f
 8001b08:	08001f5f 	.word	0x08001f5f
 8001b0c:	08001f5f 	.word	0x08001f5f
 8001b10:	08001f5f 	.word	0x08001f5f
 8001b14:	08001f5f 	.word	0x08001f5f
 8001b18:	08001f5f 	.word	0x08001f5f
 8001b1c:	08001f5f 	.word	0x08001f5f
 8001b20:	08001f5f 	.word	0x08001f5f
 8001b24:	08001f5f 	.word	0x08001f5f
 8001b28:	08001f5f 	.word	0x08001f5f
 8001b2c:	08001f5f 	.word	0x08001f5f
 8001b30:	08001f5f 	.word	0x08001f5f
 8001b34:	08001f5f 	.word	0x08001f5f
 8001b38:	08001f5f 	.word	0x08001f5f
 8001b3c:	08001f5f 	.word	0x08001f5f
 8001b40:	08001f5f 	.word	0x08001f5f
 8001b44:	08001f5f 	.word	0x08001f5f
 8001b48:	08001f5f 	.word	0x08001f5f
 8001b4c:	08001f5f 	.word	0x08001f5f
 8001b50:	08001f5f 	.word	0x08001f5f
 8001b54:	08001f5f 	.word	0x08001f5f
 8001b58:	08001dc9 	.word	0x08001dc9
 8001b5c:	08001e1d 	.word	0x08001e1d
 8001b60:	08001f5f 	.word	0x08001f5f
 8001b64:	08001e73 	.word	0x08001e73
 8001b68:	08001ec3 	.word	0x08001ec3
 8001b6c:	08001f13 	.word	0x08001f13
 8001b70:	3b10      	subs	r3, #16
 8001b72:	2b15      	cmp	r3, #21
 8001b74:	f200 81f3 	bhi.w	8001f5e <executeServerCmd+0x4de>
 8001b78:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <executeServerCmd+0x100>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001cc1 	.word	0x08001cc1
 8001b84:	08001be7 	.word	0x08001be7
 8001b88:	08001f5f 	.word	0x08001f5f
 8001b8c:	08001f5f 	.word	0x08001f5f
 8001b90:	08001f5f 	.word	0x08001f5f
 8001b94:	08001f5f 	.word	0x08001f5f
 8001b98:	08001f5f 	.word	0x08001f5f
 8001b9c:	08001f5f 	.word	0x08001f5f
 8001ba0:	08001f5f 	.word	0x08001f5f
 8001ba4:	08001f5f 	.word	0x08001f5f
 8001ba8:	08001f5f 	.word	0x08001f5f
 8001bac:	08001f5f 	.word	0x08001f5f
 8001bb0:	08001f5f 	.word	0x08001f5f
 8001bb4:	08001f5f 	.word	0x08001f5f
 8001bb8:	08001f5f 	.word	0x08001f5f
 8001bbc:	08001f5f 	.word	0x08001f5f
 8001bc0:	08001c1d 	.word	0x08001c1d
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	08001f5f 	.word	0x08001f5f
 8001bcc:	08001c99 	.word	0x08001c99
 8001bd0:	08001c4d 	.word	0x08001c4d
 8001bd4:	08001c75 	.word	0x08001c75
 8001bd8:	2bb5      	cmp	r3, #181	@ 0xb5
 8001bda:	f300 81c0 	bgt.w	8001f5e <executeServerCmd+0x4de>
 8001bde:	2b90      	cmp	r3, #144	@ 0x90
 8001be0:	f6bf af72 	bge.w	8001ac8 <executeServerCmd+0x48>
		break;
 8001be4:	e1bb      	b.n	8001f5e <executeServerCmd+0x4de>
		index = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
		break;
 8001bea:	e1b9      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	75fa      	strb	r2, [r7, #23]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f000 ffef 	bl	8002bec <freqEncode>
		index += sizeof(loRa->upFreq);
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	3304      	adds	r3, #4
 8001c12:	75fb      	strb	r3, [r7, #23]
		index++;
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	3301      	adds	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
		break;
 8001c1a:	e1a1      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	75fa      	strb	r2, [r7, #23]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	2204      	movs	r2, #4
 8001c2a:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 ffd7 	bl	8002bec <freqEncode>
		index += sizeof(loRa->dlFreq);
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	3304      	adds	r3, #4
 8001c42:	75fb      	strb	r3, [r7, #23]
		index++;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	3301      	adds	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
		break;
 8001c4a:	e189      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	75fa      	strb	r2, [r7, #23]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7b5a      	ldrb	r2, [r3, #13]
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	1c59      	adds	r1, r3, #1
 8001c64:	75f9      	strb	r1, [r7, #23]
 8001c66:	4619      	mov	r1, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3a06      	subs	r2, #6
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e175      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	75fa      	strb	r2, [r7, #23]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	75fa      	strb	r2, [r7, #23]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	7bd2      	ldrb	r2, [r2, #15]
 8001c94:	701a      	strb	r2, [r3, #0]
		break;
 8001c96:	e163      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	75fa      	strb	r2, [r7, #23]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7b9a      	ldrb	r2, [r3, #14]
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	75f9      	strb	r1, [r7, #23]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3201      	adds	r2, #1
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
		break;
 8001cbe:	e14f      	b.n	8001f60 <executeServerCmd+0x4e0>
		index = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = RDSS_START_MARK;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	75fa      	strb	r2, [r7, #23]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	227e      	movs	r2, #126	@ 0x7e
 8001cd2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	75fa      	strb	r2, [r7, #23]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	7d52      	ldrb	r2, [r2, #21]
 8001ce4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	75fa      	strb	r2, [r7, #23]
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	7c12      	ldrb	r2, [r2, #16]
 8001cf6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	75fa      	strb	r2, [r7, #23]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	2210      	movs	r2, #16
 8001d06:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	75fa      	strb	r2, [r7, #23]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	75fa      	strb	r2, [r7, #23]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	2202      	movs	r2, #2
 8001d26:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	75fa      	strb	r2, [r7, #23]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	7d52      	ldrb	r2, [r2, #21]
 8001d38:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	75fa      	strb	r2, [r7, #23]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	7c12      	ldrb	r2, [r2, #16]
 8001d4a:	701a      	strb	r2, [r3, #0]
		break;
 8001d4c:	e108      	b.n	8001f60 <executeServerCmd+0x4e0>
		server->function = rdss->buff[6];
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	3306      	adds	r3, #6
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	755a      	strb	r2, [r3, #21]
		server->id = rdss->buff[7];
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	3307      	adds	r3, #7
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	751a      	strb	r2, [r3, #20]
		rdss->id = server->id;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7d1a      	ldrb	r2, [r3, #20]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	741a      	strb	r2, [r3, #16]
		index = setRdssStartData(rdss, buffer, server->function);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7d5b      	ldrb	r3, [r3, #21]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f000 febe 	bl	8002af8 <setRdssStartData>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = SERVER;
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	75fa      	strb	r2, [r7, #23]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	75fa      	strb	r2, [r7, #23]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	7c12      	ldrb	r2, [r2, #16]
 8001da0:	701a      	strb	r2, [r3, #0]
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->function), 3, 1);
 8001da2:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <executeServerCmd+0x514>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 8001daa:	2301      	movs	r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fac0 	bl	8001334 <HAL_savePage>
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->id), 4, 1);
 8001db4:	4b77      	ldr	r3, [pc, #476]	@ (8001f94 <executeServerCmd+0x514>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fab7 	bl	8001334 <HAL_savePage>
		break;
 8001dc6:	e0cb      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	75fa      	strb	r2, [r7, #23]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buff + index);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	4413      	add	r3, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fed1 	bl	8002b88 <freqDecode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3304      	adds	r3, #4
 8001df2:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1d19      	adds	r1, r3, #4
 8001df8:	2304      	movs	r3, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fa99 	bl	8001334 <HAL_savePage>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe ffc9 	bl	8000da6 <changeMode>
		writeLoRaParametersReg(loRa);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe ff5f 	bl	8000cd8 <writeLoRaParametersReg>
		break;
 8001e1a:	e0a1      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	75fa      	strb	r2, [r7, #23]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buff + index);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	4413      	add	r3, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fea7 	bl	8002b88 <freqDecode>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	3304      	adds	r3, #4
 8001e46:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0108 	add.w	r1, r3, #8
 8001e4e:	2304      	movs	r3, #4
 8001e50:	2204      	movs	r2, #4
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fa6e 	bl	8001334 <HAL_savePage>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001e62:	4619      	mov	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe ff9e 	bl	8000da6 <changeMode>
		writeLoRaParametersReg(loRa);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe ff34 	bl	8000cd8 <writeLoRaParametersReg>
		break;
 8001e70:	e076      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	75fa      	strb	r2, [r7, #23]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buff[index++] - 1;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	1c59      	adds	r1, r3, #1
 8001e8a:	75f9      	strb	r1, [r7, #23]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	739a      	strb	r2, [r3, #14]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f103 010e 	add.w	r1, r3, #14
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fa46 	bl	8001334 <HAL_savePage>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe ff76 	bl	8000da6 <changeMode>
		writeLoRaParametersReg(loRa);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe ff0c 	bl	8000cd8 <writeLoRaParametersReg>
		break;
 8001ec0:	e04e      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	75fa      	strb	r2, [r7, #23]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		loRa->spreadFactor = rdss->buff[index++] + 6;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	75f9      	strb	r1, [r7, #23]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3306      	adds	r3, #6
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	735a      	strb	r2, [r3, #13]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f103 010d 	add.w	r1, r3, #13
 8001eee:	2301      	movs	r3, #1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fa1e 	bl	8001334 <HAL_savePage>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7fe ff4e 	bl	8000da6 <changeMode>
		writeLoRaParametersReg(loRa);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fee4 	bl	8000cd8 <writeLoRaParametersReg>
		break;
 8001f10:	e026      	b.n	8001f60 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	75fa      	strb	r2, [r7, #23]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buff[index++];
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	1c59      	adds	r1, r3, #1
 8001f2a:	75f9      	strb	r1, [r7, #23]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	73da      	strb	r2, [r3, #15]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 010f 	add.w	r1, r3, #15
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff f9f8 	bl	8001334 <HAL_savePage>
 8001f44:	4603      	mov	r3, r0
 8001f46:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe ff28 	bl	8000da6 <changeMode>
		writeLoRaParametersReg(loRa);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe febe 	bl	8000cd8 <writeLoRaParametersReg>
		break;
 8001f5c:	e000      	b.n	8001f60 <executeServerCmd+0x4e0>
		break;
 8001f5e:	bf00      	nop
	}

	index += setCrc(buffer, index);
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	4619      	mov	r1, r3
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fd9f 	bl	8002aa8 <setCrc>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	4413      	add	r3, r2
 8001f72:	75fb      	strb	r3, [r7, #23]
	buffer[index++] = RDSS_END_MARK;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	75fa      	strb	r2, [r7, #23]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	227f      	movs	r2, #127	@ 0x7f
 8001f82:	701a      	strb	r2, [r3, #0]
	rdss->status = UART_SEND;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	220d      	movs	r2, #13
 8001f88:	745a      	strb	r2, [r3, #17]
	return index;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000370 	.word	0x20000370

08001f98 <clearRx>:
		break;
	}
	cleanTx(u1);
}

void clearRx(UART1_t *u1) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	memset(u1->rxData, 0, sizeof(u1->rxData));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 fa93 	bl	80074d4 <memset>
	u1->rxSize = 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <transmitRdssQuery>:

void transmitRdssQuery(RDSS_t *rdss, SX1278_t *loRa) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

	rdss->idQuery = rdss->idReceived;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7bda      	ldrb	r2, [r3, #15]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	739a      	strb	r2, [r3, #14]
	loRa->txData = rdss->buff;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	loRa->txSize = rdss->buffSize;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7a1a      	ldrb	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	changeMode(loRa, MASTER_SENDER);
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	6838      	ldr	r0, [r7, #0]
 8001fea:	f7fe fedc 	bl	8000da6 <changeMode>
	transmit(loRa); // TODO: se puede mejorar usando enviando la trama a transmitir
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f7ff f85f 	bl	80010b2 <transmit>
	if (loRa->status == TX_DONE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d104      	bne.n	8002008 <transmitRdssQuery+0x48>
		HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2108      	movs	r1, #8
 8002002:	480d      	ldr	r0, [pc, #52]	@ (8002038 <transmitRdssQuery+0x78>)
 8002004:	f001 fc55 	bl	80038b2 <HAL_GPIO_WritePin>
	uint32_t timeStart = HAL_GetTick();
 8002008:	f001 f8ca 	bl	80031a0 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]
	changeMode(loRa, MASTER_RECEIVER);
 800200e:	2103      	movs	r1, #3
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f7fe fec8 	bl	8000da6 <changeMode>
	HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2108      	movs	r1, #8
 800201a:	4807      	ldr	r0, [pc, #28]	@ (8002038 <transmitRdssQuery+0x78>)
 800201c:	f001 fc49 	bl	80038b2 <HAL_GPIO_WritePin>
	loRa->lastChangeMode = HAL_GetTick() - timeStart;
 8002020:	f001 f8be 	bl	80031a0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad2      	subs	r2, r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40010c00 	.word	0x40010c00

0800203c <processServerCmd>:

void processServerCmd(UART1_t *u1, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
	if (rdss->cmd == QUERY_MASTER_STATUS) {
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b13      	cmp	r3, #19
 8002050:	d110      	bne.n	8002074 <processServerCmd+0x38>
		for (uint8_t i = 0; i < 15; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	e009      	b.n	800206c <processServerCmd+0x30>
			writeTxReg(rdss->queryBuffer[i]);
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	7cdb      	ldrb	r3, [r3, #19]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fff3 	bl	800304c <writeTxReg>
		for (uint8_t i = 0; i < 15; i++)
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	3301      	adds	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b0e      	cmp	r3, #14
 8002070:	d9f2      	bls.n	8002058 <processServerCmd+0x1c>
		for (uint8_t i = 0; i < u1->txSize; i++)
			writeTxReg(u1->txData[i]);
		u1->txSize = 0;
		free(u1->txData);
	}
}
 8002072:	e033      	b.n	80020dc <processServerCmd+0xa0>
		u1->txData = malloc(sizeof(uint8_t) * 25);
 8002074:	2019      	movs	r0, #25
 8002076:	f005 f96f 	bl	8007358 <malloc>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
		u1->txSize = executeServerCmd(u1->txData, rdss, loRa, server);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f8d3 012c 	ldr.w	r0, [r3, #300]	@ 0x12c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	f7ff fcf6 	bl	8001a80 <executeServerCmd>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		for (uint8_t i = 0; i < u1->txSize; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	75bb      	strb	r3, [r7, #22]
 80020a2:	e00b      	b.n	80020bc <processServerCmd+0x80>
			writeTxReg(u1->txData[i]);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80020aa:	7dbb      	ldrb	r3, [r7, #22]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 ffcb 	bl	800304c <writeTxReg>
		for (uint8_t i = 0; i < u1->txSize; i++)
 80020b6:	7dbb      	ldrb	r3, [r7, #22]
 80020b8:	3301      	adds	r3, #1
 80020ba:	75bb      	strb	r3, [r7, #22]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80020c2:	7dba      	ldrb	r2, [r7, #22]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3ed      	bcc.n	80020a4 <processServerCmd+0x68>
		u1->txSize = 0;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		free(u1->txData);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 f946 	bl	8007368 <free>
}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <processUart1Rx>:

void processUart1Rx(UART1_t *u1, RDSS_t *rdss, Server_t *server, SX1278_t *loRa) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
	if (u1->isReceivedDataReady == false)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d13e      	bne.n	8002180 <processUart1Rx+0x9c>
		return;
	u1->isReceivedDataReady = false;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
	//HAL_Delay(1);
	if (validate(u1->rxData, u1->rxSize) != DATA_OK) {
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f000 fc98 	bl	8002a4a <validate>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <processUart1Rx+0x54>
		memset(u1->rxData, 0, sizeof(u1->rxData));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f005 f9d3 	bl	80074d4 <memset>
		u1->rxSize = 0;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		return;
 8002136:	e024      	b.n	8002182 <processUart1Rx+0x9e>
	}
	updateRdss(rdss, u1->rxData, u1->rxSize);
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002140:	461a      	mov	r2, r3
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	f000 fd6a 	bl	8002c1c <updateRdss>
	if (rdss->idReceived == rdss->id) {
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	7bda      	ldrb	r2, [r3, #15]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	7c1b      	ldrb	r3, [r3, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <processUart1Rx+0x7e>
		processServerCmd(u1, rdss, loRa, server);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff6e 	bl	800203c <processServerCmd>
 8002160:	e007      	b.n	8002172 <processUart1Rx+0x8e>
	} else if (rdss->cmd != 0) {
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <processUart1Rx+0x8e>
		transmitRdssQuery(rdss, loRa);
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	68b8      	ldr	r0, [r7, #8]
 800216e:	f7ff ff27 	bl	8001fc0 <transmitRdssQuery>
	}

	clearRx(u1);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff ff10 	bl	8001f98 <clearRx>
	rdssReinit(rdss);
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f000 fba7 	bl	80028cc <rdssReinit>
 800217e:	e000      	b.n	8002182 <processUart1Rx+0x9e>
		return;
 8002180:	bf00      	nop
}
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <masterProcessRdss>:
		return 1;
	default:
		return 0;
	}
}
void masterProcessRdss(RDSS_t *rdss) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	uint8_t error[] = { 0xff, 0xff, 0xff, 0xff };
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	60bb      	str	r3, [r7, #8]
	switch (rdss->cmd) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b34      	cmp	r3, #52	@ 0x34
 800219c:	f300 80d2 	bgt.w	8002344 <masterProcessRdss+0x1bc>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da5f      	bge.n	8002264 <masterProcessRdss+0xdc>
 80021a4:	e0fc      	b.n	80023a0 <masterProcessRdss+0x218>
 80021a6:	3b90      	subs	r3, #144	@ 0x90
 80021a8:	2b2b      	cmp	r3, #43	@ 0x2b
 80021aa:	f200 80f9 	bhi.w	80023a0 <masterProcessRdss+0x218>
 80021ae:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <masterProcessRdss+0x2c>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	08002351 	.word	0x08002351
 80021b8:	080023a1 	.word	0x080023a1
 80021bc:	080023a1 	.word	0x080023a1
 80021c0:	080023a1 	.word	0x080023a1
 80021c4:	080023a1 	.word	0x080023a1
 80021c8:	080023a1 	.word	0x080023a1
 80021cc:	080023a1 	.word	0x080023a1
 80021d0:	080023a1 	.word	0x080023a1
 80021d4:	080023a1 	.word	0x080023a1
 80021d8:	080023a1 	.word	0x080023a1
 80021dc:	080023a1 	.word	0x080023a1
 80021e0:	080023a1 	.word	0x080023a1
 80021e4:	080023a1 	.word	0x080023a1
 80021e8:	080023a1 	.word	0x080023a1
 80021ec:	080023a1 	.word	0x080023a1
 80021f0:	080023a1 	.word	0x080023a1
 80021f4:	080023a1 	.word	0x080023a1
 80021f8:	080023a1 	.word	0x080023a1
 80021fc:	080023a1 	.word	0x080023a1
 8002200:	080023a1 	.word	0x080023a1
 8002204:	080023a1 	.word	0x080023a1
 8002208:	080023a1 	.word	0x080023a1
 800220c:	080023a1 	.word	0x080023a1
 8002210:	080023a1 	.word	0x080023a1
 8002214:	080023a1 	.word	0x080023a1
 8002218:	080023a1 	.word	0x080023a1
 800221c:	080023a1 	.word	0x080023a1
 8002220:	080023a1 	.word	0x080023a1
 8002224:	080023a1 	.word	0x080023a1
 8002228:	080023a1 	.word	0x080023a1
 800222c:	080023a1 	.word	0x080023a1
 8002230:	080023a1 	.word	0x080023a1
 8002234:	08002351 	.word	0x08002351
 8002238:	08002351 	.word	0x08002351
 800223c:	08002351 	.word	0x08002351
 8002240:	08002351 	.word	0x08002351
 8002244:	08002351 	.word	0x08002351
 8002248:	08002351 	.word	0x08002351
 800224c:	08002379 	.word	0x08002379
 8002250:	08002351 	.word	0x08002351
 8002254:	08002351 	.word	0x08002351
 8002258:	08002351 	.word	0x08002351
 800225c:	08002351 	.word	0x08002351
 8002260:	08002351 	.word	0x08002351
 8002264:	2b34      	cmp	r3, #52	@ 0x34
 8002266:	f200 809b 	bhi.w	80023a0 <masterProcessRdss+0x218>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <masterProcessRdss+0xe8>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002351 	.word	0x08002351
 8002274:	080023a1 	.word	0x080023a1
 8002278:	080023a1 	.word	0x080023a1
 800227c:	080023a1 	.word	0x080023a1
 8002280:	080023a1 	.word	0x080023a1
 8002284:	080023a1 	.word	0x080023a1
 8002288:	080023a1 	.word	0x080023a1
 800228c:	080023a1 	.word	0x080023a1
 8002290:	080023a1 	.word	0x080023a1
 8002294:	080023a1 	.word	0x080023a1
 8002298:	080023a1 	.word	0x080023a1
 800229c:	080023a1 	.word	0x080023a1
 80022a0:	080023a1 	.word	0x080023a1
 80022a4:	080023a1 	.word	0x080023a1
 80022a8:	080023a1 	.word	0x080023a1
 80022ac:	080023a1 	.word	0x080023a1
 80022b0:	08002351 	.word	0x08002351
 80022b4:	08002351 	.word	0x08002351
 80022b8:	08002351 	.word	0x08002351
 80022bc:	08002351 	.word	0x08002351
 80022c0:	08002351 	.word	0x08002351
 80022c4:	080023a1 	.word	0x080023a1
 80022c8:	080023a1 	.word	0x080023a1
 80022cc:	080023a1 	.word	0x080023a1
 80022d0:	080023a1 	.word	0x080023a1
 80022d4:	080023a1 	.word	0x080023a1
 80022d8:	080023a1 	.word	0x080023a1
 80022dc:	080023a1 	.word	0x080023a1
 80022e0:	080023a1 	.word	0x080023a1
 80022e4:	080023a1 	.word	0x080023a1
 80022e8:	080023a1 	.word	0x080023a1
 80022ec:	080023a1 	.word	0x080023a1
 80022f0:	08002351 	.word	0x08002351
 80022f4:	08002351 	.word	0x08002351
 80022f8:	08002351 	.word	0x08002351
 80022fc:	08002351 	.word	0x08002351
 8002300:	08002351 	.word	0x08002351
 8002304:	08002351 	.word	0x08002351
 8002308:	080023a1 	.word	0x080023a1
 800230c:	080023a1 	.word	0x080023a1
 8002310:	080023a1 	.word	0x080023a1
 8002314:	080023a1 	.word	0x080023a1
 8002318:	080023a1 	.word	0x080023a1
 800231c:	080023a1 	.word	0x080023a1
 8002320:	080023a1 	.word	0x080023a1
 8002324:	080023a1 	.word	0x080023a1
 8002328:	080023a1 	.word	0x080023a1
 800232c:	080023a1 	.word	0x080023a1
 8002330:	080023a1 	.word	0x080023a1
 8002334:	08002351 	.word	0x08002351
 8002338:	08002351 	.word	0x08002351
 800233c:	08002351 	.word	0x08002351
 8002340:	08002351 	.word	0x08002351
 8002344:	2bbb      	cmp	r3, #187	@ 0xbb
 8002346:	dc2b      	bgt.n	80023a0 <masterProcessRdss+0x218>
 8002348:	2b90      	cmp	r3, #144	@ 0x90
 800234a:	f6bf af2c 	bge.w	80021a6 <masterProcessRdss+0x1e>
 800234e:	e027      	b.n	80023a0 <masterProcessRdss+0x218>
	case SET_PARAMETER_FREQOUT:
	case SET_PARAMETERS:
	case SET_PARAMETER_FREQBASE:
	case QUERY_PARAMETER_PdBm:
	case QUERY_UART1:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e00a      	b.n	800236c <masterProcessRdss+0x1e4>
			writeTxReg(rdss->buff[i]);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fe73 	bl	800304c <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7a1b      	ldrb	r3, [r3, #8]
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	429a      	cmp	r2, r3
 8002374:	d3ef      	bcc.n	8002356 <masterProcessRdss+0x1ce>
		break;
 8002376:	e025      	b.n	80023c4 <masterProcessRdss+0x23c>
	case SET_OUT:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	73bb      	strb	r3, [r7, #14]
 800237c:	e00a      	b.n	8002394 <masterProcessRdss+0x20c>
			writeTxReg(rdss->buff[i]);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	7bbb      	ldrb	r3, [r7, #14]
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe5f 	bl	800304c <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	3301      	adds	r3, #1
 8002392:	73bb      	strb	r3, [r7, #14]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7a1b      	ldrb	r3, [r3, #8]
 8002398:	7bba      	ldrb	r2, [r7, #14]
 800239a:	429a      	cmp	r2, r3
 800239c:	d3ef      	bcc.n	800237e <masterProcessRdss+0x1f6>
		break;
 800239e:	e011      	b.n	80023c4 <masterProcessRdss+0x23c>
	default:
		for (uint8_t i = 0; i < sizeof(error); i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	737b      	strb	r3, [r7, #13]
 80023a4:	e00a      	b.n	80023bc <masterProcessRdss+0x234>
			writeTxReg(error[i]);
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	3310      	adds	r3, #16
 80023aa:	443b      	add	r3, r7
 80023ac:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fe4b 	bl	800304c <writeTxReg>
		for (uint8_t i = 0; i < sizeof(error); i++)
 80023b6:	7b7b      	ldrb	r3, [r7, #13]
 80023b8:	3301      	adds	r3, #1
 80023ba:	737b      	strb	r3, [r7, #13]
 80023bc:	7b7b      	ldrb	r3, [r7, #13]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d9f1      	bls.n	80023a6 <masterProcessRdss+0x21e>
		break;
 80023c2:	bf00      	nop
	}
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <masterProcessLoRaRx>:

void masterProcessLoRaRx(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]

	if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 80023d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023dc:	482b      	ldr	r0, [pc, #172]	@ (800248c <masterProcessLoRaRx+0xc0>)
 80023de:	f001 fa51 	bl	8003884 <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d04a      	beq.n	800247e <masterProcessLoRaRx+0xb2>
	LORA_BUSSY_Pin) == GPIO_PIN_RESET)
		return; // if (crcErrorActivation(loRa) != 1)

	getRxFifoData(loRa);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7fe fdaf 	bl	8000f4c <getRxFifoData>
	clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7fe fc5f 	bl	8000cb2 <clearIrqFlagsReg>
	if (loRa->rxData < 0)
		return;

	if (validate(loRa->rxData, loRa->rxSize) != DATA_OK)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fb21 	bl	8002a4a <validate>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d139      	bne.n	8002482 <masterProcessLoRaRx+0xb6>
		return;

	updateRdss(rdss, loRa->rxData, loRa->rxSize);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f103 012f 	add.w	r1, r3, #47	@ 0x2f
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 315b 	ldrb.w	r3, [r3, #347]	@ 0x15b
 800241a:	461a      	mov	r2, r3
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f000 fbfd 	bl	8002c1c <updateRdss>

	if (rdss->idReceived != rdss->idQuery) {
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	7bda      	ldrb	r2, [r3, #15]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	7b9b      	ldrb	r3, [r3, #14]
 800242a:	429a      	cmp	r2, r3
 800242c:	d003      	beq.n	8002436 <masterProcessLoRaRx+0x6a>
		rdss->status = WRONG_MODULE_ID;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2205      	movs	r2, #5
 8002432:	745a      	strb	r2, [r3, #17]
		return;
 8002434:	e026      	b.n	8002484 <masterProcessLoRaRx+0xb8>
	}
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 8002436:	2201      	movs	r2, #1
 8002438:	2110      	movs	r1, #16
 800243a:	4814      	ldr	r0, [pc, #80]	@ (800248c <masterProcessLoRaRx+0xc0>)
 800243c:	f001 fa39 	bl	80038b2 <HAL_GPIO_WritePin>
	masterProcessRdss(rdss);
 8002440:	68b8      	ldr	r0, [r7, #8]
 8002442:	f7ff fea1 	bl	8002188 <masterProcessRdss>
	rdssReinit(rdss);
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f000 fa40 	bl	80028cc <rdssReinit>
	loRa->rxSize = 0;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
	setLoRaLowFreqModeReg(loRa, SLEEP);
 8002454:	2100      	movs	r1, #0
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7fe fc0f 	bl	8000c7a <setLoRaLowFreqModeReg>
	uint8_t addr = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
	writeRegister(loRa->spi, LR_RegFifoAddrPtr, &addr, 1);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8d3 0164 	ldr.w	r0, [r3, #356]	@ 0x164
 8002466:	f107 0217 	add.w	r2, r7, #23
 800246a:	2301      	movs	r3, #1
 800246c:	210d      	movs	r1, #13
 800246e:	f7fe fab3 	bl	80009d8 <writeRegister>
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	2110      	movs	r1, #16
 8002476:	4805      	ldr	r0, [pc, #20]	@ (800248c <masterProcessLoRaRx+0xc0>)
 8002478:	f001 fa1b 	bl	80038b2 <HAL_GPIO_WritePin>
 800247c:	e002      	b.n	8002484 <masterProcessLoRaRx+0xb8>
		return; // if (crcErrorActivation(loRa) != 1)
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <masterProcessLoRaRx+0xb8>
		return;
 8002482:	bf00      	nop
}
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40010c00 	.word	0x40010c00

08002490 <enableKeepAliveLed>:

uint32_t enableKeepAliveLed(uint32_t keepAliveStartTicks) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - keepAliveStartTicks > 1000) {
 8002498:	f000 fe82 	bl	80031a0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024a6:	d908      	bls.n	80024ba <enableKeepAliveLed+0x2a>
		keepAliveStartTicks = HAL_GetTick();
 80024a8:	f000 fe7a 	bl	80031a0 <HAL_GetTick>
 80024ac:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	2120      	movs	r1, #32
 80024b2:	480a      	ldr	r0, [pc, #40]	@ (80024dc <enableKeepAliveLed+0x4c>)
 80024b4:	f001 f9fd 	bl	80038b2 <HAL_GPIO_WritePin>
 80024b8:	e00b      	b.n	80024d2 <enableKeepAliveLed+0x42>
	} else if (HAL_GetTick() - keepAliveStartTicks > 50)
 80024ba:	f000 fe71 	bl	80031a0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b32      	cmp	r3, #50	@ 0x32
 80024c6:	d904      	bls.n	80024d2 <enableKeepAliveLed+0x42>
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2120      	movs	r1, #32
 80024cc:	4803      	ldr	r0, [pc, #12]	@ (80024dc <enableKeepAliveLed+0x4c>)
 80024ce:	f001 f9f0 	bl	80038b2 <HAL_GPIO_WritePin>

	return keepAliveStartTicks;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40010c00 	.word	0x40010c00

080024e0 <configureADC>:

void configureADC() {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	// Enable ADC clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <configureADC+0x48>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <configureADC+0x48>)
 80024ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ee:	6193      	str	r3, [r2, #24]

	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80024f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <configureADC+0x48>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002528 <configureADC+0x48>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6193      	str	r3, [r2, #24]

	// Enable SWSTART
	ADC1->CR2 |= ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL; // Set external trigger and trigger source
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <configureADC+0x4c>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <configureADC+0x4c>)
 8002502:	f443 13f0 	orr.w	r3, r3, #1966080	@ 0x1e0000
 8002506:	6093      	str	r3, [r2, #8]

	// Enable ADC temperature sensor and Vrefint channels
	ADC1->CR2 |= ADC_CR2_TSVREFE;
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <configureADC+0x4c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a07      	ldr	r2, [pc, #28]	@ (800252c <configureADC+0x4c>)
 800250e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002512:	6093      	str	r3, [r2, #8]
	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <configureADC+0x4c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <configureADC+0x4c>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6093      	str	r3, [r2, #8]
	// Enable ADC interrupt
//	NVIC_EnableIRQ(ADC1_IRQn);
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	40012400 	.word	0x40012400

08002530 <calibrateADC>:

void calibrateADC() {
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	// Start ADC calibration
	ADC1->CR2 |= ADC_CR2_CAL;
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <calibrateADC+0x28>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a07      	ldr	r2, [pc, #28]	@ (8002558 <calibrateADC+0x28>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6093      	str	r3, [r2, #8]

	// Wait for calibration to complete
	while (ADC1->CR2 & ADC_CR2_CAL) {
 8002540:	bf00      	nop
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <calibrateADC+0x28>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <calibrateADC+0x12>
	}
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012400 	.word	0x40012400

0800255c <configureGPIO>:

void configureGPIO() {
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <configureGPIO+0x30>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a09      	ldr	r2, [pc, #36]	@ (800258c <configureGPIO+0x30>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6193      	str	r3, [r2, #24]

	// Configure PA0 and PA11 as analog input mode
	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <configureGPIO+0x34>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <configureGPIO+0x34>)
 8002572:	f023 030f 	bic.w	r3, r3, #15
 8002576:	6013      	str	r3, [r2, #0]
	GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <configureGPIO+0x34>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <configureGPIO+0x34>)
 800257e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002582:	6053      	str	r3, [r2, #4]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010800 	.word	0x40010800

08002594 <startADCConversion>:

void startADCConversion(uint8_t channel) {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	// Clear previous channel selection
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <startADCConversion+0x44>)
 80025a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a2:	4a0d      	ldr	r2, [pc, #52]	@ (80025d8 <startADCConversion+0x44>)
 80025a4:	f023 031f 	bic.w	r3, r3, #31
 80025a8:	6353      	str	r3, [r2, #52]	@ 0x34

	// Set new channel selection
	ADC1->SQR3 |= (channel << ADC_SQR3_SQ1_Pos);
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <startADCConversion+0x44>)
 80025ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4909      	ldr	r1, [pc, #36]	@ (80025d8 <startADCConversion+0x44>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	634b      	str	r3, [r1, #52]	@ 0x34

	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <startADCConversion+0x44>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <startADCConversion+0x44>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6093      	str	r3, [r2, #8]

	// Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <startADCConversion+0x44>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <startADCConversion+0x44>)
 80025c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025cc:	6093      	str	r3, [r2, #8]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012400 	.word	0x40012400

080025dc <readADCChannel>:

uint16_t readADCChannel(uint8_t channel) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	// Start ADC conversion for the specified channel
	startADCConversion(channel);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ffd3 	bl	8002594 <startADCConversion>

	// Wait for conversion to complete
	while ((ADC1->SR & ADC_SR_EOC) == 0) {
 80025ee:	bf00      	nop
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <readADCChannel+0x30>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f9      	beq.n	80025f0 <readADCChannel+0x14>
	}

	// Read the ADC value
	uint16_t adcValue = ADC1->DR;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <readADCChannel+0x30>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	81fb      	strh	r3, [r7, #14]

	return adcValue;
 8002602:	89fb      	ldrh	r3, [r7, #14]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012400 	.word	0x40012400

08002610 <updateMasterStatus>:

void updateMasterStatus(RDSS_t *rdss, volatile uint16_t *adcValues,
		uint32_t timeout) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	if (HAL_GetTick() - rdss->lastUpdateTicks > timeout) {
 800261c:	f000 fdc0 	bl	80031a0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 8093 	bcs.w	8002756 <updateMasterStatus+0x146>
		uint8_t index = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
		const uint8_t querySize = 5;
 8002634:	2305      	movs	r3, #5
 8002636:	75bb      	strb	r3, [r7, #22]
		memset(rdss->queryBuffer, 0, 14);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3313      	adds	r3, #19
 800263c:	220e      	movs	r2, #14
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f004 ff47 	bl	80074d4 <memset>
		rdss->queryBuffer[index++] = RDSS_START_MARK;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	75fa      	strb	r2, [r7, #23]
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	227e      	movs	r2, #126	@ 0x7e
 8002654:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = SERVER;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	75fa      	strb	r2, [r7, #23]
 800265c:	461a      	mov	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = rdss->id;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	75fa      	strb	r2, [r7, #23]
 800266c:	4619      	mov	r1, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	7c1a      	ldrb	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	440b      	add	r3, r1
 8002676:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = QUERY_MASTER_STATUS;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	75fa      	strb	r2, [r7, #23]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	2213      	movs	r2, #19
 8002686:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = 0x00;
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	75fa      	strb	r2, [r7, #23]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = querySize;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	75fa      	strb	r2, [r7, #23]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	7dba      	ldrb	r2, [r7, #22]
 80026a6:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0];
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	1c59      	adds	r1, r3, #1
 80026b2:	75f9      	strb	r1, [r7, #23]
 80026b4:	4619      	mov	r1, r3
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	440b      	add	r3, r1
 80026bc:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0] >> 8;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	75f9      	strb	r1, [r7, #23]
 80026ce:	4619      	mov	r1, r3
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	440b      	add	r3, r1
 80026d6:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1];
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3302      	adds	r3, #2
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	75f9      	strb	r1, [r7, #23]
 80026e6:	4619      	mov	r1, r3
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	440b      	add	r3, r1
 80026ee:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1] >> 8;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	3302      	adds	r3, #2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	1c59      	adds	r1, r3, #1
 8002700:	75f9      	strb	r1, [r7, #23]
 8002702:	4619      	mov	r1, r3
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	440b      	add	r3, r1
 800270a:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[2];
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3304      	adds	r3, #4
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	1c59      	adds	r1, r3, #1
 8002718:	75f9      	strb	r1, [r7, #23]
 800271a:	4619      	mov	r1, r3
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	440b      	add	r3, r1
 8002722:	74da      	strb	r2, [r3, #19]
		index += setCrc(rdss->queryBuffer, index);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3313      	adds	r3, #19
 8002728:	7dfa      	ldrb	r2, [r7, #23]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f9bb 	bl	8002aa8 <setCrc>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	4413      	add	r3, r2
 800273a:	75fb      	strb	r3, [r7, #23]
		rdss->queryBuffer[index++] = RDSS_END_MARK;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	75fa      	strb	r2, [r7, #23]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	227f      	movs	r2, #127	@ 0x7f
 800274a:	74da      	strb	r2, [r3, #19]
		rdss->lastUpdateTicks = HAL_GetTick();
 800274c:	f000 fd28 	bl	80031a0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002762:	b672      	cpsid	i
}
 8002764:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <Error_Handler+0x8>

0800276a <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

Vlad_t* vladInit(Function_t function) {
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 8002774:	2038      	movs	r0, #56	@ 0x38
 8002776:	f004 fdef 	bl	8007358 <malloc>
 800277a:	4603      	mov	r3, r0
 800277c:	60fb      	str	r3, [r7, #12]
	vlad->agc152m = 0;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	801a      	strh	r2, [r3, #0]
	vlad->ref152m = 0;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	805a      	strh	r2, [r3, #2]
	vlad->level152m = 0;  // downlink 150 mhz
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	809a      	strh	r2, [r3, #4]
	vlad->agc172m = 0;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	80da      	strh	r2, [r3, #6]
	vlad->level172m = 0; //uplink 170 mhz
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	811a      	strh	r2, [r3, #8]
	vlad->tone_level = 0;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	815a      	strh	r2, [r3, #10]
	vlad->v_5v = 0;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	819a      	strh	r2, [r3, #12]
	vlad->vin = 0;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	81da      	strh	r2, [r3, #14]
	vlad->current = 0;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	821a      	strh	r2, [r3, #16]
	vlad->v_5v_real = 0;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	841a      	strh	r2, [r3, #32]
	vlad->ucTemperature = 0;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	vlad->baseCurrentReal = 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	849a      	strh	r2, [r3, #36]	@ 0x24
	vlad->attenuation = 0;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	vlad->v_5v_real = 0;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	841a      	strh	r2, [r3, #32]
	vlad->agc152m_real = 0;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	755a      	strb	r2, [r3, #21]
	vlad->isRemoteAttenuation = false;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	vlad->is_attenuation_updated = false;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	vlad->state = 0;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	vlad->calc_en = false;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	vlad->function = function;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	vlad->id = 0;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	vlad->lastUpdateTicks = HAL_GetTick();
 800283e:	f000 fcaf 	bl	80031a0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30

//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
	return vlad;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <serverInit>:

Server_t* serverInit(Function_t function) {
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
	Server_t *server;
	server = malloc(sizeof(Server_t));
 800285c:	201c      	movs	r0, #28
 800285e:	f004 fd7b 	bl	8007358 <malloc>
 8002862:	4603      	mov	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]

	if (server != NULL) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <serverInit+0x40>
        server->inputVoltage = 0;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	801a      	strh	r2, [r3, #0]
        server->counsumptionCurrentReal = 0;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
        server->lm75Temperature = 0;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	821a      	strh	r2, [r3, #16]
        server->id = 0;  // assuming id can be zero initialized
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	751a      	strb	r2, [r3, #20]
        server->function = function;  // Use the function parameter passed in
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	755a      	strb	r2, [r3, #21]
        server->lastUpdateTicks = 0;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
	}
	return server;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include <rs485.h>

RDSS_t* rdssInit(uint8_t id) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 80028a6:	2038      	movs	r0, #56	@ 0x38
 80028a8:	f004 fd56 	bl	8007358 <malloc>
 80028ac:	4603      	mov	r3, r0
 80028ae:	60fb      	str	r3, [r7, #12]
	r->status = WAITING;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2208      	movs	r2, #8
 80028b4:	745a      	strb	r2, [r3, #17]
	r->cmd = NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
	r->id = id;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	79fa      	ldrb	r2, [r7, #7]
 80028c0:	741a      	strb	r2, [r3, #16]

	/* PB9 DE485 as output  */
//	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
//	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
	return r;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <rdssReinit>:

void rdssReinit(RDSS_t *rdss) {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    rdss->cmd = NONE;           // Reset the command field
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    rdss->crcReceived = 0;      // Reset the received CRC value
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	819a      	strh	r2, [r3, #12]
    rdss->crcCalculated = 0;    // Reset the calculated CRC value
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	815a      	strh	r2, [r3, #10]
//    rdss->idQuery = 0;          // Reset the query ID
    rdss->status = WAITING;     // Set the status to waiting
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2208      	movs	r2, #8
 80028ea:	745a      	strb	r2, [r3, #17]
    rdss->idReceived = 0;       // Reset the received ID
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	73da      	strb	r2, [r3, #15]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <checkModuleValidity>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t checkModuleValidity(uint8_t *frame, uint8_t lenght) {
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
	if (frame[1] >= SERVER || frame[1] <= SNIFFER) {
		for (int i = 3; i < lenght; i++)
 8002908:	2303      	movs	r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e00a      	b.n	8002924 <checkModuleValidity+0x28>
			if (frame[i] == RDSS_END_MARK)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b7f      	cmp	r3, #127	@ 0x7f
 8002918:	d101      	bne.n	800291e <checkModuleValidity+0x22>
				return VALID_MODULE;
 800291a:	2309      	movs	r3, #9
 800291c:	e007      	b.n	800292e <checkModuleValidity+0x32>
		for (int i = 3; i < lenght; i++)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	dbf0      	blt.n	800290e <checkModuleValidity+0x12>
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
 800292c:	2304      	movs	r3, #4
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <checkFrameValidity>:

RDSS_status_t checkFrameValidity(uint8_t *frame, uint8_t lenght) {
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	2b06      	cmp	r3, #6
 8002948:	d910      	bls.n	800296c <checkFrameValidity+0x34>
		if (frame[0] == RDSS_START_MARK) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002950:	d10a      	bne.n	8002968 <checkFrameValidity+0x30>
			if (frame[lenght - 1] == RDSS_END_MARK)
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	3b01      	subs	r3, #1
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b7f      	cmp	r3, #127	@ 0x7f
 800295e:	d101      	bne.n	8002964 <checkFrameValidity+0x2c>
				return VALID_FRAME;
 8002960:	2302      	movs	r3, #2
 8002962:	e004      	b.n	800296e <checkFrameValidity+0x36>
			else
				return START_READING;
 8002964:	2301      	movs	r3, #1
 8002966:	e002      	b.n	800296e <checkFrameValidity+0x36>
		} else
			return NOT_VALID_FRAME;
 8002968:	2303      	movs	r3, #3
 800296a:	e000      	b.n	800296e <checkFrameValidity+0x36>
	} else

		return WAITING;
 800296c:	2308      	movs	r3, #8
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <checkCRCValidity>:

RDSS_status_t checkCRCValidity(uint8_t *frame, uint8_t len) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
    uint16_t calculatedCrc;
    uint16_t savedCrc;
    savedCrc = ((uint16_t) frame[len - CRC_HIGH_BYTE_OFFSET] << 8);
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	3b02      	subs	r3, #2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	81fb      	strh	r3, [r7, #14]
    savedCrc |= (uint16_t) frame[len - CRC_LOW_BYTE_OFFSET];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	3b03      	subs	r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	81fb      	strh	r3, [r7, #14]
    calculatedCrc = crc_get(&frame[1], len - FRAME_HEADER_SIZE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	3b04      	subs	r3, #4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 f80d 	bl	80029d0 <crc_get>
 80029b6:	4603      	mov	r3, r0
 80029b8:	81bb      	strh	r3, [r7, #12]
    return ((calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR);
 80029ba:	89ba      	ldrh	r2, [r7, #12]
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d101      	bne.n	80029c6 <checkCRCValidity+0x4e>
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <checkCRCValidity+0x50>
 80029c6:	2306      	movs	r3, #6
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <crc_get>:
uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 80029dc:	f241 0321 	movw	r3, #4129	@ 0x1021
 80029e0:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;            // 16-bit CRC value
 80029e2:	2300      	movs	r3, #0
 80029e4:	81bb      	strh	r3, [r7, #12]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e024      	b.n	8002a36 <crc_get+0x66>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	89bb      	ldrh	r3, [r7, #12]
 80029fa:	4053      	eors	r3, r2
 80029fc:	81bb      	strh	r3, [r7, #12]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	73bb      	strb	r3, [r7, #14]
 8002a02:	e012      	b.n	8002a2a <crc_get+0x5a>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8002a04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da08      	bge.n	8002a1e <crc_get+0x4e>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002a0c:	89bb      	ldrh	r3, [r7, #12]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a16:	4053      	eors	r3, r2
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	e002      	b.n	8002a24 <crc_get+0x54>
			} else {
				crc <<= 1;
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	81bb      	strh	r3, [r7, #12]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	3301      	adds	r3, #1
 8002a28:	73bb      	strb	r3, [r7, #14]
 8002a2a:	7bbb      	ldrb	r3, [r7, #14]
 8002a2c:	2b07      	cmp	r3, #7
 8002a2e:	d9e9      	bls.n	8002a04 <crc_get+0x34>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3d6      	bcc.n	80029ec <crc_get+0x1c>
			}
		}
	}

	return crc;
 8002a3e:	89bb      	ldrh	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <validate>:

RDSS_status_t validate(uint8_t *buffer, uint8_t length) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
	RDSS_status_t frameStatus = checkFrameValidity(buffer, length);
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff6c 	bl	8002938 <checkFrameValidity>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
	if (frameStatus != VALID_FRAME)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d001      	beq.n	8002a6e <validate+0x24>
		return (frameStatus);
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	e018      	b.n	8002aa0 <validate+0x56>
	RDSS_status_t moduleStatus = checkModuleValidity(buffer, length);
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff42 	bl	80028fc <checkModuleValidity>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73bb      	strb	r3, [r7, #14]
	if (moduleStatus != VALID_MODULE)
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d001      	beq.n	8002a86 <validate+0x3c>
		return (moduleStatus);
 8002a82:	7bbb      	ldrb	r3, [r7, #14]
 8002a84:	e00c      	b.n	8002aa0 <validate+0x56>
	RDSS_status_t crcStatus = checkCRCValidity(buffer, length);
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff74 	bl	8002978 <checkCRCValidity>
 8002a90:	4603      	mov	r3, r0
 8002a92:	737b      	strb	r3, [r7, #13]
	if (crcStatus != DATA_OK)
 8002a94:	7b7b      	ldrb	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <validate+0x54>
		return (crcStatus);
 8002a9a:	7b7b      	ldrb	r3, [r7, #13]
 8002a9c:	e000      	b.n	8002aa0 <validate+0x56>
	return (DATA_OK);
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t *buff, uint8_t size) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff + 1, size - 1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7ff ff85 	bl	80029d0 <crc_get>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	817b      	strh	r3, [r7, #10]
	memcpy(crc_frame, &crc, 2);
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	81bb      	strh	r3, [r7, #12]
	buff[size++] = crc_frame[0];
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	70fa      	strb	r2, [r7, #3]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	7b3a      	ldrb	r2, [r7, #12]
 8002adc:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	70fa      	strb	r2, [r7, #3]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	7b7a      	ldrb	r2, [r7, #13]
 8002aec:	701a      	strb	r2, [r3, #0]
	return 2;
 8002aee:	2302      	movs	r3, #2
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer, Function_t function) {
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
	if (rdss->cmd == 0)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <setRdssStartData+0x1e>
		return i;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	e033      	b.n	8002b7e <setRdssStartData+0x86>
	if (rdss->id == 0 && function != SERVER)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	7c1b      	ldrb	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <setRdssStartData+0x30>
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <setRdssStartData+0x30>
		return i;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	e02a      	b.n	8002b7e <setRdssStartData+0x86>
	buffer[i++] = RDSS_START_MARK;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	75fa      	strb	r2, [r7, #23]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4413      	add	r3, r2
 8002b34:	227e      	movs	r2, #126	@ 0x7e
 8002b36:	701a      	strb	r2, [r3, #0]
	buffer[i++] = function;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	75fa      	strb	r2, [r7, #23]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4413      	add	r3, r2
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	75fa      	strb	r2, [r7, #23]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4413      	add	r3, r2
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	7c12      	ldrb	r2, [r2, #16]
 8002b58:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	75fa      	strb	r2, [r7, #23]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	75fa      	strb	r2, [r7, #23]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
	return i;
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <freqDecode>:

int freqDecode(uint8_t *buffer) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3303      	adds	r3, #3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	061b      	lsls	r3, r3, #24
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4907      	ldr	r1, [pc, #28]	@ (8002be8 <freqDecode+0x60>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fbcb 	bl	8000368 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60fb      	str	r3, [r7, #12]

	return (int) freq.f;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fd15 	bl	8000608 <__aeabi_f2iz>
 8002bde:	4603      	mov	r3, r0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	49742400 	.word	0x49742400

08002bec <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	f7fd fb5e 	bl	80002b8 <__aeabi_ui2f>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4906      	ldr	r1, [pc, #24]	@ (8002c18 <freqEncode+0x2c>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fc65 	bl	80004d0 <__aeabi_fdiv>
 8002c06:	4603      	mov	r3, r0
 8002c08:	60fb      	str	r3, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	49742400 	.word	0x49742400

08002c1c <updateRdss>:

void updateRdss(RDSS_t *rdss, uint8_t *buffer, uint8_t bufferSize) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	71fb      	strb	r3, [r7, #7]
	if (buffer == NULL)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <updateRdss+0x3a>
		return;
	if (bufferSize <= 0)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d011      	beq.n	8002c5a <updateRdss+0x3e>
		return;
	rdss->cmd = buffer[CMD_INDEX]; // Update the command from the received data
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]
	rdss->idReceived = buffer[MODULE_ID_INDEX]; // Update the received ID
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	789a      	ldrb	r2, [r3, #2]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	73da      	strb	r2, [r3, #15]
	rdss->buffSize = bufferSize;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	79fa      	ldrb	r2, [r7, #7]
 8002c4c:	721a      	strb	r2, [r3, #8]
	rdss->buff = buffer;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	e002      	b.n	8002c5c <updateRdss+0x40>
		return;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <updateRdss+0x40>
		return;
 8002c5a:	bf00      	nop
}
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	4a14      	ldr	r2, [pc, #80]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6193      	str	r3, [r2, #24]
 8002c76:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_MspInit+0x5c>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_MspInit+0x60>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_MspInit+0x60>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a15      	ldr	r2, [pc, #84]	@ (8002d38 <HAL_I2C_MspInit+0x70>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d123      	bne.n	8002d30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	6193      	str	r3, [r2, #24]
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d00:	23c0      	movs	r3, #192	@ 0xc0
 8002d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d04:	2312      	movs	r3, #18
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4619      	mov	r1, r3
 8002d12:	480b      	ldr	r0, [pc, #44]	@ (8002d40 <HAL_I2C_MspInit+0x78>)
 8002d14:	f000 fc32 	bl	800357c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002d1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d22:	61d3      	str	r3, [r2, #28]
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_I2C_MspInit+0x74>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010c00 	.word	0x40010c00

08002d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d12f      	bne.n	8002dc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a19      	ldr	r2, [pc, #100]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	4a13      	ldr	r2, [pc, #76]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d94:	23a0      	movs	r3, #160	@ 0xa0
 8002d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4619      	mov	r1, r3
 8002da6:	480b      	ldr	r0, [pc, #44]	@ (8002dd4 <HAL_SPI_MspInit+0x90>)
 8002da8:	f000 fbe8 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dac:	2340      	movs	r3, #64	@ 0x40
 8002dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4805      	ldr	r0, [pc, #20]	@ (8002dd4 <HAL_SPI_MspInit+0x90>)
 8002dc0:	f000 fbdc 	bl	800357c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40013000 	.word	0x40013000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010800 	.word	0x40010800

08002dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	@ 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a57      	ldr	r2, [pc, #348]	@ (8002f50 <HAL_UART_MspInit+0x178>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d13a      	bne.n	8002e6e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002df8:	4b56      	ldr	r3, [pc, #344]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a55      	ldr	r2, [pc, #340]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b53      	ldr	r3, [pc, #332]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e10:	4b50      	ldr	r3, [pc, #320]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a4f      	ldr	r2, [pc, #316]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 0320 	add.w	r3, r7, #32
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4846      	ldr	r0, [pc, #280]	@ (8002f58 <HAL_UART_MspInit+0x180>)
 8002e3e:	f000 fb9d 	bl	800357c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8002e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0320 	add.w	r3, r7, #32
 8002e54:	4619      	mov	r1, r3
 8002e56:	4840      	ldr	r0, [pc, #256]	@ (8002f58 <HAL_UART_MspInit+0x180>)
 8002e58:	f000 fb90 	bl	800357c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2025      	movs	r0, #37	@ 0x25
 8002e62:	f000 faa2 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e66:	2025      	movs	r0, #37	@ 0x25
 8002e68:	f000 fabb 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e6c:	e06c      	b.n	8002f48 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a3a      	ldr	r2, [pc, #232]	@ (8002f5c <HAL_UART_MspInit+0x184>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d130      	bne.n	8002eda <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e78:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a35      	ldr	r2, [pc, #212]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e82:	61d3      	str	r3, [r2, #28]
 8002e84:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e90:	4b30      	ldr	r3, [pc, #192]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0320 	add.w	r3, r7, #32
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4827      	ldr	r0, [pc, #156]	@ (8002f58 <HAL_UART_MspInit+0x180>)
 8002ebc:	f000 fb5e 	bl	800357c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f107 0320 	add.w	r3, r7, #32
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4821      	ldr	r0, [pc, #132]	@ (8002f58 <HAL_UART_MspInit+0x180>)
 8002ed4:	f000 fb52 	bl	800357c <HAL_GPIO_Init>
}
 8002ed8:	e036      	b.n	8002f48 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <HAL_UART_MspInit+0x188>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d131      	bne.n	8002f48 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002eea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eee:	61d3      	str	r3, [r2, #28]
 8002ef0:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efc:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_UART_MspInit+0x17c>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002f22:	f107 0320 	add.w	r3, r7, #32
 8002f26:	4619      	mov	r1, r3
 8002f28:	480e      	ldr	r0, [pc, #56]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002f2a:	f000 fb27 	bl	800357c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002f2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002f3c:	f107 0320 	add.w	r3, r7, #32
 8002f40:	4619      	mov	r1, r3
 8002f42:	4808      	ldr	r0, [pc, #32]	@ (8002f64 <HAL_UART_MspInit+0x18c>)
 8002f44:	f000 fb1a 	bl	800357c <HAL_GPIO_Init>
}
 8002f48:	bf00      	nop
 8002f4a:	3730      	adds	r7, #48	@ 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010800 	.word	0x40010800
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40010c00 	.word	0x40010c00

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <NMI_Handler+0x4>

08002f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <MemManage_Handler+0x4>

08002f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <BusFault_Handler+0x4>

08002f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <UsageFault_Handler+0x4>

08002f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f8e0 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <USART1_IRQHandler+0x10>)
 8002fc6:	f003 fcb5 	bl	8006934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000138 	.word	0x20000138

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	@ (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f004 fa7e 	bl	8007504 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20005000 	.word	0x20005000
 8003034:	00000400 	.word	0x00000400
 8003038:	20000380 	.word	0x20000380
 800303c:	200004d0 	.word	0x200004d0

08003040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <writeTxReg>:
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
	NVIC_EnableIRQ(USART1_IRQn);
	SET_BIT(USART1->CR1, USART_CR1_UE);
}

void writeTxReg(char ch) {
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003056:	4b11      	ldr	r3, [pc, #68]	@ (800309c <writeTxReg+0x50>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a10      	ldr	r2, [pc, #64]	@ (800309c <writeTxReg+0x50>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 8003062:	bf00      	nop
 8003064:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <writeTxReg+0x54>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f9      	beq.n	8003064 <writeTxReg+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 8003070:	4a0b      	ldr	r2, [pc, #44]	@ (80030a0 <writeTxReg+0x54>)
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 8003076:	bf00      	nop
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <writeTxReg+0x54>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f9      	beq.n	8003078 <writeTxReg+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <writeTxReg+0x50>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <writeTxReg+0x50>)
 800308a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800308e:	60d3      	str	r3, [r2, #12]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010c00 	.word	0x40010c00
 80030a0:	40013800 	.word	0x40013800

080030a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80030a4:	480c      	ldr	r0, [pc, #48]	@ (80030d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030a6:	490d      	ldr	r1, [pc, #52]	@ (80030dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ac:	e002      	b.n	80030b4 <LoopCopyDataInit>

080030ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b2:	3304      	adds	r3, #4

080030b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b8:	d3f9      	bcc.n	80030ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030bc:	4c0a      	ldr	r4, [pc, #40]	@ (80030e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c0:	e001      	b.n	80030c6 <LoopFillZerobss>

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c4:	3204      	adds	r2, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ca:	f7ff ffb9 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ce:	f004 fa1f 	bl	8007510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030d2:	f7fe fa3b 	bl	800154c <main>
  bx lr
 80030d6:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80030e0:	08007640 	.word	0x08007640
  ldr r2, =_sbss
 80030e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80030e8:	200004d0 	.word	0x200004d0

080030ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030ec:	e7fe      	b.n	80030ec <ADC1_2_IRQHandler>
	...

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <HAL_Init+0x28>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <HAL_Init+0x28>)
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f947 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	200f      	movs	r0, #15
 8003108:	f000 f808 	bl	800311c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7ff fdaa 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40022000 	.word	0x40022000

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_InitTick+0x54>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <HAL_InitTick+0x58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f95f 	bl	80033fe <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00e      	b.n	8003168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80a      	bhi.n	8003166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003150:	2200      	movs	r2, #0
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f000 f927 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800315c:	4a06      	ldr	r2, [pc, #24]	@ (8003178 <HAL_InitTick+0x5c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000000 	.word	0x20000000
 8003174:	20000008 	.word	0x20000008
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_IncTick+0x1c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_IncTick+0x20>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a03      	ldr	r2, [pc, #12]	@ (800319c <HAL_IncTick+0x20>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000008 	.word	0x20000008
 800319c:	20000384 	.word	0x20000384

080031a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b02      	ldr	r3, [pc, #8]	@ (80031b0 <HAL_GetTick+0x10>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000384 	.word	0x20000384

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d005      	beq.n	80031da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_Delay+0x44>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031da:	bf00      	nop
 80031dc:	f7ff ffe0 	bl	80031a0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8f7      	bhi.n	80031dc <HAL_Delay+0x28>
  {
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	@ (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4906      	ldr	r1, [pc, #24]	@ (8003294 <__NVIC_EnableIRQ+0x34>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	@ (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	@ (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff90 	bl	8003298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff2d 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033bc:	f7ff ff42 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f7ff ff90 	bl	80032ec <NVIC_EncodePriority>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff5f 	bl	8003298 <__NVIC_SetPriority>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff35 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffa2 	bl	8003350 <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d008      	beq.n	8003440 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e020      	b.n	8003482 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 020e 	bic.w	r2, r2, #14
 800344e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d005      	beq.n	80034b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2204      	movs	r2, #4
 80034a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e051      	b.n	8003554 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 020e 	bic.w	r2, r2, #14
 80034be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	@ (8003560 <HAL_DMA_Abort_IT+0xd4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d029      	beq.n	800352e <HAL_DMA_Abort_IT+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	@ (8003564 <HAL_DMA_Abort_IT+0xd8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_DMA_Abort_IT+0x9e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003568 <HAL_DMA_Abort_IT+0xdc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01a      	beq.n	8003524 <HAL_DMA_Abort_IT+0x98>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <HAL_DMA_Abort_IT+0xe0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d012      	beq.n	800351e <HAL_DMA_Abort_IT+0x92>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_DMA_Abort_IT+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00a      	beq.n	8003518 <HAL_DMA_Abort_IT+0x8c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_DMA_Abort_IT+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d102      	bne.n	8003512 <HAL_DMA_Abort_IT+0x86>
 800350c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003510:	e00e      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 8003512:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003516:	e00b      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 8003518:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800351c:	e008      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 800351e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003522:	e005      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 8003524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003528:	e002      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 800352a:	2310      	movs	r3, #16
 800352c:	e000      	b.n	8003530 <HAL_DMA_Abort_IT+0xa4>
 800352e:	2301      	movs	r3, #1
 8003530:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <HAL_DMA_Abort_IT+0xec>)
 8003532:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
    } 
  }
  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40020008 	.word	0x40020008
 8003564:	4002001c 	.word	0x4002001c
 8003568:	40020030 	.word	0x40020030
 800356c:	40020044 	.word	0x40020044
 8003570:	40020058 	.word	0x40020058
 8003574:	4002006c 	.word	0x4002006c
 8003578:	40020000 	.word	0x40020000

0800357c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800357c:	b480      	push	{r7}
 800357e:	b08b      	sub	sp, #44	@ 0x2c
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358e:	e169      	b.n	8003864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003590:	2201      	movs	r2, #1
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 8158 	bne.w	800385e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a9a      	ldr	r2, [pc, #616]	@ (800381c <HAL_GPIO_Init+0x2a0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d05e      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
 80035b8:	4a98      	ldr	r2, [pc, #608]	@ (800381c <HAL_GPIO_Init+0x2a0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d875      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035be:	4a98      	ldr	r2, [pc, #608]	@ (8003820 <HAL_GPIO_Init+0x2a4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d058      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
 80035c4:	4a96      	ldr	r2, [pc, #600]	@ (8003820 <HAL_GPIO_Init+0x2a4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d86f      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035ca:	4a96      	ldr	r2, [pc, #600]	@ (8003824 <HAL_GPIO_Init+0x2a8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d052      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
 80035d0:	4a94      	ldr	r2, [pc, #592]	@ (8003824 <HAL_GPIO_Init+0x2a8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d869      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035d6:	4a94      	ldr	r2, [pc, #592]	@ (8003828 <HAL_GPIO_Init+0x2ac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04c      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
 80035dc:	4a92      	ldr	r2, [pc, #584]	@ (8003828 <HAL_GPIO_Init+0x2ac>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d863      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035e2:	4a92      	ldr	r2, [pc, #584]	@ (800382c <HAL_GPIO_Init+0x2b0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d046      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
 80035e8:	4a90      	ldr	r2, [pc, #576]	@ (800382c <HAL_GPIO_Init+0x2b0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d85d      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035ee:	2b12      	cmp	r3, #18
 80035f0:	d82a      	bhi.n	8003648 <HAL_GPIO_Init+0xcc>
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d859      	bhi.n	80036aa <HAL_GPIO_Init+0x12e>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_GPIO_Init+0x80>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003677 	.word	0x08003677
 8003600:	08003651 	.word	0x08003651
 8003604:	08003663 	.word	0x08003663
 8003608:	080036a5 	.word	0x080036a5
 800360c:	080036ab 	.word	0x080036ab
 8003610:	080036ab 	.word	0x080036ab
 8003614:	080036ab 	.word	0x080036ab
 8003618:	080036ab 	.word	0x080036ab
 800361c:	080036ab 	.word	0x080036ab
 8003620:	080036ab 	.word	0x080036ab
 8003624:	080036ab 	.word	0x080036ab
 8003628:	080036ab 	.word	0x080036ab
 800362c:	080036ab 	.word	0x080036ab
 8003630:	080036ab 	.word	0x080036ab
 8003634:	080036ab 	.word	0x080036ab
 8003638:	080036ab 	.word	0x080036ab
 800363c:	080036ab 	.word	0x080036ab
 8003640:	08003659 	.word	0x08003659
 8003644:	0800366d 	.word	0x0800366d
 8003648:	4a79      	ldr	r2, [pc, #484]	@ (8003830 <HAL_GPIO_Init+0x2b4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800364e:	e02c      	b.n	80036aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	623b      	str	r3, [r7, #32]
          break;
 8003656:	e029      	b.n	80036ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	3304      	adds	r3, #4
 800365e:	623b      	str	r3, [r7, #32]
          break;
 8003660:	e024      	b.n	80036ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	3308      	adds	r3, #8
 8003668:	623b      	str	r3, [r7, #32]
          break;
 800366a:	e01f      	b.n	80036ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	330c      	adds	r3, #12
 8003672:	623b      	str	r3, [r7, #32]
          break;
 8003674:	e01a      	b.n	80036ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800367e:	2304      	movs	r3, #4
 8003680:	623b      	str	r3, [r7, #32]
          break;
 8003682:	e013      	b.n	80036ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800368c:	2308      	movs	r3, #8
 800368e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	611a      	str	r2, [r3, #16]
          break;
 8003696:	e009      	b.n	80036ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003698:	2308      	movs	r3, #8
 800369a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	615a      	str	r2, [r3, #20]
          break;
 80036a2:	e003      	b.n	80036ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
          break;
 80036a8:	e000      	b.n	80036ac <HAL_GPIO_Init+0x130>
          break;
 80036aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2bff      	cmp	r3, #255	@ 0xff
 80036b0:	d801      	bhi.n	80036b6 <HAL_GPIO_Init+0x13a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	e001      	b.n	80036ba <HAL_GPIO_Init+0x13e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2bff      	cmp	r3, #255	@ 0xff
 80036c0:	d802      	bhi.n	80036c8 <HAL_GPIO_Init+0x14c>
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	e002      	b.n	80036ce <HAL_GPIO_Init+0x152>
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	3b08      	subs	r3, #8
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	210f      	movs	r1, #15
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80b1 	beq.w	800385e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <HAL_GPIO_Init+0x2b8>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	4a4c      	ldr	r2, [pc, #304]	@ (8003834 <HAL_GPIO_Init+0x2b8>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6193      	str	r3, [r2, #24]
 8003708:	4b4a      	ldr	r3, [pc, #296]	@ (8003834 <HAL_GPIO_Init+0x2b8>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003714:	4a48      	ldr	r2, [pc, #288]	@ (8003838 <HAL_GPIO_Init+0x2bc>)
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a40      	ldr	r2, [pc, #256]	@ (800383c <HAL_GPIO_Init+0x2c0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <HAL_GPIO_Init+0x1ec>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3f      	ldr	r2, [pc, #252]	@ (8003840 <HAL_GPIO_Init+0x2c4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00d      	beq.n	8003764 <HAL_GPIO_Init+0x1e8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3e      	ldr	r2, [pc, #248]	@ (8003844 <HAL_GPIO_Init+0x2c8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <HAL_GPIO_Init+0x1e4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3d      	ldr	r2, [pc, #244]	@ (8003848 <HAL_GPIO_Init+0x2cc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_GPIO_Init+0x1e0>
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_GPIO_Init+0x1ee>
 800375c:	2304      	movs	r3, #4
 800375e:	e004      	b.n	800376a <HAL_GPIO_Init+0x1ee>
 8003760:	2302      	movs	r3, #2
 8003762:	e002      	b.n	800376a <HAL_GPIO_Init+0x1ee>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_GPIO_Init+0x1ee>
 8003768:	2300      	movs	r3, #0
 800376a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376c:	f002 0203 	and.w	r2, r2, #3
 8003770:	0092      	lsls	r2, r2, #2
 8003772:	4093      	lsls	r3, r2
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800377a:	492f      	ldr	r1, [pc, #188]	@ (8003838 <HAL_GPIO_Init+0x2bc>)
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d006      	beq.n	80037a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	492c      	ldr	r1, [pc, #176]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037a2:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	4928      	ldr	r1, [pc, #160]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037bc:	4b23      	ldr	r3, [pc, #140]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4922      	ldr	r1, [pc, #136]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60cb      	str	r3, [r1, #12]
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	491e      	ldr	r1, [pc, #120]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4918      	ldr	r1, [pc, #96]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	4914      	ldr	r1, [pc, #80]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800380c:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_GPIO_Init+0x2d0>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e021      	b.n	800385e <HAL_GPIO_Init+0x2e2>
 800381a:	bf00      	nop
 800381c:	10320000 	.word	0x10320000
 8003820:	10310000 	.word	0x10310000
 8003824:	10220000 	.word	0x10220000
 8003828:	10210000 	.word	0x10210000
 800382c:	10120000 	.word	0x10120000
 8003830:	10110000 	.word	0x10110000
 8003834:	40021000 	.word	0x40021000
 8003838:	40010000 	.word	0x40010000
 800383c:	40010800 	.word	0x40010800
 8003840:	40010c00 	.word	0x40010c00
 8003844:	40011000 	.word	0x40011000
 8003848:	40011400 	.word	0x40011400
 800384c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_GPIO_Init+0x304>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	43db      	mvns	r3, r3
 8003858:	4909      	ldr	r1, [pc, #36]	@ (8003880 <HAL_GPIO_Init+0x304>)
 800385a:	4013      	ands	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	3301      	adds	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f ae8e 	bne.w	8003590 <HAL_GPIO_Init+0x14>
  }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	372c      	adds	r7, #44	@ 0x2c
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	887b      	ldrh	r3, [r7, #2]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e001      	b.n	80038a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	460b      	mov	r3, r1
 80038bc:	807b      	strh	r3, [r7, #2]
 80038be:	4613      	mov	r3, r2
 80038c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c2:	787b      	ldrb	r3, [r7, #1]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c8:	887a      	ldrh	r2, [r7, #2]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ce:	e003      	b.n	80038d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	041a      	lsls	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	611a      	str	r2, [r3, #16]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e12b      	b.n	8003b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff f9dc 	bl	8002cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2224      	movs	r2, #36	@ 0x24
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003948:	f002 f8fa 	bl	8005b40 <HAL_RCC_GetPCLK1Freq>
 800394c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a81      	ldr	r2, [pc, #516]	@ (8003b58 <HAL_I2C_Init+0x274>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d807      	bhi.n	8003968 <HAL_I2C_Init+0x84>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a80      	ldr	r2, [pc, #512]	@ (8003b5c <HAL_I2C_Init+0x278>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e006      	b.n	8003976 <HAL_I2C_Init+0x92>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b60 <HAL_I2C_Init+0x27c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0e7      	b.n	8003b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a78      	ldr	r2, [pc, #480]	@ (8003b64 <HAL_I2C_Init+0x280>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0c9b      	lsrs	r3, r3, #18
 8003988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003b58 <HAL_I2C_Init+0x274>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <HAL_I2C_Init+0xd4>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3301      	adds	r3, #1
 80039b6:	e009      	b.n	80039cc <HAL_I2C_Init+0xe8>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a69      	ldr	r2, [pc, #420]	@ (8003b68 <HAL_I2C_Init+0x284>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	099b      	lsrs	r3, r3, #6
 80039ca:	3301      	adds	r3, #1
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	495c      	ldr	r1, [pc, #368]	@ (8003b58 <HAL_I2C_Init+0x274>)
 80039e8:	428b      	cmp	r3, r1
 80039ea:	d819      	bhi.n	8003a20 <HAL_I2C_Init+0x13c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e59      	subs	r1, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a00:	400b      	ands	r3, r1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_I2C_Init+0x138>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e59      	subs	r1, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	e051      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e04f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <HAL_I2C_Init+0x168>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e012      	b.n	8003a72 <HAL_I2C_Init+0x18e>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Init+0x196>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e022      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10e      	bne.n	8003aa0 <HAL_I2C_Init+0x1bc>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e58      	subs	r0, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a9e:	e00f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	0099      	lsls	r1, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	6809      	ldr	r1, [r1, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6911      	ldr	r1, [r2, #16]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	000186a0 	.word	0x000186a0
 8003b5c:	001e847f 	.word	0x001e847f
 8003b60:	003d08ff 	.word	0x003d08ff
 8003b64:	431bde83 	.word	0x431bde83
 8003b68:	10624dd3 	.word	0x10624dd3

08003b6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fb0e 	bl	80031a0 <HAL_GetTick>
 8003b84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 80e0 	bne.w	8003d54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4970      	ldr	r1, [pc, #448]	@ (8003d60 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f001 f97e 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0d3      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Transmit+0x50>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0cc      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d007      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2221      	movs	r2, #33	@ 0x21
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	893a      	ldrh	r2, [r7, #8]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a50      	ldr	r2, [pc, #320]	@ (8003d64 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fe6a 	bl	8004904 <I2C_MasterRequestWrite>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e08d      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c50:	e066      	b.n	8003d20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f001 fa3c 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d107      	bne.n	8003c7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06b      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d11b      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x188>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	6a39      	ldr	r1, [r7, #32]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f001 fa33 	bl	8005164 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e01a      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d194      	bne.n	8003c52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	00100002 	.word	0x00100002
 8003d64:	ffff0000 	.word	0xffff0000

08003d68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	@ 0x30
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff fa0e 	bl	80031a0 <HAL_GetTick>
 8003d84:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	f040 824b 	bne.w	800422a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2319      	movs	r3, #25
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	497f      	ldr	r1, [pc, #508]	@ (8003f9c <HAL_I2C_Master_Receive+0x234>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f001 f87e 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
 8003dac:	e23e      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2C_Master_Receive+0x54>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e237      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d007      	beq.n	8003de2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003df0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2222      	movs	r2, #34	@ 0x22
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	893a      	ldrh	r2, [r7, #8]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a5f      	ldr	r2, [pc, #380]	@ (8003fa0 <HAL_I2C_Master_Receive+0x238>)
 8003e22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 fdec 	bl	8004a08 <I2C_MasterRequestRead>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1f8      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e1cc      	b.n	8004204 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d11e      	bne.n	8003eb0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e82:	b672      	cpsid	i
}
 8003e84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eac:	b662      	cpsie	i
}
 8003eae:	e035      	b.n	8003f1c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d11e      	bne.n	8003ef6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec8:	b672      	cpsid	i
}
 8003eca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ef2:	b662      	cpsie	i
}
 8003ef4:	e012      	b.n	8003f1c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f1c:	e172      	b.n	8004204 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f200 811f 	bhi.w	8004166 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d123      	bne.n	8003f78 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f001 f95d 	bl	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e173      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f76:	e145      	b.n	8004204 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d152      	bne.n	8004026 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	2200      	movs	r2, #0
 8003f88:	4906      	ldr	r1, [pc, #24]	@ (8003fa4 <HAL_I2C_Master_Receive+0x23c>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 ff88 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e148      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003fa8:	b672      	cpsid	i
}
 8003faa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fee:	b662      	cpsie	i
}
 8003ff0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004024:	e0ee      	b.n	8004204 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	2200      	movs	r2, #0
 800402e:	4981      	ldr	r1, [pc, #516]	@ (8004234 <HAL_I2C_Master_Receive+0x4cc>)
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 ff35 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0f5      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004050:	b672      	cpsid	i
}
 8004052:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004086:	4b6c      	ldr	r3, [pc, #432]	@ (8004238 <HAL_I2C_Master_Receive+0x4d0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	08db      	lsrs	r3, r3, #3
 800408c:	4a6b      	ldr	r2, [pc, #428]	@ (800423c <HAL_I2C_Master_Receive+0x4d4>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	0a1a      	lsrs	r2, r3, #8
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00da      	lsls	r2, r3, #3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d118      	bne.n	80040de <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040ce:	b662      	cpsie	i
}
 80040d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0a6      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d1d9      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800412e:	b662      	cpsie	i
}
 8004130:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004164:	e04e      	b.n	8004204 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004168:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f001 f842 	bl	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e058      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d124      	bne.n	8004204 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d107      	bne.n	80041d2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f ae88 	bne.w	8003f1e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3728      	adds	r7, #40	@ 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	00010004 	.word	0x00010004
 8004238:	20000000 	.word	0x20000000
 800423c:	14f8b589 	.word	0x14f8b589

08004240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	817b      	strh	r3, [r7, #10]
 8004252:	460b      	mov	r3, r1
 8004254:	813b      	strh	r3, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425a:	f7fe ffa1 	bl	80031a0 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b20      	cmp	r3, #32
 800426a:	f040 80d9 	bne.w	8004420 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2319      	movs	r3, #25
 8004274:	2201      	movs	r2, #1
 8004276:	496d      	ldr	r1, [pc, #436]	@ (800442c <HAL_I2C_Mem_Write+0x1ec>)
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fe11 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
 8004286:	e0cc      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Mem_Write+0x56>
 8004292:	2302      	movs	r3, #2
 8004294:	e0c5      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d007      	beq.n	80042bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2221      	movs	r2, #33	@ 0x21
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2240      	movs	r2, #64	@ 0x40
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_I2C_Mem_Write+0x1f0>)
 80042fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042fe:	88f8      	ldrh	r0, [r7, #6]
 8004300:	893a      	ldrh	r2, [r7, #8]
 8004302:	8979      	ldrh	r1, [r7, #10]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fc48 	bl	8004ba4 <I2C_RequestMemoryWrite>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d052      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e081      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fed6 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b04      	cmp	r3, #4
 8004334:	d107      	bne.n	8004346 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06b      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b04      	cmp	r3, #4
 8004386:	d11b      	bne.n	80043c0 <HAL_I2C_Mem_Write+0x180>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	d017      	beq.n	80043c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1aa      	bne.n	800431e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fec9 	bl	8005164 <I2C_WaitOnBTFFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d107      	bne.n	80043f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e016      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	00100002 	.word	0x00100002
 8004430:	ffff0000 	.word	0xffff0000

08004434 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	@ 0x30
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004452:	f7fe fea5 	bl	80031a0 <HAL_GetTick>
 8004456:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b20      	cmp	r3, #32
 8004462:	f040 8244 	bne.w	80048ee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2319      	movs	r3, #25
 800446c:	2201      	movs	r2, #1
 800446e:	4982      	ldr	r1, [pc, #520]	@ (8004678 <HAL_I2C_Mem_Read+0x244>)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fd15 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
 800447e:	e237      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_I2C_Mem_Read+0x5a>
 800448a:	2302      	movs	r3, #2
 800448c:	e230      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d007      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2222      	movs	r2, #34	@ 0x22
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2240      	movs	r2, #64	@ 0x40
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a62      	ldr	r2, [pc, #392]	@ (800467c <HAL_I2C_Mem_Read+0x248>)
 80044f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044f6:	88f8      	ldrh	r0, [r7, #6]
 80044f8:	893a      	ldrh	r2, [r7, #8]
 80044fa:	8979      	ldrh	r1, [r7, #10]
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fbe2 	bl	8004cd0 <I2C_RequestMemoryRead>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1ec      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d113      	bne.n	8004546 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e1c0      	b.n	80048c8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454a:	2b01      	cmp	r3, #1
 800454c:	d11e      	bne.n	800458c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800455e:	b672      	cpsid	i
}
 8004560:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004588:	b662      	cpsie	i
}
 800458a:	e035      	b.n	80045f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004590:	2b02      	cmp	r3, #2
 8004592:	d11e      	bne.n	80045d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045a4:	b672      	cpsid	i
}
 80045a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ce:	b662      	cpsie	i
}
 80045d0:	e012      	b.n	80045f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045f8:	e166      	b.n	80048c8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b03      	cmp	r3, #3
 8004600:	f200 811f 	bhi.w	8004842 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004608:	2b01      	cmp	r3, #1
 800460a:	d123      	bne.n	8004654 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fdef 	bl	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e167      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004652:	e139      	b.n	80048c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004658:	2b02      	cmp	r3, #2
 800465a:	d152      	bne.n	8004702 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2200      	movs	r2, #0
 8004664:	4906      	ldr	r1, [pc, #24]	@ (8004680 <HAL_I2C_Mem_Read+0x24c>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fc1a 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e13c      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
 8004676:	bf00      	nop
 8004678:	00100002 	.word	0x00100002
 800467c:	ffff0000 	.word	0xffff0000
 8004680:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004684:	b672      	cpsid	i
}
 8004686:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046ca:	b662      	cpsie	i
}
 80046cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004700:	e0e2      	b.n	80048c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	2200      	movs	r2, #0
 800470a:	497b      	ldr	r1, [pc, #492]	@ (80048f8 <HAL_I2C_Mem_Read+0x4c4>)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fbc7 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0e9      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800472c:	b672      	cpsid	i
}
 800472e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004762:	4b66      	ldr	r3, [pc, #408]	@ (80048fc <HAL_I2C_Mem_Read+0x4c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	08db      	lsrs	r3, r3, #3
 8004768:	4a65      	ldr	r2, [pc, #404]	@ (8004900 <HAL_I2C_Mem_Read+0x4cc>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0a1a      	lsrs	r2, r3, #8
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	00da      	lsls	r2, r3, #3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	3b01      	subs	r3, #1
 8004780:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d118      	bne.n	80047ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047aa:	b662      	cpsie	i
}
 80047ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e09a      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d1d9      	bne.n	800477c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800480a:	b662      	cpsie	i
}
 800480c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004840:	e042      	b.n	80048c8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004844:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fcd4 	bl	80051f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e04c      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d118      	bne.n	80048c8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f ae94 	bne.w	80045fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	@ 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	00010004 	.word	0x00010004
 80048fc:	20000000 	.word	0x20000000
 8004900:	14f8b589 	.word	0x14f8b589

08004904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d006      	beq.n	800492e <I2C_MasterRequestWrite+0x2a>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d003      	beq.n	800492e <I2C_MasterRequestWrite+0x2a>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800492c:	d108      	bne.n	8004940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e00b      	b.n	8004958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	2b12      	cmp	r3, #18
 8004946:	d107      	bne.n	8004958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fa9b 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497e:	d103      	bne.n	8004988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e035      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004994:	d108      	bne.n	80049a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	e01b      	b.n	80049e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049a8:	897b      	ldrh	r3, [r7, #10]
 80049aa:	11db      	asrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f063 030f 	orn	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	490e      	ldr	r1, [pc, #56]	@ (8004a00 <I2C_MasterRequestWrite+0xfc>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fae4 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e010      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4907      	ldr	r1, [pc, #28]	@ (8004a04 <I2C_MasterRequestWrite+0x100>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fad4 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	00010008 	.word	0x00010008
 8004a04:	00010002 	.word	0x00010002

08004a08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	460b      	mov	r3, r1
 8004a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d006      	beq.n	8004a42 <I2C_MasterRequestRead+0x3a>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d003      	beq.n	8004a42 <I2C_MasterRequestRead+0x3a>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a40:	d108      	bne.n	8004a54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e00b      	b.n	8004a6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	2b11      	cmp	r3, #17
 8004a5a:	d107      	bne.n	8004a6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa11 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00d      	beq.n	8004aa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a92:	d103      	bne.n	8004a9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e079      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa8:	d108      	bne.n	8004abc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	e05f      	b.n	8004b7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004abc:	897b      	ldrh	r3, [r7, #10]
 8004abe:	11db      	asrs	r3, r3, #7
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f063 030f 	orn	r3, r3, #15
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4930      	ldr	r1, [pc, #192]	@ (8004b9c <I2C_MasterRequestRead+0x194>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa5a 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e054      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4929      	ldr	r1, [pc, #164]	@ (8004ba0 <I2C_MasterRequestRead+0x198>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa4a 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e044      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f9af 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b56:	d103      	bne.n	8004b60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e017      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	11db      	asrs	r3, r3, #7
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f063 030e 	orn	r3, r3, #14
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4907      	ldr	r1, [pc, #28]	@ (8004ba0 <I2C_MasterRequestRead+0x198>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa06 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	00010008 	.word	0x00010008
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	813b      	strh	r3, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f960 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf4:	d103      	bne.n	8004bfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e05f      	b.n	8004cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	492d      	ldr	r1, [pc, #180]	@ (8004ccc <I2C_RequestMemoryWrite+0x128>)
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f9bb 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e04c      	b.n	8004cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	6a39      	ldr	r1, [r7, #32]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fa46 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d107      	bne.n	8004c66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e02b      	b.n	8004cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	611a      	str	r2, [r3, #16]
 8004c7a:	e021      	b.n	8004cc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c7c:	893b      	ldrh	r3, [r7, #8]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8c:	6a39      	ldr	r1, [r7, #32]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fa20 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d107      	bne.n	8004cb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e005      	b.n	8004cc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	00010002 	.word	0x00010002

08004cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f8c2 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d30:	d103      	bne.n	8004d3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0aa      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	4952      	ldr	r1, [pc, #328]	@ (8004e9c <I2C_RequestMemoryRead+0x1cc>)
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f91d 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e097      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7c:	6a39      	ldr	r1, [r7, #32]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f9a8 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d107      	bne.n	8004da2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e076      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d105      	bne.n	8004db8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dac:	893b      	ldrh	r3, [r7, #8]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	611a      	str	r2, [r3, #16]
 8004db6:	e021      	b.n	8004dfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004db8:	893b      	ldrh	r3, [r7, #8]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f982 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e050      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df2:	893b      	ldrh	r3, [r7, #8]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfe:	6a39      	ldr	r1, [r7, #32]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f967 	bl	80050d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d107      	bne.n	8004e24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e035      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f82b 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5e:	d103      	bne.n	8004e68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e013      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e6c:	897b      	ldrh	r3, [r7, #10]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	6a3a      	ldr	r2, [r7, #32]
 8004e80:	4906      	ldr	r1, [pc, #24]	@ (8004e9c <I2C_RequestMemoryRead+0x1cc>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f886 	bl	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	00010002 	.word	0x00010002

08004ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb0:	e048      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d044      	beq.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fe f971 	bl	80031a0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d139      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10d      	bne.n	8004ef6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	e00c      	b.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	43da      	mvns	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d116      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e023      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10d      	bne.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	43da      	mvns	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	e00c      	b.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	43da      	mvns	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d093      	beq.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa2:	e071      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb2:	d123      	bne.n	8004ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e067      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d041      	beq.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fe f8cc 	bl	80031a0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d136      	bne.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10c      	bne.n	800503e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	43da      	mvns	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4013      	ands	r3, r2
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e00b      	b.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	43da      	mvns	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e021      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10c      	bne.n	80050ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	43da      	mvns	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4013      	ands	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e00b      	b.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f af6d 	bne.w	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e0:	e034      	b.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8e3 	bl	80052ae <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e034      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d028      	beq.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fe f851 	bl	80031a0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d016      	beq.n	800514c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	2b80      	cmp	r3, #128	@ 0x80
 8005158:	d1c3      	bne.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005170:	e034      	b.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f89b 	bl	80052ae <I2C_IsAcknowledgeFailed>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e034      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d028      	beq.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fe f809 	bl	80031a0 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11d      	bne.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d016      	beq.n	80051dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e007      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d1c3      	bne.n	8005172 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005200:	e049      	b.n	8005296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b10      	cmp	r3, #16
 800520e:	d119      	bne.n	8005244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0210 	mvn.w	r2, #16
 8005218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e030      	b.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005244:	f7fd ffac 	bl	80031a0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11d      	bne.n	8005296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d016      	beq.n	8005296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e007      	b.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d1ae      	bne.n	8005202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c4:	d11b      	bne.n	80052fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e034      	b.n	8005386 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8005324:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800532e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6852      	ldr	r2, [r2, #4]
 8005338:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005344:	f7fd ff2c 	bl	80031a0 <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800534a:	e00f      	b.n	800536c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800534c:	f7fd ff28 	bl	80031a0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b27      	cmp	r3, #39	@ 0x27
 8005358:	d908      	bls.n	800536c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e00c      	b.n	8005386 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e8      	bne.n	800534c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005382:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800539e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e272      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8087 	beq.w	80054da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053cc:	4b92      	ldr	r3, [pc, #584]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d00c      	beq.n	80053f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053d8:	4b8f      	ldr	r3, [pc, #572]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d112      	bne.n	800540a <HAL_RCC_OscConfig+0x5e>
 80053e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d10b      	bne.n	800540a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f2:	4b89      	ldr	r3, [pc, #548]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d06c      	beq.n	80054d8 <HAL_RCC_OscConfig+0x12c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d168      	bne.n	80054d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e24c      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x76>
 8005414:	4b80      	ldr	r3, [pc, #512]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7f      	ldr	r2, [pc, #508]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800541a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e02e      	b.n	8005480 <HAL_RCC_OscConfig+0xd4>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0x98>
 800542a:	4b7b      	ldr	r3, [pc, #492]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7a      	ldr	r2, [pc, #488]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b78      	ldr	r3, [pc, #480]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a77      	ldr	r2, [pc, #476]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800543c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e01d      	b.n	8005480 <HAL_RCC_OscConfig+0xd4>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0xbc>
 800544e:	4b72      	ldr	r3, [pc, #456]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a71      	ldr	r2, [pc, #452]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b6f      	ldr	r3, [pc, #444]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a6e      	ldr	r2, [pc, #440]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e00b      	b.n	8005480 <HAL_RCC_OscConfig+0xd4>
 8005468:	4b6b      	ldr	r3, [pc, #428]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a6a      	ldr	r2, [pc, #424]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800546e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	4b68      	ldr	r3, [pc, #416]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a67      	ldr	r2, [pc, #412]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800547a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fd fe8a 	bl	80031a0 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005490:	f7fd fe86 	bl	80031a0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	@ 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e200      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0xe4>
 80054ae:	e014      	b.n	80054da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b0:	f7fd fe76 	bl	80031a0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b8:	f7fd fe72 	bl	80031a0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	@ 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1ec      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ca:	4b53      	ldr	r3, [pc, #332]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x10c>
 80054d6:	e000      	b.n	80054da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d063      	beq.n	80055ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054f2:	4b49      	ldr	r3, [pc, #292]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d11c      	bne.n	8005538 <HAL_RCC_OscConfig+0x18c>
 80054fe:	4b46      	ldr	r3, [pc, #280]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d116      	bne.n	8005538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550a:	4b43      	ldr	r3, [pc, #268]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_RCC_OscConfig+0x176>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e1c0      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005522:	4b3d      	ldr	r3, [pc, #244]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4939      	ldr	r1, [pc, #228]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005536:	e03a      	b.n	80055ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005540:	4b36      	ldr	r3, [pc, #216]	@ (800561c <HAL_RCC_OscConfig+0x270>)
 8005542:	2201      	movs	r2, #1
 8005544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd fe2b 	bl	80031a0 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554e:	f7fd fe27 	bl	80031a0 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e1a1      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005560:	4b2d      	ldr	r3, [pc, #180]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556c:	4b2a      	ldr	r3, [pc, #168]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4927      	ldr	r1, [pc, #156]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]
 8005580:	e015      	b.n	80055ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005582:	4b26      	ldr	r3, [pc, #152]	@ (800561c <HAL_RCC_OscConfig+0x270>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fd fe0a 	bl	80031a0 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005590:	f7fd fe06 	bl	80031a0 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e180      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03a      	beq.n	8005630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d019      	beq.n	80055f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c2:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <HAL_RCC_OscConfig+0x274>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fd fdea 	bl	80031a0 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fd fde6 	bl	80031a0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e160      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f000 face 	bl	8005b90 <RCC_Delay>
 80055f4:	e01c      	b.n	8005630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <HAL_RCC_OscConfig+0x274>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055fc:	f7fd fdd0 	bl	80031a0 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005602:	e00f      	b.n	8005624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005604:	f7fd fdcc 	bl	80031a0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d908      	bls.n	8005624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e146      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000
 800561c:	42420000 	.word	0x42420000
 8005620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005624:	4b92      	ldr	r3, [pc, #584]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e9      	bne.n	8005604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80a6 	beq.w	800578a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005642:	4b8b      	ldr	r3, [pc, #556]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10d      	bne.n	800566a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564e:	4b88      	ldr	r3, [pc, #544]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4a87      	ldr	r2, [pc, #540]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005658:	61d3      	str	r3, [r2, #28]
 800565a:	4b85      	ldr	r3, [pc, #532]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	4b82      	ldr	r3, [pc, #520]	@ (8005874 <HAL_RCC_OscConfig+0x4c8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d118      	bne.n	80056a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005676:	4b7f      	ldr	r3, [pc, #508]	@ (8005874 <HAL_RCC_OscConfig+0x4c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7e      	ldr	r2, [pc, #504]	@ (8005874 <HAL_RCC_OscConfig+0x4c8>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005682:	f7fd fd8d 	bl	80031a0 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800568a:	f7fd fd89 	bl	80031a0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b64      	cmp	r3, #100	@ 0x64
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e103      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	4b75      	ldr	r3, [pc, #468]	@ (8005874 <HAL_RCC_OscConfig+0x4c8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d106      	bne.n	80056be <HAL_RCC_OscConfig+0x312>
 80056b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6213      	str	r3, [r2, #32]
 80056bc:	e02d      	b.n	800571a <HAL_RCC_OscConfig+0x36e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x334>
 80056c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4a69      	ldr	r2, [pc, #420]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	6213      	str	r3, [r2, #32]
 80056d2:	4b67      	ldr	r3, [pc, #412]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4a66      	ldr	r2, [pc, #408]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	6213      	str	r3, [r2, #32]
 80056de:	e01c      	b.n	800571a <HAL_RCC_OscConfig+0x36e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d10c      	bne.n	8005702 <HAL_RCC_OscConfig+0x356>
 80056e8:	4b61      	ldr	r3, [pc, #388]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4a60      	ldr	r2, [pc, #384]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	f043 0304 	orr.w	r3, r3, #4
 80056f2:	6213      	str	r3, [r2, #32]
 80056f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6213      	str	r3, [r2, #32]
 8005700:	e00b      	b.n	800571a <HAL_RCC_OscConfig+0x36e>
 8005702:	4b5b      	ldr	r3, [pc, #364]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	4a5a      	ldr	r2, [pc, #360]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	6213      	str	r3, [r2, #32]
 800570e:	4b58      	ldr	r3, [pc, #352]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4a57      	ldr	r2, [pc, #348]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d015      	beq.n	800574e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005722:	f7fd fd3d 	bl	80031a0 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005728:	e00a      	b.n	8005740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572a:	f7fd fd39 	bl	80031a0 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005738:	4293      	cmp	r3, r2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0b1      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005740:	4b4b      	ldr	r3, [pc, #300]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0ee      	beq.n	800572a <HAL_RCC_OscConfig+0x37e>
 800574c:	e014      	b.n	8005778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574e:	f7fd fd27 	bl	80031a0 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005754:	e00a      	b.n	800576c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fd fd23 	bl	80031a0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e09b      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800576c:	4b40      	ldr	r3, [pc, #256]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ee      	bne.n	8005756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d105      	bne.n	800578a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577e:	4b3c      	ldr	r3, [pc, #240]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	4a3b      	ldr	r2, [pc, #236]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8087 	beq.w	80058a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005794:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b08      	cmp	r3, #8
 800579e:	d061      	beq.n	8005864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d146      	bne.n	8005836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a8:	4b33      	ldr	r3, [pc, #204]	@ (8005878 <HAL_RCC_OscConfig+0x4cc>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ae:	f7fd fcf7 	bl	80031a0 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b6:	f7fd fcf3 	bl	80031a0 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e06d      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c8:	4b29      	ldr	r3, [pc, #164]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f0      	bne.n	80057b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057dc:	d108      	bne.n	80057f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057de:	4b24      	ldr	r3, [pc, #144]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4921      	ldr	r1, [pc, #132]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a19      	ldr	r1, [r3, #32]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	430b      	orrs	r3, r1
 8005802:	491b      	ldr	r1, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005808:	4b1b      	ldr	r3, [pc, #108]	@ (8005878 <HAL_RCC_OscConfig+0x4cc>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7fd fcc7 	bl	80031a0 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005816:	f7fd fcc3 	bl	80031a0 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e03d      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005828:	4b11      	ldr	r3, [pc, #68]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCC_OscConfig+0x46a>
 8005834:	e035      	b.n	80058a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <HAL_RCC_OscConfig+0x4cc>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fd fcb0 	bl	80031a0 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fd fcac 	bl	80031a0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e026      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x498>
 8005862:	e01e      	b.n	80058a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e019      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
 8005870:	40021000 	.word	0x40021000
 8005874:	40007000 	.word	0x40007000
 8005878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800587c:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <HAL_RCC_OscConfig+0x500>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	429a      	cmp	r2, r3
 800588e:	d106      	bne.n	800589e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000

080058b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0d0      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d910      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b67      	ldr	r3, [pc, #412]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 0207 	bic.w	r2, r3, #7
 80058da:	4965      	ldr	r1, [pc, #404]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b63      	ldr	r3, [pc, #396]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0b8      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800590c:	4b59      	ldr	r3, [pc, #356]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a58      	ldr	r2, [pc, #352]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005924:	4b53      	ldr	r3, [pc, #332]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a52      	ldr	r2, [pc, #328]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800592a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800592e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005930:	4b50      	ldr	r3, [pc, #320]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	494d      	ldr	r1, [pc, #308]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	4313      	orrs	r3, r2
 8005940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d040      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005956:	4b47      	ldr	r3, [pc, #284]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d115      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d107      	bne.n	800597e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596e:	4b41      	ldr	r3, [pc, #260]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e073      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e06b      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f023 0203 	bic.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4936      	ldr	r1, [pc, #216]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a0:	f7fd fbfe 	bl	80031a0 <HAL_GetTick>
 80059a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	e00a      	b.n	80059be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a8:	f7fd fbfa 	bl	80031a0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e053      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059be:	4b2d      	ldr	r3, [pc, #180]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 020c 	and.w	r2, r3, #12
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d1eb      	bne.n	80059a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d0:	4b27      	ldr	r3, [pc, #156]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d210      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b24      	ldr	r3, [pc, #144]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f023 0207 	bic.w	r2, r3, #7
 80059e6:	4922      	ldr	r1, [pc, #136]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b20      	ldr	r3, [pc, #128]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e032      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0c:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4916      	ldr	r1, [pc, #88]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	490e      	ldr	r1, [pc, #56]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3e:	f000 f821 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a42:	4602      	mov	r2, r0
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	490a      	ldr	r1, [pc, #40]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	5ccb      	ldrb	r3, [r1, r3]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	4a09      	ldr	r2, [pc, #36]	@ (8005a7c <HAL_RCC_ClockConfig+0x1cc>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <HAL_RCC_ClockConfig+0x1d0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd fb5c 	bl	800311c <HAL_InitTick>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40022000 	.word	0x40022000
 8005a74:	40021000 	.word	0x40021000
 8005a78:	08007604 	.word	0x08007604
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	20000004 	.word	0x20000004

08005a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d002      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_GetSysClockFreq+0x36>
 8005ab2:	e027      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ab4:	4b19      	ldr	r3, [pc, #100]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ab6:	613b      	str	r3, [r7, #16]
      break;
 8005ab8:	e027      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	0c9b      	lsrs	r3, r3, #18
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ad2:	4b11      	ldr	r3, [pc, #68]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	0c5b      	lsrs	r3, r3, #17
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ade:	5cd3      	ldrb	r3, [r2, r3]
 8005ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ae6:	fb03 f202 	mul.w	r2, r3, r2
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e004      	b.n	8005afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a0c      	ldr	r2, [pc, #48]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005af8:	fb02 f303 	mul.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	613b      	str	r3, [r7, #16]
      break;
 8005b02:	e002      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005b06:	613b      	str	r3, [r7, #16]
      break;
 8005b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b0a:	693b      	ldr	r3, [r7, #16]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	007a1200 	.word	0x007a1200
 8005b20:	0800761c 	.word	0x0800761c
 8005b24:	0800762c 	.word	0x0800762c
 8005b28:	003d0900 	.word	0x003d0900

08005b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b30:	4b02      	ldr	r3, [pc, #8]	@ (8005b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr
 8005b3c:	20000000 	.word	0x20000000

08005b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b44:	f7ff fff2 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	@ (8005b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4903      	ldr	r1, [pc, #12]	@ (8005b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40021000 	.word	0x40021000
 8005b64:	08007614 	.word	0x08007614

08005b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b6c:	f7ff ffde 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	0adb      	lsrs	r3, r3, #11
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	4903      	ldr	r1, [pc, #12]	@ (8005b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b7e:	5ccb      	ldrb	r3, [r1, r3]
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	08007614 	.word	0x08007614

08005b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <RCC_Delay+0x34>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc8 <RCC_Delay+0x38>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0a5b      	lsrs	r3, r3, #9
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bac:	bf00      	nop
  }
  while (Delay --);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	60fa      	str	r2, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f9      	bne.n	8005bac <RCC_Delay+0x1c>
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	20000000 	.word	0x20000000
 8005bc8:	10624dd3 	.word	0x10624dd3

08005bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d07d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005be8:	2300      	movs	r3, #0
 8005bea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bec:	4b4f      	ldr	r3, [pc, #316]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10d      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c02:	61d3      	str	r3, [r2, #28]
 8005c04:	4b49      	ldr	r3, [pc, #292]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	4b46      	ldr	r3, [pc, #280]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d118      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c20:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a42      	ldr	r2, [pc, #264]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fab8 	bl	80031a0 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c32:	e008      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c34:	f7fd fab4 	bl	80031a0 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	@ 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e06d      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c46:	4b3a      	ldr	r3, [pc, #232]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c52:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02e      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d027      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c70:	4b2e      	ldr	r3, [pc, #184]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c80:	4b2c      	ldr	r3, [pc, #176]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c86:	4a29      	ldr	r2, [pc, #164]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fd fa83 	bl	80031a0 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fd fa7f 	bl	80031a0 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e036      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ee      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4917      	ldr	r1, [pc, #92]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd8:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	490b      	ldr	r1, [pc, #44]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d008      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d0e:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40007000 	.word	0x40007000
 8005d34:	42420440 	.word	0x42420440

08005d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e076      	b.n	8005e38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d5a:	d009      	beq.n	8005d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	61da      	str	r2, [r3, #28]
 8005d62:	e005      	b.n	8005d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fc ffda 	bl	8002d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df4:	ea42 0103 	orr.w	r1, r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	0c1a      	lsrs	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f002 0204 	and.w	r2, r2, #4
 8005e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69da      	ldr	r2, [r3, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_SPI_Transmit+0x22>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e12d      	b.n	80060be <HAL_SPI_Transmit+0x27e>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e6a:	f7fd f999 	bl	80031a0 <HAL_GetTick>
 8005e6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d002      	beq.n	8005e86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
 8005e82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e84:	e116      	b.n	80060b4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Transmit+0x52>
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e96:	e10d      	b.n	80060b4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ede:	d10f      	bne.n	8005f00 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d007      	beq.n	8005f1e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f26:	d14f      	bne.n	8005fc8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_Transmit+0xf6>
 8005f30:	8afb      	ldrh	r3, [r7, #22]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d142      	bne.n	8005fbc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f5a:	e02f      	b.n	8005fbc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d112      	bne.n	8005f90 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f8e:	e015      	b.n	8005fbc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f90:	f7fd f906 	bl	80031a0 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d803      	bhi.n	8005fa8 <HAL_SPI_Transmit+0x168>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x16e>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005fba:	e07b      	b.n	80060b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ca      	bne.n	8005f5c <HAL_SPI_Transmit+0x11c>
 8005fc6:	e050      	b.n	800606a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Transmit+0x196>
 8005fd0:	8afb      	ldrh	r3, [r7, #22]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d144      	bne.n	8006060 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	7812      	ldrb	r2, [r2, #0]
 8005fe2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ffc:	e030      	b.n	8006060 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d113      	bne.n	8006034 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006032:	e015      	b.n	8006060 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006034:	f7fd f8b4 	bl	80031a0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d803      	bhi.n	800604c <HAL_SPI_Transmit+0x20c>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d102      	bne.n	8006052 <HAL_SPI_Transmit+0x212>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800605e:	e029      	b.n	80060b4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1c9      	bne.n	8005ffe <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fbcc 	bl	800680c <SPI_EndRxTxTransaction>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006088:	2300      	movs	r3, #0
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e003      	b.n	80060b4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80060bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b088      	sub	sp, #32
 80060ca:	af02      	add	r7, sp, #8
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
 80060e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060ea:	e0fb      	b.n	80062e4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f4:	d112      	bne.n	800611c <HAL_SPI_Receive+0x56>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10e      	bne.n	800611c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2204      	movs	r2, #4
 8006102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f8ef 	bl	80062f6 <HAL_SPI_TransmitReceive>
 8006118:	4603      	mov	r3, r0
 800611a:	e0e8      	b.n	80062ee <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_SPI_Receive+0x64>
 8006126:	2302      	movs	r3, #2
 8006128:	e0e1      	b.n	80062ee <HAL_SPI_Receive+0x228>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006132:	f7fd f835 	bl	80031a0 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Receive+0x7e>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006148:	e0cc      	b.n	80062e4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2204      	movs	r2, #4
 800614e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006190:	d10f      	bne.n	80061b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061bc:	2b40      	cmp	r3, #64	@ 0x40
 80061be:	d007      	beq.n	80061d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d16a      	bne.n	80062ae <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061d8:	e032      	b.n	8006240 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d115      	bne.n	8006214 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f103 020c 	add.w	r2, r3, #12
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006212:	e015      	b.n	8006240 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006214:	f7fc ffc4 	bl	80031a0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d803      	bhi.n	800622c <HAL_SPI_Receive+0x166>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d102      	bne.n	8006232 <HAL_SPI_Receive+0x16c>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800623e:	e051      	b.n	80062e4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1c7      	bne.n	80061da <HAL_SPI_Receive+0x114>
 800624a:	e035      	b.n	80062b8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d113      	bne.n	8006282 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	b292      	uxth	r2, r2
 8006266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	1c9a      	adds	r2, r3, #2
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006280:	e015      	b.n	80062ae <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006282:	f7fc ff8d 	bl	80031a0 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d803      	bhi.n	800629a <HAL_SPI_Receive+0x1d4>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_Receive+0x1da>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80062ac:	e01a      	b.n	80062e4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1c9      	bne.n	800624c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fa53 	bl	8006768 <SPI_EndRxTransaction>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
 80062da:	e003      	b.n	80062e4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b08c      	sub	sp, #48	@ 0x30
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_SPI_TransmitReceive+0x26>
 8006318:	2302      	movs	r3, #2
 800631a:	e198      	b.n	800664e <HAL_SPI_TransmitReceive+0x358>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006324:	f7fc ff3c 	bl	80031a0 <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800633e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006342:	2b01      	cmp	r3, #1
 8006344:	d00f      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x70>
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800634c:	d107      	bne.n	800635e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_SPI_TransmitReceive+0x68>
 8006356:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800635a:	2b04      	cmp	r3, #4
 800635c:	d003      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800635e:	2302      	movs	r3, #2
 8006360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006364:	e16d      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x82>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x82>
 8006372:	887b      	ldrh	r3, [r7, #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800637e:	e160      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b04      	cmp	r3, #4
 800638a:	d003      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2205      	movs	r2, #5
 8006390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	887a      	ldrh	r2, [r7, #2]
 80063aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	887a      	ldrh	r2, [r7, #2]
 80063b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	887a      	ldrh	r2, [r7, #2]
 80063bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d007      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f0:	d17c      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x10a>
 80063fa:	8b7b      	ldrh	r3, [r7, #26]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d16a      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006424:	e057      	b.n	80064d6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d11b      	bne.n	800646c <HAL_SPI_TransmitReceive+0x176>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_SPI_TransmitReceive+0x176>
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d113      	bne.n	800646c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b01      	cmp	r3, #1
 8006478:	d119      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x1b8>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d014      	beq.n	80064ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	b292      	uxth	r2, r2
 8006490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	1c9a      	adds	r2, r3, #2
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064aa:	2301      	movs	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ae:	f7fc fe77 	bl	80031a0 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d80b      	bhi.n	80064d6 <HAL_SPI_TransmitReceive+0x1e0>
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d007      	beq.n	80064d6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80064d4:	e0b5      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1a2      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x130>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d19d      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x130>
 80064ea:	e080      	b.n	80065ee <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x204>
 80064f4:	8b7b      	ldrh	r3, [r7, #26]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d16f      	bne.n	80065da <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	7812      	ldrb	r2, [r2, #0]
 8006506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006520:	e05b      	b.n	80065da <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11c      	bne.n	800656a <HAL_SPI_TransmitReceive+0x274>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d017      	beq.n	800656a <HAL_SPI_TransmitReceive+0x274>
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d114      	bne.n	800656a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d119      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x2b6>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d014      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a8:	2301      	movs	r3, #1
 80065aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065ac:	f7fc fdf8 	bl	80031a0 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d803      	bhi.n	80065c4 <HAL_SPI_TransmitReceive+0x2ce>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d102      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x2d4>
 80065c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80065d8:	e033      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d19e      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x22c>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d199      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f90a 	bl	800680c <SPI_EndRxTxTransaction>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800660a:	e01a      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006638:	e003      	b.n	8006642 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800664a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800664e:	4618      	mov	r0, r3
 8006650:	3730      	adds	r7, #48	@ 0x30
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006668:	f7fc fd9a 	bl	80031a0 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	4413      	add	r3, r2
 8006676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006678:	f7fc fd92 	bl	80031a0 <HAL_GetTick>
 800667c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	015b      	lsls	r3, r3, #5
 8006684:	0d1b      	lsrs	r3, r3, #20
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668e:	e054      	b.n	800673a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d050      	beq.n	800673a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006698:	f7fc fd82 	bl	80031a0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d902      	bls.n	80066ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d13d      	bne.n	800672a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c6:	d111      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d0:	d004      	beq.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066da:	d107      	bne.n	80066ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f4:	d10f      	bne.n	8006716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e017      	b.n	800675a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	3b01      	subs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d19b      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000000 	.word	0x20000000

08006768 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800677c:	d111      	bne.n	80067a2 <SPI_EndRxTransaction+0x3a>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006786:	d004      	beq.n	8006792 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006790:	d107      	bne.n	80067a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067aa:	d117      	bne.n	80067dc <SPI_EndRxTransaction+0x74>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b4:	d112      	bne.n	80067dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	2101      	movs	r1, #1
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff ff49 	bl	8006658 <SPI_WaitFlagStateUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01a      	beq.n	8006802 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d0:	f043 0220 	orr.w	r2, r3, #32
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e013      	b.n	8006804 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	2180      	movs	r1, #128	@ 0x80
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ff36 	bl	8006658 <SPI_WaitFlagStateUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e000      	b.n	8006804 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	2180      	movs	r1, #128	@ 0x80
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff ff18 	bl	8006658 <SPI_WaitFlagStateUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e000      	b.n	8006840 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e042      	b.n	80068e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fab2 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	@ 0x24
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800688a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fcd5 	bl	800723c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d112      	bne.n	8006928 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_UART_Receive_IT+0x26>
 8006908:	88fb      	ldrh	r3, [r7, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e00b      	b.n	800692a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	461a      	mov	r2, r3
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fab7 	bl	8006e92 <UART_Start_Receive_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	e000      	b.n	800692a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b0ba      	sub	sp, #232	@ 0xe8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_UART_IRQHandler+0x66>
 8006986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb93 	bl	80070be <UART_Receive_IT>
      return;
 8006998:	e25b      	b.n	8006e52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800699a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80de 	beq.w	8006b60 <HAL_UART_IRQHandler+0x22c>
 80069a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80d1 	beq.w	8006b60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_UART_IRQHandler+0xae>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	f043 0201 	orr.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <HAL_UART_IRQHandler+0xd2>
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fe:	f043 0202 	orr.w	r2, r3, #2
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_UART_IRQHandler+0xf6>
 8006a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f043 0204 	orr.w	r2, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <HAL_UART_IRQHandler+0x126>
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	f043 0208 	orr.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 81f2 	beq.w	8006e48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_UART_IRQHandler+0x14e>
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb1e 	bl	80070be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <HAL_UART_IRQHandler+0x17a>
 8006aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d04f      	beq.n	8006b4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa28 	bl	8006f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d041      	beq.n	8006b46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006aee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1d9      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d013      	beq.n	8006b3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d14 <HAL_UART_IRQHandler+0x3e0>)
 8006b1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fc fcb2 	bl	800348c <HAL_DMA_Abort_IT>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d016      	beq.n	8006b5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	e00e      	b.n	8006b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f993 	bl	8006e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b44:	e00a      	b.n	8006b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f98f 	bl	8006e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	e006      	b.n	8006b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f98b 	bl	8006e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b5a:	e175      	b.n	8006e48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	bf00      	nop
    return;
 8006b5e:	e173      	b.n	8006e48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	f040 814f 	bne.w	8006e08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8148 	beq.w	8006e08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8141 	beq.w	8006e08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b86:	2300      	movs	r3, #0
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 80b6 	beq.w	8006d18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8145 	beq.w	8006e4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f080 813e 	bcs.w	8006e4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f000 8088 	beq.w	8006cf4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1d9      	bne.n	8006be4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e1      	bne.n	8006c30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e3      	bne.n	8006c6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc4:	f023 0310 	bic.w	r3, r3, #16
 8006cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006cd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fc fb91 	bl	8003416 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f8b6 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d10:	e09c      	b.n	8006e4c <HAL_UART_IRQHandler+0x518>
 8006d12:	bf00      	nop
 8006d14:	08006fc9 	.word	0x08006fc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 808e 	beq.w	8006e50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8089 	beq.w	8006e50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d62:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e3      	bne.n	8006d3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	623b      	str	r3, [r7, #32]
   return(result);
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3314      	adds	r3, #20
 8006d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e3      	bne.n	8006d76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006de0:	61fa      	str	r2, [r7, #28]
 8006de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69b9      	ldr	r1, [r7, #24]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	617b      	str	r3, [r7, #20]
   return(result);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e3      	bne.n	8006dbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f83b 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e06:	e023      	b.n	8006e50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <HAL_UART_IRQHandler+0x4f4>
 8006e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8e5 	bl	8006ff0 <UART_Transmit_IT>
    return;
 8006e26:	e014      	b.n	8006e52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00e      	beq.n	8006e52 <HAL_UART_IRQHandler+0x51e>
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f924 	bl	800708e <UART_EndTransmit_IT>
    return;
 8006e46:	e004      	b.n	8006e52 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e50:	bf00      	nop
  }
}
 8006e52:	37e8      	adds	r7, #232	@ 0xe8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr

08006e92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2222      	movs	r2, #34	@ 0x22
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0220 	orr.w	r2, r2, #32
 8006ef6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b095      	sub	sp, #84	@ 0x54
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	330c      	adds	r3, #12
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3314      	adds	r3, #20
 8006f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d119      	bne.n	8006fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f023 0310 	bic.w	r3, r3, #16
 8006f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f9c:	61ba      	str	r2, [r7, #24]
 8006f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6979      	ldr	r1, [r7, #20]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fbe:	bf00      	nop
 8006fc0:	3754      	adds	r7, #84	@ 0x54
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff ff41 	bl	8006e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b21      	cmp	r3, #33	@ 0x21
 8007002:	d13e      	bne.n	8007082 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700c:	d114      	bne.n	8007038 <UART_Transmit_IT+0x48>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d110      	bne.n	8007038 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800702a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]
 8007036:	e008      	b.n	800704a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	1c59      	adds	r1, r3, #1
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6211      	str	r1, [r2, #32]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29b      	uxth	r3, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10f      	bne.n	800707e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800706c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800707c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr

0800708e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fed2 	bl	8006e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b08c      	sub	sp, #48	@ 0x30
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b22      	cmp	r3, #34	@ 0x22
 80070d0:	f040 80ae 	bne.w	8007230 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070dc:	d117      	bne.n	800710e <UART_Receive_IT+0x50>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d113      	bne.n	800710e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	1c9a      	adds	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	629a      	str	r2, [r3, #40]	@ 0x28
 800710c:	e026      	b.n	800715c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007120:	d007      	beq.n	8007132 <UART_Receive_IT+0x74>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <UART_Receive_IT+0x82>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e008      	b.n	8007152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714c:	b2da      	uxtb	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	4619      	mov	r1, r3
 800716a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800716c:	2b00      	cmp	r3, #0
 800716e:	d15d      	bne.n	800722c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0220 	bic.w	r2, r2, #32
 800717e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800718e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d135      	bne.n	8007222 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	613b      	str	r3, [r7, #16]
   return(result);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f023 0310 	bic.w	r3, r3, #16
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	330c      	adds	r3, #12
 80071da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071dc:	623a      	str	r2, [r7, #32]
 80071de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	69f9      	ldr	r1, [r7, #28]
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e5      	bne.n	80071bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d10a      	bne.n	8007214 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fe2e 	bl	8006e7c <HAL_UARTEx_RxEventCallback>
 8007220:	e002      	b.n	8007228 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa fc02 	bl	8001a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e002      	b.n	8007232 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3730      	adds	r7, #48	@ 0x30
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007276:	f023 030c 	bic.w	r3, r3, #12
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	430b      	orrs	r3, r1
 8007282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2c      	ldr	r2, [pc, #176]	@ (8007350 <UART_SetConfig+0x114>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d103      	bne.n	80072ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fe fc60 	bl	8005b68 <HAL_RCC_GetPCLK2Freq>
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	e002      	b.n	80072b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fe fc48 	bl	8005b40 <HAL_RCC_GetPCLK1Freq>
 80072b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009a      	lsls	r2, r3, #2
 80072bc:	441a      	add	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c8:	4a22      	ldr	r2, [pc, #136]	@ (8007354 <UART_SetConfig+0x118>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	0119      	lsls	r1, r3, #4
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009a      	lsls	r2, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <UART_SetConfig+0x118>)
 80072ea:	fba3 0302 	umull	r0, r3, r3, r2
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2064      	movs	r0, #100	@ 0x64
 80072f2:	fb00 f303 	mul.w	r3, r0, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	3332      	adds	r3, #50	@ 0x32
 80072fc:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <UART_SetConfig+0x118>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007308:	4419      	add	r1, r3
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009a      	lsls	r2, r3, #2
 8007314:	441a      	add	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <UART_SetConfig+0x118>)
 8007322:	fba3 0302 	umull	r0, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2064      	movs	r0, #100	@ 0x64
 800732a:	fb00 f303 	mul.w	r3, r0, r3
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	3332      	adds	r3, #50	@ 0x32
 8007334:	4a07      	ldr	r2, [pc, #28]	@ (8007354 <UART_SetConfig+0x118>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	440a      	add	r2, r1
 8007346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40013800 	.word	0x40013800
 8007354:	51eb851f 	.word	0x51eb851f

08007358 <malloc>:
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <malloc+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f000 b82d 	b.w	80073bc <_malloc_r>
 8007362:	bf00      	nop
 8007364:	2000000c 	.word	0x2000000c

08007368 <free>:
 8007368:	4b02      	ldr	r3, [pc, #8]	@ (8007374 <free+0xc>)
 800736a:	4601      	mov	r1, r0
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f000 b8f5 	b.w	800755c <_free_r>
 8007372:	bf00      	nop
 8007374:	2000000c 	.word	0x2000000c

08007378 <sbrk_aligned>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4e0f      	ldr	r6, [pc, #60]	@ (80073b8 <sbrk_aligned+0x40>)
 800737c:	460c      	mov	r4, r1
 800737e:	6831      	ldr	r1, [r6, #0]
 8007380:	4605      	mov	r5, r0
 8007382:	b911      	cbnz	r1, 800738a <sbrk_aligned+0x12>
 8007384:	f000 f8ae 	bl	80074e4 <_sbrk_r>
 8007388:	6030      	str	r0, [r6, #0]
 800738a:	4621      	mov	r1, r4
 800738c:	4628      	mov	r0, r5
 800738e:	f000 f8a9 	bl	80074e4 <_sbrk_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d103      	bne.n	800739e <sbrk_aligned+0x26>
 8007396:	f04f 34ff 	mov.w	r4, #4294967295
 800739a:	4620      	mov	r0, r4
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	1cc4      	adds	r4, r0, #3
 80073a0:	f024 0403 	bic.w	r4, r4, #3
 80073a4:	42a0      	cmp	r0, r4
 80073a6:	d0f8      	beq.n	800739a <sbrk_aligned+0x22>
 80073a8:	1a21      	subs	r1, r4, r0
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f89a 	bl	80074e4 <_sbrk_r>
 80073b0:	3001      	adds	r0, #1
 80073b2:	d1f2      	bne.n	800739a <sbrk_aligned+0x22>
 80073b4:	e7ef      	b.n	8007396 <sbrk_aligned+0x1e>
 80073b6:	bf00      	nop
 80073b8:	20000388 	.word	0x20000388

080073bc <_malloc_r>:
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	1ccd      	adds	r5, r1, #3
 80073c2:	f025 0503 	bic.w	r5, r5, #3
 80073c6:	3508      	adds	r5, #8
 80073c8:	2d0c      	cmp	r5, #12
 80073ca:	bf38      	it	cc
 80073cc:	250c      	movcc	r5, #12
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	4606      	mov	r6, r0
 80073d2:	db01      	blt.n	80073d8 <_malloc_r+0x1c>
 80073d4:	42a9      	cmp	r1, r5
 80073d6:	d904      	bls.n	80073e2 <_malloc_r+0x26>
 80073d8:	230c      	movs	r3, #12
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	2000      	movs	r0, #0
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074b8 <_malloc_r+0xfc>
 80073e6:	f000 f869 	bl	80074bc <__malloc_lock>
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	461c      	mov	r4, r3
 80073f0:	bb44      	cbnz	r4, 8007444 <_malloc_r+0x88>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffbf 	bl	8007378 <sbrk_aligned>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	4604      	mov	r4, r0
 80073fe:	d158      	bne.n	80074b2 <_malloc_r+0xf6>
 8007400:	f8d8 4000 	ldr.w	r4, [r8]
 8007404:	4627      	mov	r7, r4
 8007406:	2f00      	cmp	r7, #0
 8007408:	d143      	bne.n	8007492 <_malloc_r+0xd6>
 800740a:	2c00      	cmp	r4, #0
 800740c:	d04b      	beq.n	80074a6 <_malloc_r+0xea>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	4639      	mov	r1, r7
 8007412:	4630      	mov	r0, r6
 8007414:	eb04 0903 	add.w	r9, r4, r3
 8007418:	f000 f864 	bl	80074e4 <_sbrk_r>
 800741c:	4581      	cmp	r9, r0
 800741e:	d142      	bne.n	80074a6 <_malloc_r+0xea>
 8007420:	6821      	ldr	r1, [r4, #0]
 8007422:	4630      	mov	r0, r6
 8007424:	1a6d      	subs	r5, r5, r1
 8007426:	4629      	mov	r1, r5
 8007428:	f7ff ffa6 	bl	8007378 <sbrk_aligned>
 800742c:	3001      	adds	r0, #1
 800742e:	d03a      	beq.n	80074a6 <_malloc_r+0xea>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	442b      	add	r3, r5
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	f8d8 3000 	ldr.w	r3, [r8]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	bb62      	cbnz	r2, 8007498 <_malloc_r+0xdc>
 800743e:	f8c8 7000 	str.w	r7, [r8]
 8007442:	e00f      	b.n	8007464 <_malloc_r+0xa8>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	1b52      	subs	r2, r2, r5
 8007448:	d420      	bmi.n	800748c <_malloc_r+0xd0>
 800744a:	2a0b      	cmp	r2, #11
 800744c:	d917      	bls.n	800747e <_malloc_r+0xc2>
 800744e:	1961      	adds	r1, r4, r5
 8007450:	42a3      	cmp	r3, r4
 8007452:	6025      	str	r5, [r4, #0]
 8007454:	bf18      	it	ne
 8007456:	6059      	strne	r1, [r3, #4]
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	bf08      	it	eq
 800745c:	f8c8 1000 	streq.w	r1, [r8]
 8007460:	5162      	str	r2, [r4, r5]
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f82f 	bl	80074c8 <__malloc_unlock>
 800746a:	f104 000b 	add.w	r0, r4, #11
 800746e:	1d23      	adds	r3, r4, #4
 8007470:	f020 0007 	bic.w	r0, r0, #7
 8007474:	1ac2      	subs	r2, r0, r3
 8007476:	bf1c      	itt	ne
 8007478:	1a1b      	subne	r3, r3, r0
 800747a:	50a3      	strne	r3, [r4, r2]
 800747c:	e7af      	b.n	80073de <_malloc_r+0x22>
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	42a3      	cmp	r3, r4
 8007482:	bf0c      	ite	eq
 8007484:	f8c8 2000 	streq.w	r2, [r8]
 8007488:	605a      	strne	r2, [r3, #4]
 800748a:	e7eb      	b.n	8007464 <_malloc_r+0xa8>
 800748c:	4623      	mov	r3, r4
 800748e:	6864      	ldr	r4, [r4, #4]
 8007490:	e7ae      	b.n	80073f0 <_malloc_r+0x34>
 8007492:	463c      	mov	r4, r7
 8007494:	687f      	ldr	r7, [r7, #4]
 8007496:	e7b6      	b.n	8007406 <_malloc_r+0x4a>
 8007498:	461a      	mov	r2, r3
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	d1fb      	bne.n	8007498 <_malloc_r+0xdc>
 80074a0:	2300      	movs	r3, #0
 80074a2:	6053      	str	r3, [r2, #4]
 80074a4:	e7de      	b.n	8007464 <_malloc_r+0xa8>
 80074a6:	230c      	movs	r3, #12
 80074a8:	4630      	mov	r0, r6
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f000 f80c 	bl	80074c8 <__malloc_unlock>
 80074b0:	e794      	b.n	80073dc <_malloc_r+0x20>
 80074b2:	6005      	str	r5, [r0, #0]
 80074b4:	e7d6      	b.n	8007464 <_malloc_r+0xa8>
 80074b6:	bf00      	nop
 80074b8:	2000038c 	.word	0x2000038c

080074bc <__malloc_lock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	@ (80074c4 <__malloc_lock+0x8>)
 80074be:	f000 b84b 	b.w	8007558 <__retarget_lock_acquire_recursive>
 80074c2:	bf00      	nop
 80074c4:	200004cc 	.word	0x200004cc

080074c8 <__malloc_unlock>:
 80074c8:	4801      	ldr	r0, [pc, #4]	@ (80074d0 <__malloc_unlock+0x8>)
 80074ca:	f000 b846 	b.w	800755a <__retarget_lock_release_recursive>
 80074ce:	bf00      	nop
 80074d0:	200004cc 	.word	0x200004cc

080074d4 <memset>:
 80074d4:	4603      	mov	r3, r0
 80074d6:	4402      	add	r2, r0
 80074d8:	4293      	cmp	r3, r2
 80074da:	d100      	bne.n	80074de <memset+0xa>
 80074dc:	4770      	bx	lr
 80074de:	f803 1b01 	strb.w	r1, [r3], #1
 80074e2:	e7f9      	b.n	80074d8 <memset+0x4>

080074e4 <_sbrk_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	2300      	movs	r3, #0
 80074e8:	4d05      	ldr	r5, [pc, #20]	@ (8007500 <_sbrk_r+0x1c>)
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fb fd70 	bl	8002fd4 <_sbrk>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_sbrk_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_sbrk_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200004c8 	.word	0x200004c8

08007504 <__errno>:
 8007504:	4b01      	ldr	r3, [pc, #4]	@ (800750c <__errno+0x8>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c

08007510 <__libc_init_array>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	2600      	movs	r6, #0
 8007514:	4d0c      	ldr	r5, [pc, #48]	@ (8007548 <__libc_init_array+0x38>)
 8007516:	4c0d      	ldr	r4, [pc, #52]	@ (800754c <__libc_init_array+0x3c>)
 8007518:	1b64      	subs	r4, r4, r5
 800751a:	10a4      	asrs	r4, r4, #2
 800751c:	42a6      	cmp	r6, r4
 800751e:	d109      	bne.n	8007534 <__libc_init_array+0x24>
 8007520:	f000 f864 	bl	80075ec <_init>
 8007524:	2600      	movs	r6, #0
 8007526:	4d0a      	ldr	r5, [pc, #40]	@ (8007550 <__libc_init_array+0x40>)
 8007528:	4c0a      	ldr	r4, [pc, #40]	@ (8007554 <__libc_init_array+0x44>)
 800752a:	1b64      	subs	r4, r4, r5
 800752c:	10a4      	asrs	r4, r4, #2
 800752e:	42a6      	cmp	r6, r4
 8007530:	d105      	bne.n	800753e <__libc_init_array+0x2e>
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	f855 3b04 	ldr.w	r3, [r5], #4
 8007538:	4798      	blx	r3
 800753a:	3601      	adds	r6, #1
 800753c:	e7ee      	b.n	800751c <__libc_init_array+0xc>
 800753e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007542:	4798      	blx	r3
 8007544:	3601      	adds	r6, #1
 8007546:	e7f2      	b.n	800752e <__libc_init_array+0x1e>
 8007548:	08007638 	.word	0x08007638
 800754c:	08007638 	.word	0x08007638
 8007550:	08007638 	.word	0x08007638
 8007554:	0800763c 	.word	0x0800763c

08007558 <__retarget_lock_acquire_recursive>:
 8007558:	4770      	bx	lr

0800755a <__retarget_lock_release_recursive>:
 800755a:	4770      	bx	lr

0800755c <_free_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4605      	mov	r5, r0
 8007560:	2900      	cmp	r1, #0
 8007562:	d040      	beq.n	80075e6 <_free_r+0x8a>
 8007564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007568:	1f0c      	subs	r4, r1, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	18e4      	addlt	r4, r4, r3
 8007570:	f7ff ffa4 	bl	80074bc <__malloc_lock>
 8007574:	4a1c      	ldr	r2, [pc, #112]	@ (80075e8 <_free_r+0x8c>)
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	b933      	cbnz	r3, 8007588 <_free_r+0x2c>
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	6014      	str	r4, [r2, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007584:	f7ff bfa0 	b.w	80074c8 <__malloc_unlock>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d908      	bls.n	800759e <_free_r+0x42>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	e7ed      	b.n	800757a <_free_r+0x1e>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x4c>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x42>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1850      	adds	r0, r2, r1
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x6c>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4401      	add	r1, r0
 80075b4:	1850      	adds	r0, r2, r1
 80075b6:	4283      	cmp	r3, r0
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1e0      	bne.n	800757e <_free_r+0x22>
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4408      	add	r0, r1
 80075c2:	6010      	str	r0, [r2, #0]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	e7da      	b.n	800757e <_free_r+0x22>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x74>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d6      	b.n	800757e <_free_r+0x22>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6054      	str	r4, [r2, #4]
 80075e4:	e7cb      	b.n	800757e <_free_r+0x22>
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	2000038c 	.word	0x2000038c

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
