
rdss_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a28  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c90  08005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c98  08005c98  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c98  08005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c9c  08005c9c  00006c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005ca0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08005cfc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005cfc  000072a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001053f  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcf  00000000  00000000  000175c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a76  00000000  00000000  0001b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176d9  00000000  00000000  0001bdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b42  00000000  00000000  000334a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008882c  00000000  00000000  00047fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a8  00000000  00000000  000d0858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d3c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005ac8 	.word	0x08005ac8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08005ac8 	.word	0x08005ac8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_uldivmod>:
 8000218:	2b00      	cmp	r3, #0
 800021a:	d111      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 800021c:	2a00      	cmp	r2, #0
 800021e:	d10f      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 8000220:	2900      	cmp	r1, #0
 8000222:	d100      	bne.n	8000226 <__aeabi_uldivmod+0xe>
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <__aeabi_uldivmod+0x16>
 8000228:	2100      	movs	r1, #0
 800022a:	43c9      	mvns	r1, r1
 800022c:	0008      	movs	r0, r1
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <__aeabi_uldivmod+0x24>)
 8000232:	a102      	add	r1, pc, #8	@ (adr r1, 800023c <__aeabi_uldivmod+0x24>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	ffffffd9 	.word	0xffffffd9
 8000240:	b403      	push	{r0, r1}
 8000242:	4668      	mov	r0, sp
 8000244:	b501      	push	{r0, lr}
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	469e      	mov	lr, r3
 8000250:	b002      	add	sp, #8
 8000252:	bc0c      	pop	{r2, r3}
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__udivmoddi4>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	0004      	movs	r4, r0
 8000266:	000d      	movs	r5, r1
 8000268:	4692      	mov	sl, r2
 800026a:	4699      	mov	r9, r3
 800026c:	b083      	sub	sp, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d830      	bhi.n	80002d4 <__udivmoddi4+0x7c>
 8000272:	d02d      	beq.n	80002d0 <__udivmoddi4+0x78>
 8000274:	4649      	mov	r1, r9
 8000276:	4650      	mov	r0, sl
 8000278:	f000 fb98 	bl	80009ac <__clzdi2>
 800027c:	0029      	movs	r1, r5
 800027e:	0006      	movs	r6, r0
 8000280:	0020      	movs	r0, r4
 8000282:	f000 fb93 	bl	80009ac <__clzdi2>
 8000286:	1a33      	subs	r3, r6, r0
 8000288:	4698      	mov	r8, r3
 800028a:	3b20      	subs	r3, #32
 800028c:	d434      	bmi.n	80002f8 <__udivmoddi4+0xa0>
 800028e:	469b      	mov	fp, r3
 8000290:	4653      	mov	r3, sl
 8000292:	465a      	mov	r2, fp
 8000294:	4093      	lsls	r3, r2
 8000296:	4642      	mov	r2, r8
 8000298:	001f      	movs	r7, r3
 800029a:	4653      	mov	r3, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001e      	movs	r6, r3
 80002a0:	42af      	cmp	r7, r5
 80002a2:	d83b      	bhi.n	800031c <__udivmoddi4+0xc4>
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d100      	bne.n	80002aa <__udivmoddi4+0x52>
 80002a8:	e079      	b.n	800039e <__udivmoddi4+0x146>
 80002aa:	465b      	mov	r3, fp
 80002ac:	1ba4      	subs	r4, r4, r6
 80002ae:	41bd      	sbcs	r5, r7
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da00      	bge.n	80002b6 <__udivmoddi4+0x5e>
 80002b4:	e076      	b.n	80003a4 <__udivmoddi4+0x14c>
 80002b6:	2200      	movs	r2, #0
 80002b8:	2300      	movs	r3, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2301      	movs	r3, #1
 80002c0:	465a      	mov	r2, fp
 80002c2:	4093      	lsls	r3, r2
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4642      	mov	r2, r8
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	e029      	b.n	8000324 <__udivmoddi4+0xcc>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	d9cf      	bls.n	8000274 <__udivmoddi4+0x1c>
 80002d4:	2200      	movs	r2, #0
 80002d6:	2300      	movs	r3, #0
 80002d8:	9200      	str	r2, [sp, #0]
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <__udivmoddi4+0x8e>
 80002e2:	601c      	str	r4, [r3, #0]
 80002e4:	605d      	str	r5, [r3, #4]
 80002e6:	9800      	ldr	r0, [sp, #0]
 80002e8:	9901      	ldr	r1, [sp, #4]
 80002ea:	b003      	add	sp, #12
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4642      	mov	r2, r8
 80002fa:	469b      	mov	fp, r3
 80002fc:	2320      	movs	r3, #32
 80002fe:	1a9b      	subs	r3, r3, r2
 8000300:	4652      	mov	r2, sl
 8000302:	40da      	lsrs	r2, r3
 8000304:	4641      	mov	r1, r8
 8000306:	0013      	movs	r3, r2
 8000308:	464a      	mov	r2, r9
 800030a:	408a      	lsls	r2, r1
 800030c:	0017      	movs	r7, r2
 800030e:	4642      	mov	r2, r8
 8000310:	431f      	orrs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d9c3      	bls.n	80002a4 <__udivmoddi4+0x4c>
 800031c:	2200      	movs	r2, #0
 800031e:	2300      	movs	r3, #0
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	4643      	mov	r3, r8
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0d8      	beq.n	80002dc <__udivmoddi4+0x84>
 800032a:	07fb      	lsls	r3, r7, #31
 800032c:	0872      	lsrs	r2, r6, #1
 800032e:	431a      	orrs	r2, r3
 8000330:	4646      	mov	r6, r8
 8000332:	087b      	lsrs	r3, r7, #1
 8000334:	e00e      	b.n	8000354 <__udivmoddi4+0xfc>
 8000336:	42ab      	cmp	r3, r5
 8000338:	d101      	bne.n	800033e <__udivmoddi4+0xe6>
 800033a:	42a2      	cmp	r2, r4
 800033c:	d80c      	bhi.n	8000358 <__udivmoddi4+0x100>
 800033e:	1aa4      	subs	r4, r4, r2
 8000340:	419d      	sbcs	r5, r3
 8000342:	2001      	movs	r0, #1
 8000344:	1924      	adds	r4, r4, r4
 8000346:	416d      	adcs	r5, r5
 8000348:	2100      	movs	r1, #0
 800034a:	3e01      	subs	r6, #1
 800034c:	1824      	adds	r4, r4, r0
 800034e:	414d      	adcs	r5, r1
 8000350:	2e00      	cmp	r6, #0
 8000352:	d006      	beq.n	8000362 <__udivmoddi4+0x10a>
 8000354:	42ab      	cmp	r3, r5
 8000356:	d9ee      	bls.n	8000336 <__udivmoddi4+0xde>
 8000358:	3e01      	subs	r6, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2e00      	cmp	r6, #0
 8000360:	d1f8      	bne.n	8000354 <__udivmoddi4+0xfc>
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	465b      	mov	r3, fp
 8000368:	1900      	adds	r0, r0, r4
 800036a:	4169      	adcs	r1, r5
 800036c:	2b00      	cmp	r3, #0
 800036e:	db24      	blt.n	80003ba <__udivmoddi4+0x162>
 8000370:	002b      	movs	r3, r5
 8000372:	465a      	mov	r2, fp
 8000374:	4644      	mov	r4, r8
 8000376:	40d3      	lsrs	r3, r2
 8000378:	002a      	movs	r2, r5
 800037a:	40e2      	lsrs	r2, r4
 800037c:	001c      	movs	r4, r3
 800037e:	465b      	mov	r3, fp
 8000380:	0015      	movs	r5, r2
 8000382:	2b00      	cmp	r3, #0
 8000384:	db2a      	blt.n	80003dc <__udivmoddi4+0x184>
 8000386:	0026      	movs	r6, r4
 8000388:	409e      	lsls	r6, r3
 800038a:	0033      	movs	r3, r6
 800038c:	0026      	movs	r6, r4
 800038e:	4647      	mov	r7, r8
 8000390:	40be      	lsls	r6, r7
 8000392:	0032      	movs	r2, r6
 8000394:	1a80      	subs	r0, r0, r2
 8000396:	4199      	sbcs	r1, r3
 8000398:	9000      	str	r0, [sp, #0]
 800039a:	9101      	str	r1, [sp, #4]
 800039c:	e79e      	b.n	80002dc <__udivmoddi4+0x84>
 800039e:	42a3      	cmp	r3, r4
 80003a0:	d8bc      	bhi.n	800031c <__udivmoddi4+0xc4>
 80003a2:	e782      	b.n	80002aa <__udivmoddi4+0x52>
 80003a4:	4642      	mov	r2, r8
 80003a6:	2320      	movs	r3, #32
 80003a8:	2100      	movs	r1, #0
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	2200      	movs	r2, #0
 80003ae:	9100      	str	r1, [sp, #0]
 80003b0:	9201      	str	r2, [sp, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	9201      	str	r2, [sp, #4]
 80003b8:	e785      	b.n	80002c6 <__udivmoddi4+0x6e>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	002a      	movs	r2, r5
 80003c2:	4646      	mov	r6, r8
 80003c4:	409a      	lsls	r2, r3
 80003c6:	0023      	movs	r3, r4
 80003c8:	40f3      	lsrs	r3, r6
 80003ca:	4644      	mov	r4, r8
 80003cc:	4313      	orrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dad4      	bge.n	8000386 <__udivmoddi4+0x12e>
 80003dc:	4642      	mov	r2, r8
 80003de:	002f      	movs	r7, r5
 80003e0:	2320      	movs	r3, #32
 80003e2:	0026      	movs	r6, r4
 80003e4:	4097      	lsls	r7, r2
 80003e6:	1a9b      	subs	r3, r3, r2
 80003e8:	40de      	lsrs	r6, r3
 80003ea:	003b      	movs	r3, r7
 80003ec:	4333      	orrs	r3, r6
 80003ee:	e7cd      	b.n	800038c <__udivmoddi4+0x134>

080003f0 <__aeabi_fdiv>:
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	464f      	mov	r7, r9
 80003f4:	4646      	mov	r6, r8
 80003f6:	46d6      	mov	lr, sl
 80003f8:	0244      	lsls	r4, r0, #9
 80003fa:	b5c0      	push	{r6, r7, lr}
 80003fc:	0047      	lsls	r7, r0, #1
 80003fe:	1c0e      	adds	r6, r1, #0
 8000400:	0a64      	lsrs	r4, r4, #9
 8000402:	0e3f      	lsrs	r7, r7, #24
 8000404:	0fc5      	lsrs	r5, r0, #31
 8000406:	2f00      	cmp	r7, #0
 8000408:	d03c      	beq.n	8000484 <__aeabi_fdiv+0x94>
 800040a:	2fff      	cmp	r7, #255	@ 0xff
 800040c:	d042      	beq.n	8000494 <__aeabi_fdiv+0xa4>
 800040e:	2300      	movs	r3, #0
 8000410:	2280      	movs	r2, #128	@ 0x80
 8000412:	4699      	mov	r9, r3
 8000414:	469a      	mov	sl, r3
 8000416:	00e4      	lsls	r4, r4, #3
 8000418:	04d2      	lsls	r2, r2, #19
 800041a:	4314      	orrs	r4, r2
 800041c:	3f7f      	subs	r7, #127	@ 0x7f
 800041e:	0273      	lsls	r3, r6, #9
 8000420:	0a5b      	lsrs	r3, r3, #9
 8000422:	4698      	mov	r8, r3
 8000424:	0073      	lsls	r3, r6, #1
 8000426:	0e1b      	lsrs	r3, r3, #24
 8000428:	0ff6      	lsrs	r6, r6, #31
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <__aeabi_fdiv+0x76>
 800042e:	2bff      	cmp	r3, #255	@ 0xff
 8000430:	d013      	beq.n	800045a <__aeabi_fdiv+0x6a>
 8000432:	4642      	mov	r2, r8
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	00d2      	lsls	r2, r2, #3
 8000438:	04c9      	lsls	r1, r1, #19
 800043a:	4311      	orrs	r1, r2
 800043c:	4688      	mov	r8, r1
 800043e:	2000      	movs	r0, #0
 8000440:	3b7f      	subs	r3, #127	@ 0x7f
 8000442:	0029      	movs	r1, r5
 8000444:	1aff      	subs	r7, r7, r3
 8000446:	464b      	mov	r3, r9
 8000448:	4071      	eors	r1, r6
 800044a:	b2c9      	uxtb	r1, r1
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d900      	bls.n	8000452 <__aeabi_fdiv+0x62>
 8000450:	e0b5      	b.n	80005be <__aeabi_fdiv+0x1ce>
 8000452:	4a74      	ldr	r2, [pc, #464]	@ (8000624 <__aeabi_fdiv+0x234>)
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	58d3      	ldr	r3, [r2, r3]
 8000458:	469f      	mov	pc, r3
 800045a:	4643      	mov	r3, r8
 800045c:	2b00      	cmp	r3, #0
 800045e:	d13f      	bne.n	80004e0 <__aeabi_fdiv+0xf0>
 8000460:	3fff      	subs	r7, #255	@ 0xff
 8000462:	3302      	adds	r3, #2
 8000464:	e003      	b.n	800046e <__aeabi_fdiv+0x7e>
 8000466:	4643      	mov	r3, r8
 8000468:	2b00      	cmp	r3, #0
 800046a:	d12d      	bne.n	80004c8 <__aeabi_fdiv+0xd8>
 800046c:	2301      	movs	r3, #1
 800046e:	0029      	movs	r1, r5
 8000470:	464a      	mov	r2, r9
 8000472:	4071      	eors	r1, r6
 8000474:	b2c9      	uxtb	r1, r1
 8000476:	431a      	orrs	r2, r3
 8000478:	2a0e      	cmp	r2, #14
 800047a:	d838      	bhi.n	80004ee <__aeabi_fdiv+0xfe>
 800047c:	486a      	ldr	r0, [pc, #424]	@ (8000628 <__aeabi_fdiv+0x238>)
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	5882      	ldr	r2, [r0, r2]
 8000482:	4697      	mov	pc, r2
 8000484:	2c00      	cmp	r4, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_fdiv+0xc0>
 8000488:	2304      	movs	r3, #4
 800048a:	4699      	mov	r9, r3
 800048c:	3b03      	subs	r3, #3
 800048e:	2700      	movs	r7, #0
 8000490:	469a      	mov	sl, r3
 8000492:	e7c4      	b.n	800041e <__aeabi_fdiv+0x2e>
 8000494:	2c00      	cmp	r4, #0
 8000496:	d105      	bne.n	80004a4 <__aeabi_fdiv+0xb4>
 8000498:	2308      	movs	r3, #8
 800049a:	4699      	mov	r9, r3
 800049c:	3b06      	subs	r3, #6
 800049e:	27ff      	movs	r7, #255	@ 0xff
 80004a0:	469a      	mov	sl, r3
 80004a2:	e7bc      	b.n	800041e <__aeabi_fdiv+0x2e>
 80004a4:	230c      	movs	r3, #12
 80004a6:	4699      	mov	r9, r3
 80004a8:	3b09      	subs	r3, #9
 80004aa:	27ff      	movs	r7, #255	@ 0xff
 80004ac:	469a      	mov	sl, r3
 80004ae:	e7b6      	b.n	800041e <__aeabi_fdiv+0x2e>
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 fa5d 	bl	8000970 <__clzsi2>
 80004b6:	2776      	movs	r7, #118	@ 0x76
 80004b8:	1f43      	subs	r3, r0, #5
 80004ba:	409c      	lsls	r4, r3
 80004bc:	2300      	movs	r3, #0
 80004be:	427f      	negs	r7, r7
 80004c0:	4699      	mov	r9, r3
 80004c2:	469a      	mov	sl, r3
 80004c4:	1a3f      	subs	r7, r7, r0
 80004c6:	e7aa      	b.n	800041e <__aeabi_fdiv+0x2e>
 80004c8:	4640      	mov	r0, r8
 80004ca:	f000 fa51 	bl	8000970 <__clzsi2>
 80004ce:	4642      	mov	r2, r8
 80004d0:	1f43      	subs	r3, r0, #5
 80004d2:	409a      	lsls	r2, r3
 80004d4:	2376      	movs	r3, #118	@ 0x76
 80004d6:	425b      	negs	r3, r3
 80004d8:	1a1b      	subs	r3, r3, r0
 80004da:	4690      	mov	r8, r2
 80004dc:	2000      	movs	r0, #0
 80004de:	e7b0      	b.n	8000442 <__aeabi_fdiv+0x52>
 80004e0:	2303      	movs	r3, #3
 80004e2:	464a      	mov	r2, r9
 80004e4:	431a      	orrs	r2, r3
 80004e6:	4691      	mov	r9, r2
 80004e8:	2003      	movs	r0, #3
 80004ea:	33fc      	adds	r3, #252	@ 0xfc
 80004ec:	e7a9      	b.n	8000442 <__aeabi_fdiv+0x52>
 80004ee:	000d      	movs	r5, r1
 80004f0:	20ff      	movs	r0, #255	@ 0xff
 80004f2:	2200      	movs	r2, #0
 80004f4:	05c0      	lsls	r0, r0, #23
 80004f6:	07ed      	lsls	r5, r5, #31
 80004f8:	4310      	orrs	r0, r2
 80004fa:	4328      	orrs	r0, r5
 80004fc:	bce0      	pop	{r5, r6, r7}
 80004fe:	46ba      	mov	sl, r7
 8000500:	46b1      	mov	r9, r6
 8000502:	46a8      	mov	r8, r5
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000506:	000d      	movs	r5, r1
 8000508:	2000      	movs	r0, #0
 800050a:	2200      	movs	r2, #0
 800050c:	e7f2      	b.n	80004f4 <__aeabi_fdiv+0x104>
 800050e:	4653      	mov	r3, sl
 8000510:	2b02      	cmp	r3, #2
 8000512:	d0ed      	beq.n	80004f0 <__aeabi_fdiv+0x100>
 8000514:	2b03      	cmp	r3, #3
 8000516:	d033      	beq.n	8000580 <__aeabi_fdiv+0x190>
 8000518:	46a0      	mov	r8, r4
 800051a:	2b01      	cmp	r3, #1
 800051c:	d105      	bne.n	800052a <__aeabi_fdiv+0x13a>
 800051e:	2000      	movs	r0, #0
 8000520:	2200      	movs	r2, #0
 8000522:	e7e7      	b.n	80004f4 <__aeabi_fdiv+0x104>
 8000524:	0035      	movs	r5, r6
 8000526:	2803      	cmp	r0, #3
 8000528:	d07a      	beq.n	8000620 <__aeabi_fdiv+0x230>
 800052a:	003b      	movs	r3, r7
 800052c:	337f      	adds	r3, #127	@ 0x7f
 800052e:	2b00      	cmp	r3, #0
 8000530:	dd2d      	ble.n	800058e <__aeabi_fdiv+0x19e>
 8000532:	4642      	mov	r2, r8
 8000534:	0752      	lsls	r2, r2, #29
 8000536:	d007      	beq.n	8000548 <__aeabi_fdiv+0x158>
 8000538:	220f      	movs	r2, #15
 800053a:	4641      	mov	r1, r8
 800053c:	400a      	ands	r2, r1
 800053e:	2a04      	cmp	r2, #4
 8000540:	d002      	beq.n	8000548 <__aeabi_fdiv+0x158>
 8000542:	2204      	movs	r2, #4
 8000544:	4694      	mov	ip, r2
 8000546:	44e0      	add	r8, ip
 8000548:	4642      	mov	r2, r8
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	d505      	bpl.n	800055a <__aeabi_fdiv+0x16a>
 800054e:	4642      	mov	r2, r8
 8000550:	4b36      	ldr	r3, [pc, #216]	@ (800062c <__aeabi_fdiv+0x23c>)
 8000552:	401a      	ands	r2, r3
 8000554:	003b      	movs	r3, r7
 8000556:	4690      	mov	r8, r2
 8000558:	3380      	adds	r3, #128	@ 0x80
 800055a:	2bfe      	cmp	r3, #254	@ 0xfe
 800055c:	dcc8      	bgt.n	80004f0 <__aeabi_fdiv+0x100>
 800055e:	4642      	mov	r2, r8
 8000560:	0192      	lsls	r2, r2, #6
 8000562:	0a52      	lsrs	r2, r2, #9
 8000564:	b2d8      	uxtb	r0, r3
 8000566:	e7c5      	b.n	80004f4 <__aeabi_fdiv+0x104>
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	2500      	movs	r5, #0
 800056c:	20ff      	movs	r0, #255	@ 0xff
 800056e:	03d2      	lsls	r2, r2, #15
 8000570:	e7c0      	b.n	80004f4 <__aeabi_fdiv+0x104>
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	03d2      	lsls	r2, r2, #15
 8000576:	4214      	tst	r4, r2
 8000578:	d002      	beq.n	8000580 <__aeabi_fdiv+0x190>
 800057a:	4643      	mov	r3, r8
 800057c:	4213      	tst	r3, r2
 800057e:	d049      	beq.n	8000614 <__aeabi_fdiv+0x224>
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	03d2      	lsls	r2, r2, #15
 8000584:	4322      	orrs	r2, r4
 8000586:	0252      	lsls	r2, r2, #9
 8000588:	20ff      	movs	r0, #255	@ 0xff
 800058a:	0a52      	lsrs	r2, r2, #9
 800058c:	e7b2      	b.n	80004f4 <__aeabi_fdiv+0x104>
 800058e:	2201      	movs	r2, #1
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	2b1b      	cmp	r3, #27
 8000594:	dcc3      	bgt.n	800051e <__aeabi_fdiv+0x12e>
 8000596:	4642      	mov	r2, r8
 8000598:	40da      	lsrs	r2, r3
 800059a:	4643      	mov	r3, r8
 800059c:	379e      	adds	r7, #158	@ 0x9e
 800059e:	40bb      	lsls	r3, r7
 80005a0:	1e59      	subs	r1, r3, #1
 80005a2:	418b      	sbcs	r3, r1
 80005a4:	431a      	orrs	r2, r3
 80005a6:	0753      	lsls	r3, r2, #29
 80005a8:	d004      	beq.n	80005b4 <__aeabi_fdiv+0x1c4>
 80005aa:	230f      	movs	r3, #15
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fdiv+0x1c4>
 80005b2:	3204      	adds	r2, #4
 80005b4:	0153      	lsls	r3, r2, #5
 80005b6:	d529      	bpl.n	800060c <__aeabi_fdiv+0x21c>
 80005b8:	2001      	movs	r0, #1
 80005ba:	2200      	movs	r2, #0
 80005bc:	e79a      	b.n	80004f4 <__aeabi_fdiv+0x104>
 80005be:	4642      	mov	r2, r8
 80005c0:	0163      	lsls	r3, r4, #5
 80005c2:	0155      	lsls	r5, r2, #5
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d215      	bcs.n	80005f4 <__aeabi_fdiv+0x204>
 80005c8:	201b      	movs	r0, #27
 80005ca:	2200      	movs	r2, #0
 80005cc:	3f01      	subs	r7, #1
 80005ce:	2601      	movs	r6, #1
 80005d0:	001c      	movs	r4, r3
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2c00      	cmp	r4, #0
 80005d8:	db01      	blt.n	80005de <__aeabi_fdiv+0x1ee>
 80005da:	429d      	cmp	r5, r3
 80005dc:	d801      	bhi.n	80005e2 <__aeabi_fdiv+0x1f2>
 80005de:	1b5b      	subs	r3, r3, r5
 80005e0:	4332      	orrs	r2, r6
 80005e2:	3801      	subs	r0, #1
 80005e4:	2800      	cmp	r0, #0
 80005e6:	d1f3      	bne.n	80005d0 <__aeabi_fdiv+0x1e0>
 80005e8:	1e58      	subs	r0, r3, #1
 80005ea:	4183      	sbcs	r3, r0
 80005ec:	4313      	orrs	r3, r2
 80005ee:	4698      	mov	r8, r3
 80005f0:	000d      	movs	r5, r1
 80005f2:	e79a      	b.n	800052a <__aeabi_fdiv+0x13a>
 80005f4:	201a      	movs	r0, #26
 80005f6:	2201      	movs	r2, #1
 80005f8:	1b5b      	subs	r3, r3, r5
 80005fa:	e7e8      	b.n	80005ce <__aeabi_fdiv+0x1de>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	425a      	negs	r2, r3
 8000600:	4153      	adcs	r3, r2
 8000602:	425b      	negs	r3, r3
 8000604:	0035      	movs	r5, r6
 8000606:	2200      	movs	r2, #0
 8000608:	b2d8      	uxtb	r0, r3
 800060a:	e773      	b.n	80004f4 <__aeabi_fdiv+0x104>
 800060c:	0192      	lsls	r2, r2, #6
 800060e:	2000      	movs	r0, #0
 8000610:	0a52      	lsrs	r2, r2, #9
 8000612:	e76f      	b.n	80004f4 <__aeabi_fdiv+0x104>
 8000614:	431a      	orrs	r2, r3
 8000616:	0252      	lsls	r2, r2, #9
 8000618:	0035      	movs	r5, r6
 800061a:	20ff      	movs	r0, #255	@ 0xff
 800061c:	0a52      	lsrs	r2, r2, #9
 800061e:	e769      	b.n	80004f4 <__aeabi_fdiv+0x104>
 8000620:	4644      	mov	r4, r8
 8000622:	e7ad      	b.n	8000580 <__aeabi_fdiv+0x190>
 8000624:	08005ae4 	.word	0x08005ae4
 8000628:	08005b24 	.word	0x08005b24
 800062c:	f7ffffff 	.word	0xf7ffffff

08000630 <__aeabi_fmul>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	464f      	mov	r7, r9
 8000634:	4646      	mov	r6, r8
 8000636:	46d6      	mov	lr, sl
 8000638:	0243      	lsls	r3, r0, #9
 800063a:	0a5b      	lsrs	r3, r3, #9
 800063c:	0045      	lsls	r5, r0, #1
 800063e:	b5c0      	push	{r6, r7, lr}
 8000640:	4699      	mov	r9, r3
 8000642:	1c0f      	adds	r7, r1, #0
 8000644:	0e2d      	lsrs	r5, r5, #24
 8000646:	0fc6      	lsrs	r6, r0, #31
 8000648:	2d00      	cmp	r5, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fmul+0x1e>
 800064c:	e088      	b.n	8000760 <__aeabi_fmul+0x130>
 800064e:	2dff      	cmp	r5, #255	@ 0xff
 8000650:	d100      	bne.n	8000654 <__aeabi_fmul+0x24>
 8000652:	e08d      	b.n	8000770 <__aeabi_fmul+0x140>
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	04d2      	lsls	r2, r2, #19
 800065a:	431a      	orrs	r2, r3
 800065c:	2300      	movs	r3, #0
 800065e:	4691      	mov	r9, r2
 8000660:	4698      	mov	r8, r3
 8000662:	469a      	mov	sl, r3
 8000664:	3d7f      	subs	r5, #127	@ 0x7f
 8000666:	027c      	lsls	r4, r7, #9
 8000668:	007b      	lsls	r3, r7, #1
 800066a:	0a64      	lsrs	r4, r4, #9
 800066c:	0e1b      	lsrs	r3, r3, #24
 800066e:	0fff      	lsrs	r7, r7, #31
 8000670:	2b00      	cmp	r3, #0
 8000672:	d068      	beq.n	8000746 <__aeabi_fmul+0x116>
 8000674:	2bff      	cmp	r3, #255	@ 0xff
 8000676:	d021      	beq.n	80006bc <__aeabi_fmul+0x8c>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	00e4      	lsls	r4, r4, #3
 800067c:	04d2      	lsls	r2, r2, #19
 800067e:	4314      	orrs	r4, r2
 8000680:	4642      	mov	r2, r8
 8000682:	3b7f      	subs	r3, #127	@ 0x7f
 8000684:	195b      	adds	r3, r3, r5
 8000686:	2100      	movs	r1, #0
 8000688:	1c5d      	adds	r5, r3, #1
 800068a:	2a0a      	cmp	r2, #10
 800068c:	dc2e      	bgt.n	80006ec <__aeabi_fmul+0xbc>
 800068e:	407e      	eors	r6, r7
 8000690:	4642      	mov	r2, r8
 8000692:	2a02      	cmp	r2, #2
 8000694:	dc23      	bgt.n	80006de <__aeabi_fmul+0xae>
 8000696:	3a01      	subs	r2, #1
 8000698:	2a01      	cmp	r2, #1
 800069a:	d900      	bls.n	800069e <__aeabi_fmul+0x6e>
 800069c:	e0bd      	b.n	800081a <__aeabi_fmul+0x1ea>
 800069e:	2902      	cmp	r1, #2
 80006a0:	d06e      	beq.n	8000780 <__aeabi_fmul+0x150>
 80006a2:	2901      	cmp	r1, #1
 80006a4:	d12c      	bne.n	8000700 <__aeabi_fmul+0xd0>
 80006a6:	2000      	movs	r0, #0
 80006a8:	2200      	movs	r2, #0
 80006aa:	05c0      	lsls	r0, r0, #23
 80006ac:	07f6      	lsls	r6, r6, #31
 80006ae:	4310      	orrs	r0, r2
 80006b0:	4330      	orrs	r0, r6
 80006b2:	bce0      	pop	{r5, r6, r7}
 80006b4:	46ba      	mov	sl, r7
 80006b6:	46b1      	mov	r9, r6
 80006b8:	46a8      	mov	r8, r5
 80006ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006bc:	002b      	movs	r3, r5
 80006be:	33ff      	adds	r3, #255	@ 0xff
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d065      	beq.n	8000790 <__aeabi_fmul+0x160>
 80006c4:	2203      	movs	r2, #3
 80006c6:	4641      	mov	r1, r8
 80006c8:	4311      	orrs	r1, r2
 80006ca:	0032      	movs	r2, r6
 80006cc:	3501      	adds	r5, #1
 80006ce:	4688      	mov	r8, r1
 80006d0:	407a      	eors	r2, r7
 80006d2:	35ff      	adds	r5, #255	@ 0xff
 80006d4:	290a      	cmp	r1, #10
 80006d6:	dd00      	ble.n	80006da <__aeabi_fmul+0xaa>
 80006d8:	e0d8      	b.n	800088c <__aeabi_fmul+0x25c>
 80006da:	0016      	movs	r6, r2
 80006dc:	2103      	movs	r1, #3
 80006de:	4640      	mov	r0, r8
 80006e0:	2201      	movs	r2, #1
 80006e2:	4082      	lsls	r2, r0
 80006e4:	20a6      	movs	r0, #166	@ 0xa6
 80006e6:	00c0      	lsls	r0, r0, #3
 80006e8:	4202      	tst	r2, r0
 80006ea:	d020      	beq.n	800072e <__aeabi_fmul+0xfe>
 80006ec:	4653      	mov	r3, sl
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d046      	beq.n	8000780 <__aeabi_fmul+0x150>
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0xc8>
 80006f6:	e0bb      	b.n	8000870 <__aeabi_fmul+0x240>
 80006f8:	4651      	mov	r1, sl
 80006fa:	464c      	mov	r4, r9
 80006fc:	2901      	cmp	r1, #1
 80006fe:	d0d2      	beq.n	80006a6 <__aeabi_fmul+0x76>
 8000700:	002b      	movs	r3, r5
 8000702:	337f      	adds	r3, #127	@ 0x7f
 8000704:	2b00      	cmp	r3, #0
 8000706:	dd70      	ble.n	80007ea <__aeabi_fmul+0x1ba>
 8000708:	0762      	lsls	r2, r4, #29
 800070a:	d004      	beq.n	8000716 <__aeabi_fmul+0xe6>
 800070c:	220f      	movs	r2, #15
 800070e:	4022      	ands	r2, r4
 8000710:	2a04      	cmp	r2, #4
 8000712:	d000      	beq.n	8000716 <__aeabi_fmul+0xe6>
 8000714:	3404      	adds	r4, #4
 8000716:	0122      	lsls	r2, r4, #4
 8000718:	d503      	bpl.n	8000722 <__aeabi_fmul+0xf2>
 800071a:	4b63      	ldr	r3, [pc, #396]	@ (80008a8 <__aeabi_fmul+0x278>)
 800071c:	401c      	ands	r4, r3
 800071e:	002b      	movs	r3, r5
 8000720:	3380      	adds	r3, #128	@ 0x80
 8000722:	2bfe      	cmp	r3, #254	@ 0xfe
 8000724:	dc2c      	bgt.n	8000780 <__aeabi_fmul+0x150>
 8000726:	01a2      	lsls	r2, r4, #6
 8000728:	0a52      	lsrs	r2, r2, #9
 800072a:	b2d8      	uxtb	r0, r3
 800072c:	e7bd      	b.n	80006aa <__aeabi_fmul+0x7a>
 800072e:	2090      	movs	r0, #144	@ 0x90
 8000730:	0080      	lsls	r0, r0, #2
 8000732:	4202      	tst	r2, r0
 8000734:	d127      	bne.n	8000786 <__aeabi_fmul+0x156>
 8000736:	38b9      	subs	r0, #185	@ 0xb9
 8000738:	38ff      	subs	r0, #255	@ 0xff
 800073a:	4210      	tst	r0, r2
 800073c:	d06d      	beq.n	800081a <__aeabi_fmul+0x1ea>
 800073e:	003e      	movs	r6, r7
 8000740:	46a1      	mov	r9, r4
 8000742:	468a      	mov	sl, r1
 8000744:	e7d2      	b.n	80006ec <__aeabi_fmul+0xbc>
 8000746:	2c00      	cmp	r4, #0
 8000748:	d141      	bne.n	80007ce <__aeabi_fmul+0x19e>
 800074a:	2301      	movs	r3, #1
 800074c:	4642      	mov	r2, r8
 800074e:	431a      	orrs	r2, r3
 8000750:	4690      	mov	r8, r2
 8000752:	002b      	movs	r3, r5
 8000754:	4642      	mov	r2, r8
 8000756:	2101      	movs	r1, #1
 8000758:	1c5d      	adds	r5, r3, #1
 800075a:	2a0a      	cmp	r2, #10
 800075c:	dd97      	ble.n	800068e <__aeabi_fmul+0x5e>
 800075e:	e7c5      	b.n	80006ec <__aeabi_fmul+0xbc>
 8000760:	2b00      	cmp	r3, #0
 8000762:	d126      	bne.n	80007b2 <__aeabi_fmul+0x182>
 8000764:	2304      	movs	r3, #4
 8000766:	4698      	mov	r8, r3
 8000768:	3b03      	subs	r3, #3
 800076a:	2500      	movs	r5, #0
 800076c:	469a      	mov	sl, r3
 800076e:	e77a      	b.n	8000666 <__aeabi_fmul+0x36>
 8000770:	2b00      	cmp	r3, #0
 8000772:	d118      	bne.n	80007a6 <__aeabi_fmul+0x176>
 8000774:	2308      	movs	r3, #8
 8000776:	4698      	mov	r8, r3
 8000778:	3b06      	subs	r3, #6
 800077a:	25ff      	movs	r5, #255	@ 0xff
 800077c:	469a      	mov	sl, r3
 800077e:	e772      	b.n	8000666 <__aeabi_fmul+0x36>
 8000780:	20ff      	movs	r0, #255	@ 0xff
 8000782:	2200      	movs	r2, #0
 8000784:	e791      	b.n	80006aa <__aeabi_fmul+0x7a>
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	2600      	movs	r6, #0
 800078a:	20ff      	movs	r0, #255	@ 0xff
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	e78c      	b.n	80006aa <__aeabi_fmul+0x7a>
 8000790:	4641      	mov	r1, r8
 8000792:	2202      	movs	r2, #2
 8000794:	3501      	adds	r5, #1
 8000796:	4311      	orrs	r1, r2
 8000798:	4688      	mov	r8, r1
 800079a:	35ff      	adds	r5, #255	@ 0xff
 800079c:	290a      	cmp	r1, #10
 800079e:	dca5      	bgt.n	80006ec <__aeabi_fmul+0xbc>
 80007a0:	2102      	movs	r1, #2
 80007a2:	407e      	eors	r6, r7
 80007a4:	e774      	b.n	8000690 <__aeabi_fmul+0x60>
 80007a6:	230c      	movs	r3, #12
 80007a8:	4698      	mov	r8, r3
 80007aa:	3b09      	subs	r3, #9
 80007ac:	25ff      	movs	r5, #255	@ 0xff
 80007ae:	469a      	mov	sl, r3
 80007b0:	e759      	b.n	8000666 <__aeabi_fmul+0x36>
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 f8dc 	bl	8000970 <__clzsi2>
 80007b8:	464a      	mov	r2, r9
 80007ba:	1f43      	subs	r3, r0, #5
 80007bc:	2576      	movs	r5, #118	@ 0x76
 80007be:	409a      	lsls	r2, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	426d      	negs	r5, r5
 80007c4:	4691      	mov	r9, r2
 80007c6:	4698      	mov	r8, r3
 80007c8:	469a      	mov	sl, r3
 80007ca:	1a2d      	subs	r5, r5, r0
 80007cc:	e74b      	b.n	8000666 <__aeabi_fmul+0x36>
 80007ce:	0020      	movs	r0, r4
 80007d0:	f000 f8ce 	bl	8000970 <__clzsi2>
 80007d4:	4642      	mov	r2, r8
 80007d6:	1f43      	subs	r3, r0, #5
 80007d8:	409c      	lsls	r4, r3
 80007da:	1a2b      	subs	r3, r5, r0
 80007dc:	3b76      	subs	r3, #118	@ 0x76
 80007de:	2100      	movs	r1, #0
 80007e0:	1c5d      	adds	r5, r3, #1
 80007e2:	2a0a      	cmp	r2, #10
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_fmul+0x1b8>
 80007e6:	e752      	b.n	800068e <__aeabi_fmul+0x5e>
 80007e8:	e780      	b.n	80006ec <__aeabi_fmul+0xbc>
 80007ea:	2201      	movs	r2, #1
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2b1b      	cmp	r3, #27
 80007f0:	dd00      	ble.n	80007f4 <__aeabi_fmul+0x1c4>
 80007f2:	e758      	b.n	80006a6 <__aeabi_fmul+0x76>
 80007f4:	359e      	adds	r5, #158	@ 0x9e
 80007f6:	0022      	movs	r2, r4
 80007f8:	40ac      	lsls	r4, r5
 80007fa:	40da      	lsrs	r2, r3
 80007fc:	1e63      	subs	r3, r4, #1
 80007fe:	419c      	sbcs	r4, r3
 8000800:	4322      	orrs	r2, r4
 8000802:	0753      	lsls	r3, r2, #29
 8000804:	d004      	beq.n	8000810 <__aeabi_fmul+0x1e0>
 8000806:	230f      	movs	r3, #15
 8000808:	4013      	ands	r3, r2
 800080a:	2b04      	cmp	r3, #4
 800080c:	d000      	beq.n	8000810 <__aeabi_fmul+0x1e0>
 800080e:	3204      	adds	r2, #4
 8000810:	0153      	lsls	r3, r2, #5
 8000812:	d537      	bpl.n	8000884 <__aeabi_fmul+0x254>
 8000814:	2001      	movs	r0, #1
 8000816:	2200      	movs	r2, #0
 8000818:	e747      	b.n	80006aa <__aeabi_fmul+0x7a>
 800081a:	0c21      	lsrs	r1, r4, #16
 800081c:	464a      	mov	r2, r9
 800081e:	0424      	lsls	r4, r4, #16
 8000820:	0c24      	lsrs	r4, r4, #16
 8000822:	0027      	movs	r7, r4
 8000824:	0c10      	lsrs	r0, r2, #16
 8000826:	0412      	lsls	r2, r2, #16
 8000828:	0c12      	lsrs	r2, r2, #16
 800082a:	4344      	muls	r4, r0
 800082c:	4357      	muls	r7, r2
 800082e:	4348      	muls	r0, r1
 8000830:	4351      	muls	r1, r2
 8000832:	0c3a      	lsrs	r2, r7, #16
 8000834:	1909      	adds	r1, r1, r4
 8000836:	1852      	adds	r2, r2, r1
 8000838:	4294      	cmp	r4, r2
 800083a:	d903      	bls.n	8000844 <__aeabi_fmul+0x214>
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	0249      	lsls	r1, r1, #9
 8000840:	468c      	mov	ip, r1
 8000842:	4460      	add	r0, ip
 8000844:	043f      	lsls	r7, r7, #16
 8000846:	0411      	lsls	r1, r2, #16
 8000848:	0c3f      	lsrs	r7, r7, #16
 800084a:	19c9      	adds	r1, r1, r7
 800084c:	018c      	lsls	r4, r1, #6
 800084e:	1e67      	subs	r7, r4, #1
 8000850:	41bc      	sbcs	r4, r7
 8000852:	0c12      	lsrs	r2, r2, #16
 8000854:	0e89      	lsrs	r1, r1, #26
 8000856:	1812      	adds	r2, r2, r0
 8000858:	430c      	orrs	r4, r1
 800085a:	0192      	lsls	r2, r2, #6
 800085c:	4314      	orrs	r4, r2
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	d50e      	bpl.n	8000880 <__aeabi_fmul+0x250>
 8000862:	2301      	movs	r3, #1
 8000864:	0862      	lsrs	r2, r4, #1
 8000866:	401c      	ands	r4, r3
 8000868:	4314      	orrs	r4, r2
 800086a:	e749      	b.n	8000700 <__aeabi_fmul+0xd0>
 800086c:	003e      	movs	r6, r7
 800086e:	46a1      	mov	r9, r4
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	464b      	mov	r3, r9
 8000874:	03d2      	lsls	r2, r2, #15
 8000876:	431a      	orrs	r2, r3
 8000878:	0252      	lsls	r2, r2, #9
 800087a:	20ff      	movs	r0, #255	@ 0xff
 800087c:	0a52      	lsrs	r2, r2, #9
 800087e:	e714      	b.n	80006aa <__aeabi_fmul+0x7a>
 8000880:	001d      	movs	r5, r3
 8000882:	e73d      	b.n	8000700 <__aeabi_fmul+0xd0>
 8000884:	0192      	lsls	r2, r2, #6
 8000886:	2000      	movs	r0, #0
 8000888:	0a52      	lsrs	r2, r2, #9
 800088a:	e70e      	b.n	80006aa <__aeabi_fmul+0x7a>
 800088c:	290f      	cmp	r1, #15
 800088e:	d1ed      	bne.n	800086c <__aeabi_fmul+0x23c>
 8000890:	2280      	movs	r2, #128	@ 0x80
 8000892:	464b      	mov	r3, r9
 8000894:	03d2      	lsls	r2, r2, #15
 8000896:	4213      	tst	r3, r2
 8000898:	d0ea      	beq.n	8000870 <__aeabi_fmul+0x240>
 800089a:	4214      	tst	r4, r2
 800089c:	d1e8      	bne.n	8000870 <__aeabi_fmul+0x240>
 800089e:	003e      	movs	r6, r7
 80008a0:	20ff      	movs	r0, #255	@ 0xff
 80008a2:	4322      	orrs	r2, r4
 80008a4:	e701      	b.n	80006aa <__aeabi_fmul+0x7a>
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	f7ffffff 	.word	0xf7ffffff

080008ac <__aeabi_f2iz>:
 80008ac:	0241      	lsls	r1, r0, #9
 80008ae:	0042      	lsls	r2, r0, #1
 80008b0:	0fc3      	lsrs	r3, r0, #31
 80008b2:	0a49      	lsrs	r1, r1, #9
 80008b4:	2000      	movs	r0, #0
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	2a7e      	cmp	r2, #126	@ 0x7e
 80008ba:	dd03      	ble.n	80008c4 <__aeabi_f2iz+0x18>
 80008bc:	2a9d      	cmp	r2, #157	@ 0x9d
 80008be:	dd02      	ble.n	80008c6 <__aeabi_f2iz+0x1a>
 80008c0:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <__aeabi_f2iz+0x3c>)
 80008c2:	1898      	adds	r0, r3, r2
 80008c4:	4770      	bx	lr
 80008c6:	2080      	movs	r0, #128	@ 0x80
 80008c8:	0400      	lsls	r0, r0, #16
 80008ca:	4301      	orrs	r1, r0
 80008cc:	2a95      	cmp	r2, #149	@ 0x95
 80008ce:	dc07      	bgt.n	80008e0 <__aeabi_f2iz+0x34>
 80008d0:	2096      	movs	r0, #150	@ 0x96
 80008d2:	1a82      	subs	r2, r0, r2
 80008d4:	40d1      	lsrs	r1, r2
 80008d6:	4248      	negs	r0, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f3      	bne.n	80008c4 <__aeabi_f2iz+0x18>
 80008dc:	0008      	movs	r0, r1
 80008de:	e7f1      	b.n	80008c4 <__aeabi_f2iz+0x18>
 80008e0:	3a96      	subs	r2, #150	@ 0x96
 80008e2:	4091      	lsls	r1, r2
 80008e4:	e7f7      	b.n	80008d6 <__aeabi_f2iz+0x2a>
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	7fffffff 	.word	0x7fffffff

080008ec <__aeabi_ui2f>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	1e04      	subs	r4, r0, #0
 80008f0:	d00e      	beq.n	8000910 <__aeabi_ui2f+0x24>
 80008f2:	f000 f83d 	bl	8000970 <__clzsi2>
 80008f6:	239e      	movs	r3, #158	@ 0x9e
 80008f8:	0001      	movs	r1, r0
 80008fa:	1a1b      	subs	r3, r3, r0
 80008fc:	2b96      	cmp	r3, #150	@ 0x96
 80008fe:	dc0c      	bgt.n	800091a <__aeabi_ui2f+0x2e>
 8000900:	2808      	cmp	r0, #8
 8000902:	d02f      	beq.n	8000964 <__aeabi_ui2f+0x78>
 8000904:	3908      	subs	r1, #8
 8000906:	408c      	lsls	r4, r1
 8000908:	0264      	lsls	r4, r4, #9
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	e001      	b.n	8000914 <__aeabi_ui2f+0x28>
 8000910:	2000      	movs	r0, #0
 8000912:	2400      	movs	r4, #0
 8000914:	05c0      	lsls	r0, r0, #23
 8000916:	4320      	orrs	r0, r4
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	2b99      	cmp	r3, #153	@ 0x99
 800091c:	dc16      	bgt.n	800094c <__aeabi_ui2f+0x60>
 800091e:	1f42      	subs	r2, r0, #5
 8000920:	2805      	cmp	r0, #5
 8000922:	d000      	beq.n	8000926 <__aeabi_ui2f+0x3a>
 8000924:	4094      	lsls	r4, r2
 8000926:	0022      	movs	r2, r4
 8000928:	4810      	ldr	r0, [pc, #64]	@ (800096c <__aeabi_ui2f+0x80>)
 800092a:	4002      	ands	r2, r0
 800092c:	0765      	lsls	r5, r4, #29
 800092e:	d009      	beq.n	8000944 <__aeabi_ui2f+0x58>
 8000930:	250f      	movs	r5, #15
 8000932:	402c      	ands	r4, r5
 8000934:	2c04      	cmp	r4, #4
 8000936:	d005      	beq.n	8000944 <__aeabi_ui2f+0x58>
 8000938:	3204      	adds	r2, #4
 800093a:	0154      	lsls	r4, r2, #5
 800093c:	d502      	bpl.n	8000944 <__aeabi_ui2f+0x58>
 800093e:	239f      	movs	r3, #159	@ 0x9f
 8000940:	4002      	ands	r2, r0
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	0192      	lsls	r2, r2, #6
 8000946:	0a54      	lsrs	r4, r2, #9
 8000948:	b2d8      	uxtb	r0, r3
 800094a:	e7e3      	b.n	8000914 <__aeabi_ui2f+0x28>
 800094c:	0002      	movs	r2, r0
 800094e:	0020      	movs	r0, r4
 8000950:	321b      	adds	r2, #27
 8000952:	4090      	lsls	r0, r2
 8000954:	0002      	movs	r2, r0
 8000956:	1e50      	subs	r0, r2, #1
 8000958:	4182      	sbcs	r2, r0
 800095a:	2005      	movs	r0, #5
 800095c:	1a40      	subs	r0, r0, r1
 800095e:	40c4      	lsrs	r4, r0
 8000960:	4314      	orrs	r4, r2
 8000962:	e7e0      	b.n	8000926 <__aeabi_ui2f+0x3a>
 8000964:	0264      	lsls	r4, r4, #9
 8000966:	2096      	movs	r0, #150	@ 0x96
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	e7d3      	b.n	8000914 <__aeabi_ui2f+0x28>
 800096c:	fbffffff 	.word	0xfbffffff

08000970 <__clzsi2>:
 8000970:	211c      	movs	r1, #28
 8000972:	2301      	movs	r3, #1
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	4298      	cmp	r0, r3
 8000978:	d301      	bcc.n	800097e <__clzsi2+0xe>
 800097a:	0c00      	lsrs	r0, r0, #16
 800097c:	3910      	subs	r1, #16
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	4298      	cmp	r0, r3
 8000982:	d301      	bcc.n	8000988 <__clzsi2+0x18>
 8000984:	0a00      	lsrs	r0, r0, #8
 8000986:	3908      	subs	r1, #8
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	4298      	cmp	r0, r3
 800098c:	d301      	bcc.n	8000992 <__clzsi2+0x22>
 800098e:	0900      	lsrs	r0, r0, #4
 8000990:	3904      	subs	r1, #4
 8000992:	a202      	add	r2, pc, #8	@ (adr r2, 800099c <__clzsi2+0x2c>)
 8000994:	5c10      	ldrb	r0, [r2, r0]
 8000996:	1840      	adds	r0, r0, r1
 8000998:	4770      	bx	lr
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	02020304 	.word	0x02020304
 80009a0:	01010101 	.word	0x01010101
	...

080009ac <__clzdi2>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d103      	bne.n	80009ba <__clzdi2+0xe>
 80009b2:	f7ff ffdd 	bl	8000970 <__clzsi2>
 80009b6:	3020      	adds	r0, #32
 80009b8:	e002      	b.n	80009c0 <__clzdi2+0x14>
 80009ba:	0008      	movs	r0, r1
 80009bc:	f7ff ffd8 	bl	8000970 <__clzsi2>
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)

080009c4 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include "SX1278.h"

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	000a      	movs	r2, r1
 80009ce:	1cfb      	adds	r3, r7, #3
 80009d0:	701a      	strb	r2, [r3, #0]
	uint8_t rec = 0;
 80009d2:	240f      	movs	r4, #15
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <readRegister+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 f834 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f002 fdd8 	bl	800359c <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 80009ec:	1cf9      	adds	r1, r7, #3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	2364      	movs	r3, #100	@ 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	f004 f8a0 	bl	8004b38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 80009f8:	1939      	adds	r1, r7, r4
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	2364      	movs	r3, #100	@ 0x64
 80009fe:	2201      	movs	r2, #1
 8000a00:	f004 f9fa 	bl	8004df8 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f002 fdc9 	bl	800359c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <readRegister+0x60>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 f81c 	bl	8003a4e <HAL_GPIO_WritePin>
	return rec;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b005      	add	sp, #20
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	50000400 	.word	0x50000400

08000a28 <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	0008      	movs	r0, r1
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	0019      	movs	r1, r3
 8000a36:	240b      	movs	r4, #11
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	1c02      	adds	r2, r0, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	200a      	movs	r0, #10
 8000a40:	183b      	adds	r3, r7, r0
 8000a42:	1c0a      	adds	r2, r1, #0
 8000a44:	701a      	strb	r2, [r3, #0]
	if (lenght > 4)
 8000a46:	183b      	adds	r3, r7, r0
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d844      	bhi.n	8000ad8 <writeRegister+0xb0>
		return;
	uint8_t tx_data[5] = { 0 };
 8000a4e:	2110      	movs	r1, #16
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	711a      	strb	r2, [r3, #4]
	tx_data[0] = address | 0x80;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	4252      	negs	r2, r2
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	int j = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	e00f      	b.n	8000a94 <writeRegister+0x6c>
		tx_data[i] = cmd[j++];
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	61fa      	str	r2, [r7, #28]
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	7819      	ldrb	r1, [r3, #0]
 8000a82:	2310      	movs	r3, #16
 8000a84:	18fa      	adds	r2, r7, r3
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	1c0a      	adds	r2, r1, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	240a      	movs	r4, #10
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dde9      	ble.n	8000a74 <writeRegister+0x4c>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <writeRegister+0xb8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 ffd1 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	23fa      	movs	r3, #250	@ 0xfa
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	2110      	movs	r1, #16
 8000abc:	1879      	adds	r1, r7, r1
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f004 f83a 	bl	8004b38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <writeRegister+0xb8>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 ffbf 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f002 fd63 	bl	800359c <HAL_Delay>
 8000ad6:	e000      	b.n	8000ada <writeRegister+0xb2>
		return;
 8000ad8:	46c0      	nop			@ (mov r8, r8)
}
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b009      	add	sp, #36	@ 0x24
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	50000400 	.word	0x50000400

08000ae4 <setRFFrequencyReg>:
	rec = spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6178      	str	r0, [r7, #20]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000aec:	6979      	ldr	r1, [r7, #20]
 8000aee:	6809      	ldr	r1, [r1, #0]
 8000af0:	000a      	movs	r2, r1
 8000af2:	2100      	movs	r1, #0
 8000af4:	000b      	movs	r3, r1
 8000af6:	0b51      	lsrs	r1, r2, #13
 8000af8:	6079      	str	r1, [r7, #4]
 8000afa:	04d3      	lsls	r3, r2, #19
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4a1d      	ldr	r2, [pc, #116]	@ (8000b74 <setRFFrequencyReg+0x90>)
 8000b00:	2300      	movs	r3, #0
 8000b02:	6838      	ldr	r0, [r7, #0]
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	f7ff fb87 	bl	8000218 <__aeabi_uldivmod>
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	000b      	movs	r3, r1
 8000b0e:	623a      	str	r2, [r7, #32]
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	0c12      	lsrs	r2, r2, #16
 8000b1a:	60ba      	str	r2, [r7, #8]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	0c1b      	lsrs	r3, r3, #16
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	7a3a      	ldrb	r2, [r7, #8]
 8000b2a:	210c      	movs	r1, #12
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	180b      	adds	r3, r1, r0
 8000b30:	19db      	adds	r3, r3, r7
 8000b32:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	061b      	lsls	r3, r3, #24
 8000b38:	6a3a      	ldr	r2, [r7, #32]
 8000b3a:	0a14      	lsrs	r4, r2, #8
 8000b3c:	431c      	orrs	r4, r3
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b40:	0a1d      	lsrs	r5, r3, #8
 8000b42:	b2e2      	uxtb	r2, r4
 8000b44:	180b      	adds	r3, r1, r0
 8000b46:	19db      	adds	r3, r3, r7
 8000b48:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000b4a:	6a3a      	ldr	r2, [r7, #32]
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4e:	1c13      	adds	r3, r2, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	0004      	movs	r4, r0
 8000b54:	180b      	adds	r3, r1, r0
 8000b56:	19db      	adds	r3, r3, r7
 8000b58:	709a      	strb	r2, [r3, #2]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000b5e:	190b      	adds	r3, r1, r4
 8000b60:	19da      	adds	r2, r3, r7
 8000b62:	2303      	movs	r3, #3
 8000b64:	2106      	movs	r1, #6
 8000b66:	f7ff ff5f 	bl	8000a28 <writeRegister>

}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b00a      	add	sp, #40	@ 0x28
 8000b70:	bdb0      	pop	{r4, r5, r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	01e84800 	.word	0x01e84800

08000b78 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	330c      	adds	r3, #12
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	2109      	movs	r1, #9
 8000b8e:	f7ff ff4b 	bl	8000a28 <writeRegister>
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3313      	adds	r3, #19
 8000baa:	001a      	movs	r2, r3
 8000bac:	2301      	movs	r3, #1
 8000bae:	210b      	movs	r1, #11
 8000bb0:	f7ff ff3a 	bl	8000a28 <writeRegister>
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3316      	adds	r3, #22
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2301      	movs	r3, #1
 8000bd0:	211f      	movs	r1, #31
 8000bd2:	f7ff ff29 	bl	8000a28 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3318      	adds	r3, #24
 8000bde:	001a      	movs	r2, r3
 8000be0:	2301      	movs	r3, #1
 8000be2:	2120      	movs	r1, #32
 8000be4:	f7ff ff20 	bl	8000a28 <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3319      	adds	r3, #25
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2121      	movs	r1, #33	@ 0x21
 8000bf6:	f7ff ff17 	bl	8000a28 <writeRegister>
			1);
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <setRegModemConfig>:

void setRegModemConfig(SX1278_t *module) {
 8000c02:	b590      	push	{r4, r7, lr}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
	cmd = module->bandwidth << 4;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7b9b      	ldrb	r3, [r3, #14]
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
	cmd += module->codingRate << 1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7bdb      	ldrb	r3, [r3, #15]
 8000c22:	18db      	adds	r3, r3, r3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	000c      	movs	r4, r1
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	18d3      	adds	r3, r2, r3
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	701a      	strb	r2, [r3, #0]
	cmd += module->headerMode;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7f5a      	ldrb	r2, [r3, #29]
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000c48:	193a      	adds	r2, r7, r4
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	211d      	movs	r1, #29
 8000c4e:	f7ff feeb 	bl	8000a28 <writeRegister>

	cmd = module->spreadFactor << 4;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7b5b      	ldrb	r3, [r3, #13]
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	cmd += module->LoRa_CRC_sum << 2;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7c1b      	ldrb	r3, [r3, #16]
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	701a      	strb	r2, [r3, #0]
	cmd += module->symbTimeoutMsb;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7dda      	ldrb	r2, [r3, #23]
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000c88:	187a      	adds	r2, r7, r1
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	211e      	movs	r1, #30
 8000c8e:	f7ff fecb 	bl	8000a28 <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3315      	adds	r3, #21
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2126      	movs	r1, #38	@ 0x26
 8000ca0:	f7ff fec2 	bl	8000a28 <writeRegister>
}
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b005      	add	sp, #20
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cb8:	2131      	movs	r1, #49	@ 0x31
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fe82 	bl	80009c4 <readRegister>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
	tmp &= 0xF8;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2207      	movs	r2, #7
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	701a      	strb	r2, [r3, #0]
	tmp |= 0x05;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000cea:	000c      	movs	r4, r1
 8000cec:	187a      	adds	r2, r7, r1
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2131      	movs	r1, #49	@ 0x31
 8000cf2:	f7ff fe99 	bl	8000a28 <writeRegister>
	tmp = 0x0C;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d02:	187a      	adds	r2, r7, r1
 8000d04:	2301      	movs	r3, #1
 8000d06:	2137      	movs	r1, #55	@ 0x37
 8000d08:	f7ff fe8e 	bl	8000a28 <writeRegister>
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b005      	add	sp, #20
 8000d12:	bd90      	pop	{r4, r7, pc}

08000d14 <setLoRaLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoRaLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cfb      	adds	r3, r7, #3
 8000d20:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000d22:	1cfb      	adds	r3, r7, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2278      	movs	r2, #120	@ 0x78
 8000d28:	4252      	negs	r2, r2
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	210f      	movs	r1, #15
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d38:	187a      	adds	r2, r7, r1
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	f7ff fe73 	bl	8000a28 <writeRegister>
	module->operatingMode = mode;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1cfa      	adds	r2, r7, #3
 8000d46:	2128      	movs	r1, #40	@ 0x28
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	545a      	strb	r2, [r3, r1]
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b004      	add	sp, #16
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	22ff      	movs	r2, #255	@ 0xff
 8000d62:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d68:	187a      	adds	r2, r7, r1
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2112      	movs	r1, #18
 8000d6e:	f7ff fe5b 	bl	8000a28 <writeRegister>
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2100      	movs	r1, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff ffc4 	bl	8000d14 <setLoRaLowFreqModeReg>
	HAL_Delay(15);
 8000d8c:	200f      	movs	r0, #15
 8000d8e:	f002 fc05 	bl	800359c <HAL_Delay>
	setRFFrequencyReg(module);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fea5 	bl	8000ae4 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3312      	adds	r3, #18
 8000da2:	001a      	movs	r2, r3
 8000da4:	2301      	movs	r3, #1
 8000da6:	2139      	movs	r1, #57	@ 0x39
 8000da8:	f7ff fe3e 	bl	8000a28 <writeRegister>
	setOutputPower(module);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fee2 	bl	8000b78 <setOutputPower>
	setOvercurrentProtect(module);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff feef 	bl	8000b9a <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3314      	adds	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	210c      	movs	r1, #12
 8000dca:	f7ff fe2d 	bl	8000a28 <writeRegister>
	if (module->spreadFactor == SF_6) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7b5b      	ldrb	r3, [r3, #13]
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d10a      	bne.n	8000dec <writeLoRaParametersReg+0x72>
		module->headerMode = IMPLICIT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x03;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	75da      	strb	r2, [r3, #23]
		setDetectionParametersReg(module);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff61 	bl	8000cac <setDetectionParametersReg>
 8000dea:	e005      	b.n	8000df8 <writeLoRaParametersReg+0x7e>
	} else {
		module->headerMode = EXPLICIT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	775a      	strb	r2, [r3, #29]
		module->symbTimeoutMsb = 0x00;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	75da      	strb	r2, [r3, #23]
	}

	setRegModemConfig(module);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff01 	bl	8000c02 <setRegModemConfig>
	setPreambleParameters(module);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff feda 	bl	8000bbc <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	331a      	adds	r3, #26
 8000e10:	001a      	movs	r2, r3
 8000e12:	2301      	movs	r3, #1
 8000e14:	2124      	movs	r1, #36	@ 0x24
 8000e16:	f7ff fe07 	bl	8000a28 <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	331b      	adds	r3, #27
 8000e22:	001a      	movs	r2, r3
 8000e24:	2301      	movs	r3, #1
 8000e26:	2140      	movs	r1, #64	@ 0x40
 8000e28:	f7ff fdfe 	bl	8000a28 <writeRegister>
	clearIrqFlagsReg(module);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff ff90 	bl	8000d54 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	331c      	adds	r3, #28
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2301      	movs	r3, #1
 8000e40:	2111      	movs	r1, #17
 8000e42:	f7ff fdf1 	bl	8000a28 <writeRegister>
}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <changeMode>:

void changeMode(SX1278_t *module, Lora_Mode_t mode) {
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	000a      	movs	r2, r1
 8000e58:	1cfb      	adds	r3, r7, #3
 8000e5a:	701a      	strb	r2, [r3, #0]

	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8000e5c:	1cfb      	adds	r3, r7, #3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <changeMode+0x1e>
 8000e64:	1cfb      	adds	r3, r7, #3
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d121      	bne.n	8000eb0 <changeMode+0x62>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <changeMode+0x2c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	e001      	b.n	8000e7e <changeMode+0x30>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685a      	ldr	r2, [r3, #4]
		module->frequency =
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2241      	movs	r2, #65	@ 0x41
 8000e86:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	22ff      	movs	r2, #255	@ 0xff
 8000e8c:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7f1b      	ldrb	r3, [r3, #28]
 8000e92:	2208      	movs	r2, #8
 8000e94:	4393      	bics	r3, r2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1cfa      	adds	r2, r7, #3
 8000ea0:	2129      	movs	r1, #41	@ 0x29
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	545a      	strb	r2, [r3, r1]
		module->status = TX_MODE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	222a      	movs	r2, #42	@ 0x2a
 8000eaa:	2101      	movs	r1, #1
 8000eac:	5499      	strb	r1, [r3, r2]
 8000eae:	e02f      	b.n	8000f10 <changeMode+0xc2>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8000eb0:	1cfb      	adds	r3, r7, #3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d003      	beq.n	8000ec0 <changeMode+0x72>
 8000eb8:	1cfb      	adds	r3, r7, #3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d127      	bne.n	8000f10 <changeMode+0xc2>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8000ec0:	1cfb      	adds	r3, r7, #3
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d102      	bne.n	8000ece <changeMode+0x80>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	e001      	b.n	8000ed2 <changeMode+0x84>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689a      	ldr	r2, [r3, #8]
		module->frequency =
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	76da      	strb	r2, [r3, #27]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	22ff      	movs	r2, #255	@ 0xff
 8000ee0:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, RX_DONE_MASK);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7f1b      	ldrb	r3, [r3, #28]
 8000ee6:	2240      	movs	r2, #64	@ 0x40
 8000ee8:	4393      	bics	r3, r2
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	771a      	strb	r2, [r3, #28]
		CLEAR_BIT(module->flagsMode, PAYLOAD_CRC_ERROR_MASK);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	771a      	strb	r2, [r3, #28]
		module->mode = mode;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	1cfa      	adds	r2, r7, #3
 8000f02:	2129      	movs	r1, #41	@ 0x29
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	545a      	strb	r2, [r3, r1]
		module->status = RX_MODE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	222a      	movs	r2, #42	@ 0x2a
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	5499      	strb	r1, [r3, r2]
	}
	setLoRaLowFreqModeReg(module, STANDBY);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2101      	movs	r1, #1
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fefd 	bl	8000d14 <setLoRaLowFreqModeReg>
	HAL_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f002 fb3e 	bl	800359c <HAL_Delay>
	setRFFrequencyReg(module);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fdde 	bl	8000ae4 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	331b      	adds	r3, #27
 8000f30:	001a      	movs	r2, r3
 8000f32:	2301      	movs	r3, #1
 8000f34:	2140      	movs	r1, #64	@ 0x40
 8000f36:	f7ff fd77 	bl	8000a28 <writeRegister>
	clearIrqFlagsReg(module);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff09 	bl	8000d54 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	331c      	adds	r3, #28
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2111      	movs	r1, #17
 8000f50:	f7ff fd6a 	bl	8000a28 <writeRegister>
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <sx1278Reset>:
	module->preambleLengthLsb = 12; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
	module->len = 9;
}

void sx1278Reset() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <sx1278Reset+0x3c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	2101      	movs	r1, #1
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 fd71 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <sx1278Reset+0x3c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2101      	movs	r1, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 fd6b 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 fb0f 	bl	800359c <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <sx1278Reset+0x3c>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	0018      	movs	r0, r3
 8000f86:	f002 fd62 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f002 fb06 	bl	800359c <HAL_Delay>
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	50000400 	.word	0x50000400

08000f9c <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8000fa4:	f002 faf0 	bl	8003588 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	617b      	str	r3, [r7, #20]
	uint8_t irqFlags = 0;
 8000fac:	2313      	movs	r3, #19
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	while (1) {
		irqFlags = readRegister(loRa->spi, LR_RegIrqFlags);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb8:	2513      	movs	r5, #19
 8000fba:	197c      	adds	r4, r7, r5
 8000fbc:	2112      	movs	r1, #18
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff fd00 	bl	80009c4 <readRegister>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	7023      	strb	r3, [r4, #0]
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <waitForTxEnd+0x88>)
 8000fca:	2140      	movs	r1, #64	@ 0x40
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 fd21 	bl	8003a14 <HAL_GPIO_ReadPin>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d104      	bne.n	8000fe0 <waitForTxEnd+0x44>
				|| (irqFlags & 0x08)) {
 8000fd6:	197b      	adds	r3, r7, r5
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d00e      	beq.n	8000ffe <waitForTxEnd+0x62>
			int timeEnd = HAL_GetTick();
 8000fe0:	f002 fad2 	bl	8003588 <HAL_GetTick>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	60fb      	str	r3, [r7, #12]
			loRa->lastTxTime = timeEnd - timeStart;
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	001a      	movs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	621a      	str	r2, [r3, #32]
//			readRegister(loRa->spi, LR_RegIrqFlags);
//			clearIrqFlagsReg(loRa);
			loRa->status = TX_DONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	222a      	movs	r2, #42	@ 0x2a
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	5499      	strb	r1, [r3, r2]
			return;
 8000ffc:	e00e      	b.n	800101c <waitForTxEnd+0x80>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000ffe:	f002 fac3 	bl	8003588 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	1ad2      	subs	r2, r2, r3
 8001008:	23fa      	movs	r3, #250	@ 0xfa
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	429a      	cmp	r2, r3
 800100e:	d9d1      	bls.n	8000fb4 <waitForTxEnd+0x18>
			sx1278Reset();
 8001010:	f7ff ffa4 	bl	8000f5c <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	222a      	movs	r2, #42	@ 0x2a
 8001018:	2105      	movs	r1, #5
 800101a:	5499      	strb	r1, [r3, r2]
			return;
		}
		//HAL_Delay(1);
	}
}
 800101c:	46bd      	mov	sp, r7
 800101e:	b006      	add	sp, #24
 8001020:	bdb0      	pop	{r4, r5, r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	50000800 	.word	0x50000800

08001028 <setRxFifoAddr>:
		}
	}
	return 0;
}

void setRxFifoAddr(SX1278_t *module) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2100      	movs	r1, #0
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fe6d 	bl	8000d14 <setLoRaLowFreqModeReg>
	uint8_t cmd = module->rxSize;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2230      	movs	r2, #48	@ 0x30
 800103e:	5c9a      	ldrb	r2, [r3, r2]
 8001040:	210f      	movs	r1, #15
 8001042:	187b      	adds	r3, r7, r1
 8001044:	701a      	strb	r2, [r3, #0]
	//cmd = 9;
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800104a:	187a      	adds	r2, r7, r1
 800104c:	2301      	movs	r3, #1
 800104e:	2122      	movs	r1, #34	@ 0x22
 8001050:	f7ff fcea 	bl	8000a28 <writeRegister>
	uint8_t addr = readRegister(module->spi, LR_RegFifoRxBaseAddr); //RegFiFoTxBaseAddr
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001058:	210f      	movs	r1, #15
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff fcb2 	bl	80009c4 <readRegister>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	210e      	movs	r1, #14
 8001066:	187b      	adds	r3, r7, r1
 8001068:	701a      	strb	r2, [r3, #0]
	addr = 0x00;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001074:	187a      	adds	r2, r7, r1
 8001076:	2301      	movs	r3, #1
 8001078:	210d      	movs	r1, #13
 800107a:	f7ff fcd5 	bl	8000a28 <writeRegister>
	module->rxSize = readRegister(module->spi, LR_RegPayloadLength);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001082:	2122      	movs	r1, #34	@ 0x22
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fc9d 	bl	80009c4 <readRegister>
 800108a:	0003      	movs	r3, r0
 800108c:	0019      	movs	r1, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2230      	movs	r2, #48	@ 0x30
 8001092:	5499      	strb	r1, [r3, r2]
}
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b004      	add	sp, #16
 800109a:	bd80      	pop	{r7, pc}

0800109c <getRxFifoData>:
	flags = readRegister(module->spi, LR_RegIrqFlags);
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

uint8_t* getRxFifoData(SX1278_t *loRa) {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	loRa->rxSize = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a8:	2113      	movs	r1, #19
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fc8a 	bl	80009c4 <readRegister>
 80010b0:	0003      	movs	r3, r0
 80010b2:	0019      	movs	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2230      	movs	r2, #48	@ 0x30
 80010b8:	5499      	strb	r1, [r3, r2]
	if (loRa->rxSize > 0) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2230      	movs	r2, #48	@ 0x30
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d035      	beq.n	8001130 <getRxFifoData+0x94>
		loRa->rxData = malloc(sizeof(uint8_t) * loRa->rxSize);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2230      	movs	r2, #48	@ 0x30
 80010c8:	5c9b      	ldrb	r3, [r3, r2]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f004 fb9c 	bl	8005808 <malloc>
 80010d0:	0003      	movs	r3, r0
 80010d2:	001a      	movs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		uint8_t addr = 0x00;
 80010d8:	240f      	movs	r4, #15
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <getRxFifoData+0xa0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fcb1 	bl	8003a4e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f002 fa55 	bl	800359c <HAL_Delay>
		HAL_SPI_Transmit(loRa->spi, &addr, 1, 100); // send address
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80010f6:	1939      	adds	r1, r7, r4
 80010f8:	2364      	movs	r3, #100	@ 0x64
 80010fa:	2201      	movs	r2, #1
 80010fc:	f003 fd1c 	bl	8004b38 <HAL_SPI_Transmit>
		HAL_SPI_Receive(loRa->spi, loRa->rxData, loRa->rxSize, 100); // receive 6 bytes data
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2230      	movs	r2, #48	@ 0x30
 800110c:	5c9b      	ldrb	r3, [r3, r2]
 800110e:	001a      	movs	r2, r3
 8001110:	2364      	movs	r3, #100	@ 0x64
 8001112:	f003 fe71 	bl	8004df8 <HAL_SPI_Receive>
		HAL_Delay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f002 fa40 	bl	800359c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <getRxFifoData+0xa0>)
 800111e:	2201      	movs	r2, #1
 8001120:	2101      	movs	r1, #1
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fc93 	bl	8003a4e <HAL_GPIO_WritePin>
		loRa->status = RX_DONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	222a      	movs	r2, #42	@ 0x2a
 800112c:	2104      	movs	r1, #4
 800112e:	5499      	strb	r1, [r3, r2]
	}

	return loRa->rxData;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b005      	add	sp, #20
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	50000400 	.word	0x50000400

08001140 <setTxFifoData>:
	addr = 0x80;
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1);
	module->len = readRegister(module->spi, LR_RegPayloadLength);
}

uint8_t setTxFifoData(SX1278_t *loRa) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t cmd = loRa->txSize;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2238      	movs	r2, #56	@ 0x38
 800114c:	5c9a      	ldrb	r2, [r3, r2]
 800114e:	210b      	movs	r1, #11
 8001150:	187b      	adds	r3, r7, r1
 8001152:	701a      	strb	r2, [r3, #0]
	if (loRa->txSize > 0) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2238      	movs	r2, #56	@ 0x38
 8001158:	5c9b      	ldrb	r3, [r3, r2]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d03d      	beq.n	80011da <setTxFifoData+0x9a>
		writeRegister(loRa->spi, LR_RegPayloadLength, &(cmd), 1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001162:	187a      	adds	r2, r7, r1
 8001164:	2301      	movs	r3, #1
 8001166:	2122      	movs	r1, #34	@ 0x22
 8001168:	f7ff fc5e 	bl	8000a28 <writeRegister>
		uint8_t addr = readRegister(loRa->spi, LR_RegFifoTxBaseAddr);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001170:	210e      	movs	r1, #14
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff fc26 	bl	80009c4 <readRegister>
 8001178:	0003      	movs	r3, r0
 800117a:	001a      	movs	r2, r3
 800117c:	210a      	movs	r1, #10
 800117e:	187b      	adds	r3, r7, r1
 8001180:	701a      	strb	r2, [r3, #0]
		addr = 0x80;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	701a      	strb	r2, [r3, #0]
		writeRegister(loRa->spi, LR_RegFifoAddrPtr, &addr, 1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800118c:	187a      	adds	r2, r7, r1
 800118e:	2301      	movs	r3, #1
 8001190:	210d      	movs	r1, #13
 8001192:	f7ff fc49 	bl	8000a28 <writeRegister>
		loRa->txSize = readRegister(loRa->spi, LR_RegPayloadLength);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119a:	2122      	movs	r1, #34	@ 0x22
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff fc11 	bl	80009c4 <readRegister>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2238      	movs	r2, #56	@ 0x38
 80011aa:	5499      	strb	r1, [r3, r2]
		for (int i = 0; i < loRa->txSize; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e00c      	b.n	80011cc <setTxFifoData+0x8c>
			writeRegister(loRa->spi, 0x00, loRa->txData + i, 1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	18d2      	adds	r2, r2, r3
 80011be:	2301      	movs	r3, #1
 80011c0:	2100      	movs	r1, #0
 80011c2:	f7ff fc31 	bl	8000a28 <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2238      	movs	r2, #56	@ 0x38
 80011d0:	5c9b      	ldrb	r3, [r3, r2]
 80011d2:	001a      	movs	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dbeb      	blt.n	80011b2 <setTxFifoData+0x72>
	}
	return loRa->txSize;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2238      	movs	r2, #56	@ 0x38
 80011de:	5c9b      	ldrb	r3, [r3, r2]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <transmit>:
	clearRxMemory(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ffa4 	bl	8001140 <setTxFifoData>
	setLoRaLowFreqModeReg(loRa, TX);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2103      	movs	r1, #3
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff fd89 	bl	8000d14 <setLoRaLowFreqModeReg>
	waitForTxEnd(loRa);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fec9 	bl	8000f9c <waitForTxEnd>
//	memset(loRa->buffer, 0, sizeof(loRa->buffer));
//	loRa->len = 0;
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <readLoRaSettings>:

void readLoRaSettings(SX1278_t *loRa) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->spreadFactor), 0, 1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	330d      	adds	r3, #13
 8001220:	0019      	movs	r1, r3
 8001222:	2301      	movs	r3, #1
 8001224:	2200      	movs	r2, #0
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f8fc 	bl	8001424 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->bandwidth), 1, 1);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	330e      	adds	r3, #14
 8001230:	0019      	movs	r1, r3
 8001232:	2301      	movs	r3, #1
 8001234:	2201      	movs	r2, #1
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f8f4 	bl	8001424 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	330f      	adds	r3, #15
 8001240:	0019      	movs	r1, r3
 8001242:	2301      	movs	r3, #1
 8001244:	2202      	movs	r2, #2
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f8ec 	bl	8001424 <readPage>
	readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->upFreq), 0, 4);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3308      	adds	r3, #8
 8001250:	0019      	movs	r1, r3
 8001252:	2304      	movs	r3, #4
 8001254:	2200      	movs	r2, #0
 8001256:	2010      	movs	r0, #16
 8001258:	f000 f8e4 	bl	8001424 <readPage>
	readPage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->dlFreq), 4, 4);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	1d19      	adds	r1, r3, #4
 8001260:	2304      	movs	r3, #4
 8001262:	2204      	movs	r2, #4
 8001264:	2010      	movs	r0, #16
 8001266:	f000 f8dd 	bl	8001424 <readPage>
	if (loRa->spreadFactor < SF_6 || loRa->spreadFactor > SF_12)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7b5b      	ldrb	r3, [r3, #13]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d903      	bls.n	800127a <readLoRaSettings+0x66>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7b5b      	ldrb	r3, [r3, #13]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	d902      	bls.n	8001280 <readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	220a      	movs	r2, #10
 800127e:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7b9b      	ldrb	r3, [r3, #14]
 8001284:	2b09      	cmp	r3, #9
 8001286:	d902      	bls.n	800128e <readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2206      	movs	r2, #6
 800128c:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7bdb      	ldrb	r3, [r3, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <readLoRaSettings+0x8a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7bdb      	ldrb	r3, [r3, #15]
 800129a:	2b04      	cmp	r3, #4
 800129c:	d902      	bls.n	80012a4 <readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2202      	movs	r2, #2
 80012a2:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <readLoRaSettings+0xcc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d904      	bls.n	80012b8 <readLoRaSettings+0xa4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <readLoRaSettings+0xd0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d902      	bls.n	80012be <readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <readLoRaSettings+0xd4>)
 80012bc:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <readLoRaSettings+0xd8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d904      	bls.n	80012d2 <readLoRaSettings+0xbe>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <readLoRaSettings+0xdc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d902      	bls.n	80012d8 <readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <readLoRaSettings+0xe0>)
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	09c670ff 	.word	0x09c670ff
 80012e4:	0aba9500 	.word	0x0aba9500
 80012e8:	0a408300 	.word	0x0a408300
 80012ec:	08d24cff 	.word	0x08d24cff
 80012f0:	095ba140 	.word	0x095ba140
 80012f4:	093d1cc0 	.word	0x093d1cc0

080012f8 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1, Lora_Mode_t loRaMode) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	000a      	movs	r2, r1
 8001302:	1cfb      	adds	r3, r7, #3
 8001304:	701a      	strb	r2, [r3, #0]
	SX1278_t *loRa;
	loRa = malloc(sizeof(SX1278_t));
 8001306:	2040      	movs	r0, #64	@ 0x40
 8001308:	f004 fa7e 	bl	8005808 <malloc>
 800130c:	0003      	movs	r3, r0
 800130e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <loRaInit+0xd4>)
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	0018      	movs	r0, r3
 8001318:	f002 fb99 	bl	8003a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <loRaInit+0xd4>)
 800131e:	2201      	movs	r2, #1
 8001320:	2102      	movs	r1, #2
 8001322:	0018      	movs	r0, r3
 8001324:	f002 fb93 	bl	8003a4e <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001332:	2101      	movs	r1, #1
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fb45 	bl	80009c4 <readRegister>
 800133a:	0003      	movs	r3, r0
 800133c:	0019      	movs	r1, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2228      	movs	r2, #40	@ 0x28
 8001342:	5499      	strb	r1, [r3, r2]
	loRa->mode = -1;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2229      	movs	r2, #41	@ 0x29
 8001348:	21ff      	movs	r1, #255	@ 0xff
 800134a:	5499      	strb	r1, [r3, r2]
	loRa->power = SX1278_POWER_17DBM;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	22fc      	movs	r2, #252	@ 0xfc
 8001350:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2201      	movs	r2, #1
 8001356:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	220b      	movs	r2, #11
 800135c:	74da      	strb	r2, [r3, #19]
	loRa->lnaGain = LNAGAIN;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2223      	movs	r2, #35	@ 0x23
 8001362:	751a      	strb	r2, [r3, #20]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	220c      	movs	r2, #12
 8001368:	755a      	strb	r2, [r3, #21]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2212      	movs	r2, #18
 800136e:	749a      	strb	r2, [r3, #18]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2208      	movs	r2, #8
 8001374:	759a      	strb	r2, [r3, #22]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2208      	movs	r2, #8
 8001380:	765a      	strb	r2, [r3, #25]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	220c      	movs	r2, #12
 8001386:	765a      	strb	r2, [r3, #25]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2207      	movs	r2, #7
 800138c:	769a      	strb	r2, [r3, #26]
	loRa->len = 9;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2209      	movs	r2, #9
 8001392:	745a      	strb	r2, [r3, #17]

	loRa->rxSize = 0;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2230      	movs	r2, #48	@ 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	5499      	strb	r1, [r3, r2]
	loRa->txSize = 0;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2238      	movs	r2, #56	@ 0x38
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
	readLoRaSettings(loRa);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff ff34 	bl	8001214 <readLoRaSettings>
	changeMode(loRa, loRaMode);
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0011      	movs	r1, r2
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fd4a 	bl	8000e4e <changeMode>
	writeLoRaParametersReg(loRa);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fcdc 	bl	8000d7a <writeLoRaParametersReg>
	return (loRa);
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b004      	add	sp, #16
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	50000400 	.word	0x50000400

080013d0 <configureLoRaRx>:

void configureLoRaRx(SX1278_t *loRa, Lora_Mode_t mode) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	000a      	movs	r2, r1
 80013da:	1cfb      	adds	r3, r7, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	if (loRa->mode != mode)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2229      	movs	r2, #41	@ 0x29
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	1cfa      	adds	r2, r7, #3
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d115      	bne.n	8001418 <configureLoRaRx+0x48>
		return;
	if (loRa->operatingMode == RX_CONTINUOUS)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2228      	movs	r2, #40	@ 0x28
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d012      	beq.n	800141c <configureLoRaRx+0x4c>
		return;
	changeMode(loRa, mode);
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff fd25 	bl	8000e4e <changeMode>
	setRxFifoAddr(loRa);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fe0e 	bl	8001028 <setRxFifoAddr>
	setLoRaLowFreqModeReg(loRa, RX_CONTINUOUS);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2105      	movs	r1, #5
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fc7f 	bl	8000d14 <setLoRaLowFreqModeReg>
 8001416:	e002      	b.n	800141e <configureLoRaRx+0x4e>
		return;
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	e000      	b.n	800141e <configureLoRaRx+0x4e>
		return;
 800141c:	46c0      	nop			@ (mov r8, r8)
}
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <readPage>:

	i2c1MasterByteTx(CHIP_ADDR, buff, 2);
	i2c1MasterFrameRx(CHIP_ADDR, data, 32);
}

bool readPage(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	0004      	movs	r4, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	0010      	movs	r0, r2
 8001430:	0019      	movs	r1, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	1c22      	adds	r2, r4, #0
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	1d7b      	adds	r3, r7, #5
 8001440:	1c0a      	adds	r2, r1, #0
 8001442:	701a      	strb	r2, [r3, #0]
	uint8_t buff[1] = { 0 };
 8001444:	210c      	movs	r1, #12
 8001446:	187b      	adds	r3, r7, r1
 8001448:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <readPage+0xa0>)
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	701a      	strb	r2, [r3, #0]
	uint16_t MemAddress = page << PADDRPOSITION | offset;
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	b21a      	sxth	r2, r3
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b21a      	sxth	r2, r3
 8001460:	200e      	movs	r0, #14
 8001462:	183b      	adds	r3, r7, r0
 8001464:	801a      	strh	r2, [r3, #0]
	buff[0] = (uint8_t) MemAddress & 0xff;
 8001466:	183b      	adds	r3, r7, r0
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	187b      	adds	r3, r7, r1
 800146e:	701a      	strb	r2, [r3, #0]


	if (!i2c1MasterTransmit(CHIP_ADDR, buff, 1, 1000))
 8001470:	23fa      	movs	r3, #250	@ 0xfa
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	1879      	adds	r1, r7, r1
 8001476:	2201      	movs	r2, #1
 8001478:	2050      	movs	r0, #80	@ 0x50
 800147a:	f000 f915 	bl	80016a8 <i2c1MasterTransmit>
 800147e:	0003      	movs	r3, r0
 8001480:	001a      	movs	r2, r3
 8001482:	2301      	movs	r3, #1
 8001484:	4053      	eors	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <readPage+0x6c>
		return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e015      	b.n	80014bc <readPage+0x98>
	HAL_Delay(5);
 8001490:	2005      	movs	r0, #5
 8001492:	f002 f883 	bl	800359c <HAL_Delay>
	if (!i2c1MasterReceive(CHIP_ADDR, data, size, 1000))
 8001496:	23fa      	movs	r3, #250	@ 0xfa
 8001498:	0098      	lsls	r0, r3, #2
 800149a:	1d7b      	adds	r3, r7, #5
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	0003      	movs	r3, r0
 80014a2:	2050      	movs	r0, #80	@ 0x50
 80014a4:	f000 f9ea 	bl	800187c <i2c1MasterReceive>
 80014a8:	0003      	movs	r3, r0
 80014aa:	001a      	movs	r2, r3
 80014ac:	2301      	movs	r3, #1
 80014ae:	4053      	eors	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <readPage+0x96>
		return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <readPage+0x98>
	return true;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b005      	add	sp, #20
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	08005ae0 	.word	0x08005ae0

080014c8 <savePage>:

uint8_t savePage(uint8_t page, uint8_t *data, uint8_t offset, uint8_t size) {
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b08d      	sub	sp, #52	@ 0x34
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	0004      	movs	r4, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	0010      	movs	r0, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	1c22      	adds	r2, r4, #0
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	1c02      	adds	r2, r0, #0
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	1d7b      	adds	r3, r7, #5
 80014e4:	1c0a      	adds	r2, r1, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	uint8_t buff[16 + 1];
	uint8_t read[16];
	uint8_t i = 0;
 80014e8:	252f      	movs	r5, #47	@ 0x2f
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef res = 0;
 80014f0:	262e      	movs	r6, #46	@ 0x2e
 80014f2:	19bb      	adds	r3, r7, r6
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	res = readPage(page, read, offset, size);
 80014f8:	1d7b      	adds	r3, r7, #5
 80014fa:	781c      	ldrb	r4, [r3, #0]
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	230c      	movs	r3, #12
 8001502:	18f9      	adds	r1, r7, r3
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	7818      	ldrb	r0, [r3, #0]
 8001508:	0023      	movs	r3, r4
 800150a:	f7ff ff8b 	bl	8001424 <readPage>
 800150e:	0003      	movs	r3, r0
 8001510:	001a      	movs	r2, r3
 8001512:	19bb      	adds	r3, r7, r6
 8001514:	701a      	strb	r2, [r3, #0]
	bool notEqual = false;
 8001516:	232d      	movs	r3, #45	@ 0x2d
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < size; i++)
 800151e:	197b      	adds	r3, r7, r5
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e017      	b.n	8001556 <savePage+0x8e>
		if (data[i] != read[i]) {
 8001526:	212f      	movs	r1, #47	@ 0x2f
 8001528:	187b      	adds	r3, r7, r1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	18d3      	adds	r3, r2, r3
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	187b      	adds	r3, r7, r1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	210c      	movs	r1, #12
 8001538:	1879      	adds	r1, r7, r1
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	429a      	cmp	r2, r3
 800153e:	d004      	beq.n	800154a <savePage+0x82>
			notEqual = true;
 8001540:	232d      	movs	r3, #45	@ 0x2d
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
			break;
 8001548:	e00c      	b.n	8001564 <savePage+0x9c>
	for (i = 0; i < size; i++)
 800154a:	212f      	movs	r1, #47	@ 0x2f
 800154c:	187b      	adds	r3, r7, r1
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	187b      	adds	r3, r7, r1
 8001552:	3201      	adds	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	232f      	movs	r3, #47	@ 0x2f
 8001558:	18fa      	adds	r2, r7, r3
 800155a:	1d7b      	adds	r3, r7, #5
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3e0      	bcc.n	8001526 <savePage+0x5e>
		}

	if (notEqual) {
 8001564:	232d      	movs	r3, #45	@ 0x2d
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d038      	beq.n	80015e0 <savePage+0x118>
		buff[0] = (uint8_t) (page << PADDRPOSITION | offset) & 0xff;
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	b25a      	sxtb	r2, r3
 8001576:	1dbb      	adds	r3, r7, #6
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b25b      	sxtb	r3, r3
 8001580:	b2da      	uxtb	r2, r3
 8001582:	231c      	movs	r3, #28
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++) {
 8001588:	232f      	movs	r3, #47	@ 0x2f
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e010      	b.n	80015b4 <savePage+0xec>
			buff[i + 1] = data[i];
 8001592:	202f      	movs	r0, #47	@ 0x2f
 8001594:	183b      	adds	r3, r7, r0
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	18d2      	adds	r2, r2, r3
 800159c:	183b      	adds	r3, r7, r0
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	7811      	ldrb	r1, [r2, #0]
 80015a4:	221c      	movs	r2, #28
 80015a6:	18ba      	adds	r2, r7, r2
 80015a8:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < size; i++) {
 80015aa:	183b      	adds	r3, r7, r0
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	183b      	adds	r3, r7, r0
 80015b0:	3201      	adds	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	232f      	movs	r3, #47	@ 0x2f
 80015b6:	18fa      	adds	r2, r7, r3
 80015b8:	1d7b      	adds	r3, r7, #5
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3e7      	bcc.n	8001592 <savePage+0xca>
		}
		res = i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
 80015c2:	1d7b      	adds	r3, r7, #5
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	231c      	movs	r3, #28
 80015cc:	18f9      	adds	r1, r7, r3
 80015ce:	2332      	movs	r3, #50	@ 0x32
 80015d0:	2050      	movs	r0, #80	@ 0x50
 80015d2:	f000 f869 	bl	80016a8 <i2c1MasterTransmit>
 80015d6:	0003      	movs	r3, r0
 80015d8:	001a      	movs	r2, r3
 80015da:	232e      	movs	r3, #46	@ 0x2e
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(6);
 80015e0:	2006      	movs	r0, #6
 80015e2:	f001 ffdb 	bl	800359c <HAL_Delay>

	return res;
 80015e6:	232e      	movs	r3, #46	@ 0x2e
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b00d      	add	sp, #52	@ 0x34
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f4 <i2c1MasterInit>:
 *      Author: sigmadev
 */

#include "i2c.h"

void i2c1MasterInit() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	// Enable GPIOB clock
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <i2c1MasterInit+0x9c>)
 80015fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <i2c1MasterInit+0x9c>)
 80015fe:	2102      	movs	r1, #2
 8001600:	430a      	orrs	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	@ 0x34

	// Configure SCL and SDA pins (PB6 and PB7) as alternate function
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <i2c1MasterInit+0xa0>)
 800160a:	4923      	ldr	r1, [pc, #140]	@ (8001698 <i2c1MasterInit+0xa4>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001616:	21a0      	movs	r1, #160	@ 0xa0
 8001618:	0209      	lsls	r1, r1, #8
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

	// Set SCL and SDA pins as open-drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7;
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001624:	21c0      	movs	r1, #192	@ 0xc0
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]

	// Set alternate function for SCL and SDA pins to I2C
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6_Msk | GPIO_AFRL_AFSEL7_Msk);
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <i2c1MasterInit+0xa0>)
 800162c:	6a1a      	ldr	r2, [r3, #32]
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001630:	0212      	lsls	r2, r2, #8
 8001632:	0a12      	lsrs	r2, r2, #8
 8001634:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |= (6U << GPIO_AFRL_AFSEL6_Pos)
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <i2c1MasterInit+0xa0>)
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <i2c1MasterInit+0xa0>)
 800163c:	21cc      	movs	r1, #204	@ 0xcc
 800163e:	05c9      	lsls	r1, r1, #23
 8001640:	430a      	orrs	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
			| (6U << GPIO_AFRL_AFSEL7_Pos);

	// Enable I2C1 clock
	RCC->APBENR1 |= RCC_APBENR1_I2C1EN;
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <i2c1MasterInit+0x9c>)
 8001646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <i2c1MasterInit+0x9c>)
 800164a:	2180      	movs	r1, #128	@ 0x80
 800164c:	0389      	lsls	r1, r1, #14
 800164e:	430a      	orrs	r2, r1
 8001650:	63da      	str	r2, [r3, #60]	@ 0x3c

	// Disable I2C1
	I2C1->CR1 &= ~I2C_CR1_PE;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <i2c1MasterInit+0xa8>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <i2c1MasterInit+0xa8>)
 8001658:	2101      	movs	r1, #1
 800165a:	438a      	bics	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

	// Set I2C1 timing
	I2C1->TIMINGR = 0x00303D5B;
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <i2c1MasterInit+0xa8>)
 8001660:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <i2c1MasterInit+0xac>)
 8001662:	611a      	str	r2, [r3, #16]

	// Disable I2C1 own address
	I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <i2c1MasterInit+0xa8>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <i2c1MasterInit+0xa8>)
 800166a:	490e      	ldr	r1, [pc, #56]	@ (80016a4 <i2c1MasterInit+0xb0>)
 800166c:	400a      	ands	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
	I2C1->OAR2 &= ~I2C_OAR2_OA2EN;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <i2c1MasterInit+0xa8>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <i2c1MasterInit+0xa8>)
 8001676:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <i2c1MasterInit+0xb0>)
 8001678:	400a      	ands	r2, r1
 800167a:	60da      	str	r2, [r3, #12]

	// Enable I2C1
	I2C1->CR1 |= I2C_CR1_PE;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <i2c1MasterInit+0xa8>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <i2c1MasterInit+0xa8>)
 8001682:	2101      	movs	r1, #1
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

}
 8001688:	46c0      	nop			@ (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	50000400 	.word	0x50000400
 8001698:	ffff0fff 	.word	0xffff0fff
 800169c:	40005400 	.word	0x40005400
 80016a0:	00303d5b 	.word	0x00303d5b
 80016a4:	ffff7fff 	.word	0xffff7fff

080016a8 <i2c1MasterTransmit>:
	}
	return true;
}

bool i2c1MasterTransmit(uint8_t slaveAddr, uint8_t *data, uint8_t length,
		uint32_t timeout) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	0011      	movs	r1, r2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	1c02      	adds	r2, r0, #0
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	230e      	movs	r3, #14
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	701a      	strb	r2, [r3, #0]
	uint32_t tickStart = HAL_GetTick();
 80016c4:	f001 ff60 	bl	8003588 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
	uint8_t dataIndex = 0;
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	uint8_t retries = 3;
 80016d4:	2316      	movs	r3, #22
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2203      	movs	r2, #3
 80016da:	701a      	strb	r2, [r3, #0]

	if (!(I2C1->CR1 & I2C_CR1_PE) || (I2C1->ISR & I2C_ISR_BUSY)) {
 80016dc:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	d005      	beq.n	80016f2 <i2c1MasterTransmit+0x4a>
 80016e6:	4b64      	ldr	r3, [pc, #400]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80016e8:	699a      	ldr	r2, [r3, #24]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	4013      	ands	r3, r2
 80016f0:	d00d      	beq.n	800170e <i2c1MasterTransmit+0x66>
		I2C1->CR1 &= ~I2C_CR1_PE;
 80016f2:	4b61      	ldr	r3, [pc, #388]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
		I2C1->CR1 |= I2C_CR1_PE;
 80016fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b5d      	ldr	r3, [pc, #372]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
		return false;
 800170a:	2300      	movs	r3, #0
 800170c:	e0b0      	b.n	8001870 <i2c1MasterTransmit+0x1c8>
	}

	I2C1->CR2 = (slaveAddr << 1) | (length << 16) | I2C_CR2_AUTOEND;
 800170e:	230f      	movs	r3, #15
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	005a      	lsls	r2, r3, #1
 8001716:	230e      	movs	r3, #14
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	4313      	orrs	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	4b55      	ldr	r3, [pc, #340]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	0492      	lsls	r2, r2, #18
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]
	SET_BIT(I2C1->CR2, I2C_CR2_START);
 800172c:	4b52      	ldr	r3, [pc, #328]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4b51      	ldr	r3, [pc, #324]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	0189      	lsls	r1, r1, #6
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]

	while (dataIndex < length) {
 800173a:	e079      	b.n	8001830 <i2c1MasterTransmit+0x188>
		if (HAL_GetTick() - tickStart > timeout) {
 800173c:	f001 ff24 	bl	8003588 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d210      	bcs.n	800176e <i2c1MasterTransmit+0xc6>
			if (I2C1->ISR & I2C_ISR_BUSY) {
 800174c:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4013      	ands	r3, r2
 8001756:	d00a      	beq.n	800176e <i2c1MasterTransmit+0xc6>
				I2C1->CR2 |= I2C_CR2_STOP;
 8001758:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4b46      	ldr	r3, [pc, #280]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800175e:	2180      	movs	r1, #128	@ 0x80
 8001760:	01c9      	lsls	r1, r1, #7
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
				i2c1MasterInit();
 8001766:	f7ff ff45 	bl	80015f4 <i2c1MasterInit>
				return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e080      	b.n	8001870 <i2c1MasterTransmit+0x1c8>
			}
		}

		if (READ_BIT(I2C1->ISR, I2C_ISR_TXIS)) {
 800176e:	4b42      	ldr	r3, [pc, #264]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d00b      	beq.n	8001790 <i2c1MasterTransmit+0xe8>
			I2C1->TXDR = data[dataIndex++];
 8001778:	2217      	movs	r2, #23
 800177a:	18bb      	adds	r3, r7, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	18ba      	adds	r2, r7, r2
 8001780:	1c59      	adds	r1, r3, #1
 8001782:	7011      	strb	r1, [r2, #0]
 8001784:	001a      	movs	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	189b      	adds	r3, r3, r2
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		if (READ_BIT(I2C1->ISR, I2C_ISR_NACKF)) {
 8001790:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2210      	movs	r2, #16
 8001796:	4013      	ands	r3, r2
 8001798:	2016      	movs	r0, #22
 800179a:	183a      	adds	r2, r7, r0
 800179c:	1839      	adds	r1, r7, r0
 800179e:	7809      	ldrb	r1, [r1, #0]
 80017a0:	7011      	strb	r1, [r2, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <i2c1MasterTransmit+0x188>
			if (--retries > 0) {
 80017a6:	0001      	movs	r1, r0
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	187a      	adds	r2, r7, r1
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	3a01      	subs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d029      	beq.n	800180e <i2c1MasterTransmit+0x166>
				// Generate the stop condition
				I2C1->CR2 |= I2C_CR2_STOP;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	01c9      	lsls	r1, r1, #7
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
				// Clear NACKF flag
				SET_BIT(I2C1->ICR, I2C_ICR_NACKCF);
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80017ca:	69da      	ldr	r2, [r3, #28]
 80017cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80017ce:	2110      	movs	r1, #16
 80017d0:	430a      	orrs	r2, r1
 80017d2:	61da      	str	r2, [r3, #28]
				// Reinitialize the I2C peripheral
				i2c1MasterInit();
 80017d4:	f7ff ff0e 	bl	80015f4 <i2c1MasterInit>
				// Restart the transmission process
				dataIndex = 0;
 80017d8:	2317      	movs	r3, #23
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
				I2C1->CR2 = (slaveAddr << 1) | (length << 16) | I2C_CR2_AUTOEND;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	005a      	lsls	r2, r3, #1
 80017e8:	230e      	movs	r3, #14
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	4313      	orrs	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0492      	lsls	r2, r2, #18
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]
				SET_BIT(I2C1->CR2, I2C_CR2_START);
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0189      	lsls	r1, r1, #6
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	e010      	b.n	8001830 <i2c1MasterTransmit+0x188>
			} else {
				I2C1->CR2 |= I2C_CR2_STOP;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	01c9      	lsls	r1, r1, #7
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
				SET_BIT(I2C1->ICR, I2C_ICR_NACKCF);
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001822:	2110      	movs	r1, #16
 8001824:	430a      	orrs	r2, r1
 8001826:	61da      	str	r2, [r3, #28]
				i2c1MasterInit();
 8001828:	f7ff fee4 	bl	80015f4 <i2c1MasterInit>
				return false;
 800182c:	2300      	movs	r3, #0
 800182e:	e01f      	b.n	8001870 <i2c1MasterTransmit+0x1c8>
	while (dataIndex < length) {
 8001830:	2317      	movs	r3, #23
 8001832:	18fa      	adds	r2, r7, r3
 8001834:	230e      	movs	r3, #14
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d200      	bcs.n	8001842 <i2c1MasterTransmit+0x19a>
 8001840:	e77c      	b.n	800173c <i2c1MasterTransmit+0x94>
			}
		}
	}

	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8001842:	e009      	b.n	8001858 <i2c1MasterTransmit+0x1b0>
		if (HAL_GetTick() - tickStart > timeout) {
 8001844:	f001 fea0 	bl	8003588 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d201      	bcs.n	8001858 <i2c1MasterTransmit+0x1b0>
			return false;
 8001854:	2300      	movs	r3, #0
 8001856:	e00b      	b.n	8001870 <i2c1MasterTransmit+0x1c8>
	while (!READ_BIT(I2C1->ISR, I2C_ISR_STOPF)) {
 8001858:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2220      	movs	r2, #32
 800185e:	4013      	ands	r3, r2
 8001860:	d0f0      	beq.n	8001844 <i2c1MasterTransmit+0x19c>
		}
	}

	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 8001862:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <i2c1MasterTransmit+0x1d0>)
 8001868:	2120      	movs	r1, #32
 800186a:	430a      	orrs	r2, r1
 800186c:	61da      	str	r2, [r3, #28]

	return true;
 800186e:	2301      	movs	r3, #1
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b006      	add	sp, #24
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40005400 	.word	0x40005400

0800187c <i2c1MasterReceive>:

bool i2c1MasterReceive(uint8_t slave_addr, uint8_t *data, uint8_t len,
		uint32_t timeout) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	0011      	movs	r1, r2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	1c02      	adds	r2, r0, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	230e      	movs	r3, #14
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	1c0a      	adds	r2, r1, #0
 8001896:	701a      	strb	r2, [r3, #0]
	uint32_t tick_start = HAL_GetTick();
 8001898:	f001 fe76 	bl	8003588 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]
	uint8_t index = 0;
 80018a0:	2317      	movs	r3, #23
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]

// Make sure the peripheral is enabled
	if (!(I2C1->CR1 & I2C_CR1_PE)) {
 80018a8:	4b32      	ldr	r3, [pc, #200]	@ (8001974 <i2c1MasterReceive+0xf8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d101      	bne.n	80018b6 <i2c1MasterReceive+0x3a>
		return false;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e059      	b.n	800196a <i2c1MasterReceive+0xee>
	}

// Set slave address, read transfer, and set number of bytes
	I2C1->CR2 = (slave_addr << 1) | I2C_CR2_RD_WRN | (len << 16)
 80018b6:	230f      	movs	r3, #15
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	005a      	lsls	r2, r3, #1
 80018be:	230e      	movs	r3, #14
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <i2c1MasterReceive+0xf8>)
			| I2C_CR2_AUTOEND;
 80018ca:	492b      	ldr	r1, [pc, #172]	@ (8001978 <i2c1MasterReceive+0xfc>)
 80018cc:	430a      	orrs	r2, r1
	I2C1->CR2 = (slave_addr << 1) | I2C_CR2_RD_WRN | (len << 16)
 80018ce:	605a      	str	r2, [r3, #4]

// Send START condition
	SET_BIT(I2C1->CR2, I2C_CR2_START);
 80018d0:	4b28      	ldr	r3, [pc, #160]	@ (8001974 <i2c1MasterReceive+0xf8>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <i2c1MasterReceive+0xf8>)
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	0189      	lsls	r1, r1, #6
 80018da:	430a      	orrs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

	while (index < len) {
 80018de:	e02f      	b.n	8001940 <i2c1MasterReceive+0xc4>
		// Check for timeout
		if (HAL_GetTick() - tick_start > timeout) {
 80018e0:	f001 fe52 	bl	8003588 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d210      	bcs.n	8001912 <i2c1MasterReceive+0x96>
			if (I2C1->ISR & I2C_ISR_BUSY) {
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <i2c1MasterReceive+0xf8>)
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4013      	ands	r3, r2
 80018fa:	d008      	beq.n	800190e <i2c1MasterReceive+0x92>
				// Generate the stop condition
				I2C1->CR2 |= I2C_CR2_STOP;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <i2c1MasterReceive+0xf8>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <i2c1MasterReceive+0xf8>)
 8001902:	2180      	movs	r1, #128	@ 0x80
 8001904:	01c9      	lsls	r1, r1, #7
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
				i2c1MasterInit();
 800190a:	f7ff fe73 	bl	80015f4 <i2c1MasterInit>
			}
			return false;
 800190e:	2300      	movs	r3, #0
 8001910:	e02b      	b.n	800196a <i2c1MasterReceive+0xee>
		}

		// Check if RXNE flag is set (receive data register not empty)
		if (READ_BIT(I2C1->ISR, I2C_ISR_RXNE)) {
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <i2c1MasterReceive+0xf8>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	2017      	movs	r0, #23
 800191c:	183a      	adds	r2, r7, r0
 800191e:	1839      	adds	r1, r7, r0
 8001920:	7809      	ldrb	r1, [r1, #0]
 8001922:	7011      	strb	r1, [r2, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <i2c1MasterReceive+0xc4>
			// Read data from RXDR
			data[index++] = (uint8_t) (I2C1->RXDR & 0xFF);
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <i2c1MasterReceive+0xf8>)
 800192a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800192c:	183b      	adds	r3, r7, r0
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	183a      	adds	r2, r7, r0
 8001932:	1c58      	adds	r0, r3, #1
 8001934:	7010      	strb	r0, [r2, #0]
 8001936:	001a      	movs	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	189b      	adds	r3, r3, r2
 800193c:	b2ca      	uxtb	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
	while (index < len) {
 8001940:	2317      	movs	r3, #23
 8001942:	18fa      	adds	r2, r7, r3
 8001944:	230e      	movs	r3, #14
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d3c7      	bcc.n	80018e0 <i2c1MasterReceive+0x64>
		}
	}

	while (!(READ_BIT(I2C1->ISR, I2C_ISR_STOPF))) {
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <i2c1MasterReceive+0xf8>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2220      	movs	r2, #32
 8001958:	4013      	ands	r3, r2
 800195a:	d0fa      	beq.n	8001952 <i2c1MasterReceive+0xd6>
	}
	SET_BIT(I2C1->ICR, I2C_ICR_STOPCF);
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <i2c1MasterReceive+0xf8>)
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <i2c1MasterReceive+0xf8>)
 8001962:	2120      	movs	r1, #32
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]

	return true;
 8001968:	2301      	movs	r3, #1
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	40005400 	.word	0x40005400
 8001978:	02000400 	.word	0x02000400

0800197c <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

LED_t * ledInit() {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	LED_t *led;
	led = malloc(sizeof(LED_t));
 8001982:	2004      	movs	r0, #4
 8001984:	f003 ff40 	bl	8005808 <malloc>
 8001988:	0003      	movs	r3, r0
 800198a:	607b      	str	r3, [r7, #4]
	/*CURRENT NORMAL LED PA4 (A)*/
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE4_0);
 800198c:	23a0      	movs	r3, #160	@ 0xa0
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	23a0      	movs	r3, #160	@ 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	2180      	movs	r1, #128	@ 0x80
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE4_1);
 800199e:	23a0      	movs	r3, #160	@ 0xa0
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	23a0      	movs	r3, #160	@ 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	4905      	ldr	r1, [pc, #20]	@ (80019c0 <ledInit+0x44>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
	led_reset(led);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f838 	bl	8001a26 <led_reset>

	return led;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fffffdff 	.word	0xfffffdff

080019c4 <blinkKALed>:
void led_off(void) {

}

void blinkKALed(LED_t *l) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - l->kaCounter > LED_KA_STATE_TIMEOUT)
 80019cc:	f001 fddc 	bl	8003588 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	23fa      	movs	r3, #250	@ 0xfa
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d905      	bls.n	80019ec <blinkKALed+0x28>
		l->kaCounter = HAL_GetTick();
 80019e0:	f001 fdd2 	bl	8003588 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
			SYS_RP_LED_OFF();
		else
			SYS_RP_LED_ON();
	}
}
 80019ea:	e018      	b.n	8001a1e <blinkKALed+0x5a>
		if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
 80019ec:	f001 fdcc 	bl	8003588 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b32      	cmp	r3, #50	@ 0x32
 80019fa:	d908      	bls.n	8001a0e <blinkKALed+0x4a>
			SYS_RP_LED_OFF();
 80019fc:	23a0      	movs	r3, #160	@ 0xa0
 80019fe:	05db      	lsls	r3, r3, #23
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	23a0      	movs	r3, #160	@ 0xa0
 8001a04:	05db      	lsls	r3, r3, #23
 8001a06:	2110      	movs	r1, #16
 8001a08:	438a      	bics	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
}
 8001a0c:	e007      	b.n	8001a1e <blinkKALed+0x5a>
			SYS_RP_LED_ON();
 8001a0e:	23a0      	movs	r3, #160	@ 0xa0
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	23a0      	movs	r3, #160	@ 0xa0
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	2110      	movs	r1, #16
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <led_reset>:

void led_reset(LED_t *l) {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
//	l->chCounter = 0;
//	l->clCounter = 0;
//	l->cnCounter = 0;
	l->kaCounter = HAL_GetTick();
 8001a2e:	f001 fdab 	bl	8003588 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]
//	l->sysrpCounter = 0;
//	l->thCounter = 0;
//	l->tokCounter = 0;
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f001 fd24 	bl	8003490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f8c0 	bl	8001bcc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	MX_GPIO_Init();
 8001a4c:	f000 f9a8 	bl	8001da0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001a50:	f000 f968 	bl	8001d24 <MX_SPI1_Init>
//	MX_USART1_UART_Init();
	MX_I2C1_Init();
 8001a54:	f000 f906 	bl	8001c64 <MX_I2C1_Init>
#ifdef IWDG_ENABLE
	MX_IWDG_Init();
 8001a58:	f000 f944 	bl	8001ce4 <MX_IWDG_Init>
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	rdss_slave = malloc(sizeof(RDSS_SLAVE_t*));
 8001a5c:	2004      	movs	r0, #4
 8001a5e:	f003 fed3 	bl	8005808 <malloc>
 8001a62:	0003      	movs	r3, r0
 8001a64:	001a      	movs	r2, r3
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <main+0x15c>)
 8001a68:	601a      	str	r2, [r3, #0]
	if (rdss_slave == NULL)
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <main+0x15c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <main+0x36>
		Error_Handler();
 8001a72:	f000 fa77 	bl	8001f64 <Error_Handler>

	u1 = uart1Init(HS16_CLK, BAUD_RATE);
 8001a76:	23e1      	movs	r3, #225	@ 0xe1
 8001a78:	025b      	lsls	r3, r3, #9
 8001a7a:	4a49      	ldr	r2, [pc, #292]	@ (8001ba0 <main+0x160>)
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	0010      	movs	r0, r2
 8001a80:	f001 fc1c 	bl	80032bc <uart1Init>
 8001a84:	0002      	movs	r2, r0
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <main+0x164>)
 8001a88:	601a      	str	r2, [r3, #0]
	if (u1 == NULL)
 8001a8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ba4 <main+0x164>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <main+0x56>
		Error_Handler();
 8001a92:	f000 fa67 	bl	8001f64 <Error_Handler>
//	I2C_t i;
//	rdss_slave->i2c =&i;
	rdss_slave->i2c = malloc(sizeof(I2C_t*));
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <main+0x15c>)
 8001a98:	681c      	ldr	r4, [r3, #0]
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	f003 feb4 	bl	8005808 <malloc>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	6063      	str	r3, [r4, #4]
	if (rdss_slave->i2c == NULL)
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <main+0x15c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <main+0x72>
		Error_Handler();
 8001aae:	f000 fa59 	bl	8001f64 <Error_Handler>

	i2c1MasterInit();
 8001ab2:	f7ff fd9f 	bl	80015f4 <i2c1MasterInit>
	rdss_slave->i2c->reg = I2C1;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <main+0x15c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba8 <main+0x168>)
 8001abe:	60da      	str	r2, [r3, #12]
	rdss_slave->i2c->handler = &hi2c1;
 8001ac0:	4b36      	ldr	r3, [pc, #216]	@ (8001b9c <main+0x15c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a39      	ldr	r2, [pc, #228]	@ (8001bac <main+0x16c>)
 8001ac8:	611a      	str	r2, [r3, #16]

	u1->isDebugModeEnabled = false;
 8001aca:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <main+0x164>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2221      	movs	r2, #33	@ 0x21
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]
	vlad = vladInit(0);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 fa4b 	bl	8001f70 <vladInit>
 8001ada:	0002      	movs	r2, r0
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <main+0x170>)
 8001ade:	601a      	str	r2, [r3, #0]
	rdss = rdssInit(vlad->id);
 8001ae0:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <main+0x170>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	7e9b      	ldrb	r3, [r3, #26]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 ff7e 	bl	80029e8 <rdssInit>
 8001aec:	0002      	movs	r2, r0
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <main+0x174>)
 8001af0:	601a      	str	r2, [r3, #0]
	rdss_slave->id = vlad->id;
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <main+0x170>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <main+0x15c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	7e92      	ldrb	r2, [r2, #26]
 8001afc:	701a      	strb	r2, [r3, #0]
	loRa = loRaInit(&hspi1, SLAVE_RECEIVER);
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <main+0x178>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff fbf8 	bl	80012f8 <loRaInit>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <main+0x17c>)
 8001b0c:	601a      	str	r2, [r3, #0]
	led = ledInit();
 8001b0e:	f7ff ff35 	bl	800197c <ledInit>
 8001b12:	0002      	movs	r2, r0
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <main+0x180>)
 8001b16:	601a      	str	r2, [r3, #0]

#ifdef IWDG_ENABLE
	HAL_IWDG_Refresh(&hiwdg);
 8001b18:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc4 <main+0x184>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f002 f944 	bl	8003da8 <HAL_IWDG_Refresh>
#endif
	rdss->lastUpdateTicks = HAL_GetTick();
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <main+0x174>)
 8001b22:	681c      	ldr	r4, [r3, #0]
 8001b24:	f001 fd30 	bl	8003588 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	6363      	str	r3, [r4, #52]	@ 0x34
	rdss_slave->queryTicks = HAL_GetTick();
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <main+0x15c>)
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	f001 fd2a 	bl	8003588 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	62e3      	str	r3, [r4, #44]	@ 0x2c
	rdss_slave->i2c->ticks = HAL_GetTick();
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <main+0x15c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685c      	ldr	r4, [r3, #4]
 8001b3e:	f001 fd23 	bl	8003588 <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	6063      	str	r3, [r4, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		updateStatus(rdss, 3000);
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <main+0x174>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <main+0x188>)
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f001 f9c3 	bl	8002eda <updateStatus>
		processUart1Rx(u1, rdss, loRa, vlad);
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <main+0x164>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <main+0x174>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <main+0x17c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <main+0x170>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f000 fd54 	bl	8002610 <processUart1Rx>
		configureLoRaRx(loRa, SLAVE_RECEIVER);
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <main+0x17c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fc2e 	bl	80013d0 <configureLoRaRx>
		readWhenDataArrive(loRa, rdss, vlad);
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <main+0x17c>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <main+0x174>)
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <main+0x170>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	001a      	movs	r2, r3
 8001b82:	f000 fec5 	bl	8002910 <readWhenDataArrive>
		blinkKALed(led);
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <main+0x180>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff ff1a 	bl	80019c4 <blinkKALed>
#ifdef IWDG_ENABLE
		HAL_IWDG_Refresh(&hiwdg);
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <main+0x184>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f002 f908 	bl	8003da8 <HAL_IWDG_Refresh>
		updateStatus(rdss, 3000);
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	e7d4      	b.n	8001b46 <main+0x106>
 8001b9c:	20000154 	.word	0x20000154
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	20000140 	.word	0x20000140
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	20000078 	.word	0x20000078
 8001bb0:	20000150 	.word	0x20000150
 8001bb4:	20000148 	.word	0x20000148
 8001bb8:	200000dc 	.word	0x200000dc
 8001bbc:	2000014c 	.word	0x2000014c
 8001bc0:	20000144 	.word	0x20000144
 8001bc4:	200000cc 	.word	0x200000cc
 8001bc8:	00000bb8 	.word	0x00000bb8

08001bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b093      	sub	sp, #76	@ 0x4c
 8001bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd2:	2414      	movs	r4, #20
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2334      	movs	r3, #52	@ 0x34
 8001bda:	001a      	movs	r2, r3
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f003 fed9 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	0018      	movs	r0, r3
 8001be6:	2310      	movs	r3, #16
 8001be8:	001a      	movs	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f003 fed2 	bl	8005994 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f002 f8e7 	bl	8003dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001c08:	0021      	movs	r1, r4
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2240      	movs	r2, #64	@ 0x40
 8001c14:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2201      	movs	r2, #1
 8001c1a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	0018      	movs	r0, r3
 8001c26:	f002 f90f 	bl	8003e48 <HAL_RCC_OscConfig>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c2e:	f000 f999 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f002 fc0a 	bl	8004468 <HAL_RCC_ClockConfig>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c58:	f000 f984 	bl	8001f64 <Error_Handler>
  }
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b013      	add	sp, #76	@ 0x4c
 8001c62:	bd90      	pop	{r4, r7, pc}

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <MX_I2C1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <MX_I2C1_Init+0x7c>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f001 fef1 	bl	8003a88 <HAL_I2C_Init>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001caa:	f000 f95b 	bl	8001f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f001 ff8e 	bl	8003bd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cbc:	f000 f952 	bl	8001f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f001 ffd1 	bl	8003c6c <HAL_I2CEx_ConfigDigitalFilter>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f000 f949 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000078 	.word	0x20000078
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	00303d5b 	.word	0x00303d5b

08001ce4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cea:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <MX_IWDG_Init+0x38>)
 8001cec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cf0:	2206      	movs	r2, #6
 8001cf2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <MX_IWDG_Init+0x3c>)
 8001cf8:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1000;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cfc:	22fa      	movs	r2, #250	@ 0xfa
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f001 fffd 	bl	8003d04 <HAL_IWDG_Init>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_IWDG_Init+0x2e>
  {
    Error_Handler();
 8001d0e:	f000 f929 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200000cc 	.word	0x200000cc
 8001d1c:	40003000 	.word	0x40003000
 8001d20:	00000fff 	.word	0x00000fff

08001d24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <MX_SPI1_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d30:	2282      	movs	r2, #130	@ 0x82
 8001d32:	0052      	lsls	r2, r2, #1
 8001d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d3e:	22e0      	movs	r2, #224	@ 0xe0
 8001d40:	00d2      	lsls	r2, r2, #3
 8001d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d52:	2280      	movs	r2, #128	@ 0x80
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d5a:	2218      	movs	r2, #24
 8001d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d7e:	2208      	movs	r2, #8
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <MX_SPI1_Init+0x74>)
 8001d84:	0018      	movs	r0, r3
 8001d86:	f002 fe1f 	bl	80049c8 <HAL_SPI_Init>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d8e:	f000 f8e9 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200000dc 	.word	0x200000dc
 8001d9c:	40013000 	.word	0x40013000

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	240c      	movs	r4, #12
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	0018      	movs	r0, r3
 8001dac:	2314      	movs	r3, #20
 8001dae:	001a      	movs	r2, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	f003 fdef 	bl	8005994 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b42      	ldr	r3, [pc, #264]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dba:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dda:	4b39      	ldr	r3, [pc, #228]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dea:	4b35      	ldr	r3, [pc, #212]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001dec:	2104      	movs	r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df2:	4b33      	ldr	r3, [pc, #204]	@ (8001ec0 <MX_GPIO_Init+0x120>)
 8001df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, KA_LED_Pin|LORA_TX_OK_Pin|LORA_RX_OK_Pin|DIO1_Pin, GPIO_PIN_RESET);
 8001dfe:	23b8      	movs	r3, #184	@ 0xb8
 8001e00:	0059      	lsls	r1, r3, #1
 8001e02:	23a0      	movs	r3, #160	@ 0xa0
 8001e04:	05db      	lsls	r3, r3, #23
 8001e06:	2200      	movs	r2, #0
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f001 fe20 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <MX_GPIO_Init+0x124>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	2103      	movs	r1, #3
 8001e14:	0018      	movs	r0, r3
 8001e16:	f001 fe1a 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin, GPIO_PIN_RESET);
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <MX_GPIO_Init+0x128>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2140      	movs	r1, #64	@ 0x40
 8001e20:	0018      	movs	r0, r3
 8001e22:	f001 fe14 	bl	8003a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KA_LED_Pin LORA_TX_OK_Pin LORA_RX_OK_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = KA_LED_Pin|LORA_TX_OK_Pin|LORA_RX_OK_Pin|DIO1_Pin;
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	22b8      	movs	r2, #184	@ 0xb8
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	2201      	movs	r2, #1
 8001e32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	193b      	adds	r3, r7, r4
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	193a      	adds	r2, r7, r4
 8001e42:	23a0      	movs	r3, #160	@ 0xa0
 8001e44:	05db      	lsls	r3, r3, #23
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f001 fc7f 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin;
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	2203      	movs	r2, #3
 8001e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	2201      	movs	r2, #1
 8001e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	193b      	adds	r3, r7, r4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	193b      	adds	r3, r7, r4
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <MX_GPIO_Init+0x124>)
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	f001 fc6d 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO3_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin;
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	2204      	movs	r2, #4
 8001e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO3_GPIO_Port, &GPIO_InitStruct);
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <MX_GPIO_Init+0x124>)
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f001 fc5e 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSSY_Pin;
 8001e90:	0021      	movs	r1, r4
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2240      	movs	r2, #64	@ 0x40
 8001e96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LORA_BUSSY_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	4a06      	ldr	r2, [pc, #24]	@ (8001ec8 <MX_GPIO_Init+0x128>)
 8001eae:	0019      	movs	r1, r3
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	f001 fc4b 	bl	800374c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b009      	add	sp, #36	@ 0x24
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	50000400 	.word	0x50000400
 8001ec8:	50000800 	.word	0x50000800

08001ecc <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */

void USART1_IRQHandler(void) {
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	if (u1->rxSize >= RX_BUFFLEN) {
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
 8001ed6:	2b13      	cmp	r3, #19
 8001ed8:	d90f      	bls.n	8001efa <USART1_IRQHandler+0x2e>
		memset(u1->rxData, 0, RX_BUFFLEN);
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2214      	movs	r2, #20
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f003 fd56 	bl	8005994 <memset>
		u1->rxSize = 0;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	765a      	strb	r2, [r3, #25]
		u1->isReceivedDataReady = false;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	5499      	strb	r1, [r3, r2]
	}

	u1->rxData[u1->rxSize++] = readRxReg();
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001efc:	681c      	ldr	r4, [r3, #0]
 8001efe:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	7e5a      	ldrb	r2, [r3, #25]
 8001f04:	1c51      	adds	r1, r2, #1
 8001f06:	b2c9      	uxtb	r1, r1
 8001f08:	7659      	strb	r1, [r3, #25]
 8001f0a:	0015      	movs	r5, r2
 8001f0c:	f001 fa60 	bl	80033d0 <readRxReg>
 8001f10:	0003      	movs	r3, r0
 8001f12:	5563      	strb	r3, [r4, r5]
	if (u1->rxData[u1->rxSize - 1] == LTEL_END_MARK)
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	7e5b      	ldrb	r3, [r3, #25]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f24:	d104      	bne.n	8001f30 <USART1_IRQHandler+0x64>
		u1->isReceivedDataReady = true;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	5499      	strb	r1, [r3, r2]
	if (u1->rxData[0] != LTEL_START_MARK) {
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f38:	d00f      	beq.n	8001f5a <USART1_IRQHandler+0x8e>
		memset(u1->rxData, 0, RX_BUFFLEN);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2214      	movs	r2, #20
 8001f40:	2100      	movs	r1, #0
 8001f42:	0018      	movs	r0, r3
 8001f44:	f003 fd26 	bl	8005994 <memset>
		u1->rxSize = 0;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	765a      	strb	r2, [r3, #25]
		u1->isReceivedDataReady = false;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <USART1_IRQHandler+0x94>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	2100      	movs	r1, #0
 8001f58:	5499      	strb	r1, [r3, r2]
	}
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f60:	20000140 	.word	0x20000140

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	e7fd      	b.n	8001f6c <Error_Handler+0x8>

08001f70 <vladInit>:
 */

#include <module.h>


Vlad_t* vladInit(uint8_t id) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	0002      	movs	r2, r0
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	701a      	strb	r2, [r3, #0]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 8001f7c:	2024      	movs	r0, #36	@ 0x24
 8001f7e:	f003 fc43 	bl	8005808 <malloc>
 8001f82:	0003      	movs	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]

	vlad->tone_level = 0;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
	vlad->v_5v_real = 0;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
	vlad->inputVoltageReal = 0;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
	vlad->currentReal = 0;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	829a      	strh	r2, [r3, #20]
	vlad->ucTemperature = 0;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	721a      	strb	r2, [r3, #8]
	vlad->baseCurrentReal = 0;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	805a      	strh	r2, [r3, #2]
	vlad->remoteAttenuation = 0;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	759a      	strb	r2, [r3, #22]
	vlad->v_5v_real = 0;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
	vlad->inputVoltageReal = 0;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
	vlad->currentReal = 0;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	829a      	strh	r2, [r3, #20]
	vlad->agc152m_real = 0;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	711a      	strb	r2, [r3, #4]
	vlad->agc172m_real = 0;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	715a      	strb	r2, [r3, #5]
	vlad->level152m_real = 0;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	719a      	strb	r2, [r3, #6]
	vlad->level172m_real = 0;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	71da      	strb	r2, [r3, #7]
	vlad->baseCurrentReal = 0;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	805a      	strh	r2, [r3, #2]
	vlad->remoteAttenuation = 0;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	759a      	strb	r2, [r3, #22]
	vlad->rotarySwitchAttenuation = 0;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	75da      	strb	r2, [r3, #23]
	vlad->isRemoteAttenuation = false;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	761a      	strb	r2, [r3, #24]
	vlad->is_attenuation_updated = false;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	765a      	strb	r2, [r3, #25]
	vlad->state = 0;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2221      	movs	r2, #33	@ 0x21
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]
	vlad->calc_en = false;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]
	vlad->function = VLADR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2205      	movs	r2, #5
 800200c:	76da      	strb	r2, [r3, #27]
	vlad->id = id;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1dfa      	adds	r2, r7, #7
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	769a      	strb	r2, [r3, #26]
	vlad->lastUpdateTicks = HAL_GetTick();
 8002016:	f001 fab7 	bl	8003588 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	61da      	str	r2, [r3, #28]

	readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	331b      	adds	r3, #27
 8002024:	0019      	movs	r1, r3
 8002026:	2301      	movs	r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff f9fa 	bl	8001424 <readPage>
	readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	331a      	adds	r3, #26
 8002034:	0019      	movs	r1, r3
 8002036:	2301      	movs	r3, #1
 8002038:	2204      	movs	r2, #4
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff f9f2 	bl	8001424 <readPage>
	return vlad;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <executeCommand>:
 */

#include "rdss_slave.h"

uint8_t executeCommand(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Vlad_t *vlad) {
 800204c:	b5b0      	push	{r4, r5, r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	uint8_t attenuationCommand[2];
	const uint8_t i2cSlaveAddress = 0x08;
 8002062:	2316      	movs	r3, #22
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2208      	movs	r2, #8
 8002068:	701a      	strb	r2, [r3, #0]

	if (rdss->buffSize < LTEL_QUERY_LENGTH || rdss->buffSize > LTEL_SET_LENGTH)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	7a1b      	ldrb	r3, [r3, #8]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d903      	bls.n	800207a <executeCommand+0x2e>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	7a1b      	ldrb	r3, [r3, #8]
 8002076:	2b0d      	cmp	r3, #13
 8002078:	d901      	bls.n	800207e <executeCommand+0x32>
		return 0;
 800207a:	2300      	movs	r3, #0
 800207c:	e27a      	b.n	8002574 <executeCommand+0x528>

	index = setRdssStartData(rdss, buffer);
 800207e:	2317      	movs	r3, #23
 8002080:	18fc      	adds	r4, r7, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0011      	movs	r1, r2
 8002088:	0018      	movs	r0, r3
 800208a:	f000 fe5f 	bl	8002d4c <setRdssStartData>
 800208e:	0003      	movs	r3, r0
 8002090:	7023      	strb	r3, [r4, #0]

	switch (rdss->cmd) {
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b25      	cmp	r3, #37	@ 0x25
 8002098:	dc14      	bgt.n	80020c4 <executeCommand+0x78>
 800209a:	2b10      	cmp	r3, #16
 800209c:	da09      	bge.n	80020b2 <executeCommand+0x66>
		vlad->is_attenuation_updated = i2c1MasterTransmit(i2cSlaveAddress,
				attenuationCommand, sizeof(attenuationCommand), 10);
		buffer[index++] = vlad->is_attenuation_updated;
		break;
	default:
		break;
 800209e:	e24c      	b.n	800253a <executeCommand+0x4ee>
	switch (rdss->cmd) {
 80020a0:	3b90      	subs	r3, #144	@ 0x90
 80020a2:	2b25      	cmp	r3, #37	@ 0x25
 80020a4:	d900      	bls.n	80020a8 <executeCommand+0x5c>
 80020a6:	e248      	b.n	800253a <executeCommand+0x4ee>
 80020a8:	009a      	lsls	r2, r3, #2
 80020aa:	4be4      	ldr	r3, [pc, #912]	@ (800243c <executeCommand+0x3f0>)
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	469f      	mov	pc, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	2b15      	cmp	r3, #21
 80020b6:	d900      	bls.n	80020ba <executeCommand+0x6e>
 80020b8:	e23f      	b.n	800253a <executeCommand+0x4ee>
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	4be0      	ldr	r3, [pc, #896]	@ (8002440 <executeCommand+0x3f4>)
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	469f      	mov	pc, r3
 80020c4:	2bb5      	cmp	r3, #181	@ 0xb5
 80020c6:	dd00      	ble.n	80020ca <executeCommand+0x7e>
 80020c8:	e237      	b.n	800253a <executeCommand+0x4ee>
 80020ca:	2b90      	cmp	r3, #144	@ 0x90
 80020cc:	dae8      	bge.n	80020a0 <executeCommand+0x54>
		break;
 80020ce:	e234      	b.n	800253a <executeCommand+0x4ee>
		buffer[index++] = 4;
 80020d0:	2017      	movs	r0, #23
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	183a      	adds	r2, r7, r0
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	7011      	strb	r1, [r2, #0]
 80020dc:	001a      	movs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	2204      	movs	r2, #4
 80020e4:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 80020e6:	0004      	movs	r4, r0
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	18d2      	adds	r2, r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0019      	movs	r1, r3
 80020f6:	0010      	movs	r0, r2
 80020f8:	f000 feae 	bl	8002e58 <freqEncode>
		index += sizeof(loRa->dlFreq);
 80020fc:	0020      	movs	r0, r4
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	183a      	adds	r2, r7, r0
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	3204      	adds	r2, #4
 8002106:	701a      	strb	r2, [r3, #0]
		index++;
 8002108:	183b      	adds	r3, r7, r0
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	183b      	adds	r3, r7, r0
 800210e:	3201      	adds	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
		break;
 8002112:	e213      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 4;
 8002114:	2017      	movs	r0, #23
 8002116:	183b      	adds	r3, r7, r0
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	183a      	adds	r2, r7, r0
 800211c:	1c59      	adds	r1, r3, #1
 800211e:	7011      	strb	r1, [r2, #0]
 8002120:	001a      	movs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	189b      	adds	r3, r3, r2
 8002126:	2204      	movs	r2, #4
 8002128:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 800212a:	0004      	movs	r4, r0
 800212c:	183b      	adds	r3, r7, r0
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	18d2      	adds	r2, r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	0019      	movs	r1, r3
 800213a:	0010      	movs	r0, r2
 800213c:	f000 fe8c 	bl	8002e58 <freqEncode>
		index += sizeof(loRa->upFreq);
 8002140:	0020      	movs	r0, r4
 8002142:	183b      	adds	r3, r7, r0
 8002144:	183a      	adds	r2, r7, r0
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	3204      	adds	r2, #4
 800214a:	701a      	strb	r2, [r3, #0]
		index++;
 800214c:	183b      	adds	r3, r7, r0
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	183b      	adds	r3, r7, r0
 8002152:	3201      	adds	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
		break;
 8002156:	e1f1      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 1;
 8002158:	2017      	movs	r0, #23
 800215a:	183b      	adds	r3, r7, r0
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	183a      	adds	r2, r7, r0
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	7011      	strb	r1, [r2, #0]
 8002164:	001a      	movs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	189b      	adds	r3, r3, r2
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b5a      	ldrb	r2, [r3, #13]
 8002172:	183b      	adds	r3, r7, r0
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	1839      	adds	r1, r7, r0
 8002178:	1c58      	adds	r0, r3, #1
 800217a:	7008      	strb	r0, [r1, #0]
 800217c:	0019      	movs	r1, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	185b      	adds	r3, r3, r1
 8002182:	3a06      	subs	r2, #6
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
		break;
 8002188:	e1d8      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 1;
 800218a:	2017      	movs	r0, #23
 800218c:	183b      	adds	r3, r7, r0
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	183a      	adds	r2, r7, r0
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	7011      	strb	r1, [r2, #0]
 8002196:	001a      	movs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	189b      	adds	r3, r3, r2
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	183a      	adds	r2, r7, r0
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	7011      	strb	r1, [r2, #0]
 80021aa:	001a      	movs	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	7bd2      	ldrb	r2, [r2, #15]
 80021b4:	701a      	strb	r2, [r3, #0]
		break;
 80021b6:	e1c1      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 1;
 80021b8:	2017      	movs	r0, #23
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	183a      	adds	r2, r7, r0
 80021c0:	1c59      	adds	r1, r3, #1
 80021c2:	7011      	strb	r1, [r2, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b9a      	ldrb	r2, [r3, #14]
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	1839      	adds	r1, r7, r0
 80021d8:	1c58      	adds	r0, r3, #1
 80021da:	7008      	strb	r0, [r1, #0]
 80021dc:	0019      	movs	r1, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	185b      	adds	r3, r3, r1
 80021e2:	3201      	adds	r2, #1
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
		break;
 80021e8:	e1a8      	b.n	800253c <executeCommand+0x4f0>
		index = 0;
 80021ea:	2017      	movs	r0, #23
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = LTEL_START_MARK;
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	183a      	adds	r2, r7, r0
 80021f8:	1c59      	adds	r1, r3, #1
 80021fa:	7011      	strb	r1, [r2, #0]
 80021fc:	001a      	movs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	189b      	adds	r3, r3, r2
 8002202:	227e      	movs	r2, #126	@ 0x7e
 8002204:	701a      	strb	r2, [r3, #0]
		buffer[index++] = VLADR;
 8002206:	183b      	adds	r3, r7, r0
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	183a      	adds	r2, r7, r0
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	7011      	strb	r1, [r2, #0]
 8002210:	001a      	movs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	189b      	adds	r3, r3, r2
 8002216:	2205      	movs	r2, #5
 8002218:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 800221a:	183b      	adds	r3, r7, r0
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	183a      	adds	r2, r7, r0
 8002220:	1c59      	adds	r1, r3, #1
 8002222:	7011      	strb	r1, [r2, #0]
 8002224:	001a      	movs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	189b      	adds	r3, r3, r2
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	7c12      	ldrb	r2, [r2, #16]
 800222e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8002230:	183b      	adds	r3, r7, r0
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	183a      	adds	r2, r7, r0
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	7011      	strb	r1, [r2, #0]
 800223a:	001a      	movs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	189b      	adds	r3, r3, r2
 8002240:	2210      	movs	r2, #16
 8002242:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8002244:	183b      	adds	r3, r7, r0
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	183a      	adds	r2, r7, r0
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	7011      	strb	r1, [r2, #0]
 800224e:	001a      	movs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	189b      	adds	r3, r3, r2
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8002258:	183b      	adds	r3, r7, r0
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	183a      	adds	r2, r7, r0
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	7011      	strb	r1, [r2, #0]
 8002262:	001a      	movs	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	189b      	adds	r3, r3, r2
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = VLADR;
 800226c:	183b      	adds	r3, r7, r0
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	183a      	adds	r2, r7, r0
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	7011      	strb	r1, [r2, #0]
 8002276:	001a      	movs	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	189b      	adds	r3, r3, r2
 800227c:	2205      	movs	r2, #5
 800227e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8002280:	183b      	adds	r3, r7, r0
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	183a      	adds	r2, r7, r0
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	7011      	strb	r1, [r2, #0]
 800228a:	001a      	movs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	189b      	adds	r3, r3, r2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	7c12      	ldrb	r2, [r2, #16]
 8002294:	701a      	strb	r2, [r3, #0]
		break;
 8002296:	e151      	b.n	800253c <executeCommand+0x4f0>
		vlad->function = rdss->buff[6];
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	3306      	adds	r3, #6
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	76da      	strb	r2, [r3, #27]
		vlad->id = rdss->buff[7];
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	3307      	adds	r3, #7
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	769a      	strb	r2, [r3, #26]
		rdss->id = vlad->id;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7e9a      	ldrb	r2, [r3, #26]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	741a      	strb	r2, [r3, #16]
		index = setRdssStartData(rdss, buffer);
 80022b8:	2517      	movs	r5, #23
 80022ba:	197c      	adds	r4, r7, r5
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fd42 	bl	8002d4c <setRdssStartData>
 80022c8:	0003      	movs	r3, r0
 80022ca:	7023      	strb	r3, [r4, #0]
		buffer[index++] = VLADR;
 80022cc:	0028      	movs	r0, r5
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	183a      	adds	r2, r7, r0
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	7011      	strb	r1, [r2, #0]
 80022d8:	001a      	movs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	2205      	movs	r2, #5
 80022e0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	183a      	adds	r2, r7, r0
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	7011      	strb	r1, [r2, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	7c12      	ldrb	r2, [r2, #16]
 80022f6:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE0_START_ADDR, (uint8_t*) &(vlad->function), 3, 1);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	331b      	adds	r3, #27
 80022fc:	0019      	movs	r1, r3
 80022fe:	2301      	movs	r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	2000      	movs	r0, #0
 8002304:	f7ff f8e0 	bl	80014c8 <savePage>
		savePage(CAT24C02_PAGE0_START_ADDR, (uint8_t*) &(vlad->id), 4, 1);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	331a      	adds	r3, #26
 800230c:	0019      	movs	r1, r3
 800230e:	2301      	movs	r3, #1
 8002310:	2204      	movs	r2, #4
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff f8d8 	bl	80014c8 <savePage>
		break;
 8002318:	e110      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 4;
 800231a:	2017      	movs	r0, #23
 800231c:	183b      	adds	r3, r7, r0
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	183a      	adds	r2, r7, r0
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	7011      	strb	r1, [r2, #0]
 8002326:	001a      	movs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	189b      	adds	r3, r3, r2
 800232c:	2204      	movs	r2, #4
 800232e:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buff + index);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	0004      	movs	r4, r0
 8002336:	183b      	adds	r3, r7, r0
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	18d3      	adds	r3, r2, r3
 800233c:	0018      	movs	r0, r3
 800233e:	f000 fd59 	bl	8002df4 <freqDecode>
 8002342:	0003      	movs	r3, r0
 8002344:	001a      	movs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 800234a:	193b      	adds	r3, r7, r4
 800234c:	193a      	adds	r2, r7, r4
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	3204      	adds	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->upFreq), 0, 4);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3308      	adds	r3, #8
 8002358:	0019      	movs	r1, r3
 800235a:	2304      	movs	r3, #4
 800235c:	2200      	movs	r2, #0
 800235e:	2010      	movs	r0, #16
 8002360:	f7ff f8b2 	bl	80014c8 <savePage>
		changeMode(loRa, loRa->mode);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2229      	movs	r2, #41	@ 0x29
 8002368:	5c9a      	ldrb	r2, [r3, r2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0011      	movs	r1, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f7fe fd6d 	bl	8000e4e <changeMode>
		writeLoRaParametersReg(loRa);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f7fe fcff 	bl	8000d7a <writeLoRaParametersReg>
		break;
 800237c:	e0de      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 4;
 800237e:	2017      	movs	r0, #23
 8002380:	183b      	adds	r3, r7, r0
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	183a      	adds	r2, r7, r0
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	7011      	strb	r1, [r2, #0]
 800238a:	001a      	movs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	189b      	adds	r3, r3, r2
 8002390:	2204      	movs	r2, #4
 8002392:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buff + index);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	0004      	movs	r4, r0
 800239a:	183b      	adds	r3, r7, r0
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	18d3      	adds	r3, r2, r3
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fd27 	bl	8002df4 <freqDecode>
 80023a6:	0003      	movs	r3, r0
 80023a8:	001a      	movs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	193a      	adds	r2, r7, r4
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	3204      	adds	r2, #4
 80023b6:	701a      	strb	r2, [r3, #0]
		savePage(CAT24C02_PAGE1_START_ADDR, (uint8_t*) &(loRa->dlFreq), 4, 4);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1d19      	adds	r1, r3, #4
 80023bc:	2304      	movs	r3, #4
 80023be:	2204      	movs	r2, #4
 80023c0:	2010      	movs	r0, #16
 80023c2:	f7ff f881 	bl	80014c8 <savePage>
		changeMode(loRa, loRa->mode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2229      	movs	r2, #41	@ 0x29
 80023ca:	5c9a      	ldrb	r2, [r3, r2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7fe fd3c 	bl	8000e4e <changeMode>
		writeLoRaParametersReg(loRa);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fe fcce 	bl	8000d7a <writeLoRaParametersReg>
		break;
 80023de:	e0ad      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 1;
 80023e0:	2017      	movs	r0, #23
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	183a      	adds	r2, r7, r0
 80023e8:	1c59      	adds	r1, r3, #1
 80023ea:	7011      	strb	r1, [r2, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	189b      	adds	r3, r3, r2
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buff[index++] - 1;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	1839      	adds	r1, r7, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	7008      	strb	r0, [r1, #0]
 8002404:	18d3      	adds	r3, r2, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	3b01      	subs	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	739a      	strb	r2, [r3, #14]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->bandwidth), 1, 1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	330e      	adds	r3, #14
 8002414:	0019      	movs	r1, r3
 8002416:	2301      	movs	r3, #1
 8002418:	2201      	movs	r2, #1
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff f854 	bl	80014c8 <savePage>
		changeMode(loRa, loRa->mode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2229      	movs	r2, #41	@ 0x29
 8002424:	5c9a      	ldrb	r2, [r3, r2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0011      	movs	r1, r2
 800242a:	0018      	movs	r0, r3
 800242c:	f7fe fd0f 	bl	8000e4e <changeMode>
		writeLoRaParametersReg(loRa);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f7fe fca1 	bl	8000d7a <writeLoRaParametersReg>
		break;
 8002438:	e080      	b.n	800253c <executeCommand+0x4f0>
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	08005b60 	.word	0x08005b60
 8002440:	08005bf8 	.word	0x08005bf8
		buffer[index++] = 1;
 8002444:	2017      	movs	r0, #23
 8002446:	183b      	adds	r3, r7, r0
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	183a      	adds	r2, r7, r0
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	7011      	strb	r1, [r2, #0]
 8002450:	001a      	movs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	189b      	adds	r3, r3, r2
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
		loRa->spreadFactor = rdss->buff[index++] + 6;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	183b      	adds	r3, r7, r0
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	1839      	adds	r1, r7, r0
 8002464:	1c58      	adds	r0, r3, #1
 8002466:	7008      	strb	r0, [r1, #0]
 8002468:	18d3      	adds	r3, r2, r3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	3306      	adds	r3, #6
 800246e:	b2da      	uxtb	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	735a      	strb	r2, [r3, #13]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->spreadFactor), 0, 1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	330d      	adds	r3, #13
 8002478:	0019      	movs	r1, r3
 800247a:	2301      	movs	r3, #1
 800247c:	2200      	movs	r2, #0
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff f822 	bl	80014c8 <savePage>
		changeMode(loRa, loRa->mode);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2229      	movs	r2, #41	@ 0x29
 8002488:	5c9a      	ldrb	r2, [r3, r2]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0011      	movs	r1, r2
 800248e:	0018      	movs	r0, r3
 8002490:	f7fe fcdd 	bl	8000e4e <changeMode>
		writeLoRaParametersReg(loRa);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f7fe fc6f 	bl	8000d7a <writeLoRaParametersReg>
		break;
 800249c:	e04e      	b.n	800253c <executeCommand+0x4f0>
		buffer[index++] = 1;
 800249e:	2017      	movs	r0, #23
 80024a0:	183b      	adds	r3, r7, r0
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	183a      	adds	r2, r7, r0
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	7011      	strb	r1, [r2, #0]
 80024aa:	001a      	movs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buff[index++];
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	1839      	adds	r1, r7, r0
 80024be:	1c58      	adds	r0, r3, #1
 80024c0:	7008      	strb	r0, [r1, #0]
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	73da      	strb	r2, [r3, #15]
		savePage(CAT24C02_PAGE0_START_ADDR, &(loRa->codingRate), 2, 1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	330f      	adds	r3, #15
 80024ce:	0019      	movs	r1, r3
 80024d0:	2301      	movs	r3, #1
 80024d2:	2202      	movs	r2, #2
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe fff7 	bl	80014c8 <savePage>
		changeMode(loRa, loRa->mode);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2229      	movs	r2, #41	@ 0x29
 80024de:	5c9a      	ldrb	r2, [r3, r2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fcb2 	bl	8000e4e <changeMode>
		writeLoRaParametersReg(loRa);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7fe fc44 	bl	8000d7a <writeLoRaParametersReg>
		break;
 80024f2:	e023      	b.n	800253c <executeCommand+0x4f0>
		attenuationCommand[0] = SET_VLAD_ATTENUATION;
 80024f4:	2114      	movs	r1, #20
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2212      	movs	r2, #18
 80024fa:	701a      	strb	r2, [r3, #0]
		attenuationCommand[1] = rdss->buff[ATTENUATION_VALUE_INDEX];
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	795a      	ldrb	r2, [r3, #5]
 8002502:	187b      	adds	r3, r7, r1
 8002504:	705a      	strb	r2, [r3, #1]
		vlad->is_attenuation_updated = i2c1MasterTransmit(i2cSlaveAddress,
 8002506:	1879      	adds	r1, r7, r1
 8002508:	2316      	movs	r3, #22
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	7818      	ldrb	r0, [r3, #0]
 800250e:	230a      	movs	r3, #10
 8002510:	2202      	movs	r2, #2
 8002512:	f7ff f8c9 	bl	80016a8 <i2c1MasterTransmit>
 8002516:	0003      	movs	r3, r0
 8002518:	001a      	movs	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	765a      	strb	r2, [r3, #25]
		buffer[index++] = vlad->is_attenuation_updated;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7e59      	ldrb	r1, [r3, #25]
 8002522:	2217      	movs	r2, #23
 8002524:	18bb      	adds	r3, r7, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	18ba      	adds	r2, r7, r2
 800252a:	1c58      	adds	r0, r3, #1
 800252c:	7010      	strb	r0, [r2, #0]
 800252e:	001a      	movs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	189b      	adds	r3, r3, r2
 8002534:	000a      	movs	r2, r1
 8002536:	701a      	strb	r2, [r3, #0]
		break;
 8002538:	e000      	b.n	800253c <executeCommand+0x4f0>
		break;
 800253a:	46c0      	nop			@ (mov r8, r8)
	}

	index += setCrc(buffer, index);
 800253c:	2417      	movs	r4, #23
 800253e:	193b      	adds	r3, r7, r4
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0011      	movs	r1, r2
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fbca 	bl	8002ce0 <setCrc>
 800254c:	0003      	movs	r3, r0
 800254e:	0019      	movs	r1, r3
 8002550:	0020      	movs	r0, r4
 8002552:	183b      	adds	r3, r7, r0
 8002554:	183a      	adds	r2, r7, r0
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	188a      	adds	r2, r1, r2
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[index++] = LTEL_END_MARK;
 800255c:	183b      	adds	r3, r7, r0
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	183a      	adds	r2, r7, r0
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	7011      	strb	r1, [r2, #0]
 8002566:	001a      	movs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	189b      	adds	r3, r3, r2
 800256c:	227f      	movs	r2, #127	@ 0x7f
 800256e:	701a      	strb	r2, [r3, #0]
	return (index);
 8002570:	183b      	adds	r3, r7, r0
 8002572:	781b      	ldrb	r3, [r3, #0]

}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b006      	add	sp, #24
 800257a:	bdb0      	pop	{r4, r5, r7, pc}

0800257c <i2cGetVladMeasurements>:
		break;
	}
	cleanTx(u1);
}

uint8_t i2cGetVladMeasurements(uint8_t *buffer, uint8_t querySize) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	000a      	movs	r2, r1
 8002586:	1cfb      	adds	r3, r7, #3
 8002588:	701a      	strb	r2, [r3, #0]
	const uint8_t slaveAddress = 0x08;
 800258a:	200f      	movs	r0, #15
 800258c:	183b      	adds	r3, r7, r0
 800258e:	2208      	movs	r2, #8
 8002590:	701a      	strb	r2, [r3, #0]
	uint8_t vladMeasurementsCmd[2] = { 0x10, 0x00 };
 8002592:	210c      	movs	r1, #12
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2210      	movs	r2, #16
 8002598:	801a      	strh	r2, [r3, #0]

	if (!i2c1MasterTransmit(slaveAddress, vladMeasurementsCmd,
 800259a:	1879      	adds	r1, r7, r1
 800259c:	183b      	adds	r3, r7, r0
 800259e:	7818      	ldrb	r0, [r3, #0]
 80025a0:	230a      	movs	r3, #10
 80025a2:	2202      	movs	r2, #2
 80025a4:	f7ff f880 	bl	80016a8 <i2c1MasterTransmit>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	4053      	eors	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <i2cGetVladMeasurements+0x4e>
			sizeof(vladMeasurementsCmd), 10)) {
		memset(buffer, 0, querySize);
 80025b6:	1cfb      	adds	r3, r7, #3
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2100      	movs	r1, #0
 80025be:	0018      	movs	r0, r3
 80025c0:	f003 f9e8 	bl	8005994 <memset>
		return querySize;
 80025c4:	1cfb      	adds	r3, r7, #3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e01e      	b.n	8002608 <i2cGetVladMeasurements+0x8c>
	}
	HAL_Delay(6);
 80025ca:	2006      	movs	r0, #6
 80025cc:	f000 ffe6 	bl	800359c <HAL_Delay>
	if (!i2c1MasterReceive(slaveAddress, buffer, querySize, 10)) {
 80025d0:	1cfb      	adds	r3, r7, #3
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	7818      	ldrb	r0, [r3, #0]
 80025dc:	230a      	movs	r3, #10
 80025de:	f7ff f94d 	bl	800187c <i2c1MasterReceive>
 80025e2:	0003      	movs	r3, r0
 80025e4:	001a      	movs	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	4053      	eors	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <i2cGetVladMeasurements+0x88>
		memset(buffer, 0, querySize);
 80025f0:	1cfb      	adds	r3, r7, #3
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f003 f9cb 	bl	8005994 <memset>
		return querySize;
 80025fe:	1cfb      	adds	r3, r7, #3
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	e001      	b.n	8002608 <i2cGetVladMeasurements+0x8c>
	}

	return querySize;
 8002604:	1cfb      	adds	r3, r7, #3
 8002606:	781b      	ldrb	r3, [r3, #0]
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b004      	add	sp, #16
 800260e:	bd80      	pop	{r7, pc}

08002610 <processUart1Rx>:

void processUart1Rx(UART1_t *u1, RDSS_t *rdss, SX1278_t *loRa, Vlad_t *vlad) {
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
	if (u1->isReceivedDataReady == false)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	2201      	movs	r2, #1
 8002626:	4053      	eors	r3, r2
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d160      	bne.n	80026f0 <processUart1Rx+0xe0>
		return;
	u1->isReceivedDataReady = false;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]
	HAL_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 ffb0 	bl	800359c <HAL_Delay>
	if (validate(u1->rxData, u1->rxSize) != DATA_OK) {
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	7e5b      	ldrb	r3, [r3, #25]
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f000 fafb 	bl	8002c40 <validate>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d009      	beq.n	8002662 <processUart1Rx+0x52>
		// Clear UART buffer and length
		memset(u1->rxData, 0, sizeof(u1->rxData));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2214      	movs	r2, #20
 8002652:	2100      	movs	r1, #0
 8002654:	0018      	movs	r0, r3
 8002656:	f003 f99d 	bl	8005994 <memset>
		u1->rxSize = 0;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	765a      	strb	r2, [r3, #25]
		return;
 8002660:	e047      	b.n	80026f2 <processUart1Rx+0xe2>
	}
	updateRdss(rdss, u1->rxData, u1->rxSize);
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	7e5a      	ldrb	r2, [r3, #25]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fc10 	bl	8002e90 <updateRdss>
	u1->txData = malloc(sizeof(uint8_t) * 25);
 8002670:	2019      	movs	r0, #25
 8002672:	f003 f8c9 	bl	8005808 <malloc>
 8002676:	0003      	movs	r3, r0
 8002678:	001a      	movs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	615a      	str	r2, [r3, #20]
	u1->txSize = executeCommand(u1->txData, rdss, loRa, vlad);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6958      	ldr	r0, [r3, #20]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	f7ff fce0 	bl	800204c <executeCommand>
 800268c:	0003      	movs	r3, r0
 800268e:	001a      	movs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	761a      	strb	r2, [r3, #24]
	for (uint8_t i = 0; i < u1->txSize; i++)
 8002694:	2317      	movs	r3, #23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e00e      	b.n	80026bc <processUart1Rx+0xac>
		writeTxReg(u1->txData[i]);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	2417      	movs	r4, #23
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	18d3      	adds	r3, r2, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fe61 	bl	8003374 <writeTxReg>
	for (uint8_t i = 0; i < u1->txSize; i++)
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	3201      	adds	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	7e1b      	ldrb	r3, [r3, #24]
 80026c0:	2217      	movs	r2, #23
 80026c2:	18ba      	adds	r2, r7, r2
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d3e9      	bcc.n	800269e <processUart1Rx+0x8e>
	free(u1->txData);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f003 f8a4 	bl	800581c <free>
	memset(u1->rxData, 0, sizeof(u1->rxData));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2214      	movs	r2, #20
 80026d8:	2100      	movs	r1, #0
 80026da:	0018      	movs	r0, r3
 80026dc:	f003 f95a 	bl	8005994 <memset>
	u1->rxSize = 0;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	765a      	strb	r2, [r3, #25]
	reinit(rdss);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 faeb 	bl	8002cc4 <reinit>
 80026ee:	e000      	b.n	80026f2 <processUart1Rx+0xe2>
		return;
 80026f0:	46c0      	nop			@ (mov r8, r8)
}
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b007      	add	sp, #28
 80026f6:	bd90      	pop	{r4, r7, pc}

080026f8 <processCommand>:

void processCommand(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	loRa->txData = malloc(sizeof(uint8_t) * 25);
 8002704:	2019      	movs	r0, #25
 8002706:	f003 f87f 	bl	8005808 <malloc>
 800270a:	0003      	movs	r3, r0
 800270c:	001a      	movs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	635a      	str	r2, [r3, #52]	@ 0x34
	loRa->txSize = executeCommand(loRa->txData, rdss, loRa, vlad);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	f7ff fc96 	bl	800204c <executeCommand>
 8002720:	0003      	movs	r3, r0
 8002722:	0019      	movs	r1, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2238      	movs	r2, #56	@ 0x38
 8002728:	5499      	strb	r1, [r3, r2]
	changeMode(loRa, SLAVE_SENDER); // Change LoRa operating mode to SLAVE_SENDER
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2100      	movs	r1, #0
 800272e:	0018      	movs	r0, r3
 8002730:	f7fe fb8d 	bl	8000e4e <changeMode>
	transmit(loRa); // Transmit data using LoRa
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0018      	movs	r0, r3
 8002738:	f7fe fd56 	bl	80011e8 <transmit>
	changeMode(loRa, SLAVE_RECEIVER); // Change LoRa operating mode to SLAVE_RECEIVER
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2101      	movs	r1, #1
 8002740:	0018      	movs	r0, r3
 8002742:	f7fe fb84 	bl	8000e4e <changeMode>
	free(loRa->txData);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274a:	0018      	movs	r0, r3
 800274c:	f003 f866 	bl	800581c <free>
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <i2cSetQueryRdssBuffer>:
	index += encodeVladToRdss(rdss->queryBuffer + index, vlad);
	index += setCrc(rdss->queryBuffer, index);
	rdss->queryBuffer[index++] = LTEL_END_MARK;
}

void i2cSetQueryRdssBuffer(RDSS_t *rdss) {
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8002760:	240f      	movs	r4, #15
 8002762:	193b      	adds	r3, r7, r4
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
	const uint8_t querySize = 25;
 8002768:	250e      	movs	r5, #14
 800276a:	197b      	adds	r3, r7, r5
 800276c:	2219      	movs	r2, #25
 800276e:	701a      	strb	r2, [r3, #0]
	memset(rdss->queryBuffer, 0, QUERY_STATUS_BUFFER_SIZE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3312      	adds	r3, #18
 8002774:	2222      	movs	r2, #34	@ 0x22
 8002776:	2100      	movs	r1, #0
 8002778:	0018      	movs	r0, r3
 800277a:	f003 f90b 	bl	8005994 <memset>
	rdss->queryBuffer[index++] = LTEL_START_MARK;
 800277e:	0020      	movs	r0, r4
 8002780:	183b      	adds	r3, r7, r0
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	183a      	adds	r2, r7, r0
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	7011      	strb	r1, [r2, #0]
 800278a:	001a      	movs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	189b      	adds	r3, r3, r2
 8002790:	227e      	movs	r2, #126	@ 0x7e
 8002792:	749a      	strb	r2, [r3, #18]
	rdss->queryBuffer[index++] = VLADR;
 8002794:	183b      	adds	r3, r7, r0
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	183a      	adds	r2, r7, r0
 800279a:	1c59      	adds	r1, r3, #1
 800279c:	7011      	strb	r1, [r2, #0]
 800279e:	001a      	movs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	2205      	movs	r2, #5
 80027a6:	749a      	strb	r2, [r3, #18]
	rdss->queryBuffer[index++] = rdss->id;
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	183a      	adds	r2, r7, r0
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	7011      	strb	r1, [r2, #0]
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7c1a      	ldrb	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	185b      	adds	r3, r3, r1
 80027bc:	749a      	strb	r2, [r3, #18]
	rdss->queryBuffer[index++] = QUERY_STATUS;
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	183a      	adds	r2, r7, r0
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	7011      	strb	r1, [r2, #0]
 80027c8:	001a      	movs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	2211      	movs	r2, #17
 80027d0:	749a      	strb	r2, [r3, #18]
	rdss->queryBuffer[index++] = 0x00;
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	183a      	adds	r2, r7, r0
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	7011      	strb	r1, [r2, #0]
 80027dc:	001a      	movs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	189b      	adds	r3, r3, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	749a      	strb	r2, [r3, #18]
	rdss->queryBuffer[index++] = querySize;
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	183a      	adds	r2, r7, r0
 80027ec:	1c59      	adds	r1, r3, #1
 80027ee:	7011      	strb	r1, [r2, #0]
 80027f0:	001a      	movs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	189b      	adds	r3, r3, r2
 80027f6:	197a      	adds	r2, r7, r5
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	749a      	strb	r2, [r3, #18]
	index += i2cGetVladMeasurements(rdss->queryBuffer + index, querySize);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3312      	adds	r3, #18
 8002800:	001a      	movs	r2, r3
 8002802:	0004      	movs	r4, r0
 8002804:	183b      	adds	r3, r7, r0
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	18d2      	adds	r2, r2, r3
 800280a:	197b      	adds	r3, r7, r5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	0010      	movs	r0, r2
 8002812:	f7ff feb3 	bl	800257c <i2cGetVladMeasurements>
 8002816:	0003      	movs	r3, r0
 8002818:	0019      	movs	r1, r3
 800281a:	193b      	adds	r3, r7, r4
 800281c:	193a      	adds	r2, r7, r4
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	188a      	adds	r2, r1, r2
 8002822:	701a      	strb	r2, [r3, #0]
	index += setCrc(rdss->queryBuffer, index);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3312      	adds	r3, #18
 8002828:	001a      	movs	r2, r3
 800282a:	193b      	adds	r3, r7, r4
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	0019      	movs	r1, r3
 8002830:	0010      	movs	r0, r2
 8002832:	f000 fa55 	bl	8002ce0 <setCrc>
 8002836:	0003      	movs	r3, r0
 8002838:	0019      	movs	r1, r3
 800283a:	193b      	adds	r3, r7, r4
 800283c:	193a      	adds	r2, r7, r4
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	188a      	adds	r2, r1, r2
 8002842:	701a      	strb	r2, [r3, #0]
	rdss->queryBuffer[index++] = LTEL_END_MARK;
 8002844:	193b      	adds	r3, r7, r4
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	193a      	adds	r2, r7, r4
 800284a:	1c59      	adds	r1, r3, #1
 800284c:	7011      	strb	r1, [r2, #0]
 800284e:	001a      	movs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	189b      	adds	r3, r3, r2
 8002854:	227f      	movs	r2, #127	@ 0x7f
 8002856:	749a      	strb	r2, [r3, #18]
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bdb0      	pop	{r4, r5, r7, pc}

08002860 <transmitStatus>:

void transmitStatus(SX1278_t *loRa, RDSS_t *rdss) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	loRa->txData = rdss->queryBuffer;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3312      	adds	r3, #18
 800286e:	001a      	movs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34
	loRa->txSize = QUERY_STATUS_BUFFER_SIZE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2238      	movs	r2, #56	@ 0x38
 8002878:	2122      	movs	r1, #34	@ 0x22
 800287a:	5499      	strb	r1, [r3, r2]
	changeMode(loRa, SLAVE_SENDER); // Change LoRa operating mode to SLAVE_SENDER
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2100      	movs	r1, #0
 8002880:	0018      	movs	r0, r3
 8002882:	f7fe fae4 	bl	8000e4e <changeMode>
	transmit(loRa); // Transmit data using LoRa
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f7fe fcad 	bl	80011e8 <transmit>
	if (loRa->status == TX_DONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	222a      	movs	r2, #42	@ 0x2a
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d106      	bne.n	80028a6 <transmitStatus+0x46>
		HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 8002898:	23a0      	movs	r3, #160	@ 0xa0
 800289a:	05db      	lsls	r3, r3, #23
 800289c:	2201      	movs	r2, #1
 800289e:	2120      	movs	r1, #32
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 f8d4 	bl	8003a4e <HAL_GPIO_WritePin>
	changeMode(loRa, SLAVE_RECEIVER); // Change LoRa operating mode to SLAVE_RECEIVER
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2101      	movs	r1, #1
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fe facf 	bl	8000e4e <changeMode>
	HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_RESET);
 80028b0:	23a0      	movs	r3, #160	@ 0xa0
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	2200      	movs	r2, #0
 80028b6:	2120      	movs	r1, #32
 80028b8:	0018      	movs	r0, r3
 80028ba:	f001 f8c8 	bl	8003a4e <HAL_GPIO_WritePin>
}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <slaveProcessRdss>:

void slaveProcessRdss(RDSS_t *rdss, SX1278_t *loRa, Vlad_t *vlad) {
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
	if (rdss->idReceived != rdss->id) {
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	7bda      	ldrb	r2, [r3, #15]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	7c1b      	ldrb	r3, [r3, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d003      	beq.n	80028e6 <slaveProcessRdss+0x20>
		rdss->status = WRONG_MODULE_ID;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2205      	movs	r2, #5
 80028e2:	745a      	strb	r2, [r3, #17]
		return;
 80028e4:	e010      	b.n	8002908 <slaveProcessRdss+0x42>
	}
	if (rdss->cmd == QUERY_STATUS)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b11      	cmp	r3, #17
 80028ec:	d106      	bne.n	80028fc <slaveProcessRdss+0x36>
		transmitStatus(loRa, rdss);
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff ffb3 	bl	8002860 <transmitStatus>
 80028fa:	e005      	b.n	8002908 <slaveProcessRdss+0x42>
	else
		processCommand(loRa, rdss, vlad);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	0018      	movs	r0, r3
 8002904:	f7ff fef8 	bl	80026f8 <processCommand>
}
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <readWhenDataArrive>:

void readWhenDataArrive(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)
 800291c:	4b31      	ldr	r3, [pc, #196]	@ (80029e4 <readWhenDataArrive+0xd4>)
 800291e:	2140      	movs	r1, #64	@ 0x40
 8002920:	0018      	movs	r0, r3
 8002922:	f001 f877 	bl	8003a14 <HAL_GPIO_ReadPin>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d057      	beq.n	80029da <readWhenDataArrive+0xca>
			== GPIO_PIN_RESET)
		return; // if (crcErrorActivation(loRa) != 1)

	clearIrqFlagsReg(loRa);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0018      	movs	r0, r3
 800292e:	f7fe fa11 	bl	8000d54 <clearIrqFlagsReg>
	loRa->rxData = getRxFifoData(loRa);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0018      	movs	r0, r3
 8002936:	f7fe fbb1 	bl	800109c <getRxFifoData>
 800293a:	0002      	movs	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (loRa->rxSize <= 0) {
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2230      	movs	r2, #48	@ 0x30
 8002944:	5c9b      	ldrb	r3, [r3, r2]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <readWhenDataArrive+0x4c>
		changeMode(loRa, loRa->mode);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2229      	movs	r2, #41	@ 0x29
 800294e:	5c9a      	ldrb	r2, [r3, r2]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe fa7a 	bl	8000e4e <changeMode>
		return;
 800295a:	e03f      	b.n	80029dc <readWhenDataArrive+0xcc>

	}
	if (validate(loRa->rxData, loRa->rxSize) != DATA_OK) {
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2130      	movs	r1, #48	@ 0x30
 8002964:	5c5b      	ldrb	r3, [r3, r1]
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f000 f969 	bl	8002c40 <validate>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d008      	beq.n	8002984 <readWhenDataArrive+0x74>
		changeMode(loRa, loRa->mode);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2229      	movs	r2, #41	@ 0x29
 8002976:	5c9a      	ldrb	r2, [r3, r2]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f7fe fa66 	bl	8000e4e <changeMode>
		return;
 8002982:	e02b      	b.n	80029dc <readWhenDataArrive+0xcc>
	}
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 8002984:	23a0      	movs	r3, #160	@ 0xa0
 8002986:	05db      	lsls	r3, r3, #23
 8002988:	2201      	movs	r2, #1
 800298a:	2140      	movs	r1, #64	@ 0x40
 800298c:	0018      	movs	r0, r3
 800298e:	f001 f85e 	bl	8003a4e <HAL_GPIO_WritePin>
	updateRdss(rdss, loRa->rxData, loRa->rxSize);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2230      	movs	r2, #48	@ 0x30
 800299a:	5c9a      	ldrb	r2, [r3, r2]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fa76 	bl	8002e90 <updateRdss>
	slaveProcessRdss(rdss, loRa, vlad);
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff ff8b 	bl	80028c6 <slaveProcessRdss>
	rdssReinit(rdss);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f846 	bl	8002a44 <rdssReinit>
	free(loRa->rxData);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 ff2d 	bl	800581c <free>
	loRa->rxSize = 0;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2230      	movs	r2, #48	@ 0x30
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_RESET);
 80029ca:	23a0      	movs	r3, #160	@ 0xa0
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	2200      	movs	r2, #0
 80029d0:	2140      	movs	r1, #64	@ 0x40
 80029d2:	0018      	movs	r0, r3
 80029d4:	f001 f83b 	bl	8003a4e <HAL_GPIO_WritePin>
 80029d8:	e000      	b.n	80029dc <readWhenDataArrive+0xcc>
		return; // if (crcErrorActivation(loRa) != 1)
 80029da:	46c0      	nop			@ (mov r8, r8)
}
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	50000800 	.word	0x50000800

080029e8 <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include "rs485.h"

RDSS_t* rdssInit(uint8_t id) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	0002      	movs	r2, r0
 80029f0:	1dfb      	adds	r3, r7, #7
 80029f2:	701a      	strb	r2, [r3, #0]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 80029f4:	2038      	movs	r0, #56	@ 0x38
 80029f6:	f002 ff07 	bl	8005808 <malloc>
 80029fa:	0003      	movs	r3, r0
 80029fc:	60fb      	str	r3, [r7, #12]
	r->len = 0;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	705a      	strb	r2, [r3, #1]
	r->status = WAITING;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2208      	movs	r2, #8
 8002a08:	745a      	strb	r2, [r3, #17]
	r->cmd = NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
	r->id = id;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1dfa      	adds	r2, r7, #7
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	741a      	strb	r2, [r3, #16]
//	memset(r->buffer, 0, RDSS_BUFFER_SIZE);
	/* PB9 DE485 as output  */
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <rdssInit+0x54>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <rdssInit+0x54>)
 8002a1e:	2180      	movs	r1, #128	@ 0x80
 8002a20:	02c9      	lsls	r1, r1, #11
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
 8002a26:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <rdssInit+0x54>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <rdssInit+0x54>)
 8002a2c:	4904      	ldr	r1, [pc, #16]	@ (8002a40 <rdssInit+0x58>)
 8002a2e:	400a      	ands	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
	return r;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	50000400 	.word	0x50000400
 8002a40:	fff7ffff 	.word	0xfff7ffff

08002a44 <rdssReinit>:
 * Reinitializes the RDSS_t structure.
 * This function resets all the fields of the RDSS_t structure to their initial values.
 *
 * @param rdss Pointer to the RDSS_t structure to be reinitialized.
 */
void rdssReinit(RDSS_t *rdss) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
    rdss->cmd = NONE;           // Reset the command field
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    rdss->crcReceived = 0;      // Reset the received CRC value
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	819a      	strh	r2, [r3, #12]
    rdss->crcCalculated = 0;    // Reset the calculated CRC value
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	815a      	strh	r2, [r3, #10]
    rdss->idQuery = 0;          // Reset the query ID
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	739a      	strb	r2, [r3, #14]
    rdss->status = WAITING;     // Set the status to waiting
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2208      	movs	r2, #8
 8002a68:	745a      	strb	r2, [r3, #17]
    rdss->idReceived = 0;       // Reset the received ID
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	73da      	strb	r2, [r3, #15]
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <checkModuleValidity>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t checkModuleValidity(uint8_t *frame, uint8_t lenght) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	000a      	movs	r2, r1
 8002a82:	1cfb      	adds	r3, r7, #3
 8002a84:	701a      	strb	r2, [r3, #0]
	if (frame[1] == VLADR) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d113      	bne.n	8002ab8 <checkModuleValidity+0x40>
		for (int i = 3; i < lenght; i++)
 8002a90:	2303      	movs	r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e00a      	b.n	8002aac <checkModuleValidity+0x34>
			if (frame[i] == LTEL_END_MARK)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	18d3      	adds	r3, r2, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aa0:	d101      	bne.n	8002aa6 <checkModuleValidity+0x2e>
				return (VALID_MODULE);
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	e00b      	b.n	8002abe <checkModuleValidity+0x46>
		for (int i = 3; i < lenght; i++)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	1cfb      	adds	r3, r7, #3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbef      	blt.n	8002a96 <checkModuleValidity+0x1e>
 8002ab6:	e001      	b.n	8002abc <checkModuleValidity+0x44>
	} else
		return (WRONG_MODULE_FUNCTION);
 8002ab8:	2304      	movs	r3, #4
 8002aba:	e000      	b.n	8002abe <checkModuleValidity+0x46>
	return (WRONG_MODULE_FUNCTION);
 8002abc:	2304      	movs	r3, #4
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <checkFrameValidity>:

RDSS_status_t checkFrameValidity(uint8_t *frame, uint8_t lenght) {
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	000a      	movs	r2, r1
 8002ad0:	1cfb      	adds	r3, r7, #3
 8002ad2:	701a      	strb	r2, [r3, #0]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002ad4:	1cfb      	adds	r3, r7, #3
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d911      	bls.n	8002b00 <checkFrameValidity+0x3a>
		if (frame[0] == LTEL_START_MARK) {
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ae2:	d10b      	bne.n	8002afc <checkFrameValidity+0x36>
			if (frame[lenght - 1] == LTEL_END_MARK)
 8002ae4:	1cfb      	adds	r3, r7, #3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002af2:	d101      	bne.n	8002af8 <checkFrameValidity+0x32>
				return (VALID_FRAME);
 8002af4:	2302      	movs	r3, #2
 8002af6:	e004      	b.n	8002b02 <checkFrameValidity+0x3c>
			else
				return (START_READING);
 8002af8:	2301      	movs	r3, #1
 8002afa:	e002      	b.n	8002b02 <checkFrameValidity+0x3c>
		} else
			return (NOT_VALID_FRAME);
 8002afc:	2303      	movs	r3, #3
 8002afe:	e000      	b.n	8002b02 <checkFrameValidity+0x3c>
	} else

		return (WAITING);
 8002b00:	2308      	movs	r3, #8
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b002      	add	sp, #8
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <checkCRCValidity>:

RDSS_status_t checkCRCValidity(uint8_t *frame, uint8_t len) {
 8002b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	000a      	movs	r2, r1
 8002b14:	1cfb      	adds	r3, r7, #3
 8002b16:	701a      	strb	r2, [r3, #0]
	uint16_t calculatedCrc;
	uint16_t savedCrc;
	savedCrc = ((uint16_t) frame[len - 2] << 8);
 8002b18:	1cfb      	adds	r3, r7, #3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	3b02      	subs	r3, #2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	001a      	movs	r2, r3
 8002b26:	250e      	movs	r5, #14
 8002b28:	197b      	adds	r3, r7, r5
 8002b2a:	0212      	lsls	r2, r2, #8
 8002b2c:	801a      	strh	r2, [r3, #0]
	savedCrc |= (uint16_t) frame[len - 3];
 8002b2e:	1cfb      	adds	r3, r7, #3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	3b03      	subs	r3, #3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	197b      	adds	r3, r7, r5
 8002b3e:	197a      	adds	r2, r7, r5
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	801a      	strh	r2, [r3, #0]
	calculatedCrc = crc_get(&frame[1], len - 4);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	1cfb      	adds	r3, r7, #3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	260c      	movs	r6, #12
 8002b54:	19bc      	adds	r4, r7, r6
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f000 f80f 	bl	8002b7c <crc_get>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	8023      	strh	r3, [r4, #0]
	return ((calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR);
 8002b62:	19ba      	adds	r2, r7, r6
 8002b64:	197b      	adds	r3, r7, r5
 8002b66:	8812      	ldrh	r2, [r2, #0]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d101      	bne.n	8002b72 <checkCRCValidity+0x68>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <checkCRCValidity+0x6a>
 8002b72:	2306      	movs	r3, #6
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b005      	add	sp, #20
 8002b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b7c <crc_get>:

uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	000a      	movs	r2, r1
 8002b86:	1cfb      	adds	r3, r7, #3
 8002b88:	701a      	strb	r2, [r3, #0]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <crc_get+0xc0>)
 8002b90:	801a      	strh	r2, [r3, #0]
	uint16_t crc = 0;            // 16-bit CRC value
 8002b92:	230c      	movs	r3, #12
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]


	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e03c      	b.n	8002c1e <crc_get+0xa2>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	b299      	uxth	r1, r3
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	18bb      	adds	r3, r7, r2
 8002bb8:	18ba      	adds	r2, r7, r2
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	404a      	eors	r2, r1
 8002bbe:	801a      	strh	r2, [r3, #0]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002bc0:	230e      	movs	r3, #14
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e01e      	b.n	8002c08 <crc_get+0x8c>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8002bca:	210c      	movs	r1, #12
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2200      	movs	r2, #0
 8002bd0:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0c      	bge.n	8002bf0 <crc_get+0x74>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	230a      	movs	r3, #10
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2000      	movs	r0, #0
 8002be4:	5e1b      	ldrsh	r3, [r3, r0]
 8002be6:	4053      	eors	r3, r2
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	e005      	b.n	8002bfc <crc_get+0x80>
			} else {
				crc <<= 1;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	18fa      	adds	r2, r7, r3
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	18db      	adds	r3, r3, r3
 8002bfa:	8013      	strh	r3, [r2, #0]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002bfc:	210e      	movs	r1, #14
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	3201      	adds	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	230e      	movs	r3, #14
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b07      	cmp	r3, #7
 8002c10:	d9db      	bls.n	8002bca <crc_get+0x4e>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002c12:	210f      	movs	r1, #15
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	3201      	adds	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	230f      	movs	r3, #15
 8002c20:	18fa      	adds	r2, r7, r3
 8002c22:	1cfb      	adds	r3, r7, #3
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3bb      	bcc.n	8002ba4 <crc_get+0x28>
			}
		}
	}

	return crc;
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	881b      	ldrh	r3, [r3, #0]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			@ (mov r8, r8)
 8002c3c:	00001021 	.word	0x00001021

08002c40 <validate>:

RDSS_status_t validate(uint8_t *buffer,uint8_t length) {
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	000a      	movs	r2, r1
 8002c4a:	1cfb      	adds	r3, r7, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
	RDSS_status_t frameStatus = checkFrameValidity(buffer, length);
 8002c4e:	250f      	movs	r5, #15
 8002c50:	197c      	adds	r4, r7, r5
 8002c52:	1cfb      	adds	r3, r7, #3
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff ff33 	bl	8002ac6 <checkFrameValidity>
 8002c60:	0003      	movs	r3, r0
 8002c62:	7023      	strb	r3, [r4, #0]
	if (frameStatus != VALID_FRAME)
 8002c64:	197b      	adds	r3, r7, r5
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d002      	beq.n	8002c72 <validate+0x32>
		return (frameStatus);
 8002c6c:	197b      	adds	r3, r7, r5
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	e024      	b.n	8002cbc <validate+0x7c>
	RDSS_status_t moduleStatus = checkModuleValidity(buffer, length);
 8002c72:	250e      	movs	r5, #14
 8002c74:	197c      	adds	r4, r7, r5
 8002c76:	1cfb      	adds	r3, r7, #3
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0011      	movs	r1, r2
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff fefa 	bl	8002a78 <checkModuleValidity>
 8002c84:	0003      	movs	r3, r0
 8002c86:	7023      	strb	r3, [r4, #0]
	if (moduleStatus != VALID_MODULE)
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d002      	beq.n	8002c96 <validate+0x56>
		return (moduleStatus);
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	e012      	b.n	8002cbc <validate+0x7c>
	RDSS_status_t crcStatus = checkCRCValidity(buffer, length);
 8002c96:	250d      	movs	r5, #13
 8002c98:	197c      	adds	r4, r7, r5
 8002c9a:	1cfb      	adds	r3, r7, #3
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff ff31 	bl	8002b0a <checkCRCValidity>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	7023      	strb	r3, [r4, #0]
	if (crcStatus != DATA_OK)
 8002cac:	197b      	adds	r3, r7, r5
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <validate+0x7a>
		return (crcStatus);
 8002cb4:	197b      	adds	r3, r7, r5
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	e000      	b.n	8002cbc <validate+0x7c>
	return (DATA_OK);
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bdb0      	pop	{r4, r5, r7, pc}

08002cc4 <reinit>:

void reinit(RDSS_t *rs485) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	rs485->cmd = NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
	rs485->status = WAITING;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	745a      	strb	r2, [r3, #17]
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t* buff,uint8_t size){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	000a      	movs	r2, r1
 8002cea:	1cfb      	adds	r3, r7, #3
 8002cec:	701a      	strb	r2, [r3, #0]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff+1, size-1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	1cfb      	adds	r3, r7, #3
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	f7ff ff3d 	bl	8002b7c <crc_get>
 8002d02:	0003      	movs	r3, r0
 8002d04:	001a      	movs	r2, r3
 8002d06:	210a      	movs	r1, #10
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	801a      	strh	r2, [r3, #0]
	memcpy(crc_frame, &crc, 2);
 8002d0c:	200c      	movs	r0, #12
 8002d0e:	183b      	adds	r3, r7, r0
 8002d10:	187a      	adds	r2, r7, r1
 8002d12:	8812      	ldrh	r2, [r2, #0]
 8002d14:	801a      	strh	r2, [r3, #0]
	buff[size++] = crc_frame[0];
 8002d16:	1cfb      	adds	r3, r7, #3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	1cfa      	adds	r2, r7, #3
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	7011      	strb	r1, [r2, #0]
 8002d20:	001a      	movs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	183a      	adds	r2, r7, r0
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 8002d2c:	1cfb      	adds	r3, r7, #3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	1cfa      	adds	r2, r7, #3
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	7011      	strb	r1, [r2, #0]
 8002d36:	001a      	movs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	183a      	adds	r2, r7, r0
 8002d3e:	7852      	ldrb	r2, [r2, #1]
 8002d40:	701a      	strb	r2, [r3, #0]
	return 2;
 8002d42:	2302      	movs	r3, #2
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8002d56:	210f      	movs	r1, #15
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
	if (rdss->cmd == 0)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <setRdssStartData+0x20>
		return i;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	e03e      	b.n	8002dea <setRdssStartData+0x9e>
	if (rdss->id == 0)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7c1b      	ldrb	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <setRdssStartData+0x30>
		return i;
 8002d74:	230f      	movs	r3, #15
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	e036      	b.n	8002dea <setRdssStartData+0x9e>
	buffer[i++] = LTEL_START_MARK;
 8002d7c:	200f      	movs	r0, #15
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	183a      	adds	r2, r7, r0
 8002d84:	1c59      	adds	r1, r3, #1
 8002d86:	7011      	strb	r1, [r2, #0]
 8002d88:	001a      	movs	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	189b      	adds	r3, r3, r2
 8002d8e:	227e      	movs	r2, #126	@ 0x7e
 8002d90:	701a      	strb	r2, [r3, #0]
	buffer[i++] = VLADR;
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	183a      	adds	r2, r7, r0
 8002d98:	1c59      	adds	r1, r3, #1
 8002d9a:	7011      	strb	r1, [r2, #0]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	2205      	movs	r2, #5
 8002da4:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	183a      	adds	r2, r7, r0
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	7011      	strb	r1, [r2, #0]
 8002db0:	001a      	movs	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	189b      	adds	r3, r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7c12      	ldrb	r2, [r2, #16]
 8002dba:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	183a      	adds	r2, r7, r0
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	7011      	strb	r1, [r2, #0]
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8002dd2:	183b      	adds	r3, r7, r0
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	183a      	adds	r2, r7, r0
 8002dd8:	1c59      	adds	r1, r3, #1
 8002dda:	7011      	strb	r1, [r2, #0]
 8002ddc:	001a      	movs	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
	return i;
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	781b      	ldrb	r3, [r3, #0]
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <freqDecode>:

int freqDecode(uint8_t *buffer) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4907      	ldr	r1, [pc, #28]	@ (8002e54 <freqDecode+0x60>)
 8002e38:	1c18      	adds	r0, r3, #0
 8002e3a:	f7fd fbf9 	bl	8000630 <__aeabi_fmul>
 8002e3e:	1c03      	adds	r3, r0, #0
 8002e40:	60fb      	str	r3, [r7, #12]

	return (int) freq.f;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1c18      	adds	r0, r3, #0
 8002e46:	f7fd fd31 	bl	80008ac <__aeabi_f2iz>
 8002e4a:	0003      	movs	r3, r0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	49742400 	.word	0x49742400

08002e58 <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f7fd fd42 	bl	80008ec <__aeabi_ui2f>
 8002e68:	1c03      	adds	r3, r0, #0
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <freqEncode+0x34>)
 8002e6c:	1c18      	adds	r0, r3, #0
 8002e6e:	f7fd fabf 	bl	80003f0 <__aeabi_fdiv>
 8002e72:	1c03      	adds	r3, r0, #0
 8002e74:	60fb      	str	r3, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 8002e76:	230c      	movs	r3, #12
 8002e78:	18f9      	adds	r1, r7, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f002 fdce 	bl	8005a20 <memcpy>
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b004      	add	sp, #16
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	49742400 	.word	0x49742400

08002e90 <updateRdss>:

void updateRdss(RDSS_t *rdss, uint8_t *buffer, uint8_t bufferSize) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	701a      	strb	r2, [r3, #0]
	if (buffer == NULL)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d014      	beq.n	8002ece <updateRdss+0x3e>
		return;
	if (bufferSize <= 0)
 8002ea4:	1dfb      	adds	r3, r7, #7
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <updateRdss+0x42>
		return;
	rdss->cmd = buffer[CMD_INDEX]; // Update the command from the received data
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3303      	adds	r3, #3
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	701a      	strb	r2, [r3, #0]
	rdss->idReceived = buffer[MODULE_ID_INDEX]; // Update the received ID
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	789a      	ldrb	r2, [r3, #2]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	73da      	strb	r2, [r3, #15]
	rdss->buffSize = bufferSize;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1dfa      	adds	r2, r7, #7
 8002ec2:	7812      	ldrb	r2, [r2, #0]
 8002ec4:	721a      	strb	r2, [r3, #8]
	rdss->buff = buffer;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e002      	b.n	8002ed4 <updateRdss+0x44>
		return;
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	e000      	b.n	8002ed4 <updateRdss+0x44>
		return;
 8002ed2:	46c0      	nop			@ (mov r8, r8)
}
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <updateStatus>:

void updateStatus(RDSS_t *rdss, uint32_t timeout) {
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
	if (HAL_GetTick() - rdss->lastUpdateTicks > timeout) {
 8002ee4:	f000 fb50 	bl	8003588 <HAL_GetTick>
 8002ee8:	0002      	movs	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <updateStatus+0x2e>
		i2cSetQueryRdssBuffer(rdss);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fc2d 	bl	8002758 <i2cSetQueryRdssBuffer>
		rdss->lastUpdateTicks = HAL_GetTick();
 8002efe:	f000 fb43 	bl	8003588 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f34:	2180      	movs	r1, #128	@ 0x80
 8002f36:	0549      	lsls	r1, r1, #21
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	055b      	lsls	r3, r3, #21
 8002f44:	4013      	ands	r3, r2
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40021000 	.word	0x40021000

08002f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b091      	sub	sp, #68	@ 0x44
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	232c      	movs	r3, #44	@ 0x2c
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	0018      	movs	r0, r3
 8002f66:	2314      	movs	r3, #20
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f002 fd12 	bl	8005994 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f70:	2414      	movs	r4, #20
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	0018      	movs	r0, r3
 8002f76:	2318      	movs	r3, #24
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f002 fd0a 	bl	8005994 <memset>
  if(hi2c->Instance==I2C1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <HAL_I2C_MspInit+0xb8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d13d      	bne.n	8003006 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 fbef 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002fa2:	f7fe ffdf 	bl	8001f64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002faa:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002fac:	2102      	movs	r1, #2
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fb2:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fbe:	212c      	movs	r1, #44	@ 0x2c
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	22c0      	movs	r2, #192	@ 0xc0
 8002fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2212      	movs	r2, #18
 8002fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2206      	movs	r2, #6
 8002fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8003018 <HAL_I2C_MspInit+0xc0>)
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	0010      	movs	r0, r2
 8002fe6:	f000 fbb1 	bl	800374c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002ff0:	2180      	movs	r1, #128	@ 0x80
 8002ff2:	0389      	lsls	r1, r1, #14
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_I2C_MspInit+0xbc>)
 8002ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	039b      	lsls	r3, r3, #14
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b011      	add	sp, #68	@ 0x44
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	40005400 	.word	0x40005400
 8003014:	40021000 	.word	0x40021000
 8003018:	50000400 	.word	0x50000400

0800301c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b08b      	sub	sp, #44	@ 0x2c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	2414      	movs	r4, #20
 8003026:	193b      	adds	r3, r7, r4
 8003028:	0018      	movs	r0, r3
 800302a:	2314      	movs	r3, #20
 800302c:	001a      	movs	r2, r3
 800302e:	2100      	movs	r1, #0
 8003030:	f002 fcb0 	bl	8005994 <memset>
  if(hspi->Instance==SPI1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <HAL_SPI_MspInit+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d152      	bne.n	80030e4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003042:	4b2b      	ldr	r3, [pc, #172]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0149      	lsls	r1, r1, #5
 8003048:	430a      	orrs	r2, r1
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
 800304c:	4b28      	ldr	r3, [pc, #160]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 800304e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b25      	ldr	r3, [pc, #148]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 800305c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305e:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003060:	2101      	movs	r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	@ 0x34
 8003066:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003078:	2102      	movs	r1, #2
 800307a:	430a      	orrs	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <HAL_SPI_MspInit+0xd4>)
 8003080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PA12 [PA10]     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	22c0      	movs	r2, #192	@ 0xc0
 800308e:	0152      	lsls	r2, r2, #5
 8003090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	193b      	adds	r3, r7, r4
 8003094:	2202      	movs	r2, #2
 8003096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	193b      	adds	r3, r7, r4
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	193b      	adds	r3, r7, r4
 80030a0:	2200      	movs	r2, #0
 80030a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	193a      	adds	r2, r7, r4
 80030ac:	23a0      	movs	r3, #160	@ 0xa0
 80030ae:	05db      	lsls	r3, r3, #23
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fb4a 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin;
 80030b8:	0021      	movs	r1, r4
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2208      	movs	r2, #8
 80030be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2202      	movs	r2, #2
 80030c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	4a06      	ldr	r2, [pc, #24]	@ (80030f4 <HAL_SPI_MspInit+0xd8>)
 80030dc:	0019      	movs	r1, r3
 80030de:	0010      	movs	r0, r2
 80030e0:	f000 fb34 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b00b      	add	sp, #44	@ 0x2c
 80030ea:	bd90      	pop	{r4, r7, pc}
 80030ec:	40013000 	.word	0x40013000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	50000400 	.word	0x50000400

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	e7fd      	b.n	80030fc <NMI_Handler+0x4>

08003100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003104:	46c0      	nop			@ (mov r8, r8)
 8003106:	e7fd      	b.n	8003104 <HardFault_Handler+0x4>

08003108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003120:	f000 fa20 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f002 fc34 	bl	80059c8 <__errno>
 8003160:	0003      	movs	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	2301      	movs	r3, #1
 8003168:	425b      	negs	r3, r3
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	18d2      	adds	r2, r2, r3
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <_sbrk+0x64>)
 800317c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b006      	add	sp, #24
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20002000 	.word	0x20002000
 800318c:	00000400 	.word	0x00000400
 8003190:	20000158 	.word	0x20000158
 8003194:	200002a8 	.word	0x200002a8

08003198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	0002      	movs	r2, r0
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031b6:	d809      	bhi.n	80031cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	001a      	movs	r2, r3
 80031be:	231f      	movs	r3, #31
 80031c0:	401a      	ands	r2, r3
 80031c2:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <__NVIC_EnableIRQ+0x30>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	4091      	lsls	r1, r2
 80031c8:	000a      	movs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <uart1_gpio_init>:
		return 1;
	}
	return 0;
}

void uart1_gpio_init() {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	/**USART1 GPIO Configuration
	 PA9     ------> USART1_TX
	 PA10    ------> USART1_RX **/

	/* PA10 alternate mode */
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE10_0);
 80031dc:	23a0      	movs	r3, #160	@ 0xa0
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	23a0      	movs	r3, #160	@ 0xa0
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	4930      	ldr	r1, [pc, #192]	@ (80032a8 <uart1_gpio_init+0xd0>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE10_1);
 80031ec:	23a0      	movs	r3, #160	@ 0xa0
 80031ee:	05db      	lsls	r3, r3, #23
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	23a0      	movs	r3, #160	@ 0xa0
 80031f4:	05db      	lsls	r3, r3, #23
 80031f6:	2180      	movs	r1, #128	@ 0x80
 80031f8:	0389      	lsls	r1, r1, #14
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODE9_0);
 80031fe:	23a0      	movs	r3, #160	@ 0xa0
 8003200:	05db      	lsls	r3, r3, #23
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	23a0      	movs	r3, #160	@ 0xa0
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	4928      	ldr	r1, [pc, #160]	@ (80032ac <uart1_gpio_init+0xd4>)
 800320a:	400a      	ands	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODE9_1);
 800320e:	23a0      	movs	r3, #160	@ 0xa0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	23a0      	movs	r3, #160	@ 0xa0
 8003216:	05db      	lsls	r3, r3, #23
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	0309      	lsls	r1, r1, #12
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_0);
 8003220:	23a0      	movs	r3, #160	@ 0xa0
 8003222:	05db      	lsls	r3, r3, #23
 8003224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003226:	23a0      	movs	r3, #160	@ 0xa0
 8003228:	05db      	lsls	r3, r3, #23
 800322a:	2180      	movs	r1, #128	@ 0x80
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_1);
 8003232:	23a0      	movs	r3, #160	@ 0xa0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003238:	23a0      	movs	r3, #160	@ 0xa0
 800323a:	05db      	lsls	r3, r3, #23
 800323c:	491c      	ldr	r1, [pc, #112]	@ (80032b0 <uart1_gpio_init+0xd8>)
 800323e:	400a      	ands	r2, r1
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_2);
 8003242:	23a0      	movs	r3, #160	@ 0xa0
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003248:	23a0      	movs	r3, #160	@ 0xa0
 800324a:	05db      	lsls	r3, r3, #23
 800324c:	4919      	ldr	r1, [pc, #100]	@ (80032b4 <uart1_gpio_init+0xdc>)
 800324e:	400a      	ands	r2, r1
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL10_3);
 8003252:	23a0      	movs	r3, #160	@ 0xa0
 8003254:	05db      	lsls	r3, r3, #23
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003258:	23a0      	movs	r3, #160	@ 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	4916      	ldr	r1, [pc, #88]	@ (80032b8 <uart1_gpio_init+0xe0>)
 800325e:	400a      	ands	r2, r1
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

	SET_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_0);
 8003262:	23a0      	movs	r3, #160	@ 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003268:	23a0      	movs	r3, #160	@ 0xa0
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	2110      	movs	r1, #16
 800326e:	430a      	orrs	r2, r1
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_1);
 8003272:	23a0      	movs	r3, #160	@ 0xa0
 8003274:	05db      	lsls	r3, r3, #23
 8003276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003278:	23a0      	movs	r3, #160	@ 0xa0
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	2120      	movs	r1, #32
 800327e:	438a      	bics	r2, r1
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_2);
 8003282:	23a0      	movs	r3, #160	@ 0xa0
 8003284:	05db      	lsls	r3, r3, #23
 8003286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003288:	23a0      	movs	r3, #160	@ 0xa0
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	2140      	movs	r1, #64	@ 0x40
 800328e:	438a      	bics	r2, r1
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
	CLEAR_BIT(GPIOA->AFR[1], GPIO_AFRH_AFSEL9_3);
 8003292:	23a0      	movs	r3, #160	@ 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003298:	23a0      	movs	r3, #160	@ 0xa0
 800329a:	05db      	lsls	r3, r3, #23
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	438a      	bics	r2, r1
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	ffefffff 	.word	0xffefffff
 80032ac:	fffbffff 	.word	0xfffbffff
 80032b0:	fffffdff 	.word	0xfffffdff
 80032b4:	fffffbff 	.word	0xfffffbff
 80032b8:	fffff7ff 	.word	0xfffff7ff

080032bc <uart1Init>:

UART1_t* uart1Init(uint32_t pclk, uint32_t baud_rate) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
	uint32_t br_value = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
	UART1_t *u1;
	u1 = malloc(sizeof(UART1_t*));
 80032ca:	2004      	movs	r0, #4
 80032cc:	f002 fa9c 	bl	8005808 <malloc>
 80032d0:	0003      	movs	r3, r0
 80032d2:	60bb      	str	r3, [r7, #8]
	if (u1 != NULL) {
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d041      	beq.n	800335e <uart1Init+0xa2>

		memset(u1->rxData, 0, sizeof(u1->rxData));
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2214      	movs	r2, #20
 80032de:	2100      	movs	r1, #0
 80032e0:	0018      	movs	r0, r3
 80032e2:	f002 fb57 	bl	8005994 <memset>
		u1->isReceivedDataReady = false;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2220      	movs	r2, #32
 80032ea:	2100      	movs	r1, #0
 80032ec:	5499      	strb	r1, [r3, r2]

		uart1_gpio_init();
 80032ee:	f7ff ff73 	bl	80031d8 <uart1_gpio_init>

		/*enable clock access to USART1 */
		SET_BIT(RCC->APBENR2, RCC_APBENR2_USART1EN);
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <uart1Init+0xac>)
 80032f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <uart1Init+0xac>)
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	01c9      	lsls	r1, r1, #7
 80032fc:	430a      	orrs	r2, r1
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40
		if (pclk == 16000000) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <uart1Init+0xb0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10b      	bne.n	8003320 <uart1Init+0x64>
			/*set HSI 16 CLK */
			CLEAR_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_0);
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <uart1Init+0xac>)
 800330a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800330c:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <uart1Init+0xac>)
 800330e:	2101      	movs	r1, #1
 8003310:	438a      	bics	r2, r1
 8003312:	655a      	str	r2, [r3, #84]	@ 0x54
			SET_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL_1);
 8003314:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <uart1Init+0xac>)
 8003316:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003318:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <uart1Init+0xac>)
 800331a:	2102      	movs	r1, #2
 800331c:	430a      	orrs	r2, r1
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		//MODIFY_REG(USART1->PRESC,USART_PRESC_PRESCALER,0x0010);
		/* set baud rate */
		br_value = (pclk) / baud_rate;
 8003320:	6839      	ldr	r1, [r7, #0]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fc feec 	bl	8000100 <__udivsi3>
 8003328:	0003      	movs	r3, r0
 800332a:	60fb      	str	r3, [r7, #12]
		USART1->BRR = (uint16_t) br_value;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <uart1Init+0xb4>)
 8003332:	60da      	str	r2, [r3, #12]
		/* transmitter enable*/
		USART1->CR1 = USART_CR1_TE | USART_CR1_RE;
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <uart1Init+0xb4>)
 8003336:	220c      	movs	r2, #12
 8003338:	601a      	str	r2, [r3, #0]
		u1->txSize = 0;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	761a      	strb	r2, [r3, #24]
		//uart1_clean_buffer(u);

		/* enable FIFO */
		//SET_BIT(USART1->CR2, USART_CR1_FIFOEN);
		/* Enable interrupt */
		SET_BIT(USART1->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <uart1Init+0xb4>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <uart1Init+0xb4>)
 8003346:	2120      	movs	r1, #32
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(USART1_IRQn);
 800334c:	201b      	movs	r0, #27
 800334e:	f7ff ff29 	bl	80031a4 <__NVIC_EnableIRQ>
		SET_BIT(USART1->CR1, USART_CR1_UE);
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <uart1Init+0xb4>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <uart1Init+0xb4>)
 8003358:	2101      	movs	r1, #1
 800335a:	430a      	orrs	r2, r1
 800335c:	601a      	str	r2, [r3, #0]

	}
	return (u1);
 800335e:	68bb      	ldr	r3, [r7, #8]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b004      	add	sp, #16
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	00f42400 	.word	0x00f42400
 8003370:	40013800 	.word	0x40013800

08003374 <writeTxReg>:
	/* set the destination buffer */
	/*set the source buffer */

}

void writeTxReg(uint8_t ch) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	0002      	movs	r2, r0
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	701a      	strb	r2, [r3, #0]
	SET_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 8003380:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <writeTxReg+0x50>)
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <writeTxReg+0x50>)
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	0089      	lsls	r1, r1, #2
 800338a:	430a      	orrs	r2, r1
 800338c:	615a      	str	r2, [r3, #20]

	while (!READ_BIT(USART1->ISR, USART_ISR_TXE_TXFNF))
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <writeTxReg+0x54>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2280      	movs	r2, #128	@ 0x80
 8003396:	4013      	ands	r3, r2
 8003398:	d0fa      	beq.n	8003390 <writeTxReg+0x1c>
		;
	USART1->TDR = (uint8_t) (ch & 0xFFU);
 800339a:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <writeTxReg+0x54>)
 800339c:	1dfa      	adds	r2, r7, #7
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	629a      	str	r2, [r3, #40]	@ 0x28

	while (!READ_BIT(USART1->ISR, USART_ISR_TC))
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <writeTxReg+0x54>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2240      	movs	r2, #64	@ 0x40
 80033aa:	4013      	ands	r3, r2
 80033ac:	d0fa      	beq.n	80033a4 <writeTxReg+0x30>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_OD9);
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <writeTxReg+0x50>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <writeTxReg+0x50>)
 80033b4:	4905      	ldr	r1, [pc, #20]	@ (80033cc <writeTxReg+0x58>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	615a      	str	r2, [r3, #20]
}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	50000400 	.word	0x50000400
 80033c8:	40013800 	.word	0x40013800
 80033cc:	fffffdff 	.word	0xfffffdff

080033d0 <readRxReg>:
		}
		data[0] = USART1->RDR;
	}
}

uint8_t readRxReg(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
	volatile uint8_t data;
	bool override = READ_BIT(USART1->ISR, USART_ISR_ORE);
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <readRxReg+0x68>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2208      	movs	r2, #8
 80033dc:	401a      	ands	r2, r3
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	1e51      	subs	r1, r2, #1
 80033e2:	418a      	sbcs	r2, r1
 80033e4:	701a      	strb	r2, [r3, #0]
	bool data_present = READ_BIT(USART1->ISR, USART_ISR_RXNE_RXFNE);
 80033e6:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <readRxReg+0x68>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2220      	movs	r2, #32
 80033ec:	401a      	ands	r2, r3
 80033ee:	1dbb      	adds	r3, r7, #6
 80033f0:	1e51      	subs	r1, r2, #1
 80033f2:	418a      	sbcs	r2, r1
 80033f4:	701a      	strb	r2, [r3, #0]
//	bool busy = READ_BIT(USART1->ISR, USART_ISR_BUSY);
	if ((data_present || override)) {
 80033f6:	1dbb      	adds	r3, r7, #6
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <readRxReg+0x36>
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <readRxReg+0x5c>
		if (override)
 8003406:	1dfb      	adds	r3, r7, #7
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <readRxReg+0x4a>
			SET_BIT(USART1->ICR, USART_ICR_ORECF);
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <readRxReg+0x68>)
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <readRxReg+0x68>)
 8003414:	2108      	movs	r1, #8
 8003416:	430a      	orrs	r2, r1
 8003418:	621a      	str	r2, [r3, #32]
		data = USART1->RDR;
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <readRxReg+0x68>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	b2da      	uxtb	r2, r3
 8003420:	1d7b      	adds	r3, r7, #5
 8003422:	701a      	strb	r2, [r3, #0]
		return data;
 8003424:	1d7b      	adds	r3, r7, #5
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e000      	b.n	800342e <readRxReg+0x5e>
	} else
		return '\0';
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b002      	add	sp, #8
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	40013800 	.word	0x40013800

0800343c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800343c:	480d      	ldr	r0, [pc, #52]	@ (8003474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800343e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003440:	f7ff feaa 	bl	8003198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003444:	480c      	ldr	r0, [pc, #48]	@ (8003478 <LoopForever+0x6>)
  ldr r1, =_edata
 8003446:	490d      	ldr	r1, [pc, #52]	@ (800347c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003448:	4a0d      	ldr	r2, [pc, #52]	@ (8003480 <LoopForever+0xe>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800344c:	e002      	b.n	8003454 <LoopCopyDataInit>

0800344e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003452:	3304      	adds	r3, #4

08003454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003458:	d3f9      	bcc.n	800344e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800345c:	4c0a      	ldr	r4, [pc, #40]	@ (8003488 <LoopForever+0x16>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003460:	e001      	b.n	8003466 <LoopFillZerobss>

08003462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003464:	3204      	adds	r2, #4

08003466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003468:	d3fb      	bcc.n	8003462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800346a:	f002 fab3 	bl	80059d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800346e:	f7fe fae7 	bl	8001a40 <main>

08003472 <LoopForever>:

LoopForever:
  b LoopForever
 8003472:	e7fe      	b.n	8003472 <LoopForever>
  ldr   r0, =_estack
 8003474:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800347c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003480:	08005ca0 	.word	0x08005ca0
  ldr r2, =_sbss
 8003484:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003488:	200002a8 	.word	0x200002a8

0800348c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800348c:	e7fe      	b.n	800348c <ADC1_IRQHandler>
	...

08003490 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003496:	1dfb      	adds	r3, r7, #7
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_Init+0x3c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <HAL_Init+0x3c>)
 80034a2:	2180      	movs	r1, #128	@ 0x80
 80034a4:	0049      	lsls	r1, r1, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034aa:	2003      	movs	r0, #3
 80034ac:	f000 f810 	bl	80034d0 <HAL_InitTick>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d003      	beq.n	80034bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e001      	b.n	80034c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80034bc:	f7ff fd28 	bl	8002f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40022000 	.word	0x40022000

080034d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_InitTick+0x88>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02b      	beq.n	8003540 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80034e8:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <HAL_InitTick+0x8c>)
 80034ea:	681c      	ldr	r4, [r3, #0]
 80034ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003558 <HAL_InitTick+0x88>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	0019      	movs	r1, r3
 80034f2:	23fa      	movs	r3, #250	@ 0xfa
 80034f4:	0098      	lsls	r0, r3, #2
 80034f6:	f7fc fe03 	bl	8000100 <__udivsi3>
 80034fa:	0003      	movs	r3, r0
 80034fc:	0019      	movs	r1, r3
 80034fe:	0020      	movs	r0, r4
 8003500:	f7fc fdfe 	bl	8000100 <__udivsi3>
 8003504:	0003      	movs	r3, r0
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f913 	bl	8003732 <HAL_SYSTICK_Config>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d112      	bne.n	8003536 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d80a      	bhi.n	800352c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	2301      	movs	r3, #1
 800351a:	425b      	negs	r3, r3
 800351c:	2200      	movs	r2, #0
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f8f2 	bl	8003708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003524:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_InitTick+0x90>)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00d      	b.n	8003548 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800352c:	230f      	movs	r3, #15
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e008      	b.n	8003548 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	e003      	b.n	8003548 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003540:	230f      	movs	r3, #15
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b005      	add	sp, #20
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	20000008 	.word	0x20000008
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_IncTick+0x1c>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	001a      	movs	r2, r3
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_IncTick+0x20>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	18d2      	adds	r2, r2, r3
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_IncTick+0x20>)
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	20000008 	.word	0x20000008
 8003584:	2000015c 	.word	0x2000015c

08003588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b02      	ldr	r3, [pc, #8]	@ (8003598 <HAL_GetTick+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	2000015c 	.word	0x2000015c

0800359c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff fff0 	bl	8003588 <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	d005      	beq.n	80035c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_Delay+0x44>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	001a      	movs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	f7ff ffe0 	bl	8003588 <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8f7      	bhi.n	80035c4 <HAL_Delay+0x28>
  {
  }
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000008 	.word	0x20000008

080035e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	0002      	movs	r2, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	1dfb      	adds	r3, r7, #7
 80035f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80035f8:	d828      	bhi.n	800364c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fa:	4a2f      	ldr	r2, [pc, #188]	@ (80036b8 <__NVIC_SetPriority+0xd4>)
 80035fc:	1dfb      	adds	r3, r7, #7
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	b25b      	sxtb	r3, r3
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	33c0      	adds	r3, #192	@ 0xc0
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	589b      	ldr	r3, [r3, r2]
 800360a:	1dfa      	adds	r2, r7, #7
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	0011      	movs	r1, r2
 8003610:	2203      	movs	r2, #3
 8003612:	400a      	ands	r2, r1
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	21ff      	movs	r1, #255	@ 0xff
 8003618:	4091      	lsls	r1, r2
 800361a:	000a      	movs	r2, r1
 800361c:	43d2      	mvns	r2, r2
 800361e:	401a      	ands	r2, r3
 8003620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	22ff      	movs	r2, #255	@ 0xff
 8003628:	401a      	ands	r2, r3
 800362a:	1dfb      	adds	r3, r7, #7
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	0018      	movs	r0, r3
 8003630:	2303      	movs	r3, #3
 8003632:	4003      	ands	r3, r0
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003638:	481f      	ldr	r0, [pc, #124]	@ (80036b8 <__NVIC_SetPriority+0xd4>)
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b25b      	sxtb	r3, r3
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	430a      	orrs	r2, r1
 8003644:	33c0      	adds	r3, #192	@ 0xc0
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800364a:	e031      	b.n	80036b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800364c:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <__NVIC_SetPriority+0xd8>)
 800364e:	1dfb      	adds	r3, r7, #7
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	0019      	movs	r1, r3
 8003654:	230f      	movs	r3, #15
 8003656:	400b      	ands	r3, r1
 8003658:	3b08      	subs	r3, #8
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3306      	adds	r3, #6
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	18d3      	adds	r3, r2, r3
 8003662:	3304      	adds	r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1dfa      	adds	r2, r7, #7
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	0011      	movs	r1, r2
 800366c:	2203      	movs	r2, #3
 800366e:	400a      	ands	r2, r1
 8003670:	00d2      	lsls	r2, r2, #3
 8003672:	21ff      	movs	r1, #255	@ 0xff
 8003674:	4091      	lsls	r1, r2
 8003676:	000a      	movs	r2, r1
 8003678:	43d2      	mvns	r2, r2
 800367a:	401a      	ands	r2, r3
 800367c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	401a      	ands	r2, r3
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	0018      	movs	r0, r3
 800368c:	2303      	movs	r3, #3
 800368e:	4003      	ands	r3, r0
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003694:	4809      	ldr	r0, [pc, #36]	@ (80036bc <__NVIC_SetPriority+0xd8>)
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	001c      	movs	r4, r3
 800369c:	230f      	movs	r3, #15
 800369e:	4023      	ands	r3, r4
 80036a0:	3b08      	subs	r3, #8
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	430a      	orrs	r2, r1
 80036a6:	3306      	adds	r3, #6
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	18c3      	adds	r3, r0, r3
 80036ac:	3304      	adds	r3, #4
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b003      	add	sp, #12
 80036b6:	bd90      	pop	{r4, r7, pc}
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	045b      	lsls	r3, r3, #17
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d301      	bcc.n	80036d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d4:	2301      	movs	r3, #1
 80036d6:	e010      	b.n	80036fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <SysTick_Config+0x44>)
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	3a01      	subs	r2, #1
 80036de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e0:	2301      	movs	r3, #1
 80036e2:	425b      	negs	r3, r3
 80036e4:	2103      	movs	r1, #3
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7ff ff7c 	bl	80035e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <SysTick_Config+0x44>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <SysTick_Config+0x44>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	210f      	movs	r1, #15
 8003714:	187b      	adds	r3, r7, r1
 8003716:	1c02      	adds	r2, r0, #0
 8003718:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	187b      	adds	r3, r7, r1
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b25b      	sxtb	r3, r3
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff ff5d 	bl	80035e4 <__NVIC_SetPriority>
}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7ff ffbf 	bl	80036c0 <SysTick_Config>
 8003742:	0003      	movs	r3, r0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e147      	b.n	80039ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4091      	lsls	r1, r2
 8003766:	000a      	movs	r2, r1
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d100      	bne.n	8003774 <HAL_GPIO_Init+0x28>
 8003772:	e138      	b.n	80039e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	4013      	ands	r3, r2
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_GPIO_Init+0x40>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	4013      	ands	r3, r2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d130      	bne.n	80037ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	43da      	mvns	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	0013      	movs	r3, r2
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
 80037c8:	0013      	movs	r3, r2
 80037ca:	43da      	mvns	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	2201      	movs	r2, #1
 80037da:	401a      	ands	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	409a      	lsls	r2, r3
 80037e0:	0013      	movs	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2203      	movs	r2, #3
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d017      	beq.n	800382a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	409a      	lsls	r2, r3
 8003808:	0013      	movs	r3, r2
 800380a:	43da      	mvns	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	0013      	movs	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	58d3      	ldr	r3, [r2, r3]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2207      	movs	r2, #7
 8003848:	4013      	ands	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	43da      	mvns	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2107      	movs	r1, #7
 8003862:	400b      	ands	r3, r1
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	409a      	lsls	r2, r3
 8003868:	0013      	movs	r3, r2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	6939      	ldr	r1, [r7, #16]
 800387c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	409a      	lsls	r2, r3
 800388c:	0013      	movs	r3, r2
 800388e:	43da      	mvns	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	401a      	ands	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	0013      	movs	r3, r2
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	23c0      	movs	r3, #192	@ 0xc0
 80038b8:	029b      	lsls	r3, r3, #10
 80038ba:	4013      	ands	r3, r2
 80038bc:	d100      	bne.n	80038c0 <HAL_GPIO_Init+0x174>
 80038be:	e092      	b.n	80039e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80038c0:	4a50      	ldr	r2, [pc, #320]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3318      	adds	r3, #24
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	589b      	ldr	r3, [r3, r2]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2203      	movs	r2, #3
 80038d2:	4013      	ands	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	220f      	movs	r2, #15
 80038d8:	409a      	lsls	r2, r3
 80038da:	0013      	movs	r3, r2
 80038dc:	43da      	mvns	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	23a0      	movs	r3, #160	@ 0xa0
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d013      	beq.n	8003916 <HAL_GPIO_Init+0x1ca>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a45      	ldr	r2, [pc, #276]	@ (8003a08 <HAL_GPIO_Init+0x2bc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00d      	beq.n	8003912 <HAL_GPIO_Init+0x1c6>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a44      	ldr	r2, [pc, #272]	@ (8003a0c <HAL_GPIO_Init+0x2c0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <HAL_GPIO_Init+0x1c2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a43      	ldr	r2, [pc, #268]	@ (8003a10 <HAL_GPIO_Init+0x2c4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_GPIO_Init+0x1be>
 8003906:	2303      	movs	r3, #3
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 800390a:	2305      	movs	r3, #5
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x1cc>
 8003916:	2300      	movs	r3, #0
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	2103      	movs	r1, #3
 800391c:	400a      	ands	r2, r1
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	4093      	lsls	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003928:	4936      	ldr	r1, [pc, #216]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3318      	adds	r3, #24
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003936:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	2380      	movs	r3, #128	@ 0x80
 800394c:	035b      	lsls	r3, r3, #13
 800394e:	4013      	ands	r3, r2
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800395a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003960:	4b28      	ldr	r3, [pc, #160]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43da      	mvns	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	039b      	lsls	r3, r3, #14
 8003978:	4013      	ands	r3, r2
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003984:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800398a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 800398c:	2384      	movs	r3, #132	@ 0x84
 800398e:	58d3      	ldr	r3, [r2, r3]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43da      	mvns	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	4013      	ands	r3, r2
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039b0:	4914      	ldr	r1, [pc, #80]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039b2:	2284      	movs	r2, #132	@ 0x84
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80039b8:	4a12      	ldr	r2, [pc, #72]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	58d3      	ldr	r3, [r2, r3]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43da      	mvns	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	4013      	ands	r3, r2
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039de:	4909      	ldr	r1, [pc, #36]	@ (8003a04 <HAL_GPIO_Init+0x2b8>)
 80039e0:	2280      	movs	r2, #128	@ 0x80
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	40da      	lsrs	r2, r3
 80039f4:	1e13      	subs	r3, r2, #0
 80039f6:	d000      	beq.n	80039fa <HAL_GPIO_Init+0x2ae>
 80039f8:	e6b0      	b.n	800375c <HAL_GPIO_Init+0x10>
  }
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b006      	add	sp, #24
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021800 	.word	0x40021800
 8003a08:	50000400 	.word	0x50000400
 8003a0c:	50000800 	.word	0x50000800
 8003a10:	50000c00 	.word	0x50000c00

08003a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	000a      	movs	r2, r1
 8003a1e:	1cbb      	adds	r3, r7, #2
 8003a20:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	1cba      	adds	r2, r7, #2
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e003      	b.n	8003a40 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a40:	230f      	movs	r3, #15
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	0008      	movs	r0, r1
 8003a58:	0011      	movs	r1, r2
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	1c02      	adds	r2, r0, #0
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	1c7b      	adds	r3, r7, #1
 8003a62:	1c0a      	adds	r2, r1, #0
 8003a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a66:	1c7b      	adds	r3, r7, #1
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a6e:	1cbb      	adds	r3, r7, #2
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a76:	e003      	b.n	8003a80 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a78:	1cbb      	adds	r3, r7, #2
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e08f      	b.n	8003bba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2241      	movs	r2, #65	@ 0x41
 8003a9e:	5c9b      	ldrb	r3, [r3, r2]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2240      	movs	r2, #64	@ 0x40
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7ff fa51 	bl	8002f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2241      	movs	r2, #65	@ 0x41
 8003aba:	2124      	movs	r1, #36	@ 0x24
 8003abc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	438a      	bics	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	493b      	ldr	r1, [pc, #236]	@ (8003bc4 <HAL_I2C_Init+0x13c>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4938      	ldr	r1, [pc, #224]	@ (8003bc8 <HAL_I2C_Init+0x140>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d108      	bne.n	8003b06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	0209      	lsls	r1, r1, #8
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	e007      	b.n	8003b16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2184      	movs	r1, #132	@ 0x84
 8003b10:	0209      	lsls	r1, r1, #8
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d109      	bne.n	8003b32 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	0109      	lsls	r1, r1, #4
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	e007      	b.n	8003b42 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4923      	ldr	r1, [pc, #140]	@ (8003bcc <HAL_I2C_Init+0x144>)
 8003b3e:	400a      	ands	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4920      	ldr	r1, [pc, #128]	@ (8003bd0 <HAL_I2C_Init+0x148>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	491a      	ldr	r1, [pc, #104]	@ (8003bc8 <HAL_I2C_Init+0x140>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2241      	movs	r2, #65	@ 0x41
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2242      	movs	r2, #66	@ 0x42
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	f0ffffff 	.word	0xf0ffffff
 8003bc8:	ffff7fff 	.word	0xffff7fff
 8003bcc:	fffff7ff 	.word	0xfffff7ff
 8003bd0:	02008000 	.word	0x02008000

08003bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2241      	movs	r2, #65	@ 0x41
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d138      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2240      	movs	r2, #64	@ 0x40
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e032      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	@ 0x40
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2241      	movs	r2, #65	@ 0x41
 8003c04:	2124      	movs	r1, #36	@ 0x24
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4911      	ldr	r1, [pc, #68]	@ (8003c68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2241      	movs	r2, #65	@ 0x41
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2240      	movs	r2, #64	@ 0x40
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	ffffefff 	.word	0xffffefff

08003c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2241      	movs	r2, #65	@ 0x41
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d139      	bne.n	8003cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2240      	movs	r2, #64	@ 0x40
 8003c86:	5c9b      	ldrb	r3, [r3, r2]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e033      	b.n	8003cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	@ 0x40
 8003c94:	2101      	movs	r1, #1
 8003c96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2241      	movs	r2, #65	@ 0x41
 8003c9c:	2124      	movs	r1, #36	@ 0x24
 8003c9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	@ 0x41
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2240      	movs	r2, #64	@ 0x40
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fffff0ff 	.word	0xfffff0ff

08003d04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e03d      	b.n	8003d92 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a20      	ldr	r2, [pc, #128]	@ (8003d9c <HAL_IWDG_Init+0x98>)
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <HAL_IWDG_Init+0x9c>)
 8003d24:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6852      	ldr	r2, [r2, #4]
 8003d2e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6892      	ldr	r2, [r2, #8]
 8003d38:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d3a:	f7ff fc25 	bl	8003588 <HAL_GetTick>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d42:	e00e      	b.n	8003d62 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d44:	f7ff fc20 	bl	8003588 <HAL_GetTick>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b31      	cmp	r3, #49	@ 0x31
 8003d50:	d907      	bls.n	8003d62 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2207      	movs	r2, #7
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d001      	beq.n	8003d62 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e017      	b.n	8003d92 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2207      	movs	r2, #7
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d1ea      	bne.n	8003d44 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e003      	b.n	8003d90 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a05      	ldr	r2, [pc, #20]	@ (8003da4 <HAL_IWDG_Init+0xa0>)
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	0000cccc 	.word	0x0000cccc
 8003da0:	00005555 	.word	0x00005555
 8003da4:	0000aaaa 	.word	0x0000aaaa

08003da8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a03      	ldr	r2, [pc, #12]	@ (8003dc4 <HAL_IWDG_Refresh+0x1c>)
 8003db6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	0000aaaa 	.word	0x0000aaaa

08003dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d11f      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dec:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	0013      	movs	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4912      	ldr	r1, [pc, #72]	@ (8003e44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fc f980 	bl	8000100 <__udivsi3>
 8003e00:	0003      	movs	r3, r0
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e06:	e008      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	e001      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e009      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1a:	4b07      	ldr	r3, [pc, #28]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	401a      	ands	r2, r3
 8003e24:	2380      	movs	r3, #128	@ 0x80
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d0ed      	beq.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	fffff9ff 	.word	0xfffff9ff
 8003e40:	20000000 	.word	0x20000000
 8003e44:	000f4240 	.word	0x000f4240

08003e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e2f3      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	d100      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1e>
 8003e64:	e07c      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e66:	4bc3      	ldr	r3, [pc, #780]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2238      	movs	r2, #56	@ 0x38
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e70:	4bc0      	ldr	r3, [pc, #768]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3e>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	4bb9      	ldr	r3, [pc, #740]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	4013      	ands	r3, r2
 8003e96:	d062      	beq.n	8003f5e <HAL_RCC_OscConfig+0x116>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d15e      	bne.n	8003f5e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e2ce      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	025b      	lsls	r3, r3, #9
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x78>
 8003eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4baf      	ldr	r3, [pc, #700]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	2180      	movs	r1, #128	@ 0x80
 8003eb8:	0249      	lsls	r1, r1, #9
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e020      	b.n	8003f02 <HAL_RCC_OscConfig+0xba>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	23a0      	movs	r3, #160	@ 0xa0
 8003ec6:	02db      	lsls	r3, r3, #11
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d10e      	bne.n	8003eea <HAL_RCC_OscConfig+0xa2>
 8003ecc:	4ba9      	ldr	r3, [pc, #676]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4ba8      	ldr	r3, [pc, #672]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	2180      	movs	r1, #128	@ 0x80
 8003ed4:	02c9      	lsls	r1, r1, #11
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4ba6      	ldr	r3, [pc, #664]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4ba5      	ldr	r3, [pc, #660]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	2180      	movs	r1, #128	@ 0x80
 8003ee2:	0249      	lsls	r1, r1, #9
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCC_OscConfig+0xba>
 8003eea:	4ba2      	ldr	r3, [pc, #648]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4ba1      	ldr	r3, [pc, #644]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	49a1      	ldr	r1, [pc, #644]	@ (8004178 <HAL_RCC_OscConfig+0x330>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	4b9f      	ldr	r3, [pc, #636]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b9e      	ldr	r3, [pc, #632]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	499f      	ldr	r1, [pc, #636]	@ (800417c <HAL_RCC_OscConfig+0x334>)
 8003efe:	400a      	ands	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7ff fb3d 	bl	8003588 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7ff fb38 	bl	8003588 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e28d      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b93      	ldr	r3, [pc, #588]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xcc>
 8003f32:	e015      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7ff fb28 	bl	8003588 <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3e:	f7ff fb23 	bl	8003588 <HAL_GetTick>
 8003f42:	0002      	movs	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	@ 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e278      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f50:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	029b      	lsls	r3, r3, #10
 8003f58:	4013      	ands	r3, r2
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0xf6>
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d100      	bne.n	8003f6c <HAL_RCC_OscConfig+0x124>
 8003f6a:	e099      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6c:	4b81      	ldr	r3, [pc, #516]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2238      	movs	r2, #56	@ 0x38
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f76:	4b7f      	ldr	r3, [pc, #508]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_OscConfig+0x144>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d002      	beq.n	8003f92 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d135      	bne.n	8003ffe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f92:	4b78      	ldr	r3, [pc, #480]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x162>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e24b      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b72      	ldr	r3, [pc, #456]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a74      	ldr	r2, [pc, #464]	@ (8004180 <HAL_RCC_OscConfig+0x338>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	021a      	lsls	r2, r3, #8
 8003fba:	4b6e      	ldr	r3, [pc, #440]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d112      	bne.n	8003fec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6e      	ldr	r2, [pc, #440]	@ (8004184 <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	4b67      	ldr	r3, [pc, #412]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003fda:	4b66      	ldr	r3, [pc, #408]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0adb      	lsrs	r3, r3, #11
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	4a68      	ldr	r2, [pc, #416]	@ (8004188 <HAL_RCC_OscConfig+0x340>)
 8003fe6:	40da      	lsrs	r2, r3
 8003fe8:	4b68      	ldr	r3, [pc, #416]	@ (800418c <HAL_RCC_OscConfig+0x344>)
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fec:	4b68      	ldr	r3, [pc, #416]	@ (8004190 <HAL_RCC_OscConfig+0x348>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff fa6d 	bl	80034d0 <HAL_InitTick>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d051      	beq.n	800409e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e221      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d030      	beq.n	8004068 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004006:	4b5b      	ldr	r3, [pc, #364]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5e      	ldr	r2, [pc, #376]	@ (8004184 <HAL_RCC_OscConfig+0x33c>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b57      	ldr	r3, [pc, #348]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800401a:	4b56      	ldr	r3, [pc, #344]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b55      	ldr	r3, [pc, #340]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004020:	2180      	movs	r1, #128	@ 0x80
 8004022:	0049      	lsls	r1, r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7ff faae 	bl	8003588 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7ff faa9 	bl	8003588 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e1fe      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4013      	ands	r3, r2
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b48      	ldr	r3, [pc, #288]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_RCC_OscConfig+0x338>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	4b44      	ldr	r3, [pc, #272]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	e01b      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b42      	ldr	r3, [pc, #264]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800406e:	4949      	ldr	r1, [pc, #292]	@ (8004194 <HAL_RCC_OscConfig+0x34c>)
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7ff fa88 	bl	8003588 <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407e:	f7ff fa83 	bl	8003588 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1d8      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004090:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4013      	ands	r3, r2
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x236>
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2208      	movs	r2, #8
 80040a6:	4013      	ands	r3, r2
 80040a8:	d047      	beq.n	800413a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040aa:	4b32      	ldr	r3, [pc, #200]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2238      	movs	r2, #56	@ 0x38
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b18      	cmp	r3, #24
 80040b4:	d10a      	bne.n	80040cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ba:	2202      	movs	r2, #2
 80040bc:	4013      	ands	r3, r2
 80040be:	d03c      	beq.n	800413a <HAL_RCC_OscConfig+0x2f2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d138      	bne.n	800413a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e1ba      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040d8:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040da:	2101      	movs	r1, #1
 80040dc:	430a      	orrs	r2, r1
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7ff fa52 	bl	8003588 <HAL_GetTick>
 80040e4:	0003      	movs	r3, r0
 80040e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ea:	f7ff fa4d 	bl	8003588 <HAL_GetTick>
 80040ee:	0002      	movs	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e1a2      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d0f1      	beq.n	80040ea <HAL_RCC_OscConfig+0x2a2>
 8004106:	e018      	b.n	800413a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004108:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800410a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7ff fa38 	bl	8003588 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411e:	f7ff fa33 	bl	8003588 <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e188      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004130:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	2202      	movs	r2, #2
 8004136:	4013      	ands	r3, r2
 8004138:	d1f1      	bne.n	800411e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2204      	movs	r2, #4
 8004140:	4013      	ands	r3, r2
 8004142:	d100      	bne.n	8004146 <HAL_RCC_OscConfig+0x2fe>
 8004144:	e0c6      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	231f      	movs	r3, #31
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800414e:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	@ 0x38
 8004154:	4013      	ands	r3, r2
 8004156:	2b20      	cmp	r3, #32
 8004158:	d11e      	bne.n	8004198 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_OscConfig+0x32c>)
 800415c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415e:	2202      	movs	r2, #2
 8004160:	4013      	ands	r3, r2
 8004162:	d100      	bne.n	8004166 <HAL_RCC_OscConfig+0x31e>
 8004164:	e0b6      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d000      	beq.n	8004170 <HAL_RCC_OscConfig+0x328>
 800416e:	e0b1      	b.n	80042d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e166      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
 8004174:	40021000 	.word	0x40021000
 8004178:	fffeffff 	.word	0xfffeffff
 800417c:	fffbffff 	.word	0xfffbffff
 8004180:	ffff80ff 	.word	0xffff80ff
 8004184:	ffffc7ff 	.word	0xffffc7ff
 8004188:	00f42400 	.word	0x00f42400
 800418c:	20000000 	.word	0x20000000
 8004190:	20000004 	.word	0x20000004
 8004194:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004198:	4bac      	ldr	r3, [pc, #688]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800419a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x360>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x362>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4ba7      	ldr	r3, [pc, #668]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80041b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b2:	4ba6      	ldr	r3, [pc, #664]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80041b4:	2180      	movs	r1, #128	@ 0x80
 80041b6:	0549      	lsls	r1, r1, #21
 80041b8:	430a      	orrs	r2, r1
 80041ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041bc:	4ba3      	ldr	r3, [pc, #652]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80041be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	055b      	lsls	r3, r3, #21
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041ca:	231f      	movs	r3, #31
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004450 <HAL_RCC_OscConfig+0x608>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d11a      	bne.n	8004214 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041de:	4b9c      	ldr	r3, [pc, #624]	@ (8004450 <HAL_RCC_OscConfig+0x608>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004450 <HAL_RCC_OscConfig+0x608>)
 80041e4:	2180      	movs	r1, #128	@ 0x80
 80041e6:	0049      	lsls	r1, r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041ec:	f7ff f9cc 	bl	8003588 <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7ff f9c7 	bl	8003588 <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e11c      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	4b91      	ldr	r3, [pc, #580]	@ (8004450 <HAL_RCC_OscConfig+0x608>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x3e2>
 800421c:	4b8b      	ldr	r3, [pc, #556]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800421e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004220:	4b8a      	ldr	r3, [pc, #552]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004222:	2101      	movs	r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004228:	e01c      	b.n	8004264 <HAL_RCC_OscConfig+0x41c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b05      	cmp	r3, #5
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x404>
 8004232:	4b86      	ldr	r3, [pc, #536]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004234:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004236:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004238:	2104      	movs	r1, #4
 800423a:	430a      	orrs	r2, r1
 800423c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800423e:	4b83      	ldr	r3, [pc, #524]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004240:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004242:	4b82      	ldr	r3, [pc, #520]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004244:	2101      	movs	r1, #1
 8004246:	430a      	orrs	r2, r1
 8004248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0x41c>
 800424c:	4b7f      	ldr	r3, [pc, #508]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800424e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004250:	4b7e      	ldr	r3, [pc, #504]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004258:	4b7c      	ldr	r3, [pc, #496]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800425a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800425c:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800425e:	2104      	movs	r1, #4
 8004260:	438a      	bics	r2, r1
 8004262:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d014      	beq.n	8004296 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7ff f98c 	bl	8003588 <HAL_GetTick>
 8004270:	0003      	movs	r3, r0
 8004272:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004274:	e009      	b.n	800428a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7ff f987 	bl	8003588 <HAL_GetTick>
 800427a:	0002      	movs	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	4a74      	ldr	r2, [pc, #464]	@ (8004454 <HAL_RCC_OscConfig+0x60c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0db      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428a:	4b70      	ldr	r3, [pc, #448]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x42e>
 8004294:	e013      	b.n	80042be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7ff f977 	bl	8003588 <HAL_GetTick>
 800429a:	0003      	movs	r3, r0
 800429c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800429e:	e009      	b.n	80042b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7ff f972 	bl	8003588 <HAL_GetTick>
 80042a4:	0002      	movs	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004454 <HAL_RCC_OscConfig+0x60c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0c6      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b4:	4b65      	ldr	r3, [pc, #404]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	2202      	movs	r2, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042be:	231f      	movs	r3, #31
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042c8:	4b60      	ldr	r3, [pc, #384]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042cc:	4b5f      	ldr	r3, [pc, #380]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042ce:	4962      	ldr	r1, [pc, #392]	@ (8004458 <HAL_RCC_OscConfig+0x610>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d100      	bne.n	80042de <HAL_RCC_OscConfig+0x496>
 80042dc:	e0b0      	b.n	8004440 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042de:	4b5b      	ldr	r3, [pc, #364]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2238      	movs	r2, #56	@ 0x38
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d100      	bne.n	80042ec <HAL_RCC_OscConfig+0x4a4>
 80042ea:	e078      	b.n	80043de <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d153      	bne.n	800439c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b55      	ldr	r3, [pc, #340]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b54      	ldr	r3, [pc, #336]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80042fa:	4958      	ldr	r1, [pc, #352]	@ (800445c <HAL_RCC_OscConfig+0x614>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7ff f942 	bl	8003588 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7ff f93d 	bl	8003588 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e092      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b4b      	ldr	r3, [pc, #300]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	049b      	lsls	r3, r3, #18
 8004324:	4013      	ands	r3, r2
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b48      	ldr	r3, [pc, #288]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a4c      	ldr	r2, [pc, #304]	@ (8004460 <HAL_RCC_OscConfig+0x618>)
 800432e:	4013      	ands	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	431a      	orrs	r2, r3
 8004350:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004356:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b3c      	ldr	r3, [pc, #240]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	0449      	lsls	r1, r1, #17
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004364:	4b39      	ldr	r3, [pc, #228]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b38      	ldr	r3, [pc, #224]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	0549      	lsls	r1, r1, #21
 800436e:	430a      	orrs	r2, r1
 8004370:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7ff f909 	bl	8003588 <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7ff f904 	bl	8003588 <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e059      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438e:	4b2f      	ldr	r3, [pc, #188]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	049b      	lsls	r3, r3, #18
 8004396:	4013      	ands	r3, r2
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x534>
 800439a:	e051      	b.n	8004440 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80043a2:	492e      	ldr	r1, [pc, #184]	@ (800445c <HAL_RCC_OscConfig+0x614>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7ff f8ee 	bl	8003588 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7ff f8e9 	bl	8003588 <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e03e      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c4:	4b21      	ldr	r3, [pc, #132]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	049b      	lsls	r3, r3, #18
 80043cc:	4013      	ands	r3, r2
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80043d0:	4b1e      	ldr	r3, [pc, #120]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80043d6:	4923      	ldr	r1, [pc, #140]	@ (8004464 <HAL_RCC_OscConfig+0x61c>)
 80043d8:	400a      	ands	r2, r1
 80043da:	60da      	str	r2, [r3, #12]
 80043dc:	e030      	b.n	8004440 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e02b      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043ea:	4b18      	ldr	r3, [pc, #96]	@ (800444c <HAL_RCC_OscConfig+0x604>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	401a      	ands	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d11e      	bne.n	800443c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2270      	movs	r2, #112	@ 0x70
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d117      	bne.n	800443c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	23fe      	movs	r3, #254	@ 0xfe
 8004410:	01db      	lsls	r3, r3, #7
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004418:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d10e      	bne.n	800443c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	23f8      	movs	r3, #248	@ 0xf8
 8004422:	039b      	lsls	r3, r3, #14
 8004424:	401a      	ands	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d106      	bne.n	800443c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	0f5b      	lsrs	r3, r3, #29
 8004432:	075a      	lsls	r2, r3, #29
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b008      	add	sp, #32
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	40021000 	.word	0x40021000
 8004450:	40007000 	.word	0x40007000
 8004454:	00001388 	.word	0x00001388
 8004458:	efffffff 	.word	0xefffffff
 800445c:	feffffff 	.word	0xfeffffff
 8004460:	1fc1808c 	.word	0x1fc1808c
 8004464:	effefffc 	.word	0xeffefffc

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0e9      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2207      	movs	r2, #7
 8004482:	4013      	ands	r3, r2
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d91e      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b73      	ldr	r3, [pc, #460]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2207      	movs	r2, #7
 8004490:	4393      	bics	r3, r2
 8004492:	0019      	movs	r1, r3
 8004494:	4b70      	ldr	r3, [pc, #448]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800449c:	f7ff f874 	bl	8003588 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044a4:	e009      	b.n	80044ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a6:	f7ff f86f 	bl	8003588 <HAL_GetTick>
 80044aa:	0002      	movs	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	4a6a      	ldr	r2, [pc, #424]	@ (800465c <HAL_RCC_ClockConfig+0x1f4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e0ca      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044ba:	4b67      	ldr	r3, [pc, #412]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2207      	movs	r2, #7
 80044c0:	4013      	ands	r3, r2
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1ee      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d015      	beq.n	80044fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2204      	movs	r2, #4
 80044d8:	4013      	ands	r3, r2
 80044da:	d006      	beq.n	80044ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044dc:	4b60      	ldr	r3, [pc, #384]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 80044e2:	21e0      	movs	r1, #224	@ 0xe0
 80044e4:	01c9      	lsls	r1, r1, #7
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_RCC_ClockConfig+0x1fc>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b59      	ldr	r3, [pc, #356]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d057      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004510:	4b53      	ldr	r3, [pc, #332]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	d12b      	bne.n	8004574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e097      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d107      	bne.n	8004538 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004528:	4b4d      	ldr	r3, [pc, #308]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	049b      	lsls	r3, r3, #18
 8004530:	4013      	ands	r3, r2
 8004532:	d11f      	bne.n	8004574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e08b      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d107      	bne.n	8004550 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004540:	4b47      	ldr	r3, [pc, #284]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2380      	movs	r3, #128	@ 0x80
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4013      	ands	r3, r2
 800454a:	d113      	bne.n	8004574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e07f      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d106      	bne.n	8004566 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004558:	4b41      	ldr	r3, [pc, #260]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	2202      	movs	r2, #2
 800455e:	4013      	ands	r3, r2
 8004560:	d108      	bne.n	8004574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e074      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e06d      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004574:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2207      	movs	r2, #7
 800457a:	4393      	bics	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fe fffe 	bl	8003588 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	e009      	b.n	80045a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004592:	f7fe fff9 	bl	8003588 <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	4a2f      	ldr	r2, [pc, #188]	@ (800465c <HAL_RCC_ClockConfig+0x1f4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e054      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2238      	movs	r2, #56	@ 0x38
 80045ac:	401a      	ands	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1ec      	bne.n	8004592 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2207      	movs	r2, #7
 80045be:	4013      	ands	r3, r2
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d21e      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b24      	ldr	r3, [pc, #144]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2207      	movs	r2, #7
 80045cc:	4393      	bics	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	4b21      	ldr	r3, [pc, #132]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045d8:	f7fe ffd6 	bl	8003588 <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045e0:	e009      	b.n	80045f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e2:	f7fe ffd1 	bl	8003588 <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	4a1b      	ldr	r2, [pc, #108]	@ (800465c <HAL_RCC_ClockConfig+0x1f4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e02c      	b.n	8004650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045f6:	4b18      	ldr	r3, [pc, #96]	@ (8004658 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2207      	movs	r2, #7
 80045fc:	4013      	ands	r3, r2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d1ee      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2204      	movs	r2, #4
 800460a:	4013      	ands	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <HAL_RCC_ClockConfig+0x200>)
 8004614:	4013      	ands	r3, r2
 8004616:	0019      	movs	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004622:	f000 f829 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004626:	0001      	movs	r1, r0
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <HAL_RCC_ClockConfig+0x1f8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	220f      	movs	r2, #15
 8004630:	401a      	ands	r2, r3
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_RCC_ClockConfig+0x204>)
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	58d3      	ldr	r3, [r2, r3]
 8004638:	221f      	movs	r2, #31
 800463a:	4013      	ands	r3, r2
 800463c:	000a      	movs	r2, r1
 800463e:	40da      	lsrs	r2, r3
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_RCC_ClockConfig+0x208>)
 8004642:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_RCC_ClockConfig+0x20c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	f7fe ff41 	bl	80034d0 <HAL_InitTick>
 800464e:	0003      	movs	r3, r0
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40022000 	.word	0x40022000
 800465c:	00001388 	.word	0x00001388
 8004660:	40021000 	.word	0x40021000
 8004664:	fffff0ff 	.word	0xfffff0ff
 8004668:	ffff8fff 	.word	0xffff8fff
 800466c:	08005c50 	.word	0x08005c50
 8004670:	20000000 	.word	0x20000000
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800467e:	4b3c      	ldr	r3, [pc, #240]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2238      	movs	r2, #56	@ 0x38
 8004684:	4013      	ands	r3, r2
 8004686:	d10f      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004688:	4b39      	ldr	r3, [pc, #228]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0adb      	lsrs	r3, r3, #11
 800468e:	2207      	movs	r2, #7
 8004690:	4013      	ands	r3, r2
 8004692:	2201      	movs	r2, #1
 8004694:	409a      	lsls	r2, r3
 8004696:	0013      	movs	r3, r2
 8004698:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	4835      	ldr	r0, [pc, #212]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xfc>)
 800469e:	f7fb fd2f 	bl	8000100 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e05d      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a8:	4b31      	ldr	r3, [pc, #196]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2238      	movs	r2, #56	@ 0x38
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d102      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b4:	4b30      	ldr	r3, [pc, #192]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x100>)
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e054      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2238      	movs	r2, #56	@ 0x38
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d138      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2203      	movs	r2, #3
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046d0:	4b27      	ldr	r3, [pc, #156]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	2207      	movs	r2, #7
 80046d8:	4013      	ands	r3, r2
 80046da:	3301      	adds	r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d10d      	bne.n	8004700 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4824      	ldr	r0, [pc, #144]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x100>)
 80046e8:	f7fb fd0a 	bl	8000100 <__udivsi3>
 80046ec:	0003      	movs	r3, r0
 80046ee:	0019      	movs	r1, r3
 80046f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	227f      	movs	r2, #127	@ 0x7f
 80046f8:	4013      	ands	r3, r2
 80046fa:	434b      	muls	r3, r1
 80046fc:	617b      	str	r3, [r7, #20]
        break;
 80046fe:	e00d      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	481c      	ldr	r0, [pc, #112]	@ (8004774 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004704:	f7fb fcfc 	bl	8000100 <__udivsi3>
 8004708:	0003      	movs	r3, r0
 800470a:	0019      	movs	r1, r3
 800470c:	4b18      	ldr	r3, [pc, #96]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	227f      	movs	r2, #127	@ 0x7f
 8004714:	4013      	ands	r3, r2
 8004716:	434b      	muls	r3, r1
 8004718:	617b      	str	r3, [r7, #20]
        break;
 800471a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	0f5b      	lsrs	r3, r3, #29
 8004722:	2207      	movs	r2, #7
 8004724:	4013      	ands	r3, r2
 8004726:	3301      	adds	r3, #1
 8004728:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	6978      	ldr	r0, [r7, #20]
 800472e:	f7fb fce7 	bl	8000100 <__udivsi3>
 8004732:	0003      	movs	r3, r0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e015      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004738:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2238      	movs	r2, #56	@ 0x38
 800473e:	4013      	ands	r3, r2
 8004740:	2b20      	cmp	r3, #32
 8004742:	d103      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004744:	2380      	movs	r3, #128	@ 0x80
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800474c:	4b08      	ldr	r3, [pc, #32]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2238      	movs	r2, #56	@ 0x38
 8004752:	4013      	ands	r3, r2
 8004754:	2b18      	cmp	r3, #24
 8004756:	d103      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004758:	23fa      	movs	r3, #250	@ 0xfa
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e001      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004764:	693b      	ldr	r3, [r7, #16]
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b006      	add	sp, #24
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	40021000 	.word	0x40021000
 8004774:	00f42400 	.word	0x00f42400
 8004778:	007a1200 	.word	0x007a1200

0800477c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004784:	2313      	movs	r3, #19
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800478c:	2312      	movs	r3, #18
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	029b      	lsls	r3, r3, #10
 800479c:	4013      	ands	r3, r2
 800479e:	d100      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80047a0:	e0a3      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2011      	movs	r0, #17
 80047a4:	183b      	adds	r3, r7, r0
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b7f      	ldr	r3, [pc, #508]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	055b      	lsls	r3, r3, #21
 80047b2:	4013      	ands	r3, r2
 80047b4:	d110      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ba:	4b7b      	ldr	r3, [pc, #492]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047bc:	2180      	movs	r1, #128	@ 0x80
 80047be:	0549      	lsls	r1, r1, #21
 80047c0:	430a      	orrs	r2, r1
 80047c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047c4:	4b78      	ldr	r3, [pc, #480]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80047c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	055b      	lsls	r3, r3, #21
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	183b      	adds	r3, r7, r0
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d8:	4b74      	ldr	r3, [pc, #464]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b73      	ldr	r3, [pc, #460]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	0049      	lsls	r1, r1, #1
 80047e2:	430a      	orrs	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e6:	f7fe fecf 	bl	8003588 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f0:	f7fe feca 	bl	8003588 <HAL_GetTick>
 80047f4:	0002      	movs	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d904      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047fe:	2313      	movs	r3, #19
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2203      	movs	r2, #3
 8004804:	701a      	strb	r2, [r3, #0]
        break;
 8004806:	e005      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004808:	4b68      	ldr	r3, [pc, #416]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4013      	ands	r3, r2
 8004812:	d0ed      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004814:	2313      	movs	r3, #19
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d154      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800481e:	4b62      	ldr	r3, [pc, #392]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004820:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004822:	23c0      	movs	r3, #192	@ 0xc0
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4013      	ands	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d019      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	429a      	cmp	r2, r3
 8004838:	d014      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800483a:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	4a5c      	ldr	r2, [pc, #368]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004844:	4b58      	ldr	r3, [pc, #352]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004848:	4b57      	ldr	r3, [pc, #348]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800484a:	2180      	movs	r1, #128	@ 0x80
 800484c:	0249      	lsls	r1, r1, #9
 800484e:	430a      	orrs	r2, r1
 8004850:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004852:	4b55      	ldr	r3, [pc, #340]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004854:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004856:	4b54      	ldr	r3, [pc, #336]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004858:	4956      	ldr	r1, [pc, #344]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800485a:	400a      	ands	r2, r1
 800485c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800485e:	4b52      	ldr	r3, [pc, #328]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2201      	movs	r2, #1
 8004868:	4013      	ands	r3, r2
 800486a:	d016      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe fe8c 	bl	8003588 <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004874:	e00c      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fe fe87 	bl	8003588 <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	4a4d      	ldr	r2, [pc, #308]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d904      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004886:	2313      	movs	r3, #19
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	2203      	movs	r2, #3
 800488c:	701a      	strb	r2, [r3, #0]
            break;
 800488e:	e004      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004890:	4b45      	ldr	r3, [pc, #276]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	2202      	movs	r2, #2
 8004896:	4013      	ands	r3, r2
 8004898:	d0ed      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800489a:	2313      	movs	r3, #19
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a4:	4b40      	ldr	r3, [pc, #256]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	4a41      	ldr	r2, [pc, #260]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	4b3d      	ldr	r3, [pc, #244]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048b8:	e00c      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ba:	2312      	movs	r3, #18
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2213      	movs	r2, #19
 80048c0:	18ba      	adds	r2, r7, r2
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e005      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	2312      	movs	r3, #18
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2213      	movs	r2, #19
 80048ce:	18ba      	adds	r2, r7, r2
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d4:	2311      	movs	r3, #17
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d105      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80048e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e2:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80048e4:	4935      	ldr	r1, [pc, #212]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	4013      	ands	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f4:	4b2c      	ldr	r3, [pc, #176]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	2203      	movs	r2, #3
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004904:	430a      	orrs	r2, r1
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2220      	movs	r2, #32
 800490e:	4013      	ands	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004912:	4b25      	ldr	r3, [pc, #148]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004918:	4013      	ands	r3, r2
 800491a:	0019      	movs	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b21      	ldr	r3, [pc, #132]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004922:	430a      	orrs	r2, r1
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4013      	ands	r3, r2
 8004930:	d015      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004932:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	0899      	lsrs	r1, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004940:	430a      	orrs	r2, r1
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	05db      	lsls	r3, r3, #23
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004950:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004956:	2180      	movs	r1, #128	@ 0x80
 8004958:	0249      	lsls	r1, r1, #9
 800495a:	430a      	orrs	r2, r1
 800495c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	2380      	movs	r3, #128	@ 0x80
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4013      	ands	r3, r2
 8004968:	d016      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800496a:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004970:	4013      	ands	r3, r2
 8004972:	0019      	movs	r1, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800497a:	430a      	orrs	r2, r1
 800497c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	01db      	lsls	r3, r3, #7
 8004986:	429a      	cmp	r2, r3
 8004988:	d106      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004990:	2180      	movs	r1, #128	@ 0x80
 8004992:	0249      	lsls	r1, r1, #9
 8004994:	430a      	orrs	r2, r1
 8004996:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004998:	2312      	movs	r3, #18
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	781b      	ldrb	r3, [r3, #0]
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b006      	add	sp, #24
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
 80049b0:	fffffcff 	.word	0xfffffcff
 80049b4:	fffeffff 	.word	0xfffeffff
 80049b8:	00001388 	.word	0x00001388
 80049bc:	efffffff 	.word	0xefffffff
 80049c0:	ffffcfff 	.word	0xffffcfff
 80049c4:	ffff3fff 	.word	0xffff3fff

080049c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0a8      	b.n	8004b2c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	2382      	movs	r3, #130	@ 0x82
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d009      	beq.n	8004a02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	61da      	str	r2, [r3, #28]
 80049f4:	e005      	b.n	8004a02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	225d      	movs	r2, #93	@ 0x5d
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	225c      	movs	r2, #92	@ 0x5c
 8004a18:	2100      	movs	r1, #0
 8004a1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f7fe fafc 	bl	800301c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	225d      	movs	r2, #93	@ 0x5d
 8004a28:	2102      	movs	r1, #2
 8004a2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2140      	movs	r1, #64	@ 0x40
 8004a38:	438a      	bics	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	23e0      	movs	r3, #224	@ 0xe0
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d902      	bls.n	8004a4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e002      	b.n	8004a54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a4e:	2380      	movs	r3, #128	@ 0x80
 8004a50:	015b      	lsls	r3, r3, #5
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	23f0      	movs	r3, #240	@ 0xf0
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d008      	beq.n	8004a72 <HAL_SPI_Init+0xaa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	23e0      	movs	r3, #224	@ 0xe0
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	2382      	movs	r3, #130	@ 0x82
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6899      	ldr	r1, [r3, #8]
 8004a80:	2384      	movs	r3, #132	@ 0x84
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	400b      	ands	r3, r1
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	400b      	ands	r3, r1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2101      	movs	r1, #1
 8004a98:	400b      	ands	r3, r1
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6999      	ldr	r1, [r3, #24]
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2138      	movs	r1, #56	@ 0x38
 8004aae:	400b      	ands	r3, r1
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	2180      	movs	r1, #128	@ 0x80
 8004ab8:	400b      	ands	r3, r1
 8004aba:	431a      	orrs	r2, r3
 8004abc:	0011      	movs	r1, r2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	401a      	ands	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	2110      	movs	r1, #16
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae8:	2108      	movs	r1, #8
 8004aea:	400b      	ands	r3, r1
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68d9      	ldr	r1, [r3, #12]
 8004af2:	23f0      	movs	r3, #240	@ 0xf0
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	400b      	ands	r3, r1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	0011      	movs	r1, r2
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	015b      	lsls	r3, r3, #5
 8004b02:	401a      	ands	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <HAL_SPI_Init+0x16c>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	225d      	movs	r2, #93	@ 0x5d
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fffff7ff 	.word	0xfffff7ff

08004b38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b48:	231f      	movs	r3, #31
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	225c      	movs	r2, #92	@ 0x5c
 8004b54:	5c9b      	ldrb	r3, [r3, r2]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Transmit+0x26>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e147      	b.n	8004dee <HAL_SPI_Transmit+0x2b6>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	225c      	movs	r2, #92	@ 0x5c
 8004b62:	2101      	movs	r1, #1
 8004b64:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b66:	f7fe fd0f 	bl	8003588 <HAL_GetTick>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b6e:	2316      	movs	r3, #22
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	1dba      	adds	r2, r7, #6
 8004b74:	8812      	ldrh	r2, [r2, #0]
 8004b76:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	225d      	movs	r2, #93	@ 0x5d
 8004b7c:	5c9b      	ldrb	r3, [r3, r2]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d004      	beq.n	8004b8e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004b84:	231f      	movs	r3, #31
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2202      	movs	r2, #2
 8004b8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b8c:	e128      	b.n	8004de0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_SPI_Transmit+0x64>
 8004b94:	1dbb      	adds	r3, r7, #6
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004b9c:	231f      	movs	r3, #31
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ba4:	e11c      	b.n	8004de0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	225d      	movs	r2, #93	@ 0x5d
 8004baa:	2103      	movs	r1, #3
 8004bac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1dba      	adds	r2, r7, #6
 8004bbe:	8812      	ldrh	r2, [r2, #0]
 8004bc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1dba      	adds	r2, r7, #6
 8004bc6:	8812      	ldrh	r2, [r2, #0]
 8004bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2244      	movs	r2, #68	@ 0x44
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2246      	movs	r2, #70	@ 0x46
 8004bdc:	2100      	movs	r1, #0
 8004bde:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d110      	bne.n	8004c1a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	438a      	bics	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	01c9      	lsls	r1, r1, #7
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2240      	movs	r2, #64	@ 0x40
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b40      	cmp	r3, #64	@ 0x40
 8004c26:	d007      	beq.n	8004c38 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2140      	movs	r1, #64	@ 0x40
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	23e0      	movs	r3, #224	@ 0xe0
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d952      	bls.n	8004cea <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <HAL_SPI_Transmit+0x11e>
 8004c4c:	2316      	movs	r3, #22
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d143      	bne.n	8004cde <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c7a:	e030      	b.n	8004cde <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2202      	movs	r2, #2
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d112      	bne.n	8004cb0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cae:	e016      	b.n	8004cde <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb0:	f7fe fc6a 	bl	8003588 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d802      	bhi.n	8004cc6 <HAL_SPI_Transmit+0x18e>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	d102      	bne.n	8004ccc <HAL_SPI_Transmit+0x194>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004ccc:	231f      	movs	r3, #31
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	225d      	movs	r2, #93	@ 0x5d
 8004cd8:	2101      	movs	r1, #1
 8004cda:	5499      	strb	r1, [r3, r2]
          goto error;
 8004cdc:	e080      	b.n	8004de0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1c9      	bne.n	8004c7c <HAL_SPI_Transmit+0x144>
 8004ce8:	e053      	b.n	8004d92 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <HAL_SPI_Transmit+0x1c4>
 8004cf2:	2316      	movs	r3, #22
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d145      	bne.n	8004d88 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004d22:	e031      	b.n	8004d88 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d113      	bne.n	8004d5a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d58:	e016      	b.n	8004d88 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5a:	f7fe fc15 	bl	8003588 <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d802      	bhi.n	8004d70 <HAL_SPI_Transmit+0x238>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_SPI_Transmit+0x23e>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004d76:	231f      	movs	r3, #31
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	225d      	movs	r2, #93	@ 0x5d
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
          goto error;
 8004d86:	e02b      	b.n	8004de0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1c8      	bne.n	8004d24 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fcef 	bl	800577c <SPI_EndRxTxTransaction>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004dce:	231f      	movs	r3, #31
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e003      	b.n	8004de0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	225d      	movs	r2, #93	@ 0x5d
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	225c      	movs	r2, #92	@ 0x5c
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004de8:	231f      	movs	r3, #31
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	781b      	ldrb	r3, [r3, #0]
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b008      	add	sp, #32
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b089      	sub	sp, #36	@ 0x24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	1dbb      	adds	r3, r7, #6
 8004e06:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e08:	2117      	movs	r1, #23
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	225d      	movs	r2, #93	@ 0x5d
 8004e14:	5c9b      	ldrb	r3, [r3, r2]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d003      	beq.n	8004e24 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	2202      	movs	r2, #2
 8004e20:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e22:	e12b      	b.n	800507c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	2382      	movs	r3, #130	@ 0x82
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d113      	bne.n	8004e58 <HAL_SPI_Receive+0x60>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10f      	bne.n	8004e58 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	225d      	movs	r2, #93	@ 0x5d
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	881c      	ldrh	r4, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	0023      	movs	r3, r4
 8004e50:	f000 f924 	bl	800509c <HAL_SPI_TransmitReceive>
 8004e54:	0003      	movs	r3, r0
 8004e56:	e118      	b.n	800508a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	225c      	movs	r2, #92	@ 0x5c
 8004e5c:	5c9b      	ldrb	r3, [r3, r2]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Receive+0x6e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e111      	b.n	800508a <HAL_SPI_Receive+0x292>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	225c      	movs	r2, #92	@ 0x5c
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6e:	f7fe fb8b 	bl	8003588 <HAL_GetTick>
 8004e72:	0003      	movs	r3, r0
 8004e74:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_SPI_Receive+0x8c>
 8004e7c:	1dbb      	adds	r3, r7, #6
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8004e84:	2317      	movs	r3, #23
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e8c:	e0f6      	b.n	800507c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	225d      	movs	r2, #93	@ 0x5d
 8004e92:	2104      	movs	r1, #4
 8004e94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1dba      	adds	r2, r7, #6
 8004ea6:	2144      	movs	r1, #68	@ 0x44
 8004ea8:	8812      	ldrh	r2, [r2, #0]
 8004eaa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1dba      	adds	r2, r7, #6
 8004eb0:	2146      	movs	r1, #70	@ 0x46
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	23e0      	movs	r3, #224	@ 0xe0
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d908      	bls.n	8004ef2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	496a      	ldr	r1, [pc, #424]	@ (8005094 <HAL_SPI_Receive+0x29c>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	e008      	b.n	8004f04 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2180      	movs	r1, #128	@ 0x80
 8004efe:	0149      	lsls	r1, r1, #5
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d10f      	bne.n	8004f30 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2140      	movs	r1, #64	@ 0x40
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	495b      	ldr	r1, [pc, #364]	@ (8005098 <HAL_SPI_Receive+0x2a0>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b40      	cmp	r3, #64	@ 0x40
 8004f3c:	d007      	beq.n	8004f4e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2140      	movs	r1, #64	@ 0x40
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	23e0      	movs	r3, #224	@ 0xe0
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d900      	bls.n	8004f5c <HAL_SPI_Receive+0x164>
 8004f5a:	e071      	b.n	8005040 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f5c:	e035      	b.n	8004fca <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d117      	bne.n	8004f9c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	001a      	movs	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2246      	movs	r2, #70	@ 0x46
 8004f8c:	5a9b      	ldrh	r3, [r3, r2]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b299      	uxth	r1, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2246      	movs	r2, #70	@ 0x46
 8004f98:	5299      	strh	r1, [r3, r2]
 8004f9a:	e016      	b.n	8004fca <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9c:	f7fe faf4 	bl	8003588 <HAL_GetTick>
 8004fa0:	0002      	movs	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d802      	bhi.n	8004fb2 <HAL_SPI_Receive+0x1ba>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <HAL_SPI_Receive+0x1c0>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8004fb8:	2317      	movs	r3, #23
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	225d      	movs	r2, #93	@ 0x5d
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	5499      	strb	r1, [r3, r2]
          goto error;
 8004fc8:	e058      	b.n	800507c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2246      	movs	r2, #70	@ 0x46
 8004fce:	5a9b      	ldrh	r3, [r3, r2]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1c3      	bne.n	8004f5e <HAL_SPI_Receive+0x166>
 8004fd6:	e039      	b.n	800504c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d115      	bne.n	8005012 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	b292      	uxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	1c9a      	adds	r2, r3, #2
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2246      	movs	r2, #70	@ 0x46
 8005002:	5a9b      	ldrh	r3, [r3, r2]
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b299      	uxth	r1, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2246      	movs	r2, #70	@ 0x46
 800500e:	5299      	strh	r1, [r3, r2]
 8005010:	e016      	b.n	8005040 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005012:	f7fe fab9 	bl	8003588 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d802      	bhi.n	8005028 <HAL_SPI_Receive+0x230>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	d102      	bne.n	800502e <HAL_SPI_Receive+0x236>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 800502e:	2317      	movs	r3, #23
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	2203      	movs	r2, #3
 8005034:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	225d      	movs	r2, #93	@ 0x5d
 800503a:	2101      	movs	r1, #1
 800503c:	5499      	strb	r1, [r3, r2]
          goto error;
 800503e:	e01d      	b.n	800507c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2246      	movs	r2, #70	@ 0x46
 8005044:	5a9b      	ldrh	r3, [r3, r2]
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1c5      	bne.n	8004fd8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 fb34 	bl	80056c0 <SPI_EndRxTransaction>
 8005058:	1e03      	subs	r3, r0, #0
 800505a:	d002      	beq.n	8005062 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800506a:	2317      	movs	r3, #23
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e003      	b.n	800507c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	225d      	movs	r2, #93	@ 0x5d
 8005078:	2101      	movs	r1, #1
 800507a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	225c      	movs	r2, #92	@ 0x5c
 8005080:	2100      	movs	r1, #0
 8005082:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005084:	2317      	movs	r3, #23
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	781b      	ldrb	r3, [r3, #0]
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b007      	add	sp, #28
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	ffffefff 	.word	0xffffefff
 8005098:	ffffbfff 	.word	0xffffbfff

0800509c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	001a      	movs	r2, r3
 80050aa:	1cbb      	adds	r3, r7, #2
 80050ac:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050ae:	2301      	movs	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050b2:	2323      	movs	r3, #35	@ 0x23
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	225c      	movs	r2, #92	@ 0x5c
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x2c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e1c4      	b.n	8005452 <HAL_SPI_TransmitReceive+0x3b6>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	225c      	movs	r2, #92	@ 0x5c
 80050cc:	2101      	movs	r1, #1
 80050ce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d0:	f7fe fa5a 	bl	8003588 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050d8:	201b      	movs	r0, #27
 80050da:	183b      	adds	r3, r7, r0
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	215d      	movs	r1, #93	@ 0x5d
 80050e0:	5c52      	ldrb	r2, [r2, r1]
 80050e2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050ea:	2312      	movs	r3, #18
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	1cba      	adds	r2, r7, #2
 80050f0:	8812      	ldrh	r2, [r2, #0]
 80050f2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050f4:	183b      	adds	r3, r7, r0
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d011      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x84>
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	2382      	movs	r3, #130	@ 0x82
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	d107      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x7a>
 800510e:	183b      	adds	r3, r7, r0
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b04      	cmp	r3, #4
 8005114:	d004      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005116:	2323      	movs	r3, #35	@ 0x23
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	2202      	movs	r2, #2
 800511c:	701a      	strb	r2, [r3, #0]
    goto error;
 800511e:	e191      	b.n	8005444 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x98>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x98>
 800512c:	1cbb      	adds	r3, r7, #2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005134:	2323      	movs	r3, #35	@ 0x23
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
    goto error;
 800513c:	e182      	b.n	8005444 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	225d      	movs	r2, #93	@ 0x5d
 8005142:	5c9b      	ldrb	r3, [r3, r2]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b04      	cmp	r3, #4
 8005148:	d003      	beq.n	8005152 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	225d      	movs	r2, #93	@ 0x5d
 800514e:	2105      	movs	r1, #5
 8005150:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1cba      	adds	r2, r7, #2
 8005162:	2146      	movs	r1, #70	@ 0x46
 8005164:	8812      	ldrh	r2, [r2, #0]
 8005166:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1cba      	adds	r2, r7, #2
 800516c:	2144      	movs	r1, #68	@ 0x44
 800516e:	8812      	ldrh	r2, [r2, #0]
 8005170:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1cba      	adds	r2, r7, #2
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1cba      	adds	r2, r7, #2
 8005184:	8812      	ldrh	r2, [r2, #0]
 8005186:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	23e0      	movs	r3, #224	@ 0xe0
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	429a      	cmp	r2, r3
 800519e:	d908      	bls.n	80051b2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	49ac      	ldr	r1, [pc, #688]	@ (800545c <HAL_SPI_TransmitReceive+0x3c0>)
 80051ac:	400a      	ands	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	e008      	b.n	80051c4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2180      	movs	r1, #128	@ 0x80
 80051be:	0149      	lsls	r1, r1, #5
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2240      	movs	r2, #64	@ 0x40
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b40      	cmp	r3, #64	@ 0x40
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2140      	movs	r1, #64	@ 0x40
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	23e0      	movs	r3, #224	@ 0xe0
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d800      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x154>
 80051ee:	e083      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x168>
 80051f8:	2312      	movs	r3, #18
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d000      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x168>
 8005202:	e06d      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005228:	e05a      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	2b02      	cmp	r3, #2
 8005236:	d11b      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1d4>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x1d4>
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	2b01      	cmp	r3, #1
 8005246:	d113      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	2b01      	cmp	r3, #1
 800527c:	d11c      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x21c>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2246      	movs	r2, #70	@ 0x46
 8005282:	5a9b      	ldrh	r3, [r3, r2]
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2246      	movs	r2, #70	@ 0x46
 80052a6:	5a9b      	ldrh	r3, [r3, r2]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b299      	uxth	r1, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2246      	movs	r2, #70	@ 0x46
 80052b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052b8:	f7fe f966 	bl	8003588 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d80b      	bhi.n	80052e0 <HAL_SPI_TransmitReceive+0x244>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	3301      	adds	r3, #1
 80052cc:	d008      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80052ce:	2323      	movs	r3, #35	@ 0x23
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2203      	movs	r2, #3
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	225d      	movs	r2, #93	@ 0x5d
 80052da:	2101      	movs	r1, #1
 80052dc:	5499      	strb	r1, [r3, r2]
        goto error;
 80052de:	e0b1      	b.n	8005444 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d19f      	bne.n	800522a <HAL_SPI_TransmitReceive+0x18e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2246      	movs	r2, #70	@ 0x46
 80052ee:	5a9b      	ldrh	r3, [r3, r2]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d199      	bne.n	800522a <HAL_SPI_TransmitReceive+0x18e>
 80052f6:	e089      	b.n	800540c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_SPI_TransmitReceive+0x270>
 8005300:	2312      	movs	r3, #18
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d000      	beq.n	800530c <HAL_SPI_TransmitReceive+0x270>
 800530a:	e074      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	7812      	ldrb	r2, [r2, #0]
 8005318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005332:	e060      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2202      	movs	r2, #2
 800533c:	4013      	ands	r3, r2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d11c      	bne.n	800537c <HAL_SPI_TransmitReceive+0x2e0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_SPI_TransmitReceive+0x2e0>
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	2b01      	cmp	r3, #1
 8005350:	d114      	bne.n	800537c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2201      	movs	r2, #1
 8005384:	4013      	ands	r3, r2
 8005386:	2b01      	cmp	r3, #1
 8005388:	d11e      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x32c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2246      	movs	r2, #70	@ 0x46
 800538e:	5a9b      	ldrh	r3, [r3, r2]
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	001a      	movs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2246      	movs	r2, #70	@ 0x46
 80053b6:	5a9b      	ldrh	r3, [r3, r2]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b299      	uxth	r1, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2246      	movs	r2, #70	@ 0x46
 80053c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c4:	2301      	movs	r3, #1
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053c8:	f7fe f8de 	bl	8003588 <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d802      	bhi.n	80053de <HAL_SPI_TransmitReceive+0x342>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	3301      	adds	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x348>
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80053e4:	2323      	movs	r3, #35	@ 0x23
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	2203      	movs	r2, #3
 80053ea:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	225d      	movs	r2, #93	@ 0x5d
 80053f0:	2101      	movs	r1, #1
 80053f2:	5499      	strb	r1, [r3, r2]
        goto error;
 80053f4:	e026      	b.n	8005444 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d199      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x298>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2246      	movs	r2, #70	@ 0x46
 8005404:	5a9b      	ldrh	r3, [r3, r2]
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d193      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	0018      	movs	r0, r3
 8005414:	f000 f9b2 	bl	800577c <SPI_EndRxTxTransaction>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d006      	beq.n	800542a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800541c:	2323      	movs	r3, #35	@ 0x23
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005432:	2323      	movs	r3, #35	@ 0x23
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e003      	b.n	8005444 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	225d      	movs	r2, #93	@ 0x5d
 8005440:	2101      	movs	r1, #1
 8005442:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	225c      	movs	r2, #92	@ 0x5c
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800544c:	2323      	movs	r3, #35	@ 0x23
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	781b      	ldrb	r3, [r3, #0]
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b00a      	add	sp, #40	@ 0x28
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	ffffefff 	.word	0xffffefff

08005460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	1dfb      	adds	r3, r7, #7
 800546e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005470:	f7fe f88a 	bl	8003588 <HAL_GetTick>
 8005474:	0002      	movs	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005480:	f7fe f882 	bl	8003588 <HAL_GetTick>
 8005484:	0003      	movs	r3, r0
 8005486:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005488:	4b3a      	ldr	r3, [pc, #232]	@ (8005574 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	015b      	lsls	r3, r3, #5
 800548e:	0d1b      	lsrs	r3, r3, #20
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	4353      	muls	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	e058      	b.n	800554a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	d055      	beq.n	800554a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800549e:	f7fe f873 	bl	8003588 <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d902      	bls.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d142      	bne.n	800553a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	21e0      	movs	r1, #224	@ 0xe0
 80054c0:	438a      	bics	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	2382      	movs	r3, #130	@ 0x82
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d113      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	429a      	cmp	r2, r3
 80054da:	d005      	beq.n	80054e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2140      	movs	r1, #64	@ 0x40
 80054f4:	438a      	bics	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	019b      	lsls	r3, r3, #6
 8005500:	429a      	cmp	r2, r3
 8005502:	d110      	bne.n	8005526 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	491a      	ldr	r1, [pc, #104]	@ (8005578 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005510:	400a      	ands	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2180      	movs	r1, #128	@ 0x80
 8005520:	0189      	lsls	r1, r1, #6
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	225d      	movs	r2, #93	@ 0x5d
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	225c      	movs	r2, #92	@ 0x5c
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e017      	b.n	800556a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3b01      	subs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	425a      	negs	r2, r3
 800555a:	4153      	adcs	r3, r2
 800555c:	b2db      	uxtb	r3, r3
 800555e:	001a      	movs	r2, r3
 8005560:	1dfb      	adds	r3, r7, #7
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d197      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b008      	add	sp, #32
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	20000000 	.word	0x20000000
 8005578:	ffffdfff 	.word	0xffffdfff

0800557c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800558a:	2317      	movs	r3, #23
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005592:	f7fd fff9 	bl	8003588 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	18d3      	adds	r3, r2, r3
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80055a2:	f7fd fff1 	bl	8003588 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	330c      	adds	r3, #12
 80055b0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055b2:	4b41      	ldr	r3, [pc, #260]	@ (80056b8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	0013      	movs	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	00da      	lsls	r2, r3, #3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	0d1b      	lsrs	r3, r3, #20
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	4353      	muls	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055c8:	e068      	b.n	800569c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	23c0      	movs	r3, #192	@ 0xc0
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d10a      	bne.n	80055ea <SPI_WaitFifoStateUntilTimeout+0x6e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	2117      	movs	r1, #23
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	d055      	beq.n	800569c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055f0:	f7fd ffca 	bl	8003588 <HAL_GetTick>
 80055f4:	0002      	movs	r2, r0
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d902      	bls.n	8005606 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d142      	bne.n	800568c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	21e0      	movs	r1, #224	@ 0xe0
 8005612:	438a      	bics	r2, r1
 8005614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	2382      	movs	r3, #130	@ 0x82
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	429a      	cmp	r2, r3
 8005620:	d113      	bne.n	800564a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	429a      	cmp	r2, r3
 800562c:	d005      	beq.n	800563a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	2380      	movs	r3, #128	@ 0x80
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	429a      	cmp	r2, r3
 8005638:	d107      	bne.n	800564a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2140      	movs	r1, #64	@ 0x40
 8005646:	438a      	bics	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800564e:	2380      	movs	r3, #128	@ 0x80
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	429a      	cmp	r2, r3
 8005654:	d110      	bne.n	8005678 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4916      	ldr	r1, [pc, #88]	@ (80056bc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005662:	400a      	ands	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2180      	movs	r1, #128	@ 0x80
 8005672:	0189      	lsls	r1, r1, #6
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	225d      	movs	r2, #93	@ 0x5d
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	225c      	movs	r2, #92	@ 0x5c
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e010      	b.n	80056ae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	3b01      	subs	r3, #1
 800569a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d18e      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	0018      	movs	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b00a      	add	sp, #40	@ 0x28
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	20000000 	.word	0x20000000
 80056bc:	ffffdfff 	.word	0xffffdfff

080056c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	2382      	movs	r3, #130	@ 0x82
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d113      	bne.n	8005700 <SPI_EndRxTransaction+0x40>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d005      	beq.n	80056f0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d107      	bne.n	8005700 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2140      	movs	r1, #64	@ 0x40
 80056fc:	438a      	bics	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	0013      	movs	r3, r2
 800570a:	2200      	movs	r2, #0
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	f7ff fea7 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 8005712:	1e03      	subs	r3, r0, #0
 8005714:	d007      	beq.n	8005726 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571a:	2220      	movs	r2, #32
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e026      	b.n	8005774 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	2382      	movs	r3, #130	@ 0x82
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	429a      	cmp	r2, r3
 8005730:	d11f      	bne.n	8005772 <SPI_EndRxTransaction+0xb2>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	2380      	movs	r3, #128	@ 0x80
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	429a      	cmp	r2, r3
 800573c:	d005      	beq.n	800574a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	429a      	cmp	r2, r3
 8005748:	d113      	bne.n	8005772 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	23c0      	movs	r3, #192	@ 0xc0
 800574e:	00d9      	lsls	r1, r3, #3
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	0013      	movs	r3, r2
 8005758:	2200      	movs	r2, #0
 800575a:	f7ff ff0f 	bl	800557c <SPI_WaitFifoStateUntilTimeout>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d007      	beq.n	8005772 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005766:	2220      	movs	r2, #32
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e000      	b.n	8005774 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b004      	add	sp, #16
 800577a:	bd80      	pop	{r7, pc}

0800577c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	23c0      	movs	r3, #192	@ 0xc0
 800578c:	0159      	lsls	r1, r3, #5
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	0013      	movs	r3, r2
 8005796:	2200      	movs	r2, #0
 8005798:	f7ff fef0 	bl	800557c <SPI_WaitFifoStateUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d007      	beq.n	80057b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a4:	2220      	movs	r2, #32
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e027      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	0013      	movs	r3, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	2180      	movs	r1, #128	@ 0x80
 80057be:	f7ff fe4f 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80057c2:	1e03      	subs	r3, r0, #0
 80057c4:	d007      	beq.n	80057d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	2220      	movs	r2, #32
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e014      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	23c0      	movs	r3, #192	@ 0xc0
 80057da:	00d9      	lsls	r1, r3, #3
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	0013      	movs	r3, r2
 80057e4:	2200      	movs	r2, #0
 80057e6:	f7ff fec9 	bl	800557c <SPI_WaitFifoStateUntilTimeout>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f2:	2220      	movs	r2, #32
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e000      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}

08005808 <malloc>:
 8005808:	b510      	push	{r4, lr}
 800580a:	4b03      	ldr	r3, [pc, #12]	@ (8005818 <malloc+0x10>)
 800580c:	0001      	movs	r1, r0
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f000 f830 	bl	8005874 <_malloc_r>
 8005814:	bd10      	pop	{r4, pc}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	2000000c 	.word	0x2000000c

0800581c <free>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4b03      	ldr	r3, [pc, #12]	@ (800582c <free+0x10>)
 8005820:	0001      	movs	r1, r0
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	f000 f906 	bl	8005a34 <_free_r>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	2000000c 	.word	0x2000000c

08005830 <sbrk_aligned>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4e0f      	ldr	r6, [pc, #60]	@ (8005870 <sbrk_aligned+0x40>)
 8005834:	000d      	movs	r5, r1
 8005836:	6831      	ldr	r1, [r6, #0]
 8005838:	0004      	movs	r4, r0
 800583a:	2900      	cmp	r1, #0
 800583c:	d102      	bne.n	8005844 <sbrk_aligned+0x14>
 800583e:	f000 f8b1 	bl	80059a4 <_sbrk_r>
 8005842:	6030      	str	r0, [r6, #0]
 8005844:	0029      	movs	r1, r5
 8005846:	0020      	movs	r0, r4
 8005848:	f000 f8ac 	bl	80059a4 <_sbrk_r>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d103      	bne.n	8005858 <sbrk_aligned+0x28>
 8005850:	2501      	movs	r5, #1
 8005852:	426d      	negs	r5, r5
 8005854:	0028      	movs	r0, r5
 8005856:	bd70      	pop	{r4, r5, r6, pc}
 8005858:	2303      	movs	r3, #3
 800585a:	1cc5      	adds	r5, r0, #3
 800585c:	439d      	bics	r5, r3
 800585e:	42a8      	cmp	r0, r5
 8005860:	d0f8      	beq.n	8005854 <sbrk_aligned+0x24>
 8005862:	1a29      	subs	r1, r5, r0
 8005864:	0020      	movs	r0, r4
 8005866:	f000 f89d 	bl	80059a4 <_sbrk_r>
 800586a:	3001      	adds	r0, #1
 800586c:	d1f2      	bne.n	8005854 <sbrk_aligned+0x24>
 800586e:	e7ef      	b.n	8005850 <sbrk_aligned+0x20>
 8005870:	20000160 	.word	0x20000160

08005874 <_malloc_r>:
 8005874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005876:	2203      	movs	r2, #3
 8005878:	1ccb      	adds	r3, r1, #3
 800587a:	4393      	bics	r3, r2
 800587c:	3308      	adds	r3, #8
 800587e:	0005      	movs	r5, r0
 8005880:	001f      	movs	r7, r3
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d234      	bcs.n	80058f0 <_malloc_r+0x7c>
 8005886:	270c      	movs	r7, #12
 8005888:	42b9      	cmp	r1, r7
 800588a:	d833      	bhi.n	80058f4 <_malloc_r+0x80>
 800588c:	0028      	movs	r0, r5
 800588e:	f000 f871 	bl	8005974 <__malloc_lock>
 8005892:	4e37      	ldr	r6, [pc, #220]	@ (8005970 <_malloc_r+0xfc>)
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	001c      	movs	r4, r3
 8005898:	2c00      	cmp	r4, #0
 800589a:	d12f      	bne.n	80058fc <_malloc_r+0x88>
 800589c:	0039      	movs	r1, r7
 800589e:	0028      	movs	r0, r5
 80058a0:	f7ff ffc6 	bl	8005830 <sbrk_aligned>
 80058a4:	0004      	movs	r4, r0
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d15f      	bne.n	800596a <_malloc_r+0xf6>
 80058aa:	6834      	ldr	r4, [r6, #0]
 80058ac:	9400      	str	r4, [sp, #0]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d14a      	bne.n	800594a <_malloc_r+0xd6>
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	d052      	beq.n	800595e <_malloc_r+0xea>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	0028      	movs	r0, r5
 80058bc:	18e3      	adds	r3, r4, r3
 80058be:	9900      	ldr	r1, [sp, #0]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	f000 f86f 	bl	80059a4 <_sbrk_r>
 80058c6:	9b01      	ldr	r3, [sp, #4]
 80058c8:	4283      	cmp	r3, r0
 80058ca:	d148      	bne.n	800595e <_malloc_r+0xea>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	0028      	movs	r0, r5
 80058d0:	1aff      	subs	r7, r7, r3
 80058d2:	0039      	movs	r1, r7
 80058d4:	f7ff ffac 	bl	8005830 <sbrk_aligned>
 80058d8:	3001      	adds	r0, #1
 80058da:	d040      	beq.n	800595e <_malloc_r+0xea>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	19db      	adds	r3, r3, r7
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	6833      	ldr	r3, [r6, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d133      	bne.n	8005952 <_malloc_r+0xde>
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	e019      	b.n	8005924 <_malloc_r+0xb0>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dac9      	bge.n	8005888 <_malloc_r+0x14>
 80058f4:	230c      	movs	r3, #12
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	2000      	movs	r0, #0
 80058fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058fc:	6821      	ldr	r1, [r4, #0]
 80058fe:	1bc9      	subs	r1, r1, r7
 8005900:	d420      	bmi.n	8005944 <_malloc_r+0xd0>
 8005902:	290b      	cmp	r1, #11
 8005904:	d90a      	bls.n	800591c <_malloc_r+0xa8>
 8005906:	19e2      	adds	r2, r4, r7
 8005908:	6027      	str	r7, [r4, #0]
 800590a:	42a3      	cmp	r3, r4
 800590c:	d104      	bne.n	8005918 <_malloc_r+0xa4>
 800590e:	6032      	str	r2, [r6, #0]
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	6011      	str	r1, [r2, #0]
 8005914:	6053      	str	r3, [r2, #4]
 8005916:	e005      	b.n	8005924 <_malloc_r+0xb0>
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	e7f9      	b.n	8005910 <_malloc_r+0x9c>
 800591c:	6862      	ldr	r2, [r4, #4]
 800591e:	42a3      	cmp	r3, r4
 8005920:	d10e      	bne.n	8005940 <_malloc_r+0xcc>
 8005922:	6032      	str	r2, [r6, #0]
 8005924:	0028      	movs	r0, r5
 8005926:	f000 f82d 	bl	8005984 <__malloc_unlock>
 800592a:	0020      	movs	r0, r4
 800592c:	2207      	movs	r2, #7
 800592e:	300b      	adds	r0, #11
 8005930:	1d23      	adds	r3, r4, #4
 8005932:	4390      	bics	r0, r2
 8005934:	1ac2      	subs	r2, r0, r3
 8005936:	4298      	cmp	r0, r3
 8005938:	d0df      	beq.n	80058fa <_malloc_r+0x86>
 800593a:	1a1b      	subs	r3, r3, r0
 800593c:	50a3      	str	r3, [r4, r2]
 800593e:	e7dc      	b.n	80058fa <_malloc_r+0x86>
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	e7ef      	b.n	8005924 <_malloc_r+0xb0>
 8005944:	0023      	movs	r3, r4
 8005946:	6864      	ldr	r4, [r4, #4]
 8005948:	e7a6      	b.n	8005898 <_malloc_r+0x24>
 800594a:	9c00      	ldr	r4, [sp, #0]
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	e7ad      	b.n	80058ae <_malloc_r+0x3a>
 8005952:	001a      	movs	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	42a3      	cmp	r3, r4
 8005958:	d1fb      	bne.n	8005952 <_malloc_r+0xde>
 800595a:	2300      	movs	r3, #0
 800595c:	e7da      	b.n	8005914 <_malloc_r+0xa0>
 800595e:	230c      	movs	r3, #12
 8005960:	0028      	movs	r0, r5
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	f000 f80e 	bl	8005984 <__malloc_unlock>
 8005968:	e7c6      	b.n	80058f8 <_malloc_r+0x84>
 800596a:	6007      	str	r7, [r0, #0]
 800596c:	e7da      	b.n	8005924 <_malloc_r+0xb0>
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	20000164 	.word	0x20000164

08005974 <__malloc_lock>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4802      	ldr	r0, [pc, #8]	@ (8005980 <__malloc_lock+0xc>)
 8005978:	f000 f850 	bl	8005a1c <__retarget_lock_acquire_recursive>
 800597c:	bd10      	pop	{r4, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	200002a4 	.word	0x200002a4

08005984 <__malloc_unlock>:
 8005984:	b510      	push	{r4, lr}
 8005986:	4802      	ldr	r0, [pc, #8]	@ (8005990 <__malloc_unlock+0xc>)
 8005988:	f000 f849 	bl	8005a1e <__retarget_lock_release_recursive>
 800598c:	bd10      	pop	{r4, pc}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	200002a4 	.word	0x200002a4

08005994 <memset>:
 8005994:	0003      	movs	r3, r0
 8005996:	1882      	adds	r2, r0, r2
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	7019      	strb	r1, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <_sbrk_r>:
 80059a4:	2300      	movs	r3, #0
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	4d06      	ldr	r5, [pc, #24]	@ (80059c4 <_sbrk_r+0x20>)
 80059aa:	0004      	movs	r4, r0
 80059ac:	0008      	movs	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fd fbbc 	bl	800312c <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d103      	bne.n	80059c0 <_sbrk_r+0x1c>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d000      	beq.n	80059c0 <_sbrk_r+0x1c>
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	200002a0 	.word	0x200002a0

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	@ (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	2000000c 	.word	0x2000000c

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	2600      	movs	r6, #0
 80059d8:	4c0c      	ldr	r4, [pc, #48]	@ (8005a0c <__libc_init_array+0x38>)
 80059da:	4d0d      	ldr	r5, [pc, #52]	@ (8005a10 <__libc_init_array+0x3c>)
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	2600      	movs	r6, #0
 80059e6:	f000 f86f 	bl	8005ac8 <_init>
 80059ea:	4c0a      	ldr	r4, [pc, #40]	@ (8005a14 <__libc_init_array+0x40>)
 80059ec:	4d0a      	ldr	r5, [pc, #40]	@ (8005a18 <__libc_init_array+0x44>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	00b3      	lsls	r3, r6, #2
 80059fa:	58eb      	ldr	r3, [r5, r3]
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	00b3      	lsls	r3, r6, #2
 8005a04:	58eb      	ldr	r3, [r5, r3]
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08005c98 	.word	0x08005c98
 8005a10:	08005c98 	.word	0x08005c98
 8005a14:	08005c9c 	.word	0x08005c9c
 8005a18:	08005c98 	.word	0x08005c98

08005a1c <__retarget_lock_acquire_recursive>:
 8005a1c:	4770      	bx	lr

08005a1e <__retarget_lock_release_recursive>:
 8005a1e:	4770      	bx	lr

08005a20 <memcpy>:
 8005a20:	2300      	movs	r3, #0
 8005a22:	b510      	push	{r4, lr}
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d100      	bne.n	8005a2a <memcpy+0xa>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	5ccc      	ldrb	r4, [r1, r3]
 8005a2c:	54c4      	strb	r4, [r0, r3]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	e7f8      	b.n	8005a24 <memcpy+0x4>
	...

08005a34 <_free_r>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	0005      	movs	r5, r0
 8005a38:	1e0c      	subs	r4, r1, #0
 8005a3a:	d010      	beq.n	8005a5e <_free_r+0x2a>
 8005a3c:	3c04      	subs	r4, #4
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da00      	bge.n	8005a46 <_free_r+0x12>
 8005a44:	18e4      	adds	r4, r4, r3
 8005a46:	0028      	movs	r0, r5
 8005a48:	f7ff ff94 	bl	8005974 <__malloc_lock>
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac4 <_free_r+0x90>)
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <_free_r+0x2c>
 8005a54:	6063      	str	r3, [r4, #4]
 8005a56:	6014      	str	r4, [r2, #0]
 8005a58:	0028      	movs	r0, r5
 8005a5a:	f7ff ff93 	bl	8005984 <__malloc_unlock>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d908      	bls.n	8005a76 <_free_r+0x42>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	1821      	adds	r1, r4, r0
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	d1f3      	bne.n	8005a54 <_free_r+0x20>
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	1809      	adds	r1, r1, r0
 8005a72:	6021      	str	r1, [r4, #0]
 8005a74:	e7ee      	b.n	8005a54 <_free_r+0x20>
 8005a76:	001a      	movs	r2, r3
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <_free_r+0x4e>
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	d9f9      	bls.n	8005a76 <_free_r+0x42>
 8005a82:	6811      	ldr	r1, [r2, #0]
 8005a84:	1850      	adds	r0, r2, r1
 8005a86:	42a0      	cmp	r0, r4
 8005a88:	d10b      	bne.n	8005aa2 <_free_r+0x6e>
 8005a8a:	6820      	ldr	r0, [r4, #0]
 8005a8c:	1809      	adds	r1, r1, r0
 8005a8e:	1850      	adds	r0, r2, r1
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	4283      	cmp	r3, r0
 8005a94:	d1e0      	bne.n	8005a58 <_free_r+0x24>
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	1841      	adds	r1, r0, r1
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	6053      	str	r3, [r2, #4]
 8005aa0:	e7da      	b.n	8005a58 <_free_r+0x24>
 8005aa2:	42a0      	cmp	r0, r4
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x78>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d5      	b.n	8005a58 <_free_r+0x24>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	d103      	bne.n	8005abc <_free_r+0x88>
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	1809      	adds	r1, r1, r0
 8005aba:	6021      	str	r1, [r4, #0]
 8005abc:	6063      	str	r3, [r4, #4]
 8005abe:	6054      	str	r4, [r2, #4]
 8005ac0:	e7ca      	b.n	8005a58 <_free_r+0x24>
 8005ac2:	46c0      	nop			@ (mov r8, r8)
 8005ac4:	20000164 	.word	0x20000164

08005ac8 <_init>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr

08005ad4 <_fini>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr
